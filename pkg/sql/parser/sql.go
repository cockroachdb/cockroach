// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const HAS_SOME_KEY = 57700
const HAS_ALL_KEYS = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6910

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 712,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	153, 562,
	-2, 0,
	-1, 64,
	96, 712,
	157, 712,
	330, 712,
	331, 712,
	-2, 0,
	-1, 74,
	1, 674,
	216, 674,
	261, 674,
	377, 674,
	379, 674,
	381, 674,
	382, 674,
	-2, 687,
	-1, 107,
	4, 714,
	20, 714,
	21, 714,
	23, 714,
	28, 714,
	33, 714,
	34, 714,
	35, 714,
	36, 714,
	37, 714,
	38, 714,
	39, 714,
	40, 714,
	41, 714,
	42, 714,
	44, 714,
	45, 714,
	46, 714,
	47, 714,
	48, 714,
	51, 714,
	52, 714,
	53, 714,
	55, 714,
	56, 714,
	60, 714,
	61, 714,
	62, 714,
	64, 714,
	65, 714,
	66, 714,
	67, 714,
	69, 714,
	71, 714,
	72, 714,
	75, 714,
	76, 714,
	77, 714,
	85, 714,
	86, 714,
	87, 714,
	88, 714,
	89, 714,
	90, 714,
	91, 714,
	92, 714,
	94, 714,
	96, 714,
	98, 714,
	101, 714,
	102, 714,
	104, 714,
	108, 714,
	109, 714,
	110, 714,
	111, 714,
	112, 714,
	113, 714,
	114, 714,
	122, 714,
	123, 714,
	124, 714,
	125, 714,
	126, 714,
	128, 714,
	130, 714,
	135, 714,
	136, 714,
	138, 714,
	141, 714,
	142, 714,
	145, 714,
	146, 714,
	147, 714,
	148, 714,
	151, 714,
	152, 714,
	154, 714,
	157, 714,
	158, 714,
	159, 714,
	160, 714,
	161, 714,
	162, 714,
	163, 714,
	164, 714,
	166, 714,
	169, 714,
	170, 714,
	171, 714,
	173, 714,
	174, 714,
	175, 714,
	176, 714,
	177, 714,
	179, 714,
	180, 714,
	182, 714,
	184, 714,
	185, 714,
	188, 714,
	189, 714,
	192, 714,
	194, 714,
	196, 714,
	197, 714,
	198, 714,
	199, 714,
	200, 714,
	202, 714,
	203, 714,
	204, 714,
	205, 714,
	209, 714,
	210, 714,
	211, 714,
	212, 714,
	213, 714,
	215, 714,
	217, 714,
	218, 714,
	221, 714,
	222, 714,
	224, 714,
	226, 714,
	227, 714,
	228, 714,
	229, 714,
	230, 714,
	231, 714,
	233, 714,
	234, 714,
	235, 714,
	236, 714,
	237, 714,
	239, 714,
	240, 714,
	241, 714,
	242, 714,
	243, 714,
	244, 714,
	245, 714,
	246, 714,
	248, 714,
	249, 714,
	250, 714,
	251, 714,
	252, 714,
	254, 714,
	255, 714,
	256, 714,
	257, 714,
	258, 714,
	259, 714,
	260, 714,
	262, 714,
	264, 714,
	265, 714,
	266, 714,
	267, 714,
	269, 714,
	270, 714,
	271, 714,
	272, 714,
	273, 714,
	275, 714,
	276, 714,
	277, 714,
	278, 714,
	279, 714,
	281, 714,
	282, 714,
	283, 714,
	284, 714,
	286, 714,
	287, 714,
	288, 714,
	289, 714,
	291, 714,
	292, 714,
	293, 714,
	294, 714,
	295, 714,
	296, 714,
	297, 714,
	298, 714,
	299, 714,
	300, 714,
	302, 714,
	304, 714,
	305, 714,
	306, 714,
	307, 714,
	308, 714,
	309, 714,
	310, 714,
	311, 714,
	313, 714,
	314, 714,
	315, 714,
	318, 714,
	319, 714,
	320, 714,
	321, 714,
	323, 714,
	324, 714,
	325, 714,
	326, 714,
	329, 714,
	330, 714,
	331, 714,
	332, 714,
	334, 714,
	336, 714,
	337, 714,
	338, 714,
	339, 714,
	340, 714,
	341, 714,
	344, 714,
	349, 714,
	350, 714,
	351, 714,
	352, 714,
	353, 714,
	-2, 0,
	-1, 124,
	1, 677,
	216, 677,
	261, 677,
	377, 677,
	379, 677,
	381, 677,
	382, 677,
	-2, 686,
	-1, 129,
	1, 611,
	169, 611,
	239, 611,
	243, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 131,
	1, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 132,
	1, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 133,
	1, 615,
	381, 615,
	382, 615,
	-2, 0,
	-1, 140,
	4, 720,
	5, 720,
	6, 720,
	7, 720,
	8, 720,
	9, 720,
	20, 720,
	21, 720,
	23, 720,
	28, 720,
	29, 720,
	33, 720,
	34, 720,
	35, 720,
	36, 720,
	37, 720,
	38, 720,
	39, 720,
	40, 720,
	41, 720,
	42, 720,
	44, 720,
	45, 720,
	46, 720,
	47, 720,
	48, 720,
	49, 720,
	50, 720,
	51, 720,
	52, 720,
	53, 720,
	55, 720,
	56, 720,
	58, 720,
	60, 720,
	61, 720,
	62, 720,
	64, 720,
	65, 720,
	66, 720,
	67, 720,
	69, 720,
	71, 720,
	72, 720,
	74, 720,
	75, 720,
	76, 720,
	77, 720,
	79, 720,
	80, 720,
	81, 720,
	83, 720,
	84, 720,
	85, 720,
	86, 720,
	87, 720,
	88, 720,
	89, 720,
	90, 720,
	91, 720,
	92, 720,
	94, 720,
	96, 720,
	98, 720,
	101, 720,
	102, 720,
	104, 720,
	108, 720,
	109, 720,
	110, 720,
	111, 720,
	112, 720,
	113, 720,
	114, 720,
	115, 720,
	116, 720,
	122, 720,
	123, 720,
	124, 720,
	125, 720,
	126, 720,
	128, 720,
	130, 720,
	133, 720,
	135, 720,
	136, 720,
	138, 720,
	141, 720,
	142, 720,
	145, 720,
	146, 720,
	147, 720,
	148, 720,
	149, 720,
	151, 720,
	152, 720,
	154, 720,
	156, 720,
	157, 720,
	158, 720,
	159, 720,
	160, 720,
	161, 720,
	162, 720,
	163, 720,
	164, 720,
	166, 720,
	168, 720,
	169, 720,
	170, 720,
	171, 720,
	172, 720,
	173, 720,
	174, 720,
	175, 720,
	176, 720,
	177, 720,
	179, 720,
	180, 720,
	182, 720,
	183, 720,
	184, 720,
	185, 720,
	186, 720,
	188, 720,
	189, 720,
	192, 720,
	194, 720,
	195, 720,
	196, 720,
	197, 720,
	198, 720,
	199, 720,
	200, 720,
	201, 720,
	202, 720,
	203, 720,
	204, 720,
	205, 720,
	206, 720,
	208, 720,
	209, 720,
	210, 720,
	211, 720,
	212, 720,
	213, 720,
	215, 720,
	218, 720,
	221, 720,
	222, 720,
	223, 720,
	224, 720,
	225, 720,
	226, 720,
	227, 720,
	228, 720,
	229, 720,
	230, 720,
	231, 720,
	233, 720,
	234, 720,
	235, 720,
	236, 720,
	237, 720,
	239, 720,
	240, 720,
	241, 720,
	242, 720,
	243, 720,
	244, 720,
	245, 720,
	246, 720,
	248, 720,
	249, 720,
	250, 720,
	251, 720,
	252, 720,
	254, 720,
	255, 720,
	256, 720,
	257, 720,
	258, 720,
	259, 720,
	260, 720,
	262, 720,
	263, 720,
	264, 720,
	265, 720,
	266, 720,
	267, 720,
	269, 720,
	270, 720,
	271, 720,
	272, 720,
	273, 720,
	275, 720,
	276, 720,
	277, 720,
	278, 720,
	279, 720,
	280, 720,
	281, 720,
	282, 720,
	283, 720,
	284, 720,
	285, 720,
	286, 720,
	287, 720,
	288, 720,
	289, 720,
	291, 720,
	292, 720,
	293, 720,
	294, 720,
	295, 720,
	296, 720,
	297, 720,
	298, 720,
	299, 720,
	300, 720,
	302, 720,
	304, 720,
	305, 720,
	306, 720,
	307, 720,
	308, 720,
	309, 720,
	310, 720,
	311, 720,
	313, 720,
	314, 720,
	315, 720,
	318, 720,
	319, 720,
	320, 720,
	321, 720,
	322, 720,
	323, 720,
	324, 720,
	325, 720,
	326, 720,
	329, 720,
	330, 720,
	331, 720,
	332, 720,
	333, 720,
	334, 720,
	336, 720,
	337, 720,
	338, 720,
	339, 720,
	340, 720,
	341, 720,
	344, 720,
	349, 720,
	350, 720,
	351, 720,
	352, 720,
	353, 720,
	354, 720,
	364, 720,
	369, 720,
	370, 720,
	371, 720,
	378, 720,
	384, 720,
	-2, 0,
	-1, 143,
	1, 54,
	382, 54,
	-2, 712,
	-1, 515,
	132, 1334,
	316, 1334,
	359, 1334,
	380, 1334,
	-2, 0,
	-1, 516,
	132, 1281,
	316, 1281,
	359, 1281,
	380, 1281,
	-2, 0,
	-1, 518,
	132, 1393,
	316, 1393,
	359, 1393,
	380, 1393,
	-2, 0,
	-1, 520,
	132, 1416,
	316, 1416,
	359, 1416,
	380, 1416,
	-2, 0,
	-1, 527,
	132, 1339,
	316, 1339,
	359, 1339,
	380, 1339,
	-2, 331,
	-1, 553,
	1, 409,
	377, 409,
	379, 409,
	381, 409,
	382, 409,
	-2, 0,
	-1, 554,
	1, 461,
	129, 461,
	377, 461,
	379, 461,
	381, 461,
	382, 461,
	-2, 0,
	-1, 560,
	1, 423,
	377, 423,
	379, 423,
	381, 423,
	382, 423,
	-2, 0,
	-1, 562,
	1, 427,
	377, 427,
	379, 427,
	381, 427,
	382, 427,
	-2, 0,
	-1, 565,
	1, 435,
	377, 435,
	379, 435,
	381, 435,
	382, 435,
	-2, 0,
	-1, 566,
	1, 440,
	377, 440,
	379, 440,
	381, 440,
	382, 440,
	-2, 0,
	-1, 569,
	1, 450,
	377, 450,
	379, 450,
	381, 450,
	382, 450,
	-2, 0,
	-1, 585,
	117, 722,
	129, 722,
	187, 722,
	214, 722,
	-2, 681,
	-1, 588,
	117, 721,
	129, 721,
	187, 721,
	214, 721,
	-2, 678,
	-1, 645,
	378, 1259,
	-2, 1252,
	-1, 646,
	378, 1260,
	-2, 1253,
	-1, 652,
	5, 906,
	378, 906,
	-2, 1468,
	-1, 677,
	5, 865,
	-2, 1437,
	-1, 678,
	5, 900,
	378, 900,
	-2, 1439,
	-1, 679,
	5, 875,
	-2, 1440,
	-1, 680,
	5, 874,
	-2, 1441,
	-1, 681,
	5, 900,
	378, 900,
	-2, 1444,
	-1, 682,
	5, 900,
	378, 900,
	-2, 1445,
	-1, 683,
	5, 901,
	-2, 1448,
	-1, 684,
	5, 857,
	-2, 1449,
	-1, 685,
	5, 857,
	-2, 1450,
	-1, 686,
	5, 882,
	-2, 1454,
	-1, 687,
	5, 867,
	-2, 1455,
	-1, 688,
	5, 868,
	-2, 1456,
	-1, 689,
	5, 858,
	-2, 1462,
	-1, 690,
	5, 859,
	-2, 1463,
	-1, 691,
	5, 860,
	-2, 1464,
	-1, 692,
	5, 861,
	-2, 1465,
	-1, 693,
	5, 862,
	-2, 1466,
	-1, 694,
	5, 863,
	-2, 1467,
	-1, 695,
	5, 857,
	-2, 1474,
	-1, 696,
	5, 866,
	-2, 1479,
	-1, 697,
	5, 864,
	-2, 1482,
	-1, 698,
	5, 898,
	378, 898,
	-2, 1484,
	-1, 699,
	5, 902,
	-2, 1487,
	-1, 700,
	5, 904,
	-2, 1488,
	-1, 701,
	5, 897,
	378, 897,
	-2, 1493,
	-1, 886,
	230, 710,
	-2, 555,
	-1, 890,
	216, 1256,
	-2, 0,
	-1, 925,
	1, 216,
	377, 216,
	379, 216,
	381, 216,
	382, 216,
	-2, 685,
	-1, 932,
	4, 1492,
	10, 1492,
	11, 1492,
	13, 1492,
	14, 1492,
	15, 1492,
	16, 1492,
	17, 1492,
	18, 1492,
	20, 1492,
	21, 1492,
	23, 1492,
	26, 1492,
	28, 1492,
	30, 1492,
	33, 1492,
	34, 1492,
	35, 1492,
	36, 1492,
	37, 1492,
	38, 1492,
	39, 1492,
	40, 1492,
	41, 1492,
	42, 1492,
	44, 1492,
	45, 1492,
	46, 1492,
	47, 1492,
	48, 1492,
	51, 1492,
	52, 1492,
	53, 1492,
	55, 1492,
	56, 1492,
	57, 1492,
	60, 1492,
	61, 1492,
	62, 1492,
	63, 1492,
	64, 1492,
	65, 1492,
	66, 1492,
	67, 1492,
	69, 1492,
	70, 1492,
	71, 1492,
	72, 1492,
	74, 1492,
	75, 1492,
	76, 1492,
	77, 1492,
	85, 1492,
	86, 1492,
	87, 1492,
	88, 1492,
	89, 1492,
	90, 1492,
	91, 1492,
	92, 1492,
	94, 1492,
	96, 1492,
	98, 1492,
	101, 1492,
	102, 1492,
	104, 1492,
	108, 1492,
	109, 1492,
	110, 1492,
	111, 1492,
	112, 1492,
	113, 1492,
	114, 1492,
	118, 1492,
	119, 1492,
	120, 1492,
	121, 1492,
	122, 1492,
	123, 1492,
	124, 1492,
	125, 1492,
	126, 1492,
	127, 1492,
	128, 1492,
	130, 1492,
	133, 1492,
	135, 1492,
	136, 1492,
	138, 1492,
	141, 1492,
	142, 1492,
	145, 1492,
	146, 1492,
	147, 1492,
	148, 1492,
	149, 1492,
	150, 1492,
	151, 1492,
	152, 1492,
	154, 1492,
	156, 1492,
	157, 1492,
	158, 1492,
	159, 1492,
	160, 1492,
	161, 1492,
	162, 1492,
	163, 1492,
	164, 1492,
	166, 1492,
	168, 1492,
	169, 1492,
	170, 1492,
	171, 1492,
	172, 1492,
	173, 1492,
	174, 1492,
	175, 1492,
	176, 1492,
	177, 1492,
	179, 1492,
	180, 1492,
	182, 1492,
	183, 1492,
	184, 1492,
	185, 1492,
	186, 1492,
	188, 1492,
	189, 1492,
	192, 1492,
	193, 1492,
	194, 1492,
	196, 1492,
	197, 1492,
	198, 1492,
	199, 1492,
	200, 1492,
	201, 1492,
	202, 1492,
	203, 1492,
	204, 1492,
	205, 1492,
	209, 1492,
	210, 1492,
	211, 1492,
	212, 1492,
	213, 1492,
	215, 1492,
	218, 1492,
	219, 1492,
	221, 1492,
	222, 1492,
	224, 1492,
	226, 1492,
	227, 1492,
	228, 1492,
	229, 1492,
	230, 1492,
	231, 1492,
	233, 1492,
	234, 1492,
	235, 1492,
	236, 1492,
	237, 1492,
	239, 1492,
	240, 1492,
	241, 1492,
	242, 1492,
	243, 1492,
	244, 1492,
	245, 1492,
	246, 1492,
	248, 1492,
	249, 1492,
	250, 1492,
	251, 1492,
	252, 1492,
	253, 1492,
	254, 1492,
	255, 1492,
	256, 1492,
	257, 1492,
	258, 1492,
	259, 1492,
	260, 1492,
	262, 1492,
	263, 1492,
	264, 1492,
	265, 1492,
	266, 1492,
	267, 1492,
	268, 1492,
	269, 1492,
	270, 1492,
	271, 1492,
	272, 1492,
	273, 1492,
	275, 1492,
	276, 1492,
	277, 1492,
	278, 1492,
	279, 1492,
	281, 1492,
	282, 1492,
	283, 1492,
	284, 1492,
	285, 1492,
	286, 1492,
	287, 1492,
	288, 1492,
	289, 1492,
	291, 1492,
	292, 1492,
	293, 1492,
	294, 1492,
	295, 1492,
	296, 1492,
	297, 1492,
	298, 1492,
	299, 1492,
	300, 1492,
	302, 1492,
	304, 1492,
	305, 1492,
	306, 1492,
	307, 1492,
	308, 1492,
	309, 1492,
	310, 1492,
	311, 1492,
	313, 1492,
	314, 1492,
	315, 1492,
	318, 1492,
	319, 1492,
	320, 1492,
	321, 1492,
	323, 1492,
	324, 1492,
	325, 1492,
	326, 1492,
	329, 1492,
	330, 1492,
	331, 1492,
	332, 1492,
	334, 1492,
	336, 1492,
	337, 1492,
	338, 1492,
	339, 1492,
	340, 1492,
	341, 1492,
	344, 1492,
	349, 1492,
	350, 1492,
	351, 1492,
	352, 1492,
	353, 1492,
	354, 1492,
	355, 1492,
	357, 1492,
	358, 1492,
	359, 1492,
	360, 1492,
	361, 1492,
	362, 1492,
	363, 1492,
	364, 1492,
	366, 1492,
	367, 1492,
	368, 1492,
	369, 1492,
	370, 1492,
	371, 1492,
	372, 1492,
	373, 1492,
	374, 1492,
	376, 1492,
	379, 1492,
	380, 1492,
	383, 1492,
	384, 1492,
	-2, 0,
	-1, 945,
	132, 1393,
	316, 1393,
	359, 1393,
	380, 1393,
	-2, 0,
	-1, 962,
	132, 1416,
	316, 1416,
	359, 1416,
	380, 1416,
	-2, 0,
	-1, 963,
	169, 623,
	239, 623,
	243, 623,
	-2, 319,
	-1, 1035,
	117, 721,
	129, 721,
	187, 721,
	214, 721,
	-2, 682,
	-1, 1116,
	107, 687,
	117, 687,
	129, 687,
	165, 687,
	187, 687,
	214, 687,
	220, 687,
	327, 687,
	-2, 1035,
	-1, 1126,
	378, 1236,
	-2, 1224,
	-1, 1144,
	379, 1148,
	-2, 0,
	-1, 1168,
	169, 623,
	239, 623,
	243, 623,
	-2, 618,
	-1, 1196,
	379, 1148,
	-2, 0,
	-1, 1200,
	107, 687,
	117, 687,
	129, 687,
	165, 687,
	187, 687,
	214, 687,
	220, 687,
	327, 687,
	-2, 788,
	-1, 1342,
	169, 623,
	239, 623,
	243, 623,
	-2, 321,
	-1, 1450,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 941,
	-1, 1451,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 942,
	-1, 1452,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 943,
	-1, 1453,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 944,
	-1, 1454,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 945,
	-1, 1455,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 946,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 947,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 948,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 957,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 958,
	-1, 1468,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 959,
	-1, 1471,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 964,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 966,
	-1, 1479,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 970,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 971,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 972,
	-1, 1482,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 973,
	-1, 1551,
	132, 1159,
	378, 1259,
	-2, 1252,
	-1, 1552,
	132, 1160,
	-2, 1433,
	-1, 1553,
	132, 1161,
	-2, 1338,
	-1, 1554,
	132, 1162,
	-2, 1299,
	-1, 1555,
	132, 1163,
	-2, 1316,
	-1, 1556,
	132, 1164,
	-2, 1337,
	-1, 1557,
	132, 1165,
	-2, 1390,
	-1, 1633,
	1, 789,
	74, 789,
	107, 789,
	117, 789,
	129, 789,
	133, 789,
	137, 789,
	139, 789,
	156, 789,
	165, 789,
	172, 789,
	183, 789,
	187, 789,
	201, 789,
	214, 789,
	216, 789,
	220, 789,
	261, 789,
	263, 789,
	327, 789,
	335, 789,
	346, 789,
	347, 789,
	356, 789,
	377, 789,
	379, 789,
	381, 789,
	382, 789,
	383, 789,
	-2, 788,
	-1, 1781,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 965,
	-1, 1782,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 967,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 968,
	-1, 1805,
	225, 1119,
	-2, 1121,
	-1, 2039,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 969,
	-1, 2044,
	168, 0,
	-2, 985,
	-1, 2053,
	225, 1120,
	-2, 1122,
	-1, 2095,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1012,
	-1, 2096,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1013,
	-1, 2097,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1014,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1018,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1019,
	-1, 2103,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1020,
	-1, 2236,
	168, 0,
	-2, 986,
	-1, 2239,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 989,
	-1, 2240,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 991,
	-1, 2361,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 990,
	-1, 2362,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 992,
	-1, 2369,
	168, 0,
	-2, 1021,
	-1, 2446,
	168, 0,
	-2, 1022,
	-1, 2527,
	36, 0,
	149, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1436,
	-1, 2613,
	378, 1504,
	-2, 496,
}

const sqlPrivate = 57344

const sqlLast = 43866

var sqlAct = [...]int{

	646, 2595, 2609, 2331, 2330, 2610, 2188, 2535, 2593, 2499,
	2526, 1699, 2536, 2576, 2395, 2537, 2015, 2341, 1240, 2072,
	1707, 2451, 1247, 605, 1775, 2525, 644, 643, 73, 983,
	636, 1336, 1981, 2198, 2290, 1282, 1337, 2222, 2304, 2220,
	750, 622, 182, 880, 2154, 2375, 2270, 182, 2028, 2155,
	1198, 1683, 1696, 1678, 1983, 182, 1194, 2214, 1871, 1203,
	183, 2125, 1898, 1919, 182, 1177, 1708, 1682, 1646, 182,
	182, 1637, 1243, 182, 1870, 1429, 182, 1629, 1672, 1989,
	1906, 597, 123, 777, 182, 1424, 1771, 457, 1816, 1754,
	966, 1628, 1236, 1122, 1367, 1206, 616, 1040, 1208, 1507,
	1494, 472, 26, 1178, 1506, 1491, 1260, 1531, 526, 1515,
	1363, 1407, 756, 1405, 454, 965, 915, 589, 1525, 1154,
	1680, 1158, 912, 1580, 905, 985, 926, 1701, 759, 1686,
	1615, 1185, 1602, 738, 1547, 182, 182, 1111, 1041, 1679,
	615, 506, 124, 182, 125, 1408, 123, 1406, 1366, 638,
	1168, 173, 484, 523, 902, 594, 519, 1254, 736, 178,
	1167, 2305, 1045, 547, 2139, 1804, 1262, 2140, 593, 182,
	182, 182, 182, 779, 2332, 1262, 1262, 182, 182, 2626,
	2625, 40, 2618, 2619, 2619, 2332, 2619, 1700, 593, 2572,
	2571, 2570, 41, 1231, 1231, 1231, 2552, 2547, 1195, 2546,
	2303, 1722, 753, 1722, 2543, 44, 2523, 2522, 1231, 2494,
	1737, 1737, 2489, 1730, 588, 2485, 2355, 2631, 2477, 1231,
	1999, 498, 2303, 603, 1998, 123, 2448, 2037, 2426, 1604,
	1730, 51, 2303, 780, 2423, 2421, 2406, 2405, 1231, 2303,
	1231, 2303, 2383, 2380, 2363, 26, 1231, 1231, 1730, 2326,
	2324, 2302, 2283, 1722, 1722, 2303, 1231, 2238, 2213, 2208,
	62, 1730, 1677, 1677, 2617, 1673, 586, 63, 585, 479,
	64, 2135, 2048, 1227, 1722, 2136, 1722, 1841, 1842, 2009,
	1970, 764, 768, 1971, 1231, 1895, 1888, 1673, 774, 1231,
	1889, 598, 2128, 1886, 740, 1841, 1842, 1722, 1859, 1860,
	1861, 1885, 41, 66, 1884, 1722, 1808, 2495, 1722, 1741,
	1737, 2235, 1809, 1722, 1737, 44, 1729, 868, 2355, 1721,
	1730, 1841, 1842, 1722, 1859, 1860, 1861, 742, 2627, 743,
	1856, 1722, 1676, 1704, 1609, 2128, 1677, 1275, 1608, 2606,
	1528, 1276, 1603, 2226, 2026, 1635, 2108, 2050, 1856, 1231,
	1971, 1815, 1774, 1752, 1345, 1172, 1510, 1056, 1057, 140,
	1086, 1087, 1088, 1096, 1097, 1098, 866, 947, 143, 2306,
	1364, 944, 943, 1089, 1856, 942, 941, 1263, 1283, 479,
	1059, 940, 939, 1100, 938, 937, 1263, 1263, 142, 67,
	936, 935, 1529, 934, 1847, 933, 744, 741, 140, 579,
	578, 577, 545, 544, 1058, 543, 542, 1056, 1057, 541,
	1078, 540, 1847, 66, 539, 127, 69, 1075, 70, 182,
	538, 182, 182, 537, 182, 141, 536, 142, 535, 182,
	1059, 639, 140, 134, 534, 182, 1756, 533, 1847, 478,
	135, 532, 103, 531, 530, 529, 1530, 1527, 182, 182,
	182, 182, 182, 1862, 1058, 514, 513, 929, 1056, 1057,
	1857, 142, 512, 126, 141, 1081, 1082, 1083, 1084, 2599,
	511, 1998, 702, 510, 1064, 704, 445, 444, 1857, 182,
	1603, 1059, 443, 442, 441, 594, 596, 426, 425, 1841,
	1842, 417, 416, 182, 415, 414, 1093, 1101, 141, 67,
	407, 1268, 126, 406, 1857, 1058, 134, 166, 1544, 182,
	1261, 1398, 165, 135, 140, 1099, 164, 930, 163, 182,
	162, 161, 160, 1532, 1064, 127, 69, 884, 70, 159,
	888, 158, 157, 1091, 156, 1858, 126, 155, 154, 872,
	1079, 153, 140, 142, 152, 151, 150, 904, 149, 478,
	929, 148, 103, 1858, 147, 146, 908, 908, 145, 144,
	1199, 1370, 1914, 978, 2597, 1542, 1090, 1540, 1538, 2542,
	2524, 142, 2509, 909, 879, 1064, 2504, 1841, 1842, 1858,
	141, 182, 927, 2443, 1052, 2594, 981, 2424, 134, 2348,
	1079, 919, 2269, 2268, 2264, 135, 2263, 2256, 2255, 2254,
	1085, 948, 1526, 2250, 2249, 2248, 1847, 2247, 141, 2241,
	930, 1841, 1842, 2219, 2122, 1080, 134, 2117, 1703, 1973,
	2116, 2115, 976, 135, 2058, 1969, 1926, 1922, 1735, 1130,
	1893, 1890, 1094, 1852, 1850, 1851, 1843, 1844, 1845, 1846,
	1848, 1849, 1853, 1854, 1855, 781, 126, 1502, 1878, 594,
	1869, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848, 1849,
	1840, 1837, 1836, 1834, 751, 1080, 1821, 1820, 1853, 1854,
	1855, 963, 1857, 1805, 1035, 960, 1633, 1852, 1850, 1851,
	1843, 1844, 1845, 1846, 1848, 1849, 1052, 1051, 1197, 1279,
	877, 2620, 872, 1031, 1847, 1196, 1123, 2604, 1114, 2584,
	2583, 1092, 1246, 1036, 1070, 1071, 1077, 1076, 1072, 1073,
	1074, 1095, 979, 1069, 1067, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 2074, 2514, 2513, 2013, 2512, 2480, 1847, 2472,
	2265, 2471, 1365, 1770, 2616, 1037, 182, 1038, 182, 2462,
	586, 1769, 585, 2460, 2438, 2437, 2436, 1858, 2392, 2371,
	2356, 2347, 2335, 2323, 1048, 1049, 2309, 2261, 140, 1503,
	2196, 182, 182, 1053, 1067, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 2194, 2193, 2191, 2454, 1183, 2163, 2162, 2143,
	2131, 2043, 1959, 1953, 1176, 1939, 1938, 142, 1924, 594,
	1894, 1868, 1830, 1126, 1857, 1829, 1826, 1801, 1796, 1496,
	1159, 1156, 1157, 1162, 1841, 1842, 1620, 1160, 1274, 1592,
	1056, 1057, 1181, 1536, 1239, 752, 1175, 1163, 1166, 1062,
	1063, 1065, 1066, 1152, 141, 1151, 1197, 1150, 1149, 1148,
	40, 1147, 134, 1059, 1146, 1145, 1144, 123, 1143, 135,
	1142, 41, 1141, 1140, 1939, 1852, 1850, 1851, 1843, 1844,
	1845, 1846, 1848, 1849, 44, 1139, 1138, 1058, 1137, 1136,
	1135, 1134, 126, 1127, 1115, 1114, 929, 182, 959, 1858,
	1193, 951, 923, 779, 2354, 2243, 2218, 1171, 2138, 182,
	51, 2134, 1807, 1984, 1621, 1543, 1123, 1169, 1732, 1201,
	2011, 182, 1112, 1841, 1842, 2358, 1173, 182, 975, 182,
	1740, 182, 1229, 2357, 2351, 182, 2141, 1245, 2000, 62,
	1164, 1034, 1673, 1029, 1199, 1165, 63, 1962, 479, 64,
	1351, 1847, 1956, 1238, 1528, 1952, 930, 1892, 1891, 931,
	1780, 1056, 1057, 780, 1912, 1402, 878, 607, 1845, 1846,
	1848, 1849, 1541, 1739, 1539, 1537, 182, 182, 972, 1132,
	2016, 1244, 66, 929, 1059, 182, 1232, 1762, 182, 2376,
	1700, 1216, 1155, 2075, 1251, 1812, 1516, 446, 1850, 1851,
	1843, 1844, 1845, 1846, 1848, 1849, 1529, 1023, 1058, 779,
	2602, 2601, 1994, 2150, 2507, 1726, 2484, 2567, 182, 1409,
	2023, 592, 703, 182, 1280, 2568, 2317, 1647, 182, 182,
	1742, 182, 1129, 182, 2417, 182, 1209, 182, 1210, 904,
	731, 729, 1209, 930, 1210, 2416, 1265, 1024, 182, 1267,
	2414, 2413, 931, 1270, 182, 182, 1230, 727, 1639, 2182,
	1530, 1527, 733, 182, 724, 2179, 1015, 2174, 67, 780,
	752, 2147, 2146, 1825, 1824, 1823, 419, 167, 1064, 591,
	2298, 1253, 450, 1822, 1352, 182, 1783, 1725, 1256, 779,
	1668, 1639, 1371, 1664, 127, 69, 1661, 70, 1355, 1354,
	1638, 1364, 1361, 1478, 1650, 1170, 865, 2329, 1596, 2614,
	1595, 140, 973, 1439, 1697, 1385, 1396, 1211, 478, 2299,
	1032, 103, 2186, 1211, 123, 2012, 1372, 2031, 1277, 581,
	1278, 651, 960, 2397, 593, 493, 1338, 1532, 2187, 2483,
	142, 1339, 1493, 1342, 1079, 1966, 1841, 1842, 449, 780,
	1217, 1234, 1356, 1368, 1395, 974, 584, 1386, 2165, 2520,
	1500, 423, 170, 1375, 1257, 1498, 1493, 1397, 583, 1411,
	706, 1214, 1438, 594, 1055, 2068, 1376, 141, 594, 1379,
	958, 584, 1380, 1532, 1381, 134, 1382, 1358, 1383, 1215,
	1384, 2559, 135, 1843, 1844, 1845, 1846, 1848, 1849, 1991,
	1238, 182, 1961, 182, 1066, 431, 182, 1390, 1392, 1410,
	2539, 1649, 1403, 2586, 1404, 126, 1526, 182, 586, 1080,
	1420, 586, 586, 1421, 1422, 980, 779, 572, 171, 182,
	1225, 1022, 2294, 182, 2295, 1262, 182, 1516, 1428, 2065,
	182, 590, 1009, 1955, 182, 602, 1224, 1513, 873, 875,
	182, 1197, 1532, 1511, 1841, 1842, 2465, 182, 779, 2567,
	1330, 594, 182, 1847, 2297, 1733, 432, 1222, 1218, 1950,
	182, 2491, 1033, 2300, 1575, 1622, 1612, 182, 1504, 2024,
	1501, 1010, 2030, 1359, 2022, 1223, 780, 1849, 182, 988,
	182, 1640, 182, 2066, 1028, 182, 2492, 182, 448, 182,
	182, 1648, 182, 182, 1394, 2540, 1558, 929, 1153, 1623,
	573, 182, 1651, 1653, 1692, 2172, 2596, 172, 780, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 1626, 705, 451, 1857,
	1220, 2473, 1508, 949, 1772, 1773, 1599, 2166, 447, 953,
	2579, 1670, 1598, 2032, 1607, 1601, 2594, 1658, 1636, 1613,
	1617, 1618, 2367, 1212, 2296, 1666, 1656, 725, 725, 1212,
	2398, 1201, 1662, 2541, 2332, 1992, 607, 930, 931, 1643,
	1532, 1847, 2420, 1669, 726, 781, 735, 418, 168, 734,
	2558, 725, 1014, 1109, 1828, 2474, 1702, 123, 1702, 1616,
	1209, 609, 1210, 123, 1632, 593, 2230, 2538, 1019, 1728,
	1714, 779, 424, 908, 1858, 908, 996, 420, 2566, 182,
	1991, 1785, 1565, 1289, 1706, 1717, 1184, 421, 169, 1715,
	1723, 1716, 1718, 574, 2587, 182, 182, 182, 1499, 182,
	582, 1727, 927, 1724, 1360, 1492, 492, 1857, 1734, 434,
	433, 2564, 1720, 2340, 1374, 1736, 1263, 1694, 954, 1104,
	1105, 1106, 1107, 1108, 1054, 931, 485, 1324, 182, 1117,
	957, 780, 572, 1365, 1362, 1430, 1437, 946, 1020, 1125,
	1160, 1211, 1163, 1221, 1044, 1188, 2259, 1965, 2408, 490,
	602, 781, 1157, 1156, 1753, 486, 2407, 2557, 2390, 1043,
	1743, 2592, 2457, 503, 455, 2577, 408, 2149, 1191, 123,
	2064, 1039, 969, 575, 1851, 1843, 1844, 1845, 1846, 1848,
	1849, 1935, 1858, 482, 1186, 40, 1931, 487, 1289, 1289,
	2104, 2313, 1043, 1021, 1695, 1189, 41, 989, 440, 1188,
	1252, 1350, 1757, 1241, 1056, 1057, 576, 1745, 1920, 44,
	489, 1761, 1759, 1187, 2500, 573, 1766, 1765, 435, 1747,
	1389, 2578, 1191, 1346, 2605, 594, 1768, 1059, 1908, 1042,
	2316, 781, 1324, 1324, 485, 51, 990, 2315, 1614, 987,
	1043, 1748, 970, 2580, 1343, 2199, 971, 175, 882, 1189,
	1489, 1058, 1348, 1746, 1179, 1179, 1044, 490, 2342, 2260,
	881, 607, 1042, 486, 62, 1349, 1487, 1475, 2391, 1416,
	964, 63, 1941, 479, 64, 1190, 2591, 1786, 1940, 1056,
	1057, 1784, 1921, 1843, 1844, 1845, 1846, 1848, 1849, 1044,
	997, 1778, 1909, 1207, 1800, 487, 1611, 2105, 1610, 594,
	501, 495, 1059, 2106, 2312, 182, 779, 66, 969, 2029,
	1042, 182, 182, 901, 1896, 182, 890, 591, 489, 1902,
	182, 1064, 2189, 182, 1811, 899, 1058, 488, 574, 1190,
	2333, 182, 1903, 1964, 409, 2126, 1814, 182, 182, 182,
	3, 648, 2388, 182, 477, 34, 182, 1907, 1417, 1483,
	2314, 2271, 182, 182, 182, 182, 182, 1484, 1535, 1485,
	476, 33, 182, 1490, 1900, 182, 780, 2370, 781, 182,
	1904, 1905, 1915, 2389, 1910, 475, 30, 1212, 182, 2258,
	1473, 1476, 1018, 491, 1925, 2185, 1872, 1079, 182, 1901,
	182, 1007, 182, 67, 1932, 182, 1064, 1911, 723, 182,
	781, 1875, 1876, 1877, 182, 410, 182, 1897, 575, 1005,
	1972, 969, 1974, 182, 1916, 2042, 1003, 1472, 1967, 127,
	69, 1835, 70, 1795, 867, 1001, 182, 929, 870, 436,
	1534, 1873, 594, 1738, 1927, 488, 140, 969, 929, 182,
	871, 576, 1675, 478, 1667, 1660, 103, 1027, 1026, 931,
	952, 1039, 1949, 1763, 1387, 1378, 1133, 2534, 1228, 1951,
	2497, 2287, 1080, 2008, 2170, 142, 2168, 1958, 500, 494,
	2148, 437, 1980, 1486, 2017, 1698, 474, 79, 900, 182,
	1488, 970, 607, 607, 762, 971, 1996, 930, 34, 1691,
	898, 491, 1975, 1272, 999, 1978, 1993, 1987, 930, 1271,
	1976, 438, 141, 439, 33, 2001, 1269, 970, 473, 78,
	134, 971, 1017, 1266, 1264, 2007, 1474, 135, 1013, 30,
	1226, 1006, 2002, 2003, 1219, 2004, 2005, 1213, 2018, 182,
	728, 730, 2045, 2021, 2019, 2020, 2055, 1982, 2431, 1004,
	456, 470, 22, 781, 471, 23, 1002, 2025, 469, 28,
	1046, 1413, 1184, 1418, 2033, 1000, 1776, 468, 20, 1425,
	2035, 466, 19, 1060, 1061, 1062, 1063, 1065, 1066, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 2049, 1477, 2054, 1479, 1480, 1481, 1482, 2078, 2051,
	182, 1188, 993, 2081, 2568, 897, 182, 2083, 2353, 2076,
	79, 1505, 1777, 1118, 998, 182, 182, 1047, 1117, 2110,
	2352, 2067, 2069, 2070, 1191, 2060, 2061, 2062, 1060, 1061,
	1062, 1063, 1065, 1066, 1323, 1012, 2111, 1545, 1546, 1369,
	1186, 1562, 78, 1574, 1576, 1581, 1584, 1585, 1586, 467,
	18, 1189, 461, 15, 2129, 2215, 2160, 2159, 2109, 2133,
	2161, 747, 182, 2142, 182, 480, 123, 2127, 2207, 1187,
	2184, 182, 2124, 2176, 929, 22, 2130, 2176, 23, 462,
	16, 748, 28, 2176, 2175, 2195, 2192, 2433, 2180, 182,
	182, 20, 1655, 2145, 2183, 19, 2152, 2137, 1671, 2209,
	460, 14, 1639, 2201, 1663, 1659, 1639, 182, 1400, 1401,
	1764, 1654, 2173, 1936, 2212, 1652, 2445, 182, 2467, 2306,
	991, 779, 182, 182, 2419, 465, 12, 2200, 779, 2190,
	2272, 1190, 992, 1050, 930, 896, 1665, 502, 1657, 1323,
	1323, 2496, 2169, 1288, 2171, 1056, 1057, 2205, 2202, 1900,
	1936, 2232, 2211, 2338, 2144, 2210, 2203, 2216, 749, 1705,
	2204, 459, 10, 1693, 1690, 182, 1289, 1600, 781, 2237,
	1341, 1056, 1057, 1281, 2575, 464, 7, 463, 6, 458,
	5, 780, 1326, 2590, 1841, 1842, 1056, 1057, 780, 1750,
	1749, 2382, 1058, 18, 1059, 2277, 15, 2217, 631, 2010,
	2123, 2071, 1750, 1289, 2227, 2014, 1917, 1887, 1751, 1597,
	1324, 2233, 1594, 1593, 1524, 1120, 2245, 2063, 1058, 182,
	1977, 1130, 182, 16, 1128, 1025, 1016, 1011, 1008, 994,
	2257, 956, 779, 182, 182, 1344, 580, 182, 182, 182,
	179, 2396, 483, 1377, 14, 412, 995, 1324, 1288, 1288,
	1913, 1619, 1289, 427, 182, 2490, 2251, 1827, 2450, 182,
	2366, 182, 452, 182, 182, 182, 2274, 496, 179, 12,
	182, 504, 1533, 182, 509, 1131, 929, 55, 2273, 2160,
	2159, 2276, 528, 2161, 182, 182, 2307, 1326, 1326, 931,
	2286, 929, 780, 2278, 2157, 625, 1324, 2310, 2288, 2151,
	931, 1430, 2079, 1685, 1684, 10, 782, 2328, 2160, 2159,
	1430, 2084, 2161, 2160, 2159, 2279, 1273, 2161, 1289, 7,
	2344, 6, 1353, 5, 2281, 647, 2334, 1549, 1431, 722,
	649, 2339, 1286, 739, 739, 650, 930, 1287, 2337, 1325,
	1161, 412, 637, 2114, 2343, 2345, 1284, 924, 2360, 1709,
	1357, 930, 1340, 1497, 1289, 1289, 1514, 1810, 1124, 617,
	629, 2275, 1324, 1289, 1289, 2359, 628, 412, 412, 772,
	412, 1781, 1782, 2282, 1512, 179, 869, 1787, 182, 2350,
	182, 950, 779, 182, 1918, 1990, 2346, 2372, 1415, 1767,
	1412, 182, 1986, 2311, 2167, 422, 1289, 779, 1324, 1324,
	2349, 1838, 922, 1572, 1564, 1560, 1030, 1324, 1324, 1806,
	2379, 1182, 1110, 1710, 977, 1813, 1997, 2381, 1817, 2400,
	2160, 2159, 2402, 2336, 2161, 1731, 1174, 1423, 746, 2384,
	745, 182, 2603, 1347, 929, 1831, 1744, 1103, 182, 1238,
	1324, 1102, 780, 2399, 1325, 1325, 182, 182, 929, 929,
	2176, 732, 2160, 2159, 2365, 2459, 2161, 780, 968, 967,
	1242, 2418, 1934, 2429, 2585, 2386, 2466, 182, 2430, 1117,
	2422, 2164, 182, 2506, 139, 136, 1581, 1581, 1581, 182,
	2401, 138, 2434, 2439, 2441, 2442, 2440, 2428, 137, 1963,
	82, 32, 2461, 31, 930, 102, 1419, 2447, 101, 100,
	99, 2456, 1179, 98, 182, 182, 97, 607, 930, 930,
	2455, 182, 1118, 96, 95, 2411, 2412, 94, 93, 929,
	1518, 2478, 92, 91, 182, 90, 2476, 89, 929, 929,
	2425, 2479, 2463, 1550, 1550, 1563, 88, 87, 86, 1583,
	85, 84, 524, 1587, 1588, 1590, 931, 521, 2481, 81,
	1183, 182, 80, 182, 2482, 594, 182, 29, 779, 2487,
	2488, 25, 106, 2453, 24, 1289, 77, 76, 27, 17,
	11, 21, 60, 2515, 2444, 1793, 2517, 2432, 2503, 930,
	61, 59, 2516, 58, 57, 13, 182, 2521, 930, 930,
	2519, 1791, 53, 781, 52, 1566, 50, 2160, 2159, 1988,
	781, 2161, 49, 182, 182, 182, 2533, 2532, 2531, 1324,
	48, 182, 2464, 2551, 2544, 2518, 47, 528, 780, 886,
	528, 2006, 891, 2470, 9, 182, 105, 894, 2556, 2554,
	2555, 2553, 2027, 412, 45, 8, 43, 42, 607, 607,
	2565, 2508, 2563, 104, 2569, 118, 528, 528, 412, 916,
	869, 607, 1056, 1057, 115, 2574, 117, 2573, 114, 116,
	120, 481, 119, 112, 110, 111, 113, 2582, 2034, 109,
	2588, 621, 2581, 1425, 1788, 1059, 2589, 528, 108, 2038,
	121, 482, 2039, 1285, 1789, 779, 39, 779, 1794, 38,
	37, 528, 2502, 36, 2044, 35, 2, 2607, 2608, 1058,
	1, 0, 0, 2052, 781, 2615, 600, 955, 572, 2621,
	0, 2056, 0, 2624, 2006, 2623, 2622, 528, 411, 2630,
	2628, 2629, 0, 2632, 0, 0, 602, 1323, 0, 0,
	0, 0, 485, 0, 2080, 0, 0, 0, 2082, 0,
	0, 0, 2548, 2549, 2550, 780, 0, 780, 931, 0,
	0, 0, 0, 0, 0, 490, 0, 0, 0, 601,
	0, 486, 0, 931, 1323, 0, 0, 0, 2598, 1064,
	2600, 2112, 2113, 0, 0, 0, 0, 0, 0, 412,
	2119, 2120, 2121, 1289, 0, 0, 2410, 0, 1285, 1285,
	0, 573, 0, 487, 0, 0, 0, 0, 1790, 0,
	0, 0, 0, 0, 0, 1792, 0, 2132, 0, 0,
	0, 0, 0, 1323, 757, 0, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1324, 0, 0,
	0, 0, 0, 0, 0, 1079, 1288, 2153, 0, 1289,
	766, 770, 0, 776, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 781, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 0, 1288, 0, 1326, 0, 0, 0, 1323,
	0, 0, 0, 1324, 0, 1056, 1057, 0, 0, 1799,
	1179, 0, 0, 1289, 0, 0, 1802, 0, 0, 607,
	0, 0, 626, 74, 574, 0, 931, 0, 1059, 0,
	1080, 0, 1326, 1818, 1819, 1323, 1323, 0, 0, 0,
	931, 931, 1288, 0, 1323, 1323, 0, 0, 0, 0,
	0, 0, 1058, 488, 509, 0, 739, 1324, 1078, 0,
	0, 2236, 0, 1566, 1566, 2239, 2240, 0, 0, 2242,
	0, 0, 0, 0, 0, 0, 2244, 1323, 2246, 412,
	412, 1326, 0, 1867, 1797, 1798, 0, 74, 0, 0,
	1583, 1583, 1583, 0, 2253, 1880, 0, 0, 0, 0,
	0, 0, 599, 0, 575, 0, 0, 0, 1288, 491,
	0, 931, 0, 1081, 1082, 1083, 1084, 0, 0, 0,
	931, 931, 1064, 0, 0, 0, 0, 2262, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 576, 0, 1566,
	1566, 1566, 0, 0, 1288, 1288, 587, 1326, 0, 595,
	781, 0, 1325, 1288, 1288, 0, 0, 0, 0, 0,
	1864, 1865, 1866, 0, 0, 758, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2308, 0, 0,
	0, 0, 0, 1326, 1326, 179, 1288, 0, 1079, 1325,
	0, 0, 1326, 1326, 0, 0, 0, 412, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1250,
	0, 0, 0, 0, 0, 412, 0, 412, 0, 412,
	0, 0, 0, 1258, 0, 1326, 770, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1325, 0,
	0, 776, 0, 0, 0, 0, 1323, 0, 1085, 0,
	0, 0, 0, 2361, 2362, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 528, 179, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 528, 781, 0, 781,
	0, 0, 0, 0, 2374, 0, 0, 0, 0, 0,
	2377, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1325, 0, 528, 0, 0, 0,
	0, 528, 0, 0, 0, 0, 179, 528, 0, 528,
	0, 528, 0, 528, 0, 528, 0, 0, 0, 0,
	0, 0, 0, 0, 2409, 0, 1388, 0, 0, 0,
	1325, 1325, 528, 528, 0, 0, 0, 0, 0, 1325,
	1325, 412, 0, 0, 0, 1288, 1566, 1566, 0, 0,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	0, 0, 770, 528, 0, 0, 0, 2040, 2041, 0,
	0, 0, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2118, 0, 1326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2458, 0, 0, 0, 1566, 1566, 1566, 1566, 1566,
	1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566,
	1566, 1566, 1566, 1566, 0, 1566, 2085, 2086, 2087, 2088,
	2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098,
	2099, 2100, 2101, 2102, 2103, 607, 2107, 0, 0, 0,
	0, 0, 0, 0, 1323, 0, 2178, 2298, 0, 0,
	2291, 0, 2181, 0, 0, 0, 0, 0, 0, 595,
	0, 2289, 0, 0, 0, 0, 2293, 0, 0, 509,
	0, 739, 0, 0, 869, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 412, 2299, 0, 0, 0,
	2530, 2530, 0, 0, 0, 0, 0, 1631, 0, 0,
	1323, 412, 0, 0, 412, 0, 2545, 0, 1644, 2292,
	0, 0, 412, 1285, 0, 0, 40, 0, 412, 0,
	0, 0, 0, 0, 0, 412, 2530, 41, 0, 0,
	1674, 1325, 757, 1204, 0, 0, 0, 0, 1681, 0,
	44, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 1288, 1323, 0, 412, 0, 1713, 0,
	528, 0, 1285, 528, 0, 528, 51, 412, 412, 0,
	1719, 869, 0, 0, 2530, 0, 0, 0, 0, 1644,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1326, 0, 0, 62, 0, 0, 0, 2294,
	587, 2295, 63, 2611, 479, 64, 0, 0, 0, 1288,
	0, 0, 0, 0, 0, 2611, 0, 0, 2611, 2611,
	0, 1113, 0, 1116, 0, 0, 0, 0, 1285, 0,
	1121, 2297, 0, 0, 0, 0, 0, 0, 66, 0,
	2300, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	1237, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1288, 1285, 1285, 0, 0, 770, 0,
	1255, 0, 1255, 1285, 1285, 0, 0, 1755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 412, 412, 412, 0, 412, 0, 0,
	0, 0, 1326, 0, 0, 0, 1285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2296, 0, 0, 67, 0, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1325,
	127, 69, 0, 70, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 1200, 0, 2378, 0, 140, 0, 0,
	0, 0, 0, 0, 478, 40, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 129, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 44,
	0, 0, 2404, 0, 1399, 1325, 0, 0, 0, 0,
	1566, 0, 0, 131, 0, 0, 2415, 0, 0, 0,
	0, 0, 0, 46, 0, 51, 0, 0, 0, 0,
	0, 2369, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 0, 54, 0, 135, 0,
	56, 1566, 0, 0, 62, 0, 0, 132, 0, 1325,
	0, 63, 0, 122, 64, 0, 0, 0, 0, 0,
	0, 126, 2393, 0, 0, 1285, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 0, 412, 0, 0, 0, 0, 0, 412,
	412, 0, 0, 412, 0, 0, 0, 0, 1631, 0,
	0, 1631, 1566, 0, 0, 0, 0, 0, 0, 1923,
	0, 0, 0, 0, 0, 412, 1929, 1930, 2493, 0,
	0, 1644, 0, 2446, 1937, 0, 0, 0, 0, 0,
	1942, 1943, 1945, 1947, 1948, 0, 0, 0, 757, 0,
	412, 0, 0, 1957, 2510, 2511, 0, 1960, 0, 0,
	0, 0, 0, 0, 757, 0, 412, 1634, 0, 0,
	0, 0, 0, 67, 0, 770, 1250, 0, 1250, 68,
	528, 770, 0, 412, 0, 0, 0, 1985, 776, 0,
	0, 0, 412, 0, 1995, 0, 0, 0, 75, 127,
	69, 412, 70, 0, 71, 74, 133, 0, 0, 0,
	0, 72, 0, 0, 1755, 0, 140, 0, 0, 1711,
	0, 0, 0, 83, 0, 0, 103, 1755, 0, 0,
	776, 776, 0, 0, 0, 130, 0, 0, 587, 0,
	0, 587, 587, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1192,
	0, 0, 0, 0, 0, 107, 0, 412, 0, 0,
	0, 0, 0, 0, 128, 40, 0, 0, 0, 0,
	0, 0, 141, 1285, 0, 0, 41, 0, 0, 0,
	134, 0, 0, 0, 1495, 0, 0, 135, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 2073, 0, 0,
	126, 0, 0, 4, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1285,
	0, 0, 0, 0, 0, 0, 1841, 1842, 0, 1859,
	1860, 1861, 0, 0, 62, 0, 1758, 776, 1760, 0,
	770, 63, 2234, 479, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 758,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1779,
	0, 0, 0, 1285, 0, 1200, 0, 66, 412, 1856,
	0, 0, 0, 0, 1631, 0, 0, 0, 74, 0,
	0, 0, 0, 869, 1631, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2156, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2177, 0, 0, 0, 2177, 0, 74, 0, 74,
	0, 2177, 0, 0, 0, 0, 0, 0, 0, 0,
	1644, 0, 1250, 1847, 0, 0, 0, 0, 74, 2197,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 412, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1862, 2223, 0, 0, 0, 127,
	69, 0, 70, 0, 0, 2225, 0, 0, 0, 0,
	2228, 412, 0, 0, 0, 0, 140, 0, 0, 1857,
	0, 0, 0, 478, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 0, 2252, 0, 0, 757, 0, 0, 0,
	0, 0, 757, 757, 0, 0, 757, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 1928, 0,
	134, 0, 0, 0, 1858, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 412, 0, 0,
	869, 0, 0, 1954, 0, 0, 0, 0, 0, 0,
	126, 1631, 869, 0, 0, 2284, 2285, 1644, 0, 1968,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2156, 869, 0, 0, 0, 1979, 2318, 0, 2319,
	0, 412, 2321, 2322, 0, 1237, 0, 0, 412, 1495,
	0, 2327, 0, 0, 1237, 0, 0, 0, 0, 0,
	2156, 0, 869, 1681, 0, 2156, 0, 0, 0, 1116,
	0, 0, 0, 1853, 1854, 1855, 0, 0, 0, 0,
	0, 0, 1852, 1850, 1851, 1843, 1844, 1845, 1846, 1848,
	1849, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	2036, 0, 0, 0, 0, 1059, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 1078, 1644, 0, 2385, 0,
	0, 2387, 1075, 0, 0, 0, 0, 0, 0, 412,
	0, 0, 2156, 0, 0, 0, 0, 758, 0, 0,
	0, 0, 0, 758, 758, 0, 0, 758, 0, 0,
	1841, 1842, 0, 1859, 1860, 1861, 0, 0, 2177, 0,
	0, 0, 0, 0, 2156, 0, 2047, 0, 0, 412,
	1081, 1082, 1083, 1084, 0, 0, 869, 0, 0, 1064,
	0, 0, 0, 0, 2223, 2223, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 0, 0, 0, 74, 0,
	0, 1093, 1101, 1856, 0, 2452, 0, 0, 0, 0,
	1631, 757, 0, 0, 0, 0, 0, 1250, 0, 0,
	1099, 0, 0, 74, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 595, 0, 1091, 0,
	0, 0, 2468, 2469, 0, 1079, 0, 0, 0, 412,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2486, 0, 0, 0, 0, 1847, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2501,
	0, 869, 0, 0, 412, 0, 0, 0, 0, 0,
	1711, 757, 0, 0, 0, 1085, 0, 0, 1862, 2156,
	0, 1841, 1842, 0, 1859, 1860, 1861, 0, 0, 0,
	1080, 0, 0, 0, 2452, 0, 0, 2046, 0, 0,
	0, 0, 0, 1857, 2229, 0, 0, 1094, 0, 0,
	0, 869, 869, 869, 0, 0, 0, 0, 0, 412,
	1056, 1057, 0, 0, 0, 0, 1096, 1097, 1098, 0,
	0, 0, 0, 2562, 1856, 0, 0, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 1100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 1078, 0, 0, 1092, 0, 1858, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 74, 1847, 0,
	757, 0, 0, 0, 0, 1883, 0, 0, 0, 0,
	1056, 1057, 758, 1086, 1087, 1088, 1096, 1097, 1098, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 1081, 1082,
	1083, 1084, 0, 1059, 0, 0, 1100, 1064, 0, 1862,
	0, 0, 1841, 1842, 2320, 1859, 1860, 1861, 0, 0,
	0, 2325, 0, 0, 0, 0, 0, 1058, 0, 1093,
	1101, 0, 0, 1078, 1857, 0, 0, 1853, 1854, 1855,
	1075, 0, 0, 0, 0, 0, 1852, 1850, 1851, 1843,
	1844, 1845, 1846, 1848, 1849, 0, 0, 0, 1841, 1842,
	0, 1859, 1860, 1861, 0, 1856, 1091, 0, 0, 0,
	0, 0, 758, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 1082,
	1083, 1084, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1858,
	0, 1856, 0, 0, 0, 0, 0, 0, 0, 1093,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 1847,
	0, 0, 0, 1085, 0, 0, 0, 0, 1099, 0,
	0, 0, 2394, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 1863, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 1079, 0, 1094, 0, 0, 0, 0,
	1862, 0, 0, 0, 0, 1847, 0, 0, 0, 0,
	0, 0, 2427, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 1857, 0, 0, 1853, 1854,
	1855, 758, 0, 0, 0, 0, 0, 1852, 1850, 1851,
	1843, 1844, 1845, 1846, 1848, 1849, 1862, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 0, 1080, 0,
	0, 1857, 0, 0, 1095, 0, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 1094, 0, 0, 0, 0,
	0, 0, 2475, 0, 0, 0, 0, 0, 0, 0,
	1858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2505, 0, 0,
	0, 0, 0, 0, 0, 0, 1858, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0, 0,
	0, 0, 0, 1882, 0, 0, 0, 0, 0, 1853,
	1854, 1855, 1711, 0, 0, 0, 0, 0, 1852, 1850,
	1851, 1843, 1844, 1845, 1846, 1848, 1849, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1853, 1854, 1855, 0, 0,
	0, 74, 0, 0, 1852, 1850, 1851, 1843, 1844, 1845,
	1846, 1848, 1849, 0, 2435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 778, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 784, 186, 785, 786, 787, 788, 347, 789, 790,
	791, 792, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 793, 191, 354, 355, 192, 193, 794, 795,
	356, 357, 358, 796, 194, 359, 797, 783, 798, 195,
	196, 197, 0, 199, 200, 201, 198, 799, 202, 1116,
	203, 204, 800, 707, 205, 206, 207, 801, 802, 804,
	803, 805, 806, 807, 208, 209, 413, 210, 360, 211,
	361, 362, 808, 212, 809, 213, 810, 214, 811, 812,
	215, 216, 813, 217, 814, 0, 815, 363, 218, 220,
	219, 221, 364, 365, 816, 708, 817, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 818, 225,
	819, 820, 709, 821, 226, 369, 822, 370, 823, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 711, 824,
	373, 234, 825, 231, 826, 710, 232, 374, 233, 375,
	376, 377, 378, 379, 827, 380, 828, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 829, 242, 241,
	830, 383, 714, 243, 244, 715, 831, 245, 246, 832,
	833, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 834, 835, 836, 385, 257,
	386, 258, 259, 837, 260, 838, 839, 261, 840, 841,
	262, 387, 718, 263, 719, 388, 264, 265, 266, 267,
	268, 842, 269, 389, 270, 390, 271, 843, 272, 273,
	274, 275, 276, 391, 277, 278, 844, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	845, 291, 720, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 846, 304, 393, 303, 305, 306, 847,
	307, 295, 296, 308, 721, 309, 394, 395, 310, 848,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	849, 318, 850, 319, 320, 321, 322, 323, 324, 325,
	326, 851, 398, 399, 400, 852, 853, 327, 328, 401,
	402, 854, 329, 330, 331, 332, 855, 856, 333, 334,
	335, 336, 857, 337, 858, 403, 338, 339, 340, 404,
	405, 859, 860, 341, 861, 862, 863, 864, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 778,
	0, 0, 0, 0, 0, 1624, 0, 0, 0, 0,
	0, 0, 0, 0, 1625, 184, 185, 784, 186, 785,
	786, 787, 788, 347, 789, 790, 791, 792, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 793, 191,
	354, 355, 192, 193, 794, 795, 356, 357, 358, 796,
	194, 359, 797, 783, 798, 195, 196, 197, 0, 199,
	200, 201, 198, 799, 202, 0, 203, 204, 800, 707,
	205, 206, 207, 801, 802, 804, 803, 805, 806, 807,
	208, 209, 413, 210, 360, 211, 361, 362, 808, 212,
	809, 213, 810, 214, 811, 812, 215, 216, 813, 217,
	814, 0, 815, 363, 218, 220, 219, 221, 364, 365,
	816, 708, 817, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 818, 225, 819, 820, 709, 821,
	226, 369, 822, 370, 823, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 711, 824, 373, 234, 825, 231,
	826, 710, 232, 374, 233, 375, 376, 377, 378, 379,
	827, 380, 828, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 829, 242, 241, 830, 383, 714, 243,
	244, 715, 831, 245, 246, 832, 833, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 834, 835, 836, 385, 257, 386, 258, 259, 837,
	260, 838, 839, 261, 840, 841, 262, 387, 718, 263,
	719, 388, 264, 265, 266, 267, 268, 842, 269, 389,
	270, 390, 271, 843, 272, 273, 274, 275, 276, 391,
	277, 278, 844, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 845, 291, 720, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 846,
	304, 393, 303, 305, 306, 847, 307, 295, 296, 308,
	721, 309, 394, 395, 310, 848, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 849, 318, 850, 319,
	320, 321, 322, 323, 324, 325, 326, 851, 398, 399,
	400, 852, 853, 327, 328, 401, 402, 854, 329, 330,
	331, 332, 855, 856, 333, 334, 335, 336, 857, 337,
	858, 403, 338, 339, 340, 404, 405, 859, 860, 341,
	861, 862, 863, 864, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 778, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2280, 184, 185, 784, 186, 785, 786, 787, 788,
	347, 789, 790, 791, 792, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 793, 191, 354, 355, 192,
	193, 794, 795, 356, 357, 358, 796, 194, 359, 797,
	783, 798, 195, 196, 197, 0, 199, 200, 201, 198,
	799, 202, 0, 203, 204, 800, 707, 205, 206, 207,
	801, 802, 804, 803, 805, 806, 807, 208, 209, 413,
	210, 360, 211, 361, 362, 808, 212, 809, 213, 810,
	214, 811, 812, 215, 216, 813, 217, 814, 0, 815,
	363, 218, 220, 219, 221, 364, 365, 816, 708, 817,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 818, 225, 819, 820, 709, 821, 226, 369, 822,
	370, 823, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 711, 824, 373, 234, 825, 231, 826, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 827, 380, 828,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	829, 242, 241, 830, 383, 714, 243, 244, 715, 831,
	245, 246, 832, 833, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 834, 835,
	836, 385, 257, 386, 258, 259, 837, 260, 838, 839,
	261, 840, 841, 262, 387, 718, 263, 719, 388, 264,
	265, 266, 267, 268, 842, 269, 389, 270, 390, 271,
	843, 272, 273, 274, 275, 276, 391, 277, 278, 844,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 845, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 846, 304, 393, 303,
	305, 306, 847, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 848, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 849, 318, 850, 319, 320, 321, 322,
	323, 324, 325, 326, 851, 398, 399, 400, 852, 853,
	327, 328, 401, 402, 854, 329, 330, 331, 332, 855,
	856, 333, 334, 335, 336, 857, 337, 858, 403, 338,
	339, 340, 404, 405, 859, 860, 341, 861, 862, 863,
	864, 342, 343, 344, 345, 346, 0, 0, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1233, 184, 185, 784, 186, 785, 786,
	787, 788, 347, 789, 790, 791, 792, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 793, 191, 354,
	355, 192, 193, 794, 795, 356, 357, 358, 796, 194,
	359, 797, 783, 798, 195, 196, 197, 0, 199, 200,
	201, 198, 799, 202, 0, 203, 204, 800, 707, 205,
	206, 207, 801, 802, 804, 803, 805, 806, 807, 208,
	209, 413, 210, 360, 211, 361, 362, 808, 212, 809,
	213, 810, 214, 811, 812, 215, 216, 813, 217, 814,
	0, 815, 363, 218, 220, 219, 221, 364, 365, 816,
	708, 817, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 818, 225, 819, 820, 709, 821, 226,
	369, 822, 370, 823, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 711, 824, 373, 234, 825, 231, 826,
	710, 232, 374, 233, 375, 376, 377, 378, 379, 827,
	380, 828, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 829, 242, 241, 830, 383, 714, 243, 244,
	715, 831, 245, 246, 832, 833, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	834, 835, 836, 385, 257, 386, 258, 259, 837, 260,
	838, 839, 261, 840, 841, 262, 387, 718, 263, 719,
	388, 264, 265, 266, 267, 268, 842, 269, 389, 270,
	390, 271, 843, 272, 273, 274, 275, 276, 391, 277,
	278, 844, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 845, 291, 720, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 846, 304,
	393, 303, 305, 306, 847, 307, 295, 296, 308, 721,
	309, 394, 395, 310, 848, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 849, 318, 850, 319, 320,
	321, 322, 323, 324, 325, 326, 851, 398, 399, 400,
	852, 853, 327, 328, 401, 402, 854, 329, 330, 331,
	332, 855, 856, 333, 334, 335, 336, 857, 337, 858,
	403, 338, 339, 340, 404, 405, 859, 860, 341, 861,
	862, 863, 864, 342, 343, 344, 345, 346, 1523, 0,
	645, 634, 635, 632, 633, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 1520, 186,
	0, 0, 0, 0, 662, 627, 0, 0, 0, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 0,
	212, 0, 213, 0, 214, 1521, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 1519, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 1522, 184, 185,
	0, 186, 0, 0, 620, 1517, 662, 627, 0, 0,
	623, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 608, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 932, 701,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 614, 135, 596, 0, 645, 634, 635, 632,
	633, 624, 612, 0, 0, 0, 0, 610, 611, 0,
	0, 0, 184, 185, 0, 186, 1119, 0, 0, 0,
	662, 627, 623, 0, 0, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 140, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 142, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 932, 701, 0, 0, 341, 0, 0, 0,
	134, 342, 343, 344, 345, 346, 614, 135, 645, 634,
	635, 632, 633, 624, 0, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 184, 185, 0, 186, 0, 0,
	1119, 0, 662, 627, 0, 0, 623, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 140, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 932, 701, 0, 0, 341, 0,
	0, 0, 134, 342, 343, 344, 345, 346, 614, 135,
	645, 634, 635, 632, 633, 624, 0, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 184, 185, 0, 186,
	0, 0, 1119, 0, 662, 627, 0, 0, 623, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 1577,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 0,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 1582, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 1578, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 1579, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 604, 0, 645, 634, 635, 632, 633, 624, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 0, 184,
	185, 0, 186, 0, 620, 0, 0, 662, 627, 0,
	623, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 608, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 606, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 0, 645, 634, 635, 632, 633,
	624, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 184, 185, 0, 186, 0, 0, 620, 0, 662,
	627, 0, 0, 623, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 2206, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 0, 645, 634, 635,
	632, 633, 624, 0, 0, 612, 0, 0, 0, 0,
	610, 611, 1180, 184, 185, 0, 186, 0, 0, 620,
	0, 662, 627, 0, 0, 623, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 1427, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 1426, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 184, 185, 0, 186, 0,
	0, 620, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 608, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 606, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	0, 645, 634, 635, 632, 633, 624, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 184, 185, 0,
	186, 0, 0, 620, 0, 662, 627, 0, 0, 623,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	2612, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 2613, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 0, 645, 634, 635, 632, 633, 624, 0,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 184,
	185, 0, 186, 0, 0, 620, 0, 662, 627, 0,
	0, 623, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 608, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 0, 645, 634, 635, 632, 633,
	624, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 184, 185, 0, 186, 0, 0, 620, 0, 662,
	627, 0, 0, 623, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 2059, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 0, 645, 634, 635,
	632, 633, 624, 0, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 184, 185, 0, 186, 0, 0, 620,
	0, 662, 627, 0, 0, 623, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 0, 645,
	634, 635, 632, 633, 624, 0, 0, 612, 0, 0,
	0, 0, 610, 611, 1180, 184, 185, 0, 186, 0,
	0, 620, 0, 662, 627, 0, 0, 623, 187, 188,
	189, 348, 677, 350, 678, 190, 679, 680, 0, 191,
	354, 355, 192, 193, 630, 661, 681, 682, 358, 0,
	194, 673, 0, 653, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 654, 655, 657, 0, 656, 658,
	208, 209, 413, 210, 683, 211, 684, 685, 0, 212,
	0, 213, 0, 214, 0, 0, 676, 216, 0, 217,
	0, 0, 0, 618, 218, 220, 219, 221, 663, 664,
	641, 708, 0, 0, 0, 0, 0, 222, 223, 686,
	687, 688, 0, 224, 0, 225, 0, 1582, 709, 0,
	226, 674, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	1627, 0, 645, 634, 635, 632, 633, 624, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 184, 185,
	0, 186, 0, 620, 0, 0, 662, 627, 0, 623,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 1591, 0, 645, 634, 635, 632, 633,
	624, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	0, 184, 185, 0, 186, 0, 620, 0, 0, 662,
	627, 0, 623, 0, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 1589, 0, 645, 634,
	635, 632, 633, 624, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 0, 184, 185, 0, 186, 0, 620,
	0, 0, 662, 627, 0, 623, 0, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 614, 1573,
	0, 645, 634, 635, 632, 633, 624, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 0, 184, 185, 0,
	186, 0, 620, 0, 0, 662, 627, 0, 623, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 1561, 0, 645, 634, 635, 632, 633, 624,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 0,
	184, 185, 0, 186, 0, 620, 0, 0, 662, 627,
	0, 623, 0, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 1559, 0, 1551, 634, 635,
	632, 633, 624, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 0, 184, 185, 0, 186, 0, 620, 0,
	0, 662, 627, 0, 623, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 1554, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 1555, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 1556,
	1553, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 1557, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 1552, 346, 614, 1548, 0,
	1551, 634, 635, 632, 633, 624, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 0, 184, 185, 0, 186,
	0, 620, 0, 0, 662, 627, 0, 623, 0, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 1554, 684, 685, 0,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 1555, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 1556, 1553, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 1557,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 1552, 346,
	614, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 184, 185,
	0, 186, 0, 0, 620, 0, 662, 627, 0, 0,
	623, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	184, 185, 1414, 186, 1123, 0, 620, 0, 662, 627,
	0, 0, 623, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 876, 0, 645, 634, 635,
	632, 633, 624, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 0, 184, 185, 0, 186, 0, 620, 0,
	0, 662, 627, 0, 623, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	670, 672, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 689, 233, 690, 691, 692, 693, 694, 0, 652,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 675, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 613,
	0, 642, 671, 257, 695, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 665,
	264, 265, 266, 267, 268, 0, 269, 666, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 696, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 619,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 659, 307, 295, 296, 308, 721, 309,
	697, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 874, 0,
	645, 634, 635, 632, 633, 624, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 0, 184, 185, 0, 186,
	0, 620, 0, 0, 662, 627, 0, 623, 0, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 0,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 184, 185,
	0, 186, 0, 0, 620, 0, 662, 627, 0, 0,
	623, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 2529, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 2528, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 645, 634, 635, 632, 633, 624,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	184, 185, 0, 186, 0, 0, 620, 0, 662, 627,
	0, 0, 623, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 0, 645, 634, 635, 632,
	633, 624, 0, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 184, 185, 0, 186, 0, 0, 620, 0,
	662, 627, 0, 0, 623, 187, 188, 189, 2527, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 2529,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 2528, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 0, 645, 634,
	635, 632, 633, 624, 0, 0, 612, 0, 0, 0,
	0, 610, 611, 0, 184, 185, 0, 186, 0, 0,
	620, 0, 662, 627, 0, 0, 623, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	0, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	1571, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 698, 314, 315, 667, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 699, 700,
	0, 0, 327, 328, 668, 669, 640, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 660, 337, 0,
	403, 338, 339, 340, 404, 701, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	645, 634, 635, 632, 633, 624, 0, 0, 1569, 0,
	0, 0, 0, 1567, 1568, 0, 184, 185, 0, 186,
	0, 0, 1570, 0, 662, 627, 0, 0, 623, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 0, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 0,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 0, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 1571, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 645, 634, 635, 632, 633, 624, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 1570, 0, 662, 627, 0, 0,
	623, 187, 188, 189, 0, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 2529, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 670, 672, 0, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 0, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 0, 309, 697, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 2528, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 610, 611, 0,
	184, 185, 0, 186, 0, 0, 620, 0, 662, 0,
	0, 0, 623, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	661, 356, 357, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 663, 664, 0, 708, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 0, 0, 0, 671,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	668, 669, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 925, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 2158, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	783, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 708, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 140, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 142, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 932, 405, 0, 0, 341, 0, 0, 0,
	134, 342, 343, 344, 345, 346, 596, 135, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	126, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 761, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 140, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 142, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 932, 405, 0, 0, 341, 0,
	0, 0, 134, 342, 343, 344, 345, 346, 0, 135,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	755, 0, 1202, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 761, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	140, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 142,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 932, 405, 0, 0,
	341, 0, 0, 0, 134, 342, 343, 344, 345, 346,
	596, 135, 181, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 755, 0, 1202, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 932, 405,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 1899, 135, 181, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 126, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 761, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 754, 0, 181, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 755, 0, 760, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 761,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 181, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 755, 0,
	760, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	761, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 755,
	0, 760, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 1235, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 1712, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 2074, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 645, 634, 635, 632, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 1205, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 0, 0, 681, 682,
	358, 0, 194, 359, 0, 783, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 0, 0, 642, 385, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 401, 402, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	499, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 177, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 176, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 174, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 180,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 177, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 176, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 181, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	180, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 177, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 176, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 181, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 180,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 982, 0, 928, 986, 0, 0, 0, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 783, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 708, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 721, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 928, 986, 341, 0, 0, 984, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 783, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 708, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 721, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 928,
	986, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 783, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 707,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 708, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 709, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	721, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 928, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 783, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 708,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 711, 0, 373, 234, 0, 231, 0, 710,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 714, 243, 244, 715,
	0, 245, 246, 0, 0, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 718, 263, 719, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 720, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 721, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 1647, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 1645,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 1689, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 1650, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 1687, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 1649,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 1688,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 1647, 194, 359, 0, 0, 1642, 195,
	196, 197, 0, 199, 200, 201, 198, 1645, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	1650, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 1641, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 1649, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 1648, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 903, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 761, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 767, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 769, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 761, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 763, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 765,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 761,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 430, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 429, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	428, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 1630, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 2224, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 2224, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 2221, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 761, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 1393, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 1391,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 1373, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 525, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 961,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 527, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 522,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 1249,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 1248, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	525, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 961, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 527, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 522, 399, 400, 0, 0, 327, 962, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 525, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 516, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 527,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 945, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 522, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 921, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 920, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 918, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 917, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 914, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 913,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 911, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	910, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 907, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 906, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 181, 0, 341, 0,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 184, 185, 895, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 893, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	892, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 889, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 0, 0, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 887, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 883, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 0,
	0, 229, 230, 885, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 773,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 775, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	771, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 0, 0, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 525, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 516, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 515, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 527,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 517, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 518, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 522, 399, 400, 0, 0, 327, 520, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 507, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 0, 0, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 508,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 505, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 497, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 0, 0, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 453, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 1946, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 1944, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 0, 0,
	229, 230, 1933, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 0, 0, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 508, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 186, 0, 0, 0, 0, 347,
	0, 1259, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 0, 0, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 0, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 0, 0, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 737, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	0, 0, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 0, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 0,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 0, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 1059, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 1057, 0, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 0, 1058, 0,
	0, 0, 1089, 0, 1078, 0, 0, 0, 0, 1059,
	0, 1075, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1093, 1101, 0, 0, 1081, 1082, 1083, 1084, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088,
	1096, 1097, 1098, 0, 0, 1093, 1101, 1091, 0, 0,
	1089, 0, 0, 0, 1079, 0, 0, 1059, 0, 0,
	1100, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 1058, 1091, 0, 0, 0, 0, 1078, 0, 1079,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 1082, 1083, 1084, 1094, 0, 0, 1085,
	0, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 1093, 1101, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 0, 0, 0, 0, 1092, 0, 1079, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0,
	0, 0, 0, 1090, 1881, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 0, 0, 1085, 0, 1833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 1056, 1057, 0, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 0, 0, 1094,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 0,
	1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0,
	0, 0, 0, 2498, 1081, 1082, 1083, 1084, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 1056, 1057,
	0, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	0, 0, 0, 0, 1089, 1093, 1101, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 1091, 0, 0, 0, 0, 0, 1075, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 1093, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1094, 0, 0, 0, 0, 1099, 1056, 1057, 0,
	1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0, 0,
	0, 0, 0, 1089, 1091, 0, 0, 0, 0, 0,
	1059, 1079, 0, 1100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1056, 1057, 0, 1086, 1087,
	1088, 1096, 1097, 1098, 1058, 0, 0, 1090, 0, 0,
	1078, 1089, 0, 0, 0, 0, 0, 1075, 1059, 0,
	1092, 1100, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 1085, 1058, 0, 0, 2449, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 1075, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 1082, 1083, 1084, 0,
	0, 0, 0, 1094, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1093, 1101, 0, 0,
	0, 0, 0, 1081, 1082, 1083, 1084, 0, 0, 0,
	0, 0, 1064, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 1093, 1101, 0, 0, 0, 0,
	1079, 0, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 1099, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 0, 0, 0, 1090, 2403, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 1079, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 1094, 0, 0, 0, 0, 1089, 1085, 0,
	0, 0, 0, 0, 1059, 0, 0, 1100, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	1094, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073,
	1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 0, 0, 0, 0, 2373, 0, 0, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 0, 1064, 1092,
	0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	1093, 1101, 0, 0, 2368, 0, 0, 1056, 1057, 0,
	1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0, 1099,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 1100, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 1079, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 1075, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 1082, 1083, 1084, 1080,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 1057, 1094, 1086, 1087, 1088,
	1096, 1097, 1098, 0, 0, 0, 1093, 1101, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 1059, 0, 0,
	1100, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1058, 0, 1091, 0, 0, 0, 1078, 0, 0,
	1079, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 1090, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0,
	2364, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 1082, 1083, 1084, 0, 0, 0, 0,
	1085, 1064, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 1093, 1101, 0, 0, 0, 0, 0,
	1056, 1057, 1094, 1086, 1087, 1088, 1096, 1097, 1098, 0,
	0, 0, 1099, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 1100, 0, 0, 0,
	1091, 0, 0, 0, 0, 0, 0, 1079, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073,
	1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 0, 0, 0, 0, 2301, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 1082,
	1083, 1084, 1080, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 1057, 1094,
	1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0, 1093,
	1101, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	1059, 0, 0, 1100, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 1091, 0, 0, 0,
	1078, 0, 0, 1079, 0, 0, 0, 1075, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 1090,
	1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0,
	0, 0, 0, 2267, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1081, 1082, 1083, 1084, 0,
	0, 0, 0, 1085, 1064, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 1093, 1101, 0, 0,
	0, 0, 0, 1056, 1057, 1094, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 1099, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 1091, 0, 0, 0, 0, 0, 0,
	1079, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 1075, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0, 2266,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 1080, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 1057, 1094, 1086, 1087, 1088, 1096, 1097, 1098, 0,
	0, 0, 1093, 1101, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 1059, 0, 0, 1100, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 0, 1091,
	0, 0, 0, 1078, 0, 0, 1079, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073,
	1074, 1095, 1090, 1069, 1067, 1068, 1060, 1061, 1062, 1063,
	1065, 1066, 0, 0, 0, 0, 2231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1081, 1082,
	1083, 1084, 0, 0, 0, 0, 1085, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 1093,
	1101, 0, 0, 0, 0, 0, 1056, 1057, 1094, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 0, 1099, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 1100, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0,
	0, 0, 2077, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1082, 1083, 1084, 1080, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 1057, 1094, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 1093, 1101, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 1091, 0, 0, 0, 1078, 0, 0, 1079,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 1090, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 0, 0, 0, 0, 2053,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 1085,
	1064, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 1056,
	1057, 1094, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0,
	0, 1099, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 1100, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 1079, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1075,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 1509, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 1082, 1083,
	1084, 1080, 0, 0, 0, 0, 1064, 2561, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 1057, 1094, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 0, 1093, 1101,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 1059,
	0, 0, 1100, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 1091, 0, 0, 0, 1078,
	0, 0, 1079, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1092, 0, 0,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 1090, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0,
	1803, 0, 0, 0, 2560, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1081, 1082, 1083, 1084, 0, 0,
	0, 0, 1085, 1064, 0, 1873, 0, 0, 1872, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 1093, 1101, 0, 0, 0,
	0, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 1056, 1057, 0, 1086, 1087,
	1088, 1096, 1097, 1098, 0, 0, 0, 0, 0, 0,
	0, 1089, 1091, 0, 0, 0, 1776, 0, 1059, 1079,
	0, 1100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 1090, 0, 0, 1078, 0,
	0, 0, 0, 1092, 0, 1075, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 0, 0, 0, 1085,
	0, 0, 1777, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 1082, 1083, 1084, 0, 0, 0,
	0, 1094, 1064, 0, 0, 0, 1606, 0, 0, 0,
	0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 1093, 1101, 0, 0, 1089, 0,
	0, 0, 1605, 0, 0, 1059, 0, 0, 1100, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 1091, 0, 0, 0, 1078, 0, 0, 1079, 0,
	1092, 0, 1075, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 0, 0, 0, 0, 1085, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 1093, 1101, 0, 0, 0, 0, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098,
	0, 0, 0, 0, 0, 0, 0, 1089, 1091, 0,
	0, 0, 0, 0, 1059, 1079, 0, 1100, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1058, 0,
	0, 1090, 0, 0, 1078, 0, 0, 0, 0, 1092,
	0, 1075, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 1081,
	1082, 1083, 1084, 0, 0, 0, 0, 1094, 1064, 0,
	0, 0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096,
	1097, 1098, 0, 0, 0, 0, 0, 0, 0, 1089,
	1093, 1101, 0, 0, 0, 0, 1059, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 0, 0, 0, 1078, 1091, 0, 0,
	0, 0, 0, 1075, 1079, 0, 1092, 0, 0, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0,
	1090, 593, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1081, 1082, 1083, 1084, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 1093, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 1099, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 0, 0, 0, 0, 1089, 1091,
	0, 0, 0, 0, 0, 1059, 1079, 0, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1056, 1057, 0, 1086, 1087, 1088, 1096, 1097, 1098, 1058,
	0, 0, 1090, 0, 0, 1078, 1089, 0, 0, 0,
	1874, 0, 1075, 1059, 0, 1092, 1100, 0, 1070, 1071,
	1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068,
	1060, 1061, 1062, 1063, 1065, 1066, 1085, 1058, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	1075, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 0, 0, 0, 0, 1094, 1064,
	0, 0, 0, 0, 1879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 1101, 0, 0, 2057, 0, 0, 1081, 1082,
	1083, 1084, 0, 0, 0, 0, 0, 1064, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 1093,
	1101, 0, 0, 0, 0, 1079, 0, 1092, 0, 0,
	1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095, 1099, 1069,
	1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0,
	0, 1090, 0, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 1079, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 1056, 1057, 0, 1086,
	1087, 1088, 1096, 1097, 1098, 0, 0, 1094, 0, 0,
	0, 0, 1089, 1085, 0, 0, 0, 0, 0, 1059,
	0, 0, 1100, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1058, 0, 1094, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 1075, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0,
	0, 0, 0, 0, 1081, 1082, 1083, 1084, 0, 0,
	0, 0, 0, 1064, 1092, 0, 0, 1070, 1071, 1077,
	1076, 1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060,
	1061, 1062, 1063, 1065, 1066, 1093, 1101, 0, 0, 0,
	0, 0, 1056, 1057, 0, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 1099, 0, 0, 0, 1089, 0,
	0, 0, 1832, 0, 0, 1059, 0, 0, 1100, 0,
	0, 0, 1091, 0, 0, 0, 0, 0, 0, 1079,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 1075, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1839, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 1080, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1056,
	1057, 1094, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0,
	0, 1093, 1101, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1059, 0, 0, 1100, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1058, 0, 1091, 0,
	0, 0, 1078, 0, 0, 1079, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1092, 0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074,
	1095, 1090, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065,
	1066, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1081, 1082, 1083,
	1084, 0, 0, 0, 0, 1085, 1064, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 1093, 1101,
	0, 0, 0, 0, 0, 1056, 1057, 1094, 1086, 1087,
	1088, 1096, 1097, 1098, 0, 0, 0, 1099, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 1059, 0,
	0, 1100, 0, 0, 0, 1091, 0, 0, 0, 0,
	0, 0, 1079, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 1075, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1081, 1082, 1083, 1084, 1080, 0, 0,
	0, 0, 1064, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1056, 1057, 1094, 1086, 1087, 1088, 1096, 1097,
	1098, 0, 0, 0, 1093, 1101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1059, 0, 0, 1100, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 1091, 0, 0, 0, 1078, 0, 0, 1079, 0,
	0, 0, 1075, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 1070, 1071, 1077, 1076,
	1072, 1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061,
	1062, 1063, 1065, 1066, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 1082, 1083, 1084, 0, 0, 0, 0, 1085, 1064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 1093, 1101, 0, 0, 0, 0, 0, 1056, 1057,
	1094, 1086, 1087, 1088, 1096, 1097, 1098, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1059, 0, 0, 1100, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 1079, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 1075, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 1070, 1071, 1077, 1076, 1072, 1073, 1074, 1095,
	0, 1069, 1067, 1068, 1060, 1061, 1062, 1063, 1065, 1066,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1081, 1082, 1083, 1084,
	1080, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1093, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 0,
	0, 1079, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 1070,
	1071, 1077, 1076, 1072, 1073, 1074, 1095, 0, 1069, 1067,
	1068, 1060, 1061, 1062, 1063, 1065, 1066, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 1304, 0, 0,
	1312, 1301, 1331, 1290, 1322, 1321, 1080, 0, 1292, 1291,
	0, 0, 0, 0, 1333, 1332, 0, 0, 0, 0,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	1312, 1301, 1331, 1290, 1322, 1321, 0, 0, 1292, 1291,
	0, 0, 0, 0, 1333, 1332, 0, 0, 0, 0,
	0, 0, 1327, 0, 1319, 1318, 0, 0, 0, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1327, 0, 1319, 1318, 0, 1316, 1314, 1315,
	0, 0, 1092, 0, 1317, 1070, 1071, 1077, 1076, 1072,
	1073, 1074, 1095, 0, 1069, 1067, 1068, 1060, 1061, 1062,
	1063, 1065, 1066, 0, 1300, 0, 0, 1316, 1314, 1315,
	0, 1305, 1303, 1306, 1307, 1308, 1309, 1310, 0, 1330,
	0, 0, 0, 0, 0, 0, 1294, 1293, 0, 0,
	0, 0, 0, 0, 1300, 0, 0, 0, 0, 0,
	0, 1305, 1303, 1306, 1307, 1308, 1309, 1310, 0, 1330,
	0, 0, 1296, 546, 0, 572, 1294, 1293, 0, 0,
	0, 0, 0, 0, 1320, 0, 0, 0, 1302, 0,
	0, 0, 0, 551, 0, 0, 0, 0, 0, 0,
	0, 0, 1296, 0, 0, 549, 0, 0, 0, 0,
	0, 0, 0, 0, 1320, 0, 0, 1313, 1302, 0,
	0, 1434, 1432, 1433, 1436, 1435, 550, 0, 0, 0,
	0, 552, 0, 0, 0, 0, 0, 0, 0, 558,
	559, 0, 0, 0, 568, 0, 0, 1313, 0, 1297,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 553,
	1311, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 0, 0, 0, 1297,
	0, 571, 0, 1295, 0, 0, 0, 1328, 1329, 0,
	1311, 1298, 0, 0, 0, 0, 0, 0, 0, 0,
	1335, 0, 0, 0, 0, 0, 554, 0, 0, 1299,
	0, 0, 0, 1295, 1334, 0, 0, 1328, 1329, 0,
	0, 0, 0, 0, 555, 556, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1299,
	0, 0, 562, 0, 1334, 0, 0, 557, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 548,
	565, 575, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 566, 0, 0, 0, 570,
	0, 0, 0, 0, 576, 0, 0, 0, 0, 563,
	567, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569,
}
var sqlPact = [...]int{

	3562, -1000, -14, -1000, -1000, -1000, 178, -1000, -1000, -1000,
	-1000, 177, 174, 173, -1000, 170, 167, 165, 164, 163,
	160, 157, 156, 153, 151, 150, -1000, 148, -1000, -1000,
	-1000, -1000, 141, 140, 139, 137, 135, 131, 126, -1000,
	1045, 22429, 122, 119, 1464, -1000, 36381, 114, 113, 111,
	110, 1044, 107, 106, 26513, 1079, 1496, 103, 102, 101,
	96, 95, 965, 36043, 1462, 2569, 1103, 1599, 35702, 22088,
	1598, 1461, 35361, -1000, -1000, 35020, 92, 89, 81, 75,
	74, -1000, -1000, 34679, 64, 63, 62, 60, 56, 53,
	47, 45, 42, 39, 33, 30, 28, 25, -1000, 24,
	22, 21, -1000, 43531, 20, 19, 18, 1097, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 867, 124, -1000, 884, 484, 2614, 8369, 1032,
	1025, 1009, 1008, 1030, 38409, 36381, 16, -54, 15, -1000,
	1969, 662, 19642, 3562, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26172, 25831,
	34338, 33997, 6254, 760, -1000, -17, 23107, 36381, -1000, 159,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15066,
	14713, 558, 159, -1000, -1000, -1000, -1000, -1000, 33656, -1000,
	33315, 32974, 1463, 32633, -1000, -1000, -1000, -1000, 32292, -1000,
	-1000, 1913, 1623, 1611, 25490, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 31954, 31613, 31272,
	30931, 30590, 494, -1000, -1000, -1000, 17882, -1000, -1000, -1000,
	-1000, 14, -1000, 12, -1000, 10, 9, 4, 3, -1000,
	1, 0, -1000, -5, -6, -1000, -9, -10, 30249, 842,
	1221, -1000, -1000, -16, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36381, -1000, 15770, -1000, 493, -1000, 1618, -1000,
	15770, -1000, 1202, -1000, -1000, -1000, -1000, -1000, 36381, -1000,
	-1000, -1000, -1000, -1000, -1000, 2139, 1148, 490, 29908, -1000,
	1568, -1000, 595, 766, -1000, -1000, -1000, 9425, 183, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1193, 23459,
	1257, 1975, 1910, 2137, 1374, 1792, 1723, 1714, 1707, 1689,
	2136, 972, 2135, 1816, 1034, 2134, 1680, 1199, 674, 2133,
	1616, 1615, -1000, -1000, -1000, -1000, 911, -1000, -1000, -1000,
	27865, -1000, -1000, 787, 889, 884, -1000, -1000, -1000, 1342,
	1828, 1828, 1828, 1999, 308, 307, -1000, 124, -1000, 1428,
	-1000, 1142, -1000, -1000, -1000, -1000, -1000, 42689, -1000, -1000,
	15770, 15770, 15770, 15770, 15770, 1128, 516, -1000, 487, 486,
	7664, -1000, -1000, 2118, -1000, -1000, -1000, 320, -1000, -1000,
	15770, 159, -1000, -1000, -1000, -1000, 485, 2129, -1000, 624,
	-1000, -1000, -1000, 600, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1627, 483, 482, 481, -1000, 480, -1000,
	-1000, 478, 477, 465, 464, 462, 460, 458, 457, 456,
	453, 451, 450, 449, 447, 445, 1042, -1000, 618, -1000,
	-1000, 618, 618, -1000, 422, 422, 425, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 422, -1000, -1000, -1000, 560,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 440, 1303, -1000, -1000, 1303, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 759, 37733, -28, 36381, -1000, 438,
	-28, -1000, -1000, 437, -1000, 10833, 10833, -1000, -1000, -1000,
	-1000, -1000, 10129, 1778, -1000, 3872, -186, 317, 559, -1000,
	18586, 21396, -1000, -1000, 1339, 1719, 850, -1000, 984, 1716,
	455, -1000, 1189, -1000, 946, 1712, -111, 1647, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 23797, 23107, -17, -34, -1000,
	-1000, -1000, 5902, 42689, -1000, 42689, -1000, 826, 20344, 159,
	-1000, -1000, -1000, -1000, 436, 1297, 603, -1000, 324, -1000,
	29567, 603, 1294, -1000, -1000, -1000, 27865, -1000, 36381, -1000,
	36381, -1000, 853, -1000, 38071, 127, 1706, -1000, -1000, 127,
	1705, -1000, 118, 1698, -1000, -1000, 1157, 1691, -1000, -34,
	1685, -1000, -1000, 15770, -42, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 662, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 29226, 22768, 1353, 616, 42689,
	2053, 43363, 23797, 42689, 22768, -1000, -1000, 36381, -1000, 15770,
	-1000, 2050, 1542, -29, -1000, -1000, -1000, -1000, -1000, 1338,
	1360, 703, 1064, 9425, 9425, 1872, -1000, 181, 6254, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28885, -1000, -1000,
	-1000, 1131, 36381, -1000, -1000, 1626, -1000, 22768, 36381, -1000,
	36381, -1000, 36381, -1000, 36381, -1000, 36381, -1000, -1000, -1000,
	-1000, -1000, 807, -1000, 1625, -1000, -1000, 36381, -1000, 1335,
	-1000, -1000, -1000, 28547, 28206, -1000, 971, 783, -1000, -1000,
	128, -1000, 36381, 1954, 582, -1000, 1342, 1375, 1622, 659,
	1230, 1423, 14360, 1446, 15770, 124, -1000, -1000, 124, 124,
	9073, -1000, -1000, -1000, 36381, -1000, 43333, 43363, 6254, 770,
	15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770,
	15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770,
	15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770, 15770,
	15770, 15770, 1531, 15770, 757, 15770, 15770, 15770, 15770, 1451,
	1104, 421, 1108, -1000, 2086, 2086, 2086, 42962, 42962, 381,
	516, -1000, 15770, -1000, 85, 15770, 307, 41026, -27, 7312,
	-1000, -1000, -1000, 14008, 621, 42689, 159, 6606, -1000, 2117,
	834, 1608, 1521, 435, 566, 565, 563, 506, 15770, 15770,
	13656, 13303, 12950, 16474, 12597, 15770, 8016, 15770, 15770, 15770,
	15770, 12244, 11891, -1000, 431, -1000, -1000, -1000, -1000, 2116,
	-1000, -1000, 2115, -1000, 767, 765, 2112, -1000, -29, -1000,
	37733, -1000, 36381, -28, 2047, 36381, -1000, 97, -1000, 41712,
	-1000, 97, -45, -1000, 1426, 1424, 19993, 1366, 1136, 1136,
	1136, -1000, 428, 507, 559, 5179, 11538, -1000, 26851, 1143,
	205, 297, 18234, 1778, -1000, 36381, -38, 1002, -1000, 25149,
	1957, 1953, 1934, 27865, 2015, 85, 1949, 1613, 750, 27865,
	1948, 747, 2013, 85, 1612, 744, 36381, 6254, 1942, 556,
	-1000, 36381, -1000, -1000, -1000, 1610, -47, -1000, -1000, 24811,
	2044, 1681, -1000, 1054, -1000, 2043, 36381, 1201, 1288, -1000,
	-1000, 778, 1667, 614, 240, 2039, 240, 20694, -1000, 36381,
	-1000, 36381, -1000, -1000, 36381, -1000, 36381, -1000, 36381, 36381,
	-1000, 36381, 36381, -60, 42689, 3303, 24473, 741, -1000, 650,
	24811, 268, -63, -1000, 859, -1000, -1000, -1000, -1000, 250,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 425, 1042, 422, 422,
	422, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 560, -1000,
	-1000, 618, 618, 618, -1000, -1000, -69, -1000, 1601, 584,
	-70, 681, -29, -1000, 1303, -1000, 1264, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2126, -1000, 2092, -1000, -1000, 2111, -30, -1000, -30, -1000,
	6254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36381, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 158, -1000, -1000,
	-1000, -1000, -1000, -1000, 36381, 36381, 36381, -1000, 27865, 609,
	1624, -1000, 1955, 1375, 1622, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 42689, -1000, 363, -1000, -1000, 42689, 1038,
	1452, -1000, 1452, -31, -1000, 41585, 1416, 36381, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 577,
	448, 448, 800, 800, 800, 800, 2071, 921, 1494, 397,
	4620, 4620, 4620, 4620, 4620, 4620, 4620, 4620, 2552, 1569,
	1569, 2552, 2552, 2552, 2552, 2552, 4620, 4620, 4620, 42962,
	42835, 2785, 15770, 15770, 740, 1080, 421, 2785, 15770, 2785,
	2785, 2785, 2785, -1000, 2386, -1000, -1000, -1000, -1000, 1591,
	420, 16474, 16474, -1000, -1000, -1000, 7664, 16826, -1000, -1000,
	-1000, -1000, 419, 15770, -1000, 41153, -222, 294, -109, -1000,
	15770, 505, -71, -1000, 862, -1000, 15770, -1000, -32, 15770,
	15770, 15770, 288, -1000, 287, -1000, 737, -1000, 729, 728,
	727, -1000, 418, 1130, 417, 414, 15770, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 42562, 39126, 284, -1000, 1589,
	-109, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 283, -1000,
	282, -1000, 42416, -109, 281, 4742, -1000, 16474, 16474, 16474,
	7664, 413, 271, -1000, 41426, -1000, 42190, 11185, 11185, 11185,
	269, 42152, 15770, -109, 39091, 4710, 4332, -75, -78, -1000,
	-86, -1000, 2110, -93, 252, 575, 574, 251, -1000, -1000,
	412, -94, 614, 10833, 19290, 6254, -1000, 614, 10129, -1000,
	19993, 19993, 1312, 1420, 19993, -1000, -1000, -1000, -1000, 26851,
	555, 559, 26851, -1000, 2109, 1378, 248, -1000, -1000, -1000,
	36381, 410, -1000, 559, 247, 991, 36381, 36381, 36381, -1000,
	-1000, 1280, 37395, 1275, 43363, 36381, -1000, 408, 407, 1403,
	1397, 36381, 36381, 37057, 36719, 36381, 985, 85, -1000, 572,
	405, 36381, 959, 569, 36381, 85, -1000, 404, 36381, 918,
	-1000, 564, 1487, 1235, -1000, 820, 1586, 36381, 246, -99,
	-33, 43363, -1000, -1000, -1000, -1000, -1000, 36381, 466, 36381,
	85, 36381, 2125, 85, 36381, 1664, 1733, 524, 36381, 1423,
	15770, 1119, -1000, 18938, 642, 36381, 908, 88, -1000, -1000,
	-1000, 549, 36381, -1000, -1000, 127, 127, -1000, 118, 1157,
	-34, -1000, 15770, -1000, -1000, 36381, 23797, -100, -1000, -1000,
	43363, -1000, 514, 718, -1000, 2108, 602, 23797, 36381, 9425,
	9425, -1000, 1439, -1000, -1000, 928, -1000, 1006, -1000, -1000,
	-1000, -1000, 9425, -1000, -39, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1456, 1010, -1000, -1000, -1000, 1038, -1000, 15770,
	2105, -1000, -1000, -1000, 9073, -1000, -1000, -1000, 36381, -157,
	15770, 2785, 2785, 15770, 16474, 16474, -1000, 2785, -1000, -1000,
	-1000, -1000, -1000, 1583, 403, 15770, 43363, 4581, 4420, -107,
	-1000, 15770, -36, -1000, 15770, -1000, 40880, -1000, -1000, 510,
	1731, -1000, 15770, 41993, 245, 10481, -1000, 41871, -52, -52,
	-1000, 2122, 1273, 1067, 949, 880, 2104, -1000, 21045, 617,
	1145, 40753, 43333, 43363, -1000, 15770, -1000, -1000, 1554, 15770,
	-1000, 43333, 43363, 16474, 16474, 16474, 16474, 16474, 16474, 16474,
	16474, 16474, 16474, 16474, 16474, 16474, 16474, 16474, 16474, 16474,
	16474, 16474, 1391, 16474, 2084, 2084, 2084, -37, 15770, -1000,
	1602, 1554, 15770, 15770, 43363, 242, 241, 238, -1000, 15770,
	-109, 15770, 15770, 15770, -1000, -1000, -1000, 235, -1000, 2103,
	-1000, -1000, -1000, -1000, 268, -1000, 1498, -1000, -91, -1000,
	1778, -1000, 1498, -1000, -1000, 1312, -1000, 402, 15770, 19993,
	-1000, 504, -1000, -108, -1000, 26851, -1000, 501, -219, -1000,
	547, -1000, 559, 401, 36381, 26851, -1000, -1000, -1000, 726,
	725, 1662, -1000, 1261, -1000, 646, -1000, 943, 15770, 17530,
	400, 399, 1026, -1000, 1658, 1157, 1656, 1157, -1000, -38,
	969, -1000, 21747, 15770, -1000, 719, 21747, -1000, -1000, 15770,
	-1000, 713, 21747, 602, 1553, 790, -1000, 813, -1000, 1470,
	-1000, 24811, 396, 36381, 395, -1000, 394, -1000, -1000, 382,
	36381, 1365, 524, 24135, -1000, 603, 908, -1000, 42689, -1000,
	908, 8721, 1911, -120, -1000, -1000, -1000, 614, 20694, 19993,
	10129, -121, -1000, -1000, -1000, -1000, 42689, -39, 1890, 1890,
	-1000, 2100, -1000, 499, 234, -1000, 27527, -1000, -39, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36381, -40, -1000, -1000,
	6254, 36381, 36381, 1149, 40607, -1000, 1825, 6254, 2045, 2785,
	3956, 285, 15770, 43363, 43108, -122, 15770, 15770, -1000, 230,
	15770, 498, 42689, -1000, -1000, -1000, 42689, 15770, 2121, 15770,
	228, 226, 225, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 224, -1000, -1000, 38747, 15770, 220, -1000, 219, 218,
	42689, 1602, 42689, -1000, -1000, 567, 567, 883, 883, 883,
	883, 2084, 1106, 1214, 601, 267, 267, 267, 479, 794,
	794, 267, 267, 267, 1547, 1347, 379, 4788, 15770, 217,
	-1000, -1000, 42689, 42689, 215, -1000, -1000, -1000, -109, 347,
	40480, 40334, -1000, 214, 213, 1512, 1996, -1000, 19993, 1512,
	-1000, 36381, 42689, -1000, -186, -1000, 2098, -1000, -1000, 1378,
	-1000, 5545, 26851, 36381, -127, -1000, 36381, 36381, 36381, 1653,
	-1000, 3203, -1000, 40207, -128, -1000, 312, 1972, 15770, -1000,
	-1000, 378, 17530, 36381, -1000, 1398, 1444, 672, 36381, -1000,
	36381, -1000, 36381, 36381, 36381, -1000, 375, 159, -129, 36381,
	-1000, -130, 36381, -1000, -1000, 23797, 764, -1000, 1105, 1480,
	-1000, 17530, 374, 36381, 24811, 2033, 17530, 1197, 1379, 524,
	24135, -1000, 778, -1000, -1000, -41, -1000, 373, 85, 908,
	-1000, -48, -1000, 545, 1844, -1000, 1832, 497, -1000, -1000,
	-65, 372, -1000, 544, 536, -1000, 1456, -1000, -1000, -1000,
	-1000, -1000, -1000, 1825, 15770, 15770, 43108, -135, -1000, 2785,
	2785, -1000, 40061, -1000, 42689, -1000, 41871, -1000, -1000, -1000,
	-1000, 1093, -1000, 39835, -1000, -1000, -1000, -1000, 16474, 1535,
	371, 43363, 39797, -1000, -1000, 15770, -1000, -1000, -1000, -1000,
	612, 15770, 15770, 1778, 612, -136, 559, -1000, -1000, -1000,
	2094, -1000, -137, -1000, -1000, -1000, -1000, 36381, -1000, 36381,
	-1000, 6254, 36381, 1526, 1250, -1000, -1000, 1393, 370, 16474,
	36381, -1000, 1031, 17530, 1825, 159, 6254, 1825, 39638, 6606,
	-142, -143, 1248, -1000, 1240, 15770, -1000, 43363, 1157, 1157,
	-1000, 705, 704, 15770, 699, -1000, 688, -1000, -73, 21747,
	-1000, -1000, 1990, 1115, -144, 17530, -145, 208, 85, -151,
	36381, -1000, 524, 24135, -1000, 1733, 1738, 36381, 1929, -1000,
	-1000, 368, 367, 366, -1000, 27189, 27189, 23797, 23797, -1000,
	-1000, 2785, 2785, -1000, -1000, 204, 1145, 1982, -1000, 311,
	16474, 43363, -153, -1000, 39516, -1000, 36381, 42689, -109, -1000,
	-1000, 26851, 398, -1000, -1000, 996, -1000, -1000, 36381, 1256,
	-1000, -1000, 15770, 4788, 365, 1470, 361, -1000, -1000, -1000,
	-1000, -1000, -1000, 1972, -32, -1000, 979, -1000, -1000, 42689,
	1971, -1000, -1000, 36381, 36381, -52, 353, 351, -1000, 1113,
	36381, 1031, -161, -1000, 1470, -1000, 1031, 349, 24135, -1000,
	1365, 779, -164, 36381, -1000, -1000, 6958, 23797, 23797, -1000,
	-167, -1000, -1000, -1000, 999, 15770, 311, -170, -1000, -1000,
	-76, -1000, 2021, -1000, -1000, -1000, -1000, 1652, 39254, 1320,
	36381, -1000, 36381, 1825, 197, 36381, 649, 6254, -1000, -1000,
	193, 15770, 15770, 348, 346, 345, 1470, 1031, -1000, 1470,
	17530, -1000, 1379, 848, -1000, 614, -1000, -172, -173, -1000,
	191, 16122, 16122, -109, -1000, 36381, 344, 1641, -1000, 1151,
	1047, 190, -175, -1000, -1000, 324, -1000, 15770, -1000, 2121,
	-180, -182, 36381, 36381, 36381, -1000, 1470, -1000, -183, -1000,
	20694, -1000, 602, 602, -1000, -1000, -1000, 17178, 1222, 895,
	41299, -1000, -1000, -1000, 36381, -1000, 1195, 1162, 899, -1000,
	-1000, -1000, -1000, -1000, 1320, 42689, -1000, -1000, -188, -189,
	-190, -1000, 1031, -159, -1000, -1000, 2058, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1818, -1000, 657, 1262, 1262, 1151,
	322, 321, 1135, 1470, -1000, 15418, -1000, 2073, -1000, -1000,
	1368, -1000, -1000, 1087, 1057, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 185, 6254, 90, 6254, -1000, 641, -1000,
	640, 319, 1340, -44, 9777, 768, 356, -119, -1000, -197,
	-1000, 42689, -1000, -1000, 313, -1000, 9777, 1087, -1000, 9777,
	9777, -199, -1000, -1000, -200, -1000, -55, 1057, -166, -1000,
	-1000, 1057, -1000,
}
var sqlPgo = [...]int{

	0, 2610, 2606, 1640, 2089, 2605, 2603, 2600, 2599, 2596,
	2590, 2588, 2579, 2576, 2575, 2574, 2573, 2572, 2570, 2569,
	2568, 2566, 2564, 2555, 2087, 2553, 2085, 2547, 2546, 2545,
	2544, 2542, 48, 2536, 2534, 2071, 2526, 2520, 2512, 2506,
	2504, 2502, 2035, 2495, 2010, 2494, 2493, 2491, 2490, 2482,
	1989, 2481, 87, 114, 1962, 2480, 2479, 1959, 1861, 1857,
	2478, 1848, 2477, 2476, 1844, 1841, 2474, 101, 2472, 2471,
	2467, 1808, 1776, 2462, 2459, 2457, 156, 2452, 1675, 2451,
	2450, 2448, 2447, 2446, 2437, 2435, 2433, 2432, 2428, 2427,
	2424, 2423, 2416, 2413, 2410, 2409, 2408, 2405, 163, 2403,
	2401, 1660, 1644, 2400, 2399, 37, 39, 16, 57, 28,
	144, 2812, 142, 2398, 2391, 2385, 2384, 2383, 2381, 24,
	98, 95, 2376, 106, 2374, 2372, 52, 32, 33, 17,
	2370, 90, 2369, 2368, 2108, 22, 2365, 2361, 141, 2351,
	30, 38, 2581, 159, 157, 116, 122, 2347, 2346, 2343,
	53, 120, 6, 4, 3, 8, 1, 2342, 2, 5,
	2340, 2338, 18, 88, 117, 2337, 44, 139, 2336, 2335,
	132, 2326, 62, 92, 1547, 108, 124, 1302, 99, 2324,
	65, 20, 66, 2323, 2322, 161, 43, 2321, 40, 61,
	147, 113, 2316, 79, 162, 130, 80, 131, 134, 2315,
	2314, 2313, 123, 2312, 118, 107, 2311, 2305, 71, 2304,
	97, 138, 2302, 145, 111, 2300, 2299, 86, 2298, 127,
	2296, 2295, 160, 150, 115, 14, 51, 67, 11, 1560,
	1548, 137, 104, 56, 63, 2294, 808, 1382, 1361, 41,
	96, 74, 58, 100, 46, 93, 149, 35, 2291, 2284,
	140, 2276, 2270, 2269, 2268, 2267, 109, 2266, 2263, 23,
	2260, 77, 91, 50, 85, 49, 59, 128, 112, 154,
	103, 2259, 78, 126, 2257, 378, 2256, 2252, 1641, 121,
	2250, 2247, 2245, 1297, 1140, 1101, 431, 2242, 2240, 992,
	475, 2239, 2238, 75, 2237, 119, 110, 94, 148, 153,
	83, 2235, 125, 29, 2232, 36, 31, 0, 472, 60,
	2216, 129, 68, 2214, 2213, 2209, 2208, 34, 9, 7,
	13, 15, 12, 27, 26, 2205, 2204, 133, 81, 72,
	2187, 158, 2185, 2182, 2170, 45, 2168, 21, 2167, 19,
	2166, 2165, 25, 10, 2161, 2160, 151, 2156, 89, 2153,
	1975, 2152, 152, 2151, 2146, 1698, 2145, 54, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 121, 121, 120, 120,
	120, 120, 120, 120, 120, 120, 120, 120, 120, 120,
	120, 120, 120, 118, 118, 123, 123, 123, 125, 125,
	122, 122, 117, 117, 24, 24, 65, 65, 108, 58,
	58, 58, 305, 305, 306, 306, 104, 104, 105, 105,
	105, 105, 106, 106, 107, 107, 107, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 42, 42, 43, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 49, 49, 49, 47, 47, 47, 46, 46,
	46, 45, 45, 45, 48, 48, 48, 176, 176, 175,
	175, 179, 179, 50, 50, 50, 50, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 53, 53, 53, 53, 53, 53, 53,
	274, 274, 273, 51, 51, 248, 248, 54, 54, 203,
	203, 55, 55, 55, 55, 55, 56, 56, 66, 66,
	346, 346, 346, 350, 350, 351, 351, 352, 352, 352,
	352, 352, 352, 352, 348, 348, 61, 61, 61, 61,
	62, 62, 62, 63, 63, 103, 103, 70, 70, 70,
	70, 70, 70, 70, 70, 70, 29, 30, 30, 31,
	31, 32, 72, 72, 72, 74, 71, 71, 71, 73,
	73, 73, 73, 75, 75, 76, 76, 76, 76, 76,
	77, 77, 299, 297, 297, 298, 298, 148, 148, 148,
	148, 148, 149, 149, 149, 304, 304, 304, 304, 304,
	304, 303, 303, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	90, 90, 90, 98, 98, 98, 98, 98, 98, 98,
	79, 79, 84, 84, 84, 84, 84, 80, 80, 85,
	85, 86, 86, 87, 87, 87, 87, 87, 87, 81,
	81, 81, 81, 89, 89, 89, 89, 88, 88, 94,
	94, 94, 94, 94, 94, 91, 91, 91, 91, 92,
	92, 92, 95, 95, 95, 95, 82, 82, 83, 83,
	96, 96, 97, 97, 97, 97, 97, 93, 93, 93,
	347, 347, 349, 349, 59, 59, 38, 38, 39, 39,
	150, 150, 151, 151, 227, 227, 227, 227, 152, 152,
	124, 124, 124, 153, 153, 154, 154, 155, 155, 155,
	157, 157, 158, 158, 159, 159, 159, 156, 156, 156,
	226, 315, 315, 316, 316, 316, 316, 316, 316, 317,
	317, 317, 317, 317, 317, 317, 313, 313, 314, 311,
	311, 312, 312, 312, 312, 353, 353, 225, 225, 162,
	162, 318, 318, 318, 318, 319, 319, 319, 319, 319,
	322, 321, 320, 320, 320, 320, 320, 260, 260, 260,
	100, 100, 40, 40, 130, 130, 41, 41, 37, 37,
	37, 207, 207, 166, 166, 265, 265, 265, 141, 141,
	119, 119, 119, 17, 13, 13, 13, 13, 13, 13,
	23, 23, 21, 21, 208, 208, 209, 209, 60, 60,
	64, 64, 69, 69, 99, 99, 99, 99, 99, 99,
	25, 25, 25, 25, 33, 33, 33, 33, 68, 68,
	355, 355, 137, 137, 137, 137, 138, 138, 222, 222,
	223, 223, 356, 356, 224, 224, 224, 132, 131, 133,
	133, 36, 36, 36, 126, 126, 127, 127, 128, 128,
	129, 129, 357, 357, 57, 57, 57, 102, 102, 144,
	144, 219, 219, 219, 221, 221, 220, 220, 220, 193,
	193, 193, 101, 101, 171, 171, 181, 181, 182, 182,
	271, 183, 183, 67, 67, 111, 111, 109, 109, 109,
	109, 109, 109, 109, 109, 110, 110, 110, 112, 112,
	112, 112, 112, 112, 112, 115, 115, 115, 116, 116,
	116, 114, 114, 328, 328, 328, 331, 331, 327, 329,
	329, 330, 330, 354, 354, 194, 194, 194, 161, 160,
	160, 164, 164, 163, 165, 165, 264, 264, 264, 191,
	191, 190, 190, 190, 190, 212, 212, 210, 210, 211,
	211, 215, 215, 216, 216, 216, 217, 217, 218, 218,
	189, 189, 244, 244, 214, 214, 213, 113, 113, 113,
	170, 170, 170, 172, 172, 234, 234, 234, 235, 235,
	233, 233, 233, 233, 266, 266, 266, 266, 266, 266,
	266, 266, 344, 344, 344, 345, 345, 263, 263, 267,
	267, 267, 267, 267, 267, 261, 261, 261, 261, 262,
	262, 272, 272, 197, 197, 197, 197, 195, 195, 196,
	196, 268, 268, 268, 268, 192, 192, 269, 269, 269,
	228, 228, 275, 275, 275, 293, 293, 169, 169, 169,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 277, 277, 277, 277, 279, 279, 279, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 292, 292, 292, 292,
	292, 280, 280, 287, 287, 288, 288, 289, 290, 281,
	281, 282, 282, 283, 284, 291, 291, 291, 291, 295,
	295, 285, 285, 285, 285, 285, 286, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 205, 205, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 238, 238, 238, 238, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	323, 323, 323, 323, 323, 323, 323, 323, 325, 325,
	326, 326, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 332, 332, 333, 333, 335, 335, 336, 336,
	337, 338, 338, 338, 339, 340, 340, 334, 334, 341,
	341, 341, 342, 342, 343, 343, 343, 343, 343, 250,
	250, 251, 252, 258, 258, 258, 147, 147, 147, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 139, 139, 139, 139, 139, 178, 178, 177,
	177, 247, 247, 245, 245, 249, 249, 198, 198, 294,
	294, 294, 294, 294, 294, 294, 199, 199, 199, 206,
	200, 200, 201, 201, 201, 201, 201, 241, 242, 202,
	202, 202, 243, 243, 253, 257, 257, 256, 255, 255,
	254, 254, 231, 231, 232, 232, 230, 229, 186, 186,
	185, 185, 184, 184, 358, 358, 259, 259, 187, 187,
	188, 180, 180, 270, 270, 270, 270, 173, 173, 146,
	146, 174, 174, 142, 142, 145, 145, 143, 143, 143,
	143, 167, 167, 168, 168, 140, 140, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 296, 296,
	296, 246, 134, 134, 134, 135, 135, 136, 136, 301,
	301, 301, 302, 302, 302, 302, 300, 300, 300, 300,
	300, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 6, 1,
	3, 1, 6, 6, 3, 5, 3, 2, 6, 3,
	3, 4, 4, 3, 3, 1, 3, 3, 1, 1,
	2, 1, 1, 1, 1, 1, 3, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	3, 3, 4, 4, 3, 4, 4, 4, 3, 2,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 2, 3, 3, 3, 2, 3, 4,
	3, 5, 3, 4, 5, 2, 3, 3, 3, 4,
	2, 3, 4, 3, 3, 3, 4, 4, 4, 4,
	2, 3, 7, 7, 7, 4, 5, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 8, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 1, 0, 9, 9, 6, 7, 5,
	3, 5, 1, 3, 1, 1, 1, 10, 11, 9,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 2, 4, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 4,
	4, 2, 3, 5, 5, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 1,
	0, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 1, 0, 2, 2, 2, 3,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -24, -26, -29, -34,
	-35, -55, -42, -43, -44, -54, -50, -56, -57, -58,
	-59, -51, -65, -64, -66, -69, -67, -60, -61, -70,
	-78, -99, -100, -101, -102, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -36, -37, -38,
	-39, 73, -40, -41, 94, -330, 98, -45, -46, -47,
	-49, -48, 102, 109, 112, 134, 145, 231, 237, 258,
	260, 262, 269, -109, -111, 256, -62, -63, -71, -72,
	-73, -74, -103, 281, -79, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, 284, -25, -33, -68, 323, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 111, -328, -112, -110, 378, 257, 332, 35,
	293, 61, 105, 264, 348, 355, -115, -113, -114, -116,
	274, 340, 303, 382, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 2, 303, 343,
	87, 153, 242, -346, 2, -174, 303, 87, -143, -134,
	371, 4, -307, -309, 20, 21, 23, 33, 34, 35,
	40, 44, 47, 48, 55, 60, 61, 62, 67, 64,
	65, 66, 69, 71, 72, 75, 76, 77, 85, 86,
	88, 90, 94, 96, 98, 101, 102, 104, 109, 111,
	110, 112, 122, 123, 128, 130, 135, 141, 142, 145,
	146, 154, 157, 159, 152, 169, 170, 171, 175, 176,
	177, 180, 179, 184, 185, 188, 189, 192, 194, 196,
	197, 200, 198, 202, 203, 205, 204, 210, 212, 213,
	215, 218, 221, 224, 227, 228, 229, 230, 231, 233,
	235, 237, 239, 240, 241, 242, 243, 245, 246, 248,
	249, 250, 251, 252, 256, 254, 255, 257, 258, 259,
	260, 262, 264, 265, 267, 282, 283, 294, 269, 270,
	271, 272, 273, 277, 275, 278, 279, 281, 284, 286,
	289, 292, 293, 295, 298, 299, 296, 291, 302, 304,
	305, 306, 307, 308, 309, 310, 311, 318, 319, 323,
	324, 325, 326, 329, 330, 331, 332, 334, 337, 338,
	339, 344, 349, 350, 351, 352, 353, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 51, 52, 53, 56,
	89, 91, 92, 108, 113, 114, 124, 125, 126, 136,
	138, 147, 148, 151, 158, 160, 161, 162, 163, 164,
	166, 173, 174, 182, 199, 209, 211, 222, 226, 234,
	236, 244, 266, 276, 287, 288, 297, 300, 313, 314,
	315, 320, 321, 336, 340, 341, 381, 381, 2, 170,
	241, -142, -134, 87, 381, 381, 381, 381, 303, 2,
	333, 343, -207, 87, 328, 381, 381, -134, 237, 22,
	2, 96, 157, 331, 330, 22, 233, 275, 305, 307,
	2, 381, 381, 381, 381, 381, 2, 343, 303, 153,
	87, 333, -134, 2, -53, 2, 378, -52, -4, -35,
	-44, -54, -50, -24, -26, -42, -58, -57, -59, -61,
	-65, -64, -67, -71, -72, -78, -101, -102, 281, 111,
	-350, 2, 22, -351, -352, 73, 102, 134, 274, 157,
	96, 330, 303, 2, 170, 2, -134, 2, -346, 2,
	170, 2, -350, 2, -134, 2, -138, 2, 269, -134,
	381, 381, 381, 381, 381, 189, 55, 266, 278, -76,
	319, -75, 313, -299, -77, 2, -175, 200, -134, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 2, -98, 278, 34,
	55, 22, 60, 88, 135, 153, 154, 176, 68, 69,
	240, 189, 171, 318, 177, 279, 304, 319, 73, 334,
	308, 110, 4, 87, 200, 280, 313, 381, 381, 381,
	-354, 2, 303, 271, 284, -110, -112, -111, -163, -164,
	327, 165, 107, 220, -109, -111, 2, -328, -98, 278,
	2, 55, 22, -297, 2, -259, 216, -236, 93, -238,
	369, 370, 364, 206, 354, -250, -240, -253, 108, 266,
	378, -142, -239, 384, 9, -325, -111, 29, -251, -252,
	49, -134, 7, 8, 5, 6, -140, -277, -246, -286,
	322, 115, 208, -323, -324, 4, -307, -301, -278, -288,
	-282, -285, 166, 58, 79, 80, 83, 81, 84, 280,
	333, 50, 28, 113, 114, 226, 234, 300, 320, 321,
	147, 209, 148, 56, 136, 182, 101, 37, 39, 41,
	42, 51, 52, 89, 91, 92, 124, 125, 126, 158,
	160, 161, 162, 163, 164, 211, 244, 287, 297, 314,
	315, 341, -308, -289, -290, -283, -284, 74, 116, 133,
	156, 149, 168, 172, 183, 186, 195, 201, 223, 225,
	263, 285, -291, -355, 2, 319, 319, 2, -355, 2,
	-355, 2, -137, 2, 319, 316, -331, 245, -327, -134,
	-331, 381, 381, 383, 381, -160, -161, 2, 22, 99,
	-188, 2, 378, -266, 2, 376, -268, -142, -111, -267,
	378, 217, -3, 2, -268, 147, -142, 2, -268, 147,
	-142, 2, -134, 2, -145, 147, -142, -300, 4, -307,
	-309, -308, -310, 58, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 49, 50, 54, 57, 59, 68,
	73, 78, 79, 81, 80, 82, 83, 84, 93, 95,
	97, 99, 100, 103, 105, 107, 115, 117, 129, 131,
	132, 134, 137, 139, 150, 153, 155, 165, 167, 178,
	181, 187, 190, 191, 206, 207, 208, 214, 216, 217,
	219, 220, 232, 238, 247, 261, 274, 280, 290, 301,
	303, 312, 316, 317, 322, 327, 328, 333, 335, 342,
	343, 345, 346, 347, 348, 316, 383, -174, -167, -134,
	-230, -229, 380, -236, 2, -236, 2, 132, 378, -185,
	-186, -229, -230, 2, -175, 147, -134, 2, -175, 2,
	153, -134, 147, 2, -134, 22, 132, 2, 167, 2,
	167, 2, -269, 2, -268, -176, 147, 2, -175, -176,
	147, 2, -146, 147, 2, -145, -134, 147, 2, -167,
	147, 2, -203, 378, -274, 2, -273, -302, 4, -307,
	-309, -308, 340, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 278, 216, 383, -175, -236,
	-248, 378, 132, -236, 216, -134, 2, 282, 2, 378,
	-76, 53, 319, -223, 2, -224, -131, -132, -133, 169,
	239, 243, 353, 316, 359, 132, -297, -179, 380, -98,
	2, -305, 2, -303, 9, -302, 5, 282, 2, 240,
	279, 55, 132, 2, 2, -347, 2, 216, 132, 2,
	132, 2, 132, 2, 132, 2, 132, 2, 2, 240,
	279, 2, 129, 2, 318, 2, 2, 132, 2, 169,
	239, 294, 2, 303, 343, 2, 132, 132, 353, 2,
	-192, -268, 303, 353, 22, -163, -164, -213, -190, 129,
	-210, -211, 187, 117, 214, -194, 22, 99, -194, -194,
	44, 379, 379, -98, 282, 2, 10, 11, 57, 33,
	369, 370, 371, 372, 127, 373, 374, 367, 368, 366,
	357, 358, 361, 362, 363, 70, 360, 359, 63, 193,
	268, 118, 119, 120, 121, 253, 13, 14, 15, 26,
	219, 186, 354, 149, 285, 364, 16, 17, 18, 168,
	36, 150, -139, -147, -236, -236, -236, -236, -236, 225,
	-184, -231, 376, -111, 378, 378, -111, -236, -177, 378,
	7, -111, -245, 376, -254, -236, -185, 378, 5, 378,
	5, -332, 349, 129, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 236, -295, 344, -295, -295, -279, 378,
	-279, -280, 378, -279, 350, 355, 378, -222, -223, -222,
	316, -138, 383, -331, -168, 378, -188, -180, -270, -236,
	371, -180, -187, -259, 74, -197, 172, 201, 133, 183,
	263, 156, 7, -53, -233, 384, 378, 371, -263, 355,
	-111, -267, 378, -266, -142, 378, -121, 254, -120, 21,
	23, 102, 338, 108, 291, 309, 111, 270, 254, 108,
	111, 254, 291, 309, 270, 254, 108, 384, 111, -305,
	-143, 383, -300, 371, 295, 379, -173, -142, -186, 378,
	-162, 206, -130, -329, 348, -162, 378, -135, 147, 2,
	-134, -329, 206, -269, -144, -142, -144, 281, -134, 30,
	-123, 383, 48, 259, 108, -123, 108, -123, 383, 108,
	-123, 108, 108, -177, -236, 379, 383, -346, -352, 73,
	378, 30, -247, -275, -276, -278, -287, -281, -285, -286,
	40, 46, 45, 174, 173, 310, 199, 276, 288, 336,
	151, 38, 215, 159, 4, 158, 160, 161, 162, 163,
	164, 287, 37, 244, 125, 126, 124, 101, 92, 91,
	211, 42, 41, -289, -290, -283, -284, 89, 314, 315,
	166, 39, 52, 51, 341, 297, -306, -305, -346, -299,
	-177, 30, -223, 2, -356, 383, 185, -149, 192, 205,
	141, 217, 351, -304, 5, 4, -246, -260, 93, 189,
	-286, 8, 370, -296, 7, 369, -298, -297, -298, 77,
	380, -300, -175, 22, 283, 2, -299, -349, 129, -346,
	-299, -299, -299, -299, -299, 278, -53, 129, -134, 185,
	-299, 2, -299, 2, 303, 153, 303, -123, 383, -142,
	64, 65, 353, -213, -190, -191, -190, -214, -213, 330,
	-211, -210, -215, -236, 22, -218, 123, 202, -236, -238,
	-110, -110, -110, -165, -264, -236, 238, 153, -299, -293,
	-275, -292, 249, 250, 248, 252, 251, -275, -300, 313,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, 186, 149, 285, 36, 150, -236, 316, -236,
	-236, -236, -236, 198, 206, 208, 322, 115, 329, 99,
	212, -358, 301, 32, -243, -111, 378, -258, 27, 290,
	22, -250, 266, 378, -231, -236, -232, -178, -177, 379,
	383, -178, -249, -245, -257, -256, 345, 379, -177, 342,
	22, 99, 371, 2, 7, -204, 352, 197, 90, 142,
	196, -205, 273, -333, 122, 137, 378, 379, 2, 379,
	2, 379, 2, 379, 2, -236, -236, -198, 2, -294,
	-177, 4, 352, 197, 90, 142, 196, 273, -198, 2,
	-199, 2, -236, -177, -200, -237, -238, 369, 370, 364,
	378, 266, -201, 2, -236, -178, -236, 43, 181, 317,
	-202, -236, 132, -177, -236, -236, -236, -177, -177, 2,
	-177, 2, 378, 7, 7, 313, 313, 7, -138, -327,
	30, -167, -170, 383, 132, 30, 4, -170, 383, 379,
	172, 172, -266, -197, 172, -195, 223, -195, -195, -344,
	378, 377, -263, -300, 376, 385, -178, 2, -262, -261,
	30, -134, 221, 379, -142, 383, 316, -208, 68, 59,
	-226, 147, 59, -311, -134, 68, -312, 54, 328, 238,
	131, -208, 68, -208, 68, 68, -268, 33, -67, 66,
	132, 316, -268, 66, 316, 33, -67, 132, 316, -145,
	-300, 66, -272, 356, -134, 132, 379, 383, -150, -167,
	-151, -134, -227, -226, -313, -314, -311, 153, 328, 116,
	30, 108, 230, 30, 216, 206, -126, 306, 108, -228,
	346, -219, -67, 378, 93, 30, -219, -181, -182, -271,
	-183, -142, 378, -134, -175, -176, -176, -145, -146, -134,
	-167, 379, 383, -53, -273, 316, 335, -151, -52, 379,
	383, -169, 29, 376, -204, 378, -272, 383, 132, 359,
	316, 379, 319, -224, -148, 243, 289, 255, 277, 8,
	7, 7, 383, -300, -348, -134, 278, -53, -142, -145,
	-142, -268, 348, 129, 65, -191, -214, -216, -296, 378,
	370, -217, 266, 267, 383, -119, 31, 97, 175, -142,
	353, -236, -236, 316, -358, 301, -243, -236, 198, 208,
	322, 115, 329, 99, 212, 132, 378, -237, -237, -177,
	-240, 378, -177, 377, 387, 379, -236, 377, 377, 383,
	-255, -256, 103, -236, -164, 383, -163, -236, -177, -177,
	379, 379, 316, 316, 316, 316, 378, -338, 224, 378,
	378, -236, 30, 383, 379, 132, 379, 379, -206, 232,
	379, 10, 11, 369, 370, 371, 372, 127, 373, 374,
	367, 368, 366, 357, 358, 359, 63, 193, 268, 13,
	14, 15, 168, 150, -237, -237, -237, -177, 378, 379,
	-241, -242, 132, 129, 30, -202, -202, -202, 379, 132,
	-177, 383, 383, 383, 379, 379, 379, 7, 379, 383,
	379, 353, 353, 379, 378, 379, -228, -270, -172, 2,
	-266, -300, -228, -259, -266, -266, -196, 335, 216, 172,
	-266, -261, 379, -345, 7, -263, -262, 7, -235, -234,
	130, 204, 379, -134, 378, -263, 379, -120, -142, -134,
	-134, 206, -226, 147, -125, 206, -275, -134, 378, 378,
	175, 175, -134, -134, 147, -134, 147, -134, -134, -121,
	254, -67, 353, 378, -142, 254, 353, -134, -67, 378,
	-134, 254, 353, -104, 146, 212, 295, 132, -142, 379,
	379, 383, -135, 153, -135, -67, -175, 5, -67, -142,
	108, -127, 104, -357, 359, -134, -212, -210, -236, -193,
	-221, 261, 216, -173, 340, -134, -193, -171, 383, 132,
	359, -173, -123, -123, -123, -123, -236, -348, -305, 379,
	-275, 376, 377, 7, 7, -107, 348, -305, -348, -297,
	-297, -131, 326, 62, 243, -297, 383, -31, -32, 153,
	242, 87, 303, -217, -236, -264, -142, 384, -236, -236,
	-237, -237, 132, 378, -236, -247, 26, 26, 379, -178,
	383, -232, -236, 379, -245, 105, -236, 312, 379, 342,
	-164, -164, -164, 5, 197, 142, 196, -205, 196, -205,
	-205, 7, -339, -134, 378, 346, -163, 379, -293, -275,
	-236, -241, -236, -293, -275, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, 99, 206, 212, -237, 383, -178,
	-242, -241, -236, -236, -275, 379, 379, 379, -177, -236,
	-236, -236, 379, 7, -52, -189, 137, -272, 383, -189,
	-196, 378, -236, -266, 377, 379, 383, -262, 377, 383,
	386, 359, -263, 378, -167, -261, 316, 316, 108, 206,
	337, -315, -312, -236, -166, -265, -134, -326, 378, -323,
	-324, -140, 378, 378, -118, 102, 281, -209, 108, -123,
	108, -123, 316, -208, 68, -239, -140, -134, -177, 316,
	-239, -177, 316, -239, -107, 132, 302, 295, -152, 152,
	-227, 378, -135, 378, 378, -162, 378, -134, -128, 180,
	-357, -303, -329, -193, -193, -180, 207, 67, 379, -228,
	-182, -172, -259, 379, -108, 75, -108, 7, 377, 379,
	-106, 218, -105, -134, 5, -134, 383, -300, -134, -142,
	217, 379, -119, -300, 26, 26, -236, -247, 379, -236,
	-236, 379, -236, 377, -236, 5, -236, 379, 379, 379,
	379, -340, -134, -236, 379, 379, 379, -242, 132, 99,
	212, 378, -236, 379, 379, 383, 379, 379, 379, 379,
	-244, 139, 44, -266, -244, -167, -233, 7, -234, -300,
	376, -262, -167, 379, -134, -134, -226, 108, -316, 68,
	-317, 57, 116, 73, 206, 208, 328, 238, 54, 93,
	247, 379, 379, 383, -141, -185, 57, -141, -236, 378,
	-166, -167, 206, 93, 206, 93, 86, 324, -134, -134,
	-142, -134, -134, 378, 379, -142, 379, -134, -306, 313,
	-153, -154, 229, 150, -166, 378, -167, -150, 30, -166,
	216, -129, 179, -357, -303, -126, -220, 378, 216, -67,
	-193, 359, 86, 86, 377, 383, 378, 359, 359, -32,
	-119, -236, -236, 379, 379, -164, -334, 229, 379, -237,
	132, 378, -247, 379, -236, -335, 347, -236, -177, -335,
	379, -263, 7, 379, -226, -134, -300, -134, 116, 147,
	208, 175, 378, -237, -142, -225, -353, 72, 299, -265,
	-119, -300, -119, 379, -177, 379, 379, 208, 208, -236,
	-275, -123, -123, 316, 316, -177, 316, 316, -239, 44,
	227, 379, -166, 379, 379, -67, 379, -142, -357, -303,
	-127, 100, -167, 68, -188, -111, 378, 378, 378, -105,
	-106, -305, -305, 379, -164, 44, -237, -247, 379, 379,
	-336, -337, -134, -262, 377, -317, -135, 206, -236, -136,
	378, -152, 378, -141, -164, 247, -122, 57, -134, -134,
	-164, 378, 378, 188, 242, -142, -225, 379, -152, -225,
	378, -303, -128, 330, 207, 379, -134, -306, -306, 379,
	-341, 242, 267, -177, 379, 383, 30, 108, 379, -318,
	194, -134, -167, -119, 379, -142, -117, 335, -300, 379,
	-177, -177, 378, 378, 378, -152, -225, -152, -166, -129,
	281, -228, 379, 379, 379, -342, -343, 36, 325, 77,
	-236, -342, -337, -339, 116, -319, -322, -321, 216, 133,
	228, 286, 379, 379, -162, -236, 379, 379, -167, -167,
	-167, -152, 379, -181, -107, -107, -343, 235, 128, 266,
	235, 128, -134, -321, 216, -322, 216, 330, 96, -318,
	379, 379, 379, -225, -228, 26, -320, 203, 259, 48,
	281, -320, -319, 378, 378, -124, 48, 259, -152, -343,
	20, 208, 93, -155, 229, -156, 229, 379, -300, 379,
	-300, 340, 340, -157, 378, 184, 383, -154, -153, -158,
	-159, -236, 93, 195, 311, -155, 378, 383, 379, 383,
	378, -158, -155, -159, -158, 379, 379, 383, -154, -153,
	-156, 383, -156,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 673, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 353, 355, 357, 359, 361, 363,
	365, 367, 369, 371, 373, 375, 377, 379, 381, 382,
	384, 386, 388, 0, 594, 596, 598, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 711, -2, 722, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 688, 690, 692, 694,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1297, 1221, 1227,
	1228, 1252, 1253, 1254, 1271, 1272, 1273, 1274, 1275, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307,
	1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 151, 153, 154, 0,
	0, 0, 1223, 1297, 160, 162, 164, 166, 0, 172,
	0, 0, 0, 0, 561, 169, 171, 261, 1359, 263,
	265, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 182, 184, 186, 188, 190, 191, 0, 0, 0,
	0, 0, 260, 258, 213, 214, 0, 243, 244, 245,
	246, 247, 249, 217, 219, 220, 222, 224, 226, 228,
	229, 231, 233, 234, 236, 238, 239, 241, 0, 0,
	0, 267, 273, 274, 275, 277, 278, 279, 280, 281,
	282, 283, 0, 131, 0, 465, 256, 254, 0, 127,
	0, 591, 0, 269, 592, 593, 588, 589, 1386, 617,
	287, 289, 298, 300, 302, -2, -2, 1480, -2, 317,
	-2, 325, 1486, 0, 328, 329, 332, -2, 209, 354,
	356, 358, 360, 362, 364, 366, 368, 370, 372, 374,
	376, 378, 380, 383, 385, 387, 389, 390, 0, 0,
	0, 394, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 393, 395, 396, 397, 0, 595, 597, 599,
	0, 551, 713, 0, 0, -2, 686, 687, -2, 0,
	717, 717, 717, 0, 0, 687, 685, 0, 290, 0,
	292, 0, 394, 295, 296, 333, 334, 1206, 1207, 923,
	0, 0, 0, 0, 0, 0, 1025, 1027, 1451, 1480,
	0, 1029, 1030, 0, 1032, 1034, 1035, 0, 1038, 1039,
	1191, 1223, 1237, 1238, 1239, 1240, 0, 0, 1243, 0,
	1245, 1246, 1247, 1093, 1049, -2, -2, 1235, 851, 852,
	853, 854, -2, 1494, 1053, 1056, 1059, 1062, 1063, 1066,
	1067, 0, 1435, 1452, 1453, 1476, 1477, 1485, 1489, 1490,
	1459, 1473, 1460, 1447, 1457, 1471, 1303, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1261, 885, 886, 891, 892, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 1509, 894, 619, 601, 610, 619, 603, 604, 605,
	606, 607, 608, 609, 612, 0, 703, 1365, 706, 1234,
	704, 689, 691, 0, 693, 0, 0, 697, 719, 718,
	757, 758, 0, 701, 702, 712, 773, 811, 788, 779,
	0, 0, 2, 71, 0, 1459, 811, 73, 0, 1459,
	811, 76, 0, 82, 0, 1459, 1226, 0, 1266, 1267,
	1268, 1269, 1270, 1494, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525,
	1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
	1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565,
	1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 0, 0, 271, 272, 1231,
	1229, 1230, 0, 155, 156, 157, 158, 0, 0, 1224,
	1200, 1198, 1199, 167, 530, 1459, -2, 553, 530, 557,
	-2, 710, 1459, 633, 262, 264, 0, 174, 0, 646,
	0, 648, 0, 663, 817, 117, 1459, 194, 207, 117,
	1459, 197, 117, 1459, 200, 1219, 117, 1459, 203, 204,
	1459, 206, 257, 0, 0, -2, 250, 252, 1262, 1263,
	1264, 1265, -2, 248, 218, 221, 223, 225, 227, 230,
	232, 235, 237, 240, 242, -2, 0, 0, 0, 464,
	0, 0, 0, 590, 0, 616, 305, 0, 314, 0,
	316, 1446, -2, -2, 320, 620, 624, 625, 626, 0,
	0, 0, 0, 0, 0, 0, 330, 210, 0, 391,
	392, 400, 401, 132, 133, 351, 352, 0, 404, 425,
	437, 0, 0, 408, 410, 463, 412, 0, 0, 414,
	0, 416, 0, 418, 0, 420, 0, 422, 424, 426,
	438, 428, 712, 430, 0, 432, 436, 0, 441, 0,
	443, 444, 445, 0, 0, 451, 0, 0, 398, 399,
	117, 815, 0, 0, 0, -2, 0, 730, 755, 0,
	733, 734, 0, 0, 0, 0, 715, 716, 0, 0,
	0, 675, 676, 291, 0, 294, 0, 0, 0, 0,
	1126, 1127, 1128, 1129, 1130, 1131, 1134, 1135, 1132, 1133,
	1136, 1137, 0, 0, 0, 0, 0, 1138, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 1140, 1141, 0,
	0, 1143, 0, 1145, 0, 0, 0, 0, 0, 0,
	1205, 0, 0, 1142, 928, 929, 930, 962, 963, 0,
	1026, 1202, 1195, 1028, 0, 1148, -2, 1149, 0, 0,
	1031, 1036, 1037, 1148, 0, 1190, -2, 0, 1242, 0,
	920, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1171, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 888, 899, 896, 895, 872, 0,
	871, 869, 0, 873, 0, 0, 0, 600, -2, 602,
	0, 614, 0, 705, 0, 0, 759, 762, 1211, 1215,
	1216, 762, 0, 1208, 0, 0, 0, 0, 808, 808,
	808, 806, 782, 0, 788, 0, -2, 812, 800, 0,
	-2, 779, 0, 0, 813, 0, 83, 585, 96, 0,
	585, 585, 0, 0, 0, 0, 0, 92, 0, 0,
	0, 0, 0, 0, 94, 0, 0, 0, 0, 802,
	1222, 0, 1196, 1197, 147, 0, 0, 1217, 1201, 471,
	0, 0, 552, 0, 709, 0, 0, 0, 1459, 560,
	1255, 635, 0, 821, 0, 649, 0, 0, 818, 0,
	192, 0, 115, 116, 0, 195, 0, 198, 0, 0,
	201, 0, 0, 0, 1149, 712, 0, 0, 276, 0,
	0, 712, 0, 1151, 829, 830, 831, 832, 833, 920,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 858, 859, 860, 861, 862,
	863, 864, 865, 866, 867, 868, 882, 0, 857, 857,
	857, 874, 875, 883, 884, 889, 890, 901, 902, 904,
	906, 900, 900, 900, 897, 898, 802, 134, 0, 0,
	0, 0, -2, 322, 0, 622, 0, 627, 342, 343,
	344, 629, 630, 326, 345, 346, 347, 348, 349, 350,
	0, 547, 0, 549, 1248, 0, 323, 335, 324, 327,
	0, 211, 402, 403, 405, 406, 407, 411, 0, 460,
	413, 415, 417, 419, 421, 429, 433, 712, 439, 442,
	446, 447, 448, 449, 0, 0, 0, 550, 0, 307,
	0, 455, 0, 730, 755, 679, 729, 680, 754, 756,
	731, 732, 737, 741, 742, 745, 748, 749, 739, 923,
	698, 699, 700, 723, 724, 572, 0, 0, 293, 924,
	825, 826, 876, 877, 878, 879, 880, 925, 926, 0,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	-2, -2, -2, -2, -2, -2, -2, -2, 949, 950,
	951, 952, 953, 954, 955, 956, -2, -2, -2, 960,
	961, -2, 1144, 1146, 0, 1205, 0, -2, 0, -2,
	-2, -2, -2, 974, 0, 976, 979, 981, 983, 0,
	0, 0, 0, 1204, 993, 1182, 0, 0, 1123, 1124,
	1125, 978, 0, 0, 1203, 1194, 0, 0, 1147, 1033,
	0, 0, 0, 1155, 1189, 1185, 0, 1040, 722, 0,
	0, 0, 0, 1047, 0, 1251, 907, 908, 909, 910,
	911, 912, 921, 1103, 0, 0, 0, 1054, 1055, 1057,
	1058, 1060, 1061, 1064, 1065, 0, 0, 0, 1071, 0,
	1158, -2, -2, -2, -2, -2, -2, -2, 0, 1073,
	0, 1075, 1149, 1168, 0, 0, 996, 0, 0, 0,
	0, 1480, 0, 1078, 1149, 1176, 0, 0, 0, 0,
	0, 1149, 0, 1181, 0, 0, 0, 0, 0, 1089,
	0, 1091, 0, 0, 0, 0, 0, 0, 613, 707,
	0, 0, 821, 0, 0, 0, 1214, 821, 0, 1210,
	0, 0, 0, 0, 0, 803, 807, 804, 805, 0,
	0, 788, 800, 770, 0, 0, 0, 777, 778, 799,
	0, 798, 787, -2, 0, 0, 0, 0, 0, 584,
	98, 1459, 0, 119, 0, 0, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	1225, 0, 137, 0, 1232, 0, 0, 0, 0, 0,
	470, 1231, 472, 474, 475, 476, 477, 1256, 0, 1256,
	0, 0, 0, 0, 0, 0, 637, 643, 0, 736,
	0, 661, 651, 0, 0, 0, 661, 665, 666, 668,
	669, 0, 0, 819, 208, 117, 117, 1220, 117, 117,
	205, 259, 0, 215, 251, 0, 0, 0, 253, 255,
	0, 822, 824, 0, 834, 0, 146, 0, 0, 0,
	0, 315, 0, 621, 628, 0, 339, 0, 341, 548,
	1250, 1249, 0, 212, 462, 284, 431, 434, 457, 458,
	459, 816, 0, 0, 456, 683, 684, 0, 743, 0,
	0, 740, 746, 747, 0, 726, 570, 571, 0, 0,
	0, -2, -2, 0, 0, 0, 994, -2, 975, 977,
	980, 982, 984, 0, 0, 0, 0, 0, 0, 0,
	995, 1148, 0, 1192, 1195, -2, 1150, 1153, 1154, 0,
	0, 1186, 0, 0, 0, 0, 721, 722, 722, 722,
	1046, 0, 0, 0, 0, 0, 0, 1048, 0, 0,
	0, 0, 0, 0, 1070, 0, 1072, 1074, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 999, 1000, 1001, 0, 1148, 1077,
	1174, 1175, 0, 0, 0, 0, 0, 0, 1083, 0,
	1180, 0, 0, 0, 1087, 1088, 1090, 0, 855, 0,
	881, 903, 905, 893, 712, 1233, 751, 1212, 802, 761,
	763, 1213, 751, 1209, 790, 0, 792, 0, 0, 0,
	794, 0, 783, 0, 785, 800, 775, 0, 0, 768,
	0, 767, 788, 796, 0, 0, 814, 97, 574, 0,
	0, 0, 100, 1459, 108, 0, 502, 0, 0, 0,
	0, 0, 587, 109, 1459, 117, 1459, 117, 110, 84,
	585, 85, 0, 0, 580, 0, 0, 573, 86, 0,
	582, 0, 0, 146, 0, 0, 148, 0, 1218, 479,
	529, 0, 0, 1256, 0, 468, 530, 554, 556, 0,
	0, 639, 643, 0, 642, 710, 661, 735, 820, 644,
	661, 0, 0, 0, 653, 650, 647, 821, 0, 0,
	0, 0, 193, 196, 199, 202, 1150, 266, 0, 0,
	1152, 0, 827, 0, 0, 126, 0, 135, 268, 312,
	313, 318, 337, 338, 340, 336, 0, 308, 309, 311,
	0, 0, 0, 0, 0, 725, 572, 0, 927, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1183, 0,
	0, 0, 1194, -2, 1156, 1184, 1188, 0, 1041, 0,
	0, 0, 0, 1244, 913, 914, 915, 916, 917, 918,
	919, 0, 1101, 1102, 1106, 0, 0, 1052, 0, 0,
	1157, 1167, 1169, 997, 998, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, -2, -2, -2, 1015, 1016,
	1017, -2, -2, -2, 0, 0, 0, 1170, 0, 0,
	1172, 1173, 1177, 1178, 0, 1080, 1081, 1082, 1179, 0,
	0, 0, 887, 0, 0, 753, 0, 760, 0, 753,
	791, 0, 810, 793, 773, 784, 0, 781, 771, 0,
	772, 0, 800, 0, 0, 780, 0, 0, 0, 0,
	118, 500, 519, 0, 0, 563, 569, 569, 0, 1050,
	1051, 0, 0, 0, 102, 0, 0, 0, 0, 106,
	0, 112, 0, 0, 0, 91, 0, 0, 0, 0,
	90, 0, 0, 89, 124, 0, 0, 149, 484, 0,
	473, 0, 0, 0, 471, 0, 0, 0, 641, 643,
	0, 634, 635, 173, 645, 659, 660, 658, 0, 661,
	667, 664, 670, 0, 0, 128, 0, 0, 828, 835,
	144, 1349, 142, 139, 141, 285, 0, 452, 453, 454,
	738, 744, 727, 572, 0, 0, -2, 0, 987, -2,
	-2, 1119, 1150, 1193, 1187, 1241, 722, 1042, 1044, 1045,
	922, 1108, 1105, 0, 1092, 1068, 1069, 1166, 0, 0,
	0, 0, 1150, 1121, 1079, 0, 1085, 1086, 856, 708,
	1097, 0, 0, 764, 1097, 0, 788, 786, 769, 765,
	0, 776, 0, 797, 576, 578, 99, 0, 501, 0,
	504, 0, 0, 0, 0, 510, 511, 0, 0, 0,
	0, 521, 528, 0, 572, 1236, 0, 572, 0, 0,
	0, 0, 0, 114, 0, 0, 586, 0, 117, 117,
	575, 0, 0, 0, 0, 581, 0, 583, 136, 0,
	466, 483, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 643, 0, 636, 637, 0, 0, 0, 652,
	662, 0, 0, 0, 823, 0, 0, 0, 0, 310,
	728, -2, -2, 988, 1120, 0, 722, 0, 1094, -2,
	0, 0, 0, 1122, 0, 695, 0, 752, 750, 696,
	809, 800, 0, 795, 101, 0, 505, 506, 1256, 0,
	509, 512, 0, 514, 1258, 479, 0, 525, 526, 564,
	565, 568, 566, 569, 722, 523, 0, 103, 104, 113,
	121, 105, 111, 0, 0, 722, 0, 0, 801, 0,
	0, 528, 0, 518, 479, 469, 528, 0, 0, 638,
	639, 0, 0, 0, 671, 672, 0, 0, 0, 143,
	0, 138, 140, 1043, 1111, 0, -2, 0, 1023, 1084,
	1096, 1098, 0, 774, 766, 503, 507, 0, 0, 534,
	0, 522, 0, 572, 0, 0, 123, 0, 577, 579,
	0, 0, 0, 0, 0, 0, 479, 528, 467, 479,
	0, 640, 641, 0, 655, 821, 657, 0, 0, 145,
	0, 0, 0, 1107, 1024, 0, 0, 0, 513, 539,
	0, 0, 0, 567, 1041, 530, 107, 0, 120, 0,
	0, 0, 0, 0, 0, 516, 479, 558, 0, 632,
	0, 656, 146, 146, 1104, 1109, 1112, -2, 1419, 1294,
	0, 1110, 1099, 1100, 0, 515, 535, 536, 0, 531,
	532, 533, 1257, 527, 534, 122, 93, 95, 0, 0,
	0, 517, 528, 821, 129, 130, 0, 1114, 1115, 1116,
	1117, 1118, 508, 537, 0, 538, 0, 0, 0, 539,
	0, 0, 482, 479, 654, 0, 540, 0, 543, 544,
	0, 541, 524, 0, 0, 478, 480, 481, 559, 1113,
	542, 545, 546, 0, 0, 0, 0, 485, 0, 486,
	0, 0, 0, 484, 0, 0, 0, 483, 489, 0,
	492, 494, 495, -2, 0, 487, 0, 0, 490, 0,
	0, 0, 488, 493, 0, 491, 484, 0, 483, 499,
	497, 0, 498,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	357, 359, 358, 361, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 362, 57701, 363, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:920
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1085
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1091
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1097
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1106
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1115
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1184
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1207
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1217
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1280
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1283
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1284
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1311
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1444
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1502
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1813
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1833
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1922
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1926
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1932
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1947
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1971
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1973
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1975
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[6].union.scrubOptions()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2029
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2084
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2101
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			return unimplemented(sqllex, "set from current")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = Low
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = Normal
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = High
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2215
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.str = "client_encoding"
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2258
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2361
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2372
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2404
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2409
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2411
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2458
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2480
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2491
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2502
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2506
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2510
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2514
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2522
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2528
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2536
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2542
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2570
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2627
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = DropDefault
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2729
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2959
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			return unimplemented(sqllex, "match full")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3003
		{
			return unimplemented(sqllex, "match partial")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			return unimplemented(sqllex, "match simple")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3005
		{
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = NoAction
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = Restrict
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3056
		{
			sqlVAL.union.val = Cascade
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = SetNull
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = SetDefault
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3106
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3127
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3167
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = true
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = false
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3198
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3201
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3202
		{
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = Ascending
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = Descending
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3230
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3242
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3244
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = true
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = false
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3277
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3278
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3316
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3335
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3353
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3358
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3366
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3377
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3423
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3438
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = ReadOnly
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = ReadWrite
		}
	case 631:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3516
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3546
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			return helpWith(sqllex, "INSERT")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3629
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3668
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3669
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			return helpWith(sqllex, "SELECT")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3842
		{
			return helpWith(sqllex, "VALUES")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			return helpWith(sqllex, "TABLE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			return helpWith(sqllex, "SELECT")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3934
		{
			return helpWith(sqllex, "TABLE")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3946
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3950
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3954
		{
			return unimplemented(sqllex, "cte")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3957
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3958
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3961
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3962
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3966
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = true
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = false
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = false
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = true
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3989
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3990
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4068
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4121
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4124
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = false
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			return helpWith(sqllex, "VALUES")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &From{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4235
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4280
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4317
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = nil
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4383
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = true
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = false
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.str = astFullJoin
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.str = astLeftJoin
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.str = astRightJoin
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.str = astInnerJoin
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4500
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4501
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4587
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4601
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4633
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4644
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = jsonbColType
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = jsonColType
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4742
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = nil
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4763
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4803
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4807
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4863
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4903
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4935
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4975
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = year
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = month
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = day
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = hour
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = minute
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = month
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = hour
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = minute
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = minute
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = nil
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = second
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5070
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5105
		{
			return unimplemented(sqllex, "at tz")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5367
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5371
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5375
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5379
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5407
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5411
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5415
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5475
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5479
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5491
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5503
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5515
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5552
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5565
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5605
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5606
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5619
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5630
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5646
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5647
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5651
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5660
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5669
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			return unimplemented(sqllex, "current role")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5681
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5685
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5709
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5714
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5719
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5728
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5729
		{
			return unimplemented(sqllex, "treat")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5743
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5747
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5766
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5771
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5775
		{
			return unimplemented(sqllex, "within group")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5776
		{
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5791
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5795
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5811
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5819
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5823
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.str = ""
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5863
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5873
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5874
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5875
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5879
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5885
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5886
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5887
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5888
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5889
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = Any
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = Some
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = All
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5935
		{
			sqlVAL.union.val = Plus
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = Minus
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5937
		{
			sqlVAL.union.val = Mult
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = Div
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Mod
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = Bitand
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = Bitor
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = Pow
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Bitxor
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = LT
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = GT
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = EQ
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = LE
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = GE
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = NE
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = Like
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = NotLike
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = ILike
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = NotILike
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6087
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6105
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6131
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6135
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6153
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6209
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6215
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6219
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6244
		{
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6245
		{
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6279
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6283
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6289
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6302
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6324
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6328
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6338
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6363
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6394
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6407
		{
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6428
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6432
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6436
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6443
		{
			return unimplemented(sqllex, "func const")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6445
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6449
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6452
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6454
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6458
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6462
		{
			sqlVAL.union.val = DNull
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6479
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6514
		{
			sqlVAL.str = ""
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6520
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6524
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
