// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPLAIN = 57444
const EXTRACT = 57445
const EXTRACT_DURATION = 57446
const FALSE = 57447
const FAMILY = 57448
const FETCH = 57449
const FILTER = 57450
const FIRST = 57451
const FLOAT = 57452
const FLOORDIV = 57453
const FOLLOWING = 57454
const FOR = 57455
const FORCE_INDEX = 57456
const FOREIGN = 57457
const FROM = 57458
const FULL = 57459
const GRANT = 57460
const GRANTS = 57461
const GREATEST = 57462
const GROUP = 57463
const GROUPING = 57464
const HAVING = 57465
const HELP = 57466
const HIGH = 57467
const HOUR = 57468
const INCREMENTAL = 57469
const IF = 57470
const IFNULL = 57471
const ILIKE = 57472
const IN = 57473
const INTERLEAVE = 57474
const INDEX = 57475
const INDEXES = 57476
const INITIALLY = 57477
const INNER = 57478
const INSERT = 57479
const INT = 57480
const INT2VECTOR = 57481
const INT8 = 57482
const INT64 = 57483
const INTEGER = 57484
const INTERSECT = 57485
const INTERVAL = 57486
const INTO = 57487
const IS = 57488
const ISOLATION = 57489
const JOIN = 57490
const KEY = 57491
const KEYS = 57492
const LATERAL = 57493
const LC_CTYPE = 57494
const LC_COLLATE = 57495
const LEADING = 57496
const LEAST = 57497
const LEFT = 57498
const LEVEL = 57499
const LIKE = 57500
const LIMIT = 57501
const LOCAL = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const LOW = 57505
const LSHIFT = 57506
const MATCH = 57507
const MINUTE = 57508
const MONTH = 57509
const NAN = 57510
const NAME = 57511
const NAMES = 57512
const NATURAL = 57513
const NEXT = 57514
const NO = 57515
const NO_INDEX_JOIN = 57516
const NORMAL = 57517
const NOT = 57518
const NOTHING = 57519
const NULL = 57520
const NULLIF = 57521
const NULLS = 57522
const NUMERIC = 57523
const OF = 57524
const OFF = 57525
const OFFSET = 57526
const OID = 57527
const ON = 57528
const ONLY = 57529
const OPTIONS = 57530
const OR = 57531
const ORDER = 57532
const ORDINALITY = 57533
const OUT = 57534
const OUTER = 57535
const OVER = 57536
const OVERLAPS = 57537
const OVERLAY = 57538
const PARENT = 57539
const PARTIAL = 57540
const PARTITION = 57541
const PASSWORD = 57542
const PLACING = 57543
const POSITION = 57544
const PRECEDING = 57545
const PRECISION = 57546
const PREPARE = 57547
const PRIMARY = 57548
const PRIORITY = 57549
const RANGE = 57550
const READ = 57551
const REAL = 57552
const RECURSIVE = 57553
const REF = 57554
const REFERENCES = 57555
const REGCLASS = 57556
const REGPROC = 57557
const REGPROCEDURE = 57558
const REGNAMESPACE = 57559
const REGTYPE = 57560
const RENAME = 57561
const REPEATABLE = 57562
const RELEASE = 57563
const RESET = 57564
const RESTORE = 57565
const RESTRICT = 57566
const RETURNING = 57567
const REVOKE = 57568
const RIGHT = 57569
const ROLLBACK = 57570
const ROLLUP = 57571
const ROW = 57572
const ROWS = 57573
const RSHIFT = 57574
const SAVEPOINT = 57575
const SCATTER = 57576
const SEARCH = 57577
const SECOND = 57578
const SELECT = 57579
const SERIAL = 57580
const SERIALIZABLE = 57581
const SESSION = 57582
const SESSION_USER = 57583
const SET = 57584
const SETTING = 57585
const SETTINGS = 57586
const SHOW = 57587
const SIMILAR = 57588
const SIMPLE = 57589
const SMALLINT = 57590
const SMALLSERIAL = 57591
const SNAPSHOT = 57592
const SOME = 57593
const SPLIT = 57594
const SQL = 57595
const START = 57596
const STATUS = 57597
const STDIN = 57598
const STRICT = 57599
const STRING = 57600
const STORING = 57601
const SUBSTRING = 57602
const SYMMETRIC = 57603
const SYSTEM = 57604
const TABLE = 57605
const TABLES = 57606
const TEMPLATE = 57607
const TESTING_RANGES = 57608
const TESTING_RELOCATE = 57609
const TEXT = 57610
const THEN = 57611
const TIME = 57612
const TIMESTAMP = 57613
const TIMESTAMPTZ = 57614
const TO = 57615
const TRAILING = 57616
const TRANSACTION = 57617
const TREAT = 57618
const TRIM = 57619
const TRUE = 57620
const TRUNCATE = 57621
const TYPE = 57622
const UNBOUNDED = 57623
const UNCOMMITTED = 57624
const UNION = 57625
const UNIQUE = 57626
const UNKNOWN = 57627
const UPDATE = 57628
const UPSERT = 57629
const USER = 57630
const USERS = 57631
const USING = 57632
const VALID = 57633
const VALIDATE = 57634
const VALUE = 57635
const VALUES = 57636
const VARCHAR = 57637
const VARIADIC = 57638
const VIEW = 57639
const VARYING = 57640
const WHEN = 57641
const WHERE = 57642
const WINDOW = 57643
const WITH = 57644
const WITHIN = 57645
const WITHOUT = 57646
const YEAR = 57647
const ZONE = 57648
const NOT_LA = 57649
const WITH_LA = 57650
const AS_LA = 57651
const POSTFIXOP = 57652
const UMINUS = 57653

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5479

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	330, 31,
	-2, 429,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 412,
	143, 412,
	159, 412,
	184, 412,
	190, 412,
	283, 412,
	-2, 402,
	-1, 66,
	99, 411,
	143, 411,
	159, 411,
	184, 411,
	190, 411,
	283, 411,
	-2, 405,
	-1, 75,
	1, 31,
	330, 31,
	-2, 429,
	-1, 435,
	1, 200,
	330, 200,
	-2, 995,
	-1, 474,
	159, 439,
	184, 439,
	-2, 408,
	-1, 477,
	159, 438,
	184, 438,
	-2, 406,
	-1, 619,
	159, 438,
	184, 438,
	-2, 409,
	-1, 678,
	327, 928,
	-2, 921,
	-1, 679,
	327, 929,
	-2, 922,
	-1, 685,
	5, 597,
	327, 597,
	-2, 1104,
	-1, 709,
	5, 558,
	-2, 1078,
	-1, 710,
	5, 591,
	327, 591,
	-2, 1080,
	-1, 711,
	5, 566,
	-2, 1081,
	-1, 712,
	5, 565,
	-2, 1082,
	-1, 713,
	5, 591,
	327, 591,
	-2, 1085,
	-1, 714,
	5, 591,
	327, 591,
	-2, 1086,
	-1, 715,
	5, 592,
	-2, 1089,
	-1, 716,
	5, 552,
	-2, 1090,
	-1, 717,
	5, 552,
	-2, 1091,
	-1, 718,
	5, 573,
	-2, 1095,
	-1, 719,
	5, 553,
	-2, 1100,
	-1, 720,
	5, 554,
	-2, 1101,
	-1, 721,
	5, 555,
	-2, 1102,
	-1, 722,
	5, 556,
	-2, 1103,
	-1, 723,
	5, 552,
	-2, 1108,
	-1, 724,
	5, 559,
	-2, 1113,
	-1, 725,
	5, 557,
	-2, 1116,
	-1, 726,
	5, 589,
	327, 589,
	-2, 1118,
	-1, 727,
	5, 593,
	-2, 1121,
	-1, 728,
	5, 595,
	-2, 1122,
	-1, 729,
	5, 588,
	327, 588,
	-2, 1126,
	-1, 754,
	99, 412,
	143, 412,
	159, 412,
	184, 412,
	190, 412,
	283, 412,
	-2, 488,
	-1, 1018,
	99, 412,
	143, 412,
	159, 412,
	184, 412,
	190, 412,
	283, 412,
	-2, 716,
	-1, 1027,
	327, 905,
	-2, 893,
	-1, 1090,
	1, 489,
	69, 489,
	99, 489,
	117, 489,
	121, 489,
	123, 489,
	136, 489,
	143, 489,
	148, 489,
	156, 489,
	159, 489,
	171, 489,
	184, 489,
	186, 489,
	190, 489,
	225, 489,
	227, 489,
	283, 489,
	290, 489,
	300, 489,
	301, 489,
	309, 489,
	326, 489,
	328, 489,
	330, 489,
	331, 489,
	-2, 488,
	-1, 1259,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 632,
	-1, 1260,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 633,
	-1, 1261,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 634,
	-1, 1265,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 638,
	-1, 1266,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 639,
	-1, 1267,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 640,
	-1, 1270,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 645,
	-1, 1276,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 647,
	-1, 1278,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 651,
	-1, 1279,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 652,
	-1, 1280,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 653,
	-1, 1281,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 654,
	-1, 1308,
	195, 787,
	-2, 790,
	-1, 1337,
	116, 827,
	327, 928,
	-2, 921,
	-1, 1338,
	116, 828,
	-2, 1074,
	-1, 1339,
	116, 829,
	-2, 994,
	-1, 1340,
	116, 830,
	-2, 963,
	-1, 1341,
	116, 831,
	-2, 978,
	-1, 1342,
	116, 832,
	-2, 993,
	-1, 1343,
	116, 833,
	-2, 1040,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 646,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 648,
	-1, 1514,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 649,
	-1, 1532,
	195, 786,
	-2, 789,
	-1, 1716,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 650,
	-1, 1721,
	146, 0,
	-2, 666,
	-1, 1731,
	195, 788,
	-2, 791,
	-1, 1765,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 693,
	-1, 1766,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 694,
	-1, 1767,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 695,
	-1, 1771,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 699,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 700,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	310, 0,
	311, 0,
	312, 0,
	-2, 701,
	-1, 1881,
	146, 0,
	-2, 667,
	-1, 1884,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 670,
	-1, 1885,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 672,
	-1, 1978,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 671,
	-1, 1979,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 673,
	-1, 1986,
	146, 0,
	-2, 702,
	-1, 2034,
	146, 0,
	-2, 703,
	-1, 2093,
	36, 0,
	130, 0,
	158, 0,
	246, 0,
	307, 0,
	313, 0,
	-2, 1077,
}

const sqlPrivate = 57344

const sqlLast = 29628

var sqlAct = [...]int{

	88, 2092, 2072, 1695, 2116, 1136, 2041, 2073, 478, 1930,
	2074, 2091, 936, 1144, 1870, 1742, 1956, 669, 1976, 1229,
	823, 1705, 752, 1813, 677, 784, 1827, 1085, 942, 1208,
	529, 1496, 504, 655, 654, 1498, 51, 1643, 1875, 1222,
	792, 436, 1204, 1593, 938, 306, 1642, 485, 65, 676,
	1203, 304, 1396, 1023, 1447, 748, 1592, 1238, 288, 1711,
	1207, 1543, 1306, 1176, 760, 763, 1236, 638, 672, 277,
	1441, 1145, 1096, 1105, 807, 1382, 1086, 1363, 1503, 1316,
	1237, 649, 1293, 1160, 1290, 959, 1196, 793, 1128, 886,
	765, 65, 796, 295, 30, 1334, 294, 16, 296, 8,
	1169, 1014, 547, 786, 648, 483, 1057, 639, 499, 542,
	548, 509, 512, 539, 516, 1138, 1211, 89, 488, 739,
	964, 1828, 622, 65, 606, 605, 520, 290, 20, 477,
	498, 623, 888, 1072, 621, 433, 541, 671, 66, 413,
	432, 800, 884, 422, 80, 535, 84, 67, 501, 1053,
	486, 604, 303, 425, 496, 303, 1627, 1531, 626, 1628,
	967, 968, 307, 987, 988, 989, 997, 998, 999, 30,
	809, 482, 16, 749, 8, 824, 990, 1137, 276, 2108,
	809, 1173, 789, 970, 2089, 2084, 1001, 1826, 1179, 2083,
	809, 482, 1179, 2080, 730, 1129, 789, 64, 465, 779,
	64, 1459, 1141, 20, 475, 464, 969, 507, 1458, 1179,
	514, 2029, 984, 474, 510, 2070, 2036, 1506, 1166, 1166,
	732, 490, 2023, 42, 1174, 1826, 42, 2019, 1535, 2014,
	789, 43, 2013, 1536, 43, 1980, 967, 968, 1166, 308,
	1970, 1967, 1132, 1826, 789, 71, 1965, 1941, 1940, 1826,
	789, 1826, 1918, 44, 1914, 789, 44, 789, 1506, 970,
	1907, 975, 966, 1179, 1175, 1172, 1886, 1883, 965, 1179,
	1166, 73, 1847, 1846, 1825, 1179, 1179, 1826, 1778, 1728,
	994, 1002, 969, 1806, 1725, 1129, 789, 1179, 984, 1681,
	551, 1676, 1135, 1483, 1135, 1625, 1000, 1622, 818, 1094,
	1623, 1610, 74, 1608, 1611, 1486, 1179, 1132, 992, 1310,
	69, 1228, 1179, 1191, 985, 634, 70, 931, 516, 1607,
	512, 1606, 1179, 930, 1179, 1534, 483, 878, 544, 544,
	1179, 877, 1542, 1532, 1177, 68, 1179, 975, 1485, 991,
	1399, 789, 1233, 1179, 789, 789, 1183, 810, 1178, 1179,
	518, 1179, 1165, 71, 564, 1166, 1134, 810, 1093, 1135,
	817, 1092, 495, 818, 75, 524, 71, 810, 1829, 71,
	1390, 753, 910, 585, 55, 2106, 2090, 55, 2079, 73,
	2046, 731, 986, 2031, 1968, 71, 1912, 1563, 1564, 1908,
	985, 633, 73, 549, 1900, 73, 995, 545, 1899, 1898,
	528, 1894, 1893, 1171, 1892, 1861, 1793, 552, 1788, 1855,
	74, 73, 1787, 941, 536, 1786, 1458, 1736, 69, 1710,
	1685, 1615, 1612, 74, 70, 1170, 74, 1600, 1591, 1562,
	1559, 69, 967, 968, 69, 1558, 1556, 70, 1548, 1547,
	70, 1484, 74, 1140, 1031, 1403, 1331, 1330, 633, 1090,
	1024, 1744, 68, 2058, 813, 970, 68, 993, 986, 1079,
	981, 982, 983, 996, 808, 980, 978, 979, 971, 972,
	973, 974, 976, 977, 934, 68, 1488, 965, 969, 751,
	1302, 1909, 632, 620, 553, 2026, 750, 2012, 1569, 2011,
	526, 2010, 679, 679, 2002, 2000, 1988, 1963, 1927, 1563,
	1564, 516, 1905, 1864, 1852, 1832, 679, 1720, 1703, 1701,
	612, 1700, 615, 1698, 1683, 1651, 1650, 1631, 551, 1618,
	1590, 1552, 1551, 1528, 1523, 306, 551, 1295, 737, 967,
	968, 1474, 1432, 975, 1430, 1417, 619, 499, 757, 483,
	1416, 980, 978, 979, 971, 972, 973, 974, 976, 977,
	1854, 1401, 970, 1024, 1373, 574, 573, 1329, 1232, 798,
	736, 679, 797, 1058, 1061, 1077, 1065, 516, 801, 801,
	1051, 1050, 679, 1049, 1048, 969, 790, 1303, 551, 551,
	567, 569, 1047, 756, 1046, 1045, 306, 1044, 1043, 1042,
	509, 512, 1041, 1040, 1039, 1038, 1037, 611, 1036, 1035,
	1569, 1028, 1017, 893, 893, 783, 68, 609, 935, 505,
	607, 637, 571, 303, 560, 558, 1994, 812, 1916, 1888,
	815, 1860, 1859, 1626, 475, 679, 679, 830, 940, 913,
	1621, 1391, 679, 474, 1468, 552, 1467, 911, 635, 629,
	630, 524, 307, 552, 679, 679, 679, 679, 679, 909,
	1015, 755, 1563, 1564, 679, 751, 2016, 1499, 64, 1858,
	1629, 773, 945, 536, 679, 788, 579, 1460, 577, 1063,
	1417, 1129, 753, 1064, 1614, 1613, 802, 1507, 799, 771,
	963, 597, 580, 1033, 42, 933, 819, 939, 1442, 1876,
	483, 1388, 43, 821, 772, 552, 552, 1567, 1568, 1570,
	1571, 527, 1137, 307, 871, 1745, 875, 578, 870, 1317,
	872, 874, 553, 906, 44, 1054, 1539, 1454, 905, 308,
	553, 899, 601, 1638, 915, 2049, 2104, 919, 920, 921,
	922, 923, 2103, 1480, 280, 918, 2018, 926, 927, 1182,
	971, 972, 973, 974, 976, 977, 949, 751, 1840, 457,
	306, 679, 932, 961, 948, 947, 602, 458, 967, 968,
	1951, 766, 642, 767, 1950, 475, 1030, 1949, 475, 475,
	1948, 1080, 553, 553, 955, 499, 1666, 956, 957, 856,
	308, 970, 281, 1665, 1635, 1173, 1027, 463, 1098, 462,
	1106, 1098, 1851, 1091, 1662, 65, 1099, 1097, 1634, 1510,
	1473, 1081, 1472, 1471, 969, 516, 1078, 1565, 1566, 1567,
	1568, 1570, 1571, 512, 1470, 1277, 1180, 516, 1126, 551,
	1125, 1069, 1122, 577, 1059, 608, 517, 71, 1174, 1223,
	1062, 1377, 1376, 1682, 768, 55, 284, 1248, 1148, 777,
	1110, 1112, 977, 512, 78, 2017, 512, 467, 1669, 1671,
	598, 481, 1109, 73, 776, 1154, 544, 1066, 544, 975,
	1349, 1070, 578, 1055, 1056, 65, 1444, 307, 1175, 1172,
	65, 472, 774, 776, 794, 1292, 1157, 1074, 1075, 929,
	556, 1131, 1932, 1102, 74, 912, 587, 775, 2056, 285,
	1292, 774, 69, 570, 766, 480, 767, 77, 70, 1299,
	1117, 1115, 803, 1120, 1297, 1177, 775, 1687, 1226, 1227,
	599, 306, 1653, 1127, 2067, 1123, 1163, 289, 1143, 1162,
	1317, 1164, 549, 2103, 1155, 1153, 1156, 2113, 1139, 1158,
	1139, 283, 282, 1448, 1437, 1434, 552, 2068, 1177, 766,
	855, 767, 482, 1108, 308, 1152, 2124, 1688, 809, 2005,
	1161, 684, 1690, 781, 1479, 1452, 576, 1059, 600, 1062,
	780, 1052, 1195, 1198, 512, 1571, 679, 768, 1481, 516,
	1234, 575, 679, 679, 679, 679, 679, 679, 679, 679,
	679, 679, 679, 679, 679, 679, 679, 679, 679, 679,
	679, 679, 679, 679, 1448, 679, 2076, 679, 679, 679,
	679, 499, 1184, 1660, 1185, 306, 1095, 1171, 1218, 928,
	555, 1247, 768, 553, 1056, 1055, 679, 1177, 679, 286,
	1520, 1107, 1177, 1964, 1984, 679, 1012, 76, 307, 679,
	1550, 576, 769, 738, 1518, 479, 830, 830, 679, 679,
	679, 679, 679, 679, 679, 679, 679, 679, 679, 679,
	679, 679, 679, 287, 468, 1200, 1300, 1201, 798, 1073,
	1654, 79, 1563, 1564, 2112, 1202, 1199, 1089, 973, 974,
	976, 977, 1379, 1235, 1933, 473, 2119, 2077, 1314, 469,
	551, 742, 904, 903, 1274, 897, 894, 482, 470, 625,
	734, 1670, 1428, 679, 2075, 967, 968, 1515, 2102, 1187,
	745, 2100, 499, 499, 1512, 308, 499, 1516, 1393, 1821,
	1189, 1521, 740, 1402, 1578, 1304, 483, 1301, 970, 1291,
	743, 1869, 307, 2125, 1220, 810, 2078, 742, 1298, 1190,
	1406, 1410, 1325, 551, 590, 741, 1344, 764, 679, 565,
	1188, 969, 1822, 1239, 1246, 563, 745, 1440, 1380, 1381,
	1384, 624, 1386, 1387, 1774, 2111, 2130, 1404, 1071, 1943,
	1903, 1436, 1942, 1569, 907, 769, 743, 1925, 1686, 1836,
	1446, 883, 830, 1997, 1637, 797, 625, 483, 1272, 1275,
	679, 1427, 1392, 549, 797, 1405, 1397, 1413, 856, 856,
	1409, 744, 551, 1450, 516, 1221, 975, 552, 1456, 308,
	946, 937, 2117, 2042, 1839, 1385, 1271, 1517, 1366, 881,
	769, 1838, 624, 1706, 1519, 925, 1579, 893, 879, 1871,
	1443, 882, 862, 1926, 1419, 1418, 534, 1068, 1462, 679,
	1463, 1464, 1817, 1453, 1818, 830, 1067, 744, 908, 1775,
	575, 1487, 1461, 1489, 1429, 1776, 1398, 1431, 2129, 985,
	552, 1904, 533, 2118, 1383, 1494, 480, 616, 1491, 1835,
	1696, 1862, 1820, 1923, 1439, 1712, 1504, 1476, 1477, 1823,
	1328, 2120, 679, 679, 553, 830, 1987, 1902, 679, 1414,
	65, 1482, 1594, 1719, 1580, 1924, 1668, 1557, 1522, 1445,
	1465, 679, 679, 1181, 1273, 733, 679, 679, 1133, 1121,
	1118, 1837, 603, 596, 679, 595, 594, 593, 1478, 552,
	592, 679, 591, 588, 1501, 532, 1502, 986, 679, 525,
	1595, 679, 679, 679, 856, 1505, 1163, 553, 1541, 1162,
	679, 1164, 483, 1034, 917, 1327, 2071, 2039, 1810, 746,
	1819, 1658, 1466, 1490, 1656, 738, 1636, 1493, 1495, 855,
	855, 1224, 679, 679, 679, 679, 1216, 1159, 1513, 1511,
	1161, 679, 679, 679, 816, 814, 679, 1574, 1572, 1573,
	1565, 1566, 1567, 1568, 1570, 1571, 1958, 811, 1527, 806,
	782, 778, 1414, 770, 1733, 679, 553, 856, 954, 1497,
	627, 483, 1230, 742, 2104, 1538, 898, 895, 531, 493,
	980, 978, 979, 971, 972, 973, 974, 976, 977, 582,
	530, 901, 745, 1960, 1624, 1098, 3, 679, 679, 411,
	499, 1113, 1630, 1114, 740, 1675, 2007, 856, 1829, 301,
	25, 679, 743, 679, 747, 1649, 81, 1098, 1597, 1598,
	1599, 586, 1648, 1111, 1632, 300, 24, 741, 1119, 679,
	2033, 1231, 299, 23, 1713, 631, 1116, 1617, 1616, 628,
	2030, 679, 1867, 1677, 410, 414, 1620, 1647, 494, 1219,
	297, 22, 1215, 298, 11, 302, 10, 1142, 962, 1633,
	292, 9, 873, 681, 522, 855, 419, 291, 7, 1640,
	583, 415, 506, 1148, 499, 822, 523, 1168, 1657, 551,
	1659, 1661, 2127, 744, 1702, 25, 1674, 2128, 679, 1667,
	829, 679, 679, 679, 421, 416, 1672, 1699, 1917, 519,
	1798, 24, 1794, 679, 1708, 1680, 1679, 1693, 23, 679,
	1678, 1427, 679, 1707, 418, 1689, 1691, 1692, 456, 1684,
	679, 499, 1609, 679, 1722, 1709, 22, 1697, 855, 11,
	1469, 10, 1394, 1738, 1739, 1740, 9, 1378, 679, 293,
	4, 1890, 679, 7, 967, 968, 679, 679, 679, 679,
	679, 679, 679, 679, 679, 679, 679, 679, 679, 679,
	679, 679, 679, 679, 679, 1375, 679, 1714, 855, 1374,
	1732, 679, 830, 1324, 1729, 679, 679, 459, 460, 967,
	968, 1194, 679, 1021, 679, 679, 679, 2055, 664, 1957,
	969, 1741, 1748, 466, 1746, 1492, 552, 1751, 1563, 1564,
	1931, 1753, 970, 830, 830, 967, 968, 1193, 1192, 1031,
	306, 1029, 830, 830, 417, 4, 1781, 412, 916, 589,
	1389, 85, 85, 278, 1076, 969, 2066, 679, 1895, 858,
	1782, 679, 1799, 1549, 405, 406, 407, 1975, 1804, 424,
	1983, 1796, 437, 1326, 1032, 830, 1809, 41, 1649, 551,
	424, 437, 1830, 65, 1805, 1648, 1795, 1797, 489, 489,
	1801, 1802, 278, 420, 1800, 278, 278, 513, 278, 1645,
	658, 85, 521, 553, 1834, 1843, 1288, 1833, 1811, 679,
	1647, 1849, 1639, 1210, 679, 1209, 309, 902, 551, 1850,
	1286, 680, 887, 679, 679, 896, 1649, 1335, 1240, 735,
	679, 1649, 682, 1648, 679, 679, 827, 683, 1648, 679,
	1239, 1749, 1857, 1873, 828, 1060, 679, 670, 679, 1239,
	1754, 1882, 1872, 1865, 856, 1863, 679, 307, 1647, 1874,
	1868, 825, 1866, 1647, 1146, 1296, 1315, 1537, 1025, 650,
	662, 661, 1312, 557, 1395, 54, 572, 431, 1451, 868,
	1853, 1225, 1785, 1282, 950, 856, 856, 1655, 471, 679,
	876, 1283, 1560, 1284, 856, 856, 552, 1289, 414, 830,
	559, 1356, 1348, 1345, 610, 1901, 759, 1013, 1147, 584,
	1457, 1167, 636, 958, 1856, 1350, 492, 491, 1205, 419,
	581, 880, 1186, 1006, 415, 1003, 461, 856, 1999, 1217,
	1915, 1412, 2123, 679, 308, 552, 2006, 679, 1652, 2048,
	72, 2015, 1955, 679, 1913, 1438, 29, 26, 416, 679,
	1919, 21, 19, 18, 1649, 28, 17, 1935, 27, 15,
	1937, 1648, 679, 14, 857, 13, 1921, 418, 1929, 798,
	12, 40, 1020, 553, 1934, 679, 39, 38, 37, 1953,
	36, 1936, 35, 551, 6, 5, 1647, 2, 1, 0,
	679, 679, 1649, 1285, 0, 1952, 0, 0, 0, 1648,
	1287, 1961, 278, 537, 278, 437, 437, 1959, 1973, 0,
	1982, 0, 553, 679, 1971, 855, 1974, 1972, 0, 830,
	679, 1966, 0, 0, 1647, 0, 1946, 1947, 0, 829,
	829, 0, 0, 0, 0, 0, 1989, 0, 679, 0,
	0, 0, 0, 0, 2001, 0, 855, 855, 0, 1993,
	0, 856, 0, 1992, 1995, 855, 855, 0, 2004, 0,
	0, 0, 1996, 0, 0, 0, 0, 417, 0, 1084,
	0, 0, 0, 0, 679, 2003, 0, 0, 0, 0,
	0, 0, 2024, 551, 830, 2022, 869, 0, 855, 0,
	2025, 0, 0, 0, 0, 0, 0, 0, 679, 0,
	552, 0, 2032, 0, 0, 1969, 2028, 0, 2027, 0,
	483, 0, 1563, 1564, 0, 0, 420, 0, 0, 2035,
	0, 679, 679, 679, 0, 0, 1945, 561, 0, 0,
	0, 2038, 0, 2045, 0, 2057, 2059, 679, 0, 2061,
	2054, 0, 566, 2060, 679, 437, 437, 0, 0, 0,
	2047, 0, 826, 2063, 1649, 2044, 2065, 0, 2064, 2050,
	679, 1648, 0, 1350, 1350, 829, 0, 830, 858, 858,
	2081, 856, 2085, 0, 2088, 0, 0, 553, 679, 679,
	2086, 0, 424, 2062, 0, 278, 1647, 437, 614, 437,
	2097, 617, 2101, 0, 2099, 0, 0, 0, 2105, 0,
	552, 1148, 2107, 0, 679, 2110, 489, 1563, 1564, 2109,
	0, 2087, 855, 1569, 0, 0, 0, 0, 2122, 2121,
	0, 278, 278, 2126, 1350, 1350, 1350, 0, 829, 0,
	0, 0, 0, 0, 0, 0, 856, 85, 679, 2131,
	0, 0, 0, 0, 0, 0, 278, 0, 0, 0,
	0, 278, 278, 278, 0, 804, 967, 968, 0, 0,
	0, 1524, 1525, 0, 0, 0, 1579, 0, 829, 0,
	0, 0, 0, 0, 278, 278, 0, 553, 0, 970,
	0, 0, 85, 0, 85, 0, 0, 0, 0, 437,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 0, 858, 0, 437, 437, 1569, 85,
	437, 437, 437, 437, 437, 924, 0, 0, 0, 856,
	437, 437, 1586, 1587, 1588, 0, 0, 424, 0, 0,
	0, 0, 855, 0, 1580, 944, 1307, 0, 0, 1821,
	0, 0, 1814, 1311, 0, 0, 0, 1319, 0, 0,
	1812, 0, 0, 489, 1816, 0, 521, 975, 1336, 1336,
	1347, 1579, 1358, 0, 0, 0, 0, 858, 1370, 1371,
	1372, 0, 1822, 857, 857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1350, 1350, 0, 0, 0, 0,
	0, 0, 1815, 0, 0, 0, 0, 855, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 858, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 1574, 1572, 1573,
	1565, 1566, 1567, 1568, 1570, 1571, 0, 0, 0, 1580,
	0, 0, 0, 0, 0, 0, 0, 0, 1350, 1350,
	1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
	1350, 1350, 1350, 1350, 1350, 1350, 1350, 0, 1350, 278,
	0, 0, 1817, 0, 1818, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 278, 986, 0,
	855, 0, 1717, 1718, 0, 1103, 0, 0, 0, 278,
	0, 0, 1820, 0, 0, 0, 0, 278, 1124, 1823,
	0, 278, 0, 0, 0, 0, 0, 0, 1130, 857,
	0, 0, 0, 1572, 1573, 1565, 1566, 1567, 1568, 1570,
	1571, 0, 278, 0, 1150, 1151, 0, 278, 0, 0,
	278, 0, 437, 437, 0, 437, 1755, 1756, 1757, 1758,
	1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768,
	1769, 1770, 1771, 1772, 1773, 0, 1777, 0, 0, 0,
	0, 826, 826, 979, 971, 972, 973, 974, 976, 977,
	1819, 0, 857, 0, 0, 0, 0, 0, 640, 640,
	0, 0, 0, 0, 0, 829, 0, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 857, 0, 1526, 0, 829, 829, 0, 0,
	0, 0, 1529, 0, 0, 829, 829, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1197, 0, 0, 0,
	1545, 1546, 0, 0, 967, 968, 0, 278, 278, 0,
	0, 0, 0, 278, 1206, 0, 0, 0, 829, 0,
	521, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 1563, 1564, 1589, 1581, 1582, 1583, 0, 0, 0,
	0, 0, 0, 0, 1602, 278, 0, 1880, 437, 0,
	969, 0, 0, 0, 0, 1350, 0, 826, 0, 0,
	0, 0, 967, 968, 0, 0, 0, 0, 0, 0,
	0, 951, 953, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 0, 1578, 858, 970, 0, 0, 0, 0,
	1007, 1008, 1009, 1010, 1011, 0, 0, 0, 0, 0,
	1019, 0, 0, 0, 0, 975, 0, 0, 969, 1663,
	1026, 1664, 0, 0, 0, 858, 858, 0, 0, 0,
	826, 0, 0, 0, 858, 858, 0, 0, 0, 0,
	0, 0, 1569, 0, 0, 1350, 0, 0, 0, 0,
	0, 0, 829, 0, 0, 0, 278, 278, 0, 0,
	278, 0, 0, 1928, 0, 1088, 0, 858, 985, 1088,
	826, 0, 0, 975, 0, 0, 1400, 1584, 0, 0,
	0, 0, 0, 0, 278, 1407, 1408, 0, 0, 0,
	1103, 0, 0, 1415, 0, 1579, 0, 0, 0, 1420,
	1421, 1423, 1425, 1426, 0, 0, 0, 659, 52, 0,
	0, 1433, 0, 0, 1435, 278, 0, 1726, 0, 0,
	0, 0, 0, 0, 278, 0, 985, 0, 0, 278,
	1350, 1455, 0, 0, 0, 0, 986, 0, 278, 0,
	0, 0, 0, 1986, 0, 0, 0, 0, 278, 0,
	0, 52, 0, 0, 0, 0, 1563, 1564, 0, 1581,
	1582, 1583, 0, 1580, 0, 0, 0, 0, 0, 1197,
	1197, 0, 829, 476, 0, 0, 484, 0, 0, 1779,
	0, 500, 0, 52, 0, 0, 0, 0, 0, 0,
	1789, 858, 0, 0, 986, 0, 0, 0, 0, 857,
	0, 944, 0, 944, 0, 437, 0, 0, 1578, 278,
	0, 1563, 1564, 1500, 0, 0, 0, 0, 0, 0,
	978, 979, 971, 972, 973, 974, 976, 977, 2034, 0,
	857, 857, 0, 0, 0, 0, 0, 829, 0, 857,
	857, 1575, 1576, 1577, 0, 0, 1574, 1572, 1573, 1565,
	1566, 1567, 1568, 1570, 1571, 0, 0, 1569, 0, 0,
	0, 0, 0, 967, 968, 0, 987, 988, 989, 997,
	998, 999, 857, 0, 0, 0, 0, 1585, 0, 990,
	971, 972, 973, 974, 976, 977, 970, 0, 0, 1001,
	0, 0, 1584, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1878, 0, 0, 0, 0, 0, 0, 969,
	1579, 858, 1569, 0, 0, 984, 0, 0, 0, 0,
	829, 0, 640, 0, 0, 0, 0, 0, 1249, 1250,
	1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	0, 1276, 0, 1278, 1279, 1280, 1281, 0, 0, 0,
	0, 0, 0, 0, 975, 1579, 0, 0, 0, 0,
	0, 0, 1305, 0, 278, 0, 858, 0, 1580, 0,
	0, 0, 0, 994, 1002, 0, 0, 826, 0, 0,
	521, 1088, 0, 0, 1332, 1333, 857, 484, 1346, 1000,
	1357, 1359, 1364, 1367, 1368, 1369, 1644, 0, 0, 0,
	0, 992, 0, 1563, 1564, 0, 0, 985, 826, 826,
	0, 1939, 0, 0, 0, 0, 0, 826, 826, 0,
	0, 0, 0, 1580, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 278, 278, 761,
	0, 0, 0, 0, 0, 0, 1575, 1576, 1577, 858,
	826, 1574, 1572, 1573, 1565, 1566, 1567, 1568, 1570, 1571,
	0, 0, 1694, 0, 0, 1103, 0, 944, 0, 0,
	0, 0, 0, 0, 1704, 986, 0, 0, 0, 0,
	0, 0, 0, 0, 1449, 278, 0, 0, 0, 995,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1569, 0, 857, 0, 1573, 1565,
	1566, 1567, 1568, 1570, 1571, 1563, 1564, 0, 1581, 1582,
	1583, 0, 0, 0, 0, 0, 1475, 0, 0, 1743,
	0, 1879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	993, 0, 0, 981, 982, 983, 996, 1579, 980, 978,
	979, 971, 972, 973, 974, 976, 977, 1578, 0, 1530,
	0, 857, 0, 0, 826, 960, 0, 0, 0, 0,
	0, 0, 0, 476, 0, 0, 0, 0, 0, 2051,
	2052, 2053, 0, 0, 0, 0, 0, 521, 0, 0,
	754, 0, 0, 1088, 0, 0, 0, 0, 0, 1088,
	521, 0, 2069, 1807, 1808, 1103, 1569, 0, 1508, 1509,
	0, 0, 0, 0, 1514, 1580, 0, 0, 0, 1644,
	521, 0, 0, 0, 0, 1841, 0, 1842, 0, 278,
	1844, 1845, 0, 0, 1848, 278, 0, 0, 0, 0,
	0, 1584, 0, 0, 857, 0, 0, 1533, 0, 0,
	0, 0, 0, 0, 1540, 0, 0, 1544, 0, 1579,
	0, 0, 0, 0, 0, 0, 1553, 1644, 0, 521,
	1206, 0, 1644, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 826, 0, 0, 0, 0, 0,
	0, 1019, 0, 0, 0, 0, 0, 1364, 1364, 1364,
	0, 1565, 1566, 1567, 1568, 1570, 1571, 0, 0, 0,
	0, 0, 0, 1896, 476, 0, 0, 476, 476, 0,
	0, 1619, 0, 0, 0, 0, 0, 1580, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	0, 1018, 0, 0, 0, 0, 0, 0, 1022, 826,
	0, 0, 0, 1641, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	0, 1920, 0, 437, 1922, 640, 0, 0, 0, 0,
	0, 0, 278, 0, 0, 1644, 0, 761, 437, 0,
	0, 0, 0, 0, 0, 1575, 1576, 1577, 0, 0,
	1574, 1572, 1573, 1565, 1566, 1567, 1568, 1570, 1571, 0,
	1954, 0, 0, 521, 0, 0, 0, 0, 500, 0,
	0, 0, 826, 1644, 0, 52, 0, 0, 278, 0,
	0, 0, 0, 0, 1715, 1977, 0, 1716, 0, 0,
	0, 438, 0, 0, 0, 0, 0, 0, 0, 1721,
	52, 0, 0, 52, 0, 0, 0, 0, 1730, 439,
	0, 0, 0, 0, 0, 0, 1734, 0, 0, 1475,
	0, 0, 0, 0, 1088, 0, 0, 0, 52, 0,
	52, 0, 944, 0, 1750, 0, 0, 0, 1752, 0,
	0, 440, 0, 0, 0, 52, 442, 0, 0, 0,
	52, 447, 448, 0, 0, 453, 0, 2008, 2009, 0,
	0, 0, 0, 0, 0, 0, 0, 441, 443, 2020,
	0, 1783, 1784, 2021, 0, 0, 0, 0, 0, 0,
	1790, 1791, 1792, 0, 0, 0, 0, 967, 968, 0,
	987, 988, 989, 997, 998, 999, 0, 0, 0, 0,
	0, 0, 1088, 990, 0, 0, 444, 0, 0, 2043,
	970, 521, 0, 1001, 278, 0, 437, 0, 0, 0,
	445, 446, 0, 1831, 967, 968, 0, 987, 988, 989,
	997, 998, 999, 969, 0, 1644, 0, 449, 1977, 984,
	990, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 0, 521, 0, 0,
	969, 0, 0, 0, 0, 0, 984, 0, 0, 0,
	2098, 0, 0, 0, 0, 0, 0, 0, 975, 1877,
	0, 0, 0, 0, 500, 0, 1881, 0, 0, 0,
	1884, 1885, 0, 0, 0, 1887, 0, 994, 1002, 0,
	0, 0, 1889, 0, 1891, 0, 0, 0, 0, 0,
	0, 0, 1897, 1000, 0, 975, 0, 0, 1563, 1564,
	1294, 1581, 1582, 1583, 0, 992, 0, 0, 0, 0,
	0, 985, 0, 0, 994, 1002, 0, 0, 0, 0,
	0, 450, 0, 455, 0, 1906, 0, 451, 0, 0,
	1000, 0, 452, 0, 0, 0, 991, 0, 0, 0,
	0, 31, 992, 0, 0, 0, 454, 0, 985, 0,
	1578, 0, 32, 56, 1563, 1564, 0, 1581, 1582, 1583,
	0, 0, 0, 0, 0, 500, 500, 0, 0, 500,
	1724, 0, 0, 991, 0, 0, 0, 484, 58, 986,
	0, 0, 0, 0, 34, 1944, 64, 0, 0, 0,
	0, 1563, 1564, 995, 1581, 1582, 1583, 0, 0, 1569,
	0, 0, 0, 0, 0, 47, 1578, 1723, 0, 0,
	0, 0, 42, 0, 52, 59, 986, 52, 0, 46,
	43, 0, 0, 0, 0, 0, 1978, 1979, 1563, 1564,
	995, 1581, 1582, 1583, 1584, 0, 48, 0, 484, 0,
	0, 0, 44, 1578, 0, 0, 0, 0, 0, 0,
	0, 0, 1579, 0, 993, 1569, 1991, 981, 982, 983,
	996, 0, 980, 978, 979, 971, 972, 973, 974, 976,
	977, 0, 0, 0, 1998, 0, 0, 0, 1605, 0,
	1578, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1584, 993, 1569, 0, 981, 982, 983, 996, 0, 980,
	978, 979, 971, 972, 973, 974, 976, 977, 1579, 0,
	761, 0, 0, 52, 0, 1604, 0, 52, 0, 0,
	1580, 0, 0, 45, 0, 0, 0, 1584, 0, 1569,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	62, 33, 0, 0, 49, 1579, 60, 0, 0, 0,
	0, 50, 0, 0, 0, 71, 0, 0, 0, 0,
	53, 0, 0, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 1294, 0, 0, 1580, 0, 0, 0,
	0, 73, 1579, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1018, 0, 0, 2082, 63, 1575, 1576,
	1577, 0, 0, 1574, 1572, 1573, 1565, 1566, 1567, 1568,
	1570, 1571, 74, 1580, 2096, 2096, 0, 0, 0, 0,
	69, 0, 0, 0, 0, 0, 70, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2096, 0, 0, 0, 0, 68, 0, 0, 0, 0,
	1580, 0, 1018, 0, 1575, 1576, 1577, 0, 0, 1574,
	1572, 1573, 1565, 1566, 1567, 1568, 1570, 1571, 0, 0,
	0, 0, 0, 0, 2096, 0, 0, 0, 0, 0,
	0, 0, 0, 500, 0, 0, 0, 0, 0, 0,
	0, 1575, 1576, 1577, 0, 0, 1574, 1572, 1573, 1565,
	1566, 1567, 1568, 1570, 1571, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1575, 1576,
	1577, 0, 0, 1574, 1572, 1573, 1565, 1566, 1567, 1568,
	1570, 1571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 500, 0, 0,
	0, 0, 0, 0, 0, 678, 667, 668, 665, 666,
	657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 694,
	660, 0, 0, 0, 93, 94, 95, 226, 709, 228,
	710, 96, 711, 712, 500, 97, 232, 233, 98, 663,
	693, 713, 714, 236, 0, 99, 705, 0, 686, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 687, 689, 0, 688, 690, 109,
	110, 279, 111, 715, 112, 716, 717, 762, 113, 0,
	114, 0, 0, 0, 708, 116, 0, 117, 0, 0,
	0, 651, 118, 119, 695, 696, 674, 0, 0, 120,
	121, 718, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 706, 0, 246, 0, 125, 126, 127, 128, 702,
	704, 314, 0, 132, 0, 129, 0, 313, 130, 719,
	131, 720, 721, 722, 0, 685, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 707, 317, 138, 318,
	0, 139, 0, 52, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 646, 0, 675,
	703, 150, 723, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 697, 157, 158,
	159, 160, 0, 698, 161, 261, 162, 0, 163, 164,
	165, 724, 166, 167, 52, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 652, 182, 0, 186, 187, 188, 189, 71, 264,
	190, 191, 691, 192, 183, 184, 193, 323, 194, 725,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 726,
	199, 699, 0, 202, 73, 203, 204, 205, 206, 207,
	0, 269, 727, 728, 0, 0, 208, 700, 701, 673,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 692,
	216, 0, 217, 218, 219, 554, 729, 0, 0, 220,
	0, 0, 0, 69, 221, 222, 223, 224, 647, 70,
	0, 0, 0, 0, 645, 0, 0, 0, 0, 643,
	644, 0, 0, 0, 0, 0, 0, 0, 653, 0,
	0, 0, 0, 656, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 305, 0, 1962, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 0, 0, 0, 0,
	90, 91, 324, 92, 325, 326, 327, 328, 225, 329,
	330, 331, 332, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 333, 97, 232, 233, 98, 334, 335,
	234, 235, 236, 336, 99, 237, 337, 310, 338, 100,
	101, 102, 0, 103, 339, 104, 105, 106, 340, 311,
	107, 108, 341, 342, 343, 344, 345, 346, 109, 110,
	279, 111, 238, 112, 239, 240, 347, 113, 348, 114,
	349, 350, 351, 115, 116, 352, 117, 353, 0, 354,
	241, 118, 119, 242, 243, 355, 356, 357, 120, 121,
	244, 1018, 122, 358, 123, 359, 360, 312, 361, 124,
	245, 362, 246, 363, 125, 126, 127, 128, 247, 248,
	314, 364, 132, 365, 129, 366, 313, 130, 249, 131,
	250, 251, 252, 367, 253, 368, 315, 133, 316, 134,
	135, 369, 137, 136, 370, 254, 317, 138, 318, 371,
	139, 372, 373, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 374, 375, 376, 256,
	150, 257, 151, 152, 377, 153, 378, 379, 154, 380,
	381, 155, 258, 320, 156, 321, 259, 157, 158, 159,
	160, 382, 260, 161, 261, 162, 383, 163, 164, 165,
	262, 166, 167, 384, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 385, 179, 322, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 386, 264, 190,
	191, 387, 192, 183, 184, 193, 323, 194, 265, 266,
	195, 388, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 389, 202, 390, 203, 204, 205, 206, 207, 391,
	269, 270, 271, 392, 393, 208, 272, 273, 394, 209,
	210, 211, 212, 395, 396, 213, 214, 215, 397, 216,
	398, 217, 218, 219, 274, 275, 399, 400, 220, 401,
	402, 403, 404, 221, 222, 223, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 305, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	0, 0, 0, 1083, 90, 91, 324, 92, 325, 326,
	327, 328, 225, 329, 330, 331, 332, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 333, 97, 232,
	233, 98, 334, 335, 234, 235, 236, 336, 99, 237,
	337, 310, 338, 100, 101, 102, 0, 103, 339, 104,
	105, 106, 340, 311, 107, 108, 341, 342, 343, 344,
	345, 346, 109, 110, 279, 111, 238, 112, 239, 240,
	347, 113, 348, 114, 349, 350, 351, 115, 116, 352,
	117, 353, 0, 354, 241, 118, 119, 242, 243, 355,
	356, 357, 120, 121, 244, 0, 122, 358, 123, 359,
	360, 312, 361, 124, 245, 362, 246, 363, 125, 126,
	127, 128, 247, 248, 314, 364, 132, 365, 129, 366,
	313, 130, 249, 131, 250, 251, 252, 367, 253, 368,
	315, 133, 316, 134, 135, 369, 137, 136, 370, 254,
	317, 138, 318, 371, 139, 372, 373, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	374, 375, 376, 256, 150, 257, 151, 152, 377, 153,
	378, 379, 154, 380, 381, 155, 258, 320, 156, 321,
	259, 157, 158, 159, 160, 382, 260, 161, 261, 162,
	383, 163, 164, 165, 262, 166, 167, 384, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 385,
	179, 322, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 386, 264, 190, 191, 387, 192, 183, 184, 193,
	323, 194, 265, 266, 195, 388, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 389, 202, 390, 203, 204,
	205, 206, 207, 391, 269, 270, 271, 392, 393, 208,
	272, 273, 394, 209, 210, 211, 212, 395, 396, 213,
	214, 215, 397, 216, 398, 217, 218, 219, 274, 275,
	399, 400, 220, 401, 402, 403, 404, 221, 222, 223,
	224, 0, 0, 0, 305, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1803,
	90, 91, 324, 92, 325, 326, 327, 328, 225, 329,
	330, 331, 332, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 333, 97, 232, 233, 98, 334, 335,
	234, 235, 236, 336, 99, 237, 337, 310, 338, 100,
	101, 102, 0, 103, 339, 104, 105, 106, 340, 311,
	107, 108, 341, 342, 343, 344, 345, 346, 109, 110,
	279, 111, 238, 112, 239, 240, 347, 113, 348, 114,
	349, 350, 351, 115, 116, 352, 117, 353, 0, 354,
	241, 118, 119, 242, 243, 355, 356, 357, 120, 121,
	244, 0, 122, 358, 123, 359, 360, 312, 361, 124,
	245, 362, 246, 363, 125, 126, 127, 128, 247, 248,
	314, 364, 132, 365, 129, 366, 313, 130, 249, 131,
	250, 251, 252, 367, 253, 368, 315, 133, 316, 134,
	135, 369, 137, 136, 370, 254, 317, 138, 318, 371,
	139, 372, 373, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 374, 375, 376, 256,
	150, 257, 151, 152, 377, 153, 378, 379, 154, 380,
	381, 155, 258, 320, 156, 321, 259, 157, 158, 159,
	160, 382, 260, 161, 261, 162, 383, 163, 164, 165,
	262, 166, 167, 384, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 385, 179, 322, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 386, 264, 190,
	191, 387, 192, 183, 184, 193, 323, 194, 265, 266,
	195, 388, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 389, 202, 390, 203, 204, 205, 206, 207, 391,
	269, 270, 271, 392, 393, 208, 272, 273, 394, 209,
	210, 211, 212, 395, 396, 213, 214, 215, 397, 216,
	398, 217, 218, 219, 274, 275, 399, 400, 220, 401,
	402, 403, 404, 221, 222, 223, 224, 305, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	791, 0, 0, 90, 91, 324, 92, 325, 326, 327,
	328, 225, 329, 330, 331, 332, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 333, 97, 232, 233,
	98, 334, 335, 234, 235, 236, 336, 99, 237, 337,
	310, 338, 100, 101, 102, 0, 103, 339, 104, 105,
	106, 340, 311, 107, 108, 341, 342, 343, 344, 345,
	346, 109, 110, 279, 111, 238, 112, 239, 240, 347,
	113, 348, 114, 349, 350, 351, 115, 116, 352, 117,
	353, 0, 354, 241, 118, 119, 242, 243, 355, 356,
	357, 120, 121, 244, 0, 122, 358, 123, 359, 360,
	312, 361, 124, 245, 362, 246, 363, 125, 126, 127,
	128, 247, 248, 314, 364, 132, 365, 129, 366, 313,
	130, 249, 131, 250, 251, 252, 367, 253, 368, 315,
	133, 316, 134, 135, 369, 137, 136, 370, 254, 317,
	138, 318, 371, 139, 372, 373, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 374,
	375, 376, 256, 150, 257, 151, 152, 377, 153, 378,
	379, 154, 380, 381, 155, 258, 320, 156, 321, 259,
	157, 158, 159, 160, 382, 260, 161, 261, 162, 383,
	163, 164, 165, 262, 166, 167, 384, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 385, 179,
	322, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	386, 264, 190, 191, 387, 192, 183, 184, 193, 323,
	194, 265, 266, 195, 388, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 389, 202, 390, 203, 204, 205,
	206, 207, 391, 269, 270, 271, 392, 393, 208, 272,
	273, 394, 209, 210, 211, 212, 395, 396, 213, 214,
	215, 397, 216, 398, 217, 218, 219, 274, 275, 399,
	400, 220, 401, 402, 403, 404, 221, 222, 223, 224,
	678, 667, 668, 665, 666, 657, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 1321, 92,
	0, 0, 0, 0, 694, 660, 0, 0, 0, 93,
	94, 95, 226, 709, 228, 710, 96, 711, 712, 0,
	97, 232, 233, 98, 663, 693, 713, 714, 236, 0,
	99, 705, 0, 686, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 687,
	689, 0, 688, 690, 109, 110, 279, 111, 715, 112,
	716, 717, 0, 113, 0, 114, 0, 1322, 0, 708,
	116, 0, 117, 0, 0, 0, 651, 118, 119, 695,
	696, 674, 0, 0, 120, 121, 718, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 706, 0, 246, 0,
	125, 126, 127, 128, 702, 704, 314, 0, 132, 0,
	129, 0, 313, 130, 719, 131, 720, 721, 722, 0,
	685, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 707, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 646, 0, 675, 703, 150, 723, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 697, 157, 158, 159, 160, 0, 698, 161,
	261, 162, 0, 163, 164, 165, 724, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 652, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 691, 192, 183,
	184, 193, 323, 194, 725, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 726, 199, 699, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 727, 728, 0,
	0, 208, 700, 701, 673, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 692, 216, 0, 217, 218, 219,
	274, 729, 1320, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 647, 0, 0, 0, 0, 0, 645,
	0, 0, 0, 0, 643, 644, 1323, 678, 667, 668,
	665, 666, 657, 653, 1318, 0, 0, 0, 656, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 694, 660, 0, 0, 0, 93, 94, 95, 226,
	709, 228, 710, 96, 711, 712, 0, 97, 232, 233,
	98, 663, 693, 713, 714, 236, 0, 99, 705, 0,
	686, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 687, 689, 0, 688,
	690, 109, 110, 279, 111, 715, 112, 716, 717, 0,
	113, 0, 114, 0, 0, 0, 708, 116, 0, 117,
	0, 0, 0, 651, 118, 119, 695, 696, 674, 0,
	0, 120, 121, 718, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 706, 0, 246, 0, 125, 126, 127,
	128, 702, 704, 314, 0, 132, 0, 129, 0, 313,
	130, 719, 131, 720, 721, 722, 0, 685, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 707, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 646,
	0, 675, 703, 150, 723, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 697,
	157, 158, 159, 160, 0, 698, 161, 261, 162, 0,
	163, 164, 165, 724, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 652, 182, 0, 186, 187, 188, 189,
	71, 264, 190, 191, 691, 192, 183, 184, 193, 323,
	194, 725, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 726, 199, 699, 0, 202, 73, 203, 204, 205,
	206, 207, 0, 269, 727, 728, 0, 0, 208, 700,
	701, 673, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 692, 216, 0, 217, 218, 219, 554, 729, 0,
	0, 220, 0, 0, 0, 69, 221, 222, 223, 224,
	647, 70, 0, 0, 0, 0, 645, 0, 0, 0,
	0, 643, 644, 678, 667, 668, 665, 666, 657, 0,
	653, 0, 0, 0, 0, 656, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 694, 660, 0,
	0, 0, 93, 94, 95, 226, 709, 228, 710, 96,
	711, 712, 1360, 97, 232, 233, 98, 663, 693, 713,
	714, 236, 0, 99, 705, 0, 686, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	108, 0, 687, 689, 0, 688, 690, 109, 110, 279,
	111, 715, 112, 716, 717, 0, 113, 0, 114, 0,
	0, 0, 708, 116, 0, 117, 0, 0, 0, 651,
	118, 119, 695, 696, 674, 0, 0, 120, 121, 718,
	0, 122, 0, 123, 0, 1365, 312, 0, 124, 706,
	0, 246, 0, 125, 126, 127, 128, 702, 704, 314,
	0, 132, 0, 129, 0, 313, 130, 719, 131, 720,
	721, 722, 0, 685, 0, 315, 133, 316, 134, 135,
	0, 137, 136, 1361, 707, 317, 138, 318, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 646, 0, 675, 703, 150,
	723, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 697, 157, 158, 159, 160,
	0, 698, 161, 261, 162, 0, 163, 164, 165, 724,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 652,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	691, 192, 183, 184, 193, 323, 194, 725, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 726, 199, 699,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	727, 728, 0, 1362, 208, 700, 701, 673, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 692, 216, 0,
	217, 218, 219, 274, 729, 0, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 647, 0, 0, 0,
	0, 0, 645, 0, 0, 0, 0, 643, 644, 678,
	667, 668, 665, 666, 657, 0, 653, 0, 0, 0,
	0, 656, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 694, 660, 0, 0, 0, 93, 94,
	95, 226, 709, 228, 710, 96, 711, 712, 0, 97,
	232, 233, 98, 663, 693, 713, 714, 236, 0, 99,
	705, 0, 686, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 687, 689,
	0, 688, 690, 109, 110, 279, 111, 715, 112, 716,
	717, 0, 113, 0, 114, 0, 0, 0, 708, 116,
	0, 117, 0, 0, 0, 651, 118, 119, 695, 696,
	674, 0, 0, 120, 121, 718, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 706, 0, 246, 0, 125,
	126, 127, 128, 702, 704, 314, 0, 132, 0, 129,
	0, 313, 130, 719, 131, 720, 721, 722, 0, 685,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	707, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 646, 1673, 675, 703, 150, 723, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 697, 157, 158, 159, 160, 0, 698, 161, 261,
	162, 0, 163, 164, 165, 724, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 652, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 691, 192, 183, 184,
	193, 323, 194, 725, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 726, 199, 699, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 727, 728, 0, 0,
	208, 700, 701, 673, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 692, 216, 0, 217, 218, 219, 274,
	729, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 647, 0, 0, 0, 0, 0, 645, 0,
	0, 0, 0, 643, 644, 641, 678, 667, 668, 665,
	666, 657, 653, 0, 0, 0, 0, 656, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	694, 660, 0, 0, 0, 93, 94, 95, 226, 709,
	228, 710, 96, 711, 712, 0, 97, 232, 233, 98,
	663, 693, 713, 714, 236, 0, 99, 705, 0, 686,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 687, 689, 0, 688, 690,
	109, 110, 279, 111, 715, 112, 716, 717, 0, 113,
	0, 114, 0, 0, 0, 708, 116, 0, 117, 0,
	0, 0, 651, 118, 119, 695, 696, 674, 0, 0,
	120, 121, 718, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 706, 0, 246, 0, 125, 126, 127, 128,
	702, 704, 314, 0, 132, 0, 129, 0, 313, 130,
	719, 131, 720, 721, 722, 0, 685, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 707, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 646, 0,
	675, 703, 150, 723, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 697, 157,
	158, 159, 160, 0, 698, 161, 261, 162, 0, 163,
	164, 165, 724, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 652, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 691, 192, 183, 184, 193, 323, 194,
	725, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	726, 199, 699, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 727, 728, 0, 0, 208, 700, 701,
	673, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	692, 216, 0, 217, 218, 219, 274, 729, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 647,
	0, 0, 0, 0, 0, 645, 0, 0, 0, 0,
	643, 644, 0, 0, 0, 0, 0, 1024, 1313, 653,
	0, 0, 0, 0, 656, 678, 667, 668, 665, 666,
	657, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 694,
	660, 0, 0, 0, 93, 94, 95, 226, 709, 228,
	710, 96, 711, 712, 0, 97, 232, 233, 98, 663,
	693, 713, 714, 236, 0, 99, 705, 0, 686, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 687, 689, 0, 688, 690, 109,
	110, 279, 111, 715, 112, 716, 717, 0, 113, 0,
	114, 0, 0, 0, 708, 116, 0, 117, 0, 0,
	0, 651, 118, 119, 695, 696, 674, 0, 0, 120,
	121, 718, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 706, 0, 246, 0, 125, 126, 127, 128, 702,
	704, 314, 0, 132, 0, 129, 0, 313, 130, 719,
	131, 720, 721, 722, 0, 685, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 707, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 646, 0, 675,
	703, 150, 723, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 697, 157, 158,
	159, 160, 0, 698, 161, 261, 162, 0, 163, 164,
	165, 724, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 652, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 691, 192, 183, 184, 193, 323, 194, 725,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 726,
	199, 699, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 727, 728, 0, 0, 208, 700, 701, 673,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 692,
	216, 0, 217, 218, 219, 274, 729, 0, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 647, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 0, 643,
	644, 678, 667, 668, 665, 666, 657, 0, 653, 1780,
	0, 0, 0, 656, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 694, 660, 0, 0, 0,
	93, 94, 95, 226, 709, 228, 710, 96, 711, 712,
	0, 97, 232, 233, 98, 663, 693, 713, 714, 236,
	0, 99, 705, 0, 686, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	687, 689, 0, 688, 690, 109, 110, 279, 111, 715,
	112, 716, 717, 0, 113, 0, 114, 0, 0, 0,
	708, 116, 0, 117, 0, 0, 0, 651, 118, 119,
	695, 696, 674, 0, 0, 120, 121, 718, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 706, 0, 246,
	0, 125, 126, 127, 128, 702, 704, 314, 0, 132,
	0, 129, 0, 313, 130, 719, 131, 720, 721, 722,
	0, 685, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 707, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 646, 0, 675, 703, 150, 723, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 697, 157, 158, 159, 160, 0, 698,
	161, 261, 162, 0, 163, 164, 165, 724, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 652, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 691, 192,
	183, 184, 193, 323, 194, 725, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 726, 199, 699, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 727, 728,
	0, 0, 208, 700, 701, 673, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 692, 216, 0, 217, 218,
	219, 274, 729, 1737, 0, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 647, 0, 0, 0, 0, 0,
	645, 0, 0, 0, 0, 643, 644, 678, 667, 668,
	665, 666, 657, 0, 653, 0, 0, 0, 0, 656,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 694, 660, 0, 0, 0, 93, 94, 95, 226,
	709, 228, 710, 96, 711, 712, 0, 97, 232, 233,
	98, 663, 693, 713, 714, 236, 0, 99, 705, 0,
	686, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 687, 689, 0, 688,
	690, 109, 110, 279, 111, 715, 112, 716, 717, 0,
	113, 0, 114, 0, 0, 0, 708, 116, 0, 117,
	0, 0, 0, 651, 118, 119, 695, 696, 674, 0,
	0, 120, 121, 718, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 706, 0, 246, 0, 125, 126, 127,
	128, 702, 704, 314, 0, 132, 0, 129, 0, 313,
	130, 719, 131, 720, 721, 722, 0, 685, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 707, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 646,
	0, 675, 703, 150, 723, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 697,
	157, 158, 159, 160, 0, 698, 161, 261, 162, 0,
	163, 164, 165, 724, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 652, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 691, 192, 183, 184, 193, 323,
	194, 725, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 726, 199, 699, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 727, 728, 0, 0, 208, 700,
	701, 673, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 692, 216, 0, 217, 218, 219, 274, 729, 0,
	0, 220, 0, 0, 0, 0, 221, 222, 223, 224,
	647, 0, 0, 0, 0, 0, 645, 0, 0, 0,
	0, 643, 644, 678, 667, 668, 665, 666, 657, 0,
	653, 1727, 0, 0, 0, 656, 0, 0, 0, 90,
	91, 0, 92, 0, 0, 0, 0, 694, 660, 0,
	0, 0, 93, 94, 95, 226, 709, 228, 710, 96,
	711, 712, 0, 97, 232, 233, 98, 663, 693, 713,
	714, 236, 0, 99, 705, 0, 686, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 311, 107,
	108, 0, 687, 689, 0, 688, 690, 109, 110, 279,
	111, 715, 112, 716, 717, 762, 113, 0, 114, 0,
	0, 0, 708, 116, 0, 117, 0, 0, 0, 651,
	118, 119, 695, 696, 674, 0, 0, 120, 121, 718,
	0, 122, 0, 123, 0, 0, 312, 0, 124, 706,
	0, 246, 0, 125, 126, 127, 128, 702, 704, 314,
	0, 132, 0, 129, 0, 313, 130, 719, 131, 720,
	721, 722, 0, 685, 0, 315, 133, 316, 134, 135,
	0, 137, 136, 0, 707, 317, 138, 318, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	319, 146, 147, 149, 148, 646, 0, 675, 703, 150,
	723, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 320, 156, 321, 697, 157, 158, 159, 160,
	0, 698, 161, 261, 162, 0, 163, 164, 165, 724,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 322, 180, 181, 652,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	691, 192, 183, 184, 193, 323, 194, 725, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 726, 199, 699,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	727, 728, 0, 0, 208, 700, 701, 673, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 692, 216, 0,
	217, 218, 219, 274, 729, 0, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 647, 0, 0, 0,
	0, 0, 645, 0, 0, 0, 0, 643, 644, 678,
	667, 668, 665, 666, 657, 0, 653, 0, 0, 0,
	0, 656, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 0, 0, 694, 660, 0, 0, 0, 93, 94,
	95, 226, 709, 228, 710, 96, 711, 712, 0, 97,
	232, 233, 98, 663, 693, 713, 714, 236, 0, 99,
	705, 0, 686, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 108, 0, 687, 689,
	0, 688, 690, 109, 110, 279, 111, 715, 112, 716,
	717, 0, 113, 0, 114, 0, 0, 0, 708, 116,
	0, 117, 0, 0, 0, 651, 118, 119, 695, 696,
	674, 0, 0, 120, 121, 718, 0, 122, 0, 123,
	0, 1365, 312, 0, 124, 706, 0, 246, 0, 125,
	126, 127, 128, 702, 704, 314, 0, 132, 0, 129,
	0, 313, 130, 719, 131, 720, 721, 722, 0, 685,
	0, 315, 133, 316, 134, 135, 0, 137, 136, 0,
	707, 317, 138, 318, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 646, 0, 675, 703, 150, 723, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 697, 157, 158, 159, 160, 0, 698, 161, 261,
	162, 0, 163, 164, 165, 724, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 652, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 691, 192, 183, 184,
	193, 323, 194, 725, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 726, 199, 699, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 727, 728, 0, 0,
	208, 700, 701, 673, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 692, 216, 0, 217, 218, 219, 274,
	729, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 647, 0, 0, 0, 0, 0, 645, 0,
	0, 0, 0, 643, 644, 678, 667, 668, 665, 666,
	657, 0, 653, 0, 0, 0, 0, 656, 0, 0,
	0, 90, 91, 0, 92, 0, 0, 0, 0, 694,
	660, 0, 0, 0, 93, 94, 95, 226, 709, 228,
	710, 96, 711, 712, 0, 97, 232, 233, 98, 663,
	693, 713, 714, 236, 0, 99, 705, 0, 686, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	311, 107, 108, 0, 687, 689, 0, 688, 690, 109,
	110, 279, 111, 715, 112, 716, 717, 0, 113, 0,
	114, 0, 0, 0, 708, 116, 0, 117, 0, 0,
	0, 651, 118, 119, 695, 696, 674, 0, 0, 120,
	121, 718, 0, 122, 0, 123, 0, 0, 312, 0,
	124, 706, 0, 246, 0, 125, 126, 127, 128, 702,
	704, 314, 0, 132, 0, 129, 0, 313, 130, 719,
	131, 720, 721, 722, 0, 685, 0, 315, 133, 316,
	134, 135, 0, 137, 136, 0, 707, 317, 138, 318,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 319, 146, 147, 149, 148, 646, 0, 675,
	703, 150, 723, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 320, 156, 321, 697, 157, 158,
	159, 160, 0, 698, 161, 261, 162, 0, 163, 164,
	165, 724, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 322, 180,
	181, 652, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 691, 192, 183, 184, 193, 323, 194, 725,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 726,
	199, 699, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 727, 728, 0, 0, 208, 700, 701, 673,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 692,
	216, 0, 217, 218, 219, 274, 729, 0, 0, 220,
	0, 0, 0, 0, 221, 222, 223, 224, 647, 0,
	0, 0, 0, 0, 645, 0, 0, 0, 0, 643,
	644, 678, 667, 668, 665, 666, 657, 0, 653, 1308,
	0, 0, 0, 656, 0, 0, 0, 90, 91, 0,
	92, 0, 0, 0, 0, 694, 660, 0, 0, 0,
	93, 94, 95, 226, 709, 228, 710, 96, 711, 712,
	0, 97, 232, 233, 98, 663, 693, 713, 714, 236,
	0, 99, 705, 0, 686, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	687, 689, 0, 688, 690, 109, 110, 279, 111, 715,
	112, 716, 717, 0, 113, 0, 114, 0, 0, 0,
	708, 116, 0, 117, 0, 0, 0, 651, 118, 119,
	695, 696, 674, 0, 0, 120, 121, 718, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 706, 0, 246,
	0, 125, 126, 127, 128, 702, 704, 314, 0, 132,
	0, 129, 0, 313, 130, 719, 131, 720, 721, 722,
	0, 685, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 707, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 646, 0, 675, 703, 150, 723, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 697, 157, 158, 159, 160, 0, 698,
	161, 261, 162, 0, 163, 164, 165, 724, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 652, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 691, 192,
	183, 184, 193, 323, 194, 725, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 726, 199, 699, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 727, 728,
	0, 0, 208, 700, 701, 673, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 692, 216, 0, 217, 218,
	219, 274, 729, 0, 0, 220, 0, 0, 0, 0,
	221, 222, 223, 224, 647, 0, 0, 0, 0, 0,
	645, 0, 0, 0, 0, 643, 644, 641, 678, 667,
	668, 665, 666, 657, 653, 0, 0, 0, 0, 656,
	0, 0, 0, 0, 90, 91, 952, 92, 0, 0,
	0, 0, 694, 660, 0, 0, 0, 93, 94, 95,
	226, 709, 228, 710, 96, 711, 712, 0, 97, 232,
	233, 98, 663, 693, 713, 714, 236, 0, 99, 705,
	0, 686, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 687, 689, 0,
	688, 690, 109, 110, 279, 111, 715, 112, 716, 717,
	0, 113, 0, 114, 0, 0, 0, 708, 116, 0,
	117, 0, 0, 0, 651, 118, 119, 695, 696, 674,
	0, 0, 120, 121, 718, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 706, 0, 246, 0, 125, 126,
	127, 128, 702, 704, 314, 0, 132, 0, 129, 0,
	313, 130, 719, 131, 720, 721, 722, 0, 685, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 707,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	646, 0, 675, 703, 150, 723, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	697, 157, 158, 159, 160, 0, 698, 161, 261, 162,
	0, 163, 164, 165, 724, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 652, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 691, 192, 183, 184, 193,
	323, 194, 725, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 726, 199, 699, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 727, 728, 0, 0, 208,
	700, 701, 673, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 692, 216, 0, 217, 218, 219, 274, 729,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 647, 0, 0, 0, 0, 0, 645, 0, 0,
	0, 0, 643, 644, 678, 667, 668, 665, 666, 657,
	0, 653, 0, 0, 0, 0, 656, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 694, 660,
	0, 0, 0, 93, 94, 95, 226, 709, 228, 710,
	96, 711, 712, 0, 97, 232, 233, 98, 663, 693,
	713, 714, 236, 0, 99, 705, 0, 686, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 2095, 0, 687, 689, 0, 688, 690, 109, 110,
	279, 111, 715, 112, 716, 717, 0, 113, 0, 114,
	0, 0, 0, 708, 116, 0, 117, 0, 0, 0,
	651, 118, 119, 695, 696, 674, 0, 0, 120, 121,
	718, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	706, 0, 246, 0, 125, 126, 127, 128, 702, 704,
	314, 0, 132, 0, 129, 0, 313, 130, 719, 131,
	720, 721, 722, 0, 685, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 707, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 646, 0, 675, 703,
	150, 723, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 697, 157, 158, 159,
	160, 0, 698, 161, 261, 162, 0, 163, 164, 165,
	724, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	652, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 691, 192, 183, 184, 193, 323, 194, 725, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 726, 199,
	699, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 727, 728, 0, 0, 208, 700, 701, 673, 209,
	210, 2094, 212, 0, 0, 213, 214, 215, 692, 216,
	0, 217, 218, 219, 274, 729, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 647, 0, 0,
	0, 0, 0, 645, 0, 0, 0, 0, 643, 644,
	678, 667, 668, 665, 666, 657, 0, 653, 0, 0,
	0, 0, 656, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 0, 0, 694, 660, 0, 0, 0, 93,
	94, 95, 2093, 709, 228, 710, 96, 711, 712, 0,
	97, 232, 233, 98, 663, 693, 713, 714, 236, 0,
	99, 705, 0, 686, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 2095, 0, 687,
	689, 0, 688, 690, 109, 110, 279, 111, 715, 112,
	716, 717, 0, 113, 0, 114, 0, 0, 0, 708,
	116, 0, 117, 0, 0, 0, 651, 118, 119, 695,
	696, 674, 0, 0, 120, 121, 718, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 706, 0, 246, 0,
	125, 126, 127, 128, 702, 704, 314, 0, 132, 0,
	129, 0, 313, 130, 719, 131, 720, 721, 722, 0,
	685, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 707, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 646, 0, 675, 703, 150, 723, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 697, 157, 158, 159, 160, 0, 698, 161,
	261, 162, 0, 163, 164, 165, 724, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 652, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 691, 192, 183,
	184, 193, 323, 194, 725, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 726, 199, 699, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 727, 728, 0,
	0, 208, 700, 701, 673, 209, 210, 2094, 212, 0,
	0, 213, 214, 215, 692, 216, 0, 217, 218, 219,
	274, 729, 0, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 647, 0, 0, 0, 0, 0, 645,
	0, 0, 0, 0, 643, 644, 678, 667, 668, 665,
	666, 657, 0, 653, 0, 0, 0, 0, 656, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	694, 660, 0, 0, 0, 93, 94, 95, 226, 709,
	228, 710, 96, 711, 712, 0, 97, 232, 233, 98,
	663, 693, 713, 714, 236, 0, 99, 705, 0, 686,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 687, 689, 0, 688, 690,
	109, 110, 279, 111, 715, 112, 716, 717, 0, 113,
	0, 114, 0, 0, 0, 708, 116, 0, 117, 0,
	0, 0, 651, 118, 119, 695, 696, 674, 0, 0,
	120, 121, 718, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 706, 0, 246, 0, 125, 126, 127, 128,
	702, 704, 314, 0, 132, 0, 129, 0, 313, 130,
	719, 131, 720, 721, 722, 0, 685, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 707, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 646, 0,
	675, 703, 150, 723, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 697, 157,
	158, 159, 160, 0, 698, 161, 261, 162, 0, 163,
	164, 165, 724, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 652, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 691, 192, 183, 184, 193, 323, 194,
	725, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	726, 199, 699, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 727, 728, 0, 0, 208, 700, 701,
	673, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	692, 216, 0, 217, 218, 219, 274, 729, 0, 0,
	220, 0, 0, 0, 0, 221, 222, 223, 224, 647,
	0, 0, 0, 0, 0, 645, 0, 0, 0, 0,
	643, 644, 1337, 667, 668, 665, 666, 657, 0, 653,
	0, 0, 0, 0, 656, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 694, 660, 0, 0,
	0, 93, 94, 95, 226, 709, 228, 710, 96, 711,
	712, 0, 97, 232, 233, 98, 663, 693, 713, 714,
	236, 0, 99, 705, 0, 686, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 687, 689, 0, 688, 690, 109, 110, 279, 111,
	715, 1340, 716, 717, 0, 113, 0, 114, 0, 0,
	0, 708, 116, 0, 117, 0, 0, 0, 651, 118,
	119, 695, 696, 674, 0, 0, 120, 121, 718, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 706, 0,
	246, 0, 125, 126, 1341, 128, 702, 704, 314, 0,
	132, 0, 129, 0, 313, 130, 719, 131, 720, 721,
	722, 0, 685, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 707, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 1342, 1339, 145, 255, 144, 319,
	146, 147, 149, 148, 646, 0, 675, 703, 150, 723,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 697, 157, 158, 159, 160, 0,
	698, 161, 261, 162, 0, 163, 164, 165, 724, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 652, 182,
	0, 186, 187, 188, 1343, 0, 264, 190, 191, 691,
	192, 183, 184, 193, 323, 194, 725, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 726, 199, 699, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 727,
	728, 0, 0, 208, 700, 701, 673, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 692, 216, 0, 217,
	218, 219, 274, 729, 0, 0, 220, 0, 0, 0,
	0, 221, 222, 1338, 224, 647, 0, 0, 0, 0,
	0, 645, 0, 0, 0, 0, 643, 644, 678, 667,
	668, 665, 666, 657, 0, 653, 0, 0, 0, 0,
	656, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 694, 660, 0, 0, 0, 93, 94, 95,
	226, 709, 228, 710, 96, 711, 712, 0, 97, 232,
	233, 98, 663, 693, 713, 714, 236, 0, 99, 705,
	0, 686, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 687, 689, 0,
	688, 690, 109, 110, 279, 111, 715, 112, 716, 717,
	0, 113, 0, 114, 0, 0, 0, 708, 116, 0,
	117, 0, 0, 0, 651, 118, 119, 695, 696, 674,
	0, 0, 120, 121, 718, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 706, 0, 246, 0, 125, 126,
	127, 128, 702, 704, 314, 0, 132, 0, 129, 0,
	313, 130, 719, 131, 720, 721, 722, 0, 685, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 707,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	0, 0, 675, 703, 150, 723, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	697, 157, 158, 159, 160, 0, 698, 161, 261, 162,
	0, 163, 164, 165, 724, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 1355, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 691, 192, 183, 184, 193,
	323, 194, 725, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 726, 199, 699, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 727, 728, 0, 0, 208,
	700, 701, 673, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 692, 216, 0, 217, 218, 219, 274, 729,
	0, 0, 220, 0, 0, 0, 0, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 1351, 1352, 678, 667, 668, 665, 666, 657,
	0, 1354, 0, 0, 0, 0, 656, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 694, 660,
	0, 0, 0, 93, 94, 95, 226, 709, 228, 710,
	96, 711, 712, 0, 97, 232, 233, 98, 0, 693,
	713, 714, 236, 0, 99, 705, 0, 686, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 311,
	107, 108, 0, 687, 689, 0, 688, 690, 109, 110,
	279, 111, 715, 112, 716, 717, 0, 113, 0, 114,
	0, 0, 0, 708, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 695, 696, 674, 0, 0, 120, 121,
	718, 0, 122, 0, 123, 0, 0, 312, 0, 124,
	706, 0, 246, 0, 125, 126, 127, 128, 702, 704,
	314, 0, 132, 0, 129, 0, 313, 130, 719, 131,
	720, 721, 722, 0, 685, 0, 315, 133, 316, 134,
	135, 0, 137, 136, 0, 707, 317, 138, 318, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 319, 146, 147, 149, 148, 0, 0, 675, 703,
	150, 723, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 320, 156, 321, 697, 157, 158, 159,
	160, 0, 698, 161, 261, 162, 0, 163, 164, 165,
	724, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 322, 180, 181,
	1355, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 691, 192, 183, 184, 193, 323, 194, 725, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 726, 199,
	699, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 727, 728, 0, 0, 208, 700, 701, 673, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 692, 216,
	0, 217, 218, 219, 274, 729, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 0, 0, 678,
	667, 668, 665, 666, 657, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 1354, 92, 0,
	0, 0, 656, 694, 660, 0, 0, 0, 93, 94,
	95, 0, 709, 228, 710, 96, 711, 712, 0, 97,
	232, 233, 98, 663, 693, 713, 714, 236, 0, 99,
	705, 0, 686, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 311, 107, 2095, 0, 687, 689,
	0, 688, 690, 109, 110, 279, 111, 715, 112, 716,
	717, 0, 113, 0, 114, 0, 0, 0, 708, 116,
	0, 117, 0, 0, 0, 651, 118, 119, 695, 696,
	674, 0, 0, 120, 121, 718, 0, 122, 0, 123,
	0, 0, 312, 0, 124, 706, 0, 246, 0, 125,
	126, 127, 128, 702, 704, 0, 0, 132, 0, 129,
	0, 313, 130, 719, 131, 720, 721, 722, 0, 685,
	0, 0, 133, 316, 134, 135, 0, 137, 136, 0,
	707, 317, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 319, 146, 147, 149,
	148, 646, 0, 675, 703, 150, 723, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 320, 156,
	321, 697, 157, 158, 159, 160, 0, 698, 161, 261,
	162, 0, 163, 164, 165, 724, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 322, 180, 181, 652, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 691, 192, 183, 184,
	193, 0, 194, 725, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 726, 199, 699, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 727, 728, 0, 0,
	208, 700, 701, 673, 209, 210, 2094, 212, 0, 0,
	213, 214, 215, 692, 216, 0, 217, 218, 219, 274,
	729, 0, 0, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 678, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 643, 644, 0, 0, 0, 90, 91,
	0, 92, 653, 0, 0, 0, 694, 656, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 693, 234, 235,
	236, 0, 99, 705, 0, 686, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 687, 689, 0, 688, 690, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 695, 696, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 706, 0,
	246, 0, 125, 126, 127, 128, 702, 704, 314, 0,
	132, 0, 129, 0, 313, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 707, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 0, 0, 0, 703, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 697, 157, 158, 159, 160, 0,
	698, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 691,
	192, 183, 184, 193, 323, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 699, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 700, 701, 0, 209, 210, 211,
	212, 550, 0, 213, 214, 215, 692, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 1646, 0, 234, 235, 236,
	0, 99, 237, 0, 310, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 311, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 312, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 314, 0, 132,
	0, 129, 0, 313, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 315, 133, 316, 134, 135, 0, 137,
	136, 0, 254, 317, 138, 318, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 319, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	320, 156, 321, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 322, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 71, 264, 190, 191, 0, 192,
	183, 184, 193, 323, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	73, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	0, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 554, 275, 0, 0, 220, 0, 0, 0, 69,
	221, 222, 223, 224, 0, 70, 550, 787, 0, 897,
	894, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 68, 92, 0, 0, 0, 0,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 310,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 900, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 891, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 314, 0, 132, 0, 129, 0, 313, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 254, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 892, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 323, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	890, 209, 210, 211, 212, 0, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 550, 787,
	220, 897, 894, 889, 0, 221, 222, 223, 224, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	898, 895, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 310, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 311, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	885, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 891,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 312, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 314, 0, 132, 0, 129, 0,
	313, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	315, 133, 316, 134, 135, 0, 137, 136, 0, 254,
	317, 138, 318, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 319, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	892, 0, 154, 0, 0, 155, 258, 320, 156, 321,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 322, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	323, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 890, 209, 210, 211, 212, 0, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	550, 787, 220, 897, 894, 889, 0, 221, 222, 223,
	224, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 898, 895, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 310, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 891, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 314, 0, 132, 0,
	129, 0, 313, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 254, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 892, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 323, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 890, 209, 210, 211, 212, 0,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 87, 0, 220, 0, 0, 0, 0, 221,
	222, 223, 224, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 898, 895, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 503, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 71, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 73, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 554, 275, 0, 0, 220, 87, 0, 0,
	69, 221, 222, 223, 224, 0, 70, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 225, 0, 497, 0, 502, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	71, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 73, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 0, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 554, 275, 0,
	0, 220, 87, 0, 0, 69, 221, 222, 223, 224,
	0, 70, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 225, 0, 0, 0,
	68, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 503, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 0, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 87, 0, 0,
	0, 221, 222, 223, 224, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 225, 0, 497, 0, 502, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 795, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 1149,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 1744, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 0, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 0,
	0, 0, 0, 221, 222, 223, 224, 678, 667, 668,
	665, 666, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 758, 0, 0,
	0, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	709, 228, 710, 96, 711, 712, 0, 97, 232, 233,
	98, 0, 0, 713, 714, 236, 0, 99, 237, 0,
	310, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 311, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 715, 112, 716, 717, 0,
	113, 0, 114, 0, 0, 0, 708, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 674, 0,
	0, 120, 121, 718, 0, 122, 0, 123, 0, 0,
	312, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 314, 0, 132, 0, 129, 0, 313,
	130, 719, 131, 720, 721, 722, 0, 685, 0, 315,
	133, 316, 134, 135, 0, 137, 136, 0, 254, 317,
	138, 318, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 319, 146, 147, 149, 148, 0,
	0, 675, 256, 150, 723, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 320, 156, 321, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 724, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	322, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 323,
	194, 725, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 726, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 727, 728, 0, 0, 208, 272,
	273, 673, 209, 210, 211, 212, 550, 787, 213, 214,
	215, 785, 216, 0, 217, 218, 219, 274, 729, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 310,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 311, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 312,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 314, 0, 132, 0, 129, 0, 313, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 315, 133,
	316, 134, 135, 0, 137, 136, 0, 254, 317, 138,
	318, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 319, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 320, 156, 321, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 322,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 323, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 83, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 82, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 0, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	550, 787, 0, 0, 221, 222, 223, 224, 0, 0,
	0, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 86, 0, 0, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 310, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 311, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 312, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 247, 248, 314, 0, 132, 0,
	129, 0, 313, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 315, 133, 316, 134, 135, 0, 137, 136,
	0, 254, 317, 138, 318, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 319, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 320,
	156, 321, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 322, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 323, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 0, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 550, 220, 0, 0, 0, 0, 221, 222,
	223, 224, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 86, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 310, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 311, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 312, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 314, 0,
	132, 0, 129, 0, 313, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 315, 133, 316, 134, 135, 0,
	137, 136, 0, 254, 317, 138, 318, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 319,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 320, 156, 321, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 322, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 323, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	1106, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 1104, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 1214, 0, 120, 121, 244, 0, 122,
	0, 123, 1109, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	1212, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 1108, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 1213, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 1106,
	99, 237, 0, 0, 1101, 100, 101, 102, 0, 103,
	1104, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 1109, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 1100, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 1108, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	1107, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 1087, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 247, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 247, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 503, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 914, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 247, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	820, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 503,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 562, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 515, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 503, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 508, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 503, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	409, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	236, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 408, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 269, 270,
	271, 0, 0, 208, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 144, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 269, 270, 271,
	0, 0, 208, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 1424, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 1422, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 1411, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 943, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	247, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 423, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 805, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 0, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 99, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 618, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	263, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	191, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	269, 270, 271, 0, 0, 208, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 613, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 159, 160,
	0, 260, 161, 261, 162, 0, 163, 164, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	182, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 87, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 90, 91,
	0, 92, 221, 222, 223, 224, 225, 0, 0, 0,
	0, 93, 94, 95, 226, 227, 228, 229, 96, 230,
	231, 0, 97, 232, 233, 98, 0, 0, 234, 235,
	568, 0, 99, 237, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 279, 111,
	238, 112, 239, 240, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 241, 118,
	119, 242, 243, 0, 0, 0, 120, 121, 244, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 245, 0,
	246, 0, 125, 126, 127, 128, 247, 248, 0, 0,
	132, 0, 129, 0, 0, 130, 249, 131, 250, 251,
	252, 0, 253, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 254, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 255, 435, 0,
	146, 147, 149, 148, 0, 0, 0, 256, 150, 257,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	258, 0, 156, 0, 259, 157, 158, 159, 160, 0,
	260, 161, 261, 162, 0, 163, 164, 165, 262, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 263, 182,
	0, 186, 187, 188, 189, 0, 264, 190, 191, 0,
	192, 183, 184, 193, 0, 194, 265, 266, 195, 0,
	201, 196, 197, 185, 198, 200, 267, 199, 268, 0,
	202, 0, 203, 204, 205, 206, 207, 0, 434, 270,
	271, 0, 0, 430, 272, 273, 0, 209, 210, 211,
	212, 87, 0, 213, 214, 215, 0, 216, 0, 217,
	218, 219, 274, 275, 0, 0, 220, 90, 91, 0,
	92, 221, 222, 223, 224, 225, 0, 0, 0, 0,
	93, 94, 95, 226, 227, 228, 229, 96, 230, 231,
	0, 97, 232, 233, 98, 0, 0, 234, 235, 236,
	0, 99, 237, 0, 0, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 0, 107, 108, 0,
	0, 0, 0, 0, 0, 109, 110, 279, 111, 238,
	112, 239, 240, 0, 113, 0, 114, 0, 0, 0,
	115, 116, 0, 117, 0, 0, 0, 241, 118, 119,
	242, 243, 0, 0, 0, 120, 121, 244, 0, 122,
	0, 123, 0, 0, 0, 0, 124, 245, 0, 246,
	0, 125, 126, 127, 128, 247, 248, 0, 0, 132,
	0, 129, 0, 0, 130, 249, 131, 250, 251, 252,
	0, 253, 0, 0, 133, 0, 134, 135, 0, 137,
	136, 0, 254, 0, 138, 0, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 255, 435, 0, 146,
	147, 149, 148, 0, 0, 0, 256, 150, 257, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 258,
	0, 156, 0, 259, 157, 158, 159, 160, 0, 260,
	161, 261, 162, 0, 163, 164, 165, 262, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 0, 180, 181, 263, 182, 0,
	186, 187, 188, 189, 0, 264, 190, 191, 0, 192,
	183, 184, 193, 0, 194, 265, 266, 195, 0, 201,
	196, 197, 185, 198, 200, 267, 199, 268, 0, 202,
	0, 203, 204, 205, 206, 207, 0, 434, 270, 271,
	0, 0, 430, 272, 273, 0, 209, 210, 211, 212,
	87, 0, 213, 214, 215, 0, 216, 0, 217, 218,
	219, 274, 275, 0, 0, 220, 90, 91, 0, 92,
	221, 222, 223, 224, 225, 0, 0, 0, 0, 93,
	94, 95, 226, 227, 228, 229, 96, 230, 231, 0,
	97, 232, 233, 98, 0, 0, 234, 235, 236, 0,
	99, 237, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 279, 111, 238, 112,
	239, 240, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 241, 118, 119, 242,
	243, 0, 0, 0, 120, 121, 244, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 245, 0, 246, 0,
	125, 126, 127, 128, 546, 248, 0, 0, 132, 0,
	129, 0, 0, 130, 249, 131, 250, 251, 252, 0,
	253, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 254, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 255, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 256, 150, 257, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 258, 0,
	156, 0, 259, 157, 158, 159, 160, 0, 260, 161,
	261, 162, 0, 163, 164, 165, 262, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 263, 182, 0, 186,
	187, 188, 189, 0, 264, 190, 191, 0, 192, 183,
	184, 193, 0, 194, 265, 266, 195, 0, 201, 196,
	197, 185, 198, 200, 267, 199, 268, 0, 202, 0,
	203, 204, 205, 206, 207, 0, 269, 270, 271, 0,
	0, 208, 272, 273, 0, 209, 210, 211, 212, 87,
	0, 213, 214, 215, 0, 216, 0, 217, 218, 219,
	274, 275, 0, 0, 220, 90, 91, 0, 92, 221,
	222, 223, 224, 225, 0, 0, 0, 0, 93, 94,
	95, 226, 227, 228, 229, 96, 230, 231, 0, 97,
	232, 233, 98, 0, 0, 234, 235, 236, 0, 99,
	237, 0, 0, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 0, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 279, 111, 238, 112, 239,
	240, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 241, 118, 119, 242, 243,
	0, 0, 0, 120, 121, 244, 0, 122, 0, 123,
	0, 0, 0, 0, 124, 245, 0, 246, 0, 125,
	126, 127, 128, 543, 248, 0, 0, 132, 0, 129,
	0, 0, 130, 249, 131, 250, 251, 252, 0, 253,
	0, 0, 133, 0, 134, 135, 0, 137, 136, 0,
	254, 0, 138, 0, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 255, 144, 0, 146, 147, 149,
	148, 0, 0, 0, 256, 150, 257, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 258, 0, 156,
	0, 259, 157, 158, 159, 160, 0, 260, 161, 261,
	162, 0, 163, 164, 165, 262, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 0, 180, 181, 263, 182, 0, 186, 187,
	188, 189, 0, 264, 190, 191, 0, 192, 183, 184,
	193, 0, 194, 265, 266, 195, 0, 201, 196, 197,
	185, 198, 200, 267, 199, 268, 0, 202, 0, 203,
	204, 205, 206, 207, 0, 269, 270, 271, 0, 0,
	208, 272, 273, 0, 209, 210, 211, 212, 87, 0,
	213, 214, 215, 0, 216, 0, 217, 218, 219, 274,
	275, 0, 0, 220, 90, 91, 0, 92, 221, 222,
	223, 224, 225, 0, 0, 0, 0, 93, 94, 95,
	226, 227, 228, 229, 96, 230, 231, 0, 97, 232,
	233, 98, 0, 0, 234, 235, 236, 0, 99, 237,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 279, 111, 238, 112, 239, 240,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 241, 118, 119, 242, 243, 0,
	0, 0, 120, 121, 244, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 245, 0, 246, 0, 125, 126,
	127, 128, 540, 248, 0, 0, 132, 0, 129, 0,
	0, 130, 249, 131, 250, 251, 252, 0, 253, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 254,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 255, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 256, 150, 257, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 258, 0, 156, 0,
	259, 157, 158, 159, 160, 0, 260, 161, 261, 162,
	0, 163, 164, 165, 262, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 263, 182, 0, 186, 187, 188,
	189, 0, 264, 190, 191, 0, 192, 183, 184, 193,
	0, 194, 265, 266, 195, 0, 201, 196, 197, 185,
	198, 200, 267, 199, 268, 0, 202, 0, 203, 204,
	205, 206, 207, 0, 269, 270, 271, 0, 0, 208,
	272, 273, 0, 209, 210, 211, 212, 87, 0, 213,
	214, 215, 0, 216, 0, 217, 218, 219, 274, 275,
	0, 0, 220, 90, 91, 0, 92, 221, 222, 223,
	224, 225, 0, 0, 0, 0, 93, 94, 95, 226,
	227, 228, 229, 96, 230, 231, 0, 97, 232, 233,
	98, 0, 0, 234, 235, 236, 0, 99, 237, 0,
	0, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 0, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 279, 111, 238, 112, 239, 240, 0,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 241, 118, 119, 242, 243, 0, 0,
	0, 120, 121, 244, 0, 122, 0, 123, 0, 0,
	0, 0, 124, 245, 0, 246, 0, 125, 126, 127,
	128, 538, 248, 0, 0, 132, 0, 129, 0, 0,
	130, 249, 131, 250, 251, 252, 0, 253, 0, 0,
	133, 0, 134, 135, 0, 137, 136, 0, 254, 0,
	138, 0, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 255, 144, 0, 146, 147, 149, 148, 0,
	0, 0, 256, 150, 257, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 258, 0, 156, 0, 259,
	157, 158, 159, 160, 0, 260, 161, 261, 162, 0,
	163, 164, 165, 262, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	0, 180, 181, 263, 182, 0, 186, 187, 188, 189,
	0, 264, 190, 191, 0, 192, 183, 184, 193, 0,
	194, 265, 266, 195, 0, 201, 196, 197, 185, 198,
	200, 267, 199, 268, 0, 202, 0, 203, 204, 205,
	206, 207, 0, 269, 270, 271, 0, 0, 208, 272,
	273, 0, 209, 210, 211, 212, 87, 0, 213, 214,
	215, 0, 216, 0, 217, 218, 219, 274, 275, 0,
	0, 220, 90, 91, 0, 92, 221, 222, 223, 224,
	225, 0, 0, 0, 0, 93, 94, 95, 226, 227,
	228, 229, 96, 230, 231, 0, 97, 232, 233, 98,
	0, 0, 234, 235, 236, 0, 99, 237, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 279, 111, 238, 112, 239, 240, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 241, 118, 119, 242, 243, 0, 0, 0,
	120, 121, 244, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 245, 0, 246, 0, 125, 126, 127, 128,
	511, 248, 0, 0, 132, 0, 129, 0, 0, 130,
	249, 131, 250, 251, 252, 0, 253, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 254, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 255, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 256, 150, 257, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 258, 0, 156, 0, 259, 157,
	158, 159, 160, 0, 260, 161, 261, 162, 0, 163,
	164, 165, 262, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 263, 182, 0, 186, 187, 188, 189, 0,
	264, 190, 191, 0, 192, 183, 184, 193, 0, 194,
	265, 266, 195, 0, 201, 196, 197, 185, 198, 200,
	267, 199, 268, 0, 202, 0, 203, 204, 205, 206,
	207, 0, 269, 270, 271, 0, 0, 208, 272, 273,
	0, 209, 210, 211, 212, 87, 0, 213, 214, 215,
	0, 216, 0, 217, 218, 219, 274, 275, 0, 0,
	220, 90, 91, 0, 92, 221, 222, 223, 224, 225,
	0, 0, 0, 0, 93, 94, 95, 226, 227, 228,
	229, 96, 230, 231, 0, 97, 232, 233, 98, 0,
	0, 234, 235, 236, 0, 99, 237, 0, 0, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	0, 107, 108, 0, 0, 0, 0, 0, 0, 109,
	110, 279, 111, 238, 112, 239, 240, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 241, 118, 119, 242, 243, 0, 0, 0, 120,
	121, 244, 0, 122, 0, 123, 0, 0, 0, 0,
	124, 245, 0, 246, 0, 125, 126, 127, 128, 247,
	248, 0, 0, 132, 0, 129, 0, 0, 130, 249,
	131, 250, 251, 252, 0, 253, 0, 0, 133, 0,
	134, 135, 0, 137, 136, 0, 254, 0, 138, 0,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	255, 144, 0, 146, 147, 149, 148, 0, 0, 0,
	256, 150, 257, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 258, 0, 156, 0, 259, 157, 158,
	159, 160, 0, 260, 161, 261, 162, 0, 163, 164,
	165, 262, 487, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 0, 180,
	181, 263, 182, 0, 186, 187, 188, 189, 0, 264,
	190, 191, 0, 192, 183, 184, 193, 0, 194, 265,
	266, 195, 0, 201, 196, 197, 185, 198, 200, 267,
	199, 268, 0, 202, 0, 203, 204, 205, 206, 207,
	0, 269, 270, 271, 0, 0, 208, 272, 273, 0,
	209, 210, 211, 212, 87, 0, 213, 214, 215, 0,
	216, 0, 217, 218, 219, 274, 275, 0, 0, 220,
	90, 91, 0, 92, 221, 222, 223, 224, 225, 0,
	0, 0, 0, 93, 94, 95, 226, 227, 228, 229,
	96, 230, 231, 0, 97, 232, 233, 98, 0, 0,
	234, 235, 236, 0, 428, 237, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	279, 111, 238, 112, 239, 240, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	241, 118, 119, 242, 243, 0, 0, 0, 120, 121,
	244, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	245, 0, 246, 0, 125, 126, 127, 128, 247, 248,
	0, 0, 132, 0, 129, 0, 0, 130, 249, 131,
	250, 251, 252, 0, 253, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 254, 0, 138, 0, 0,
	426, 0, 0, 140, 0, 141, 142, 143, 145, 255,
	435, 0, 146, 147, 149, 148, 0, 0, 0, 256,
	150, 257, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 258, 0, 156, 0, 259, 157, 158, 159,
	160, 0, 260, 161, 261, 162, 0, 163, 164, 165,
	262, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	429, 182, 0, 186, 187, 188, 189, 0, 264, 190,
	427, 0, 192, 183, 184, 193, 0, 194, 265, 266,
	195, 0, 201, 196, 197, 185, 198, 200, 267, 199,
	268, 0, 202, 0, 203, 204, 205, 206, 207, 0,
	434, 270, 271, 0, 0, 430, 272, 273, 0, 209,
	210, 211, 212, 87, 0, 213, 214, 215, 0, 216,
	0, 217, 218, 219, 274, 275, 0, 0, 220, 90,
	91, 0, 92, 221, 222, 223, 224, 225, 0, 0,
	0, 0, 93, 94, 95, 226, 227, 228, 229, 96,
	230, 231, 0, 97, 232, 233, 98, 0, 0, 234,
	235, 236, 0, 99, 237, 0, 0, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 0, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 279,
	111, 238, 112, 239, 240, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 241,
	118, 119, 242, 243, 0, 0, 0, 120, 121, 244,
	0, 122, 0, 123, 0, 0, 0, 0, 124, 245,
	0, 246, 0, 125, 126, 127, 128, 247, 248, 0,
	0, 132, 0, 129, 0, 0, 130, 249, 131, 250,
	251, 252, 0, 253, 0, 0, 133, 0, 134, 135,
	0, 137, 136, 0, 254, 0, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 255, 144,
	0, 146, 147, 149, 148, 0, 0, 0, 256, 150,
	257, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 258, 0, 156, 0, 259, 157, 158, 0, 160,
	0, 260, 161, 261, 162, 0, 163, 0, 165, 262,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 0, 180, 181, 263,
	0, 0, 186, 187, 188, 189, 0, 264, 190, 191,
	0, 192, 183, 184, 193, 0, 194, 265, 266, 195,
	0, 201, 196, 197, 185, 198, 200, 267, 199, 268,
	0, 202, 0, 203, 204, 205, 206, 207, 0, 269,
	270, 271, 0, 0, 208, 272, 273, 0, 209, 210,
	211, 212, 0, 0, 213, 214, 215, 0, 216, 0,
	217, 218, 219, 274, 275, 0, 0, 220, 0, 0,
	0, 0, 221, 222, 223, 224, 967, 968, 0, 987,
	988, 989, 997, 998, 999, 0, 0, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 1001, 0, 0, 0, 0, 0, 967, 968,
	0, 987, 988, 989, 997, 998, 999, 0, 0, 0,
	0, 0, 969, 0, 990, 0, 0, 0, 984, 0,
	0, 970, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 967, 968,
	0, 987, 988, 989, 997, 998, 999, 975, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 1001, 0, 994, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 1000, 0, 969, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 992, 0, 0, 0, 994, 1002,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 992, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 994, 1002,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 995, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 995, 0, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 993, 0, 0, 981, 982, 983, 996,
	0, 980, 978, 979, 971, 972, 973, 974, 976, 977,
	986, 0, 0, 0, 0, 0, 0, 1603, 0, 0,
	0, 0, 0, 0, 995, 993, 0, 0, 981, 982,
	983, 996, 0, 980, 978, 979, 971, 972, 973, 974,
	976, 977, 0, 0, 0, 0, 0, 0, 0, 1555,
	0, 0, 0, 0, 0, 0, 967, 968, 0, 987,
	988, 989, 997, 998, 999, 0, 0, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 1001, 0, 0, 993, 0, 0, 981, 982,
	983, 996, 0, 980, 978, 979, 971, 972, 973, 974,
	976, 977, 969, 0, 0, 0, 2040, 0, 984, 0,
	967, 968, 0, 987, 988, 989, 997, 998, 999, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 975, 0, 0,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 992, 0, 0, 0, 0, 0,
	985, 975, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 1002, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 992, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 993, 0, 0, 981, 982, 983, 996,
	0, 980, 978, 979, 971, 972, 973, 974, 976, 977,
	0, 0, 0, 0, 2037, 0, 0, 0, 967, 968,
	0, 987, 988, 989, 997, 998, 999, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 1001, 0, 0, 993, 0, 0,
	981, 982, 983, 996, 0, 980, 978, 979, 971, 972,
	973, 974, 976, 977, 969, 0, 0, 0, 1990, 0,
	984, 0, 967, 968, 0, 987, 988, 989, 997, 998,
	999, 0, 0, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 1001, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 969, 975,
	0, 0, 0, 0, 984, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 1002,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 985, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 1002, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	992, 0, 0, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 995, 0,
	0, 0, 0, 0, 0, 993, 0, 0, 981, 982,
	983, 996, 0, 980, 978, 979, 971, 972, 973, 974,
	976, 977, 0, 0, 0, 0, 1985, 0, 0, 0,
	967, 968, 0, 987, 988, 989, 997, 998, 999, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 1001, 0, 0, 993,
	0, 0, 981, 982, 983, 996, 0, 980, 978, 979,
	971, 972, 973, 974, 976, 977, 969, 0, 0, 0,
	1981, 0, 984, 0, 967, 968, 0, 987, 988, 989,
	997, 998, 999, 0, 0, 0, 0, 0, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	1001, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	969, 975, 0, 0, 0, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 1002, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 992, 0,
	0, 0, 0, 0, 985, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 1002, 0, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 992, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 991, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 993, 0, 0,
	981, 982, 983, 996, 0, 980, 978, 979, 971, 972,
	973, 974, 976, 977, 0, 0, 0, 0, 1938, 0,
	0, 0, 967, 968, 0, 987, 988, 989, 997, 998,
	999, 0, 0, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 1001, 0,
	0, 993, 0, 0, 981, 982, 983, 996, 0, 980,
	978, 979, 971, 972, 973, 974, 976, 977, 969, 0,
	0, 0, 1911, 0, 984, 0, 967, 968, 0, 987,
	988, 989, 997, 998, 999, 0, 0, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 969, 975, 0, 0, 0, 0, 984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 994, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	992, 0, 0, 0, 0, 0, 985, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 1002, 0, 0,
	0, 991, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 992, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 995, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 993,
	0, 0, 981, 982, 983, 996, 0, 980, 978, 979,
	971, 972, 973, 974, 976, 977, 0, 0, 0, 0,
	1910, 0, 0, 0, 967, 968, 0, 987, 988, 989,
	997, 998, 999, 0, 0, 0, 0, 0, 0, 0,
	990, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	1001, 0, 0, 993, 0, 0, 981, 982, 983, 996,
	0, 980, 978, 979, 971, 972, 973, 974, 976, 977,
	969, 0, 0, 0, 1824, 0, 984, 0, 967, 968,
	0, 987, 988, 989, 997, 998, 999, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 975, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 994, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 992, 0, 0, 0, 0, 0, 985, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 1002,
	0, 0, 0, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 995, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 981, 982, 983, 996, 0, 980,
	978, 979, 971, 972, 973, 974, 976, 977, 0, 0,
	0, 0, 1747, 0, 0, 0, 967, 968, 0, 987,
	988, 989, 997, 998, 999, 0, 0, 0, 0, 0,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 1001, 0, 0, 993, 0, 0, 981, 982,
	983, 996, 0, 980, 978, 979, 971, 972, 973, 974,
	976, 977, 969, 0, 0, 0, 1731, 0, 984, 0,
	967, 968, 0, 987, 988, 989, 997, 998, 999, 0,
	0, 0, 0, 0, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 970, 0, 0, 1001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 975, 0, 0,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 994, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 992, 0, 0, 0, 0, 0,
	985, 975, 2115, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	994, 1002, 0, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 992, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 995, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 995, 0, 0, 0,
	0, 0, 0, 993, 0, 0, 981, 982, 983, 996,
	0, 980, 978, 979, 971, 972, 973, 974, 976, 977,
	0, 0, 0, 0, 1309, 0, 0, 0, 967, 968,
	0, 987, 988, 989, 997, 998, 999, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 1001, 0, 0, 993, 0, 0,
	981, 982, 983, 996, 0, 980, 978, 979, 971, 972,
	973, 974, 976, 977, 969, 0, 0, 0, 967, 968,
	984, 987, 988, 989, 997, 998, 999, 0, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 1230,
	0, 970, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 969, 0, 0, 0, 0, 975,
	984, 1595, 0, 0, 1594, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 1002,
	0, 0, 0, 0, 0, 0, 0, 0, 1231, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 975,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 994, 1002,
	0, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 992, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 991, 0, 0,
	0, 0, 0, 0, 995, 0, 1005, 0, 0, 0,
	0, 0, 967, 968, 0, 987, 988, 989, 997, 998,
	999, 0, 0, 0, 0, 0, 0, 0, 990, 0,
	0, 0, 1004, 0, 0, 970, 0, 0, 1001, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 995, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 984, 993, 0, 0, 981, 982,
	983, 996, 0, 980, 978, 979, 971, 972, 973, 974,
	976, 977, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 975, 0, 993, 0, 0, 981, 982,
	983, 996, 0, 980, 978, 979, 971, 972, 973, 974,
	976, 977, 994, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 967,
	968, 0, 987, 988, 989, 997, 998, 999, 0, 0,
	992, 0, 0, 0, 0, 990, 985, 0, 0, 0,
	0, 0, 970, 0, 0, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 984, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 995, 0,
	975, 0, 967, 968, 0, 987, 988, 989, 997, 998,
	999, 0, 0, 0, 0, 0, 0, 0, 990, 994,
	1002, 0, 0, 0, 0, 970, 0, 0, 1001, 0,
	0, 0, 0, 0, 0, 1000, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 992, 969, 0,
	0, 0, 0, 985, 984, 0, 0, 0, 0, 993,
	0, 0, 981, 982, 983, 996, 0, 980, 978, 979,
	971, 972, 973, 974, 976, 977, 0, 0, 991, 482,
	0, 0, 0, 0, 0, 846, 838, 863, 831, 854,
	853, 0, 0, 833, 832, 0, 0, 0, 865, 864,
	0, 0, 0, 975, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 986, 994, 1002, 0, 0, 0, 0, 0, 0,
	859, 0, 851, 850, 0, 995, 0, 0, 1000, 967,
	968, 849, 987, 988, 989, 997, 998, 999, 0, 0,
	992, 0, 0, 0, 0, 990, 985, 0, 848, 0,
	0, 0, 970, 0, 0, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 969, 841, 840, 842, 843,
	844, 984, 862, 0, 0, 0, 993, 0, 0, 981,
	982, 983, 996, 0, 980, 978, 979, 971, 972, 973,
	974, 976, 977, 0, 0, 0, 0, 835, 0, 0,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 852,
	0, 0, 0, 839, 0, 0, 0, 0, 995, 0,
	975, 0, 0, 0, 0, 1601, 967, 968, 0, 987,
	988, 989, 997, 998, 999, 0, 0, 0, 847, 994,
	1002, 1735, 990, 0, 0, 0, 1596, 0, 0, 970,
	0, 0, 1001, 0, 0, 1000, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 836, 992, 0, 0,
	0, 0, 969, 985, 0, 0, 845, 837, 984, 993,
	0, 0, 981, 982, 983, 996, 867, 980, 978, 979,
	971, 972, 973, 974, 976, 977, 834, 0, 991, 860,
	861, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 866, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 994, 1002, 0, 0,
	0, 0, 0, 0, 0, 995, 0, 0, 0, 0,
	0, 0, 1000, 967, 968, 0, 987, 988, 989, 997,
	998, 999, 0, 0, 992, 0, 0, 0, 0, 990,
	985, 0, 0, 0, 0, 0, 970, 0, 0, 1001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 0, 969,
	0, 0, 0, 0, 0, 984, 993, 0, 0, 981,
	982, 983, 996, 0, 980, 978, 979, 971, 972, 973,
	974, 976, 977, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 995, 0, 975, 0, 967, 968, 0, 987,
	988, 989, 997, 998, 999, 0, 0, 0, 0, 0,
	0, 0, 990, 994, 1002, 0, 1554, 0, 0, 970,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 1000,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 992, 969, 0, 0, 0, 0, 985, 984, 0,
	0, 0, 0, 993, 0, 0, 981, 982, 983, 996,
	0, 980, 978, 979, 971, 972, 973, 974, 976, 977,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1561, 0, 0, 0, 967, 968,
	0, 987, 988, 989, 997, 998, 999, 975, 0, 0,
	0, 0, 0, 0, 990, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 1001, 986, 994, 1002, 0, 0,
	967, 968, 0, 987, 988, 989, 997, 998, 999, 995,
	0, 0, 1000, 0, 969, 0, 990, 0, 0, 0,
	984, 0, 0, 970, 992, 0, 1001, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 984, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	993, 0, 0, 981, 982, 983, 996, 0, 980, 978,
	979, 971, 972, 973, 974, 976, 977, 0, 994, 1002,
	0, 0, 0, 0, 0, 0, 0, 0, 986, 0,
	0, 975, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 0, 995, 0, 0, 0, 992, 0, 0, 0,
	994, 1002, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 991, 992, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 993, 0, 0, 981, 982, 983, 996,
	0, 980, 978, 979, 971, 972, 973, 974, 976, 977,
	986, 0, 0, 0, 967, 968, 0, 987, 988, 989,
	997, 998, 999, 0, 995, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	1001, 0, 986, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 995, 967, 968, 0,
	969, 0, 0, 997, 998, 999, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 1001, 0, 993, 0, 0, 981, 982,
	983, 996, 0, 980, 978, 979, 971, 972, 973, 974,
	976, 977, 0, 969, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 975, 0, 993, 0, 0,
	981, 982, 983, 996, 0, 980, 978, 979, 971, 972,
	973, 974, 976, 977, 994, 1002, 0, 967, 968, 0,
	987, 988, 989, 997, 998, 999, 0, 0, 0, 0,
	1000, 0, 0, 0, 0, 0, 0, 0, 975, 0,
	970, 0, 992, 1001, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 0, 0, 0, 994, 1002, 0,
	0, 0, 0, 969, 0, 0, 0, 0, 0, 984,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 992, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 986, 0, 975, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	995, 0, 0, 0, 0, 0, 0, 994, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 986,
	0, 0, 0, 0, 0, 992, 0, 0, 0, 0,
	0, 985, 0, 995, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 993, 0, 0, 981, 982, 983, 996, 0, 980,
	978, 979, 971, 972, 973, 974, 976, 977, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 993, 0, 0, 0, 0, 986,
	996, 0, 980, 978, 979, 971, 972, 973, 974, 976,
	977, 0, 0, 995, 0, 0, 0, 0, 0, 846,
	838, 863, 831, 854, 853, 0, 0, 833, 832, 0,
	0, 0, 865, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 859, 0, 851, 850, 0, 0,
	0, 0, 0, 0, 993, 849, 0, 981, 982, 983,
	996, 0, 980, 978, 979, 971, 972, 973, 974, 976,
	977, 0, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	841, 840, 842, 843, 844, 0, 862, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 835, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 852, 0, 0, 0, 839, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 0, 0, 0, 1243, 1241, 1242, 1245,
	1244, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	845, 837, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 860, 861, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 866,
}
var sqlPact = [...]int{

	3748, -1000, 34, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 764, 16161, 16161, 20097, -1000, -1000, -1000, -1000, -1000,
	-1000, 645, 756, 590, 5503, 20097, 20097, 19818, 1397, 1397,
	21492, -1000, -1000, 24840, -1000, 3487, 474, 482, 474, 474,
	514, 21492, 20097, 584, 791, 148, -1000, 752, 8, 24561,
	20097, 1377, 31, 14168, 282, 3748, 19539, 24282, 20097, 19260,
	553, 19, 16735, 20097, -1000, 36, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1203, 374, 36, -1000,
	1199, 1107, 1081, 18144, 24003, 23724, 23445, 23166, -1000, 12397,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 747, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 288, 287, -1000, 18981, -1000,
	959, -1000, 23, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 953, -1000, 20097, -1000, -1000, 22887, 22608, 650, 285,
	824, -1000, -1000, 550, 376, 1404, -1000, 44, -1000, 1387,
	643, -1000, 1197, -1000, 948, 1196, 1194, 1191, 1190, 1189,
	1187, 375, 703, 459, -1000, 1186, 824, -1000, 824, -1000,
	-1000, -1000, 552, 21492, -1000, -1000, 18144, -1000, 22329, 20097,
	20097, 1124, 22050, -1000, 752, -1000, -1000, -1000, 992, 1368,
	1368, 1368, 1411, 154, 120, 148, -16, 20097, -1000, 284,
	-16, 9297, 9297, -1000, -1000, 282, 1276, 1332, -159, 159,
	364, -1000, 13578, 15300, -1000, 8349, -1000, 918, 1283, 427,
	620, 1281, -133, 741, 734, 1280, 335, 15882, 16735, 19,
	13, -1000, -1000, -1000, 5200, 15882, 618, 14463, 36, -1000,
	-1000, -1000, 18144, 20097, 20097, 660, 21771, -1000, 1279, 133,
	1277, -1000, 123, 1265, -1000, 123, 1264, 32, -1000, -1000,
	-1000, -1000, -1000, -1000, 282, 18702, 20097, 1465, 28248, -1000,
	10562, -1000, -1000, 16161, 1720, 16161, -1000, -1000, 1452, -1000,
	20097, 10562, -1000, 0, -4, 1061, 1046, 12994, 12702, 1340,
	1078, -1000, -1000, -1000, 43, 5503, 641, 18423, 20097, 1221,
	16161, 20097, 20097, 20097, 20097, 20097, 20097, -1000, 1058, -1000,
	-1000, 20097, 20097, 746, -1000, -8, -14, -1000, 21492, -1000,
	143, -1000, 281, 1025, 385, 86, 21213, 385, 1024, -1000,
	992, -1000, 905, 1053, 9614, 10562, 148, -1000, -1000, 148,
	148, 10562, -1000, -1000, 20097, -16, 1448, 20097, 146, -1000,
	27952, -1000, -1000, 10562, 10562, 10562, 10562, 10562, 831, 325,
	-1000, 279, 275, 6123, -1000, -1000, 1596, -1000, -1000, -1000,
	125, -1000, -1000, 10562, 36, -1000, -1000, -1000, -1000, 274,
	1626, -1000, 439, -1000, -1000, -1000, 380, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1220, 272, 271, -1000,
	-1000, -1000, -1000, 269, 268, 267, 266, 265, 262, 261,
	260, 258, 257, 255, 247, 246, 244, 243, 757, -1000,
	417, -1000, -1000, 417, 417, -1000, 236, 236, 237, -1000,
	-1000, -1000, -1000, 236, -1000, -1000, -1000, 365, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 239, 146, -1000, 1088, 1079,
	14168, 1010, 866, 866, 866, -1000, 238, 132, 364, 4580,
	10562, -1000, 17865, 876, 63, 121, 1276, -1000, 20097, 30,
	-1000, 28768, -1000, -32, 733, -1000, 17586, 1379, 1357, 1359,
	18144, 1423, 8, 1184, 1415, 8, 1183, 549, 20097, 20097,
	547, 545, 18144, 362, -1000, -1000, -1000, -1000, -1000, 20097,
	-1000, -1000, -24, -1000, -1000, 1182, 28, -1000, -1000, 402,
	116, 1447, 116, 14742, -1000, 20097, 20097, -1000, 20097, -1000,
	-1000, 20097, -1000, 20097, 20097, -1000, 20097, 129, 17028, 740,
	1257, 639, 8, 24, -1000, 1468, -1000, -1000, -1000, -1000,
	98, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 237, 757,
	236, 236, 236, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	365, -1000, -1000, 417, 417, 417, -1000, -1000, 20, 28768,
	543, -1000, 1177, 464, -1000, 395, 18, 749, 1093, 890,
	-1000, -1000, -1000, -1000, -18, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1620, -1000, -1000, 1594, -18,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1624,
	5503, -1000, -1000, -1000, -1000, -1000, -1000, 20097, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 20097, 20097,
	749, 1093, -1000, -1000, 18144, 17307, 1442, 1256, 808, -1000,
	1439, 20097, 938, 1019, -1000, 564, 1251, -1000, -1000, -1000,
	-1000, 28768, -1000, 28768, 678, 1113, -1000, 1113, -20, -1000,
	27758, -1000, 231, 14, 402, 9297, 14168, 29332, 28248, 20097,
	567, 10562, 10562, 10562, 10562, 10562, 10562, 10562, 10562, 10562,
	10562, 10562, 10562, 10562, 10562, 10562, 10562, 10562, 10562, 10562,
	10562, 10562, 10562, 1048, 10562, 542, 10562, 10562, 10562, 10562,
	1605, 858, 200, 877, 5503, -1000, -1000, 1615, 1615, 1615,
	28994, 28994, 250, 325, -1000, 10562, -1000, 8981, 120, 27386,
	-22, -1000, -1000, -1000, 7072, 410, 28768, 36, 5806, -1000,
	1586, 702, 1227, 1149, 230, 119, 118, 10562, 10562, 10878,
	10878, 10562, 11194, 10562, 10562, 6439, 10562, 10562, 10562, 10562,
	10562, 10562, -1000, 227, -1000, -1000, -1000, -1000, 1582, -1000,
	-1000, 1578, -1000, 562, 561, 1550, 402, 14168, 14168, 964,
	1057, 14168, -1000, -1000, -1000, -1000, 17865, 363, 305, 12397,
	17865, -1000, 1545, 1072, 12, -1000, -1000, 20097, 224, -1000,
	364, 117, 8349, -1000, 740, 20097, 20097, 20097, -1000, -1000,
	1014, 20934, 1011, 28248, 20097, -1000, 213, 208, 1076, 1075,
	20097, 20097, 20655, 20376, 20097, 873, 8, -1000, 207, 8,
	-1000, 205, 20097, 716, -1000, 20097, 20097, 715, 1137, 965,
	-1000, 386, 15882, 610, 1173, 20097, 708, 10562, 769, -1000,
	13873, 423, 20097, 708, 85, -1000, -1000, -1000, 355, 20097,
	-1000, -1000, -1000, 133, -1000, 123, 123, -1000, -1000, 18144,
	-1000, -1000, -1000, -1000, -1000, -1000, 28248, 311, 309, -1000,
	1543, 541, -1000, 530, 529, 527, -1000, 204, -1000, 10562,
	20097, 20097, 1093, -1000, -1000, -1000, -1000, 672, -1000, 759,
	-1000, 13286, -1000, -1000, -1000, -1000, -38, -1000, -1000, -1000,
	-1000, -1000, -1000, 113, 10, -26, 28248, -1000, -1000, -1000,
	-1000, -1000, 20097, 343, 20097, 8, 20097, -1000, 1610, 8,
	20097, 1248, 1293, 345, 20097, -1000, -1000, -1000, 10562, -1000,
	-1000, -1000, 8, -1000, 1145, -1000, -114, 1276, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 371, 748,
	748, 519, 519, 519, 519, 1589, 2136, 2582, 2524, 29037,
	29037, 29037, 1085, 422, 422, 29037, 29037, 29037, 28994, 28800,
	226, 10562, 10562, 526, 843, 200, 226, 10562, 226, 226,
	226, 226, -1000, 929, -1000, -1000, -1000, -1000, 1172, 197,
	11194, 11194, -1000, -1000, -1000, 6123, 11510, -1000, -1000, -1000,
	-1000, -1000, 196, 10562, -1000, 2873, -178, 5, -1000, -1000,
	10562, -1, -98, -1000, -1000, 621, -1000, 10562, -1000, 1,
	10562, 10562, 10562, 111, 110, -1000, 836, 195, 194, 10562,
	-1000, -1000, 28676, 25448, 108, 1171, -122, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 107, 102, 28573, -122, 101, 2766,
	-1000, 11194, 11194, 11194, 6123, 193, 100, 27708, -122, 28436,
	8665, 8665, 8665, 99, 28329, 10562, -122, 25416, 3614, 3577,
	-7, -9, -25, 1535, -27, 94, 369, 368, 93, 1145,
	-1000, 964, -1000, 192, 10562, 14168, -1000, 304, -1000, -31,
	-1000, 364, -33, -1000, 297, -175, -1000, 348, -1000, 364,
	190, 20097, 17865, -1000, -1000, -1000, -1000, 525, 511, 1246,
	-1000, 998, -1000, 432, -1000, 737, 10562, 12118, 189, 188,
	818, -1000, 1244, 901, 1241, 901, -1000, -32, 730, -1000,
	10562, -1000, 10562, -1000, 510, -1000, -1000, 503, 386, 1170,
	586, -1000, 903, -1000, -1000, 593, -1000, -1000, 6755, 28768,
	-1000, 708, 1362, -37, -1000, -1000, -1000, 402, 14742, 14168,
	8349, -39, -1000, -1000, -1000, 740, -1000, 507, 1532, 92,
	1001, 781, 786, 669, 1520, 28768, -38, -38, -1000, -1000,
	-1000, -1000, -1000, 20097, 1128, -1000, 17307, 186, 20097, 184,
	-1000, 182, -1000, -1000, 181, 20097, 1060, 345, 16456, -1000,
	385, -1000, 91, 1142, 1410, -1000, 14168, 10562, 226, 226,
	10562, 11194, 11194, -1000, 226, -1000, -1000, -1000, -1000, -1000,
	1167, 180, 10562, 28248, 3811, 3774, -44, -1000, 8033, -52,
	-1000, 10562, -1000, 27118, -1000, -1000, 228, 1287, -1000, 10562,
	28192, 89, 7717, -1000, 28089, -19, -19, -1000, 1606, -1000,
	15021, 405, 897, 27064, 29332, 28248, -1000, 10562, -1000, -1000,
	1166, 10562, -1000, 29332, 28248, 11194, 11194, 11194, 11194, 11194,
	11194, 11194, 11194, 11194, 11194, 11194, 11194, 11194, 11194, 11194,
	11194, 11194, 11194, 11194, 1063, 11194, 1608, 1608, 1608, -53,
	7401, -1000, 1207, 1166, 10562, 10562, 28248, 87, 84, 80,
	-1000, 10562, -122, 10562, 10562, 10562, -1000, -1000, -1000, 78,
	-1000, 1515, -1000, -1000, -1000, -1000, 1142, -1000, 20097, 28768,
	-1000, -159, -1000, 1513, 17865, 129, -1000, 1072, -1000, 4894,
	17865, 20097, -45, -1000, 20097, 20097, 20097, 1238, -1000, 2176,
	-1000, 26796, -54, -1000, 312, 1372, 10562, -1000, -1000, 178,
	12118, 20097, -1000, 1083, 1125, 468, 20097, -1000, 20097, -1000,
	20097, 20097, 20097, -55, -56, 20097, 20097, -1000, 15882, 522,
	177, -1000, -63, -1000, -1000, 223, 8, 708, -1000, -73,
	-1000, 347, -1000, 296, 295, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 77, -1000, -1000, 1130, -1000, 12118, 176,
	20097, 17307, 1432, 12118, 935, 1067, 345, 16456, -1000, 564,
	-1000, 388, 10562, 10562, 1276, 1554, 226, 3135, 2551, 10562,
	28248, 29117, -61, 10562, 10562, -1000, -62, -1000, 10562, 293,
	28768, -1000, -1000, -1000, 28768, 10562, 1556, 10562, 76, 74,
	73, -1000, -1000, -1000, 25119, 10562, 71, -1000, 70, 66,
	28768, 1207, 28768, -1000, -1000, 377, 377, 642, 642, 642,
	642, 1608, 2821, 3023, 2087, 1052, 1052, 1052, 1992, 489,
	489, 1052, 1052, 1052, 1161, 1069, 175, 3718, 10562, -68,
	-1000, -1000, -1000, 28768, 28768, 61, -1000, -1000, -1000, -122,
	150, 26742, 26474, -1000, 58, 388, -74, 364, -1000, -1000,
	292, -1000, -1000, 1511, -1000, -76, -1000, -1000, -1000, -1000,
	20097, -1000, 20097, -1000, 20097, 20097, 1157, 989, -1000, -1000,
	1074, 171, 11194, 20097, -1000, 815, 12118, 1361, 36, 20097,
	1361, 26420, 5806, -80, -81, 984, -1000, 981, 10562, -1000,
	28248, 901, 901, -1000, 497, 494, 491, 487, -1000, -1000,
	-89, 15603, 1604, 1284, 20097, 1349, -1000, -1000, 170, -1000,
	-1000, -1000, 826, -82, 12118, -87, 56, 8, -88, 20097,
	-1000, 345, 16456, -1000, 1293, -1000, 20097, 28768, -122, 10562,
	10562, 29117, -93, -1000, 226, 226, -1000, 26152, -1000, 28768,
	-1000, 28089, -1000, -1000, -1000, 825, -1000, 26098, -1000, -1000,
	-1000, -1000, 11194, 1160, 169, 28248, 25830, -1000, -1000, 10562,
	-1000, -1000, -1000, -1000, -1000, 17865, 364, 290, -1000, -1000,
	1056, -1000, -1000, 20097, 997, -1000, -1000, 10562, 3718, 168,
	1128, 167, -1000, -1000, -1000, -1000, -1000, -1000, 1372, 1,
	-1000, 736, -1000, -1000, 28768, 1370, -1000, -1000, 20097, 20097,
	164, 162, -1000, 160, 36, -99, -1000, 344, 559, -101,
	20097, -1000, -1000, 4191, 20097, 815, -106, -1000, 1128, -1000,
	815, 158, 16456, -1000, 1060, -120, -1000, 1430, 226, 226,
	-1000, -1000, 55, 897, 1406, -1000, 3848, 11194, 28248, -112,
	-1000, 25776, -1000, 17865, -1000, -1000, -1000, 1237, 25508, 1038,
	20097, -1000, 20097, 1361, 52, 20097, 435, 20097, -1000, -1000,
	10562, 10562, 10562, 1604, -1000, -1000, 1602, 646, -1000, 402,
	-1000, 126, 1128, 815, -1000, 1128, 12118, -1000, 1067, 20097,
	124, -1000, 706, 10562, 3848, -113, -1000, -1000, -1000, 1230,
	-1000, 908, 879, 50, -135, -1000, -1000, 86, -1000, 10562,
	-1000, -139, -143, -19, -1000, -1000, 14742, -1000, 20097, -1000,
	1128, -1000, -144, -1000, -1000, -1000, 48, 10246, 10246, -122,
	-1000, 20097, -1000, 915, 912, 637, -1000, -1000, -1000, -1000,
	-1000, 1038, 28768, -1000, -1000, 47, -123, -149, -1000, 815,
	-1000, -1000, -1000, 11815, 952, 697, 27440, -1000, -1000, -1000,
	1305, -1000, 446, 1029, 1029, 908, 1556, -1000, 899, 1128,
	1476, -1000, -1000, -1000, -1000, -1000, -1000, 1487, -1000, -1000,
	1070, -1000, -1000, -1000, -1000, -1000, -1000, 9930, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1878, 1877, 1416, 1559, 1875, 1874, 1487, 1872, 1870,
	1868, 1867, 1866, 1861, 98, 1480, 1475, 58, 1473, 1860,
	83, 1855, 1853, 1849, 96, 1848, 1846, 1845, 1843, 127,
	1842, 1841, 1470, 1452, 1445, 1429, 1837, 1836, 93, 1835,
	16, 1832, 70, 1831, 36, 147, 2727, 138, 1830, 1829,
	1828, 19, 90, 65, 1826, 74, 1822, 1821, 39, 31,
	21, 14, 1819, 125, 124, 1608, 28, 1818, 1816, 143,
	1815, 17, 26, 34, 146, 141, 136, 113, 1813, 1812,
	1811, 1810, 50, 1808, 3, 1807, 1806, 12, 61, 8,
	1803, 46, 42, 1802, 1801, 120, 1800, 66, 92, 1436,
	41, 109, 1208, 1799, 67, 13, 71, 1798, 1797, 121,
	30, 1796, 32, 78, 134, 1794, 54, 158, 133, 75,
	119, 95, 1793, 1792, 1791, 77, 1790, 100, 63, 1782,
	1778, 72, 1777, 122, 131, 1774, 1771, 115, 1770, 1768,
	140, 153, 1767, 1766, 151, 1765, 9, 29, 60, 5,
	1410, 1398, 101, 62, 55, 52, 1764, 1976, 860, 762,
	33, 81, 56, 43, 82, 59, 53, 137, 20, 1763,
	1762, 104, 1761, 1760, 1759, 1758, 1757, 79, 1756, 1755,
	64, 132, 76, 27, 22, 85, 37, 80, 148, 130,
	145, 107, 1754, 88, 110, 102, 175, 1751, 1737, 1483,
	106, 1735, 1734, 1727, 1295, 1090, 951, 68, 1726, 1722,
	381, 220, 1719, 1718, 57, 1717, 149, 1715, 1712, 142,
	135, 51, 1711, 103, 25, 89, 1707, 87, 40, 0,
	194, 117, 1706, 116, 73, 1705, 1703, 1702, 1698, 23,
	2, 10, 6, 7, 4, 49, 24, 1690, 1689, 118,
	47, 44, 1667, 150, 1664, 1663, 1660, 38, 1657, 18,
	1653, 15, 1648, 1646, 11, 1, 1644, 1640, 144, 1639,
	86, 1638, 1464, 1637, 139, 1620, 1613, 1538, 35, 84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 18, 269,
	269, 271, 271, 33, 33, 34, 34, 35, 35, 35,
	35, 10, 10, 11, 11, 82, 82, 83, 83, 148,
	148, 148, 148, 84, 84, 56, 56, 56, 147, 237,
	237, 238, 238, 238, 238, 238, 238, 239, 239, 239,
	239, 239, 239, 239, 235, 235, 236, 233, 233, 234,
	234, 234, 234, 275, 275, 146, 146, 87, 87, 242,
	242, 242, 242, 240, 240, 240, 240, 240, 243, 241,
	244, 244, 244, 244, 244, 181, 181, 181, 37, 12,
	62, 62, 13, 9, 9, 130, 130, 91, 91, 186,
	186, 186, 72, 72, 51, 51, 51, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 131, 131,
	132, 132, 25, 30, 36, 36, 36, 36, 36, 277,
	277, 68, 68, 68, 68, 69, 69, 144, 144, 144,
	144, 144, 63, 8, 8, 58, 58, 59, 59, 60,
	60, 61, 61, 278, 278, 24, 24, 24, 75, 75,
	137, 137, 137, 139, 139, 138, 138, 138, 116, 116,
	116, 38, 96, 96, 105, 105, 106, 106, 192, 107,
	107, 29, 29, 46, 46, 44, 44, 44, 44, 44,
	44, 45, 45, 47, 47, 47, 47, 47, 47, 47,
	250, 250, 250, 253, 253, 249, 251, 251, 252, 252,
	276, 276, 117, 117, 117, 86, 85, 85, 89, 89,
	88, 90, 90, 185, 114, 114, 114, 114, 133, 134,
	134, 135, 135, 136, 136, 113, 113, 165, 165, 48,
	48, 95, 95, 97, 97, 155, 155, 155, 156, 156,
	154, 154, 154, 154, 187, 187, 187, 187, 187, 187,
	187, 187, 266, 266, 266, 267, 267, 184, 184, 188,
	188, 188, 188, 188, 188, 182, 182, 182, 182, 183,
	183, 193, 193, 120, 120, 120, 120, 118, 118, 119,
	119, 189, 189, 189, 189, 115, 115, 190, 190, 190,
	149, 149, 196, 196, 196, 214, 214, 94, 94, 94,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 198, 198, 198, 198,
	200, 200, 200, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 213, 213, 213,
	213, 213, 201, 201, 208, 208, 209, 209, 210, 211,
	202, 202, 203, 203, 204, 205, 212, 212, 212, 212,
	216, 216, 206, 206, 206, 206, 206, 207, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 128, 128, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 159, 159, 159, 159,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
	161, 245, 245, 245, 245, 245, 245, 245, 247, 247,
	248, 248, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 254,
	254, 255, 255, 257, 257, 258, 258, 259, 260, 260,
	260, 261, 262, 262, 256, 256, 263, 263, 263, 264,
	264, 265, 265, 265, 265, 265, 171, 171, 171, 172,
	172, 173, 179, 179, 179, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 70, 70, 70, 70, 70, 102, 102, 168, 168,
	166, 166, 166, 170, 170, 121, 121, 215, 215, 215,
	215, 215, 215, 215, 122, 122, 122, 129, 123, 123,
	124, 124, 124, 124, 124, 124, 162, 163, 125, 125,
	125, 164, 164, 174, 178, 178, 177, 176, 176, 175,
	175, 152, 152, 153, 153, 151, 150, 110, 110, 109,
	109, 108, 108, 279, 279, 180, 180, 111, 111, 112,
	104, 104, 191, 191, 191, 191, 98, 98, 77, 77,
	99, 99, 73, 73, 76, 76, 74, 74, 74, 74,
	92, 92, 93, 93, 71, 71, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 160, 160, 217, 217, 217,
	167, 65, 65, 65, 66, 66, 67, 67, 222, 222,
	222, 223, 223, 223, 223, 221, 221, 221, 221, 221,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 4, 4, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 3, 4, 4, 2, 5, 5, 2, 2,
	0, 2, 0, 6, 6, 5, 5, 4, 12, 4,
	12, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 7, 6, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 2, 2, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	3, 3, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 1, 5,
	6, 9, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 5, 2,
	1, 1, 1, 1, 4, 1, 2, 2, 1, 1,
	1, 0, 1, 1, 4, 1, 4, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 3, 4, 3, 4, 4,
	5, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 223, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 102, 124, 205, 101, 87, 118, 226,
	233, -44, -46, 242, -145, 245, 35, 254, 60, 97,
	228, 221, 222, 279, 68, -250, -47, -45, 327, 302,
	308, 237, -48, 263, 294, 330, 263, 133, 80, 297,
	-268, -99, 263, 80, -74, -65, 320, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	108, 109, 112, 114, 119, 124, 125, 126, 127, 134,
	137, 139, 132, 147, 149, 150, 153, 152, 157, 160,
	163, 165, 166, 167, 170, 168, 172, 173, 175, 174,
	180, 182, 183, 185, 188, 191, 194, 197, 198, 199,
	200, 203, 205, 207, 208, 209, 211, 212, 214, 215,
	216, 217, 218, 221, 219, 220, 222, 223, 224, 226,
	228, 229, 231, 243, 244, 255, 233, 234, 235, 236,
	239, 240, 242, 245, 247, 250, 253, 254, 256, 259,
	257, 252, 262, 264, 265, 266, 267, 268, 275, 279,
	280, 281, 282, 285, 286, 287, 289, 291, 292, 293,
	298, 303, 304, 305, 306, 28, 36, 37, 38, 39,
	41, 42, 45, 46, 50, 51, 52, 55, 82, 84,
	85, 100, 103, 104, 110, 120, 122, 128, 129, 138,
	140, 141, 142, 144, 155, 169, 179, 181, 192, 196,
	202, 204, 210, 230, 238, 248, 249, 258, 260, 270,
	271, 272, 276, 277, 294, 295, -268, -73, -65, 80,
	89, 137, 287, 286, 80, 133, 263, 297, -17, 327,
	-29, -7, -15, -4, -24, -38, -14, -32, -18, -33,
	-34, -35, -16, 23, -221, 4, -229, -231, -230, -232,
	57, 69, 117, 136, 130, 146, 148, 156, 158, 171,
	193, 195, 227, 246, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 48, 49, 53, 56, 58, 64,
	68, 72, 73, 74, 75, 76, 77, 86, 88, 90,
	91, 92, 95, 97, 99, 105, 106, 107, 113, 115,
	116, 118, 121, 123, 131, 133, 135, 143, 145, 151,
	154, 159, 161, 162, 176, 177, 178, 184, 186, 187,
	189, 190, 201, 206, 213, 225, 237, 241, 251, 261,
	263, 269, 273, 274, 278, 283, 284, 288, 290, 296,
	297, 299, 300, 301, 302, -65, -65, -65, 205, 22,
	-272, 22, -273, -274, 68, 94, 118, 237, 137, 89,
	286, -272, -69, 233, -65, -141, 160, 240, 54, 230,
	275, -142, -140, -220, 270, 170, -100, -65, 4, 22,
	54, 80, 59, 81, 119, 133, 134, 64, 65, 150,
	264, 270, 275, 68, 289, 266, -277, 275, 275, -277,
	-277, -68, 275, 273, -69, -220, -276, 263, 263, 288,
	297, -130, 80, 284, -45, -47, -46, -88, -89, 283,
	143, 99, 190, -44, -46, -250, -253, 211, -249, -65,
	-253, -85, -86, 22, 91, 331, -187, 325, -189, -73,
	-46, -188, 327, 187, -112, 327, -3, -189, 128, -73,
	-76, 128, -73, -65, -189, 128, -73, 273, 331, -99,
	-92, -65, -151, -150, 329, 116, 116, 327, -109, -110,
	-150, -151, 116, 145, 145, -190, -189, -65, 128, -77,
	128, -76, -101, 128, -100, -101, 128, -195, -194, -223,
	4, -229, -231, -230, 294, 263, 133, -169, 327, -126,
	327, -65, 22, 186, 331, 186, -65, -141, 52, -141,
	243, 327, -143, -63, -64, 147, 207, 273, 312, 116,
	306, -81, 5, 86, -103, 329, 54, 243, 116, -269,
	186, 116, 116, 116, 116, 116, 116, 306, 147, 207,
	255, 263, 297, 116, -144, -63, -64, -144, 273, -69,
	-115, -189, -100, 128, -65, -100, 133, -65, 128, -88,
	-89, -114, -133, -134, 159, 184, -117, 22, 91, -117,
	-117, 44, 328, 328, 331, -253, -93, 327, -104, -191,
	-157, 320, -159, 318, 319, 313, 176, 307, -171, -161,
	-174, 100, 230, 327, -73, -160, 332, 9, -247, -46,
	29, -172, -173, 48, -65, 7, 8, 5, 6, -71,
	-198, -167, -207, 278, 105, 178, -245, -246, 4, -229,
	-222, -199, -209, -203, -206, 144, 57, 73, 76, 74,
	77, 241, 288, 49, 28, 103, 104, 196, 202, 260,
	276, 277, 128, 179, 129, 55, 120, 155, 93, 37,
	39, 41, 42, 50, 51, 82, 84, 85, 110, 138,
	140, 141, 142, 181, 210, 248, 258, 271, 272, 295,
	-230, -210, -211, -204, -205, -212, -104, -112, 69, -120,
	148, 171, 117, 156, 227, 136, 7, 102, -154, 332,
	327, 320, -184, 308, -46, -188, -187, -73, 327, -111,
	-180, -157, 86, -53, 219, -52, 21, 23, 94, 292,
	100, 252, 267, 234, 252, 267, 234, 219, 100, 332,
	219, 219, 100, -227, -224, 9, -223, 5, -74, 331,
	-221, 320, -228, -227, 256, 328, -98, -73, -110, -190,
	-75, -73, -75, 242, -65, 30, 100, -55, 331, 47,
	224, 100, -55, 331, 100, -55, 100, 328, 331, -189,
	128, -76, 30, -168, -196, -197, -199, -208, -202, -206,
	-207, 40, 46, 45, 268, 169, 238, 249, 38, 185,
	139, 138, 140, 141, 142, 248, 37, 210, 110, 93,
	85, 84, 181, 42, 41, -210, -211, -204, -205, 82,
	271, 272, 144, 39, 51, 50, 295, 258, -102, -157,
	-268, -274, -268, 30, -140, -220, -102, 331, 331, 157,
	-80, 163, 175, 125, -219, 86, -225, -218, -181, 9,
	278, 105, 186, -224, 8, 319, -217, 7, 318, -219,
	86, 71, -226, 5, 4, -167, -181, 86, 160, -207,
	329, -221, 244, -100, 22, -220, -271, 113, -268, -220,
	-220, -220, -220, -220, -65, 157, -220, -220, 263, 133,
	331, 331, -69, -55, 331, 327, -87, 176, -251, 302,
	-87, 327, -66, 128, -65, -251, 176, -114, -134, -133,
	-135, -157, 22, -157, -159, -45, -45, -45, -90, -185,
	-157, -249, 30, -92, -95, 331, 116, 10, 11, 56,
	33, 318, 319, 320, 321, 111, 322, 323, 316, 317,
	315, 310, 311, 312, 62, 164, 232, 13, 14, 15,
	26, 189, 158, 307, 130, 246, 313, 16, 17, 18,
	146, 36, 131, -70, 30, 4, -78, -157, -157, -157,
	-157, -157, 195, -108, -152, 325, -46, 327, -46, -157,
	-102, 7, -46, -166, 325, -175, -157, -109, 327, 5,
	327, 5, -254, 303, 113, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 204, -216, 298, -216, -216, -200, 327, -200,
	-201, 327, -200, 304, 308, 327, -95, 148, 148, -187,
	-120, 148, -118, 193, -118, -118, -266, 327, -17, 327,
	-184, -221, 325, 333, -102, -183, -182, 30, -65, 191,
	328, -73, 331, 328, 331, 273, -131, 64, 58, -147,
	128, 58, -233, -65, 64, -234, 53, 284, 206, 115,
	-131, 64, -131, 64, 64, -189, 33, -29, 116, 33,
	-29, 116, 273, -76, -65, 273, 273, -189, -193, 309,
	-65, -193, 331, 116, 328, 331, -149, 300, -137, -29,
	327, 86, 30, -137, -105, -106, -192, -107, -73, 327,
	-65, -65, -76, -77, -100, -101, -101, -17, -194, 100,
	-20, -29, -24, -38, -14, 328, 331, -94, 29, -127,
	327, 305, 167, 83, 126, 166, -128, 236, 328, 331,
	273, 116, 275, 328, -64, -63, -79, 209, 250, 220,
	239, 331, 8, 7, 7, -221, -270, -65, -73, -76,
	-64, -63, -189, -82, -92, -83, -65, -148, -147, -235,
	-236, -233, 133, 284, 106, 30, 100, -62, 200, 30,
	186, 176, -58, 265, 100, -136, 230, 231, 331, -51,
	31, 90, 327, 328, -149, -191, -97, -187, -214, -196,
	-213, 215, 216, 214, 218, 217, -196, -100, 270, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, 158, 130, 246, 36, 131, -157, 273, -157, -157,
	-157, -157, 168, 176, 178, 278, 105, 285, 91, 182,
	-279, 261, 32, -164, -46, 327, -179, 27, 251, 22,
	-221, -171, 230, 327, -152, -157, -153, -102, 328, 328,
	331, -102, -170, 326, -166, -178, -177, 299, 328, -102,
	296, 22, 91, 320, 7, -127, -255, 108, 121, 327,
	328, 328, -157, -157, -121, -215, -102, 4, 305, 167,
	83, 126, 166, 236, -121, -122, -157, -102, -123, -158,
	-159, 318, 319, 313, 327, 230, -124, -157, -102, -157,
	43, 154, 274, -125, -157, 116, -102, -157, -157, -157,
	-102, -102, -102, 327, 7, 7, 270, 270, 7, -149,
	-187, -187, -119, 290, 186, 148, -187, -182, 328, -267,
	7, 326, -195, -183, 7, -156, -155, 114, 174, 328,
	-65, 327, -184, 328, -180, -52, -73, -65, -65, 176,
	-147, 128, -57, 176, -196, -65, 327, 327, 149, 149,
	-65, -65, 128, -65, 128, -65, -65, -53, 219, -29,
	327, -29, 327, -65, 219, -65, -73, 219, -39, 127,
	182, -42, 302, -227, 256, 116, -73, -116, 225, -157,
	-116, -139, 186, -98, 294, -65, -116, -96, 331, 116,
	312, -98, -55, -55, -55, -189, -196, 325, 325, 7,
	273, 273, 273, 273, 327, -157, -270, -270, -63, 282,
	61, 209, -225, 331, 328, 328, 331, -66, 133, -66,
	-29, -100, 5, -29, -73, 100, -59, 96, -278, 312,
	-65, -185, -20, -113, 121, -193, 331, 306, -157, -157,
	273, -279, 261, -164, -157, 168, 178, 278, 105, 285,
	91, 182, 116, 327, -158, -158, -102, -161, 327, -102,
	326, 335, 328, -157, 326, 326, 331, -176, -177, 95,
	-157, -89, 331, -88, -157, -102, -102, 328, 328, -260,
	194, 327, 327, -157, 30, 331, 328, 116, 328, 328,
	-129, 201, 328, 10, 11, 318, 319, 320, 321, 111,
	322, 323, 316, 317, 315, 310, 311, 312, 62, 164,
	232, 13, 14, 15, 146, 131, -158, -158, -158, -102,
	327, 328, -162, -163, 116, 113, 30, -125, -125, -125,
	328, 116, -102, 331, 331, 331, 328, 328, 328, 7,
	328, 331, 328, 306, 306, 328, -113, -119, 327, -157,
	-187, 326, 328, 331, -184, 328, 326, 331, 334, 312,
	-184, 327, -92, -182, 273, 273, 100, 176, 291, -237,
	-234, -157, -91, -186, -65, -248, 327, -245, -246, -71,
	327, 327, -50, 94, 242, -132, 100, -55, 100, -55,
	273, -131, 64, -102, -102, 273, 273, -42, 116, 262,
	188, 256, -104, 177, -116, 63, 328, -149, -106, -97,
	-180, 328, 326, 7, 7, 328, 167, 126, 166, -128,
	166, -128, -128, 7, -65, -84, 132, -148, 327, -66,
	327, 327, -87, 327, -65, -60, 153, -278, -224, -251,
	328, -165, 123, 44, -187, -157, -157, -158, -158, 116,
	327, -157, -168, 26, 26, 328, -102, 328, 331, -153,
	-157, 328, -166, 97, -157, 269, 328, 296, -89, -89,
	-89, 5, -261, -65, 327, 300, -88, 328, -214, -196,
	-157, -162, -157, -214, -196, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, 91, 176, 182, -158, 331, -102,
	328, -163, -162, -157, -157, -196, 328, 328, 328, -102,
	-157, -157, -157, 328, 7, -165, -92, -154, 7, -183,
	-17, -155, -221, 325, -183, -92, 328, -65, -65, -147,
	100, -238, 64, -239, 56, 106, 68, 176, 178, 284,
	206, 53, 86, 213, 328, 328, 331, -72, -109, 56,
	-72, -157, 327, -91, -92, 176, 86, 176, 86, 79,
	280, -65, -65, -73, -65, -65, 328, 328, -65, -73,
	-228, 270, 327, -138, 327, 186, -29, -116, 312, 326,
	326, 328, 131, -91, 327, -92, -82, 30, -91, 186,
	-61, 152, -278, -224, -58, -257, 301, -157, -102, 26,
	26, -157, -168, 328, -157, -157, 328, -157, 326, -157,
	5, -157, 328, 328, 328, -262, -65, -157, 328, 328,
	328, -163, 116, 91, 182, 327, -157, 328, 328, 331,
	328, 328, 328, -257, 328, -184, 326, 7, 328, -147,
	-65, -100, -65, 106, 128, 178, 149, 327, -158, -73,
	-146, -275, 67, 259, -186, -51, -100, -51, 328, -102,
	328, 328, 178, 178, -157, -196, -55, -55, 273, 273,
	273, 273, -160, -71, -65, -41, -40, 5, 92, -92,
	64, -112, -46, 327, 197, 328, -91, 328, 328, -29,
	328, -73, -278, -224, -59, -258, -259, -65, -157, -157,
	328, 328, -89, -256, 199, 328, -158, 116, 327, -168,
	328, -157, -183, -184, 326, -239, -66, 176, -157, -67,
	327, -84, 327, -72, -89, 213, -54, 56, -65, -65,
	327, 327, 327, 331, 328, -43, 312, 286, 177, 328,
	-65, -65, -146, 328, -84, -146, 327, -224, -60, 331,
	30, 328, -89, 44, -158, -168, 328, 328, -183, 100,
	328, -242, 165, -65, -92, -51, 328, -73, -49, 290,
	-100, -102, -102, -102, -40, 5, 242, -149, 327, -84,
	-146, -84, -91, -61, -259, -261, -263, 208, 231, -102,
	328, 106, -240, -243, -241, 186, 117, 198, 247, 328,
	328, -87, -157, 328, 328, -89, -105, -92, -84, 328,
	328, -264, -265, 36, 281, 71, -157, -264, -65, -241,
	186, -243, 186, 286, 89, -242, 328, -149, 328, -146,
	-265, 203, 112, 230, 203, 112, -244, 173, 224, 47,
	242, -244, -240, -56, 47, 224, -84, 26, 20, 178,
	86, -265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 429, 0, 0, 0, 0, 0, 0,
	0, 401, -2, 0, 157, 0, 350, 0, 350, 350,
	354, 0, 0, 431, 316, 428, -2, 439, 0, 0,
	0, 437, 415, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 961, 890, 896, 897, 921, 922, 923,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 978, 979, 980,
	981, 982, 983, 984, 985, 986, 987, 988, 989, 990,
	991, 992, 993, 994, 995, 996, 997, 998, 999, 1000,
	1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
	1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020,
	1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120,
	1121, 1122, 1123, 1124, 1125, 1126, 0, 0, 892, 961,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112,
	113, 114, 115, 0, 228, 935, 936, 937, 938, 939,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 121, 128, 129, 1013, 131,
	0, 138, 139, 140, 142, 143, 144, 145, 146, 147,
	148, 0, 343, 1037, 356, 152, 990, 1042, 949, 1114,
	1059, 160, 170, 0, 1120, -2, 174, 97, 203, 204,
	0, 208, 0, 210, 230, 0, 0, 0, 0, 0,
	218, 0, 0, 0, 225, 0, 361, 349, 361, 346,
	347, 348, 351, 0, 342, 151, 0, 430, 0, 0,
	0, 0, 0, 315, -2, 411, 412, -2, 0, 434,
	434, 434, 0, 0, 412, 0, 420, 1017, 423, 903,
	421, 0, 0, 436, 435, 0, 416, 0, 473, 511,
	488, 478, 0, 0, 459, 0, 2, 0, 1098, 511,
	0, 1098, 895, 0, 0, 1098, 511, 0, 0, 136,
	137, 900, 898, 899, 0, 0, 0, 0, 893, 869,
	867, 868, 0, 0, 0, 0, 517, 87, 1098, 55,
	1098, 888, 55, 1098, 95, 55, 1098, 0, 116, 118,
	931, 932, 933, 934, 1125, 0, 0, 0, 0, 126,
	0, 130, 132, 0, 0, 0, 355, 153, 1087, 155,
	0, 0, 159, 161, 162, 0, 0, 0, 0, 0,
	0, 173, 198, 199, 98, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 221,
	222, 0, 0, 0, 344, 357, 358, 345, 0, 353,
	55, 515, 288, 1098, 427, 288, 925, 427, 1098, -2,
	0, 407, 446, 447, 0, 0, 0, 432, 433, 0,
	0, 0, 403, 404, 0, 422, 0, 0, 462, 880,
	884, 885, 614, 0, 0, 0, 0, 0, 0, 706,
	708, 1092, 1114, 0, 710, 711, 0, 713, 715, 716,
	0, 719, 720, 860, 892, 906, 907, 908, 909, 0,
	0, 912, 0, 914, 915, 916, 760, 729, -2, -2,
	904, 546, 547, 548, 549, -2, 1127, 733, 735, 737,
	738, 739, 740, 0, 1076, 1093, 1094, 1110, 1111, 1119,
	1123, 1124, 1098, 1107, 1099, 1088, 1096, 1105, 966, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	930, 576, 577, 582, 583, 585, 462, 460, 0, 0,
	0, 0, 508, 508, 508, 506, 482, 429, 488, 0,
	0, 512, 500, 0, -2, 478, 0, 513, 0, 0,
	877, 875, 876, 32, 339, 34, 0, 339, 339, 0,
	0, 0, 0, 237, 0, 0, 239, 0, 0, 0,
	0, 0, 0, 502, 64, 65, 201, 202, 891, 0,
	865, 866, 502, 66, 77, 0, 0, 886, 870, 521,
	0, 378, 0, 0, 518, 0, 0, 89, 0, 53,
	54, 0, 91, 0, 0, 93, 0, 429, 0, 0,
	1098, 0, 429, 0, 818, 529, 530, 531, 532, 533,
	611, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 553, 554, 555, 556, 557, 558, 559, 573, 0,
	552, 552, 552, 565, 566, 574, 575, 580, 581, 592,
	593, 595, 597, 591, 591, 591, 588, 589, 0, 816,
	0, 141, 0, 0, 156, 0, 0, 0, 0, 0,
	165, 185, 186, 187, 166, 168, 175, 177, 178, 179,
	188, 189, 190, 191, 305, 0, 307, 917, 0, 167,
	169, 171, 172, 192, 193, 194, 195, 196, 197, 0,
	0, 99, 207, 205, 206, 209, 211, 0, 229, 212,
	213, 214, 215, 216, 217, 220, 223, 224, 0, 0,
	0, 0, 352, 308, 0, 246, 0, 0, 311, 426,
	0, 0, 0, 1098, 924, 366, 0, 410, 444, 445,
	448, 451, 452, 449, 614, 417, 418, 419, 440, 441,
	326, 424, 0, 0, 521, 0, 0, 0, 0, 0,
	0, 795, 796, 797, 798, 799, 800, 803, 804, 801,
	802, 805, 806, 807, 0, 0, 0, 808, 809, 810,
	0, 0, 812, 0, 814, 0, 0, 0, 0, 0,
	0, 874, 0, 0, 0, 883, 811, 619, 620, 621,
	643, 644, 0, 707, 871, 864, 709, 0, -2, 816,
	0, 712, 717, 718, 0, 0, 859, -2, 0, 911,
	0, 611, 762, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 839, 845, 0, 0, 0, 0, 0, 0,
	0, 0, 561, 579, 590, 587, 586, 563, 0, 562,
	560, 0, 564, 0, 0, 0, 521, 0, 0, 0,
	0, 0, 503, 507, 504, 505, 0, 0, 0, 0,
	500, 470, 0, 0, 0, 477, 499, 0, 498, 487,
	-2, 0, 0, 879, 0, 0, 0, 0, 338, 36,
	1098, 0, 57, 0, 0, 278, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 235, 0, 0,
	236, 0, 0, 0, 894, 0, 0, 0, 69, 0,
	901, 76, 0, 0, 0, 0, 390, 0, 390, 380,
	0, 0, 0, 390, 393, 394, 396, 397, 0, 0,
	519, 88, 889, 55, 96, 55, 55, 102, 117, 0,
	119, 122, 123, 124, 125, 120, 0, 522, 524, 534,
	0, 598, 599, 600, 601, 602, 603, 612, 127, 0,
	0, 0, 0, 158, 163, 164, 362, 0, 182, 0,
	184, 0, 306, 919, 918, 100, 231, 149, 226, 227,
	359, 360, 516, 0, 0, 245, 900, 247, 249, 250,
	251, 252, 925, 0, 925, 0, 0, 309, 0, 0,
	0, 0, 368, 374, 0, 450, 453, 454, 0, 443,
	324, 325, 429, 902, 456, 881, 502, 463, 615, 525,
	526, 567, 568, 569, 570, 571, 616, 617, 0, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, -2,
	-2, -2, 635, 636, 637, -2, -2, -2, 641, 642,
	-2, 813, 815, 0, 874, 0, -2, 0, -2, -2,
	-2, -2, 655, 0, 657, 660, 662, 664, 0, 0,
	0, 0, 873, 674, 851, 0, 0, 792, 793, 794,
	882, 659, 0, 0, 872, 863, 0, 0, -2, 714,
	0, 0, 0, 822, 823, 858, 854, 0, 721, 439,
	0, 0, 0, 0, 0, 920, 770, 0, 0, 0,
	734, 736, 0, 0, 0, 0, 826, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 816, 836, 0, 0,
	677, 0, 0, 0, 0, 1114, 0, 816, 844, 0,
	0, 0, 0, 0, 816, 0, 850, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 456,
	490, 0, 492, 0, 0, 0, 494, 0, 483, 0,
	485, 488, 0, 475, 0, 0, 468, 0, 467, 488,
	496, 0, 0, 514, 878, 35, 328, 0, 0, 0,
	38, 1098, 46, 0, 260, 0, 0, 0, 0, 0,
	341, 47, 1098, 55, 1098, 55, 48, 33, 339, 233,
	0, 234, 0, 332, 0, 327, 330, 0, 76, 0,
	0, 63, 0, 67, 78, 0, 887, 86, 0, 520,
	375, 390, 0, 0, 382, 379, 377, 521, 0, 0,
	0, 0, 90, 92, 94, 0, 819, 0, 0, 0,
	0, 0, 0, 0, 0, 817, 133, 134, 154, 180,
	181, 183, 176, 0, 254, 287, 0, 0, 925, 0,
	243, 288, 310, 312, 0, 0, 370, 374, 0, 373,
	427, 442, 0, 458, 0, 461, 0, 0, -2, -2,
	0, 0, 0, 675, -2, 656, 658, 661, 663, 665,
	0, 0, 0, 0, 0, 0, 0, 676, 0, 0,
	861, 864, -2, 817, 820, 821, 0, 0, 855, 0,
	0, 0, 0, 438, 439, 439, 439, 727, 0, 728,
	0, 0, 0, 0, 0, 0, 743, 0, 744, 745,
	0, 0, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 680, 681, 682, 0,
	0, 747, 842, 843, 0, 0, 0, 0, 0, 0,
	752, 0, 849, 0, 0, 0, 756, 757, 758, 0,
	550, 0, 572, 594, 596, 584, 458, 491, 0, 510,
	493, 473, 484, 0, 500, 429, 471, 0, 472, 0,
	500, 0, 0, 479, 0, 0, 0, 0, 56, 258,
	277, 0, 0, 317, 323, 323, 0, 730, 731, 0,
	0, 0, 40, 0, 0, 0, 0, 44, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 79, 388, 389, 376, 387, 0, 390, 395, 392,
	398, 0, 527, 0, 0, 535, 604, 605, 606, 607,
	608, 609, 610, 0, 150, 241, 0, 248, 0, 0,
	0, 246, 0, 0, 0, 372, 374, 0, 365, 366,
	425, 764, 0, 0, 464, 618, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 852, 0, 787, 0, 0,
	863, -2, 824, 853, 857, 0, 722, 0, 0, 0,
	0, 913, 768, 769, 773, 0, 0, 732, 0, 0,
	825, 835, 837, 678, 679, 683, 684, 685, 686, 687,
	688, 689, 690, 691, 692, -2, -2, -2, 696, 697,
	698, -2, -2, -2, 0, 0, 0, 838, 0, 0,
	790, 840, 841, 846, 847, 0, 749, 750, 751, 848,
	0, 0, 0, 578, 0, 764, 0, 488, 486, 480,
	0, 469, 465, 0, 476, 0, 497, 334, 336, 37,
	0, 259, 0, 262, 0, 0, 0, 0, 268, 269,
	0, 0, 0, 0, 279, 286, 0, 326, 905, 0,
	326, 0, 0, 0, 0, 0, 52, 0, 0, 340,
	0, 55, 55, 329, 0, 0, 0, 0, 333, 331,
	68, 0, 0, 0, 0, 0, 381, 391, 0, 528,
	523, 613, 0, 0, 0, 0, 0, 0, 0, 0,
	363, 374, 0, 367, 368, 413, 0, 457, 455, 0,
	0, -2, 0, 668, -2, -2, 786, 817, 862, 856,
	910, 439, 723, 725, 726, 775, 772, 0, 759, 741,
	742, 834, 0, 0, 0, 0, 817, 789, 748, 0,
	754, 755, 551, 414, 509, 500, 488, 0, 495, 39,
	0, 263, 264, 925, 0, 267, 270, 0, 272, 927,
	254, 0, 283, 284, 318, 319, 322, 320, 323, 439,
	281, 0, 41, 42, 51, 59, 43, 49, 0, 0,
	0, 0, 501, 0, 0, 0, 73, 71, 0, 0,
	0, 399, 400, 0, 0, 286, 0, 276, 254, 244,
	286, 0, 0, 369, 370, 763, 765, 0, -2, -2,
	669, 788, 0, 439, 0, 761, -2, 0, 0, 0,
	791, 0, 474, 500, 466, 261, 265, 0, 0, 292,
	0, 280, 0, 326, 0, 0, 61, 0, 335, 337,
	0, 0, 0, 0, 75, 72, 0, 0, 384, 521,
	386, 0, 254, 286, 242, 254, 0, 371, 372, 0,
	0, 724, 778, 0, -2, 0, 704, 753, 481, 0,
	271, 297, 0, 0, 0, 321, 722, 288, 45, 0,
	58, 0, 0, 439, 74, 70, 0, 385, 0, 274,
	254, 313, 0, 364, 766, 767, 0, 0, 0, 774,
	705, 0, 273, 293, 294, 0, 289, 290, 291, 926,
	285, 292, 60, 238, 240, 0, 521, 0, 275, 286,
	771, 776, 779, -2, 1062, 958, 0, 777, 266, 295,
	0, 296, 0, 0, 0, 297, 0, 383, 257, 254,
	0, 781, 782, 783, 784, 785, 298, 0, 301, 302,
	0, 299, 282, 253, 255, 256, 314, 0, 300, 303,
	304, 780,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 316, 3, 322, 317, 3,
	327, 328, 320, 318, 331, 319, 329, 321, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 335, 330,
	310, 312, 311, 3, 332, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 325, 3, 326, 323, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 333, 315, 334, 313,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 314, 57653, 324, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:785
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:797
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:916
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:993
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1066
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1586
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1686
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1690
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1733
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1737
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1743
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1747
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1755
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = DropDefault
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1840
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			return unimplemented(sqllex)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			return unimplemented(sqllex)
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2047
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2055
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2056
		{
			return unimplemented(sqllex)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			return unimplemented(sqllex)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			return unimplemented(sqllex)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2059
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			return unimplemented(sqllex)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2065
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2068
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2070
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = true
		}
	case 316:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = false
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			return unimplemented(sqllex)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2180
		{
			return unimplemented(sqllex)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return unimplemented(sqllex)
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2184
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = Ascending
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = Descending
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 327:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2231
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2238
		{
			return unimplemented(sqllex)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2239
		{
			return unimplemented(sqllex)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = true
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2247
		{
			sqlVAL.union.val = false
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2252
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2253
		{
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2295
		{
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2296
		{
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.str = ""
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.str = ""
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.str = ""
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.str = ""
		}
	case 371:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2418
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2419
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2483
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			return unimplemented(sqllex)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2495
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 391:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2511
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2517
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2518
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2536
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			return unimplemented(sqllex)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2747
		{
			return unimplemented(sqllex)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2750
		{
			return unimplemented(sqllex)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			return unimplemented(sqllex)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2754
		{
			return unimplemented(sqllex)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2761
		{
			return unimplemented(sqllex)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2765
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = true
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = false
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = false
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = true
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2789
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2790
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2828
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2848
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2948
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &From{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2984
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3002
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3025
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3029
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3046
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = nil
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3114
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3120
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = true
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = false
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.str = astFullJoin
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.str = astLeftJoin
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.str = astRightJoin
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.str = astInnerJoin
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3318
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3331
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3332
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3346
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3355
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3414
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3423
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = nil
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3472
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3532
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3536
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3568
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3640
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = year
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = month
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = day
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = hour
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = minute
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = month
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = hour
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = minute
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = minute
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = nil
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.union.val = second
		}
	case 613:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3735
		{
			return unimplemented(sqllex)
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3770
		{
			return unimplemented(sqllex)
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			return unimplemented(sqllex)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4004
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4104
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4177
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4230
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4231
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4254
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4271
		{
			return unimplemented(sqllex)
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4275
		{
			return unimplemented(sqllex)
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4292
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4293
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4294
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4324
		{
			return unimplemented(sqllex)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4368
		{
			return unimplemented(sqllex)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4369
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = Window(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4404
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.str = ""
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4466
		{
			return unimplemented(sqllex)
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4467
		{
			return unimplemented(sqllex)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4468
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			return unimplemented(sqllex)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4472
		{
			return unimplemented(sqllex)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4478
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			return unimplemented(sqllex)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4480
		{
			return unimplemented(sqllex)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4481
		{
			return unimplemented(sqllex)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			return unimplemented(sqllex)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = Any
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = Some
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = All
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = Plus
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = Minus
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = Mult
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = Div
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = FloorDiv
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = Mod
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Bitand
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = Bitor
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = Pow
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = Bitxor
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = LT
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = GT
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = EQ
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.union.val = LE
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = GE
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = NE
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = Like
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = NotLike
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = ILike
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = NotILike
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4664
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4847
		{
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4965
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 903:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5009
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5045
		{
			return unimplemented(sqllex)
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5055
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5067
		{
			sqlVAL.union.val = DNull
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5084
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.str = ""
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
