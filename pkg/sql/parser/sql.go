// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) seqOpt() SequenceOption {
	return u.val.(SequenceOption)
}
func (u *sqlSymUnion) intVal() *int64 {
	return u.val.(*int64)
}
func (u *sqlSymUnion) seqOpts() []SequenceOption {
	return u.val.([]SequenceOption)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:491
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CACHE = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const HAS_SOME = 57486
const HAS_ALL = 57487
const IMPORT = 57488
const INCREMENT = 57489
const INCREMENTAL = 57490
const IF = 57491
const IFNULL = 57492
const ILIKE = 57493
const IN = 57494
const INET = 57495
const INTERLEAVE = 57496
const INDEX = 57497
const INDEXES = 57498
const INITIALLY = 57499
const INNER = 57500
const INSERT = 57501
const INT = 57502
const INT2VECTOR = 57503
const INT2 = 57504
const INT4 = 57505
const INT8 = 57506
const INT64 = 57507
const INTEGER = 57508
const INTERSECT = 57509
const INTERVAL = 57510
const INTO = 57511
const IS = 57512
const ISOLATION = 57513
const JOB = 57514
const JOBS = 57515
const JOIN = 57516
const JSON = 57517
const JSONB = 57518
const KEY = 57519
const KEYS = 57520
const KV = 57521
const LATERAL = 57522
const LC_CTYPE = 57523
const LC_COLLATE = 57524
const LEADING = 57525
const LEAST = 57526
const LEFT = 57527
const LESS = 57528
const LEVEL = 57529
const LIKE = 57530
const LIMIT = 57531
const LIST = 57532
const LOCAL = 57533
const LOCALTIME = 57534
const LOCALTIMESTAMP = 57535
const LOW = 57536
const LSHIFT = 57537
const MATCH = 57538
const MINVALUE = 57539
const MAXVALUE = 57540
const MINUTE = 57541
const MONTH = 57542
const NAN = 57543
const NAME = 57544
const NAMES = 57545
const NATURAL = 57546
const NEXT = 57547
const NO = 57548
const NO_INDEX_JOIN = 57549
const NORMAL = 57550
const NOT = 57551
const NOTHING = 57552
const NULL = 57553
const NULLIF = 57554
const NULLS = 57555
const NUMERIC = 57556
const OF = 57557
const OFF = 57558
const OFFSET = 57559
const OID = 57560
const ON = 57561
const ONLY = 57562
const OPTIONS = 57563
const OR = 57564
const ORDER = 57565
const ORDINALITY = 57566
const OUT = 57567
const OUTER = 57568
const OVER = 57569
const OVERLAPS = 57570
const OVERLAY = 57571
const PARENT = 57572
const PARTIAL = 57573
const PARTITION = 57574
const PASSWORD = 57575
const PAUSE = 57576
const PLACING = 57577
const PLANS = 57578
const POSITION = 57579
const PRECEDING = 57580
const PRECISION = 57581
const PREPARE = 57582
const PRIMARY = 57583
const PRIORITY = 57584
const QUERIES = 57585
const QUERY = 57586
const RANGE = 57587
const READ = 57588
const REAL = 57589
const RECURSIVE = 57590
const REF = 57591
const REFERENCES = 57592
const REGCLASS = 57593
const REGPROC = 57594
const REGPROCEDURE = 57595
const REGNAMESPACE = 57596
const REGTYPE = 57597
const REMOVE_PATH = 57598
const RENAME = 57599
const REPEATABLE = 57600
const RELEASE = 57601
const RESET = 57602
const RESTORE = 57603
const RESTRICT = 57604
const RESUME = 57605
const RETURNING = 57606
const REVOKE = 57607
const RIGHT = 57608
const ROLLBACK = 57609
const ROLLUP = 57610
const ROW = 57611
const ROWS = 57612
const RSHIFT = 57613
const SAVEPOINT = 57614
const SCATTER = 57615
const SCRUB = 57616
const SEARCH = 57617
const SECOND = 57618
const SELECT = 57619
const SEQUENCE = 57620
const SEQUENCES = 57621
const SERIAL = 57622
const SERIALIZABLE = 57623
const SESSION = 57624
const SESSIONS = 57625
const SESSION_USER = 57626
const SET = 57627
const SETTING = 57628
const SETTINGS = 57629
const SHOW = 57630
const SIMILAR = 57631
const SIMPLE = 57632
const SMALLINT = 57633
const SMALLSERIAL = 57634
const SNAPSHOT = 57635
const SOME = 57636
const SPLIT = 57637
const SQL = 57638
const START = 57639
const STATUS = 57640
const STDIN = 57641
const STRICT = 57642
const STRING = 57643
const STORE = 57644
const STORING = 57645
const SUBSTRING = 57646
const SYMMETRIC = 57647
const SYSTEM = 57648
const TABLE = 57649
const TABLES = 57650
const TEMP = 57651
const TEMPLATE = 57652
const TEMPORARY = 57653
const TESTING_RANGES = 57654
const TESTING_RELOCATE = 57655
const TEXT = 57656
const THAN = 57657
const THEN = 57658
const TIME = 57659
const TIMESTAMP = 57660
const TIMESTAMPTZ = 57661
const TO = 57662
const TRAILING = 57663
const TRACE = 57664
const TRANSACTION = 57665
const TREAT = 57666
const TRIM = 57667
const TRUE = 57668
const TRUNCATE = 57669
const TYPE = 57670
const UNBOUNDED = 57671
const UNCOMMITTED = 57672
const UNION = 57673
const UNIQUE = 57674
const UNKNOWN = 57675
const UPDATE = 57676
const UPSERT = 57677
const USE = 57678
const USER = 57679
const USERS = 57680
const USING = 57681
const UUID = 57682
const VALID = 57683
const VALIDATE = 57684
const VALUE = 57685
const VALUES = 57686
const VARCHAR = 57687
const VARIADIC = 57688
const VIEW = 57689
const VARYING = 57690
const WHEN = 57691
const WHERE = 57692
const WINDOW = 57693
const WITH = 57694
const WITHIN = 57695
const WITHOUT = 57696
const WRITE = 57697
const YEAR = 57698
const ZONE = 57699
const NOT_LA = 57700
const WITH_LA = 57701
const AS_LA = 57702
const CONTAINED_BY = 57703
const HAS_SOME_KEY = 57704
const HAS_ALL_KEYS = 57705
const POSTFIXOP = 57706
const UMINUS = 57707
const HELPTOKEN = 57708

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6917

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	386, 54,
	-2, 723,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	155, 575,
	-2, 0,
	-1, 65,
	97, 723,
	159, 723,
	334, 723,
	335, 723,
	-2, 0,
	-1, 75,
	108, 698,
	118, 698,
	167, 698,
	189, 698,
	217, 698,
	223, 698,
	331, 698,
	-2, 687,
	-1, 108,
	4, 725,
	20, 725,
	21, 725,
	23, 725,
	28, 725,
	33, 725,
	34, 725,
	35, 725,
	36, 725,
	37, 725,
	38, 725,
	39, 725,
	40, 725,
	41, 725,
	42, 725,
	44, 725,
	45, 725,
	46, 725,
	47, 725,
	48, 725,
	49, 725,
	52, 725,
	53, 725,
	54, 725,
	56, 725,
	57, 725,
	61, 725,
	62, 725,
	63, 725,
	65, 725,
	66, 725,
	67, 725,
	68, 725,
	70, 725,
	72, 725,
	73, 725,
	76, 725,
	77, 725,
	78, 725,
	86, 725,
	87, 725,
	88, 725,
	89, 725,
	90, 725,
	91, 725,
	92, 725,
	93, 725,
	95, 725,
	97, 725,
	99, 725,
	102, 725,
	103, 725,
	105, 725,
	109, 725,
	110, 725,
	111, 725,
	112, 725,
	113, 725,
	114, 725,
	115, 725,
	123, 725,
	124, 725,
	125, 725,
	126, 725,
	127, 725,
	129, 725,
	131, 725,
	136, 725,
	137, 725,
	139, 725,
	142, 725,
	143, 725,
	146, 725,
	147, 725,
	148, 725,
	149, 725,
	150, 725,
	153, 725,
	154, 725,
	156, 725,
	159, 725,
	160, 725,
	161, 725,
	162, 725,
	163, 725,
	164, 725,
	165, 725,
	166, 725,
	168, 725,
	171, 725,
	172, 725,
	173, 725,
	175, 725,
	176, 725,
	177, 725,
	178, 725,
	179, 725,
	181, 725,
	182, 725,
	184, 725,
	186, 725,
	187, 725,
	190, 725,
	191, 725,
	194, 725,
	196, 725,
	197, 725,
	199, 725,
	200, 725,
	201, 725,
	202, 725,
	203, 725,
	205, 725,
	206, 725,
	207, 725,
	208, 725,
	212, 725,
	213, 725,
	214, 725,
	215, 725,
	216, 725,
	218, 725,
	220, 725,
	221, 725,
	224, 725,
	225, 725,
	227, 725,
	229, 725,
	230, 725,
	231, 725,
	232, 725,
	233, 725,
	234, 725,
	236, 725,
	237, 725,
	238, 725,
	239, 725,
	240, 725,
	242, 725,
	243, 725,
	244, 725,
	245, 725,
	246, 725,
	247, 725,
	248, 725,
	249, 725,
	251, 725,
	252, 725,
	253, 725,
	254, 725,
	255, 725,
	257, 725,
	258, 725,
	259, 725,
	260, 725,
	261, 725,
	262, 725,
	263, 725,
	265, 725,
	267, 725,
	268, 725,
	269, 725,
	270, 725,
	272, 725,
	273, 725,
	274, 725,
	275, 725,
	276, 725,
	278, 725,
	279, 725,
	280, 725,
	281, 725,
	282, 725,
	283, 725,
	285, 725,
	286, 725,
	287, 725,
	288, 725,
	290, 725,
	291, 725,
	292, 725,
	293, 725,
	295, 725,
	296, 725,
	297, 725,
	298, 725,
	299, 725,
	300, 725,
	301, 725,
	302, 725,
	303, 725,
	304, 725,
	306, 725,
	308, 725,
	309, 725,
	310, 725,
	311, 725,
	312, 725,
	313, 725,
	314, 725,
	315, 725,
	317, 725,
	318, 725,
	319, 725,
	322, 725,
	323, 725,
	324, 725,
	325, 725,
	327, 725,
	328, 725,
	329, 725,
	330, 725,
	333, 725,
	334, 725,
	335, 725,
	336, 725,
	338, 725,
	340, 725,
	341, 725,
	342, 725,
	343, 725,
	344, 725,
	345, 725,
	348, 725,
	353, 725,
	354, 725,
	355, 725,
	356, 725,
	357, 725,
	-2, 0,
	-1, 125,
	108, 697,
	118, 697,
	167, 697,
	189, 697,
	217, 697,
	223, 697,
	331, 697,
	-2, 690,
	-1, 130,
	1, 624,
	171, 624,
	242, 624,
	246, 624,
	385, 624,
	386, 624,
	-2, 0,
	-1, 132,
	1, 624,
	385, 624,
	386, 624,
	-2, 0,
	-1, 133,
	1, 624,
	385, 624,
	386, 624,
	-2, 0,
	-1, 134,
	1, 628,
	385, 628,
	386, 628,
	-2, 0,
	-1, 141,
	4, 731,
	5, 731,
	6, 731,
	7, 731,
	8, 731,
	9, 731,
	20, 731,
	21, 731,
	23, 731,
	28, 731,
	29, 731,
	33, 731,
	34, 731,
	35, 731,
	36, 731,
	37, 731,
	38, 731,
	39, 731,
	40, 731,
	41, 731,
	42, 731,
	44, 731,
	45, 731,
	46, 731,
	47, 731,
	48, 731,
	49, 731,
	50, 731,
	51, 731,
	52, 731,
	53, 731,
	54, 731,
	56, 731,
	57, 731,
	59, 731,
	61, 731,
	62, 731,
	63, 731,
	65, 731,
	66, 731,
	67, 731,
	68, 731,
	70, 731,
	72, 731,
	73, 731,
	75, 731,
	76, 731,
	77, 731,
	78, 731,
	80, 731,
	81, 731,
	82, 731,
	84, 731,
	85, 731,
	86, 731,
	87, 731,
	88, 731,
	89, 731,
	90, 731,
	91, 731,
	92, 731,
	93, 731,
	95, 731,
	97, 731,
	99, 731,
	102, 731,
	103, 731,
	105, 731,
	109, 731,
	110, 731,
	111, 731,
	112, 731,
	113, 731,
	114, 731,
	115, 731,
	116, 731,
	117, 731,
	123, 731,
	124, 731,
	125, 731,
	126, 731,
	127, 731,
	129, 731,
	131, 731,
	134, 731,
	136, 731,
	137, 731,
	139, 731,
	142, 731,
	143, 731,
	146, 731,
	147, 731,
	148, 731,
	149, 731,
	150, 731,
	151, 731,
	153, 731,
	154, 731,
	156, 731,
	158, 731,
	159, 731,
	160, 731,
	161, 731,
	162, 731,
	163, 731,
	164, 731,
	165, 731,
	166, 731,
	168, 731,
	170, 731,
	171, 731,
	172, 731,
	173, 731,
	174, 731,
	175, 731,
	176, 731,
	177, 731,
	178, 731,
	179, 731,
	181, 731,
	182, 731,
	184, 731,
	185, 731,
	186, 731,
	187, 731,
	188, 731,
	190, 731,
	191, 731,
	194, 731,
	196, 731,
	197, 731,
	198, 731,
	199, 731,
	200, 731,
	201, 731,
	202, 731,
	203, 731,
	204, 731,
	205, 731,
	206, 731,
	207, 731,
	208, 731,
	209, 731,
	211, 731,
	212, 731,
	213, 731,
	214, 731,
	215, 731,
	216, 731,
	218, 731,
	221, 731,
	224, 731,
	225, 731,
	226, 731,
	227, 731,
	228, 731,
	229, 731,
	230, 731,
	231, 731,
	232, 731,
	233, 731,
	234, 731,
	236, 731,
	237, 731,
	238, 731,
	239, 731,
	240, 731,
	242, 731,
	243, 731,
	244, 731,
	245, 731,
	246, 731,
	247, 731,
	248, 731,
	249, 731,
	251, 731,
	252, 731,
	253, 731,
	254, 731,
	255, 731,
	257, 731,
	258, 731,
	259, 731,
	260, 731,
	261, 731,
	262, 731,
	263, 731,
	265, 731,
	266, 731,
	267, 731,
	268, 731,
	269, 731,
	270, 731,
	272, 731,
	273, 731,
	274, 731,
	275, 731,
	276, 731,
	278, 731,
	279, 731,
	280, 731,
	281, 731,
	282, 731,
	283, 731,
	284, 731,
	285, 731,
	286, 731,
	287, 731,
	288, 731,
	289, 731,
	290, 731,
	291, 731,
	292, 731,
	293, 731,
	295, 731,
	296, 731,
	297, 731,
	298, 731,
	299, 731,
	300, 731,
	301, 731,
	302, 731,
	303, 731,
	304, 731,
	306, 731,
	308, 731,
	309, 731,
	310, 731,
	311, 731,
	312, 731,
	313, 731,
	314, 731,
	315, 731,
	317, 731,
	318, 731,
	319, 731,
	322, 731,
	323, 731,
	324, 731,
	325, 731,
	326, 731,
	327, 731,
	328, 731,
	329, 731,
	330, 731,
	333, 731,
	334, 731,
	335, 731,
	336, 731,
	337, 731,
	338, 731,
	340, 731,
	341, 731,
	342, 731,
	343, 731,
	344, 731,
	345, 731,
	348, 731,
	353, 731,
	354, 731,
	355, 731,
	356, 731,
	357, 731,
	358, 731,
	368, 731,
	373, 731,
	374, 731,
	375, 731,
	382, 731,
	388, 731,
	-2, 0,
	-1, 144,
	1, 54,
	386, 54,
	-2, 723,
	-1, 522,
	133, 1342,
	320, 1342,
	363, 1342,
	384, 1342,
	-2, 0,
	-1, 523,
	133, 1288,
	320, 1288,
	363, 1288,
	384, 1288,
	-2, 0,
	-1, 525,
	133, 1403,
	320, 1403,
	363, 1403,
	384, 1403,
	-2, 0,
	-1, 527,
	133, 1426,
	320, 1426,
	363, 1426,
	384, 1426,
	-2, 0,
	-1, 534,
	133, 1348,
	320, 1348,
	363, 1348,
	384, 1348,
	-2, 329,
	-1, 560,
	1, 407,
	381, 407,
	383, 407,
	385, 407,
	386, 407,
	-2, 0,
	-1, 561,
	1, 459,
	130, 459,
	381, 459,
	383, 459,
	385, 459,
	386, 459,
	-2, 0,
	-1, 567,
	1, 421,
	381, 421,
	383, 421,
	385, 421,
	386, 421,
	-2, 0,
	-1, 569,
	1, 425,
	381, 425,
	383, 425,
	385, 425,
	386, 425,
	-2, 0,
	-1, 572,
	1, 433,
	381, 433,
	383, 433,
	385, 433,
	386, 433,
	-2, 0,
	-1, 573,
	1, 438,
	381, 438,
	383, 438,
	385, 438,
	386, 438,
	-2, 0,
	-1, 576,
	1, 448,
	381, 448,
	383, 448,
	385, 448,
	386, 448,
	-2, 0,
	-1, 592,
	118, 733,
	189, 733,
	217, 733,
	-2, 693,
	-1, 595,
	118, 732,
	189, 732,
	217, 732,
	-2, 691,
	-1, 652,
	382, 1265,
	-2, 1258,
	-1, 653,
	382, 1266,
	-2, 1259,
	-1, 659,
	5, 912,
	382, 912,
	-2, 1478,
	-1, 684,
	5, 871,
	-2, 1447,
	-1, 685,
	5, 906,
	382, 906,
	-2, 1449,
	-1, 686,
	5, 881,
	-2, 1450,
	-1, 687,
	5, 880,
	-2, 1451,
	-1, 688,
	5, 906,
	382, 906,
	-2, 1454,
	-1, 689,
	5, 906,
	382, 906,
	-2, 1455,
	-1, 690,
	5, 907,
	-2, 1458,
	-1, 691,
	5, 863,
	-2, 1459,
	-1, 692,
	5, 863,
	-2, 1460,
	-1, 693,
	5, 888,
	-2, 1464,
	-1, 694,
	5, 873,
	-2, 1465,
	-1, 695,
	5, 874,
	-2, 1466,
	-1, 696,
	5, 864,
	-2, 1472,
	-1, 697,
	5, 865,
	-2, 1473,
	-1, 698,
	5, 866,
	-2, 1474,
	-1, 699,
	5, 867,
	-2, 1475,
	-1, 700,
	5, 868,
	-2, 1476,
	-1, 701,
	5, 869,
	-2, 1477,
	-1, 702,
	5, 863,
	-2, 1484,
	-1, 703,
	5, 872,
	-2, 1489,
	-1, 704,
	5, 870,
	-2, 1492,
	-1, 705,
	5, 904,
	382, 904,
	-2, 1494,
	-1, 706,
	5, 908,
	-2, 1497,
	-1, 707,
	5, 910,
	-2, 1498,
	-1, 708,
	5, 903,
	382, 903,
	-2, 1503,
	-1, 894,
	233, 721,
	-2, 568,
	-1, 898,
	219, 1262,
	-2, 0,
	-1, 933,
	1, 218,
	381, 218,
	383, 218,
	385, 218,
	386, 218,
	-2, 696,
	-1, 940,
	4, 1502,
	10, 1502,
	11, 1502,
	13, 1502,
	14, 1502,
	15, 1502,
	16, 1502,
	17, 1502,
	18, 1502,
	20, 1502,
	21, 1502,
	23, 1502,
	26, 1502,
	28, 1502,
	30, 1502,
	33, 1502,
	34, 1502,
	35, 1502,
	36, 1502,
	37, 1502,
	38, 1502,
	39, 1502,
	40, 1502,
	41, 1502,
	42, 1502,
	44, 1502,
	45, 1502,
	46, 1502,
	47, 1502,
	48, 1502,
	49, 1502,
	52, 1502,
	53, 1502,
	54, 1502,
	56, 1502,
	57, 1502,
	58, 1502,
	61, 1502,
	62, 1502,
	63, 1502,
	64, 1502,
	65, 1502,
	66, 1502,
	67, 1502,
	68, 1502,
	70, 1502,
	71, 1502,
	72, 1502,
	73, 1502,
	75, 1502,
	76, 1502,
	77, 1502,
	78, 1502,
	86, 1502,
	87, 1502,
	88, 1502,
	89, 1502,
	90, 1502,
	91, 1502,
	92, 1502,
	93, 1502,
	95, 1502,
	97, 1502,
	99, 1502,
	102, 1502,
	103, 1502,
	105, 1502,
	109, 1502,
	110, 1502,
	111, 1502,
	112, 1502,
	113, 1502,
	114, 1502,
	115, 1502,
	119, 1502,
	120, 1502,
	121, 1502,
	122, 1502,
	123, 1502,
	124, 1502,
	125, 1502,
	126, 1502,
	127, 1502,
	128, 1502,
	129, 1502,
	131, 1502,
	134, 1502,
	136, 1502,
	137, 1502,
	139, 1502,
	142, 1502,
	143, 1502,
	146, 1502,
	147, 1502,
	148, 1502,
	149, 1502,
	150, 1502,
	151, 1502,
	152, 1502,
	153, 1502,
	154, 1502,
	156, 1502,
	158, 1502,
	159, 1502,
	160, 1502,
	161, 1502,
	162, 1502,
	163, 1502,
	164, 1502,
	165, 1502,
	166, 1502,
	168, 1502,
	170, 1502,
	171, 1502,
	172, 1502,
	173, 1502,
	174, 1502,
	175, 1502,
	176, 1502,
	177, 1502,
	178, 1502,
	179, 1502,
	181, 1502,
	182, 1502,
	184, 1502,
	185, 1502,
	186, 1502,
	187, 1502,
	188, 1502,
	190, 1502,
	191, 1502,
	194, 1502,
	195, 1502,
	196, 1502,
	197, 1502,
	199, 1502,
	200, 1502,
	201, 1502,
	202, 1502,
	203, 1502,
	204, 1502,
	205, 1502,
	206, 1502,
	207, 1502,
	208, 1502,
	212, 1502,
	213, 1502,
	214, 1502,
	215, 1502,
	216, 1502,
	218, 1502,
	221, 1502,
	222, 1502,
	224, 1502,
	225, 1502,
	227, 1502,
	229, 1502,
	230, 1502,
	231, 1502,
	232, 1502,
	233, 1502,
	234, 1502,
	236, 1502,
	237, 1502,
	238, 1502,
	239, 1502,
	240, 1502,
	242, 1502,
	243, 1502,
	244, 1502,
	245, 1502,
	246, 1502,
	247, 1502,
	248, 1502,
	249, 1502,
	251, 1502,
	252, 1502,
	253, 1502,
	254, 1502,
	255, 1502,
	256, 1502,
	257, 1502,
	258, 1502,
	259, 1502,
	260, 1502,
	261, 1502,
	262, 1502,
	263, 1502,
	265, 1502,
	266, 1502,
	267, 1502,
	268, 1502,
	269, 1502,
	270, 1502,
	271, 1502,
	272, 1502,
	273, 1502,
	274, 1502,
	275, 1502,
	276, 1502,
	278, 1502,
	279, 1502,
	280, 1502,
	281, 1502,
	282, 1502,
	283, 1502,
	285, 1502,
	286, 1502,
	287, 1502,
	288, 1502,
	289, 1502,
	290, 1502,
	291, 1502,
	292, 1502,
	293, 1502,
	295, 1502,
	296, 1502,
	297, 1502,
	298, 1502,
	299, 1502,
	300, 1502,
	301, 1502,
	302, 1502,
	303, 1502,
	304, 1502,
	306, 1502,
	308, 1502,
	309, 1502,
	310, 1502,
	311, 1502,
	312, 1502,
	313, 1502,
	314, 1502,
	315, 1502,
	317, 1502,
	318, 1502,
	319, 1502,
	322, 1502,
	323, 1502,
	324, 1502,
	325, 1502,
	327, 1502,
	328, 1502,
	329, 1502,
	330, 1502,
	333, 1502,
	334, 1502,
	335, 1502,
	336, 1502,
	338, 1502,
	340, 1502,
	341, 1502,
	342, 1502,
	343, 1502,
	344, 1502,
	345, 1502,
	348, 1502,
	353, 1502,
	354, 1502,
	355, 1502,
	356, 1502,
	357, 1502,
	358, 1502,
	359, 1502,
	361, 1502,
	362, 1502,
	363, 1502,
	364, 1502,
	365, 1502,
	366, 1502,
	367, 1502,
	368, 1502,
	370, 1502,
	371, 1502,
	372, 1502,
	373, 1502,
	374, 1502,
	375, 1502,
	376, 1502,
	377, 1502,
	378, 1502,
	380, 1502,
	383, 1502,
	384, 1502,
	387, 1502,
	388, 1502,
	-2, 0,
	-1, 953,
	133, 1403,
	320, 1403,
	363, 1403,
	384, 1403,
	-2, 0,
	-1, 970,
	133, 1426,
	320, 1426,
	363, 1426,
	384, 1426,
	-2, 0,
	-1, 971,
	171, 636,
	242, 636,
	246, 636,
	-2, 317,
	-1, 1043,
	118, 732,
	189, 732,
	217, 732,
	-2, 694,
	-1, 1122,
	108, 698,
	118, 698,
	167, 698,
	189, 698,
	217, 698,
	223, 698,
	331, 698,
	-2, 1041,
	-1, 1132,
	382, 1242,
	-2, 1230,
	-1, 1150,
	383, 1154,
	-2, 0,
	-1, 1174,
	171, 636,
	242, 636,
	246, 636,
	-2, 631,
	-1, 1202,
	383, 1154,
	-2, 0,
	-1, 1206,
	108, 698,
	118, 698,
	167, 698,
	189, 698,
	217, 698,
	223, 698,
	331, 698,
	-2, 794,
	-1, 1358,
	171, 636,
	242, 636,
	246, 636,
	-2, 319,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 947,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 948,
	-1, 1462,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 949,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 950,
	-1, 1464,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 951,
	-1, 1465,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 952,
	-1, 1466,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 953,
	-1, 1467,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 954,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 963,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 964,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	71, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 965,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 970,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 972,
	-1, 1489,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 976,
	-1, 1490,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 977,
	-1, 1491,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 978,
	-1, 1492,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 979,
	-1, 1561,
	133, 1165,
	382, 1265,
	-2, 1258,
	-1, 1562,
	133, 1166,
	-2, 1443,
	-1, 1563,
	133, 1167,
	-2, 1347,
	-1, 1564,
	133, 1168,
	-2, 1306,
	-1, 1565,
	133, 1169,
	-2, 1323,
	-1, 1566,
	133, 1170,
	-2, 1345,
	-1, 1567,
	133, 1171,
	-2, 1399,
	-1, 1643,
	1, 795,
	75, 795,
	108, 795,
	118, 795,
	134, 795,
	138, 795,
	140, 795,
	158, 795,
	167, 795,
	174, 795,
	185, 795,
	189, 795,
	204, 795,
	217, 795,
	219, 795,
	223, 795,
	264, 795,
	266, 795,
	331, 795,
	339, 795,
	350, 795,
	351, 795,
	360, 795,
	381, 795,
	383, 795,
	385, 795,
	386, 795,
	387, 795,
	-2, 794,
	-1, 1798,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 971,
	-1, 1799,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 973,
	-1, 1804,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 974,
	-1, 1822,
	228, 1125,
	-2, 1127,
	-1, 2053,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 975,
	-1, 2058,
	170, 0,
	-2, 991,
	-1, 2067,
	228, 1126,
	-2, 1128,
	-1, 2109,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1018,
	-1, 2110,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1019,
	-1, 2111,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1020,
	-1, 2115,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1024,
	-1, 2116,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1025,
	-1, 2117,
	13, 0,
	14, 0,
	15, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 1026,
	-1, 2249,
	170, 0,
	-2, 992,
	-1, 2252,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 995,
	-1, 2253,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 997,
	-1, 2373,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 996,
	-1, 2374,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	151, 0,
	152, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 998,
	-1, 2381,
	170, 0,
	-2, 1027,
	-1, 2458,
	170, 0,
	-2, 1028,
	-1, 2539,
	36, 0,
	151, 0,
	188, 0,
	289, 0,
	358, 0,
	368, 0,
	-2, 1446,
	-1, 2625,
	382, 1514,
	-2, 494,
}

const sqlPrivate = 57344

const sqlLast = 44224

var sqlAct = [...]int{

	653, 2607, 2588, 2344, 2343, 2621, 2605, 2622, 2407, 2538,
	2511, 2548, 1728, 2547, 1720, 2202, 2537, 2549, 2032, 2086,
	1246, 2463, 2354, 612, 1792, 2212, 2303, 74, 2234, 651,
	2168, 1352, 2317, 1353, 887, 1263, 991, 1998, 1298, 2169,
	2236, 1688, 183, 2387, 1638, 1689, 757, 183, 1204, 2006,
	650, 2000, 2283, 1717, 2228, 1915, 183, 784, 1936, 1693,
	184, 1200, 1729, 1656, 1888, 183, 1692, 1183, 709, 1923,
	183, 183, 604, 124, 183, 596, 1259, 183, 1682, 1887,
	2139, 1647, 1439, 464, 1517, 183, 643, 1639, 1833, 1128,
	1775, 1516, 974, 1383, 629, 1242, 1046, 1212, 1214, 533,
	1184, 1590, 623, 479, 26, 1504, 1525, 1501, 923, 1434,
	1704, 973, 1535, 461, 1160, 1164, 993, 1690, 1541, 913,
	763, 1209, 1788, 934, 1722, 1276, 1696, 766, 1250, 1191,
	1625, 920, 1612, 745, 513, 1703, 183, 183, 124, 1117,
	1047, 622, 1557, 125, 183, 126, 1045, 1382, 174, 1174,
	645, 491, 526, 1270, 179, 601, 743, 1173, 910, 2318,
	554, 1051, 2153, 1821, 1278, 2154, 2345, 1278, 1278, 600,
	183, 183, 183, 183, 786, 2345, 2638, 2637, 183, 183,
	2631, 2631, 2630, 1721, 2584, 2583, 2631, 2582, 1237, 1237,
	2564, 1237, 2559, 2558, 2316, 2555, 1743, 1743, 2535, 1237,
	2534, 2506, 1758, 2643, 1758, 1751, 1062, 1063, 2501, 2497,
	2489, 600, 2368, 1237, 2316, 595, 1201, 124, 2460, 505,
	2015, 2438, 1751, 610, 875, 2316, 2435, 2433, 2418, 1065,
	1237, 2316, 1237, 2417, 787, 2395, 2392, 2316, 2016, 1237,
	1237, 2375, 788, 2339, 1683, 1751, 2337, 1743, 26, 2315,
	1743, 2296, 2251, 2316, 1064, 1237, 1751, 2227, 2222, 2149,
	1084, 1687, 1687, 2150, 1614, 760, 2051, 1683, 593, 2062,
	592, 2142, 2026, 1743, 1987, 1299, 1988, 40, 1237, 1825,
	1233, 781, 1912, 1062, 1063, 1826, 1237, 2629, 41, 605,
	771, 775, 1905, 747, 1758, 1538, 1906, 1903, 1858, 1859,
	1902, 1743, 44, 1901, 1743, 1762, 1065, 1743, 1750, 1743,
	1742, 749, 1751, 750, 1743, 1087, 1088, 1089, 1090, 1686,
	1743, 2639, 1619, 1687, 1070, 1291, 1618, 2507, 51, 1292,
	2618, 1064, 141, 1743, 1758, 1062, 1063, 2368, 1092, 1093,
	1094, 1102, 1103, 1104, 2142, 1725, 1613, 1539, 2043, 1645,
	2122, 1095, 1873, 2064, 1237, 1988, 1791, 63, 1065, 1773,
	1361, 1106, 143, 1178, 64, 1520, 486, 65, 873, 955,
	144, 1062, 1063, 1931, 952, 1832, 141, 1279, 951, 950,
	1279, 1279, 949, 1064, 948, 2319, 947, 946, 945, 1084,
	1380, 1085, 944, 943, 1065, 942, 1081, 941, 751, 142,
	67, 1070, 748, 1540, 1537, 603, 143, 135, 586, 585,
	584, 552, 1062, 1063, 136, 551, 1864, 550, 549, 1064,
	548, 547, 546, 545, 183, 544, 183, 183, 183, 646,
	183, 1518, 543, 542, 541, 1065, 183, 127, 540, 539,
	2611, 538, 183, 142, 1087, 1088, 1089, 1090, 537, 536,
	521, 520, 1091, 1070, 519, 183, 183, 183, 183, 183,
	1064, 518, 517, 452, 937, 451, 530, 1086, 1085, 450,
	449, 448, 433, 432, 1062, 1063, 1099, 1107, 431, 422,
	1542, 127, 421, 1874, 1858, 1859, 183, 420, 68, 1070,
	879, 601, 2015, 419, 412, 1105, 411, 1065, 167, 166,
	183, 165, 1284, 1554, 927, 1277, 1414, 164, 163, 162,
	161, 160, 159, 1097, 128, 70, 183, 71, 1613, 158,
	1085, 157, 1064, 891, 938, 893, 183, 896, 141, 156,
	1070, 141, 939, 155, 154, 153, 1777, 152, 151, 485,
	150, 149, 104, 148, 1086, 147, 146, 1096, 145, 1552,
	1550, 1386, 1205, 1548, 916, 916, 1085, 937, 143, 1875,
	1536, 143, 912, 986, 2606, 2609, 1075, 1073, 1074, 1066,
	1067, 1068, 1069, 1071, 1072, 917, 1058, 886, 2554, 2361,
	935, 1091, 2536, 2521, 2516, 2455, 1756, 1990, 183, 2436,
	989, 2282, 1070, 2281, 2277, 142, 1086, 1085, 142, 956,
	2276, 2269, 1864, 135, 1062, 1063, 135, 2268, 2267, 2263,
	136, 2262, 2261, 136, 1100, 2260, 2254, 938, 2233, 2136,
	2131, 2130, 2129, 2072, 1986, 939, 1943, 1065, 984, 1939,
	1910, 1907, 1086, 1724, 1295, 1895, 127, 758, 1886, 1857,
	1854, 1853, 1851, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1064, 1838, 1837, 601, 2030, 1822, 1869, 1867,
	1868, 1860, 1861, 1862, 1863, 1865, 1866, 1643, 1044, 1858,
	1859, 1136, 1058, 1086, 1129, 1512, 1120, 971, 968, 1057,
	141, 1043, 2632, 1098, 2616, 2596, 1076, 1077, 1083, 1082,
	1078, 1079, 1080, 1101, 884, 1075, 1073, 1074, 1066, 1067,
	1068, 1069, 1071, 1072, 1062, 1063, 1203, 2466, 1039, 2367,
	143, 879, 2278, 1202, 2628, 2595, 987, 1262, 1062, 1063,
	2088, 2526, 1070, 2525, 1102, 1103, 1104, 1065, 2524, 2492,
	2484, 2483, 1073, 1074, 1066, 1067, 1068, 1069, 1071, 1072,
	2474, 1065, 2360, 183, 1106, 183, 2472, 142, 593, 1929,
	592, 2450, 1064, 2449, 2448, 135, 1381, 1705, 2404, 2383,
	1054, 1055, 136, 2369, 2348, 1787, 1064, 1059, 183, 183,
	2336, 2322, 1084, 2274, 1074, 1066, 1067, 1068, 1069, 1071,
	1072, 2210, 2208, 1189, 1753, 127, 2207, 1864, 1513, 1085,
	2205, 2177, 2176, 1858, 1859, 601, 2157, 1182, 1132, 2145,
	2057, 1976, 1290, 1162, 1163, 1970, 1858, 1859, 1166, 1956,
	1955, 1941, 1911, 1885, 1956, 1847, 1846, 1843, 1169, 1818,
	1813, 1187, 1070, 1506, 1165, 1168, 1630, 1087, 1088, 1089,
	1090, 1602, 1546, 1245, 759, 124, 1070, 1066, 1067, 1068,
	1069, 1071, 1072, 1181, 1172, 1158, 2256, 1860, 1861, 1862,
	1863, 1865, 1866, 1157, 1156, 1155, 1062, 1063, 1154, 1099,
	1107, 1153, 1152, 1151, 1150, 1086, 1149, 1148, 1147, 1146,
	1145, 1144, 1143, 937, 183, 1142, 1199, 1177, 1141, 1065,
	786, 1140, 1133, 2232, 1553, 1121, 183, 1120, 967, 959,
	931, 1175, 2152, 2148, 1824, 1207, 1097, 1631, 1129, 183,
	2028, 1179, 1118, 1085, 1064, 183, 1235, 183, 1203, 183,
	983, 1864, 41, 183, 1858, 1859, 1575, 1261, 2001, 1761,
	2371, 1244, 2370, 1683, 1864, 2364, 44, 1222, 2155, 1380,
	1551, 1549, 614, 938, 1547, 2017, 1205, 1238, 1042, 1170,
	787, 939, 1296, 885, 1171, 1037, 1979, 1973, 788, 1371,
	1370, 1138, 1380, 1377, 183, 183, 2033, 1969, 1909, 711,
	1908, 937, 1760, 183, 1091, 1797, 183, 1066, 1067, 1068,
	1069, 1071, 1072, 1418, 980, 1260, 1267, 2388, 1874, 1086,
	1367, 1721, 2089, 1829, 2614, 1526, 1161, 786, 2613, 2011,
	486, 1874, 2164, 2519, 1747, 2580, 183, 1100, 1031, 2579,
	2330, 183, 438, 2496, 2040, 1763, 183, 183, 1215, 183,
	1216, 183, 453, 183, 1215, 183, 1216, 759, 2429, 2428,
	2426, 938, 738, 736, 67, 912, 183, 734, 1236, 939,
	2029, 731, 183, 183, 1862, 1863, 1865, 1866, 1032, 1374,
	2425, 937, 2196, 1281, 1387, 1023, 1283, 787, 1135, 1649,
	1286, 740, 2193, 2161, 1875, 788, 2160, 1842, 2188, 1124,
	1841, 183, 1272, 1269, 439, 786, 1098, 1875, 1657, 1068,
	1069, 1071, 1072, 1840, 1415, 2342, 1101, 1839, 1075, 1073,
	1074, 1066, 1067, 1068, 1069, 1071, 1072, 1800, 1223, 1746,
	1217, 1379, 1678, 124, 1674, 1388, 1217, 981, 457, 1671,
	1488, 938, 1176, 1293, 872, 1606, 968, 1294, 1649, 939,
	1220, 1354, 68, 1346, 1215, 1368, 1216, 1648, 1605, 616,
	1358, 1449, 1448, 1858, 1859, 787, 2626, 2495, 1221, 1718,
	1384, 1372, 1411, 788, 1402, 1754, 1375, 588, 128, 70,
	982, 71, 1412, 500, 1421, 1660, 1858, 1859, 601, 1040,
	2200, 2201, 599, 601, 1395, 141, 1860, 1861, 1862, 1863,
	1865, 1866, 1983, 485, 1413, 456, 104, 1244, 1868, 1860,
	1861, 1862, 1863, 1865, 1866, 2045, 1503, 183, 2409, 183,
	1503, 1240, 183, 591, 1510, 143, 1391, 1420, 2532, 1508,
	1203, 1419, 590, 183, 710, 593, 1217, 1430, 593, 593,
	1431, 1432, 786, 2179, 1273, 183, 591, 1017, 1542, 183,
	1061, 598, 183, 658, 1521, 2082, 183, 880, 882, 1523,
	183, 996, 142, 447, 1072, 2571, 183, 1611, 1526, 2008,
	135, 1978, 2579, 183, 786, 1585, 601, 136, 183, 441,
	440, 1864, 424, 442, 1967, 966, 183, 1018, 1972, 1632,
	1213, 1538, 1789, 1790, 1659, 1224, 1514, 1511, 2477, 1633,
	127, 2009, 787, 183, 1864, 2079, 1159, 600, 2041, 1713,
	788, 2039, 2608, 1041, 183, 1650, 183, 713, 183, 2606,
	1226, 183, 1866, 183, 1410, 183, 183, 1636, 183, 183,
	1568, 1680, 1542, 937, 787, 1381, 1705, 183, 1661, 1663,
	1036, 492, 788, 1539, 957, 1030, 2008, 2379, 1874, 2186,
	961, 1608, 1609, 2598, 1622, 168, 2345, 455, 1381, 1378,
	1617, 2080, 2432, 1623, 497, 1668, 1627, 1628, 429, 1218,
	493, 1874, 2044, 1676, 1741, 1218, 1207, 614, 1440, 1447,
	1666, 1679, 1653, 732, 732, 1658, 1672, 458, 733, 712,
	1499, 1278, 732, 938, 1485, 579, 1115, 454, 977, 1540,
	1537, 939, 494, 1289, 124, 1022, 1497, 413, 1646, 742,
	124, 2503, 741, 609, 1723, 597, 1723, 1735, 1702, 1359,
	916, 1749, 916, 2551, 1875, 2180, 496, 786, 1706, 1305,
	1710, 1711, 1712, 1738, 2046, 183, 2504, 1727, 1542, 1356,
	1736, 171, 1737, 655, 1845, 1744, 1626, 1875, 2410, 935,
	1376, 183, 183, 183, 1748, 183, 1745, 1739, 1755, 1642,
	1110, 1111, 1112, 1113, 1114, 1227, 600, 2243, 1004, 978,
	1123, 1757, 1355, 979, 972, 1218, 1542, 2570, 183, 580,
	1131, 2485, 589, 2550, 1774, 2578, 1050, 787, 499, 1802,
	1166, 1493, 1169, 1502, 2576, 788, 1509, 443, 988, 1494,
	579, 1495, 997, 1163, 1162, 1500, 2353, 1392, 172, 1483,
	1486, 1390, 1764, 1396, 1027, 1397, 124, 1398, 609, 1399,
	2552, 1400, 2591, 1869, 1867, 1868, 1860, 1861, 1862, 1863,
	1865, 1866, 1305, 1305, 1060, 1715, 2486, 962, 1406, 1408,
	444, 510, 998, 954, 495, 995, 1482, 1867, 1868, 1860,
	1861, 1862, 1863, 1865, 1866, 1231, 1536, 1778, 425, 1982,
	1780, 489, 2272, 2420, 2469, 2419, 2599, 1438, 1766, 965,
	445, 1230, 446, 2604, 601, 1782, 1786, 414, 2402, 2553,
	1768, 1190, 2163, 1952, 580, 1028, 2569, 423, 977, 1948,
	1716, 1268, 1247, 1228, 581, 1185, 1185, 1124, 173, 2311,
	1366, 498, 614, 1769, 1279, 1528, 2326, 2311, 1937, 2078,
	2304, 1229, 430, 492, 1426, 1767, 1496, 426, 1560, 1560,
	1573, 2302, 2512, 1498, 1593, 1405, 2306, 427, 1597, 1598,
	1600, 1362, 1803, 1801, 2118, 1810, 497, 2617, 2312, 1256,
	1194, 1029, 493, 977, 1831, 2213, 2312, 1484, 601, 415,
	1817, 1808, 1364, 889, 888, 183, 786, 2355, 1709, 978,
	169, 183, 183, 979, 1197, 183, 1365, 1913, 176, 2305,
	183, 1828, 1919, 183, 494, 582, 1049, 2273, 1257, 2589,
	1192, 183, 1920, 1194, 1938, 1005, 2403, 183, 183, 183,
	2603, 1195, 1958, 183, 1957, 1427, 183, 1049, 496, 581,
	170, 1795, 183, 183, 183, 183, 183, 1197, 583, 508,
	1193, 1926, 183, 1918, 978, 183, 787, 1933, 979, 183,
	1932, 2325, 1621, 1624, 788, 1925, 977, 1620, 183, 1892,
	1893, 1894, 1942, 598, 1195, 2590, 1805, 909, 183, 1251,
	183, 2329, 183, 2119, 898, 2203, 1806, 1048, 2328, 2120,
	1811, 2346, 1949, 2307, 1914, 2308, 183, 1928, 2592, 1981,
	183, 2307, 2284, 2308, 2140, 183, 1545, 183, 1048, 1707,
	1708, 1190, 1196, 1989, 183, 1991, 1917, 2400, 2382, 502,
	582, 2271, 1921, 1922, 1944, 2310, 1927, 183, 937, 1252,
	1254, 907, 601, 2310, 2313, 2199, 1050, 1889, 1253, 937,
	183, 2056, 2313, 1984, 1966, 1852, 1812, 1759, 1685, 2401,
	1677, 1968, 3, 583, 1670, 1196, 495, 2013, 1035, 1975,
	1034, 2025, 960, 1890, 614, 614, 484, 34, 1783, 1026,
	1194, 1403, 2034, 1015, 877, 878, 183, 1544, 1013, 483,
	33, 1993, 1394, 1011, 1992, 1924, 874, 1139, 938, 1009,
	2546, 1021, 1234, 2509, 1197, 1007, 939, 2004, 1995, 938,
	2010, 1807, 2300, 2327, 482, 30, 2184, 939, 1809, 2018,
	1192, 481, 80, 498, 480, 79, 2309, 2024, 2182, 507,
	1001, 1195, 2162, 1997, 2309, 1719, 183, 730, 1701, 1255,
	2035, 1423, 2059, 1428, 2036, 2037, 2038, 477, 22, 1435,
	1193, 1288, 2019, 2020, 908, 2021, 2022, 2042, 1287, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 2049, 1487, 2063, 1489, 1490, 1491, 1492, 2047, 501,
	2074, 2075, 2076, 2065, 478, 23, 2068, 769, 906, 1340,
	1025, 1515, 1196, 905, 1014, 476, 28, 183, 1123, 1012,
	1953, 34, 2092, 183, 1010, 2095, 2090, 1285, 1816, 1020,
	1008, 2097, 183, 183, 33, 1819, 1006, 1555, 1556, 475,
	20, 1572, 2124, 1584, 1586, 1591, 1594, 1595, 1596, 2081,
	2083, 2084, 1835, 1836, 1282, 1280, 1232, 1953, 2125, 30,
	2123, 1000, 473, 19, 474, 18, 80, 2151, 1225, 79,
	735, 737, 468, 15, 124, 1219, 2174, 2158, 2156, 183,
	2069, 183, 2144, 1999, 2141, 2138, 469, 16, 183, 2198,
	2143, 937, 22, 2443, 467, 14, 1793, 2173, 472, 12,
	466, 10, 1884, 754, 2209, 488, 183, 183, 2166, 1593,
	1593, 1593, 1340, 1340, 1897, 1052, 2206, 2027, 2580, 2223,
	2159, 471, 7, 755, 183, 489, 2366, 2215, 2365, 470,
	6, 2226, 1385, 2175, 183, 786, 183, 183, 2147, 2187,
	2229, 2214, 786, 2217, 904, 2204, 2190, 2218, 487, 23,
	2190, 938, 1649, 2445, 2189, 1665, 2190, 2221, 2194, 939,
	28, 1664, 2225, 1794, 2197, 2245, 2219, 1681, 2224, 2216,
	1784, 2230, 1649, 1673, 1305, 465, 5, 492, 2183, 183,
	2185, 1662, 1669, 2479, 20, 2319, 2250, 1416, 1417, 1062,
	1063, 999, 2240, 1053, 2457, 787, 2431, 2285, 1056, 2246,
	497, 756, 787, 788, 1675, 1667, 493, 19, 2508, 18,
	788, 1305, 1065, 1062, 1063, 1440, 2093, 15, 2351, 1726,
	1714, 509, 1700, 1610, 1440, 2098, 1357, 1297, 1917, 2602,
	2587, 16, 2394, 183, 1858, 1859, 183, 1064, 494, 14,
	1062, 1063, 2290, 12, 1339, 10, 786, 183, 183, 2231,
	2270, 183, 183, 183, 1771, 1770, 2137, 2128, 2085, 2031,
	1429, 1064, 496, 1304, 1771, 1934, 7, 1904, 183, 1772,
	1607, 1305, 1604, 183, 6, 183, 1603, 183, 183, 183,
	1534, 2288, 1126, 2258, 183, 2077, 2287, 183, 1994, 1136,
	937, 2294, 1134, 2295, 2320, 1033, 2174, 2323, 183, 183,
	2289, 1024, 2291, 2292, 1019, 937, 787, 1016, 1002, 964,
	1360, 587, 2299, 2324, 788, 2408, 490, 2173, 1393, 1003,
	5, 2341, 1930, 1629, 2502, 2174, 2347, 1342, 2264, 1844,
	2174, 2352, 2462, 1305, 2378, 1543, 1137, 56, 2171, 632,
	2350, 2357, 2301, 2349, 2165, 1695, 2173, 1339, 1339, 1694,
	938, 2173, 789, 2175, 2286, 2356, 1369, 654, 939, 1576,
	2358, 2372, 1559, 2363, 1441, 938, 1304, 1304, 729, 1305,
	1305, 656, 1302, 939, 657, 1798, 1799, 1303, 1305, 1305,
	495, 1804, 2175, 1167, 644, 1300, 932, 2175, 1730, 1373,
	1507, 183, 1524, 183, 1827, 786, 183, 1130, 624, 1341,
	636, 635, 1522, 2384, 183, 958, 1935, 2007, 2359, 1425,
	786, 1305, 1785, 1823, 1422, 2003, 2362, 2181, 2132, 1830,
	428, 2391, 1834, 1855, 930, 2377, 1582, 1574, 2393, 1570,
	1342, 1342, 2412, 1248, 1249, 2414, 2174, 498, 1038, 1848,
	1188, 1116, 1731, 1244, 183, 985, 2411, 937, 2014, 1752,
	2396, 183, 2398, 1301, 1180, 787, 1433, 2173, 753, 183,
	183, 937, 937, 788, 752, 2615, 1363, 2413, 2174, 2434,
	787, 1765, 1109, 1123, 1108, 739, 2471, 976, 788, 183,
	1591, 1591, 1591, 2441, 183, 975, 2442, 1258, 2452, 2173,
	1951, 183, 2192, 2175, 2453, 2454, 2444, 2440, 2195, 2451,
	2597, 2446, 1341, 1341, 638, 2478, 1185, 938, 1814, 1815,
	2178, 614, 2459, 2473, 2467, 939, 183, 183, 2518, 2190,
	140, 938, 938, 183, 137, 2175, 2468, 2430, 2465, 939,
	939, 937, 2488, 139, 138, 1980, 183, 2491, 2475, 83,
	937, 937, 2490, 32, 2456, 2437, 180, 2423, 2424, 31,
	103, 417, 102, 101, 100, 99, 1301, 1301, 2494, 98,
	434, 97, 1189, 183, 96, 183, 601, 2493, 183, 459,
	786, 2499, 2500, 95, 503, 180, 94, 1305, 511, 93,
	92, 516, 2476, 91, 1881, 1882, 1883, 90, 2528, 535,
	2515, 938, 89, 2482, 2527, 88, 87, 2529, 183, 939,
	938, 938, 2533, 86, 85, 531, 528, 2531, 939, 939,
	2514, 2543, 2174, 2530, 2005, 183, 183, 183, 2545, 2544,
	82, 81, 29, 183, 25, 107, 24, 2520, 2556, 78,
	787, 77, 27, 2173, 2563, 2565, 2023, 183, 788, 2568,
	746, 746, 17, 2566, 2567, 11, 21, 61, 417, 62,
	60, 2577, 59, 614, 614, 628, 2575, 2581, 58, 13,
	2560, 2561, 2562, 2585, 54, 53, 614, 52, 50, 2175,
	2586, 49, 48, 2593, 417, 417, 779, 417, 47, 9,
	2048, 106, 180, 876, 1435, 2594, 45, 2601, 8, 43,
	2052, 2600, 42, 2053, 105, 119, 2422, 786, 116, 786,
	118, 115, 416, 117, 1340, 2058, 121, 120, 113, 2619,
	2620, 1576, 1576, 111, 2066, 2627, 607, 112, 579, 114,
	110, 109, 2070, 122, 2633, 2023, 2634, 39, 2636, 2635,
	38, 2642, 2640, 2641, 37, 2644, 609, 36, 35, 2,
	1, 1340, 0, 0, 0, 2094, 0, 0, 0, 2096,
	0, 0, 0, 0, 2610, 0, 2612, 787, 0, 787,
	0, 0, 0, 0, 0, 788, 0, 788, 0, 0,
	608, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2126, 2127, 0, 0, 0, 1576, 1576, 1576,
	0, 2133, 2134, 2135, 1305, 0, 0, 0, 0, 764,
	0, 1340, 580, 0, 0, 0, 0, 2390, 2054, 2055,
	0, 0, 0, 0, 0, 0, 0, 0, 2146, 0,
	0, 0, 0, 0, 0, 773, 777, 0, 783, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2416, 0, 0, 0, 2167, 0,
	1305, 0, 0, 0, 0, 0, 0, 0, 2427, 0,
	0, 0, 0, 1340, 0, 0, 0, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110, 2111,
	2112, 2113, 2114, 2115, 2116, 2117, 0, 2121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1340,
	1340, 1185, 0, 1305, 0, 0, 0, 0, 1340, 1340,
	614, 0, 0, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 535, 0,
	535, 894, 535, 0, 899, 0, 0, 0, 0, 1339,
	902, 1340, 0, 0, 0, 0, 417, 0, 0, 2249,
	0, 0, 0, 2252, 2253, 0, 0, 2255, 1304, 535,
	535, 417, 924, 876, 2257, 0, 2259, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1339, 0, 0, 2505,
	0, 0, 2266, 0, 0, 0, 0, 0, 0, 0,
	535, 0, 0, 0, 0, 1304, 606, 0, 582, 0,
	0, 0, 0, 0, 535, 2522, 2523, 0, 0, 0,
	0, 1576, 1576, 0, 0, 2275, 0, 0, 0, 0,
	963, 0, 1342, 0, 0, 0, 0, 0, 0, 0,
	535, 583, 0, 0, 0, 0, 1339, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1304, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 2321, 0, 0, 0, 0,
	1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
	1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 0,
	1576, 0, 417, 0, 1341, 0, 0, 777, 1339, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 0, 0,
	0, 0, 783, 0, 0, 0, 0, 1304, 0, 1342,
	0, 0, 0, 0, 0, 0, 633, 75, 0, 0,
	0, 1341, 0, 0, 1339, 1339, 0, 0, 0, 0,
	2373, 2374, 0, 1339, 1339, 0, 0, 0, 1301, 0,
	0, 0, 0, 1304, 1304, 0, 0, 0, 0, 0,
	0, 0, 1304, 1304, 0, 0, 0, 0, 0, 0,
	0, 2386, 0, 0, 0, 0, 1339, 2389, 0, 0,
	0, 1342, 0, 0, 0, 1301, 0, 0, 0, 0,
	0, 1341, 75, 0, 0, 1304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 1342, 0,
	0, 2421, 0, 0, 0, 0, 1342, 1342, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 777, 0, 1301, 0, 516, 0, 746,
	0, 594, 0, 1341, 602, 0, 0, 0, 0, 1342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	765, 75, 417, 417, 0, 0, 0, 0, 2381, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1341,
	1341, 0, 0, 0, 0, 0, 0, 2470, 1341, 1341,
	0, 0, 0, 0, 0, 0, 0, 1301, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 0, 2405,
	0, 0, 0, 0, 1340, 0, 41, 0, 0, 0,
	0, 1341, 0, 0, 0, 0, 0, 0, 0, 0,
	44, 614, 1339, 1301, 1301, 0, 0, 0, 0, 0,
	0, 0, 1301, 1301, 0, 0, 0, 0, 0, 0,
	0, 1304, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 180, 0,
	1340, 0, 0, 0, 0, 1301, 0, 0, 0, 2458,
	417, 0, 0, 0, 0, 63, 2542, 2542, 0, 0,
	0, 0, 64, 1266, 486, 65, 0, 0, 0, 417,
	0, 417, 2557, 417, 0, 0, 0, 1274, 0, 0,
	0, 0, 0, 764, 1210, 1342, 0, 0, 0, 0,
	0, 0, 2542, 1340, 0, 0, 0, 0, 67, 0,
	0, 0, 0, 0, 0, 1858, 1859, 0, 1876, 1877,
	1878, 0, 0, 0, 0, 0, 0, 0, 535, 180,
	0, 2248, 0, 0, 0, 0, 0, 180, 0, 0,
	535, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2542, 1576, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1341, 0, 1873,
	535, 0, 0, 0, 0, 535, 0, 0, 0, 2623,
	180, 535, 0, 535, 0, 535, 0, 535, 0, 535,
	0, 2623, 1576, 0, 2623, 2623, 68, 0, 0, 0,
	1404, 0, 0, 0, 0, 0, 535, 535, 0, 0,
	0, 1243, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1301, 128, 70, 0, 71, 0, 0, 0, 1339,
	777, 0, 1271, 1864, 1271, 535, 0, 0, 0, 141,
	0, 0, 0, 0, 1401, 0, 0, 485, 1304, 0,
	104, 0, 0, 0, 1858, 1859, 0, 1876, 1877, 1878,
	602, 0, 1576, 0, 0, 0, 0, 0, 0, 143,
	2247, 0, 0, 0, 0, 1879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1339, 0, 1062, 1063, 0,
	1092, 1093, 1094, 1102, 1103, 1104, 0, 0, 0, 0,
	1874, 0, 0, 1095, 1304, 0, 142, 0, 1873, 0,
	1065, 0, 1342, 1106, 135, 1858, 1859, 0, 1876, 1877,
	1878, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1339, 0,
	0, 1084, 0, 0, 127, 0, 0, 0, 1081, 0,
	0, 516, 0, 746, 0, 0, 876, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 417, 1342, 1873,
	0, 0, 1864, 0, 0, 0, 1875, 0, 0, 1641,
	0, 0, 0, 417, 1341, 0, 417, 0, 0, 0,
	1654, 0, 0, 0, 417, 0, 1087, 1088, 1089, 1090,
	417, 594, 0, 0, 0, 1070, 0, 417, 0, 0,
	0, 0, 1684, 0, 1879, 0, 0, 0, 0, 0,
	1691, 1342, 1119, 0, 1122, 0, 0, 0, 1099, 1107,
	0, 1127, 0, 1864, 0, 0, 0, 876, 1301, 1874,
	1341, 0, 0, 0, 0, 0, 0, 1105, 417, 0,
	1734, 0, 535, 0, 0, 535, 0, 535, 0, 417,
	417, 0, 1740, 876, 0, 1097, 1870, 1871, 1872, 0,
	0, 1654, 1085, 0, 0, 1869, 1867, 1868, 1860, 1861,
	1862, 1863, 1865, 1866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 1301, 0, 0, 0, 1198, 1096,
	1874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 1875, 0, 0, 764, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 1091, 764, 0, 0, 1644, 0, 44,
	0, 0, 0, 0, 0, 777, 0, 1301, 1086, 0,
	0, 777, 0, 0, 0, 0, 0, 0, 783, 75,
	0, 0, 0, 0, 1206, 51, 1100, 0, 0, 1776,
	0, 0, 0, 0, 0, 0, 1875, 0, 0, 0,
	0, 0, 0, 0, 0, 417, 417, 417, 0, 417,
	0, 0, 0, 0, 63, 0, 0, 0, 0, 1732,
	0, 64, 0, 486, 65, 1870, 1871, 1872, 0, 0,
	783, 783, 417, 0, 1869, 1867, 1868, 1860, 1861, 1862,
	1863, 1865, 1866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1098, 0, 67, 1076, 1077,
	1083, 1082, 1078, 1079, 1080, 1101, 0, 1075, 1073, 1074,
	1066, 1067, 1068, 1069, 1071, 1072, 0, 0, 0, 0,
	0, 0, 0, 0, 1900, 0, 1870, 1871, 1872, 0,
	0, 0, 0, 0, 462, 1869, 1867, 1868, 1860, 1861,
	1862, 1863, 1865, 1866, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	1858, 1859, 0, 1876, 1877, 1878, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 68, 2061, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1779, 783, 1781, 0,
	777, 0, 0, 0, 0, 0, 51, 0, 0, 0,
	0, 128, 70, 0, 71, 0, 0, 0, 0, 0,
	0, 0, 0, 1796, 1873, 0, 0, 0, 141, 0,
	0, 0, 0, 0, 0, 63, 485, 0, 0, 104,
	0, 0, 64, 0, 486, 65, 0, 0, 0, 417,
	0, 0, 0, 0, 0, 417, 417, 0, 143, 417,
	0, 0, 0, 0, 1641, 0, 0, 1641, 0, 0,
	0, 0, 0, 0, 0, 1940, 0, 75, 67, 0,
	0, 417, 1946, 1947, 0, 0, 0, 1654, 1864, 0,
	1954, 0, 0, 0, 0, 142, 1959, 1960, 1962, 1964,
	1965, 0, 0, 135, 0, 0, 417, 0, 594, 1974,
	136, 594, 594, 1977, 0, 0, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 0, 0, 0, 0, 0,
	1879, 0, 1266, 127, 1266, 40, 535, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	417, 0, 0, 0, 2002, 1874, 0, 0, 0, 417,
	44, 2012, 0, 0, 1505, 0, 68, 0, 417, 0,
	0, 0, 0, 0, 0, 0, 0, 602, 0, 0,
	0, 1776, 1122, 0, 1858, 1859, 51, 1876, 1877, 1878,
	0, 0, 128, 70, 1776, 71, 0, 0, 0, 0,
	764, 0, 0, 0, 0, 0, 764, 764, 0, 141,
	764, 0, 0, 0, 0, 63, 0, 485, 0, 0,
	104, 0, 64, 0, 486, 65, 0, 0, 0, 0,
	417, 1875, 1945, 0, 0, 0, 0, 0, 1873, 143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 765,
	0, 0, 0, 0, 0, 0, 0, 1971, 67, 0,
	0, 0, 0, 0, 0, 1206, 0, 0, 0, 0,
	0, 0, 0, 1985, 0, 0, 142, 0, 75, 0,
	2087, 0, 0, 0, 135, 0, 75, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1996, 1864, 0, 0, 0, 0, 0, 0, 0,
	1243, 0, 0, 0, 463, 0, 0, 0, 0, 1243,
	0, 1870, 1871, 1872, 0, 0, 1880, 75, 0, 75,
	1869, 1867, 1868, 1860, 1861, 1862, 1863, 1865, 1866, 0,
	0, 0, 0, 0, 1879, 0, 68, 0, 75, 0,
	0, 0, 0, 0, 75, 1858, 1859, 0, 1876, 1877,
	1878, 417, 0, 0, 0, 0, 0, 1641, 0, 1874,
	0, 2060, 128, 70, 0, 71, 876, 1641, 0, 0,
	0, 2050, 0, 0, 0, 0, 0, 0, 0, 141,
	0, 2170, 0, 0, 0, 0, 0, 485, 0, 0,
	104, 0, 0, 0, 2191, 0, 0, 0, 2191, 1873,
	0, 0, 0, 0, 2191, 0, 0, 0, 0, 143,
	0, 0, 0, 1654, 0, 1266, 0, 0, 0, 0,
	0, 0, 2211, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1875, 0, 0, 0, 0,
	417, 417, 0, 0, 0, 0, 142, 0, 0, 0,
	75, 0, 0, 0, 135, 0, 0, 0, 2237, 0,
	0, 136, 0, 1864, 0, 0, 0, 0, 2239, 0,
	2241, 417, 0, 0, 0, 0, 0, 0, 1858, 1859,
	0, 1876, 1877, 1878, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 764, 0, 0, 1879, 0, 0, 0, 0,
	0, 0, 0, 2265, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1870, 1871, 1872, 0, 0,
	1874, 0, 1873, 1505, 1869, 1867, 1868, 1860, 1861, 1862,
	1863, 1865, 1866, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 417, 0, 0,
	876, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1641, 876, 0, 0, 2297, 2298, 1654, 0, 0,
	0, 1732, 764, 0, 0, 0, 1864, 0, 0, 0,
	0, 2170, 876, 0, 0, 0, 1875, 2331, 0, 2332,
	0, 417, 2334, 2335, 0, 0, 0, 0, 417, 0,
	0, 2340, 2242, 0, 0, 0, 0, 1122, 0, 0,
	2170, 0, 876, 1691, 0, 2170, 0, 0, 1879, 1062,
	1063, 0, 1092, 1093, 1094, 1102, 1103, 1104, 0, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 765, 1065, 1874, 0, 1106, 0, 765, 765, 0,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	0, 0, 0, 1084, 0, 0, 1870, 1871, 1872, 0,
	1081, 0, 0, 0, 0, 1869, 1867, 1868, 1860, 1861,
	1862, 1863, 1865, 1866, 75, 0, 0, 0, 764, 0,
	0, 0, 75, 0, 0, 1654, 0, 2397, 0, 0,
	2399, 0, 0, 0, 0, 0, 0, 0, 417, 1875,
	0, 2170, 0, 0, 0, 0, 0, 75, 1087, 1088,
	1089, 1090, 0, 0, 0, 0, 0, 1070, 0, 0,
	0, 75, 2333, 0, 0, 0, 0, 2191, 0, 2338,
	0, 602, 0, 2170, 0, 0, 0, 0, 417, 0,
	1099, 1107, 0, 0, 0, 876, 0, 0, 0, 0,
	0, 0, 0, 2237, 2237, 0, 0, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2464, 0, 0, 0, 1097, 1641, 0,
	0, 0, 0, 0, 1085, 1266, 0, 0, 0, 1870,
	1871, 1872, 0, 0, 0, 0, 0, 0, 1869, 1867,
	1868, 1860, 1861, 1862, 1863, 1865, 1866, 0, 0, 0,
	2480, 2481, 0, 0, 0, 0, 0, 417, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2498, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1091, 0, 0, 0, 2406,
	0, 0, 0, 0, 0, 0, 0, 2513, 0, 876,
	1086, 0, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2170, 1100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2439,
	0, 0, 2464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	876, 876, 0, 0, 0, 0, 0, 417, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2574, 0, 765, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1098, 0, 0,
	1076, 1077, 1083, 1082, 1078, 1079, 1080, 1101, 0, 1075,
	1073, 1074, 1066, 1067, 1068, 1069, 1071, 1072, 2487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 652, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2517, 185, 186, 0, 187, 0, 0,
	0, 0, 669, 765, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 668, 361, 362, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 1732, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 670, 671,
	0, 715, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 765,
	234, 0, 717, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 0, 0, 0, 678, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 75,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 675, 676,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2447, 0, 0, 0, 0, 2172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 785, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 791, 187, 792, 793,
	794, 795, 352, 796, 797, 798, 799, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 800, 192, 359,
	360, 193, 194, 195, 801, 802, 361, 362, 363, 803,
	196, 364, 804, 790, 805, 197, 198, 199, 0, 201,
	202, 203, 200, 806, 204, 1122, 205, 206, 807, 714,
	207, 208, 209, 808, 809, 811, 810, 812, 813, 814,
	210, 211, 418, 212, 365, 213, 366, 367, 815, 214,
	816, 215, 817, 216, 818, 819, 217, 218, 820, 219,
	821, 0, 822, 368, 220, 222, 221, 223, 369, 370,
	823, 715, 824, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 825, 227, 826, 827, 716, 828,
	228, 374, 829, 375, 830, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 718, 831, 378, 237, 832,
	234, 833, 717, 235, 379, 236, 380, 381, 382, 383,
	384, 834, 385, 835, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 836, 245, 244, 837, 388, 721,
	246, 247, 722, 838, 248, 249, 839, 840, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 841, 842, 843, 390, 261, 391, 262,
	263, 844, 264, 845, 846, 265, 847, 848, 266, 392,
	725, 267, 726, 393, 268, 269, 270, 271, 272, 849,
	273, 394, 274, 395, 275, 850, 276, 277, 278, 279,
	280, 396, 281, 282, 851, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 852, 295,
	727, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 853, 308, 309, 398, 307, 310, 311, 854, 312,
	299, 300, 313, 728, 314, 399, 400, 315, 855, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 856,
	323, 857, 324, 325, 326, 327, 328, 329, 330, 331,
	858, 403, 404, 405, 859, 860, 332, 333, 406, 407,
	861, 334, 335, 336, 337, 862, 863, 338, 339, 340,
	341, 864, 342, 865, 408, 343, 344, 345, 409, 410,
	866, 867, 346, 868, 869, 870, 871, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 785, 0,
	0, 0, 0, 0, 1634, 0, 0, 0, 0, 0,
	0, 0, 0, 1635, 185, 186, 791, 187, 792, 793,
	794, 795, 352, 796, 797, 798, 799, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 800, 192, 359,
	360, 193, 194, 195, 801, 802, 361, 362, 363, 803,
	196, 364, 804, 790, 805, 197, 198, 199, 0, 201,
	202, 203, 200, 806, 204, 0, 205, 206, 807, 714,
	207, 208, 209, 808, 809, 811, 810, 812, 813, 814,
	210, 211, 418, 212, 365, 213, 366, 367, 815, 214,
	816, 215, 817, 216, 818, 819, 217, 218, 820, 219,
	821, 0, 822, 368, 220, 222, 221, 223, 369, 370,
	823, 715, 824, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 825, 227, 826, 827, 716, 828,
	228, 374, 829, 375, 830, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 718, 831, 378, 237, 832,
	234, 833, 717, 235, 379, 236, 380, 381, 382, 383,
	384, 834, 385, 835, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 836, 245, 244, 837, 388, 721,
	246, 247, 722, 838, 248, 249, 839, 840, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 841, 842, 843, 390, 261, 391, 262,
	263, 844, 264, 845, 846, 265, 847, 848, 266, 392,
	725, 267, 726, 393, 268, 269, 270, 271, 272, 849,
	273, 394, 274, 395, 275, 850, 276, 277, 278, 279,
	280, 396, 281, 282, 851, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 852, 295,
	727, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 853, 308, 309, 398, 307, 310, 311, 854, 312,
	299, 300, 313, 728, 314, 399, 400, 315, 855, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 856,
	323, 857, 324, 325, 326, 327, 328, 329, 330, 331,
	858, 403, 404, 405, 859, 860, 332, 333, 406, 407,
	861, 334, 335, 336, 337, 862, 863, 338, 339, 340,
	341, 864, 342, 865, 408, 343, 344, 345, 409, 410,
	866, 867, 346, 868, 869, 870, 871, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 785,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2293, 185, 186, 791, 187, 792,
	793, 794, 795, 352, 796, 797, 798, 799, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 800, 192,
	359, 360, 193, 194, 195, 801, 802, 361, 362, 363,
	803, 196, 364, 804, 790, 805, 197, 198, 199, 0,
	201, 202, 203, 200, 806, 204, 0, 205, 206, 807,
	714, 207, 208, 209, 808, 809, 811, 810, 812, 813,
	814, 210, 211, 418, 212, 365, 213, 366, 367, 815,
	214, 816, 215, 817, 216, 818, 819, 217, 218, 820,
	219, 821, 0, 822, 368, 220, 222, 221, 223, 369,
	370, 823, 715, 824, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 825, 227, 826, 827, 716,
	828, 228, 374, 829, 375, 830, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 718, 831, 378, 237,
	832, 234, 833, 717, 235, 379, 236, 380, 381, 382,
	383, 384, 834, 385, 835, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 836, 245, 244, 837, 388,
	721, 246, 247, 722, 838, 248, 249, 839, 840, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 841, 842, 843, 390, 261, 391,
	262, 263, 844, 264, 845, 846, 265, 847, 848, 266,
	392, 725, 267, 726, 393, 268, 269, 270, 271, 272,
	849, 273, 394, 274, 395, 275, 850, 276, 277, 278,
	279, 280, 396, 281, 282, 851, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 852,
	295, 727, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 853, 308, 309, 398, 307, 310, 311, 854,
	312, 299, 300, 313, 728, 314, 399, 400, 315, 855,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	856, 323, 857, 324, 325, 326, 327, 328, 329, 330,
	331, 858, 403, 404, 405, 859, 860, 332, 333, 406,
	407, 861, 334, 335, 336, 337, 862, 863, 338, 339,
	340, 341, 864, 342, 865, 408, 343, 344, 345, 409,
	410, 866, 867, 346, 868, 869, 870, 871, 347, 348,
	349, 350, 351, 0, 0, 785, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1239, 185, 186, 791, 187, 792, 793, 794, 795, 352,
	796, 797, 798, 799, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 800, 192, 359, 360, 193, 194,
	195, 801, 802, 361, 362, 363, 803, 196, 364, 804,
	790, 805, 197, 198, 199, 0, 201, 202, 203, 200,
	806, 204, 0, 205, 206, 807, 714, 207, 208, 209,
	808, 809, 811, 810, 812, 813, 814, 210, 211, 418,
	212, 365, 213, 366, 367, 815, 214, 816, 215, 817,
	216, 818, 819, 217, 218, 820, 219, 821, 0, 822,
	368, 220, 222, 221, 223, 369, 370, 823, 715, 824,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 825, 227, 826, 827, 716, 828, 228, 374, 829,
	375, 830, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 718, 831, 378, 237, 832, 234, 833, 717,
	235, 379, 236, 380, 381, 382, 383, 384, 834, 385,
	835, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 836, 245, 244, 837, 388, 721, 246, 247, 722,
	838, 248, 249, 839, 840, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	841, 842, 843, 390, 261, 391, 262, 263, 844, 264,
	845, 846, 265, 847, 848, 266, 392, 725, 267, 726,
	393, 268, 269, 270, 271, 272, 849, 273, 394, 274,
	395, 275, 850, 276, 277, 278, 279, 280, 396, 281,
	282, 851, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 852, 295, 727, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 853, 308,
	309, 398, 307, 310, 311, 854, 312, 299, 300, 313,
	728, 314, 399, 400, 315, 855, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 856, 323, 857, 324,
	325, 326, 327, 328, 329, 330, 331, 858, 403, 404,
	405, 859, 860, 332, 333, 406, 407, 861, 334, 335,
	336, 337, 862, 863, 338, 339, 340, 341, 864, 342,
	865, 408, 343, 344, 345, 409, 410, 866, 867, 346,
	868, 869, 870, 871, 347, 348, 349, 350, 351, 1533,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 1530,
	187, 0, 0, 0, 0, 669, 634, 0, 0, 0,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 1531, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 1529, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 621, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 1532, 185, 186, 0, 187, 0, 0, 627,
	1527, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 615, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	141, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	143, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 940, 708, 0,
	0, 346, 0, 0, 0, 135, 347, 348, 349, 350,
	351, 621, 136, 603, 0, 652, 641, 642, 639, 640,
	631, 619, 0, 0, 0, 0, 617, 618, 0, 0,
	0, 185, 186, 0, 187, 1125, 0, 0, 0, 669,
	634, 630, 0, 0, 188, 189, 190, 353, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 209,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 141, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 143, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 940, 708, 0, 0, 346,
	0, 0, 0, 135, 347, 348, 349, 350, 351, 621,
	136, 652, 641, 642, 639, 640, 631, 0, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 185, 186, 0,
	187, 0, 0, 1125, 0, 669, 634, 0, 0, 630,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 306, 141, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 143, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 940, 708, 0, 0, 346, 0, 0, 0, 135,
	347, 348, 349, 350, 351, 621, 136, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 185, 186, 0, 187, 0, 0, 1125,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 1587, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 1592, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 1588, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 1589, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 611, 0, 652, 641, 642, 639, 640, 631,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 0,
	185, 186, 0, 187, 0, 627, 0, 0, 669, 634,
	0, 630, 0, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 615, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 613,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 0,
	652, 641, 642, 639, 640, 631, 0, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 185, 186, 0, 187,
	0, 0, 627, 0, 669, 634, 0, 0, 630, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 2220, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 1186, 185, 186, 0, 187, 0, 0, 627, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 1437, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 1436, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 185, 186,
	0, 187, 0, 0, 627, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 615, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 613, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 0, 652, 641,
	642, 639, 640, 631, 0, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 185, 186, 0, 187, 0, 0,
	627, 0, 669, 634, 0, 0, 630, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 637, 668, 688, 689, 363, 0,
	196, 680, 0, 660, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 661, 662, 664, 0, 663, 665,
	210, 211, 418, 212, 690, 213, 691, 692, 2624, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 625, 220, 222, 221, 223, 670, 671,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 681, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 677, 679, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 682, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 2625, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 620, 0, 649, 678, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 672, 268, 269, 270, 271, 272, 0,
	273, 673, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 626, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 666, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 674, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 675, 676,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 667, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 621, 0, 652, 641, 642, 639, 640, 631,
	0, 0, 619, 0, 0, 0, 0, 617, 618, 0,
	185, 186, 0, 187, 0, 0, 627, 0, 669, 634,
	0, 0, 630, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 213, 691, 692, 615, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 621, 0,
	652, 641, 642, 639, 640, 631, 0, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 185, 186, 0, 187,
	0, 0, 627, 0, 669, 634, 0, 0, 630, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 2073, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 0, 652, 641, 642, 639,
	640, 631, 0, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 185, 186, 0, 187, 0, 0, 627, 0,
	669, 634, 0, 0, 630, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 0, 652, 641, 642, 639, 640, 631, 0, 0,
	619, 0, 0, 0, 0, 617, 618, 1186, 185, 186,
	0, 187, 0, 0, 627, 0, 669, 634, 0, 0,
	630, 188, 189, 190, 353, 684, 355, 685, 191, 686,
	687, 0, 192, 359, 360, 193, 194, 195, 637, 668,
	688, 689, 363, 0, 196, 680, 0, 660, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 661, 662,
	664, 0, 663, 665, 210, 211, 418, 212, 690, 213,
	691, 692, 0, 214, 0, 215, 0, 216, 0, 0,
	683, 218, 0, 219, 0, 0, 0, 625, 220, 222,
	221, 223, 670, 671, 648, 715, 0, 0, 0, 0,
	0, 224, 225, 693, 694, 695, 0, 226, 0, 227,
	0, 1592, 716, 0, 228, 681, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 677, 679, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 696, 236,
	697, 698, 699, 700, 701, 0, 659, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 682, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 620, 0, 649,
	678, 261, 702, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 672, 268, 269,
	270, 271, 272, 0, 273, 673, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 703, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 626, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 666, 312, 299, 300, 313, 728, 314, 704,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 705,
	319, 320, 674, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 706, 707, 0, 0,
	332, 333, 675, 676, 647, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 667, 342, 0, 408, 343,
	344, 345, 409, 708, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 621, 1637, 0, 652,
	641, 642, 639, 640, 631, 0, 619, 0, 0, 0,
	0, 617, 618, 0, 0, 185, 186, 0, 187, 0,
	627, 0, 0, 669, 634, 0, 630, 0, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 1601, 0, 652, 641, 642, 639,
	640, 631, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 0, 185, 186, 0, 187, 0, 627, 0, 0,
	669, 634, 0, 630, 0, 188, 189, 190, 353, 684,
	355, 685, 191, 686, 687, 0, 192, 359, 360, 193,
	194, 195, 637, 668, 688, 689, 363, 0, 196, 680,
	0, 660, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 661, 662, 664, 0, 663, 665, 210, 211,
	418, 212, 690, 213, 691, 692, 0, 214, 0, 215,
	0, 216, 0, 0, 683, 218, 0, 219, 0, 0,
	0, 625, 220, 222, 221, 223, 670, 671, 648, 715,
	0, 0, 0, 0, 0, 224, 225, 693, 694, 695,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 681,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 677, 679, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 696, 236, 697, 698, 699, 700, 701, 0,
	659, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 682, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 620, 0, 649, 678, 261, 702, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 672, 268, 269, 270, 271, 272, 0, 273, 673,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 703,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 626, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 666, 312, 299, 300,
	313, 728, 314, 704, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 705, 319, 320, 674, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	706, 707, 0, 0, 332, 333, 675, 676, 647, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 667,
	342, 0, 408, 343, 344, 345, 409, 708, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	621, 1599, 0, 652, 641, 642, 639, 640, 631, 0,
	619, 0, 0, 0, 0, 617, 618, 0, 0, 185,
	186, 0, 187, 0, 627, 0, 0, 669, 634, 0,
	630, 0, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 1583, 0,
	652, 641, 642, 639, 640, 631, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 185, 186, 0, 187,
	0, 627, 0, 0, 669, 634, 0, 630, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 1571, 0, 652, 641, 642,
	639, 640, 631, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 0, 185, 186, 0, 187, 0, 627, 0,
	0, 669, 634, 0, 630, 0, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 1569, 0, 1561, 641, 642, 639, 640, 631,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 0,
	185, 186, 0, 187, 0, 627, 0, 0, 669, 634,
	0, 630, 0, 188, 189, 190, 353, 684, 355, 685,
	191, 686, 687, 0, 192, 359, 360, 193, 194, 195,
	637, 668, 688, 689, 363, 0, 196, 680, 0, 660,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	661, 662, 664, 0, 663, 665, 210, 211, 418, 212,
	690, 1564, 691, 692, 0, 214, 0, 215, 0, 216,
	0, 0, 683, 218, 0, 219, 0, 0, 0, 625,
	220, 222, 221, 223, 670, 671, 648, 715, 0, 0,
	0, 0, 0, 224, 225, 693, 694, 695, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 681, 0, 375,
	0, 0, 229, 1565, 0, 0, 231, 232, 233, 677,
	679, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	696, 236, 697, 698, 699, 700, 701, 0, 659, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 682, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 1566,
	1563, 256, 389, 255, 724, 257, 258, 260, 259, 620,
	0, 649, 678, 261, 702, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 672,
	268, 269, 270, 271, 272, 0, 273, 673, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 703, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 626,
	298, 0, 302, 303, 304, 305, 1567, 0, 308, 309,
	398, 307, 310, 311, 666, 312, 299, 300, 313, 728,
	314, 704, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 705, 319, 320, 674, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 706, 707,
	0, 0, 332, 333, 675, 676, 647, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 667, 342, 0,
	408, 343, 344, 345, 409, 708, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 1562, 351, 621, 1558,
	0, 1561, 641, 642, 639, 640, 631, 0, 619, 0,
	0, 0, 0, 617, 618, 0, 0, 185, 186, 0,
	187, 0, 627, 0, 0, 669, 634, 0, 630, 0,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 1564, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	1565, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 1566, 1563, 256, 389,
	255, 724, 257, 258, 260, 259, 620, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 626, 298, 0, 302,
	303, 304, 305, 1567, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 1562, 351, 621, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 619, 0, 0, 0, 0,
	617, 618, 0, 185, 186, 0, 187, 0, 0, 627,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 185,
	186, 1424, 187, 1129, 0, 627, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 209, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 883, 0,
	652, 641, 642, 639, 640, 631, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 0, 185, 186, 0, 187,
	0, 627, 0, 0, 669, 634, 0, 630, 0, 188,
	189, 190, 353, 684, 355, 685, 191, 686, 687, 0,
	192, 359, 360, 193, 194, 195, 637, 668, 688, 689,
	363, 0, 196, 680, 0, 660, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 661, 662, 664, 0,
	663, 665, 210, 211, 418, 212, 690, 213, 691, 692,
	0, 214, 0, 215, 0, 216, 0, 0, 683, 218,
	0, 219, 0, 0, 0, 625, 220, 222, 221, 223,
	670, 671, 648, 715, 0, 0, 0, 0, 0, 224,
	225, 693, 694, 695, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 681, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 677, 679, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 696, 236, 697, 698,
	699, 700, 701, 0, 659, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	682, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 620, 0, 649, 678, 261,
	702, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 672, 268, 269, 270, 271,
	272, 0, 273, 673, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 703, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 626, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	666, 312, 299, 300, 313, 728, 314, 704, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 705, 319, 320,
	674, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 706, 707, 0, 0, 332, 333,
	675, 676, 647, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 667, 342, 0, 408, 343, 344, 345,
	409, 708, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 621, 881, 0, 652, 641, 642,
	639, 640, 631, 0, 619, 0, 0, 0, 0, 617,
	618, 0, 0, 185, 186, 0, 187, 0, 627, 0,
	0, 669, 634, 0, 630, 0, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 637, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 625, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 620, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 626, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 621, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 619, 0, 0, 0, 0, 617, 618, 0, 185,
	186, 0, 187, 0, 0, 627, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 353, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 2541, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	718, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 719,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 722, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 728, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 2540, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 621, 0, 652,
	641, 642, 639, 640, 631, 0, 0, 619, 0, 0,
	0, 0, 617, 618, 0, 185, 186, 0, 187, 0,
	0, 627, 0, 669, 634, 0, 0, 630, 188, 189,
	190, 353, 684, 355, 685, 191, 686, 687, 0, 192,
	359, 360, 193, 194, 195, 637, 668, 688, 689, 363,
	0, 196, 680, 0, 660, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 661, 662, 664, 0, 663,
	665, 210, 211, 418, 212, 690, 213, 691, 692, 0,
	214, 0, 215, 0, 216, 0, 0, 683, 218, 0,
	219, 0, 0, 0, 625, 220, 222, 221, 223, 670,
	671, 648, 715, 0, 0, 0, 0, 0, 224, 225,
	693, 694, 695, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 681, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 677, 679, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 696, 236, 697, 698, 699,
	700, 701, 0, 659, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 682,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 620, 0, 649, 678, 261, 702,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 672, 268, 269, 270, 271, 272,
	0, 273, 673, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 703, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 626, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 666,
	312, 299, 300, 313, 728, 314, 704, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 705, 319, 320, 674,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 706, 707, 0, 0, 332, 333, 675,
	676, 647, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 667, 342, 0, 408, 343, 344, 345, 409,
	708, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 621, 0, 652, 641, 642, 639, 640,
	631, 0, 0, 619, 0, 0, 0, 0, 617, 618,
	0, 185, 186, 0, 187, 0, 0, 627, 0, 669,
	634, 0, 0, 630, 188, 189, 190, 2539, 684, 355,
	685, 191, 686, 687, 0, 192, 359, 360, 193, 194,
	195, 637, 668, 688, 689, 363, 0, 196, 680, 0,
	660, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 714, 207, 208, 2541,
	0, 661, 662, 664, 0, 663, 665, 210, 211, 418,
	212, 690, 213, 691, 692, 0, 214, 0, 215, 0,
	216, 0, 0, 683, 218, 0, 219, 0, 0, 0,
	625, 220, 222, 221, 223, 670, 671, 648, 715, 0,
	0, 0, 0, 0, 224, 225, 693, 694, 695, 0,
	226, 0, 227, 0, 0, 716, 0, 228, 681, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	677, 679, 718, 0, 378, 237, 0, 234, 0, 717,
	235, 696, 236, 697, 698, 699, 700, 701, 0, 659,
	0, 719, 238, 239, 240, 720, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 682, 721, 246, 247, 722,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 723,
	252, 254, 256, 389, 255, 724, 257, 258, 260, 259,
	620, 0, 649, 678, 261, 702, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 725, 267, 726,
	672, 268, 269, 270, 271, 272, 0, 273, 673, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 703, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 727, 296, 297,
	626, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 666, 312, 299, 300, 313,
	728, 314, 704, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 705, 319, 320, 674, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 706,
	707, 0, 0, 332, 333, 675, 676, 647, 334, 335,
	2540, 337, 0, 0, 338, 339, 340, 341, 667, 342,
	0, 408, 343, 344, 345, 409, 708, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 621,
	0, 652, 641, 642, 639, 640, 631, 0, 0, 619,
	0, 0, 0, 0, 617, 618, 0, 185, 186, 0,
	187, 0, 0, 627, 0, 669, 634, 0, 0, 630,
	188, 189, 190, 353, 684, 355, 685, 191, 686, 687,
	0, 192, 359, 360, 193, 194, 195, 637, 668, 688,
	689, 363, 0, 196, 680, 0, 660, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 714, 207, 208, 209, 0, 661, 662, 664,
	0, 663, 665, 210, 211, 418, 212, 690, 213, 691,
	692, 0, 214, 0, 215, 0, 216, 0, 0, 683,
	218, 0, 219, 0, 0, 0, 625, 220, 222, 221,
	223, 670, 671, 648, 715, 0, 0, 0, 0, 0,
	224, 225, 693, 694, 695, 0, 226, 0, 227, 0,
	0, 716, 0, 228, 681, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 677, 679, 718, 0,
	378, 237, 0, 234, 0, 717, 235, 696, 236, 697,
	698, 699, 700, 701, 0, 659, 0, 719, 238, 239,
	240, 720, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 682, 721, 246, 247, 722, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 723, 252, 254, 256, 389,
	255, 724, 257, 258, 260, 259, 0, 0, 649, 678,
	261, 702, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 725, 267, 726, 672, 268, 269, 270,
	271, 272, 0, 273, 673, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 703, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 727, 296, 297, 1581, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 666, 312, 299, 300, 313, 728, 314, 704, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 705, 319,
	320, 674, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 706, 707, 0, 0, 332,
	333, 675, 676, 647, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 667, 342, 0, 408, 343, 344,
	345, 409, 708, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 652, 641, 642,
	639, 640, 631, 0, 0, 1579, 0, 0, 0, 0,
	1577, 1578, 0, 185, 186, 0, 187, 0, 0, 1580,
	0, 669, 634, 0, 0, 630, 188, 189, 190, 353,
	684, 355, 685, 191, 686, 687, 0, 192, 359, 360,
	193, 194, 195, 0, 668, 688, 689, 363, 0, 196,
	680, 0, 660, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 714, 207,
	208, 209, 0, 661, 662, 664, 0, 663, 665, 210,
	211, 418, 212, 690, 213, 691, 692, 0, 214, 0,
	215, 0, 216, 0, 0, 683, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 670, 671, 648,
	715, 0, 0, 0, 0, 0, 224, 225, 693, 694,
	695, 0, 226, 0, 227, 0, 0, 716, 0, 228,
	681, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 677, 679, 718, 0, 378, 237, 0, 234,
	0, 717, 235, 696, 236, 697, 698, 699, 700, 701,
	0, 659, 0, 719, 238, 239, 240, 720, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 682, 721, 246,
	247, 722, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 723, 252, 254, 256, 389, 255, 724, 257, 258,
	260, 259, 0, 0, 649, 678, 261, 702, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 725,
	267, 726, 672, 268, 269, 270, 271, 272, 0, 273,
	673, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	703, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 727,
	296, 297, 1581, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 666, 312, 299,
	300, 313, 728, 314, 704, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 705, 319, 320, 674, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 706, 707, 0, 0, 332, 333, 675, 676, 647,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	667, 342, 0, 408, 343, 344, 345, 409, 708, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 652, 641, 642, 639, 640, 631, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 1580, 0, 669, 634, 0,
	0, 630, 188, 189, 190, 0, 684, 355, 685, 191,
	686, 687, 0, 192, 359, 360, 193, 194, 195, 637,
	668, 688, 689, 363, 0, 196, 680, 0, 660, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 714, 207, 208, 2541, 0, 661,
	662, 664, 0, 663, 665, 210, 211, 418, 212, 690,
	213, 691, 692, 0, 214, 0, 215, 0, 216, 0,
	0, 683, 218, 0, 219, 0, 0, 0, 625, 220,
	222, 221, 223, 670, 671, 648, 715, 0, 0, 0,
	0, 0, 224, 225, 693, 694, 695, 0, 226, 0,
	227, 0, 0, 716, 0, 228, 681, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 677, 679,
	0, 0, 378, 237, 0, 234, 0, 717, 235, 696,
	236, 697, 698, 699, 700, 701, 0, 659, 0, 0,
	238, 239, 240, 720, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 682, 721, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 723, 252, 254,
	256, 389, 255, 724, 257, 258, 260, 259, 620, 0,
	649, 678, 261, 702, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 725, 267, 726, 672, 268,
	269, 270, 271, 272, 0, 273, 673, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 703, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 727, 296, 297, 626, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 666, 312, 299, 300, 313, 0, 314,
	704, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	705, 319, 320, 674, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 706, 707, 0,
	0, 332, 333, 675, 676, 647, 334, 335, 2540, 337,
	0, 0, 338, 339, 340, 341, 667, 342, 0, 408,
	343, 344, 345, 409, 708, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 933, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 617, 618, 0, 185, 186, 0, 187, 0,
	0, 627, 0, 352, 0, 0, 0, 630, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 790, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	714, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 715, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 716,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 718, 0, 378, 237,
	0, 234, 0, 717, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 719, 238, 239, 240, 720,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	721, 246, 247, 722, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 723, 252, 254, 256, 389, 255, 724,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 725, 267, 726, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 727, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 141, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 728, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 143, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 940,
	410, 0, 0, 346, 0, 0, 0, 135, 347, 348,
	349, 350, 351, 603, 136, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 127, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 768, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 141, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 143, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 940, 410, 0, 0, 346,
	0, 0, 0, 135, 347, 348, 349, 350, 351, 0,
	136, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 762, 0, 1208, 0, 352, 0, 0, 0, 0,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 418, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 768, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 141, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 143, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 940, 410, 0, 0, 346, 0, 0, 0, 135,
	347, 348, 349, 350, 351, 603, 136, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 762, 0, 1208,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	141, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	143, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 940, 410, 0,
	0, 346, 0, 0, 0, 135, 347, 348, 349, 350,
	351, 1916, 136, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 127, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 768,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 761, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 762,
	0, 767, 0, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 768, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 762, 0, 767, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	768, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	762, 0, 767, 352, 0, 0, 0, 0, 188, 189,
	190, 353, 354, 355, 356, 191, 357, 358, 0, 192,
	359, 360, 193, 194, 195, 0, 0, 361, 362, 363,
	0, 196, 364, 0, 0, 0, 197, 198, 199, 0,
	201, 202, 203, 200, 0, 204, 0, 205, 206, 0,
	0, 207, 208, 209, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 418, 212, 365, 213, 366, 367, 0,
	214, 0, 215, 0, 216, 0, 0, 217, 218, 0,
	219, 0, 0, 0, 368, 220, 222, 221, 223, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 224, 225,
	371, 372, 373, 0, 226, 0, 227, 0, 0, 0,
	0, 228, 374, 0, 375, 0, 0, 229, 230, 0,
	0, 231, 232, 233, 376, 377, 0, 0, 378, 237,
	0, 234, 0, 0, 235, 379, 236, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 238, 239, 240, 0,
	386, 387, 241, 242, 243, 0, 245, 244, 0, 388,
	0, 246, 247, 0, 0, 248, 249, 0, 0, 250,
	0, 251, 253, 0, 252, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	0, 273, 394, 274, 395, 275, 0, 276, 277, 278,
	279, 280, 396, 281, 282, 0, 283, 284, 285, 286,
	287, 0, 289, 290, 288, 291, 292, 293, 294, 0,
	295, 0, 296, 297, 397, 298, 0, 302, 303, 304,
	305, 306, 0, 308, 309, 398, 307, 310, 311, 0,
	312, 299, 300, 313, 0, 314, 399, 400, 315, 0,
	322, 316, 317, 301, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 1241, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 1733, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 2088, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 652, 641,
	642, 639, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 1211, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 684, 355, 685, 191, 686, 687, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 688, 689, 363, 0,
	196, 364, 0, 790, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 714,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 690, 213, 691, 692, 0, 214,
	0, 215, 0, 216, 0, 0, 683, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	648, 715, 0, 0, 0, 0, 0, 224, 225, 693,
	694, 695, 0, 226, 0, 227, 0, 0, 716, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 718, 0, 378, 237, 0,
	234, 0, 717, 235, 696, 236, 697, 698, 699, 700,
	701, 0, 659, 0, 719, 238, 239, 240, 720, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 721,
	246, 247, 722, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 723, 252, 254, 256, 389, 255, 724, 257,
	258, 260, 259, 0, 0, 649, 390, 261, 702, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	725, 267, 726, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 703, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	727, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 728, 314, 704, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 705, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 706, 707, 0, 0, 332, 333, 406, 407,
	647, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 708,
	0, 506, 346, 182, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 178, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 177, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 175, 346, 182, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 181, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 178, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 177, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 182, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 352, 0, 0, 0, 181,
	188, 189, 190, 353, 354, 355, 356, 191, 357, 358,
	0, 192, 359, 360, 193, 194, 195, 0, 0, 361,
	362, 363, 0, 196, 364, 0, 0, 0, 197, 198,
	199, 0, 201, 202, 203, 200, 0, 204, 0, 205,
	206, 0, 0, 207, 208, 209, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 178, 212, 365, 213, 366,
	367, 0, 214, 0, 215, 0, 216, 0, 0, 217,
	218, 0, 219, 0, 0, 0, 368, 220, 222, 221,
	223, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	224, 225, 371, 372, 373, 0, 226, 0, 227, 0,
	0, 0, 0, 228, 374, 0, 375, 0, 0, 229,
	230, 0, 0, 231, 232, 233, 376, 377, 0, 0,
	378, 237, 0, 234, 0, 0, 235, 379, 236, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 238, 239,
	240, 0, 386, 387, 241, 242, 243, 0, 245, 244,
	0, 388, 0, 246, 247, 0, 0, 248, 249, 0,
	0, 250, 0, 251, 253, 0, 252, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 0, 273, 394, 274, 395, 275, 0, 276,
	277, 278, 279, 280, 396, 281, 282, 0, 283, 284,
	285, 286, 287, 0, 289, 290, 288, 291, 292, 293,
	294, 0, 295, 0, 296, 297, 397, 298, 0, 302,
	303, 304, 305, 306, 0, 308, 309, 398, 307, 310,
	311, 0, 312, 299, 300, 313, 0, 314, 399, 400,
	315, 0, 322, 316, 317, 301, 318, 321, 401, 319,
	320, 402, 0, 323, 177, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 182, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 181, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 990, 0,
	936, 994, 0, 0, 0, 992, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 181, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 790, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 714, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 715, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	716, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 718, 0, 378,
	237, 0, 234, 0, 717, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 719, 238, 239, 240,
	720, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 721, 246, 247, 722, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 723, 252, 254, 256, 389, 255,
	724, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 725, 267, 726, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 727, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 728, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 936, 994, 346, 0, 0, 992, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 790, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 714, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 715, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 716, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 718,
	0, 378, 237, 0, 234, 0, 717, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 719, 238,
	239, 240, 720, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 721, 246, 247, 722, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 723, 252, 254, 256,
	389, 255, 724, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 725, 267, 726, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 727, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 728, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 936, 994, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 790,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 714, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 715, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 716, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 718, 0, 378, 237, 0, 234, 0, 717, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	719, 238, 239, 240, 720, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 721, 246, 247, 722, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 723, 252,
	254, 256, 389, 255, 724, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 725, 267, 726, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 727, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 728,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 936, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 790, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 714, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 715,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 716, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 718, 0, 378, 237, 0, 234, 0,
	717, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 719, 238, 239, 240, 720, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 721, 246, 247,
	722, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	723, 252, 254, 256, 389, 255, 724, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 725, 267,
	726, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 727, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 728, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 1657,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 1655, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 1699, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 1660, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 1697,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 1659, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 1698, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 1657, 196, 364, 0, 0, 1652, 197, 198, 199,
	0, 201, 202, 203, 200, 1655, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 1660, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 1651, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 1659, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 1658, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 911, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 768, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 774, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 776, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 768, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 770, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	772, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 768, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 437, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 436, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 435, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 1640, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 2238, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 2238, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 2235, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 768, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 1409, 346, 182, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 188, 189, 190, 353, 354, 355, 356, 191,
	357, 358, 0, 192, 359, 360, 193, 194, 195, 0,
	0, 361, 362, 363, 0, 196, 364, 0, 0, 0,
	197, 198, 199, 0, 201, 202, 203, 200, 0, 204,
	0, 205, 206, 0, 0, 207, 208, 209, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 418, 212, 365,
	213, 366, 367, 0, 214, 0, 215, 0, 216, 0,
	0, 217, 218, 0, 219, 0, 0, 0, 368, 220,
	222, 221, 223, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 224, 225, 371, 372, 373, 0, 226, 0,
	227, 0, 0, 0, 0, 228, 374, 0, 375, 0,
	0, 229, 230, 0, 0, 231, 232, 233, 376, 377,
	0, 0, 378, 237, 0, 234, 0, 0, 235, 379,
	236, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	238, 239, 240, 0, 386, 387, 241, 242, 243, 0,
	245, 244, 0, 388, 0, 246, 247, 0, 0, 248,
	249, 0, 0, 250, 0, 251, 253, 0, 252, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 0, 273, 394, 274, 395, 275,
	0, 276, 277, 278, 279, 280, 396, 281, 282, 0,
	283, 284, 285, 286, 287, 0, 289, 290, 288, 291,
	292, 293, 294, 0, 295, 0, 296, 297, 397, 298,
	0, 302, 303, 304, 305, 306, 0, 308, 309, 398,
	307, 310, 311, 0, 312, 299, 300, 313, 0, 314,
	399, 400, 315, 0, 322, 316, 317, 301, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 1407, 346, 182, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 1389, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 532, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 969, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 534, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 529, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 1265, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 1264, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 532, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 969, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	376, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 534, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 529, 404,
	405, 0, 0, 332, 970, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 532, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 523, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 376, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 534,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 953, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 529, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 929, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	928, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 926, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 925, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 922, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	921, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 919, 346,
	182, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 918, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 915, 346, 182, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 188, 189, 190, 353, 354, 355,
	356, 191, 357, 358, 0, 192, 359, 360, 193, 194,
	195, 0, 0, 361, 362, 363, 0, 196, 364, 0,
	0, 0, 197, 198, 199, 0, 201, 202, 203, 200,
	0, 204, 0, 205, 206, 0, 0, 207, 208, 209,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 418,
	212, 365, 213, 366, 367, 0, 214, 0, 215, 0,
	216, 0, 0, 217, 218, 0, 219, 0, 0, 0,
	368, 220, 222, 221, 223, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 224, 225, 371, 372, 373, 0,
	226, 0, 227, 0, 0, 0, 0, 228, 374, 0,
	375, 0, 0, 229, 230, 0, 0, 231, 232, 233,
	914, 377, 0, 0, 378, 237, 0, 234, 0, 0,
	235, 379, 236, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 238, 239, 240, 0, 386, 387, 241, 242,
	243, 0, 245, 244, 0, 388, 0, 246, 247, 0,
	0, 248, 249, 0, 0, 250, 0, 251, 253, 0,
	252, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 0, 273, 394, 274,
	395, 275, 0, 276, 277, 278, 279, 280, 396, 281,
	282, 0, 283, 284, 285, 286, 287, 0, 289, 290,
	288, 291, 292, 293, 294, 0, 295, 0, 296, 297,
	397, 298, 0, 302, 303, 304, 305, 306, 0, 308,
	309, 398, 307, 310, 311, 0, 312, 299, 300, 313,
	0, 314, 399, 400, 315, 0, 322, 316, 317, 301,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 182, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 185, 186, 903, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	901, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 900, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 897, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	895, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 890, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 892, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	780, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 782, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 778, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	532, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 523, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 522,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 534, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 524, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	525, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 529, 404, 405, 0, 0,
	332, 527, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 514, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 515, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	512, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 504, 346, 182, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 188, 189, 190, 353,
	354, 355, 356, 191, 357, 358, 0, 192, 359, 360,
	193, 194, 195, 0, 0, 361, 362, 363, 0, 196,
	364, 0, 0, 0, 197, 198, 199, 0, 201, 202,
	203, 200, 0, 204, 0, 205, 206, 0, 0, 207,
	208, 209, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 418, 212, 365, 213, 366, 367, 0, 214, 0,
	215, 0, 216, 0, 0, 217, 218, 0, 219, 0,
	0, 0, 368, 220, 222, 221, 223, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 224, 225, 371, 372,
	373, 0, 226, 0, 227, 0, 0, 0, 0, 228,
	374, 0, 375, 0, 0, 229, 230, 0, 0, 231,
	232, 233, 376, 377, 0, 0, 378, 237, 0, 234,
	0, 0, 235, 379, 236, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 238, 239, 240, 0, 386, 387,
	241, 242, 243, 0, 245, 244, 0, 388, 0, 246,
	247, 0, 0, 248, 249, 0, 0, 250, 0, 251,
	253, 0, 252, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 0, 273,
	394, 274, 395, 275, 0, 276, 277, 278, 279, 280,
	396, 281, 282, 0, 283, 284, 285, 286, 287, 0,
	289, 290, 288, 291, 292, 293, 294, 0, 295, 0,
	296, 297, 397, 298, 0, 302, 303, 304, 305, 306,
	0, 308, 309, 398, 307, 310, 311, 0, 312, 299,
	300, 313, 0, 314, 399, 400, 315, 0, 322, 316,
	317, 301, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	460, 346, 182, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	302, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 312, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 1963, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	281, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 1961, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 279,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 298, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	182, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 188,
	189, 190, 353, 354, 355, 356, 191, 357, 358, 0,
	192, 359, 360, 193, 194, 195, 0, 0, 361, 362,
	363, 0, 196, 364, 0, 0, 0, 197, 198, 199,
	0, 201, 202, 203, 200, 0, 204, 0, 205, 206,
	0, 0, 207, 208, 209, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 418, 212, 365, 213, 366, 367,
	0, 214, 0, 215, 0, 216, 0, 0, 217, 218,
	0, 219, 0, 0, 0, 368, 220, 222, 221, 223,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 224,
	225, 371, 372, 373, 0, 226, 0, 227, 0, 0,
	0, 0, 228, 374, 0, 375, 0, 0, 229, 230,
	0, 0, 231, 232, 233, 1950, 377, 0, 0, 378,
	237, 0, 234, 0, 0, 235, 379, 236, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 238, 239, 240,
	0, 386, 387, 241, 242, 243, 0, 245, 244, 0,
	388, 0, 246, 247, 0, 0, 248, 249, 0, 0,
	250, 0, 251, 253, 0, 252, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 0, 273, 394, 274, 395, 275, 0, 276, 277,
	278, 279, 280, 396, 281, 282, 0, 283, 284, 285,
	286, 287, 0, 289, 290, 288, 291, 292, 293, 294,
	0, 295, 0, 296, 297, 397, 298, 0, 302, 303,
	304, 305, 306, 0, 308, 309, 398, 307, 310, 311,
	0, 312, 299, 300, 313, 0, 314, 399, 400, 315,
	0, 322, 316, 317, 301, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 182, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 188, 189, 190, 353, 354, 355, 356, 191, 357,
	358, 0, 192, 359, 360, 193, 194, 195, 0, 0,
	361, 362, 363, 0, 196, 364, 0, 0, 0, 197,
	198, 199, 0, 201, 202, 203, 200, 0, 204, 0,
	205, 206, 0, 0, 207, 208, 209, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 418, 212, 365, 213,
	366, 367, 0, 214, 0, 215, 0, 216, 0, 0,
	217, 218, 0, 219, 0, 0, 0, 368, 220, 222,
	221, 223, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 224, 225, 371, 372, 373, 0, 226, 0, 227,
	0, 0, 0, 0, 228, 374, 0, 375, 0, 0,
	229, 230, 0, 0, 231, 232, 233, 376, 377, 0,
	0, 378, 237, 0, 234, 0, 0, 235, 379, 236,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 238,
	239, 240, 0, 386, 387, 241, 242, 243, 0, 245,
	244, 0, 388, 0, 246, 247, 0, 0, 248, 249,
	0, 0, 250, 0, 251, 253, 0, 252, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 0, 273, 394, 274, 395, 275, 0,
	276, 277, 278, 279, 280, 396, 281, 282, 0, 283,
	284, 285, 286, 287, 0, 289, 290, 288, 291, 292,
	293, 294, 0, 295, 0, 296, 297, 397, 298, 0,
	515, 303, 304, 305, 306, 0, 308, 309, 398, 307,
	310, 311, 0, 312, 299, 300, 313, 0, 314, 399,
	400, 315, 0, 322, 316, 317, 301, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 182, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 352, 0,
	1275, 0, 0, 188, 189, 190, 353, 354, 355, 356,
	191, 357, 358, 0, 192, 359, 360, 193, 194, 195,
	0, 0, 361, 362, 363, 0, 196, 364, 0, 0,
	0, 197, 198, 199, 0, 201, 202, 203, 200, 0,
	204, 0, 205, 206, 0, 0, 207, 208, 209, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 418, 212,
	365, 213, 366, 367, 0, 214, 0, 215, 0, 216,
	0, 0, 217, 218, 0, 219, 0, 0, 0, 368,
	220, 222, 221, 223, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 224, 225, 371, 372, 373, 0, 226,
	0, 227, 0, 0, 0, 0, 228, 374, 0, 375,
	0, 0, 229, 230, 0, 0, 231, 232, 233, 376,
	377, 0, 0, 378, 237, 0, 234, 0, 0, 235,
	379, 236, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 238, 239, 240, 0, 386, 387, 241, 242, 243,
	0, 245, 244, 0, 388, 0, 246, 247, 0, 0,
	248, 249, 0, 0, 250, 0, 251, 253, 0, 252,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 0, 273, 394, 274, 395,
	275, 0, 276, 277, 278, 279, 280, 396, 281, 282,
	0, 283, 284, 285, 286, 287, 0, 289, 290, 288,
	291, 292, 293, 294, 0, 295, 0, 296, 297, 397,
	298, 0, 302, 303, 304, 305, 306, 0, 308, 309,
	398, 307, 310, 311, 0, 0, 299, 300, 313, 0,
	314, 399, 400, 315, 0, 322, 316, 317, 301, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 182, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 188, 189, 190, 353, 354,
	355, 356, 191, 357, 358, 0, 192, 359, 360, 193,
	194, 195, 0, 0, 361, 362, 363, 0, 196, 364,
	0, 0, 0, 197, 198, 199, 0, 201, 202, 203,
	200, 0, 204, 0, 205, 206, 0, 0, 207, 208,
	209, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	418, 212, 365, 213, 366, 367, 0, 214, 0, 215,
	0, 216, 0, 0, 217, 218, 0, 219, 0, 0,
	0, 368, 220, 222, 221, 223, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 224, 225, 371, 372, 373,
	0, 226, 0, 227, 0, 0, 0, 0, 228, 374,
	0, 375, 0, 0, 229, 230, 0, 0, 231, 232,
	233, 376, 377, 0, 0, 378, 237, 0, 234, 0,
	0, 235, 379, 236, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 238, 239, 240, 0, 386, 387, 241,
	242, 243, 0, 245, 244, 0, 388, 0, 246, 247,
	0, 0, 248, 249, 0, 0, 250, 0, 251, 253,
	0, 252, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 0, 273, 394,
	274, 395, 275, 0, 276, 277, 278, 279, 280, 396,
	744, 282, 0, 283, 284, 285, 286, 287, 0, 289,
	290, 288, 291, 292, 293, 294, 0, 295, 0, 296,
	297, 397, 298, 0, 302, 303, 304, 305, 306, 0,
	308, 309, 398, 307, 310, 311, 0, 312, 299, 300,
	313, 0, 314, 399, 400, 315, 0, 322, 316, 317,
	301, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 182, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 188, 189, 190,
	353, 354, 355, 356, 191, 357, 358, 0, 192, 359,
	360, 193, 194, 195, 0, 0, 361, 362, 363, 0,
	196, 364, 0, 0, 0, 197, 198, 199, 0, 201,
	202, 203, 200, 0, 204, 0, 205, 206, 0, 0,
	207, 208, 209, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 418, 212, 365, 213, 366, 367, 0, 214,
	0, 215, 0, 216, 0, 0, 217, 218, 0, 219,
	0, 0, 0, 368, 220, 222, 221, 223, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 224, 225, 371,
	372, 373, 0, 226, 0, 227, 0, 0, 0, 0,
	228, 374, 0, 375, 0, 0, 229, 230, 0, 0,
	231, 232, 233, 376, 377, 0, 0, 378, 237, 0,
	234, 0, 0, 235, 379, 236, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 238, 239, 240, 0, 386,
	387, 241, 242, 243, 0, 245, 244, 0, 388, 0,
	246, 247, 0, 0, 248, 249, 0, 0, 250, 0,
	251, 253, 0, 252, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 0, 271, 272, 0,
	273, 394, 274, 395, 275, 0, 276, 277, 278, 0,
	280, 396, 281, 282, 0, 283, 284, 285, 286, 287,
	0, 289, 290, 288, 291, 292, 293, 294, 0, 295,
	0, 296, 297, 397, 0, 0, 302, 303, 304, 305,
	306, 0, 308, 309, 398, 307, 310, 311, 0, 312,
	299, 300, 313, 0, 314, 399, 400, 315, 0, 322,
	316, 317, 301, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 1062, 1063, 0, 1092, 1093, 1094, 1102, 1103,
	1104, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 1106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1062, 1063, 0, 1092, 1093, 1094, 1102, 1103, 1104,
	1064, 0, 0, 0, 0, 0, 1084, 1095, 0, 0,
	0, 0, 0, 1081, 1065, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 553, 0, 579, 0,
	0, 1087, 1088, 1089, 1090, 0, 0, 0, 0, 0,
	1070, 0, 0, 0, 0, 0, 558, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 556, 0,
	0, 0, 0, 1099, 1107, 0, 0, 0, 0, 0,
	1087, 1088, 1089, 1090, 0, 0, 0, 0, 0, 1070,
	557, 0, 1105, 0, 0, 559, 0, 0, 0, 0,
	0, 0, 0, 565, 566, 0, 0, 0, 575, 0,
	1097, 0, 1099, 1107, 0, 0, 0, 1085, 0, 0,
	0, 0, 580, 560, 0, 0, 0, 0, 0, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 578, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	561, 0, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 0, 562,
	563, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 569, 0, 0,
	0, 1100, 564, 571, 0, 0, 0, 1091, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 0, 0, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1065, 567, 0, 1106,
	1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079, 1080,
	1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071,
	1072, 1064, 0, 0, 0, 0, 0, 1084, 0, 1899,
	0, 0, 0, 0, 1081, 0, 555, 572, 582, 1098,
	0, 0, 1076, 1077, 1083, 1082, 1078, 1079, 1080, 1101,
	0, 1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071, 1072,
	0, 0, 573, 0, 0, 0, 577, 0, 1898, 0,
	0, 583, 0, 0, 0, 0, 570, 574, 0, 0,
	0, 0, 1087, 1088, 1089, 1090, 0, 0, 0, 0,
	0, 1070, 576, 0, 0, 0, 1062, 1063, 0, 1092,
	1093, 1094, 1102, 1103, 1104, 0, 0, 0, 0, 0,
	0, 0, 1095, 0, 1099, 1107, 0, 0, 0, 1065,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	1084, 1097, 0, 0, 0, 0, 0, 1081, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1087, 1088, 1089, 1090, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1099, 1107, 0,
	0, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 1100, 0, 0, 0, 1105, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 1106,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1091, 0, 0, 0, 0, 0, 0, 0,
	1850, 0, 1087, 1088, 1089, 1090, 0, 1086, 0, 0,
	0, 1070, 0, 0, 0, 0, 1062, 1063, 0, 1092,
	1093, 1094, 1102, 1103, 1104, 1100, 0, 0, 0, 0,
	0, 0, 1095, 0, 1099, 1107, 0, 0, 0, 1065,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	1084, 1097, 0, 0, 0, 0, 0, 1081, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 1076, 1077, 1083,
	1082, 1078, 1079, 1080, 1101, 1096, 1075, 1073, 1074, 1066,
	1067, 1068, 1069, 1071, 1072, 0, 0, 0, 0, 2510,
	0, 0, 0, 0, 0, 1087, 1088, 1089, 1090, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1099, 1107, 0,
	0, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 1100, 0, 0, 0, 1105, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 1106,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1091, 0, 0, 0, 2461, 0, 0, 0,
	0, 0, 1087, 1088, 1089, 1090, 0, 1086, 0, 0,
	0, 1070, 0, 0, 0, 0, 1062, 1063, 0, 1092,
	1093, 1094, 1102, 1103, 1104, 1100, 0, 0, 0, 0,
	0, 0, 1095, 0, 1099, 1107, 0, 0, 0, 1065,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	1084, 1097, 0, 0, 0, 0, 0, 1081, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 1076, 1077, 1083,
	1082, 1078, 1079, 1080, 1101, 1096, 1075, 1073, 1074, 1066,
	1067, 1068, 1069, 1071, 1072, 0, 0, 0, 0, 2415,
	0, 0, 0, 0, 0, 1087, 1088, 1089, 1090, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1099, 1107, 0,
	0, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 1100, 0, 0, 0, 1105, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 1106,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1091, 0, 0, 0, 2385, 0, 0, 0,
	0, 0, 1087, 1088, 1089, 1090, 0, 1086, 0, 0,
	0, 1070, 0, 0, 0, 0, 1062, 1063, 0, 1092,
	1093, 1094, 1102, 1103, 1104, 1100, 0, 0, 0, 0,
	0, 0, 1095, 0, 1099, 1107, 0, 0, 0, 1065,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	1084, 1097, 0, 0, 0, 0, 0, 1081, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 1076, 1077, 1083,
	1082, 1078, 1079, 1080, 1101, 1096, 1075, 1073, 1074, 1066,
	1067, 1068, 1069, 1071, 1072, 0, 0, 0, 0, 2380,
	0, 0, 0, 0, 0, 1087, 1088, 1089, 1090, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1099, 1107, 0,
	0, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 1100, 0, 0, 0, 1105, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 1106,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1091, 0, 0, 0, 2376, 0, 0, 0,
	0, 0, 1087, 1088, 1089, 1090, 0, 1086, 0, 0,
	0, 1070, 0, 0, 0, 0, 1062, 1063, 0, 1092,
	1093, 1094, 1102, 1103, 1104, 1100, 0, 0, 0, 0,
	0, 0, 1095, 0, 1099, 1107, 0, 0, 0, 1065,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	1084, 1097, 0, 0, 0, 0, 0, 1081, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 1076, 1077, 1083,
	1082, 1078, 1079, 1080, 1101, 1096, 1075, 1073, 1074, 1066,
	1067, 1068, 1069, 1071, 1072, 0, 0, 0, 0, 2314,
	0, 0, 0, 0, 0, 1087, 1088, 1089, 1090, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1099, 1107, 0,
	0, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 1100, 0, 0, 0, 1105, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 1106,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1091, 0, 0, 0, 2280, 0, 0, 0,
	0, 0, 1087, 1088, 1089, 1090, 0, 1086, 0, 0,
	0, 1070, 0, 0, 0, 0, 1062, 1063, 0, 1092,
	1093, 1094, 1102, 1103, 1104, 1100, 0, 0, 0, 0,
	0, 0, 1095, 0, 1099, 1107, 0, 0, 0, 1065,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	1084, 1097, 0, 0, 0, 0, 0, 1081, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 1076, 1077, 1083,
	1082, 1078, 1079, 1080, 1101, 1096, 1075, 1073, 1074, 1066,
	1067, 1068, 1069, 1071, 1072, 0, 0, 0, 0, 2279,
	0, 0, 0, 0, 0, 1087, 1088, 1089, 1090, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1099, 1107, 0,
	0, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 1100, 0, 0, 0, 1105, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 1106,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1091, 0, 0, 0, 2244, 0, 0, 0,
	0, 0, 1087, 1088, 1089, 1090, 0, 1086, 0, 0,
	0, 1070, 0, 0, 0, 0, 1062, 1063, 0, 1092,
	1093, 1094, 1102, 1103, 1104, 1100, 0, 0, 0, 0,
	0, 0, 1095, 0, 1099, 1107, 0, 0, 0, 1065,
	0, 0, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 0, 0, 0,
	1084, 1097, 0, 0, 0, 0, 0, 1081, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 1076, 1077, 1083,
	1082, 1078, 1079, 1080, 1101, 1096, 1075, 1073, 1074, 1066,
	1067, 1068, 1069, 1071, 1072, 0, 0, 0, 0, 2091,
	0, 0, 0, 0, 0, 1087, 1088, 1089, 1090, 0,
	0, 0, 0, 0, 1070, 0, 0, 0, 0, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 1099, 1107, 0,
	0, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 1100, 0, 0, 0, 1105, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 1106,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1091, 0, 0, 0, 2067, 0, 0, 0,
	0, 0, 1087, 1088, 1089, 1090, 0, 1086, 0, 0,
	0, 1070, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 0, 0, 1076, 1077, 1083,
	1082, 1078, 1079, 1080, 1101, 1096, 1075, 1073, 1074, 1066,
	1067, 1068, 1069, 1071, 1072, 0, 0, 0, 0, 1519,
	0, 1062, 1063, 0, 1092, 1093, 1094, 1102, 1103, 1104,
	0, 0, 0, 0, 0, 0, 0, 1095, 0, 1091,
	0, 0, 0, 0, 1065, 0, 0, 1106, 0, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	1062, 1063, 0, 1092, 1093, 1094, 1102, 1103, 1104, 1064,
	0, 0, 1100, 0, 0, 1084, 1095, 0, 0, 0,
	0, 0, 1081, 1065, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 1088, 1089, 1090, 0, 0, 0, 0, 0, 1070,
	2573, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 1099, 1107, 1820, 0, 0, 0, 0, 1087,
	1088, 1089, 1090, 0, 0, 0, 0, 0, 1070, 0,
	1890, 1105, 0, 1889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 1099, 1107, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1096, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 2572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1091, 0, 0,
	0, 0, 1096, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1100,
	0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102, 1103,
	1104, 0, 0, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 1793, 0, 1065, 0, 0, 1106, 1098,
	0, 0, 1076, 1077, 1083, 1082, 1078, 1079, 1080, 1101,
	0, 1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071, 1072,
	1064, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 0, 1098, 0,
	0, 1076, 1077, 1083, 1082, 1078, 1079, 1080, 1101, 0,
	1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071, 1072, 0,
	1794, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1087, 1088, 1089, 1090, 0, 0, 0, 0, 1616,
	1070, 0, 0, 0, 0, 1062, 1063, 0, 1092, 1093,
	1094, 1102, 1103, 1104, 0, 0, 0, 0, 0, 0,
	0, 1095, 0, 1099, 1107, 1615, 0, 0, 1065, 0,
	0, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 1084,
	1097, 0, 0, 0, 0, 0, 1081, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 1088, 1089, 1090, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 1099, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 1105, 0, 0, 0, 0,
	1062, 1063, 0, 1092, 1093, 1094, 1102, 1103, 1104, 0,
	0, 0, 0, 1097, 0, 0, 1095, 0, 0, 0,
	1085, 0, 0, 1065, 0, 0, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 1064, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	1098, 1081, 0, 1076, 1077, 1083, 1082, 1078, 1079, 1080,
	1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071,
	1072, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	1088, 1089, 1090, 0, 1100, 0, 0, 0, 1070, 0,
	0, 0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102,
	1103, 1104, 0, 0, 0, 0, 0, 0, 0, 1095,
	0, 1099, 1107, 0, 0, 0, 1065, 0, 0, 1106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 0, 0, 0, 1084, 1097, 0,
	0, 0, 0, 1098, 1081, 1085, 1076, 1077, 1083, 1082,
	1078, 1079, 1080, 1101, 0, 1075, 1073, 1074, 1066, 1067,
	1068, 1069, 1071, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 600, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1087, 1088, 1089, 1090, 0, 0, 0, 0,
	0, 1070, 0, 0, 0, 0, 1091, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 1099, 1107, 0, 0, 0, 0,
	1062, 1063, 0, 1092, 1093, 1094, 1102, 1103, 1104, 1100,
	0, 0, 0, 1105, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 1065, 0, 0, 1106, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1098, 0,
	0, 1076, 1077, 1083, 1082, 1078, 1079, 1080, 1101, 0,
	1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071, 1072, 1091,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	1088, 1089, 1090, 0, 1086, 0, 0, 0, 1070, 0,
	0, 0, 0, 1896, 0, 0, 0, 0, 0, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2071,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1098, 0, 0, 1076, 1077, 1083, 1082, 1078, 1079,
	1080, 1101, 1096, 1075, 1073, 1074, 1066, 1067, 1068, 1069,
	1071, 1072, 0, 0, 0, 0, 0, 0, 1062, 1063,
	0, 1092, 1093, 1094, 1102, 1103, 1104, 0, 0, 0,
	0, 0, 0, 0, 1095, 0, 1091, 0, 1891, 0,
	0, 1065, 0, 0, 1106, 0, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 1062, 1063, 0,
	1092, 1093, 1094, 1102, 1103, 1104, 1064, 0, 0, 1100,
	0, 0, 1084, 1095, 0, 0, 0, 0, 0, 1081,
	1065, 0, 0, 1106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 0, 0, 0, 0, 0, 0, 1087, 1088, 1089,
	1090, 0, 0, 0, 0, 0, 1070, 0, 1098, 0,
	0, 1076, 1077, 1083, 1082, 1078, 1079, 1080, 1101, 0,
	1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071, 1072, 1099,
	1107, 0, 0, 0, 0, 0, 1087, 1088, 1089, 1090,
	0, 0, 0, 0, 0, 1070, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 1099, 1107,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 1856, 0, 0, 1062, 1063, 0, 1092, 1093,
	1094, 1102, 1103, 1104, 0, 0, 0, 1100, 0, 0,
	0, 1095, 0, 1091, 0, 1849, 0, 0, 1065, 0,
	0, 1106, 0, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1100, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1098, 0, 0, 1076,
	1077, 1083, 1082, 1078, 1079, 1080, 1101, 0, 1075, 1073,
	1074, 1066, 1067, 1068, 1069, 1071, 1072, 0, 0, 0,
	0, 0, 0, 0, 1087, 1088, 1089, 1090, 0, 0,
	0, 0, 0, 1070, 0, 1098, 0, 0, 1076, 1077,
	1083, 1082, 1078, 1079, 1080, 1101, 0, 1075, 1073, 1074,
	1066, 1067, 1068, 1069, 1071, 1072, 1099, 1107, 0, 0,
	0, 0, 1062, 1063, 0, 1092, 1093, 1094, 1102, 1103,
	1104, 0, 0, 0, 0, 1105, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 1065, 0, 0, 1106, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1087, 1088, 1089, 1090, 0, 1086, 0, 0, 0,
	1070, 0, 0, 0, 0, 1062, 1063, 0, 1092, 1093,
	1094, 1102, 1103, 1104, 1100, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 1107, 0, 0, 0, 1065, 0,
	0, 1106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 0, 0, 0, 1084,
	1097, 0, 0, 0, 0, 0, 1081, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 1076, 1077, 1083, 1082,
	1078, 1079, 1080, 1101, 1096, 1075, 1073, 1074, 1066, 1067,
	1068, 1069, 1071, 1072, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1087, 1088, 1089, 1090, 0, 0,
	0, 0, 0, 1070, 0, 0, 0, 0, 1091, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 0, 0, 1099, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	1085, 41, 130, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 132,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	1098, 51, 0, 1076, 1077, 1083, 1082, 1078, 1079, 1080,
	1101, 0, 1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071,
	1072, 1091, 55, 0, 0, 0, 57, 0, 0, 0,
	63, 0, 0, 133, 0, 0, 1086, 64, 0, 123,
	65, 1062, 1063, 0, 1092, 1093, 1094, 1102, 1103, 1104,
	0, 0, 0, 0, 1100, 0, 0, 0, 0, 0,
	0, 0, 66, 0, 1065, 0, 0, 1106, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 0, 0, 1076, 1077, 1083, 1082,
	1078, 1079, 1080, 1101, 0, 1075, 1073, 1074, 1066, 1067,
	1068, 1069, 1071, 1072, 0, 0, 0, 0, 0, 0,
	1087, 1088, 1089, 1090, 0, 0, 0, 0, 0, 1070,
	0, 68, 0, 0, 0, 0, 0, 69, 0, 0,
	0, 0, 1320, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 1107, 0, 0, 76, 128, 70, 0,
	71, 0, 72, 0, 134, 0, 0, 0, 0, 73,
	0, 0, 1320, 0, 141, 1328, 1317, 1347, 1306, 1338,
	1337, 0, 84, 1308, 1307, 104, 0, 0, 0, 1097,
	1349, 1348, 0, 0, 131, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 143, 1328, 1317, 1347, 1306, 1338,
	1337, 0, 0, 1308, 1307, 0, 0, 0, 0, 0,
	1349, 1348, 0, 0, 108, 0, 0, 0, 1343, 0,
	1335, 1334, 0, 129, 0, 0, 0, 0, 0, 0,
	1333, 142, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, 0, 0, 136, 1091, 1343, 0,
	1335, 1334, 0, 1332, 1330, 1331, 0, 0, 0, 0,
	1333, 0, 1086, 0, 0, 0, 0, 0, 0, 127,
	0, 0, 4, 0, 0, 0, 0, 0, 0, 0,
	1100, 1316, 0, 1332, 1330, 1331, 0, 0, 1321, 1319,
	1322, 1323, 1324, 1325, 1326, 0, 1346, 0, 0, 0,
	0, 0, 0, 1310, 1309, 0, 0, 0, 0, 0,
	0, 1316, 0, 0, 0, 0, 0, 0, 1321, 1319,
	1322, 1323, 1324, 1325, 1326, 0, 1346, 0, 0, 0,
	1312, 0, 0, 1310, 1309, 0, 0, 0, 0, 0,
	0, 0, 1336, 0, 0, 0, 1318, 0, 0, 1098,
	0, 0, 1076, 1077, 1083, 1082, 1078, 1079, 1080, 1101,
	1312, 1075, 1073, 1074, 1066, 1067, 1068, 1069, 1071, 1072,
	0, 0, 1336, 0, 0, 1329, 1318, 0, 0, 1444,
	1442, 1443, 1446, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1329, 0, 0, 1313, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1327,
	1314, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 1313, 0,
	0, 0, 1311, 0, 0, 0, 1344, 1345, 0, 1327,
	1314, 0, 0, 0, 0, 0, 0, 0, 0, 1351,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 1311, 1350, 0, 0, 1344, 1345, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 1350,
}
var sqlPact = [...]int{

	43607, -1000, -16, -1000, -1000, -1000, 163, -1000, -1000, -1000,
	-1000, 161, 160, 158, -1000, 156, 155, 153, 152, 150,
	149, 148, 144, 136, 134, 127, -1000, 126, -1000, -1000,
	-1000, -1000, 125, 124, 123, 122, 116, 114, 113, -1000,
	1313, 22504, 111, 109, 1365, -1000, 36620, 108, 102, 97,
	94, 1240, 93, 88, 87, 26636, 905, 1221, 86, 85,
	84, 80, 78, 1010, 36278, 3912, 2013, 1141, 1737, 35933,
	22159, 1667, 1499, 35588, -1000, -1000, 35243, 77, 76, 69,
	66, 65, -1000, -1000, 34898, 64, 63, 56, 54, 53,
	49, 48, 47, 40, 38, 37, 36, 35, 33, -1000,
	32, 30, 26, -1000, 39474, 25, 24, 23, 1135, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 918, 99, -1000, 1044, 403, 2624, 8640,
	1029, 1025, 1021, 1020, 1049, 38672, 36620, 17, -74, 13,
	-1000, 2011, 635, 19685, 43607, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26291,
	25946, 34553, 34208, 6501, 784, -1000, -19, 23190, 36620, -1000,
	106, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15413, 15056, 561, 106, -1000, -1000,
	-1000, -1000, -1000, 33863, -1000, 36620, 33518, 33173, 1549, 32828,
	-1000, -1000, -1000, -1000, -1000, 32483, -1000, -1000, 1921, 1749,
	1695, 25601, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 32141, 31796, 31451, 31106, 30761, 508,
	-1000, -1000, -1000, 17905, -1000, -1000, -1000, -1000, 12, -1000,
	10, -1000, 8, 7, 3, 2, -1000, 1, -1, -1000,
	-3, -6, -1000, -7, -11, 30416, 895, 1284, -1000, -1000,
	-18, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36620,
	-1000, 16125, -1000, 507, -1000, 1649, -1000, 16125, -1000, 1278,
	-1000, -1000, -1000, -1000, -1000, 36620, -1000, -1000, -1000, -1000,
	-1000, -1000, 2217, 1243, 506, 30071, -1000, 1432, -1000, 617,
	777, -1000, -1000, -1000, 9708, 179, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1456, 23546, 1219, 2045, 1838,
	2216, 1426, 1813, 1807, 1801, 1796, 1791, 2215, 964, 2212,
	1809, 1043, 2209, 1787, 1303, 691, 2203, 1647, 1645, -1000,
	-1000, -1000, -1000, 943, -1000, -1000, -1000, 28004, -1000, -1000,
	842, 916, 1044, -1000, -1000, -1000, 1539, 2003, 2003, 2003,
	2064, 296, 289, -1000, 99, -1000, 1351, -1000, 1208, -1000,
	-1000, -1000, -1000, -1000, 43322, -1000, -1000, 16125, 16125, 16125,
	16125, 16125, 1128, 522, -1000, 505, 503, 7927, -1000, -1000,
	2185, -1000, -1000, -1000, 294, -1000, -1000, 16125, 106, -1000,
	-1000, -1000, -1000, 500, 2197, -1000, 666, -1000, -1000, -1000,
	598, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1677, 499, 496, 493, -1000, 490, -1000, -1000, 489, 488,
	487, 486, 485, 484, 482, 481, 480, 479, 476, 473,
	472, 471, 463, 1027, -1000, 638, -1000, -1000, 638, 638,
	-1000, 442, 442, 443, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 442, -1000, -1000, -1000, 585, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 462,
	1187, -1000, -1000, 1187, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 782, 37988, -24, 36620, -1000, 461, -24, -1000, -1000,
	452, -1000, 11132, 11132, -1000, -1000, -1000, -1000, -1000, 10420,
	1656, -1000, 3731, -172, 331, 577, -1000, 18617, 21459, -1000,
	-1000, 993, 1876, 815, -1000, 998, 1869, 533, -1000, 1168,
	-1000, 1258, 1857, -108, 1700, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 23888, 23190, -19, -33, -1000, -1000, -1000, 6145,
	43322, -1000, 43322, -1000, 882, 20395, 106, -1000, -1000, -1000,
	-1000, 451, 1343, 1552, 623, -1000, 335, -1000, 29726, 623,
	1342, -1000, -1000, -1000, 28004, -1000, 36620, -1000, 36620, -1000,
	919, -1000, 38330, 118, 1856, -1000, -1000, 118, 1855, -1000,
	115, 1828, -1000, -1000, 1302, 1759, -1000, -33, 1752, -1000,
	-1000, 16125, -58, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	635, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 29381, 22847, 1227, 560, 43322, 2107, 43878,
	23888, 43322, 22847, -1000, -1000, 36620, -1000, 16125, -1000, 2106,
	1377, -27, -1000, -1000, -1000, -1000, -1000, 1404, 1418, 760,
	945, 9708, 9708, 1964, -1000, 167, 6501, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 29036, -1000, -1000, -1000, 1184,
	36620, -1000, -1000, 1672, -1000, 22847, 36620, -1000, 36620, -1000,
	36620, -1000, 36620, -1000, 36620, -1000, -1000, -1000, -1000, -1000,
	3202, -1000, 1661, -1000, -1000, 36620, -1000, 1398, -1000, -1000,
	-1000, 28694, 28349, -1000, 977, 835, -1000, -1000, 119, -1000,
	23888, 2032, 616, -1000, 1539, -1000, 1229, 1518, 14699, 1450,
	16125, 99, -1000, -1000, 99, 99, 9352, -1000, -1000, -1000,
	36620, -1000, 43848, 43878, 6501, 804, 16125, 16125, 16125, 16125,
	16125, 16125, 16125, 16125, 16125, 16125, 16125, 16125, 16125, 16125,
	16125, 16125, 16125, 16125, 16125, 16125, 16125, 16125, 16125, 16125,
	16125, 16125, 16125, 16125, 16125, 16125, 16125, 16125, 1318, 16125,
	780, 16125, 16125, 16125, 16125, 1250, 1148, 441, 1162, -1000,
	2140, 2140, 2140, 43445, 43445, 406, 522, -1000, 16125, -1000,
	55, 16125, 289, 41426, -22, 7571, -1000, -1000, -1000, 14343,
	636, 43322, 106, 6857, -1000, 2183, 1160, 1674, 1588, 450,
	551, 548, 547, 501, 16125, 16125, 13987, 13630, 13273, 16837,
	12916, 16125, 8283, 16125, 16125, 16125, 16125, 12559, 12202, -1000,
	449, -1000, -1000, -1000, -1000, 2179, -1000, -1000, 2175, -1000,
	801, 788, 2173, -1000, -27, -1000, 37988, -1000, 36620, -24,
	2103, 36620, -1000, 131, -1000, 42245, -1000, 131, -61, -1000,
	1513, 1508, 20040, 1509, 1180, 1180, 1180, -1000, 444, 516,
	577, 5414, 11845, -1000, 26978, 1195, 193, 284, 18261, 1656,
	-1000, 36620, -38, 1048, -1000, 25256, 2022, 2002, 1996, 28004,
	2082, 55, 2025, 1641, 779, 28004, 2016, 774, 2081, 55,
	1637, 772, 36620, 6501, 2010, 563, -1000, 36620, -1000, -1000,
	-1000, 1635, -64, -1000, -1000, 24914, 2102, 1739, -1000, 1552,
	-1000, 922, 922, 1532, 922, 922, 922, -1000, -1000, 1036,
	-1000, 2100, 36620, 1276, 1341, -1000, -1000, 819, 1736, 631,
	251, 2099, 251, 20749, -1000, 36620, -1000, 36620, -1000, -1000,
	36620, -1000, 36620, -1000, 36620, 36620, -1000, 36620, 36620, -73,
	43322, 4092, 24572, 769, -1000, 655, 24914, 878, -75, -1000,
	755, -1000, -1000, -1000, -1000, 204, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 443, 1027, 442, 442, 442, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 585, -1000, -1000, 638, 638, 638,
	-1000, -1000, -93, -1000, 1634, 599, -78, 682, -27, -1000,
	1187, -1000, 1282, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2194, -1000, 2157, -1000,
	-1000, 2172, -28, -1000, -28, -1000, 6501, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36620, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 254, -1000, -1000, -1000, -1000, -1000, -1000,
	36620, 36620, 36620, -1000, 28004, -1000, 1658, -1000, 2014, -1000,
	-1000, -1000, -1000, 43322, -1000, 383, -1000, -1000, 43322, 983,
	1526, -1000, 1526, -31, -1000, 42122, 1484, 36620, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 608,
	694, 694, 846, 846, 846, 846, 2089, 402, 594, 361,
	708, 708, 708, 708, 708, 708, 708, 708, 273, 464,
	464, 273, 273, 273, 273, 273, 708, 708, 708, 43445,
	4619, 196, 16125, 16125, 767, 1144, 441, 196, 16125, 196,
	196, 196, 196, -1000, 1495, -1000, -1000, -1000, -1000, 1633,
	438, 16837, 16837, -1000, -1000, -1000, 7927, 17193, -1000, -1000,
	-1000, -1000, 437, 16125, -1000, 41573, -228, 274, -67, -1000,
	16125, 513, -102, -1000, 879, -1000, 16125, -1000, -12, 16125,
	16125, 16125, 271, -1000, 270, -1000, 757, -1000, 753, 740,
	737, -1000, 435, 1177, 434, 433, 16125, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 43175, 39683, 259, -1000, 1632,
	-67, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 258, -1000,
	257, -1000, 42947, -67, 256, 4154, -1000, 16837, 16837, 16837,
	7927, 431, 255, -1000, 41840, -1000, 42908, 11488, 11488, 11488,
	252, 42680, 16125, -67, 39401, 39362, 3517, -80, -83, -1000,
	-86, -1000, 2170, -91, 248, 603, 601, 247, -1000, -1000,
	430, -101, 631, 11132, 19329, 6501, -1000, 631, 10420, -1000,
	20040, 20040, 1466, 1497, 20040, -1000, -1000, -1000, -1000, 26978,
	366, 577, 26978, -1000, 2168, 1437, 246, -1000, -1000, -1000,
	36620, 429, -1000, 577, 243, 1093, 36620, 36620, 36620, -1000,
	-1000, 1340, 37646, 1334, 43878, 36620, -1000, 428, 427, 1477,
	1475, 36620, 36620, 37304, 36962, 36620, 987, 55, -1000, 600,
	423, 36620, 991, 590, 36620, 55, -1000, 419, 36620, 974,
	-1000, 589, 1571, 1304, -1000, 863, 1630, 36620, 241, -109,
	-32, 43878, -1000, -1000, -1000, -1000, -1000, 36620, 432, 36620,
	55, 36620, -1000, -1000, -1000, 2167, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2193, 55, 36620, 1734, 1888, 555, 36620,
	1518, 16125, 1042, -1000, 18973, 645, 36620, 965, 105, -1000,
	-1000, -1000, 572, 36620, -1000, -1000, 118, 118, -1000, 115,
	1302, -33, -1000, 16125, -1000, -1000, 36620, 23888, -111, -1000,
	-1000, 43878, -1000, 520, 649, -1000, 2162, 604, 23888, 36620,
	9708, 9708, -1000, 1515, -1000, -1000, 941, -1000, 1022, -1000,
	-1000, -1000, -1000, 9708, -1000, -39, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1087, -1000, 983, -1000, 16125, -1000, -1000,
	-1000, 9352, -1000, -1000, -1000, 36620, -122, 16125, 196, 196,
	16125, 16837, 16837, -1000, 196, -1000, -1000, -1000, -1000, -1000,
	1628, 418, 16125, 43878, 4325, 3940, -114, -1000, 16125, -34,
	-1000, 16125, -1000, 41303, -1000, -1000, 518, 1884, -1000, 16125,
	42533, 240, 10776, -1000, 42410, -54, -54, -1000, 2190, 1369,
	1122, 1016, 932, 2161, -1000, 21104, 632, 1203, 41156, 43848,
	43878, -1000, 16125, -1000, -1000, 1624, 16125, -1000, 43848, 43878,
	16837, 16837, 16837, 16837, 16837, 16837, 16837, 16837, 16837, 16837,
	16837, 16837, 16837, 16837, 16837, 16837, 16837, 16837, 16837, 1494,
	16837, 2134, 2134, 2134, -37, 16125, -1000, 1653, 1624, 16125,
	16125, 43878, 239, 238, 237, -1000, 16125, -67, 16125, 16125,
	16125, -1000, -1000, -1000, 236, -1000, 2159, -1000, -1000, -1000,
	-1000, 878, -1000, 1586, -1000, -116, -1000, 1656, -1000, 1586,
	-1000, -1000, 1466, -1000, 417, 16125, 20040, -1000, 512, -1000,
	-124, -1000, 26978, -1000, 511, -225, -1000, 565, -1000, 577,
	414, 36620, 26978, -1000, -1000, -1000, 736, 733, 1733, -1000,
	1333, -1000, 651, -1000, 1013, 16125, 5024, 410, 409, 1100,
	-1000, 1729, 1302, 1717, 1302, -1000, -38, 989, -1000, 21814,
	16125, -1000, 732, 21814, -1000, -1000, 16125, -1000, 722, 21814,
	604, 1622, 844, -1000, 852, -1000, 1551, -1000, 24914, 408,
	36620, 404, -1000, 400, -1000, -1000, 399, 36620, 1423, 555,
	24230, -1000, 623, 965, -1000, 43322, -1000, 965, 8996, 1999,
	-125, -1000, -1000, -1000, 631, 20749, 20040, 10420, -126, -1000,
	-1000, -1000, -1000, 43322, -39, 1974, 1974, -1000, 2152, -1000,
	502, 235, -1000, 27662, -1000, -39, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 36620, 6501, 36620, 36620, 1207, 41033, -1000,
	1975, 6501, 2113, 196, 3484, 3345, 16125, 43878, 43711, -131,
	16125, 16125, -1000, 233, 16125, 465, 43322, -1000, -1000, -1000,
	43322, 16125, 2188, 16125, 232, 229, 228, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 226, -1000, -1000, 39014, 16125,
	225, -1000, 224, 218, 43322, 1653, 43322, -1000, -1000, 659,
	659, 904, 904, 904, 904, 2134, 796, 783, 1136, 288,
	288, 288, 1113, 474, 474, 288, 288, 288, 1608, 1422,
	391, 4458, 16125, 217, -1000, -1000, 43322, 43322, 211, -1000,
	-1000, -1000, -67, 325, 40886, 40763, -1000, 210, 208, 1582,
	2063, -1000, 20040, 1582, -1000, 36620, 43322, -1000, -172, -1000,
	2145, -1000, -1000, 1437, -1000, 5784, 26978, 36620, -132, -1000,
	36620, 36620, 36620, 1713, -1000, 1512, -1000, 40616, -134, -1000,
	327, 2037, 16125, -1000, -1000, 389, 5024, 36620, -1000, 1472,
	1614, 672, 36620, -1000, 36620, -1000, 36620, 36620, 36620, -1000,
	388, 106, -137, 36620, -1000, -140, 36620, -1000, -1000, 23888,
	758, -1000, 1084, 1559, -1000, 5024, 382, 36620, 24914, 2098,
	5024, 1247, 1436, 555, 24230, -1000, 819, -1000, -1000, -41,
	-1000, 360, 55, 965, -1000, -43, -1000, 562, 1951, -1000,
	1949, 328, -1000, -1000, -50, 381, -1000, 559, 557, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1975, 16125, 16125, 43711,
	-142, -1000, 196, 196, -1000, 40493, -1000, 43322, -1000, 42410,
	-1000, -1000, -1000, -1000, 1075, -1000, 40346, -1000, -1000, -1000,
	-1000, 16837, 1605, 377, 43878, 40223, -1000, -1000, 16125, -1000,
	-1000, -1000, -1000, 626, 16125, 16125, 1656, 626, -147, 577,
	-1000, -1000, -1000, 2135, -1000, -148, -1000, -1000, -1000, -1000,
	36620, -1000, 36620, -1000, 6501, 36620, 1620, 1327, -1000, -1000,
	1469, 376, 16837, 36620, -1000, 1105, 5024, 1975, 106, 6501,
	1975, 40076, 6857, -150, -155, 1314, -1000, 1312, 16125, -1000,
	43878, 1302, 1302, -1000, 720, 700, 16125, 699, -1000, 698,
	-1000, -53, 21814, -1000, -1000, 2062, 1092, -156, 5024, -157,
	206, 55, -162, 36620, -1000, 555, 24230, -1000, 1888, 1902,
	36620, 1994, -1000, -1000, 372, 371, 369, -1000, 27320, 27320,
	23888, 23888, -1000, 196, 196, -1000, -1000, 202, 1203, 2060,
	-1000, 3545, 16837, 43878, -165, -1000, 39953, -1000, 36620, 43322,
	-67, -1000, -1000, 26978, 326, -1000, -1000, 1504, -1000, -1000,
	36620, 1315, -1000, -1000, 16125, 4458, 364, 1551, 358, -1000,
	-1000, -1000, -1000, -1000, -1000, 2037, -12, -1000, 1008, -1000,
	-1000, 43322, 2035, -1000, -1000, 36620, 36620, -54, 349, 348,
	-1000, 1251, 36620, 1105, -173, -1000, 1551, -1000, 1105, 347,
	24230, -1000, 1423, 793, -174, 36620, -1000, -1000, 7213, 23888,
	23888, -1000, -175, -1000, -1000, -1000, 1126, 16125, 3545, -182,
	-1000, -1000, -60, -1000, 2088, -1000, -1000, -1000, -1000, 1704,
	39806, 1386, 36620, -1000, 36620, 1975, 201, 36620, 654, 6501,
	-1000, -1000, 200, 16125, 16125, 346, 341, 339, 1551, 1105,
	-1000, 1551, 5024, -1000, 1436, 903, -1000, 631, -1000, -183,
	-185, -1000, 199, 16481, 16481, -67, -1000, 36620, 338, 1693,
	-1000, 1224, 1249, 195, -188, -1000, -1000, 335, -1000, 16125,
	-1000, 2188, -190, -191, 36620, 36620, 36620, -1000, 1551, -1000,
	-193, -1000, 20749, -1000, 604, 604, -1000, -1000, -1000, 17549,
	1308, 956, 41801, -1000, -1000, -1000, 36620, -1000, 1235, 1226,
	898, -1000, -1000, -1000, -1000, -1000, 1386, 43322, -1000, -1000,
	-196, -198, -199, -1000, 1105, -167, -1000, -1000, 2114, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1931, -1000, 665, 1433,
	1433, 1224, 333, 303, 1264, 1551, -1000, 15769, -1000, 2119,
	-1000, -1000, 1439, -1000, -1000, 1047, 1040, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 182, 6501, 57, 6501, -1000,
	644, -1000, 640, 302, 1411, -57, 10064, 811, 332, -100,
	-1000, -201, -1000, 43322, -1000, -1000, 300, -1000, 10064, 1047,
	-1000, 10064, 10064, -206, -1000, -1000, -207, -1000, -66, 1040,
	-184, -1000, -1000, 1040, -1000,
}
var sqlPgo = [...]int{

	0, 2650, 2649, 1772, 2085, 2648, 2647, 2644, 2640, 2637,
	2633, 2631, 2630, 2629, 2627, 2623, 2618, 2617, 2616, 2613,
	2611, 2610, 2608, 2605, 2039, 2604, 2031, 2602, 2599, 2598,
	2596, 2591, 2589, 2010, 2588, 2582, 2581, 2578, 2577, 2575,
	2574, 2008, 2569, 2004, 2568, 2562, 2560, 2559, 2557, 1996,
	2556, 83, 113, 1982, 2555, 2552, 1974, 1972, 1949, 2542,
	1925, 2541, 2539, 1914, 1857, 2536, 103, 2535, 2534, 2532,
	1834, 1831, 2531, 2530, 2516, 152, 2515, 1824, 2514, 2513,
	2506, 2505, 2502, 2497, 2493, 2490, 2489, 2486, 2483, 2474,
	2471, 2469, 2465, 2464, 2463, 2462, 2460, 160, 2459, 2453,
	1799, 1786, 2449, 2445, 40, 28, 18, 54, 27, 145,
	3036, 143, 2444, 2443, 2434, 2430, 2428, 2420, 24, 98,
	97, 2415, 125, 2410, 2400, 53, 37, 25, 22, 2397,
	92, 2395, 2387, 2414, 35, 2386, 2385, 134, 2384, 86,
	32, 2565, 154, 153, 108, 131, 2382, 2381, 2376, 41,
	117, 15, 4, 3, 6, 1, 2375, 5, 7, 2374,
	2368, 20, 88, 75, 2366, 30, 45, 2364, 2359, 132,
	2358, 55, 95, 1628, 99, 119, 431, 84, 2355, 67,
	12, 62, 2352, 2351, 159, 34, 2350, 46, 80, 146,
	2348, 49, 2344, 2343, 128, 135, 161, 130, 69, 129,
	142, 2339, 2337, 2336, 101, 2334, 112, 118, 2333, 2330,
	81, 2327, 96, 140, 2325, 2324, 2322, 122, 2319, 124,
	2318, 2317, 157, 149, 111, 8, 59, 66, 14, 1614,
	1613, 139, 91, 61, 58, 2316, 802, 916, 1119, 94,
	102, 79, 64, 105, 52, 89, 150, 38, 2315, 2312,
	141, 2311, 2310, 2308, 2307, 2304, 106, 2302, 2300, 23,
	2299, 87, 44, 48, 109, 39, 121, 127, 120, 158,
	100, 2298, 78, 123, 2296, 275, 2295, 2294, 1403, 115,
	2293, 2287, 2284, 1349, 1277, 1213, 429, 2282, 2281, 1194,
	959, 2278, 2274, 82, 2272, 114, 110, 93, 147, 466,
	57, 2267, 116, 36, 2266, 33, 31, 0, 68, 60,
	2262, 126, 63, 2259, 2255, 2254, 2252, 26, 10, 13,
	2, 17, 11, 50, 29, 2249, 2248, 133, 72, 76,
	2247, 156, 2246, 2245, 2244, 43, 2242, 21, 2239, 19,
	2238, 2234, 16, 9, 2233, 2232, 148, 2229, 90, 2228,
	2058, 2226, 151, 2225, 2221, 1847, 2220, 51, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 120, 120, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 117, 117, 122, 122, 122, 124, 124,
	121, 121, 116, 116, 24, 24, 64, 64, 107, 57,
	57, 57, 305, 305, 306, 306, 103, 103, 104, 104,
	104, 104, 105, 105, 106, 106, 106, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 41, 41, 42, 42, 42,
	42, 42, 42, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 48, 48, 48, 46, 46, 46,
	45, 45, 45, 44, 44, 44, 47, 47, 47, 175,
	175, 174, 174, 178, 178, 49, 49, 49, 49, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 52, 52, 52, 52, 52,
	52, 52, 274, 274, 273, 50, 50, 248, 248, 53,
	53, 205, 205, 54, 54, 54, 54, 54, 55, 55,
	65, 65, 346, 346, 346, 350, 350, 351, 351, 352,
	352, 352, 352, 352, 352, 352, 348, 348, 60, 60,
	60, 60, 61, 61, 61, 62, 62, 102, 102, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 29, 30,
	71, 71, 71, 73, 70, 70, 70, 72, 72, 72,
	72, 74, 74, 75, 75, 75, 75, 75, 76, 76,
	299, 297, 297, 298, 298, 147, 147, 147, 147, 147,
	148, 148, 148, 304, 304, 304, 304, 304, 304, 303,
	303, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 89, 89,
	89, 97, 97, 97, 97, 97, 97, 97, 78, 78,
	83, 83, 83, 83, 83, 79, 79, 84, 84, 85,
	85, 86, 86, 86, 86, 86, 86, 80, 80, 80,
	80, 88, 88, 88, 88, 87, 87, 93, 93, 93,
	93, 93, 93, 90, 90, 90, 90, 91, 91, 91,
	94, 94, 94, 94, 81, 81, 82, 82, 95, 95,
	96, 96, 96, 96, 96, 92, 92, 92, 347, 347,
	349, 349, 58, 58, 36, 36, 37, 37, 149, 149,
	150, 150, 227, 227, 227, 227, 151, 151, 123, 123,
	123, 152, 152, 153, 153, 154, 154, 154, 156, 156,
	157, 157, 158, 158, 158, 155, 155, 155, 226, 315,
	315, 316, 316, 316, 316, 316, 316, 317, 317, 317,
	317, 317, 317, 317, 313, 313, 314, 311, 311, 312,
	312, 312, 312, 353, 353, 225, 225, 161, 161, 318,
	318, 318, 318, 319, 319, 319, 319, 319, 322, 321,
	320, 320, 320, 320, 320, 260, 260, 260, 40, 193,
	193, 192, 192, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 195, 99, 99, 38, 38, 129, 129, 39,
	39, 35, 35, 35, 209, 209, 165, 165, 265, 265,
	265, 140, 140, 118, 118, 118, 17, 13, 13, 13,
	13, 13, 13, 23, 23, 21, 21, 210, 210, 211,
	211, 59, 59, 63, 63, 68, 68, 98, 98, 98,
	98, 98, 98, 25, 25, 25, 25, 31, 31, 31,
	31, 67, 67, 355, 355, 136, 136, 136, 136, 137,
	137, 222, 222, 223, 223, 356, 356, 224, 224, 224,
	131, 130, 132, 132, 34, 34, 34, 125, 125, 126,
	126, 127, 127, 128, 128, 357, 357, 56, 56, 56,
	101, 101, 143, 143, 219, 219, 219, 221, 221, 220,
	220, 220, 191, 191, 191, 100, 100, 170, 170, 180,
	180, 181, 181, 271, 182, 182, 66, 66, 110, 110,
	108, 108, 108, 108, 108, 108, 109, 109, 109, 111,
	111, 111, 111, 111, 111, 111, 114, 114, 114, 115,
	115, 115, 113, 113, 328, 328, 328, 331, 331, 327,
	329, 329, 330, 330, 354, 354, 196, 196, 196, 160,
	159, 159, 163, 163, 162, 164, 164, 264, 264, 264,
	189, 189, 189, 189, 214, 214, 212, 212, 213, 213,
	215, 215, 216, 216, 216, 217, 217, 218, 218, 188,
	188, 244, 244, 112, 112, 112, 169, 169, 169, 171,
	171, 234, 234, 234, 235, 235, 233, 233, 233, 233,
	266, 266, 266, 266, 266, 266, 266, 266, 344, 344,
	344, 345, 345, 263, 263, 267, 267, 267, 267, 267,
	267, 261, 261, 261, 261, 262, 262, 272, 272, 199,
	199, 199, 199, 197, 197, 198, 198, 268, 268, 268,
	268, 190, 190, 269, 269, 269, 228, 228, 275, 275,
	275, 293, 293, 168, 168, 168, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 276, 276, 276,
	276, 276, 276, 276, 276, 276, 276, 277, 277, 277,
	277, 279, 279, 279, 278, 278, 278, 278, 278, 278,
	278, 278, 278, 278, 278, 278, 278, 278, 278, 278,
	278, 278, 292, 292, 292, 292, 292, 280, 280, 287,
	287, 288, 288, 289, 290, 281, 281, 282, 282, 283,
	284, 291, 291, 291, 291, 295, 295, 285, 285, 285,
	285, 285, 286, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 207, 207, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 238, 238, 238, 238, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 323, 323, 323, 323,
	323, 323, 323, 323, 325, 325, 326, 326, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 324, 324,
	324, 324, 324, 324, 324, 324, 324, 324, 332, 332,
	333, 333, 335, 335, 336, 336, 337, 338, 338, 338,
	339, 340, 340, 334, 334, 341, 341, 341, 342, 342,
	343, 343, 343, 343, 343, 250, 250, 251, 252, 258,
	258, 258, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 138, 138,
	138, 138, 138, 177, 177, 176, 176, 247, 247, 245,
	245, 249, 249, 200, 200, 294, 294, 294, 294, 294,
	294, 294, 201, 201, 201, 208, 202, 202, 203, 203,
	203, 203, 203, 241, 242, 204, 204, 204, 243, 243,
	253, 257, 257, 256, 255, 255, 254, 254, 231, 231,
	232, 232, 230, 229, 185, 185, 184, 184, 183, 183,
	358, 358, 259, 259, 186, 186, 187, 179, 179, 270,
	270, 270, 270, 172, 172, 145, 145, 173, 173, 141,
	141, 144, 144, 142, 142, 142, 142, 166, 166, 167,
	167, 139, 139, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 296, 296, 296, 246, 133, 133,
	133, 134, 134, 135, 135, 301, 301, 301, 302, 302,
	302, 302, 300, 300, 300, 300, 300, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 1, 2, 2, 7, 3, 2, 2, 2,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 2, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 1,
	3, 1, 2, 2, 3, 2, 2, 5, 3, 1,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	2, 1, 1, 3, 1, 5, 2, 3, 0, 3,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 2,
	6, 2, 1, 2, 2, 1, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 2,
	1, 2, 2, 3, 2, 4, 3, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 3, 1, 4,
	6, 6, 3, 5, 3, 2, 6, 3, 3, 4,
	4, 3, 3, 1, 3, 3, 1, 1, 2, 1,
	1, 1, 1, 1, 3, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 4, 3, 5,
	3, 4, 5, 2, 3, 3, 3, 4, 2, 3,
	4, 3, 3, 3, 4, 4, 4, 4, 2, 3,
	7, 7, 7, 4, 5, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 8, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 1, 0, 9, 9, 6, 7, 5, 3, 5,
	1, 3, 1, 1, 1, 10, 11, 9, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 1,
	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	1, 2, 1, 4, 2, 4, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 8,
	10, 8, 10, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 2,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 0, 1, 3, 1, 0, 1, 1, 1,
	2, 3, 2, 2, 8, 11, 3, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 3,
	6, 3, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 3, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 2, 4,
	4, 4, 2, 2, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 4, 5,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 2, 3, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 3, 4, 1, 1, 1, 5, 1,
	3, 3, 1, 3, 3, 1, 3, 3, 1, 1,
	3, 3, 1, 1, 6, 6, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 5, 4, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 3, 1, 3, 3,
	3, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 385, -4, -24, -26, -29, -32,
	-33, -54, -41, -42, -43, -53, -49, -55, -56, -57,
	-58, -50, -64, -63, -65, -68, -66, -59, -60, -69,
	-77, -98, -99, -100, -101, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 48, -30, 72, -34, -35, -36,
	-37, 74, -38, -39, -40, 95, -330, 99, -44, -45,
	-46, -48, -47, 103, 110, 113, 135, 146, 234, 240,
	261, 263, 265, 272, -108, -110, 259, -61, -62, -70,
	-71, -72, -73, -102, 285, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, -96, 288, -25, -31, -67, 327, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 112, -328, -111, -109, 382, 260, 336,
	35, 297, 62, 106, 267, 352, 359, -114, -112, -113,
	-115, 277, 344, 307, 386, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 2, 307,
	347, 88, 155, 245, -346, 2, -173, 307, 88, -142,
	-133, 375, 4, -307, -309, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 49, 56, 61, 62, 63,
	68, 65, 66, 67, 70, 72, 73, 76, 77, 78,
	86, 87, 89, 91, 95, 97, 99, 102, 103, 105,
	110, 112, 111, 113, 123, 124, 129, 131, 136, 142,
	143, 146, 147, 148, 156, 159, 161, 154, 171, 172,
	173, 177, 178, 179, 182, 181, 186, 187, 190, 191,
	194, 196, 199, 197, 200, 203, 201, 205, 206, 208,
	207, 213, 215, 216, 218, 221, 224, 227, 230, 231,
	232, 233, 234, 236, 238, 240, 242, 243, 244, 245,
	246, 248, 249, 251, 252, 253, 254, 255, 259, 257,
	258, 260, 261, 262, 263, 265, 267, 268, 270, 286,
	287, 298, 272, 273, 274, 275, 276, 281, 278, 279,
	282, 283, 285, 288, 290, 293, 296, 297, 299, 302,
	303, 300, 295, 306, 308, 309, 310, 311, 312, 313,
	314, 315, 322, 323, 327, 328, 329, 330, 333, 334,
	335, 336, 338, 341, 342, 343, 348, 353, 354, 355,
	356, 357, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 149, 150, 153, 160,
	162, 163, 164, 165, 166, 168, 175, 176, 184, 202,
	212, 214, 225, 229, 237, 239, 247, 269, 280, 291,
	292, 301, 304, 317, 318, 319, 324, 325, 340, 344,
	345, 385, 385, 2, 172, 244, -141, -133, 88, 385,
	385, 385, 385, 307, 2, 278, 337, 347, -209, 88,
	332, 385, 385, 385, -133, 240, 22, 2, 97, 159,
	335, 334, 22, 236, 279, 309, 311, 2, 385, 385,
	385, 385, 385, 2, 347, 307, 155, 88, 337, -133,
	2, -52, 2, 382, -51, -4, -33, -43, -53, -49,
	-24, -26, -41, -57, -56, -58, -60, -64, -63, -66,
	-70, -71, -77, -100, -101, 285, 112, -350, 2, 22,
	-351, -352, 74, 103, 135, 277, 159, 97, 334, 307,
	2, 172, 2, -133, 2, -346, 2, 172, 2, -350,
	2, -133, 2, -137, 2, 272, -133, 385, 385, 385,
	385, 385, 191, 56, 269, 282, -75, 323, -74, 317,
	-299, -76, 2, -174, 203, -133, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 2, -97, 282, 34, 56, 22, 61,
	89, 136, 155, 156, 178, 69, 70, 243, 191, 173,
	322, 179, 283, 308, 323, 74, 338, 312, 111, 4,
	88, 203, 284, 317, 385, 385, 385, -354, 2, 307,
	274, 288, -109, -111, -110, -162, -163, 331, 167, 108,
	223, -108, -110, 2, -328, -97, 282, 2, 56, 22,
	-297, 2, -259, 219, -236, 94, -238, 373, 374, 368,
	209, 358, -250, -240, -253, 109, 269, 382, -141, -239,
	388, 9, -325, -110, 29, -251, -252, 50, -133, 7,
	8, 5, 6, -139, -277, -246, -286, 326, 116, 211,
	-323, -324, 4, -307, -301, -278, -288, -282, -285, 168,
	59, 80, 81, 84, 82, 85, 284, 337, 51, 28,
	114, 115, 229, 237, 304, 324, 325, 149, 212, 150,
	57, 137, 184, 102, 37, 39, 41, 42, 52, 53,
	90, 92, 93, 125, 126, 127, 160, 162, 163, 164,
	165, 166, 214, 247, 291, 301, 318, 319, 345, -308,
	-289, -290, -283, -284, 75, 117, 134, 158, 151, 170,
	174, 185, 188, 198, 204, 226, 228, 266, 289, -291,
	-355, 2, 323, 323, 2, -355, 2, -355, 2, -136,
	2, 323, 320, -331, 248, -327, -133, -331, 385, 385,
	387, 385, -159, -160, 2, 22, 100, -187, 2, 382,
	-266, 2, 380, -268, -141, -110, -267, 382, 220, -3,
	2, -268, 149, -141, 2, -268, 149, -141, 2, -133,
	2, -144, 149, -141, -300, 4, -307, -309, -308, -310,
	59, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 50, 51, 55, 58, 60, 69, 74, 79, 80,
	82, 81, 83, 84, 85, 94, 96, 98, 100, 101,
	104, 106, 108, 116, 118, 130, 132, 133, 135, 138,
	140, 152, 155, 157, 167, 169, 180, 183, 189, 192,
	193, 209, 210, 211, 217, 219, 220, 222, 223, 235,
	241, 250, 264, 277, 284, 294, 305, 307, 316, 320,
	321, 326, 331, 332, 337, 339, 346, 347, 349, 350,
	351, 352, 320, 387, -173, -166, -133, -230, -229, 384,
	-236, 2, -236, 2, 133, 382, -184, -185, -229, -230,
	2, -174, 149, -174, -133, 2, -174, 2, 155, -133,
	149, 2, -133, 22, 133, 2, 169, 2, 169, 2,
	-269, 2, -268, -175, 149, 2, -174, -175, 149, 2,
	-145, 149, 2, -144, -133, 149, 2, -166, 149, 2,
	-205, 382, -274, 2, -273, -302, 4, -307, -309, -308,
	344, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 282, 219, 387, -174, -236, -248, 382,
	133, -236, 219, -133, 2, 286, 2, 382, -75, 54,
	323, -223, 2, -224, -130, -131, -132, 171, 242, 246,
	357, 320, 363, 133, -297, -178, 384, -97, 2, -305,
	2, -303, 9, -302, 5, 286, 2, 243, 283, 56,
	133, 2, 2, -347, 2, 219, 133, 2, 133, 2,
	133, 2, 133, 2, 133, 2, 2, 243, 283, 2,
	130, 2, 322, 2, 2, 133, 2, 171, 242, 298,
	2, 307, 347, 2, 133, 133, 357, 2, -190, -268,
	307, 357, 22, -162, -163, -189, -212, -213, 189, 118,
	217, -196, 22, 100, -196, -196, 44, 383, 383, -97,
	286, 2, 10, 11, 58, 33, 373, 374, 375, 376,
	128, 377, 378, 371, 372, 370, 361, 362, 365, 366,
	367, 71, 364, 363, 64, 195, 271, 119, 120, 121,
	122, 256, 13, 14, 15, 26, 222, 188, 358, 151,
	289, 368, 16, 17, 18, 170, 36, 152, -138, -146,
	-236, -236, -236, -236, -236, 228, -183, -231, 380, -110,
	382, 382, -110, -236, -176, 382, 7, -110, -245, 380,
	-254, -236, -184, 382, 5, 382, 5, -332, 353, 130,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 239,
	-295, 348, -295, -295, -279, 382, -279, -280, 382, -279,
	354, 359, 382, -222, -223, -222, 320, -137, 387, -331,
	-167, 382, -187, -179, -270, -236, 375, -179, -186, -259,
	75, -199, 174, 204, 134, 185, 266, 158, 7, -52,
	-233, 388, 382, 375, -263, 359, -110, -267, 382, -266,
	-141, 382, -120, 257, -119, 21, 23, 103, 342, 109,
	295, 313, 112, 273, 257, 109, 112, 257, 295, 313,
	273, 257, 109, 388, 112, -305, -142, 387, -300, 375,
	299, 383, -172, -141, -185, 382, -161, 209, -193, -192,
	-194, 147, 197, 206, 198, 297, 47, 86, -129, -329,
	352, -161, 382, -134, 149, 2, -133, -329, 209, -269,
	-143, -141, -143, 285, -133, 30, -122, 387, 49, 262,
	109, -122, 109, -122, 387, 109, -122, 109, 109, -176,
	-236, 383, 387, -346, -352, 74, 382, 30, -247, -275,
	-276, -278, -287, -281, -285, -286, 40, 46, 45, 176,
	175, 314, 202, 280, 292, 340, 153, 38, 218, 161,
	4, 160, 162, 163, 164, 165, 166, 291, 37, 247,
	126, 127, 125, 102, 93, 92, 214, 42, 41, -289,
	-290, -283, -284, 90, 318, 319, 168, 39, 53, 52,
	345, 301, -306, -305, -346, -299, -176, 30, -223, 2,
	-356, 387, 187, -148, 194, 208, 142, 220, 355, -304,
	5, 4, -246, -260, 94, 191, -286, 8, 374, -296,
	7, 373, -298, -297, -298, 78, 384, -300, -174, 22,
	287, 2, -299, -349, 130, -346, -299, -299, -299, -299,
	-299, 282, -52, 130, -133, 187, -299, 2, -299, 2,
	307, 155, 307, -122, 387, -305, 65, 66, 357, -189,
	-213, -212, -215, -236, 22, -218, 124, 205, -236, -238,
	-109, -109, -109, -164, -264, -236, 241, 155, -299, -293,
	-275, -292, 252, 253, 251, 255, 254, -275, -300, 317,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, 188, 151, 289, 36, 152, -236, 320, -236,
	-236, -236, -236, 201, 209, 211, 326, 116, 333, 100,
	215, -358, 305, 32, -243, -110, 382, -258, 27, 294,
	22, -250, 269, 382, -231, -236, -232, -177, -176, 383,
	387, -177, -249, -245, -257, -256, 349, 383, -176, 346,
	22, 100, 375, 2, 7, -206, 356, 200, 91, 143,
	199, -207, 276, -333, 123, 138, 382, 383, 2, 383,
	2, 383, 2, 383, 2, -236, -236, -200, 2, -294,
	-176, 4, 356, 200, 91, 143, 199, 276, -200, 2,
	-201, 2, -236, -176, -202, -237, -238, 373, 374, 368,
	382, 269, -203, 2, -236, -177, -236, 43, 183, 321,
	-204, -236, 133, -176, -236, -236, -236, -176, -176, 2,
	-176, 2, 382, 7, 7, 317, 317, 7, -137, -327,
	30, -166, -169, 387, 133, 30, 4, -169, 387, 383,
	174, 174, -266, -199, 174, -197, 226, -197, -197, -344,
	382, 381, -263, -300, 380, 389, -177, 2, -262, -261,
	30, -133, 224, 383, -141, 387, 320, -210, 69, 60,
	-226, 149, 60, -311, -133, 69, -312, 55, 332, 241,
	132, -210, 69, -210, 69, 69, -268, 33, -66, 67,
	133, 320, -268, 67, 320, 33, -66, 133, 320, -144,
	-300, 67, -272, 360, -133, 133, 383, 387, -149, -166,
	-150, -133, -227, -226, -313, -314, -311, 155, 332, 117,
	30, 109, -194, -195, -296, 374, -195, 197, 198, 86,
	-195, -195, -195, 233, 30, 219, 209, -125, 310, 109,
	-228, 350, -219, -66, 382, 94, 30, -219, -180, -181,
	-271, -182, -141, 382, -133, -174, -175, -175, -144, -145,
	-133, -166, 383, 387, -52, -273, 320, 339, -150, -51,
	383, 387, -168, 29, 380, -206, 382, -272, 387, 133,
	363, 320, 383, 323, -224, -147, 246, 293, 258, 281,
	8, 7, 7, 387, -300, -348, -133, 282, -52, -141,
	-144, -141, -268, 130, 66, -216, -296, 382, -217, 269,
	270, 387, -118, 31, 98, 177, -141, 357, -236, -236,
	320, -358, 305, -243, -236, 201, 211, 326, 116, 333,
	100, 215, 133, 382, -237, -237, -176, -240, 382, -176,
	381, 391, 383, -236, 381, 381, 387, -255, -256, 104,
	-236, -163, 387, -162, -236, -176, -176, 383, 383, 320,
	320, 320, 320, 382, -338, 227, 382, 382, -236, 30,
	387, 383, 133, 383, 383, -208, 235, 383, 10, 11,
	373, 374, 375, 376, 128, 377, 378, 371, 372, 370,
	361, 362, 363, 64, 195, 271, 13, 14, 15, 170,
	152, -237, -237, -237, -176, 382, 383, -241, -242, 133,
	130, 30, -204, -204, -204, 383, 133, -176, 387, 387,
	387, 383, 383, 383, 7, 383, 387, 383, 357, 357,
	383, 382, 383, -228, -270, -171, 2, -266, -300, -228,
	-259, -266, -266, -198, 339, 219, 174, -266, -261, 383,
	-345, 7, -263, -262, 7, -235, -234, 131, 207, 383,
	-133, 382, -263, 383, -119, -141, -133, -133, 209, -226,
	149, -124, 209, -275, -133, 382, 382, 177, 177, -133,
	-133, 149, -133, 149, -133, -133, -120, 257, -66, 357,
	382, -141, 257, 357, -133, -66, 382, -133, 257, 357,
	-103, 148, 215, 299, 133, -141, 383, 383, 387, -134,
	155, -134, -66, -174, 5, -66, -141, 109, -126, 105,
	-357, 363, -133, -214, -212, -236, -191, -221, 264, 219,
	-172, 344, -133, -191, -170, 387, 133, 363, -172, -122,
	-122, -122, -122, -236, -348, -305, 383, -275, 380, 381,
	7, 7, -106, 352, -305, -348, -297, -297, -130, 330,
	63, 246, -297, 387, 245, 88, 307, -217, -236, -264,
	-141, 388, -236, -236, -237, -237, 133, 382, -236, -247,
	26, 26, 383, -177, 387, -232, -236, 383, -245, 106,
	-236, 316, 383, 346, -163, -163, -163, 5, 200, 143,
	199, -207, 199, -207, -207, 7, -339, -133, 382, 350,
	-162, 383, -293, -275, -236, -241, -236, -293, -275, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, 100, 209,
	215, -237, 387, -177, -242, -241, -236, -236, -275, 383,
	383, 383, -176, -236, -236, -236, 383, 7, -51, -188,
	138, -272, 387, -188, -198, 382, -236, -266, 381, 383,
	387, -262, 381, 387, 390, 363, -263, 382, -166, -261,
	320, 320, 109, 209, 341, -315, -312, -236, -165, -265,
	-133, -326, 382, -323, -324, -139, 382, 382, -117, 103,
	285, -211, 109, -122, 109, -122, 320, -210, 69, -239,
	-139, -133, -176, 320, -239, -176, 320, -239, -106, 133,
	306, 299, -151, 154, -227, 382, -134, 382, 382, -161,
	382, -133, -127, 182, -357, -303, -329, -191, -191, -179,
	210, 68, 383, -228, -181, -171, -259, 383, -107, 76,
	-107, 7, 381, 383, -105, 221, -104, -133, 5, -133,
	-300, -133, -141, 220, 383, -118, -300, 26, 26, -236,
	-247, 383, -236, -236, 383, -236, 381, -236, 5, -236,
	383, 383, 383, 383, -340, -133, -236, 383, 383, 383,
	-242, 133, 100, 215, 382, -236, 383, 383, 387, 383,
	383, 383, 383, -244, 140, 44, -266, -244, -166, -233,
	7, -234, -300, 380, -262, -166, 383, -133, -133, -226,
	109, -316, 69, -317, 58, 117, 74, 209, 211, 332,
	241, 55, 94, 250, 383, 383, 387, -140, -184, 58,
	-140, -236, 382, -165, -166, 209, 94, 209, 94, 87,
	328, -133, -133, -141, -133, -133, 382, 383, -141, 383,
	-133, -306, 317, -152, -153, 232, 152, -165, 382, -166,
	-149, 30, -165, 219, -128, 181, -357, -303, -125, -220,
	382, 219, -66, -191, 363, 87, 87, 381, 387, 382,
	363, 363, -118, -236, -236, 383, 383, -163, -334, 232,
	383, -237, 133, 382, -247, 383, -236, -335, 351, -236,
	-176, -335, 383, -263, 7, 383, -226, -133, -300, -133,
	117, 149, 211, 177, 382, -237, -141, -225, -353, 73,
	303, -265, -118, -300, -118, 383, -176, 383, 383, 211,
	211, -236, -275, -122, -122, 320, 320, -176, 320, 320,
	-239, 44, 230, 383, -165, 383, 383, -66, 383, -141,
	-357, -303, -126, 101, -166, 69, -187, -110, 382, 382,
	382, -104, -105, -305, -305, 383, -163, 44, -237, -247,
	383, 383, -336, -337, -133, -262, 381, -317, -134, 209,
	-236, -135, 382, -151, 382, -140, -163, 250, -121, 58,
	-133, -133, -163, 382, 382, 190, 245, -141, -225, 383,
	-151, -225, 382, -303, -127, 334, 210, 383, -133, -306,
	-306, 383, -341, 245, 270, -176, 383, 387, 30, 109,
	383, -318, 196, -133, -166, -118, 383, -141, -116, 339,
	-300, 383, -176, -176, 382, 382, 382, -151, -225, -151,
	-165, -128, 285, -228, 383, 383, 383, -342, -343, 36,
	329, 78, -236, -342, -337, -339, 117, -319, -322, -321,
	219, 134, 231, 290, 383, 383, -161, -236, 383, 383,
	-166, -166, -166, -151, 383, -180, -106, -106, -343, 238,
	129, 269, 238, 129, -133, -321, 219, -322, 219, 334,
	97, -318, 383, 383, 383, -225, -228, 26, -320, 206,
	262, 49, 285, -320, -319, 382, 382, -123, 49, 262,
	-151, -343, 20, 211, 94, -154, 232, -155, 232, 383,
	-300, 383, -300, 344, 344, -156, 382, 186, 387, -153,
	-152, -157, -158, -236, 94, 198, 315, -154, 382, 387,
	383, 387, 382, -157, -154, -158, -157, 383, 383, 387,
	-153, -152, -155, 387, -155,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 308, 0, 159, 161, 163,
	165, -2, 168, 170, 172, 0, 0, 0, 183, 185,
	187, 189, 191, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 686, -2, 0, 288, 290, 299,
	301, 303, 305, 306, 0, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 377, 379,
	380, 382, 384, 386, 0, 607, 609, 611, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 722, -2, 733, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 699, 701, 703,
	705, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 272, 0, 1304, 1227,
	1233, 1234, 1258, 1259, 1260, 1277, 1278, 1279, 1280, 1281,
	1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291,
	1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301,
	1302, 1303, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312,
	1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322,
	1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
	1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
	1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362,
	1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372,
	1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382,
	1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392,
	1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402,
	1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412,
	1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422,
	1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432,
	1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
	1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452,
	1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462,
	1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502,
	1503, 151, 153, 154, 0, 0, 0, 1229, 1304, 160,
	162, 164, 166, 0, 174, 0, 0, 0, 0, 0,
	574, 169, 171, 173, 263, 1368, 265, 267, 0, 0,
	0, 0, 177, 178, 179, 180, 181, 182, 184, 186,
	188, 190, 192, 193, 0, 0, 0, 0, 0, 262,
	260, 215, 216, 0, 245, 246, 247, 248, 249, 251,
	219, 221, 222, 224, 226, 228, 230, 231, 233, 235,
	236, 238, 240, 241, 243, 0, 0, 0, 269, 275,
	276, 277, 279, 280, 281, 282, 283, 284, 285, 0,
	131, 0, 463, 258, 256, 0, 127, 0, 604, 0,
	271, 605, 606, 601, 602, 1395, 630, 289, 291, 300,
	302, 304, -2, -2, 1490, -2, 315, -2, 323, 1496,
	0, 326, 327, 330, -2, 211, 352, 354, 356, 358,
	360, 362, 364, 366, 368, 370, 372, 374, 376, 378,
	381, 383, 385, 387, 388, 0, 0, 0, 392, 0,
	-2, -2, 0, 0, 0, 0, 0, -2, 0, -2,
	0, 0, -2, -2, 0, 0, -2, 0, 0, 391,
	393, 394, 395, 0, 608, 610, 612, 0, 564, 724,
	0, 0, -2, 697, 698, -2, 0, 728, 728, 728,
	0, 0, 698, 696, 0, 292, 0, 294, 0, 392,
	297, 298, 331, 332, 1212, 1213, 929, 0, 0, 0,
	0, 0, 0, 1031, 1033, 1461, 1490, 0, 1035, 1036,
	0, 1038, 1040, 1041, 0, 1044, 1045, 1197, 1229, 1243,
	1244, 1245, 1246, 0, 0, 1249, 0, 1251, 1252, 1253,
	1099, 1055, -2, -2, 1241, 857, 858, 859, 860, -2,
	1504, 1059, 1062, 1065, 1068, 1069, 1072, 1073, 0, 1445,
	1462, 1463, 1486, 1487, 1495, 1499, 1500, 1469, 1483, 1470,
	1457, 1467, 1481, 1310, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 1267,
	891, 892, 897, 898, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 900,
	632, 614, 623, 632, 616, 617, 618, 619, 620, 621,
	622, 625, 0, 714, 1374, 717, 1240, 715, 700, 702,
	0, 704, 0, 0, 708, 730, 729, 763, 764, 0,
	712, 713, 723, 779, 817, 794, 785, 0, 0, 2,
	71, 0, 1469, 817, 73, 0, 1469, 817, 76, 0,
	82, 0, 1469, 1232, 0, 1272, 1273, 1274, 1275, 1276,
	1504, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528,
	1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538,
	1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
	1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558,
	1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
	1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
	1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 0, 0, 273, 274, 1237, 1235, 1236, 0,
	155, 156, 157, 158, 0, 0, 1230, 1206, 1204, 1205,
	167, 528, 1469, 550, -2, 566, 528, 570, -2, 721,
	1469, 646, 264, 266, 0, 176, 0, 659, 0, 661,
	0, 676, 823, 117, 1469, 196, 209, 117, 1469, 199,
	117, 1469, 202, 1225, 117, 1469, 205, 206, 1469, 208,
	259, 0, 0, -2, 252, 254, 1268, 1269, 1270, 1271,
	-2, 250, 220, 223, 225, 227, 229, 232, 234, 237,
	239, 242, 244, -2, 0, 0, 0, 462, 0, 0,
	0, 603, 0, 629, 307, 0, 312, 0, 314, 1456,
	-2, -2, 318, 633, 637, 638, 639, 0, 0, 0,
	0, 0, 0, 0, 328, 212, 0, 389, 390, 398,
	399, 132, 133, 349, 350, 0, 402, 423, 435, 0,
	0, 406, 408, 461, 410, 0, 0, 412, 0, 414,
	0, 416, 0, 418, 0, 420, 422, 424, 436, 426,
	723, 428, 0, 430, 434, 0, 439, 0, 441, 442,
	443, 0, 0, 449, 0, 0, 396, 397, 117, 821,
	0, 0, 0, -2, 0, 692, 742, 743, 0, 0,
	0, 0, 726, 727, 0, 0, 0, 688, 689, 293,
	0, 296, 0, 0, 0, 0, 1132, 1133, 1134, 1135,
	1136, 1137, 1140, 1141, 1138, 1139, 1142, 1143, 0, 0,
	0, 0, 0, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 1145, 1146, 1147, 0, 0, 1149, 0, 1151,
	0, 0, 0, 0, 0, 0, 1211, 0, 0, 1148,
	934, 935, 936, 968, 969, 0, 1032, 1208, 1201, 1034,
	0, 1154, -2, 1155, 0, 0, 1037, 1042, 1043, 1154,
	0, 1196, -2, 0, 1248, 0, 926, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1177,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 876,
	894, 905, 902, 901, 878, 0, 877, 875, 0, 879,
	0, 0, 0, 613, -2, 615, 0, 627, 0, 716,
	0, 0, 765, 768, 1217, 1221, 1222, 768, 0, 1214,
	0, 0, 0, 0, 814, 814, 814, 812, 788, 0,
	794, 0, -2, 818, 806, 0, -2, 785, 0, 0,
	819, 0, 83, 598, 96, 0, 598, 598, 0, 0,
	0, 0, 0, 92, 0, 0, 0, 0, 0, 0,
	94, 0, 0, 0, 0, 808, 1228, 0, 1202, 1203,
	147, 0, 0, 1223, 1207, 469, 0, 0, 548, 549,
	551, 0, 0, 0, 0, 0, 0, 560, 565, 0,
	720, 0, 0, 0, 1469, 573, 1261, 648, 0, 827,
	0, 662, 0, 0, 824, 0, 194, 0, 115, 116,
	0, 197, 0, 200, 0, 0, 203, 0, 0, 0,
	1155, 723, 0, 0, 278, 0, 0, 723, 0, 1157,
	835, 836, 837, 838, 839, 926, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 864, 865, 866, 867, 868, 869, 870, 871, 872,
	873, 874, 888, 0, 863, 863, 863, 880, 881, 889,
	890, 895, 896, 907, 908, 910, 912, 906, 906, 906,
	903, 904, 808, 134, 0, 0, 0, 0, -2, 320,
	0, 635, 0, 640, 340, 341, 342, 642, 643, 324,
	343, 344, 345, 346, 347, 348, 0, 545, 0, 547,
	1254, 0, 321, 333, 322, 325, 0, 213, 400, 401,
	403, 404, 405, 409, 0, 458, 411, 413, 415, 417,
	419, 427, 431, 723, 437, 440, 444, 445, 446, 447,
	0, 0, 0, 563, 0, 309, 0, 453, 0, 695,
	740, 741, 746, 750, 751, 754, 757, 758, 748, 929,
	709, 710, 711, 734, 735, 585, 0, 0, 295, 930,
	831, 832, 882, 883, 884, 885, 886, 931, 932, 0,
	937, 938, 939, 940, 941, 942, 943, 944, 945, 946,
	-2, -2, -2, -2, -2, -2, -2, -2, 955, 956,
	957, 958, 959, 960, 961, 962, -2, -2, -2, 966,
	967, -2, 1150, 1152, 0, 1211, 0, -2, 0, -2,
	-2, -2, -2, 980, 0, 982, 985, 987, 989, 0,
	0, 0, 0, 1210, 999, 1188, 0, 0, 1129, 1130,
	1131, 984, 0, 0, 1209, 1200, 0, 0, 1153, 1039,
	0, 0, 0, 1161, 1195, 1191, 0, 1046, 733, 0,
	0, 0, 0, 1053, 0, 1257, 913, 914, 915, 916,
	917, 918, 927, 1109, 0, 0, 0, 1060, 1061, 1063,
	1064, 1066, 1067, 1070, 1071, 0, 0, 0, 1077, 0,
	1164, -2, -2, -2, -2, -2, -2, -2, 0, 1079,
	0, 1081, 1155, 1174, 0, 0, 1002, 0, 0, 0,
	0, 1490, 0, 1084, 1155, 1182, 0, 0, 0, 0,
	0, 1155, 0, 1187, 0, 0, 0, 0, 0, 1095,
	0, 1097, 0, 0, 0, 0, 0, 0, 626, 718,
	0, 0, 827, 0, 0, 0, 1220, 827, 0, 1216,
	0, 0, 0, 0, 0, 809, 813, 810, 811, 0,
	0, 794, 806, 776, 0, 0, 0, 783, 784, 805,
	0, 804, 793, -2, 0, 0, 0, 0, 0, 597,
	98, 1469, 0, 119, 0, 0, 518, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	1231, 0, 137, 0, 1238, 0, 0, 0, 0, 0,
	468, 1237, 470, 472, 473, 474, 475, 1262, 0, 1262,
	0, 0, 552, 553, 562, 0, 554, 555, 557, 561,
	556, 558, 559, 0, 0, 0, 0, 650, 656, 0,
	745, 0, 674, 664, 0, 0, 0, 674, 678, 679,
	681, 682, 0, 0, 825, 210, 117, 117, 1226, 117,
	117, 207, 261, 0, 217, 253, 0, 0, 0, 255,
	257, 0, 828, 830, 0, 840, 0, 146, 0, 0,
	0, 0, 313, 0, 634, 641, 0, 337, 0, 339,
	546, 1256, 1255, 0, 214, 460, 286, 429, 432, 455,
	456, 457, 822, 0, 454, 0, 752, 0, 749, 755,
	756, 0, 737, 583, 584, 0, 0, 0, -2, -2,
	0, 0, 0, 1000, -2, 981, 983, 986, 988, 990,
	0, 0, 0, 0, 0, 0, 0, 1001, 1154, 0,
	1198, 1201, -2, 1156, 1159, 1160, 0, 0, 1192, 0,
	0, 0, 0, 732, 733, 733, 733, 1052, 0, 0,
	0, 0, 0, 0, 1054, 0, 0, 0, 0, 0,
	0, 1076, 0, 1078, 1080, 0, 0, 1082, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1005, 1006, 1007, 0, 1154, 1083, 1180, 1181, 0,
	0, 0, 0, 0, 0, 1089, 0, 1186, 0, 0,
	0, 1093, 1094, 1096, 0, 861, 0, 887, 909, 911,
	899, 723, 1239, 760, 1218, 808, 767, 769, 1219, 760,
	1215, 796, 0, 798, 0, 0, 0, 800, 0, 789,
	0, 791, 806, 781, 0, 0, 774, 0, 773, 794,
	802, 0, 0, 820, 97, 587, 0, 0, 0, 100,
	1469, 108, 0, 500, 0, 0, 0, 0, 0, 600,
	109, 1469, 117, 1469, 117, 110, 84, 598, 85, 0,
	0, 593, 0, 0, 586, 86, 0, 595, 0, 0,
	146, 0, 0, 148, 0, 1224, 477, 527, 0, 0,
	1262, 0, 466, 528, 567, 569, 0, 0, 652, 656,
	0, 655, 721, 674, 744, 826, 657, 674, 0, 0,
	0, 666, 663, 660, 827, 0, 0, 0, 0, 195,
	198, 201, 204, 1156, 268, 0, 0, 1158, 0, 833,
	0, 0, 126, 0, 135, 270, 310, 311, 316, 335,
	336, 338, 334, 0, 0, 0, 0, 0, 0, 736,
	585, 0, 933, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1189, 0, 0, 0, 1200, -2, 1162, 1190,
	1194, 0, 1047, 0, 0, 0, 0, 1250, 919, 920,
	921, 922, 923, 924, 925, 0, 1107, 1108, 1112, 0,
	0, 1058, 0, 0, 1163, 1173, 1175, 1003, 1004, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, -2,
	-2, -2, 1021, 1022, 1023, -2, -2, -2, 0, 0,
	0, 1176, 0, 0, 1178, 1179, 1183, 1184, 0, 1086,
	1087, 1088, 1185, 0, 0, 0, 893, 0, 0, 762,
	0, 766, 0, 762, 797, 0, 816, 799, 779, 790,
	0, 787, 777, 0, 778, 0, 806, 0, 0, 786,
	0, 0, 0, 0, 118, 498, 517, 0, 0, 576,
	582, 582, 0, 1056, 1057, 0, 0, 0, 102, 0,
	0, 0, 0, 106, 0, 112, 0, 0, 0, 91,
	0, 0, 0, 0, 90, 0, 0, 89, 124, 0,
	0, 149, 482, 0, 471, 0, 0, 0, 469, 0,
	0, 0, 654, 656, 0, 647, 648, 175, 658, 672,
	673, 671, 0, 674, 680, 677, 683, 0, 0, 128,
	0, 0, 834, 841, 144, 1358, 142, 139, 141, 287,
	450, 451, 452, 747, 753, 738, 585, 0, 0, -2,
	0, 993, -2, -2, 1125, 1156, 1199, 1193, 1247, 733,
	1048, 1050, 1051, 928, 1114, 1111, 0, 1098, 1074, 1075,
	1172, 0, 0, 0, 0, 1156, 1127, 1085, 0, 1091,
	1092, 862, 719, 1103, 0, 0, 770, 1103, 0, 794,
	792, 775, 771, 0, 782, 0, 803, 589, 591, 99,
	0, 499, 0, 502, 0, 0, 0, 0, 508, 509,
	0, 0, 0, 0, 519, 526, 0, 585, 1242, 0,
	585, 0, 0, 0, 0, 0, 114, 0, 0, 599,
	0, 117, 117, 588, 0, 0, 0, 0, 594, 0,
	596, 136, 0, 464, 481, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 644, 656, 0, 649, 650, 0,
	0, 0, 665, 675, 0, 0, 0, 829, 0, 0,
	0, 0, 739, -2, -2, 994, 1126, 0, 733, 0,
	1100, -2, 0, 0, 0, 1128, 0, 706, 0, 761,
	759, 707, 815, 806, 0, 801, 101, 0, 503, 504,
	1262, 0, 507, 510, 0, 512, 1264, 477, 0, 523,
	524, 577, 578, 581, 579, 582, 733, 521, 0, 103,
	104, 113, 121, 105, 111, 0, 0, 733, 0, 0,
	807, 0, 0, 526, 0, 516, 477, 467, 526, 0,
	0, 651, 652, 0, 0, 0, 684, 685, 0, 0,
	0, 143, 0, 138, 140, 1049, 1117, 0, -2, 0,
	1029, 1090, 1102, 1104, 0, 780, 772, 501, 505, 0,
	0, 532, 0, 520, 0, 585, 0, 0, 123, 0,
	590, 592, 0, 0, 0, 0, 0, 0, 477, 526,
	465, 477, 0, 653, 654, 0, 668, 827, 670, 0,
	0, 145, 0, 0, 0, 1113, 1030, 0, 0, 0,
	511, 537, 0, 0, 0, 580, 1047, 528, 107, 0,
	120, 0, 0, 0, 0, 0, 0, 514, 477, 571,
	0, 645, 0, 669, 146, 146, 1110, 1115, 1118, -2,
	1429, 1301, 0, 1116, 1105, 1106, 0, 513, 533, 534,
	0, 529, 530, 531, 1263, 525, 532, 122, 93, 95,
	0, 0, 0, 515, 526, 827, 129, 130, 0, 1120,
	1121, 1122, 1123, 1124, 506, 535, 0, 536, 0, 0,
	0, 537, 0, 0, 480, 477, 667, 0, 538, 0,
	541, 542, 0, 539, 522, 0, 0, 476, 478, 479,
	572, 1119, 540, 543, 544, 0, 0, 0, 0, 483,
	0, 484, 0, 0, 0, 482, 0, 0, 0, 481,
	487, 0, 490, 492, 493, -2, 0, 485, 0, 0,
	488, 0, 0, 0, 486, 491, 0, 489, 482, 0,
	481, 497, 495, 0, 496,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 371, 3, 377, 372, 3,
	382, 383, 375, 373, 387, 374, 384, 376, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 391, 386,
	361, 363, 362, 365, 388, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 378, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 389, 370, 390, 368,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 364, 57704, 366,
	57705, 367, 57706, 369, 57707, 379, 57708, 385, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:916
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:922
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1061
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1087
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1093
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1099
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1108
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1117
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1186
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1209
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1219
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1282
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1286
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1313
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1377
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1446
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "CREATE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "DELETE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1580
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1603
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1641
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "DELETE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "INSERT")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1718
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{ /* SKIP DOC */
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1816
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1836
		{
			return helpWith(sqllex, "GRANT")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1934
		{
			return helpWith(sqllex, "RESET")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1950
		{
			return helpWith(sqllex, "RESET")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			return unimplemented(sqllex, "set local")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2059
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2076
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2079
		{
			return unimplemented(sqllex, "set from current")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2091
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = Low
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = Normal
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = High
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2166
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2202
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2205
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2206
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2209
		{
			return helpWith(sqllex, "SHOW")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.str = "client_encoding"
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2266
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2315
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2331
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2366
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2425
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2433
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2441
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2452
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2455
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2466
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2474
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2477
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2481
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2485
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2489
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2493
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2497
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2503
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2507
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2511
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2517
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2592
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2656
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = DropDefault
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2673
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 496:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2977
		{
			return unimplemented(sqllex, "match full")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2978
		{
			return unimplemented(sqllex, "match partial")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			return unimplemented(sqllex, "match simple")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2980
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = NoAction
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = Restrict
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = Cascade
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = SetNull
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = SetDefault
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3077
		{
			node := &CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3087
		{
			sqlVAL.union.val = []SequenceOption{}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = []SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = IncrementOption{Increment: sqlDollar[2].union.intVal()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = MinValueOption{MinValue: sqlDollar[2].union.intVal()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = MinValueOption{MinValue: nil}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = MaxValueOption{MaxValue: sqlDollar[2].union.intVal()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = MaxValueOption{MaxValue: nil}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = StartOption{Start: sqlDollar[2].union.intVal()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = CacheOption{Cache: sqlDollar[2].union.intVal()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = CycleOption{Cycle: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = CycleOption{Cycle: false}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &val
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3123
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3134
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3159
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3199
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3203
		{
			sqlVAL.union.val = true
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3207
		{
			sqlVAL.union.val = false
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3229
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3230
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3233
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3234
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = Ascending
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = Descending
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3274
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3276
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = true
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = false
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3309
		{
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3310
		{
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3332
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3348
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3367
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3385
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3409
		{
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.str = ""
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.str = ""
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3470
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = ReadOnly
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = ReadWrite
		}
	case 644:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 648:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.str = ""
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 650:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.str = ""
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.str = ""
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.str = ""
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3578
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			return helpWith(sqllex, "INSERT")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3619
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3661
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 674:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 675:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3700
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3701
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3865
		{
			return helpWith(sqllex, "SELECT")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3866
		{
			return helpWith(sqllex, "VALUES")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3867
		{
			return helpWith(sqllex, "TABLE")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3889
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3913
		{
			return helpWith(sqllex, "SELECT")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3957
		{
			return helpWith(sqllex, "TABLE")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3969
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3973
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3977
		{
			return unimplemented(sqllex, "cte")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3980
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3981
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3984
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3985
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3988
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3989
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = true
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = false
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = false
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = true
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4013
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4060
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4080
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4084
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4140
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4141
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4199
		{
			return helpWith(sqllex, "VALUES")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4216
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &From{}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4238
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4283
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 779:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4320
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4345
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = nil
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = true
		}
	case 794:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = false
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4444
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.str = astFullJoin
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.str = astLeftJoin
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.str = astRightJoin
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.str = astInnerJoin
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
		}
	case 814:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4504
		{
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4590
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4604
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4612
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4636
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4647
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = jsonbColType
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = jsonColType
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4697
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4745
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4759
		{
			sqlVAL.union.val = nil
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4906
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4938
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4978
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = year
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = month
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = day
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = hour
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = minute
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = month
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = hour
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = minute
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = minute
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = nil
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = second
		}
	case 928:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5073
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5108
		{
			return unimplemented(sqllex, "at tz")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5316
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5382
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5531
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5555
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5577
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5581
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5585
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5608
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5609
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5611
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5622
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5633
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5640
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5654
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5663
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5672
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5681
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5682
		{
			return unimplemented(sqllex, "current role")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5691
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5712
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5717
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5722
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5731
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5732
		{
			return unimplemented(sqllex, "treat")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5769
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5771
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5774
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5778
		{
			return unimplemented(sqllex, "within group")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5779
		{
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5783
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5787
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5814
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5837
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.str = ""
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5876
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5877
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5878
		{
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5882
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5888
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5889
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5890
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5891
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5892
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = Any
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5929
		{
			sqlVAL.union.val = Some
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = All
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = Plus
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = Minus
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Mult
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5941
		{
			sqlVAL.union.val = Div
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = Mod
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = Bitand
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5945
		{
			sqlVAL.union.val = Bitor
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Pow
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = Bitxor
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5948
		{
			sqlVAL.union.val = LT
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5949
		{
			sqlVAL.union.val = GT
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = EQ
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5951
		{
			sqlVAL.union.val = LE
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = GE
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = NE
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = Like
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = NotLike
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = ILike
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = NotILike
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6086
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6090
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6120
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6149
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6183
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6238
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6247
		{
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6248
		{
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6257
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6263
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6301
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6305
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6309
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6317
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6352
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6356
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6362
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6366
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6379
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6383
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6397
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6410
		{
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6424
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6431
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6435
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6439
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6443
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6446
		{
			return unimplemented(sqllex, "func const")
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6455
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = DNull
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6472
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6476
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6482
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6517
		{
			sqlVAL.str = ""
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6523
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6527
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
