// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PLACING = 57533
const POSITION = 57534
const PRECEDING = 57535
const PRECISION = 57536
const PREPARE = 57537
const PRIMARY = 57538
const PRIORITY = 57539
const RANGE = 57540
const READ = 57541
const REAL = 57542
const RECURSIVE = 57543
const REF = 57544
const REFERENCES = 57545
const RENAME = 57546
const REPEATABLE = 57547
const RELEASE = 57548
const RESTRICT = 57549
const RETURNING = 57550
const REVOKE = 57551
const RIGHT = 57552
const ROLLBACK = 57553
const ROLLUP = 57554
const ROW = 57555
const ROWS = 57556
const RSHIFT = 57557
const SAVEPOINT = 57558
const SEARCH = 57559
const SECOND = 57560
const SELECT = 57561
const SERIAL = 57562
const SERIALIZABLE = 57563
const SESSION = 57564
const SESSION_USER = 57565
const SET = 57566
const SHOW = 57567
const SIMILAR = 57568
const SIMPLE = 57569
const SMALLINT = 57570
const SMALLSERIAL = 57571
const SNAPSHOT = 57572
const SOME = 57573
const SPLIT = 57574
const SQL = 57575
const START = 57576
const STDIN = 57577
const STRICT = 57578
const STRING = 57579
const STORING = 57580
const SUBSTRING = 57581
const SYMMETRIC = 57582
const SYSTEM = 57583
const TABLE = 57584
const TABLES = 57585
const TEXT = 57586
const THEN = 57587
const TIME = 57588
const TIMESTAMP = 57589
const TIMESTAMPTZ = 57590
const TO = 57591
const TRAILING = 57592
const TRANSACTION = 57593
const TREAT = 57594
const TRIM = 57595
const TRUE = 57596
const TRUNCATE = 57597
const TYPE = 57598
const UNBOUNDED = 57599
const UNCOMMITTED = 57600
const UNION = 57601
const UNIQUE = 57602
const UNKNOWN = 57603
const UPDATE = 57604
const UPSERT = 57605
const USER = 57606
const USERS = 57607
const USING = 57608
const VALID = 57609
const VALIDATE = 57610
const VALUE = 57611
const VALUES = 57612
const VARCHAR = 57613
const VARIADIC = 57614
const VIEW = 57615
const VARYING = 57616
const WHEN = 57617
const WHERE = 57618
const WINDOW = 57619
const WITH = 57620
const WITHIN = 57621
const WITHOUT = 57622
const YEAR = 57623
const ZONE = 57624
const NOT_LA = 57625
const WITH_LA = 57626
const AS_LA = 57627
const POSTFIXOP = 57628
const UMINUS = 57629

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4859

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	306, 27,
	-2, 381,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	1, 356,
	178, 356,
	208, 356,
	304, 356,
	306, 356,
	-2, 366,
	-1, 58,
	1, 359,
	178, 359,
	208, 359,
	304, 359,
	306, 359,
	-2, 365,
	-1, 67,
	1, 27,
	306, 27,
	-2, 381,
	-1, 392,
	1, 176,
	306, 176,
	-2, 883,
	-1, 427,
	153, 391,
	177, 391,
	-2, 362,
	-1, 430,
	153, 390,
	177, 390,
	-2, 360,
	-1, 553,
	153, 390,
	177, 390,
	-2, 363,
	-1, 609,
	303, 821,
	-2, 814,
	-1, 610,
	303, 822,
	-2, 815,
	-1, 616,
	5, 526,
	303, 526,
	-2, 975,
	-1, 640,
	5, 492,
	-2, 949,
	-1, 641,
	5, 520,
	303, 520,
	-2, 951,
	-1, 642,
	5, 500,
	-2, 952,
	-1, 643,
	5, 499,
	-2, 953,
	-1, 644,
	5, 520,
	303, 520,
	-2, 956,
	-1, 645,
	5, 520,
	303, 520,
	-2, 957,
	-1, 646,
	5, 521,
	-2, 960,
	-1, 647,
	5, 486,
	-2, 961,
	-1, 648,
	5, 486,
	-2, 962,
	-1, 649,
	5, 502,
	-2, 966,
	-1, 650,
	5, 487,
	-2, 971,
	-1, 651,
	5, 488,
	-2, 972,
	-1, 652,
	5, 489,
	-2, 973,
	-1, 653,
	5, 490,
	-2, 974,
	-1, 654,
	5, 486,
	-2, 978,
	-1, 655,
	5, 493,
	-2, 983,
	-1, 656,
	5, 491,
	-2, 986,
	-1, 657,
	5, 518,
	303, 518,
	-2, 988,
	-1, 658,
	5, 522,
	-2, 991,
	-1, 659,
	5, 524,
	-2, 992,
	-1, 660,
	5, 517,
	303, 517,
	-2, 996,
	-1, 909,
	97, 366,
	139, 366,
	153, 366,
	177, 366,
	181, 366,
	259, 366,
	-2, 638,
	-1, 917,
	303, 799,
	-2, 788,
	-1, 1119,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 561,
	-1, 1120,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 562,
	-1, 1121,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 563,
	-1, 1125,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 567,
	-1, 1126,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 568,
	-1, 1127,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 569,
	-1, 1130,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 574,
	-1, 1136,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 576,
	-1, 1139,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 581,
	-1, 1140,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 582,
	-1, 1141,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 583,
	-1, 1166,
	186, 710,
	-2, 713,
	-1, 1189,
	114, 726,
	303, 821,
	-2, 814,
	-1, 1190,
	114, 727,
	-2, 945,
	-1, 1191,
	114, 728,
	-2, 881,
	-1, 1192,
	114, 729,
	-2, 854,
	-1, 1193,
	114, 730,
	-2, 869,
	-1, 1194,
	114, 731,
	-2, 880,
	-1, 1195,
	114, 732,
	-2, 914,
	-1, 1343,
	97, 366,
	139, 366,
	153, 366,
	177, 366,
	181, 366,
	259, 366,
	-2, 439,
	-1, 1347,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 575,
	-1, 1348,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 577,
	-1, 1353,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 578,
	-1, 1371,
	186, 709,
	-2, 712,
	-1, 1536,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 579,
	-1, 1541,
	142, 0,
	-2, 593,
	-1, 1549,
	186, 711,
	-2, 714,
	-1, 1583,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 619,
	-1, 1584,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 620,
	-1, 1585,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 621,
	-1, 1589,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 625,
	-1, 1590,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 626,
	-1, 1591,
	13, 0,
	14, 0,
	15, 0,
	286, 0,
	287, 0,
	288, 0,
	-2, 627,
	-1, 1696,
	142, 0,
	-2, 594,
	-1, 1699,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 597,
	-1, 1700,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 599,
	-1, 1787,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 598,
	-1, 1788,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 600,
	-1, 1795,
	142, 0,
	-2, 628,
	-1, 1842,
	142, 0,
	-2, 629,
	-1, 1896,
	35, 0,
	127, 0,
	152, 0,
	226, 0,
	283, 0,
	-2, 948,
}

const sqlNprod = 1091
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25479

var sqlAct = [...]int{

	610, 1895, 1875, 1503, 1919, 1876, 1848, 431, 1005, 1739,
	997, 600, 1877, 1091, 1894, 834, 912, 1775, 1560, 608,
	1762, 263, 467, 584, 1661, 1688, 393, 1620, 724, 75,
	76, 1662, 1682, 1428, 452, 838, 19, 1069, 265, 75,
	75, 75, 1073, 607, 75, 1100, 1340, 75, 1675, 661,
	1068, 1269, 1515, 1427, 1374, 75, 1339, 1525, 914, 44,
	841, 1072, 75, 75, 1330, 1099, 75, 673, 266, 75,
	75, 75, 75, 251, 572, 1006, 1176, 973, 676, 1215,
	1037, 1152, 964, 1324, 1103, 1149, 26, 267, 438, 57,
	466, 1021, 15, 856, 1030, 788, 602, 540, 694, 1063,
	7, 772, 678, 1218, 582, 1186, 468, 573, 469, 799,
	541, 945, 769, 949, 430, 479, 488, 999, 1076, 862,
	436, 482, 249, 256, 441, 57, 22, 21, 10, 255,
	9, 8, 481, 6, 4, 390, 58, 257, 59, 557,
	555, 768, 790, 380, 371, 786, 556, 701, 475, 439,
	560, 383, 708, 710, 539, 1782, 57, 710, 1783, 1101,
	435, 1034, 998, 260, 258, 259, 1910, 261, 253, 1095,
	252, 254, 1002, 262, 865, 866, 1891, 710, 1883, 1761,
	1873, 1095, 1868, 1027, 1281, 1095, 435, 663, 1844, 1838,
	1369, 1027, 1095, 1280, 428, 1370, 427, 868, 419, 1338,
	1826, 1328, 458, 1761, 1035, 1816, 1789, 1786, 1095, 1027,
	1095, 1772, 443, 864, 1761, 1040, 56, 1769, 867, 1760,
	1095, 1744, 1761, 1327, 1095, 449, 662, 1743, 455, 1721,
	1095, 462, 1040, 1701, 1698, 1647, 1040, 1027, 1040, 1830,
	1036, 1033, 35, 688, 27, 75, 75, 75, 75, 75,
	36, 491, 863, 1646, 1632, 49, 1040, 1095, 1545, 1327,
	63, 1040, 583, 1489, 1483, 1445, 994, 994, 1446, 1596,
	1548, 1368, 37, 873, 484, 484, 1040, 1443, 1307, 51,
	1040, 492, 962, 65, 1310, 28, 1040, 56, 1095, 1442,
	1441, 72, 1040, 1040, 1371, 1042, 1309, 1040, 1038, 1095,
	493, 865, 866, 1764, 1160, 1096, 40, 63, 1095, 1090,
	436, 66, 1373, 35, 711, 1057, 52, 568, 711, 61,
	39, 36, 883, 1049, 868, 62, 1040, 725, 450, 829,
	65, 457, 460, 1039, 450, 828, 1040, 41, 711, 1026,
	780, 779, 1027, 37, 60, 867, 993, 961, 718, 994,
	960, 719, 504, 448, 67, 865, 866, 471, 66, 470,
	489, 1032, 567, 471, 470, 813, 61, 75, 471, 63,
	485, 524, 62, 1930, 464, 48, 1893, 1280, 868, 884,
	1889, 1882, 75, 1031, 1312, 75, 75, 1839, 1770, 1726,
	1722, 1001, 65, 1714, 1713, 1712, 1707, 1706, 1705, 867,
	873, 1659, 1653, 837, 476, 1611, 863, 1606, 1605, 1604,
	1551, 1157, 1534, 1514, 714, 1867, 38, 1493, 709, 75,
	66, 75, 1450, 75, 75, 1447, 75, 54, 61, 1435,
	42, 1426, 53, 1397, 62, 554, 1394, 43, 832, 1393,
	63, 75, 1391, 1379, 1378, 46, 48, 1308, 1232, 547,
	549, 1183, 75, 60, 873, 50, 1182, 877, 869, 870,
	871, 872, 874, 65, 894, 63, 75, 920, 915, 567,
	566, 1562, 265, 75, 75, 75, 55, 75, 1858, 1829,
	1808, 1806, 553, 668, 1797, 512, 1779, 1767, 65, 696,
	1758, 66, 1736, 698, 1398, 1399, 75, 75, 513, 61,
	1719, 1158, 266, 883, 75, 62, 75, 450, 1691, 460,
	1669, 1540, 865, 866, 865, 866, 66, 491, 491, 1533,
	667, 267, 1511, 1509, 60, 265, 75, 1652, 75, 75,
	75, 75, 75, 75, 75, 868, 507, 509, 75, 75,
	1508, 1506, 1462, 1461, 75, 1491, 814, 492, 492, 60,
	470, 75, 1290, 1425, 471, 266, 867, 1246, 867, 1387,
	884, 615, 544, 465, 1386, 836, 493, 493, 542, 75,
	1365, 1361, 75, 1154, 267, 428, 1296, 427, 1259, 1258,
	546, 1246, 1245, 1225, 563, 564, 1181, 871, 872, 874,
	569, 894, 1094, 1404, 1658, 731, 950, 953, 957, 943,
	942, 941, 940, 939, 766, 938, 937, 936, 935, 860,
	1398, 1399, 917, 934, 778, 933, 809, 932, 931, 930,
	929, 700, 703, 928, 927, 918, 916, 865, 866, 722,
	60, 833, 476, 453, 571, 713, 510, 500, 716, 869,
	870, 871, 872, 874, 498, 894, 436, 776, 1657, 775,
	868, 1289, 865, 866, 669, 720, 518, 684, 1784, 1656,
	1282, 815, 810, 803, 819, 820, 821, 822, 823, 818,
	1085, 867, 75, 826, 827, 955, 1449, 882, 1448, 956,
	75, 1346, 534, 450, 75, 519, 754, 830, 75, 75,
	911, 925, 75, 858, 1676, 844, 845, 428, 831, 852,
	428, 428, 853, 854, 846, 75, 998, 75, 75, 1404,
	75, 1563, 1177, 75, 670, 75, 75, 1382, 75, 946,
	491, 669, 967, 425, 1276, 753, 873, 1456, 695, 1854,
	679, 245, 680, 1815, 1906, 450, 702, 702, 1000, 537,
	1000, 1015, 484, 1640, 484, 241, 679, 974, 680, 1907,
	492, 1048, 418, 1303, 417, 251, 947, 948, 457, 460,
	1022, 70, 951, 978, 980, 921, 412, 966, 954, 493,
	538, 75, 75, 1473, 413, 883, 1752, 1751, 1400, 1401,
	1402, 1403, 1405, 246, 1477, 1476, 1453, 958, 1452, 1398,
	1399, 516, 242, 966, 1349, 1295, 1294, 1293, 970, 965,
	1292, 681, 894, 1137, 894, 256, 1041, 57, 977, 1044,
	1024, 255, 57, 69, 265, 990, 1023, 681, 75, 257,
	987, 1004, 989, 986, 1025, 1814, 543, 576, 1014, 489,
	517, 1777, 884, 75, 75, 1062, 1019, 1016, 75, 1017,
	1490, 1018, 1013, 983, 266, 260, 258, 259, 1229, 261,
	253, 991, 252, 254, 1228, 1108, 496, 421, 1151, 1679,
	1478, 434, 951, 267, 954, 75, 1265, 679, 75, 680,
	692, 1741, 686, 1097, 948, 947, 685, 1151, 1051, 1034,
	1045, 1856, 1046, 1043, 704, 1038, 1916, 422, 1404, 1498,
	1050, 976, 1464, 1270, 1107, 247, 1402, 1403, 1405, 1177,
	685, 1481, 265, 433, 1278, 426, 1201, 878, 875, 876,
	877, 869, 870, 871, 872, 874, 1264, 894, 423, 1274,
	244, 243, 1035, 1155, 1906, 68, 248, 1066, 1870, 1257,
	1088, 1089, 266, 1927, 959, 696, 710, 1414, 681, 1065,
	696, 262, 894, 1879, 1871, 435, 450, 1038, 1261, 1270,
	460, 267, 1302, 690, 450, 975, 71, 689, 1036, 1033,
	1471, 1809, 731, 731, 75, 75, 75, 1009, 495, 1231,
	75, 1098, 460, 75, 1164, 460, 1304, 682, 514, 75,
	75, 75, 75, 75, 56, 515, 963, 75, 944, 1793,
	75, 75, 1067, 682, 1415, 75, 1922, 1759, 535, 908,
	1385, 1628, 75, 1053, 75, 1526, 1134, 1915, 435, 1055,
	35, 75, 1239, 1156, 1878, 1173, 1038, 1880, 36, 1161,
	1165, 75, 1168, 432, 1465, 1056, 1905, 1495, 1233, 1903,
	1674, 1083, 515, 1629, 1054, 1188, 1188, 1199, 1196, 1210,
	37, 527, 75, 75, 1742, 1222, 1223, 1224, 75, 505,
	677, 1272, 536, 754, 754, 1881, 503, 558, 491, 559,
	730, 436, 1256, 1496, 1519, 1234, 1351, 1746, 731, 665,
	1406, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 75, 1032,
	75, 559, 75, 1745, 75, 1150, 1734, 75, 492, 1803,
	1914, 1717, 753, 753, 1928, 450, 75, 711, 1132, 1135,
	1275, 1455, 1242, 75, 1934, 75, 1238, 493, 1315, 1283,
	1084, 843, 835, 1311, 682, 1313, 1920, 1314, 1624, 1316,
	1625, 1038, 1494, 1131, 731, 1849, 558, 450, 664, 825,
	781, 1022, 1735, 612, 1248, 1689, 1333, 63, 1398, 1399,
	1636, 1298, 1247, 48, 1299, 1627, 1301, 1300, 1685, 1521,
	1345, 1520, 1630, 1305, 1336, 514, 1306, 1921, 785, 754,
	65, 550, 1504, 474, 436, 1524, 473, 1284, 731, 1285,
	1286, 1334, 595, 433, 1923, 1592, 1372, 1718, 1639, 1660,
	1287, 1024, 1516, 57, 1321, 1638, 1322, 1023, 66, 1344,
	1690, 1933, 783, 1105, 1106, 1025, 61, 1133, 753, 1325,
	1180, 73, 62, 784, 1796, 1716, 1398, 1399, 1628, 1626,
	1621, 363, 364, 365, 436, 754, 382, 1352, 1619, 394,
	1350, 250, 1623, 1429, 1732, 1635, 1235, 382, 1539, 1392,
	1360, 1335, 1266, 1047, 442, 442, 992, 1404, 73, 533,
	1629, 73, 73, 461, 73, 1733, 532, 75, 531, 530,
	372, 529, 1381, 1263, 753, 1593, 528, 1267, 1364, 754,
	1622, 1594, 1366, 525, 695, 472, 436, 1874, 1430, 926,
	1637, 377, 817, 695, 1376, 1377, 373, 1179, 1846, 1617,
	1469, 75, 75, 450, 1460, 1467, 1414, 1454, 1318, 1086,
	1485, 1081, 1432, 1433, 1434, 1020, 717, 715, 753, 1243,
	374, 712, 707, 691, 687, 1404, 683, 1557, 75, 842,
	1424, 75, 1753, 75, 1092, 1451, 1147, 1907, 376, 75,
	805, 1437, 1458, 1755, 561, 1624, 982, 1625, 75, 521,
	1145, 1510, 75, 446, 1482, 966, 3, 1841, 75, 265,
	1472, 981, 75, 1415, 75, 1480, 1317, 1487, 1507, 1517,
	1488, 966, 1627, 1484, 1414, 1288, 1486, 979, 1764, 1630,
	1530, 1811, 1474, 1475, 565, 985, 1256, 450, 984, 266,
	368, 1093, 1505, 1518, 1497, 1499, 1500, 1522, 411, 1831,
	1672, 1513, 1082, 1553, 1554, 1555, 75, 851, 267, 1080,
	1542, 562, 1527, 1528, 1529, 1003, 1143, 1523, 1142, 1243,
	447, 859, 1148, 375, 454, 1468, 777, 1470, 522, 723,
	1029, 1415, 1931, 379, 1932, 1612, 1626, 73, 477, 73,
	394, 394, 1400, 1401, 1402, 1403, 1405, 730, 730, 1550,
	414, 415, 1398, 1399, 865, 866, 1059, 1058, 1501, 1492,
	1444, 1291, 1564, 1230, 1227, 1226, 378, 1174, 1060, 1569,
	1703, 1556, 1319, 75, 75, 75, 1061, 919, 731, 420,
	1740, 1599, 75, 75, 1329, 370, 816, 526, 75, 1546,
	75, 1869, 75, 75, 75, 1709, 1384, 75, 75, 1774,
	1792, 1144, 1600, 1178, 924, 34, 731, 731, 1146, 1408,
	1400, 1401, 1402, 1403, 1405, 731, 731, 1616, 1664, 1633,
	1634, 588, 1618, 1457, 1613, 1075, 1074, 268, 806, 75,
	75, 795, 1333, 611, 789, 798, 1187, 666, 1668, 613,
	1654, 75, 75, 1668, 728, 75, 1667, 614, 731, 1597,
	1336, 1667, 729, 730, 75, 75, 1673, 1655, 952, 501,
	1607, 1331, 601, 1009, 450, 726, 1670, 1334, 487, 754,
	1666, 1326, 1007, 1175, 506, 1666, 1650, 394, 394, 1380,
	1671, 1332, 922, 75, 587, 593, 1680, 1681, 756, 1697,
	1686, 1692, 808, 807, 592, 801, 796, 754, 754, 1162,
	497, 1693, 1687, 1337, 47, 511, 754, 754, 753, 730,
	450, 382, 388, 73, 450, 394, 394, 389, 551, 1273,
	1651, 1087, 847, 1715, 1466, 424, 1395, 1335, 499, 1208,
	1200, 1197, 545, 442, 672, 1008, 753, 753, 75, 754,
	75, 1678, 75, 75, 73, 753, 753, 755, 523, 1279,
	1028, 75, 727, 730, 570, 855, 445, 731, 73, 444,
	865, 866, 1070, 520, 782, 73, 73, 73, 1730, 705,
	1052, 416, 811, 75, 1805, 1241, 1926, 1810, 753, 1463,
	1728, 1853, 1727, 868, 64, 1358, 25, 23, 73, 73,
	20, 18, 17, 16, 24, 75, 773, 75, 773, 1356,
	1763, 1668, 14, 13, 867, 1765, 75, 12, 11, 1667,
	1754, 1756, 75, 33, 1768, 32, 31, 30, 394, 29,
	773, 394, 394, 394, 394, 394, 824, 5, 760, 1771,
	394, 394, 1791, 1666, 1778, 2, 382, 1566, 1567, 1,
	0, 0, 812, 840, 0, 0, 1571, 1572, 754, 1785,
	0, 1781, 0, 75, 1643, 0, 0, 731, 0, 873,
	1649, 442, 0, 1807, 861, 0, 0, 1354, 1798, 0,
	0, 1359, 75, 75, 0, 0, 75, 1801, 0, 1603,
	75, 0, 1202, 0, 0, 75, 0, 753, 1802, 0,
	1819, 0, 0, 1668, 1827, 0, 1821, 0, 0, 1823,
	75, 1667, 1828, 450, 450, 265, 696, 450, 0, 1833,
	0, 1822, 0, 1820, 1749, 1750, 0, 0, 0, 0,
	1840, 1832, 0, 0, 0, 1666, 1837, 75, 1836, 75,
	75, 0, 75, 0, 0, 266, 731, 1835, 436, 0,
	0, 0, 0, 1859, 0, 0, 1843, 1857, 754, 0,
	1355, 75, 1863, 1861, 267, 0, 1862, 1357, 1855, 0,
	0, 1668, 0, 0, 73, 1860, 1851, 0, 1865, 1667,
	1866, 1763, 971, 0, 1864, 0, 73, 75, 0, 75,
	73, 988, 802, 797, 73, 1886, 1890, 753, 1884, 369,
	0, 1825, 1329, 1666, 1888, 75, 0, 73, 0, 1011,
	1012, 0, 73, 1904, 0, 73, 1900, 394, 394, 1902,
	394, 1908, 0, 1738, 731, 0, 1887, 1909, 1913, 0,
	1912, 1911, 0, 0, 0, 0, 0, 754, 0, 0,
	0, 1925, 1924, 372, 0, 1929, 0, 0, 0, 0,
	1333, 0, 0, 730, 869, 870, 871, 872, 874, 0,
	894, 0, 0, 1935, 377, 756, 756, 1773, 1336, 373,
	0, 0, 0, 773, 861, 1872, 753, 0, 450, 1331,
	0, 730, 730, 0, 0, 1334, 0, 0, 0, 0,
	730, 730, 0, 374, 0, 0, 0, 0, 1748, 1332,
	0, 1892, 0, 0, 0, 0, 0, 1202, 1202, 0,
	0, 376, 0, 1684, 0, 754, 0, 0, 0, 0,
	1064, 0, 0, 730, 755, 755, 0, 0, 0, 727,
	727, 0, 0, 0, 0, 73, 1071, 0, 0, 0,
	861, 0, 0, 0, 0, 1335, 0, 0, 1398, 1399,
	0, 1416, 1417, 1418, 753, 0, 0, 0, 0, 0,
	0, 1202, 1202, 1202, 1695, 0, 0, 73, 0, 0,
	394, 756, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1362, 1363, 1398, 1399,
	0, 1416, 1417, 1418, 0, 0, 375, 0, 1413, 1398,
	1399, 1683, 1852, 0, 1694, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 756, 0, 0,
	755, 0, 730, 0, 0, 727, 0, 0, 1413, 378,
	1421, 1422, 1423, 0, 0, 0, 0, 1404, 0, 1009,
	0, 0, 0, 1398, 1399, 0, 1416, 1417, 1418, 0,
	0, 0, 0, 0, 0, 0, 73, 1236, 1237, 1544,
	0, 756, 971, 0, 0, 1244, 0, 0, 0, 0,
	1419, 1249, 1250, 1252, 1254, 1255, 755, 1404, 0, 1260,
	0, 727, 1262, 73, 0, 0, 1414, 73, 1404, 0,
	0, 0, 0, 1413, 73, 0, 1277, 0, 1202, 1202,
	0, 0, 0, 73, 767, 0, 0, 0, 0, 0,
	1419, 0, 0, 73, 0, 0, 0, 0, 0, 0,
	755, 0, 730, 0, 0, 727, 1414, 0, 0, 0,
	0, 0, 0, 0, 1064, 773, 0, 1414, 0, 0,
	1064, 0, 1404, 1415, 0, 0, 0, 0, 1202, 1202,
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 0, 1202, 0,
	840, 0, 840, 0, 394, 1419, 73, 1537, 1538, 1320,
	0, 0, 0, 1415, 0, 0, 0, 0, 1323, 0,
	0, 1414, 0, 0, 1415, 1342, 0, 73, 0, 0,
	0, 730, 0, 0, 0, 0, 0, 1398, 1399, 0,
	0, 0, 0, 0, 1410, 1411, 1412, 0, 1409, 1406,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 1573, 1574, 1575,
	1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585,
	1586, 1587, 1588, 1589, 1590, 1591, 0, 1595, 1415, 0,
	0, 0, 0, 0, 1410, 1411, 1412, 1413, 1409, 1406,
	1407, 1408, 1400, 1401, 1402, 1403, 1405, 0, 0, 1409,
	1406, 1407, 1408, 1400, 1401, 1402, 1403, 1405, 0, 730,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 589, 45, 0, 0, 0, 1404, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1410,
	1411, 1412, 0, 1409, 1406, 1407, 1408, 1400, 1401, 1402,
	1403, 1405, 395, 0, 0, 0, 0, 0, 45, 861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	410, 756, 0, 0, 0, 1414, 0, 0, 0, 429,
	0, 0, 437, 0, 0, 0, 0, 0, 0, 45,
	0, 0, 0, 73, 73, 0, 0, 1202, 0, 756,
	756, 0, 0, 0, 0, 397, 0, 0, 756, 756,
	402, 403, 0, 0, 408, 0, 0, 0, 0, 0,
	1502, 0, 0, 971, 0, 840, 396, 398, 0, 0,
	755, 1512, 1415, 0, 0, 727, 0, 0, 0, 0,
	73, 756, 0, 0, 73, 0, 0, 0, 0, 0,
	1342, 0, 0, 0, 1532, 0, 1342, 0, 755, 755,
	0, 0, 0, 727, 727, 399, 0, 755, 755, 0,
	0, 0, 727, 727, 0, 0, 1737, 0, 400, 401,
	0, 0, 0, 0, 1202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 404, 0, 0, 0, 1561, 0,
	755, 0, 0, 0, 0, 727, 0, 1409, 1406, 1407,
	1408, 1400, 1401, 1402, 1403, 1405, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 866, 0,
	885, 886, 887, 895, 896, 897, 0, 0, 0, 0,
	756, 0, 0, 888, 0, 0, 0, 0, 0, 0,
	868, 0, 899, 1795, 1202, 1614, 1615, 971, 0, 574,
	574, 0, 437, 0, 861, 861, 0, 0, 674, 0,
	1641, 867, 1642, 0, 73, 1644, 1645, 882, 0, 1648,
	73, 405, 0, 0, 406, 697, 0, 0, 0, 407,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 755,
	0, 0, 0, 409, 727, 0, 0, 0, 0, 1663,
	0, 861, 1071, 0, 1663, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 73, 0, 873, 73, 0, 0,
	0, 0, 0, 1842, 0, 0, 861, 1342, 865, 866,
	756, 0, 0, 0, 892, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 866, 0, 0, 0, 898,
	0, 868, 0, 0, 0, 1710, 0, 0, 0, 890,
	0, 0, 0, 848, 850, 883, 0, 868, 0, 0,
	857, 0, 867, 0, 0, 0, 1398, 1399, 0, 1416,
	1417, 1418, 903, 904, 905, 906, 907, 889, 867, 755,
	0, 910, 1543, 0, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 756,
	971, 923, 1729, 0, 394, 1731, 0, 0, 0, 0,
	0, 0, 884, 73, 0, 0, 1413, 873, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	429, 0, 0, 873, 0, 861, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1663, 0, 0, 0, 0, 73, 755, 1776,
	0, 0, 0, 727, 0, 1404, 883, 0, 73, 0,
	0, 0, 0, 0, 861, 0, 0, 756, 0, 0,
	891, 0, 883, 879, 880, 881, 0, 878, 875, 876,
	877, 869, 870, 871, 872, 874, 0, 894, 1419, 995,
	0, 0, 0, 0, 0, 0, 0, 0, 996, 0,
	0, 0, 0, 0, 1414, 840, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1812, 1813, 755, 0, 1817, 884,
	0, 727, 1818, 0, 1663, 0, 0, 394, 0, 0,
	0, 0, 429, 0, 0, 429, 429, 0, 0, 0,
	1834, 0, 861, 0, 0, 0, 0, 0, 0, 0,
	0, 1415, 0, 0, 0, 0, 0, 0, 909, 0,
	0, 0, 913, 0, 0, 0, 0, 0, 0, 1850,
	0, 861, 73, 0, 394, 0, 0, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 0,
	0, 0, 1663, 1776, 0, 875, 876, 877, 869, 870,
	871, 872, 874, 0, 894, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 861, 1410, 1411, 1412, 0, 1409, 1406, 1407, 1408,
	1400, 1401, 1402, 1403, 1405, 0, 0, 1901, 574, 0,
	0, 0, 0, 0, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 0, 1136, 0, 1138,
	1139, 1140, 1141, 45, 0, 45, 0, 865, 866, 0,
	885, 886, 887, 895, 896, 897, 0, 0, 0, 0,
	45, 0, 0, 888, 0, 45, 0, 0, 0, 0,
	868, 0, 899, 0, 1184, 1185, 0, 0, 1198, 0,
	1209, 1211, 1216, 1219, 1220, 1221, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 865, 866, 882, 885, 886,
	887, 895, 896, 897, 0, 674, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 868, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	0, 1268, 0, 1271, 0, 882, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 892, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 0, 1297, 0, 0, 0, 890,
	0, 0, 0, 0, 873, 883, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 892, 900, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 0, 0,
	0, 0, 0, 0, 0, 857, 0, 890, 0, 0,
	0, 0, 1153, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 884, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 893, 0, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1347, 1348, 0, 0,
	0, 0, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 0, 0, 0, 0, 1367, 0, 0, 0, 0,
	0, 893, 1398, 1399, 1375, 1416, 1417, 1418, 0, 0,
	891, 0, 1383, 879, 880, 881, 1388, 878, 875, 876,
	877, 869, 870, 871, 872, 874, 0, 894, 0, 0,
	0, 0, 0, 437, 1723, 0, 0, 0, 0, 0,
	0, 910, 0, 0, 0, 0, 0, 1216, 1216, 1216,
	0, 0, 1413, 0, 0, 0, 0, 0, 891, 0,
	0, 879, 880, 881, 0, 878, 875, 876, 877, 869,
	870, 871, 872, 874, 0, 894, 0, 0, 0, 0,
	1459, 0, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1404, 0, 0, 0, 574, 0, 0, 0, 0,
	0, 0, 45, 574, 45, 0, 0, 674, 0, 0,
	1420, 0, 0, 0, 865, 866, 45, 885, 886, 887,
	895, 896, 897, 0, 1419, 0, 1343, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 0, 868, 0, 899,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1398, 1399, 0, 1416, 1417, 1418, 1153, 867, 0,
	0, 0, 0, 0, 882, 0, 0, 0, 0, 0,
	0, 1535, 0, 0, 1536, 0, 909, 0, 0, 0,
	0, 0, 0, 0, 0, 1541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1415, 1297, 0,
	0, 1413, 0, 0, 0, 0, 0, 1558, 0, 0,
	0, 1398, 1399, 873, 1416, 1417, 1418, 1568, 0, 0,
	0, 1570, 0, 0, 0, 0, 0, 0, 909, 0,
	0, 892, 900, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 0, 0, 0,
	1404, 0, 0, 0, 1601, 1602, 890, 0, 0, 0,
	0, 1413, 883, 1608, 1609, 1610, 0, 0, 1410, 1411,
	1412, 0, 1409, 1406, 1407, 1408, 1400, 1401, 1402, 1403,
	1405, 0, 0, 1419, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 1102, 0, 0, 574, 0, 865, 866,
	1404, 885, 886, 887, 895, 896, 897, 0, 0, 884,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	893, 868, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 1677, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 867, 1102, 0, 0, 1415, 0, 882, 1414,
	0, 0, 0, 0, 1696, 0, 0, 0, 1699, 1700,
	0, 0, 0, 1702, 0, 0, 0, 1704, 0, 0,
	0, 0, 0, 0, 1708, 0, 0, 891, 1711, 0,
	879, 880, 881, 0, 878, 875, 876, 877, 869, 870,
	871, 872, 874, 0, 894, 0, 0, 873, 0, 0,
	0, 1439, 0, 0, 0, 0, 1415, 0, 0, 0,
	0, 1720, 0, 0, 0, 892, 900, 1410, 1411, 1412,
	0, 1409, 1406, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 883, 0, 865, 866,
	0, 0, 0, 1747, 895, 896, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 868, 0, 899, 0, 0, 0, 1410, 1411, 1412,
	1766, 1409, 1406, 1407, 1408, 1400, 1401, 1402, 1403, 1405,
	0, 0, 867, 0, 0, 45, 0, 0, 882, 1780,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 1787,
	1788, 0, 0, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 1102, 0, 0, 1102, 0, 1800, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 1804, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 900, 0, 0, 0,
	0, 891, 0, 674, 879, 880, 881, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 0,
	890, 0, 0, 0, 0, 1438, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 0, 0, 0, 1757, 1885,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 1899, 1899, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 0, 0, 0, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 1899, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	909, 77, 78, 283, 79, 284, 285, 286, 287, 191,
	288, 289, 290, 291, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 292, 83, 198, 199, 84, 293, 294,
	200, 201, 202, 295, 203, 296, 269, 297, 85, 86,
	87, 0, 88, 298, 89, 90, 91, 299, 270, 92,
	93, 300, 301, 302, 303, 304, 305, 94, 95, 96,
	97, 204, 98, 205, 206, 306, 99, 307, 100, 308,
	309, 310, 101, 102, 311, 103, 312, 0, 313, 207,
	104, 105, 208, 209, 314, 315, 316, 106, 107, 210,
	0, 108, 317, 109, 318, 319, 271, 320, 110, 211,
	321, 212, 322, 111, 112, 113, 213, 214, 273, 323,
	116, 324, 114, 325, 272, 115, 215, 216, 217, 218,
	326, 219, 327, 274, 117, 275, 118, 119, 328, 329,
	220, 276, 120, 277, 330, 121, 331, 332, 122, 0,
	123, 124, 125, 126, 127, 278, 128, 129, 132, 130,
	333, 131, 334, 221, 133, 222, 134, 135, 335, 336,
	337, 338, 339, 136, 223, 279, 137, 280, 224, 138,
	139, 140, 340, 225, 141, 226, 142, 341, 143, 144,
	145, 227, 146, 147, 342, 149, 150, 148, 151, 343,
	152, 281, 153, 154, 228, 155, 0, 156, 157, 158,
	344, 229, 159, 160, 345, 161, 162, 282, 163, 230,
	231, 164, 346, 170, 165, 166, 167, 169, 232, 168,
	233, 347, 171, 348, 172, 173, 349, 234, 235, 236,
	350, 351, 174, 237, 238, 352, 175, 176, 177, 178,
	353, 354, 179, 180, 181, 355, 182, 356, 183, 184,
	185, 239, 240, 357, 358, 186, 359, 360, 361, 362,
	187, 188, 189, 190, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1531, 77, 78, 283, 79, 284, 285, 286, 287, 191,
	288, 289, 290, 291, 80, 81, 192, 193, 194, 195,
	82, 196, 197, 292, 83, 198, 199, 84, 293, 294,
	200, 201, 202, 295, 203, 296, 269, 297, 85, 86,
	87, 0, 88, 298, 89, 90, 91, 299, 270, 92,
	93, 300, 301, 302, 303, 304, 305, 94, 95, 96,
	97, 204, 98, 205, 206, 306, 99, 307, 100, 308,
	309, 310, 101, 102, 311, 103, 312, 0, 313, 207,
	104, 105, 208, 209, 314, 315, 316, 106, 107, 210,
	0, 108, 317, 109, 318, 319, 271, 320, 110, 211,
	321, 212, 322, 111, 112, 113, 213, 214, 273, 323,
	116, 324, 114, 325, 272, 115, 215, 216, 217, 218,
	326, 219, 327, 274, 117, 275, 118, 119, 328, 329,
	220, 276, 120, 277, 330, 121, 331, 332, 122, 0,
	123, 124, 125, 126, 127, 278, 128, 129, 132, 130,
	333, 131, 334, 221, 133, 222, 134, 135, 335, 336,
	337, 338, 339, 136, 223, 279, 137, 280, 224, 138,
	139, 140, 340, 225, 141, 226, 142, 341, 143, 144,
	145, 227, 146, 147, 342, 149, 150, 148, 151, 343,
	152, 281, 153, 154, 228, 155, 0, 156, 157, 158,
	344, 229, 159, 160, 345, 161, 162, 282, 163, 230,
	231, 164, 346, 170, 165, 166, 167, 169, 232, 168,
	233, 347, 171, 348, 172, 173, 349, 234, 235, 236,
	350, 351, 174, 237, 238, 352, 175, 176, 177, 178,
	353, 354, 179, 180, 181, 355, 182, 356, 183, 184,
	185, 239, 240, 357, 358, 186, 359, 360, 361, 362,
	187, 188, 189, 190, 264, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 699, 0, 0,
	77, 78, 283, 79, 284, 285, 286, 287, 191, 288,
	289, 290, 291, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 292, 83, 198, 199, 84, 293, 294, 200,
	201, 202, 295, 203, 296, 269, 297, 85, 86, 87,
	0, 88, 298, 89, 90, 91, 299, 270, 92, 93,
	300, 301, 302, 303, 304, 305, 94, 95, 96, 97,
	204, 98, 205, 206, 306, 99, 307, 100, 308, 309,
	310, 101, 102, 311, 103, 312, 0, 313, 207, 104,
	105, 208, 209, 314, 315, 316, 106, 107, 210, 0,
	108, 317, 109, 318, 319, 271, 320, 110, 211, 321,
	212, 322, 111, 112, 113, 213, 214, 273, 323, 116,
	324, 114, 325, 272, 115, 215, 216, 217, 218, 326,
	219, 327, 274, 117, 275, 118, 119, 328, 329, 220,
	276, 120, 277, 330, 121, 331, 332, 122, 0, 123,
	124, 125, 126, 127, 278, 128, 129, 132, 130, 333,
	131, 334, 221, 133, 222, 134, 135, 335, 336, 337,
	338, 339, 136, 223, 279, 137, 280, 224, 138, 139,
	140, 340, 225, 141, 226, 142, 341, 143, 144, 145,
	227, 146, 147, 342, 149, 150, 148, 151, 343, 152,
	281, 153, 154, 228, 155, 0, 156, 157, 158, 344,
	229, 159, 160, 345, 161, 162, 282, 163, 230, 231,
	164, 346, 170, 165, 166, 167, 169, 232, 168, 233,
	347, 171, 348, 172, 173, 349, 234, 235, 236, 350,
	351, 174, 237, 238, 352, 175, 176, 177, 178, 353,
	354, 179, 180, 181, 355, 182, 356, 183, 184, 185,
	239, 240, 357, 358, 186, 359, 360, 361, 362, 187,
	188, 189, 190, 609, 598, 599, 596, 597, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 1170, 79, 0, 0, 0, 0, 625, 591, 0,
	0, 0, 80, 81, 192, 640, 194, 641, 82, 642,
	643, 0, 83, 198, 199, 84, 606, 624, 644, 645,
	202, 0, 636, 0, 617, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 270, 92, 93, 0,
	618, 620, 0, 619, 621, 94, 95, 96, 97, 646,
	98, 647, 648, 0, 99, 0, 100, 0, 1171, 0,
	639, 102, 0, 103, 0, 0, 0, 590, 104, 105,
	626, 627, 604, 0, 0, 106, 107, 649, 0, 108,
	0, 109, 0, 0, 271, 0, 110, 637, 0, 212,
	0, 111, 112, 113, 633, 635, 273, 0, 116, 0,
	114, 0, 272, 115, 650, 651, 652, 653, 0, 616,
	0, 274, 117, 275, 118, 119, 0, 0, 638, 276,
	120, 277, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 278, 128, 129, 132, 130, 580, 131,
	605, 634, 133, 654, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 279, 137, 280, 628, 138, 139, 140,
	0, 629, 141, 226, 142, 0, 143, 144, 145, 655,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 281,
	153, 154, 594, 155, 0, 156, 157, 158, 0, 229,
	159, 160, 622, 161, 162, 282, 163, 656, 231, 164,
	0, 170, 165, 166, 167, 169, 657, 168, 630, 0,
	171, 0, 172, 173, 0, 234, 658, 659, 0, 0,
	174, 631, 632, 603, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 623, 182, 0, 183, 184, 185, 239,
	660, 1169, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 578, 1172, 0, 0, 0, 579,
	0, 0, 586, 1167, 609, 598, 599, 596, 597, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 0, 0, 0, 0, 625, 591,
	0, 0, 0, 80, 81, 192, 640, 194, 641, 82,
	642, 643, 0, 83, 198, 199, 84, 606, 624, 644,
	645, 202, 0, 636, 0, 617, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 270, 92, 93,
	0, 618, 620, 0, 619, 621, 94, 95, 96, 97,
	646, 98, 647, 648, 675, 99, 0, 100, 0, 0,
	0, 639, 102, 0, 103, 0, 0, 0, 590, 104,
	105, 626, 627, 604, 0, 0, 106, 107, 649, 0,
	108, 0, 109, 0, 0, 271, 0, 110, 637, 0,
	212, 0, 111, 112, 113, 633, 635, 273, 0, 116,
	0, 114, 0, 272, 115, 650, 651, 652, 653, 0,
	616, 0, 274, 117, 275, 118, 119, 0, 0, 638,
	276, 120, 277, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 278, 128, 129, 132, 130, 580,
	131, 605, 634, 133, 654, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 279, 137, 280, 628, 138, 139,
	140, 0, 629, 141, 226, 142, 0, 143, 144, 145,
	655, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	281, 153, 154, 594, 155, 0, 156, 157, 158, 63,
	229, 159, 160, 622, 161, 162, 282, 163, 656, 231,
	164, 0, 170, 165, 166, 167, 169, 657, 168, 630,
	0, 171, 65, 172, 173, 0, 234, 658, 659, 0,
	0, 174, 631, 632, 603, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 623, 182, 0, 183, 184, 185,
	494, 660, 0, 0, 186, 0, 0, 0, 61, 187,
	188, 189, 190, 581, 62, 609, 598, 599, 596, 597,
	585, 0, 0, 0, 577, 578, 0, 0, 0, 0,
	579, 77, 78, 586, 79, 0, 0, 0, 0, 625,
	591, 0, 0, 0, 80, 81, 192, 640, 194, 641,
	82, 642, 643, 0, 83, 198, 199, 84, 606, 624,
	644, 645, 202, 0, 636, 0, 617, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 270, 92,
	93, 0, 618, 620, 0, 619, 621, 94, 95, 96,
	97, 646, 98, 647, 648, 0, 99, 0, 100, 0,
	0, 0, 639, 102, 0, 103, 0, 0, 0, 590,
	104, 105, 626, 627, 604, 0, 0, 106, 107, 649,
	0, 108, 0, 109, 0, 0, 271, 0, 110, 637,
	0, 212, 0, 111, 112, 113, 633, 635, 273, 0,
	116, 0, 114, 0, 272, 115, 650, 651, 652, 653,
	0, 616, 0, 274, 117, 275, 118, 119, 0, 0,
	638, 276, 120, 277, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 278, 128, 129, 132, 130,
	580, 131, 605, 634, 133, 654, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 279, 137, 280, 628, 138,
	139, 140, 0, 629, 141, 226, 142, 0, 143, 144,
	145, 655, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 281, 153, 154, 594, 155, 0, 156, 157, 158,
	63, 229, 159, 160, 622, 161, 162, 282, 163, 656,
	231, 164, 0, 170, 165, 166, 167, 169, 657, 168,
	630, 0, 171, 65, 172, 173, 0, 234, 658, 659,
	0, 0, 174, 631, 632, 603, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 623, 182, 0, 183, 184,
	185, 494, 660, 0, 0, 186, 0, 0, 0, 61,
	187, 188, 189, 190, 581, 62, 609, 598, 599, 596,
	597, 585, 0, 0, 0, 577, 578, 0, 0, 0,
	0, 579, 77, 78, 586, 79, 0, 0, 0, 0,
	625, 591, 0, 0, 0, 80, 81, 192, 640, 194,
	641, 82, 642, 643, 1212, 83, 198, 199, 84, 606,
	624, 644, 645, 202, 0, 636, 0, 617, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 270,
	92, 93, 0, 618, 620, 0, 619, 621, 94, 95,
	96, 97, 646, 98, 647, 648, 0, 99, 0, 100,
	0, 0, 0, 639, 102, 0, 103, 0, 0, 0,
	590, 104, 105, 626, 627, 604, 0, 0, 106, 107,
	649, 0, 108, 0, 109, 0, 1217, 271, 0, 110,
	637, 0, 212, 0, 111, 112, 113, 633, 635, 273,
	0, 116, 0, 114, 0, 272, 115, 650, 651, 652,
	653, 0, 616, 0, 274, 117, 275, 118, 119, 0,
	1213, 638, 276, 120, 277, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 278, 128, 129, 132,
	130, 580, 131, 605, 634, 133, 654, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 279, 137, 280, 628,
	138, 139, 140, 0, 629, 141, 226, 142, 0, 143,
	144, 145, 655, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 281, 153, 154, 594, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 622, 161, 162, 282, 163,
	656, 231, 164, 0, 170, 165, 166, 167, 169, 657,
	168, 630, 0, 171, 0, 172, 173, 0, 234, 658,
	659, 0, 1214, 174, 631, 632, 603, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 623, 182, 0, 183,
	184, 185, 239, 660, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 581, 0, 609, 598, 599,
	596, 597, 585, 0, 0, 0, 577, 578, 0, 0,
	0, 0, 579, 77, 78, 586, 79, 0, 0, 0,
	0, 625, 591, 0, 0, 0, 80, 81, 192, 640,
	194, 641, 82, 642, 643, 0, 83, 198, 199, 84,
	606, 624, 644, 645, 202, 0, 636, 0, 617, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	270, 92, 93, 0, 618, 620, 0, 619, 621, 94,
	95, 96, 97, 646, 98, 647, 648, 0, 99, 0,
	100, 0, 0, 0, 639, 102, 0, 103, 0, 0,
	0, 590, 104, 105, 626, 627, 604, 0, 0, 106,
	107, 649, 0, 108, 0, 109, 0, 0, 271, 0,
	110, 637, 0, 212, 0, 111, 112, 113, 633, 635,
	273, 0, 116, 0, 114, 0, 272, 115, 650, 651,
	652, 653, 0, 616, 0, 274, 117, 275, 118, 119,
	0, 0, 638, 276, 120, 277, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 278, 128, 129,
	132, 130, 580, 131, 605, 634, 133, 654, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 279, 137, 280,
	628, 138, 139, 140, 0, 629, 141, 226, 142, 0,
	143, 144, 145, 655, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 281, 153, 154, 594, 155, 0, 156,
	157, 158, 0, 229, 159, 160, 622, 161, 162, 282,
	163, 656, 231, 164, 0, 170, 165, 166, 167, 169,
	657, 168, 630, 0, 171, 0, 172, 173, 0, 234,
	658, 659, 0, 0, 174, 631, 632, 603, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 623, 182, 0,
	183, 184, 185, 239, 660, 0, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 578, 0,
	0, 0, 0, 579, 0, 0, 586, 1598, 609, 598,
	599, 596, 597, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	0, 0, 625, 591, 0, 0, 0, 80, 81, 192,
	640, 194, 641, 82, 642, 643, 0, 83, 198, 199,
	84, 606, 624, 644, 645, 202, 0, 636, 0, 617,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 270, 92, 93, 0, 618, 620, 0, 619, 621,
	94, 95, 96, 97, 646, 98, 647, 648, 0, 99,
	0, 100, 0, 0, 0, 639, 102, 0, 103, 0,
	0, 0, 590, 104, 105, 626, 627, 604, 0, 0,
	106, 107, 649, 0, 108, 0, 109, 0, 0, 271,
	0, 110, 637, 0, 212, 0, 111, 112, 113, 633,
	635, 273, 0, 116, 0, 114, 0, 272, 115, 650,
	651, 652, 653, 0, 616, 0, 274, 117, 275, 118,
	119, 0, 0, 638, 276, 120, 277, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 278, 128,
	129, 132, 130, 580, 131, 605, 634, 133, 654, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 279, 137,
	280, 628, 138, 139, 140, 0, 629, 141, 226, 142,
	0, 143, 144, 145, 655, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 281, 153, 154, 594, 155, 0,
	156, 157, 158, 0, 229, 159, 160, 622, 161, 162,
	282, 163, 656, 231, 164, 0, 170, 165, 166, 167,
	169, 657, 168, 630, 0, 171, 0, 172, 173, 0,
	234, 658, 659, 0, 0, 174, 631, 632, 603, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 623, 182,
	0, 183, 184, 185, 239, 660, 0, 0, 186, 0,
	0, 0, 0, 187, 188, 189, 190, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 577, 578,
	0, 0, 0, 0, 579, 0, 0, 586, 1547, 609,
	598, 599, 596, 597, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 625, 591, 0, 0, 0, 80, 81,
	192, 640, 194, 641, 82, 642, 643, 0, 83, 198,
	199, 84, 606, 624, 644, 645, 202, 0, 636, 0,
	617, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 270, 92, 93, 0, 618, 620, 0, 619,
	621, 94, 95, 96, 97, 646, 98, 647, 648, 0,
	99, 0, 100, 0, 0, 0, 639, 102, 0, 103,
	0, 0, 0, 590, 104, 105, 626, 627, 604, 0,
	0, 106, 107, 649, 0, 108, 0, 109, 0, 0,
	271, 0, 110, 637, 0, 212, 0, 111, 112, 113,
	633, 635, 273, 0, 116, 0, 114, 0, 272, 115,
	650, 651, 652, 653, 0, 616, 0, 274, 117, 275,
	118, 119, 0, 0, 638, 276, 120, 277, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 278,
	128, 129, 132, 130, 580, 131, 605, 634, 133, 654,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 279,
	137, 280, 628, 138, 139, 140, 0, 629, 141, 226,
	142, 0, 143, 144, 145, 655, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 281, 153, 154, 594, 155,
	0, 156, 157, 158, 0, 229, 159, 160, 622, 161,
	162, 282, 163, 656, 231, 164, 0, 170, 165, 166,
	167, 169, 657, 168, 630, 0, 171, 0, 172, 173,
	0, 234, 658, 659, 0, 0, 174, 631, 632, 603,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 623,
	182, 0, 183, 184, 185, 239, 660, 0, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 581, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 577,
	578, 0, 0, 0, 0, 579, 0, 0, 586, 1166,
	609, 598, 599, 596, 597, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 625, 591, 0, 0, 0, 80,
	81, 192, 640, 194, 641, 82, 642, 643, 0, 83,
	198, 199, 84, 606, 624, 644, 645, 202, 0, 636,
	0, 617, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 270, 92, 93, 0, 618, 620, 0,
	619, 621, 94, 95, 96, 97, 646, 98, 647, 648,
	0, 99, 0, 100, 0, 0, 0, 639, 102, 0,
	103, 0, 0, 0, 590, 104, 105, 626, 627, 604,
	0, 0, 106, 107, 649, 0, 108, 0, 109, 0,
	0, 271, 0, 110, 637, 0, 212, 0, 111, 112,
	113, 633, 635, 273, 0, 116, 0, 114, 0, 272,
	115, 650, 651, 652, 653, 0, 616, 0, 274, 117,
	275, 118, 119, 0, 0, 638, 276, 120, 277, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	278, 128, 129, 132, 130, 580, 131, 605, 634, 133,
	654, 134, 135, 0, 0, 0, 0, 0, 136, 223,
	279, 137, 280, 628, 138, 139, 140, 0, 629, 141,
	226, 142, 0, 143, 144, 145, 655, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 281, 153, 154, 594,
	155, 0, 156, 157, 158, 0, 229, 159, 160, 622,
	161, 162, 282, 163, 656, 231, 164, 0, 170, 165,
	166, 167, 169, 657, 168, 630, 0, 171, 0, 172,
	173, 0, 234, 658, 659, 0, 0, 174, 631, 632,
	603, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	623, 182, 0, 183, 184, 185, 239, 660, 0, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 581,
	0, 0, 0, 0, 609, 598, 599, 596, 597, 585,
	577, 578, 0, 0, 0, 0, 579, 915, 1163, 586,
	77, 78, 0, 79, 0, 0, 0, 0, 625, 591,
	0, 0, 0, 80, 81, 192, 640, 194, 641, 82,
	642, 643, 0, 83, 198, 199, 84, 606, 624, 644,
	645, 202, 0, 636, 0, 617, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 270, 92, 93,
	0, 618, 620, 0, 619, 621, 94, 95, 96, 97,
	646, 98, 647, 648, 0, 99, 0, 100, 0, 0,
	0, 639, 102, 0, 103, 0, 0, 0, 590, 104,
	105, 626, 627, 604, 0, 0, 106, 107, 649, 0,
	108, 0, 109, 0, 0, 271, 0, 110, 637, 0,
	212, 0, 111, 112, 113, 633, 635, 273, 0, 116,
	0, 114, 0, 272, 115, 650, 651, 652, 653, 0,
	616, 0, 274, 117, 275, 118, 119, 0, 0, 638,
	276, 120, 277, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 278, 128, 129, 132, 130, 580,
	131, 605, 634, 133, 654, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 279, 137, 280, 628, 138, 139,
	140, 0, 629, 141, 226, 142, 0, 143, 144, 145,
	655, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	281, 153, 154, 594, 155, 0, 156, 157, 158, 0,
	229, 159, 160, 622, 161, 162, 282, 163, 656, 231,
	164, 0, 170, 165, 166, 167, 169, 657, 168, 630,
	0, 171, 0, 172, 173, 0, 234, 658, 659, 0,
	0, 174, 631, 632, 603, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 623, 182, 0, 183, 184, 185,
	239, 660, 0, 0, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 581, 0, 609, 598, 599, 596, 597,
	585, 0, 0, 0, 577, 578, 575, 0, 0, 0,
	579, 77, 78, 586, 79, 0, 0, 0, 0, 625,
	591, 0, 0, 0, 80, 81, 192, 640, 194, 641,
	82, 642, 643, 0, 83, 198, 199, 84, 606, 624,
	644, 645, 202, 0, 636, 0, 617, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 270, 92,
	93, 0, 618, 620, 0, 619, 621, 94, 95, 96,
	97, 646, 98, 647, 648, 0, 99, 0, 100, 0,
	0, 0, 639, 102, 0, 103, 0, 0, 0, 590,
	104, 105, 626, 627, 604, 0, 0, 106, 107, 649,
	0, 108, 0, 109, 0, 0, 271, 0, 110, 637,
	0, 212, 0, 111, 112, 113, 633, 635, 273, 0,
	116, 0, 114, 0, 272, 115, 650, 651, 652, 653,
	0, 616, 0, 274, 117, 275, 118, 119, 0, 0,
	638, 276, 120, 277, 0, 121, 0, 0, 122, 0,
	123, 124, 125, 126, 127, 278, 128, 129, 132, 130,
	580, 131, 605, 634, 133, 654, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 279, 137, 280, 628, 138,
	139, 140, 0, 629, 141, 226, 142, 0, 143, 144,
	145, 655, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 281, 153, 154, 594, 155, 0, 156, 157, 158,
	0, 229, 159, 160, 622, 161, 162, 282, 163, 656,
	231, 164, 0, 170, 165, 166, 167, 169, 657, 168,
	630, 0, 171, 0, 172, 173, 0, 234, 658, 659,
	0, 0, 174, 631, 632, 603, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 623, 182, 0, 183, 184,
	185, 239, 660, 1552, 0, 186, 0, 0, 0, 0,
	187, 188, 189, 190, 581, 0, 609, 598, 599, 596,
	597, 585, 0, 0, 0, 577, 578, 0, 0, 0,
	0, 579, 77, 78, 586, 79, 0, 0, 0, 0,
	625, 591, 0, 0, 0, 80, 81, 192, 640, 194,
	641, 82, 642, 643, 0, 83, 198, 199, 84, 606,
	624, 644, 645, 202, 0, 636, 0, 617, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 270,
	92, 93, 0, 618, 620, 0, 619, 621, 94, 95,
	96, 97, 646, 98, 647, 648, 675, 99, 0, 100,
	0, 0, 0, 639, 102, 0, 103, 0, 0, 0,
	590, 104, 105, 626, 627, 604, 0, 0, 106, 107,
	649, 0, 108, 0, 109, 0, 0, 271, 0, 110,
	637, 0, 212, 0, 111, 112, 113, 633, 635, 273,
	0, 116, 0, 114, 0, 272, 115, 650, 651, 652,
	653, 0, 616, 0, 274, 117, 275, 118, 119, 0,
	0, 638, 276, 120, 277, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 278, 128, 129, 132,
	130, 580, 131, 605, 634, 133, 654, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 279, 137, 280, 628,
	138, 139, 140, 0, 629, 141, 226, 142, 0, 143,
	144, 145, 655, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 281, 153, 154, 594, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 622, 161, 162, 282, 163,
	656, 231, 164, 0, 170, 165, 166, 167, 169, 657,
	168, 630, 0, 171, 0, 172, 173, 0, 234, 658,
	659, 0, 0, 174, 631, 632, 603, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 623, 182, 0, 183,
	184, 185, 239, 660, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 581, 0, 609, 598, 599,
	596, 597, 585, 0, 0, 0, 577, 578, 0, 0,
	0, 0, 579, 77, 78, 586, 79, 0, 0, 0,
	0, 625, 591, 0, 0, 0, 80, 81, 192, 640,
	194, 641, 82, 642, 643, 0, 83, 198, 199, 84,
	606, 624, 644, 645, 202, 0, 636, 0, 617, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	270, 92, 93, 0, 618, 620, 0, 619, 621, 94,
	95, 96, 97, 646, 98, 647, 648, 0, 99, 0,
	100, 0, 0, 0, 639, 102, 0, 103, 0, 0,
	0, 590, 104, 105, 626, 627, 604, 0, 0, 106,
	107, 649, 0, 108, 0, 109, 0, 1217, 271, 0,
	110, 637, 0, 212, 0, 111, 112, 113, 633, 635,
	273, 0, 116, 0, 114, 0, 272, 115, 650, 651,
	652, 653, 0, 616, 0, 274, 117, 275, 118, 119,
	0, 0, 638, 276, 120, 277, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 278, 128, 129,
	132, 130, 580, 131, 605, 634, 133, 654, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 279, 137, 280,
	628, 138, 139, 140, 0, 629, 141, 226, 142, 0,
	143, 144, 145, 655, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 281, 153, 154, 594, 155, 0, 156,
	157, 158, 0, 229, 159, 160, 622, 161, 162, 282,
	163, 656, 231, 164, 0, 170, 165, 166, 167, 169,
	657, 168, 630, 0, 171, 0, 172, 173, 0, 234,
	658, 659, 0, 0, 174, 631, 632, 603, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 623, 182, 0,
	183, 184, 185, 239, 660, 0, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 581, 0, 0, 0,
	0, 609, 598, 599, 596, 597, 585, 577, 578, 0,
	0, 0, 0, 579, 0, 0, 586, 77, 78, 849,
	79, 0, 0, 0, 0, 625, 591, 0, 0, 0,
	80, 81, 192, 640, 194, 641, 82, 642, 643, 0,
	83, 198, 199, 84, 606, 624, 644, 645, 202, 0,
	636, 0, 617, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 270, 92, 93, 0, 618, 620,
	0, 619, 621, 94, 95, 96, 97, 646, 98, 647,
	648, 0, 99, 0, 100, 0, 0, 0, 639, 102,
	0, 103, 0, 0, 0, 590, 104, 105, 626, 627,
	604, 0, 0, 106, 107, 649, 0, 108, 0, 109,
	0, 0, 271, 0, 110, 637, 0, 212, 0, 111,
	112, 113, 633, 635, 273, 0, 116, 0, 114, 0,
	272, 115, 650, 651, 652, 653, 0, 616, 0, 274,
	117, 275, 118, 119, 0, 0, 638, 276, 120, 277,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 278, 128, 129, 132, 130, 580, 131, 605, 634,
	133, 654, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 279, 137, 280, 628, 138, 139, 140, 0, 629,
	141, 226, 142, 0, 143, 144, 145, 655, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 281, 153, 154,
	594, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	622, 161, 162, 282, 163, 656, 231, 164, 0, 170,
	165, 166, 167, 169, 657, 168, 630, 0, 171, 0,
	172, 173, 0, 234, 658, 659, 0, 0, 174, 631,
	632, 603, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 623, 182, 0, 183, 184, 185, 239, 660, 0,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	581, 0, 609, 598, 599, 596, 597, 585, 0, 0,
	0, 577, 578, 0, 0, 0, 0, 579, 77, 78,
	586, 79, 0, 0, 0, 0, 625, 591, 0, 0,
	0, 80, 81, 192, 640, 194, 641, 82, 642, 643,
	0, 83, 198, 199, 84, 606, 624, 644, 645, 202,
	0, 636, 0, 617, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 270, 92, 1898, 0, 618,
	620, 0, 619, 621, 94, 95, 96, 97, 646, 98,
	647, 648, 0, 99, 0, 100, 0, 0, 0, 639,
	102, 0, 103, 0, 0, 0, 590, 104, 105, 626,
	627, 604, 0, 0, 106, 107, 649, 0, 108, 0,
	109, 0, 0, 271, 0, 110, 637, 0, 212, 0,
	111, 112, 113, 633, 635, 273, 0, 116, 0, 114,
	0, 272, 115, 650, 651, 652, 653, 0, 616, 0,
	274, 117, 275, 118, 119, 0, 0, 638, 276, 120,
	277, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 278, 128, 129, 132, 130, 580, 131, 605,
	634, 133, 654, 134, 135, 0, 0, 0, 0, 0,
	136, 223, 279, 137, 280, 628, 138, 139, 140, 0,
	629, 141, 226, 142, 0, 143, 144, 145, 655, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 281, 153,
	154, 594, 155, 0, 156, 157, 158, 0, 229, 159,
	160, 622, 161, 162, 282, 163, 656, 231, 164, 0,
	170, 165, 166, 167, 169, 657, 168, 630, 0, 171,
	0, 172, 173, 0, 234, 658, 659, 0, 0, 174,
	631, 632, 603, 175, 176, 1897, 178, 0, 0, 179,
	180, 181, 623, 182, 0, 183, 184, 185, 239, 660,
	0, 0, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 581, 0, 609, 598, 599, 596, 597, 585, 0,
	0, 0, 577, 578, 0, 0, 0, 0, 579, 77,
	78, 586, 79, 0, 0, 0, 0, 625, 591, 0,
	0, 0, 80, 81, 1896, 640, 194, 641, 82, 642,
	643, 0, 83, 198, 199, 84, 606, 624, 644, 645,
	202, 0, 636, 0, 617, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 270, 92, 1898, 0,
	618, 620, 0, 619, 621, 94, 95, 96, 97, 646,
	98, 647, 648, 0, 99, 0, 100, 0, 0, 0,
	639, 102, 0, 103, 0, 0, 0, 590, 104, 105,
	626, 627, 604, 0, 0, 106, 107, 649, 0, 108,
	0, 109, 0, 0, 271, 0, 110, 637, 0, 212,
	0, 111, 112, 113, 633, 635, 273, 0, 116, 0,
	114, 0, 272, 115, 650, 651, 652, 653, 0, 616,
	0, 274, 117, 275, 118, 119, 0, 0, 638, 276,
	120, 277, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 278, 128, 129, 132, 130, 580, 131,
	605, 634, 133, 654, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 279, 137, 280, 628, 138, 139, 140,
	0, 629, 141, 226, 142, 0, 143, 144, 145, 655,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 281,
	153, 154, 594, 155, 0, 156, 157, 158, 0, 229,
	159, 160, 622, 161, 162, 282, 163, 656, 231, 164,
	0, 170, 165, 166, 167, 169, 657, 168, 630, 0,
	171, 0, 172, 173, 0, 234, 658, 659, 0, 0,
	174, 631, 632, 603, 175, 176, 1897, 178, 0, 0,
	179, 180, 181, 623, 182, 0, 183, 184, 185, 239,
	660, 0, 0, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 581, 0, 609, 598, 599, 596, 597, 585,
	0, 0, 0, 577, 578, 0, 0, 0, 0, 579,
	77, 78, 586, 79, 0, 0, 0, 0, 625, 591,
	0, 0, 0, 80, 81, 192, 640, 194, 641, 82,
	642, 643, 0, 83, 198, 199, 84, 606, 624, 644,
	645, 202, 0, 636, 0, 617, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 270, 92, 93,
	0, 618, 620, 0, 619, 621, 94, 95, 96, 97,
	646, 98, 647, 648, 0, 99, 0, 100, 0, 0,
	0, 639, 102, 0, 103, 0, 0, 0, 590, 104,
	105, 626, 627, 604, 0, 0, 106, 107, 649, 0,
	108, 0, 109, 0, 0, 271, 0, 110, 637, 0,
	212, 0, 111, 112, 113, 633, 635, 273, 0, 116,
	0, 114, 0, 272, 115, 650, 651, 652, 653, 0,
	616, 0, 274, 117, 275, 118, 119, 0, 0, 638,
	276, 120, 277, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 278, 128, 129, 132, 130, 580,
	131, 605, 634, 133, 654, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 279, 137, 280, 628, 138, 139,
	140, 0, 629, 141, 226, 142, 0, 143, 144, 145,
	655, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	281, 153, 154, 594, 155, 0, 156, 157, 158, 0,
	229, 159, 160, 622, 161, 162, 282, 163, 656, 231,
	164, 0, 170, 165, 166, 167, 169, 657, 168, 630,
	0, 171, 0, 172, 173, 0, 234, 658, 659, 0,
	0, 174, 631, 632, 603, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 623, 182, 0, 183, 184, 185,
	239, 660, 0, 0, 186, 0, 0, 0, 0, 187,
	188, 189, 190, 581, 0, 1189, 598, 599, 596, 597,
	585, 0, 0, 0, 577, 578, 0, 0, 0, 0,
	579, 77, 78, 586, 79, 0, 0, 0, 0, 625,
	591, 0, 0, 0, 80, 81, 192, 640, 194, 641,
	82, 642, 643, 0, 83, 198, 199, 84, 606, 624,
	644, 645, 202, 0, 636, 0, 617, 0, 85, 86,
	87, 0, 88, 0, 89, 90, 91, 0, 270, 92,
	93, 0, 618, 620, 0, 619, 621, 94, 95, 96,
	97, 646, 1192, 647, 648, 0, 99, 0, 100, 0,
	0, 0, 639, 102, 0, 103, 0, 0, 0, 590,
	104, 105, 626, 627, 604, 0, 0, 106, 107, 649,
	0, 108, 0, 109, 0, 0, 271, 0, 110, 637,
	0, 212, 0, 111, 112, 1193, 633, 635, 273, 0,
	116, 0, 114, 0, 272, 115, 650, 651, 652, 653,
	0, 616, 0, 274, 117, 275, 118, 119, 0, 0,
	638, 276, 120, 277, 0, 121, 0, 0, 122, 0,
	123, 1194, 1191, 126, 127, 278, 128, 129, 132, 130,
	580, 131, 605, 634, 133, 654, 134, 135, 0, 0,
	0, 0, 0, 136, 223, 279, 137, 280, 628, 138,
	139, 140, 0, 629, 141, 226, 142, 0, 143, 144,
	145, 655, 146, 147, 0, 149, 150, 148, 151, 0,
	152, 281, 153, 154, 594, 155, 0, 156, 157, 1195,
	0, 229, 159, 160, 622, 161, 162, 282, 163, 656,
	231, 164, 0, 170, 165, 166, 167, 169, 657, 168,
	630, 0, 171, 0, 172, 173, 0, 234, 658, 659,
	0, 0, 174, 631, 632, 603, 175, 176, 177, 178,
	0, 0, 179, 180, 181, 623, 182, 0, 183, 184,
	185, 239, 660, 0, 0, 186, 0, 0, 0, 0,
	187, 188, 1190, 190, 581, 0, 609, 598, 599, 596,
	597, 585, 0, 0, 0, 577, 578, 0, 0, 0,
	0, 579, 77, 78, 586, 79, 0, 0, 0, 0,
	625, 591, 0, 0, 0, 80, 81, 192, 640, 194,
	641, 82, 642, 643, 0, 83, 198, 199, 84, 606,
	624, 644, 645, 202, 0, 636, 0, 617, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 270,
	92, 93, 0, 618, 620, 0, 619, 621, 94, 95,
	96, 97, 646, 98, 647, 648, 0, 99, 0, 100,
	0, 0, 0, 639, 102, 0, 103, 0, 0, 0,
	590, 104, 105, 626, 627, 604, 0, 0, 106, 107,
	649, 0, 108, 0, 109, 0, 0, 271, 0, 110,
	637, 0, 212, 0, 111, 112, 113, 633, 635, 273,
	0, 116, 0, 114, 0, 272, 115, 650, 651, 652,
	653, 0, 616, 0, 274, 117, 275, 118, 119, 0,
	0, 638, 276, 120, 277, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 278, 128, 129, 132,
	130, 0, 131, 605, 634, 133, 654, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 279, 137, 280, 628,
	138, 139, 140, 0, 629, 141, 226, 142, 0, 143,
	144, 145, 655, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 281, 153, 154, 1207, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 622, 161, 162, 282, 163,
	656, 231, 164, 0, 170, 165, 166, 167, 169, 657,
	168, 630, 0, 171, 0, 172, 173, 0, 234, 658,
	659, 0, 0, 174, 631, 632, 603, 175, 176, 177,
	178, 0, 0, 179, 180, 181, 623, 182, 0, 183,
	184, 185, 239, 660, 0, 0, 186, 0, 0, 0,
	0, 187, 188, 189, 190, 0, 0, 609, 598, 599,
	596, 597, 585, 0, 0, 0, 1203, 1204, 0, 0,
	0, 0, 1205, 77, 78, 1206, 79, 0, 0, 0,
	0, 625, 591, 0, 0, 0, 80, 81, 0, 640,
	194, 641, 82, 642, 643, 0, 83, 198, 199, 84,
	606, 624, 644, 645, 202, 0, 636, 0, 617, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	270, 92, 1898, 0, 618, 620, 0, 619, 621, 94,
	95, 96, 97, 646, 98, 647, 648, 0, 99, 0,
	100, 0, 0, 0, 639, 102, 0, 103, 0, 0,
	0, 590, 104, 105, 626, 627, 604, 0, 0, 106,
	107, 649, 0, 108, 0, 109, 0, 0, 271, 0,
	110, 637, 0, 212, 0, 111, 112, 113, 633, 635,
	0, 0, 116, 0, 114, 0, 272, 115, 650, 651,
	652, 653, 0, 616, 0, 0, 117, 275, 118, 119,
	0, 0, 638, 276, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 278, 128, 129,
	132, 130, 580, 131, 605, 634, 133, 654, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 279, 137, 280,
	628, 138, 139, 140, 0, 629, 141, 226, 142, 0,
	143, 144, 145, 655, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 281, 153, 154, 594, 155, 0, 156,
	157, 158, 0, 229, 159, 160, 622, 161, 162, 0,
	163, 656, 231, 164, 0, 170, 165, 166, 167, 169,
	657, 168, 630, 0, 171, 0, 172, 173, 0, 234,
	658, 659, 0, 0, 174, 631, 632, 603, 175, 176,
	1897, 178, 0, 0, 179, 180, 181, 623, 182, 0,
	183, 184, 185, 239, 660, 0, 0, 186, 0, 0,
	0, 0, 187, 188, 189, 190, 0, 0, 609, 0,
	0, 0, 0, 0, 0, 0, 0, 577, 578, 0,
	0, 0, 0, 579, 77, 78, 586, 79, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 80, 81, 192,
	193, 194, 195, 82, 196, 197, 0, 83, 198, 199,
	84, 0, 624, 200, 201, 202, 0, 636, 0, 617,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 270, 92, 93, 0, 618, 620, 0, 619, 621,
	94, 95, 96, 97, 204, 98, 205, 206, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 207, 104, 105, 626, 627, 0, 0, 0,
	106, 107, 210, 0, 108, 0, 109, 0, 0, 271,
	0, 110, 637, 0, 212, 0, 111, 112, 113, 633,
	635, 273, 0, 116, 0, 114, 0, 272, 115, 215,
	216, 217, 218, 0, 219, 0, 274, 117, 275, 118,
	119, 0, 0, 638, 276, 120, 277, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 278, 128,
	129, 132, 130, 0, 131, 0, 634, 133, 222, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 279, 137,
	280, 628, 138, 139, 140, 0, 629, 141, 226, 142,
	0, 143, 144, 145, 227, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 281, 153, 154, 228, 155, 0,
	156, 157, 158, 0, 229, 159, 160, 622, 161, 162,
	282, 163, 230, 231, 164, 0, 170, 165, 166, 167,
	169, 232, 168, 630, 0, 171, 0, 172, 173, 0,
	234, 235, 236, 0, 0, 174, 631, 632, 0, 175,
	176, 177, 178, 490, 0, 179, 180, 181, 623, 182,
	0, 183, 184, 185, 239, 240, 0, 0, 186, 77,
	78, 0, 79, 187, 188, 189, 190, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 1665, 200, 201,
	202, 0, 203, 0, 269, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 270, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 271, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 273, 0, 116, 0,
	114, 0, 272, 115, 215, 216, 217, 218, 0, 219,
	0, 274, 117, 275, 118, 119, 0, 0, 220, 276,
	120, 277, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 278, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 279, 137, 280, 224, 138, 139, 140,
	0, 225, 141, 226, 142, 0, 143, 144, 145, 227,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 281,
	153, 154, 228, 155, 0, 156, 157, 158, 63, 229,
	159, 160, 0, 161, 162, 282, 163, 230, 231, 164,
	0, 170, 165, 166, 167, 169, 232, 168, 233, 0,
	171, 65, 172, 173, 0, 234, 235, 236, 0, 0,
	174, 237, 238, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 182, 0, 183, 184, 185, 494,
	240, 0, 0, 186, 0, 0, 0, 61, 187, 188,
	189, 190, 0, 62, 490, 800, 0, 801, 796, 791,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 60, 79, 0, 0, 0, 0, 191, 0,
	0, 0, 0, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 0, 83, 198, 199, 84, 0, 0, 200,
	201, 202, 0, 203, 0, 269, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 270, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	204, 98, 205, 206, 804, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 207, 104,
	105, 208, 209, 793, 0, 0, 106, 107, 210, 0,
	108, 0, 109, 0, 0, 271, 0, 110, 211, 0,
	212, 0, 111, 112, 113, 213, 214, 273, 0, 116,
	0, 114, 0, 272, 115, 215, 216, 217, 218, 0,
	219, 0, 274, 117, 275, 118, 119, 0, 0, 220,
	276, 120, 277, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 278, 128, 129, 132, 130, 0,
	131, 0, 221, 133, 222, 134, 135, 0, 794, 0,
	0, 0, 136, 223, 279, 137, 280, 224, 138, 139,
	140, 0, 225, 141, 226, 142, 0, 143, 144, 145,
	227, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	281, 153, 154, 228, 155, 0, 156, 157, 158, 0,
	229, 159, 160, 0, 161, 162, 282, 163, 230, 231,
	164, 0, 170, 165, 166, 167, 169, 232, 168, 233,
	0, 171, 0, 172, 173, 0, 234, 235, 236, 0,
	0, 174, 237, 238, 792, 175, 176, 177, 178, 0,
	0, 179, 180, 181, 0, 182, 0, 183, 184, 185,
	239, 240, 490, 800, 186, 801, 796, 791, 0, 187,
	188, 189, 190, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 802, 797, 191, 0, 0, 0,
	0, 80, 81, 192, 193, 194, 195, 82, 196, 197,
	0, 83, 198, 199, 84, 0, 0, 200, 201, 202,
	0, 203, 0, 269, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 270, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 204, 98,
	205, 206, 787, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 207, 104, 105, 208,
	209, 793, 0, 0, 106, 107, 210, 0, 108, 0,
	109, 0, 0, 271, 0, 110, 211, 0, 212, 0,
	111, 112, 113, 213, 214, 273, 0, 116, 0, 114,
	0, 272, 115, 215, 216, 217, 218, 0, 219, 0,
	274, 117, 275, 118, 119, 0, 0, 220, 276, 120,
	277, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 278, 128, 129, 132, 130, 0, 131, 0,
	221, 133, 222, 134, 135, 0, 794, 0, 0, 0,
	136, 223, 279, 137, 280, 224, 138, 139, 140, 0,
	225, 141, 226, 142, 0, 143, 144, 145, 227, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 281, 153,
	154, 228, 155, 0, 156, 157, 158, 0, 229, 159,
	160, 0, 161, 162, 282, 163, 230, 231, 164, 0,
	170, 165, 166, 167, 169, 232, 168, 233, 0, 171,
	0, 172, 173, 0, 234, 235, 236, 0, 0, 174,
	237, 238, 792, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 182, 0, 183, 184, 185, 239, 240,
	490, 800, 186, 801, 796, 791, 0, 187, 188, 189,
	190, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 802, 797, 191, 0, 0, 0, 0, 80,
	81, 192, 193, 194, 195, 82, 196, 197, 0, 83,
	198, 199, 84, 0, 0, 200, 201, 202, 0, 203,
	0, 269, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 270, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 204, 98, 205, 206,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 207, 104, 105, 208, 209, 793,
	0, 0, 106, 107, 210, 0, 108, 0, 109, 0,
	0, 271, 0, 110, 211, 0, 212, 0, 111, 112,
	113, 213, 214, 273, 0, 116, 0, 114, 0, 272,
	115, 215, 216, 217, 218, 0, 219, 0, 274, 117,
	275, 118, 119, 0, 0, 220, 276, 120, 277, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	278, 128, 129, 132, 130, 0, 131, 0, 221, 133,
	222, 134, 135, 0, 794, 0, 0, 0, 136, 223,
	279, 137, 280, 224, 138, 139, 140, 0, 225, 141,
	226, 142, 0, 143, 144, 145, 227, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 281, 153, 154, 228,
	155, 0, 156, 157, 158, 0, 229, 159, 160, 0,
	161, 162, 282, 163, 230, 231, 164, 0, 170, 165,
	166, 167, 169, 232, 168, 233, 0, 171, 0, 172,
	173, 0, 234, 235, 236, 0, 0, 174, 237, 238,
	792, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 182, 0, 183, 184, 185, 239, 240, 74, 0,
	186, 0, 0, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 0, 0,
	802, 797, 191, 0, 0, 0, 0, 80, 81, 192,
	193, 194, 195, 82, 196, 197, 0, 83, 198, 199,
	84, 0, 0, 200, 201, 202, 0, 203, 0, 0,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 204, 98, 205, 206, 0, 99,
	0, 100, 0, 0, 0, 101, 102, 0, 103, 0,
	0, 0, 207, 104, 105, 208, 209, 0, 0, 0,
	106, 107, 210, 0, 108, 0, 109, 0, 0, 0,
	0, 110, 211, 0, 212, 0, 111, 112, 113, 213,
	214, 0, 0, 116, 0, 114, 0, 0, 115, 215,
	216, 217, 218, 0, 219, 0, 0, 117, 0, 118,
	119, 0, 0, 220, 0, 120, 0, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 132, 130, 0, 131, 0, 221, 133, 222, 134,
	135, 0, 0, 451, 0, 0, 136, 223, 0, 137,
	0, 224, 138, 139, 140, 0, 225, 141, 226, 142,
	0, 143, 144, 145, 227, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 0, 153, 154, 228, 155, 0,
	156, 157, 158, 63, 229, 159, 160, 0, 161, 162,
	0, 163, 230, 231, 164, 0, 170, 165, 166, 167,
	169, 232, 168, 233, 0, 171, 65, 172, 173, 0,
	234, 235, 236, 0, 0, 174, 237, 238, 0, 175,
	176, 177, 178, 0, 0, 179, 180, 181, 0, 182,
	0, 183, 184, 185, 494, 240, 0, 0, 186, 74,
	0, 0, 61, 187, 188, 189, 190, 0, 62, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 1104, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 0, 225, 141, 226,
	142, 0, 143, 144, 145, 227, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 228, 155,
	0, 156, 157, 158, 63, 229, 159, 160, 0, 161,
	162, 0, 163, 230, 231, 164, 0, 170, 165, 166,
	167, 169, 232, 168, 233, 0, 171, 65, 172, 173,
	0, 234, 235, 236, 0, 0, 174, 237, 238, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	182, 0, 183, 184, 185, 494, 240, 0, 0, 186,
	74, 0, 0, 61, 187, 188, 189, 190, 0, 62,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	0, 0, 0, 0, 191, 0, 1341, 0, 60, 80,
	81, 192, 193, 194, 195, 82, 196, 197, 0, 83,
	198, 199, 84, 0, 0, 200, 201, 202, 0, 203,
	0, 0, 0, 85, 86, 87, 0, 88, 0, 89,
	90, 91, 0, 0, 92, 93, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 97, 204, 98, 205, 206,
	0, 99, 0, 100, 0, 0, 0, 101, 102, 0,
	103, 0, 0, 0, 207, 104, 105, 208, 209, 0,
	0, 0, 106, 107, 210, 0, 108, 0, 109, 0,
	0, 0, 0, 110, 211, 0, 212, 0, 111, 112,
	113, 213, 214, 0, 0, 116, 0, 114, 0, 0,
	115, 215, 216, 217, 218, 0, 219, 0, 0, 117,
	0, 118, 119, 0, 0, 220, 0, 120, 0, 0,
	121, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	0, 128, 129, 132, 130, 0, 131, 0, 221, 133,
	222, 134, 135, 0, 0, 0, 0, 0, 136, 223,
	0, 137, 0, 224, 138, 139, 140, 0, 225, 141,
	226, 142, 0, 143, 144, 145, 227, 146, 147, 0,
	149, 150, 148, 151, 0, 152, 0, 153, 154, 228,
	155, 0, 156, 157, 158, 0, 229, 159, 160, 0,
	161, 162, 0, 163, 230, 231, 164, 0, 170, 165,
	166, 167, 169, 232, 168, 233, 0, 171, 0, 172,
	173, 0, 234, 235, 236, 0, 0, 174, 237, 238,
	0, 175, 176, 177, 178, 0, 0, 179, 180, 181,
	0, 182, 0, 183, 184, 185, 239, 240, 0, 0,
	186, 0, 74, 0, 0, 187, 188, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 0, 191, 0, 0, 0,
	567, 80, 81, 192, 193, 194, 195, 82, 196, 197,
	0, 83, 198, 199, 84, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 204, 98,
	205, 206, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 207, 104, 105, 208,
	209, 0, 0, 0, 106, 107, 210, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 211, 0, 212, 0,
	111, 112, 113, 213, 214, 0, 0, 116, 0, 114,
	0, 0, 115, 215, 216, 217, 218, 0, 219, 0,
	0, 117, 0, 118, 119, 0, 0, 220, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	221, 133, 222, 134, 135, 0, 0, 451, 0, 0,
	136, 223, 0, 137, 0, 224, 138, 139, 140, 0,
	225, 141, 226, 142, 0, 143, 144, 145, 227, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 228, 155, 0, 156, 157, 158, 0, 229, 159,
	160, 0, 161, 162, 0, 163, 230, 231, 164, 0,
	170, 165, 166, 167, 169, 232, 168, 233, 0, 171,
	0, 172, 173, 0, 234, 235, 236, 0, 0, 174,
	237, 238, 0, 175, 176, 177, 178, 74, 0, 179,
	180, 181, 0, 182, 0, 183, 184, 185, 239, 240,
	0, 0, 186, 77, 78, 0, 79, 187, 188, 189,
	190, 191, 0, 0, 0, 0, 80, 81, 192, 193,
	194, 195, 82, 196, 197, 0, 83, 198, 199, 84,
	0, 1104, 200, 201, 202, 0, 203, 0, 0, 0,
	85, 86, 87, 0, 88, 0, 89, 90, 91, 0,
	0, 92, 93, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 97, 204, 98, 205, 206, 0, 99, 0,
	100, 0, 0, 0, 101, 102, 0, 103, 0, 0,
	0, 207, 104, 105, 208, 209, 0, 0, 0, 106,
	107, 210, 0, 108, 0, 109, 0, 0, 0, 0,
	110, 211, 0, 212, 0, 111, 112, 113, 213, 214,
	0, 0, 116, 0, 114, 0, 0, 115, 215, 216,
	217, 218, 0, 219, 0, 0, 117, 0, 118, 119,
	0, 0, 220, 0, 120, 0, 0, 121, 0, 0,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	132, 130, 0, 131, 0, 221, 133, 222, 134, 135,
	0, 0, 0, 0, 0, 136, 223, 0, 137, 0,
	224, 138, 139, 140, 0, 225, 141, 226, 142, 0,
	143, 144, 145, 227, 146, 147, 0, 149, 150, 148,
	151, 0, 152, 0, 153, 154, 228, 155, 0, 156,
	157, 158, 0, 229, 159, 160, 0, 161, 162, 0,
	163, 230, 231, 164, 0, 170, 165, 166, 167, 169,
	232, 168, 233, 0, 171, 0, 172, 173, 0, 234,
	235, 236, 0, 0, 174, 237, 238, 0, 175, 176,
	177, 178, 0, 0, 179, 180, 181, 0, 182, 0,
	183, 184, 185, 239, 240, 0, 0, 186, 0, 74,
	0, 0, 187, 188, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 78, 0, 79, 0,
	0, 0, 0, 191, 0, 0, 0, 693, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 0, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 0, 225, 141, 226,
	142, 0, 143, 144, 145, 227, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 228, 155,
	0, 156, 157, 158, 0, 229, 159, 160, 0, 161,
	162, 0, 163, 230, 231, 164, 0, 170, 165, 166,
	167, 169, 232, 168, 233, 0, 171, 0, 172, 173,
	0, 234, 235, 236, 0, 0, 174, 237, 238, 0,
	175, 176, 177, 178, 74, 0, 179, 180, 181, 0,
	182, 0, 183, 184, 185, 239, 240, 0, 0, 186,
	77, 78, 0, 79, 187, 188, 189, 190, 191, 0,
	0, 0, 0, 80, 81, 192, 193, 194, 195, 82,
	196, 197, 0, 83, 198, 199, 84, 0, 1010, 200,
	201, 202, 0, 203, 0, 0, 0, 85, 86, 87,
	0, 88, 0, 89, 90, 91, 0, 0, 92, 93,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 97,
	204, 98, 205, 206, 0, 99, 0, 100, 0, 0,
	0, 101, 102, 0, 103, 0, 0, 0, 207, 104,
	105, 208, 209, 0, 0, 0, 106, 107, 210, 0,
	108, 0, 109, 0, 0, 0, 0, 110, 211, 0,
	212, 0, 111, 112, 113, 213, 214, 0, 0, 116,
	0, 114, 0, 0, 115, 215, 216, 217, 218, 0,
	219, 0, 0, 117, 0, 118, 119, 0, 0, 220,
	0, 120, 0, 0, 121, 0, 0, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 132, 130, 0,
	131, 0, 221, 133, 222, 134, 135, 0, 0, 0,
	0, 0, 136, 223, 0, 137, 0, 224, 138, 139,
	140, 0, 225, 141, 226, 142, 0, 143, 144, 145,
	227, 146, 147, 0, 149, 150, 148, 151, 0, 152,
	0, 153, 154, 228, 155, 0, 156, 157, 158, 0,
	229, 159, 160, 0, 161, 162, 0, 163, 230, 231,
	164, 0, 170, 165, 166, 167, 169, 232, 168, 233,
	0, 171, 0, 172, 173, 0, 234, 235, 236, 0,
	0, 174, 237, 238, 0, 175, 176, 177, 178, 74,
	0, 179, 180, 181, 0, 182, 0, 183, 184, 185,
	239, 240, 0, 0, 186, 77, 78, 0, 79, 187,
	188, 189, 190, 191, 0, 0, 0, 0, 80, 81,
	192, 193, 194, 195, 82, 196, 197, 0, 83, 198,
	199, 84, 0, 1562, 200, 201, 202, 0, 203, 0,
	0, 0, 85, 86, 87, 0, 88, 0, 89, 90,
	91, 0, 0, 92, 93, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 97, 204, 98, 205, 206, 0,
	99, 0, 100, 0, 0, 0, 101, 102, 0, 103,
	0, 0, 0, 207, 104, 105, 208, 209, 0, 0,
	0, 106, 107, 210, 0, 108, 0, 109, 0, 0,
	0, 0, 110, 211, 0, 212, 0, 111, 112, 113,
	213, 214, 0, 0, 116, 0, 114, 0, 0, 115,
	215, 216, 217, 218, 0, 219, 0, 0, 117, 0,
	118, 119, 0, 0, 220, 0, 120, 0, 0, 121,
	0, 0, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 132, 130, 0, 131, 0, 221, 133, 222,
	134, 135, 0, 0, 0, 0, 0, 136, 223, 0,
	137, 0, 224, 138, 139, 140, 0, 225, 141, 226,
	142, 0, 143, 144, 145, 227, 146, 147, 0, 149,
	150, 148, 151, 0, 152, 0, 153, 154, 228, 155,
	0, 156, 157, 158, 0, 229, 159, 160, 0, 161,
	162, 0, 163, 230, 231, 164, 0, 170, 165, 166,
	167, 169, 232, 168, 233, 0, 171, 0, 172, 173,
	0, 234, 235, 236, 0, 0, 174, 237, 238, 0,
	175, 176, 177, 178, 0, 0, 179, 180, 181, 0,
	182, 0, 183, 184, 185, 239, 240, 0, 0, 186,
	0, 0, 0, 0, 187, 188, 189, 190, 609, 598,
	599, 596, 597, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 671, 0,
	0, 0, 191, 0, 0, 0, 0, 80, 81, 192,
	640, 194, 641, 82, 642, 643, 0, 83, 198, 199,
	84, 0, 0, 644, 645, 202, 0, 203, 0, 269,
	0, 85, 86, 87, 0, 88, 0, 89, 90, 91,
	0, 270, 92, 93, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 97, 646, 98, 647, 648, 0, 99,
	0, 100, 0, 0, 0, 639, 102, 0, 103, 0,
	0, 0, 207, 104, 105, 208, 209, 604, 0, 0,
	106, 107, 649, 0, 108, 0, 109, 0, 0, 271,
	0, 110, 211, 0, 212, 0, 111, 112, 113, 213,
	214, 273, 0, 116, 0, 114, 0, 272, 115, 650,
	651, 652, 653, 0, 616, 0, 274, 117, 275, 118,
	119, 0, 0, 220, 276, 120, 277, 0, 121, 0,
	0, 122, 0, 123, 124, 125, 126, 127, 278, 128,
	129, 132, 130, 0, 131, 605, 221, 133, 654, 134,
	135, 0, 0, 0, 0, 0, 136, 223, 279, 137,
	280, 224, 138, 139, 140, 0, 225, 141, 226, 142,
	0, 143, 144, 145, 655, 146, 147, 0, 149, 150,
	148, 151, 0, 152, 281, 153, 154, 228, 155, 0,
	156, 157, 158, 0, 229, 159, 160, 0, 161, 162,
	282, 163, 656, 231, 164, 0, 170, 165, 166, 167,
	169, 657, 168, 233, 0, 171, 0, 172, 173, 0,
	234, 658, 659, 0, 0, 174, 237, 238, 603, 175,
	176, 177, 178, 74, 0, 179, 180, 181, 0, 182,
	0, 183, 184, 185, 239, 660, 0, 0, 186, 77,
	78, 0, 79, 187, 188, 189, 190, 191, 0, 0,
	0, 0, 80, 81, 192, 193, 194, 195, 82, 196,
	197, 0, 83, 198, 199, 84, 0, 0, 200, 201,
	202, 0, 203, 0, 0, 0, 85, 86, 87, 0,
	88, 0, 89, 90, 91, 0, 0, 92, 93, 0,
	0, 0, 0, 0, 0, 94, 95, 771, 97, 204,
	98, 205, 206, 0, 99, 0, 100, 0, 0, 0,
	101, 102, 0, 103, 0, 0, 0, 207, 104, 105,
	208, 209, 0, 0, 0, 106, 107, 210, 0, 108,
	0, 109, 0, 0, 0, 0, 110, 211, 0, 212,
	0, 111, 112, 113, 213, 214, 0, 0, 116, 0,
	114, 0, 0, 115, 215, 216, 217, 218, 0, 219,
	0, 0, 117, 0, 118, 119, 0, 0, 220, 0,
	120, 0, 0, 121, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 0, 128, 129, 132, 130, 0, 131,
	0, 221, 133, 222, 134, 135, 0, 0, 0, 0,
	0, 136, 223, 0, 137, 0, 224, 138, 139, 140,
	0, 225, 141, 226, 142, 0, 143, 144, 145, 227,
	146, 147, 0, 149, 150, 148, 151, 0, 152, 0,
	153, 154, 228, 155, 0, 156, 157, 158, 0, 229,
	159, 160, 0, 161, 162, 0, 163, 230, 231, 164,
	0, 170, 165, 166, 167, 169, 232, 168, 233, 0,
	171, 770, 172, 173, 0, 234, 235, 236, 0, 0,
	174, 237, 238, 0, 175, 176, 177, 178, 0, 0,
	179, 180, 181, 0, 182, 0, 183, 184, 185, 239,
	240, 0, 74, 186, 0, 0, 0, 0, 187, 188,
	189, 190, 0, 0, 0, 0, 0, 0, 77, 78,
	0, 79, 0, 0, 0, 774, 191, 0, 0, 0,
	0, 80, 81, 192, 193, 194, 195, 82, 196, 197,
	0, 83, 198, 199, 84, 0, 0, 200, 201, 202,
	0, 203, 0, 0, 0, 85, 86, 87, 0, 88,
	0, 89, 90, 91, 0, 0, 92, 93, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 97, 204, 98,
	205, 206, 0, 99, 0, 100, 0, 0, 0, 101,
	102, 0, 103, 0, 0, 0, 207, 104, 105, 208,
	209, 0, 0, 0, 106, 107, 210, 0, 108, 0,
	109, 0, 0, 0, 0, 110, 211, 0, 212, 0,
	111, 112, 113, 213, 214, 0, 0, 116, 0, 114,
	0, 0, 115, 215, 216, 217, 218, 0, 219, 0,
	0, 117, 0, 118, 119, 0, 0, 220, 0, 120,
	0, 0, 121, 0, 0, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 132, 130, 0, 131, 0,
	221, 133, 222, 134, 135, 0, 0, 0, 0, 0,
	136, 223, 0, 137, 0, 224, 138, 139, 140, 0,
	225, 141, 226, 142, 0, 143, 144, 145, 227, 146,
	147, 0, 149, 150, 148, 151, 0, 152, 0, 153,
	154, 228, 155, 0, 156, 157, 158, 0, 229, 159,
	160, 0, 161, 162, 0, 163, 230, 231, 164, 0,
	170, 165, 166, 167, 169, 232, 168, 233, 0, 171,
	0, 172, 173, 0, 234, 235, 236, 0, 0, 174,
	237, 238, 0, 175, 176, 177, 178, 0, 0, 179,
	180, 181, 0, 182, 0, 183, 184, 185, 239, 240,
	0, 490, 186, 0, 0, 0, 0, 187, 188, 189,
	190, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 0, 0, 0, 774, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 269, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 270, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 271, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 273, 0, 116, 0, 114, 0,
	272, 115, 215, 216, 217, 218, 0, 219, 0, 274,
	117, 275, 118, 119, 0, 0, 220, 276, 120, 277,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 278, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 279, 137, 280, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 281, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 282, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 974, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 972, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 1079, 0, 106, 107,
	210, 0, 108, 0, 109, 977, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 213, 214, 0,
	0, 116, 1077, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 976, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 1078, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 974,
	203, 0, 0, 969, 85, 86, 87, 0, 88, 972,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	977, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 968, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 976, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 975, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 1341, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 213, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 451, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 721, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 451, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 502,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 463, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 451, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 456, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 451, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 367, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 213, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 366, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 1253, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 1251, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 1240, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 839, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 213, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 381, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 706, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 0, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 552, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 548, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 508, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 213, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 392, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 391, 235,
	236, 0, 0, 387, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	392, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 391, 235, 236, 0, 0, 387, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 486, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 483, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 480, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 478, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 459, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 121, 0, 0, 122,
	0, 123, 124, 125, 126, 127, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 228, 155, 0, 156, 157,
	158, 0, 229, 159, 160, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 234, 235,
	236, 0, 0, 174, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 140, 0, 225,
	141, 226, 142, 0, 143, 144, 145, 227, 440, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 155, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 74, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 77, 78, 0, 79, 187, 188, 189, 190,
	191, 0, 0, 0, 0, 80, 81, 192, 193, 194,
	195, 82, 196, 197, 0, 83, 198, 199, 84, 0,
	0, 200, 201, 202, 0, 203, 0, 0, 0, 85,
	86, 87, 0, 88, 0, 89, 90, 91, 0, 0,
	92, 93, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 97, 204, 98, 205, 206, 0, 99, 0, 100,
	0, 0, 0, 101, 102, 0, 103, 0, 0, 0,
	207, 104, 105, 208, 209, 0, 0, 0, 106, 107,
	210, 0, 108, 0, 109, 0, 0, 0, 0, 110,
	211, 0, 212, 0, 111, 112, 113, 213, 214, 0,
	0, 116, 0, 114, 0, 0, 115, 215, 216, 217,
	218, 0, 219, 0, 0, 117, 0, 118, 119, 0,
	0, 220, 0, 120, 0, 0, 384, 0, 0, 122,
	0, 123, 124, 125, 126, 392, 0, 128, 129, 132,
	130, 0, 131, 0, 221, 133, 222, 134, 135, 0,
	0, 0, 0, 0, 136, 223, 0, 137, 0, 224,
	138, 139, 140, 0, 225, 141, 226, 142, 0, 143,
	144, 145, 227, 146, 147, 0, 149, 150, 148, 151,
	0, 152, 0, 153, 154, 386, 155, 0, 156, 157,
	158, 0, 229, 159, 385, 0, 161, 162, 0, 163,
	230, 231, 164, 0, 170, 165, 166, 167, 169, 232,
	168, 233, 0, 171, 0, 172, 173, 0, 391, 235,
	236, 0, 0, 387, 237, 238, 0, 175, 176, 177,
	178, 74, 0, 179, 180, 181, 0, 182, 0, 183,
	184, 185, 239, 240, 0, 0, 186, 77, 78, 0,
	79, 187, 188, 189, 190, 191, 0, 0, 0, 0,
	80, 81, 192, 193, 194, 195, 82, 196, 197, 0,
	83, 198, 199, 84, 0, 0, 200, 201, 202, 0,
	203, 0, 0, 0, 85, 86, 87, 0, 88, 0,
	89, 90, 91, 0, 0, 92, 93, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 97, 204, 98, 205,
	206, 0, 99, 0, 100, 0, 0, 0, 101, 102,
	0, 103, 0, 0, 0, 207, 104, 105, 208, 209,
	0, 0, 0, 106, 107, 210, 0, 108, 0, 109,
	0, 0, 0, 0, 110, 211, 0, 212, 0, 111,
	112, 113, 213, 214, 0, 0, 116, 0, 114, 0,
	0, 115, 215, 216, 217, 218, 0, 219, 0, 0,
	117, 0, 118, 119, 0, 0, 220, 0, 120, 0,
	0, 121, 0, 0, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 132, 130, 0, 131, 0, 221,
	133, 222, 134, 135, 0, 0, 0, 0, 0, 136,
	223, 0, 137, 0, 224, 138, 139, 0, 0, 225,
	141, 226, 142, 0, 143, 0, 145, 227, 146, 147,
	0, 149, 150, 148, 151, 0, 152, 0, 153, 154,
	228, 0, 0, 156, 157, 158, 0, 229, 159, 160,
	0, 161, 162, 0, 163, 230, 231, 164, 0, 170,
	165, 166, 167, 169, 232, 168, 233, 0, 171, 0,
	172, 173, 0, 234, 235, 236, 0, 0, 174, 237,
	238, 0, 175, 176, 177, 178, 0, 0, 179, 180,
	181, 0, 182, 0, 183, 184, 185, 239, 240, 0,
	0, 186, 0, 0, 0, 0, 187, 188, 189, 190,
	865, 866, 0, 885, 886, 887, 895, 896, 897, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 868, 0, 899, 865, 866, 0, 885,
	886, 887, 895, 896, 897, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 867, 0, 0, 0, 0, 868,
	882, 899, 0, 0, 0, 0, 0, 0, 865, 866,
	0, 885, 886, 887, 895, 896, 897, 0, 0, 0,
	867, 0, 0, 0, 888, 0, 882, 0, 0, 0,
	0, 868, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 867, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 900, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 892, 900, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	889, 0, 0, 0, 883, 892, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	890, 0, 0, 0, 0, 884, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 893, 0, 879, 880, 881, 0,
	878, 875, 876, 877, 869, 870, 871, 872, 874, 0,
	894, 0, 0, 0, 0, 0, 0, 1390, 0, 891,
	0, 0, 879, 880, 881, 0, 878, 875, 876, 877,
	869, 870, 871, 872, 874, 0, 894, 0, 0, 0,
	1847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 879, 880, 881, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 0,
	865, 866, 1845, 885, 886, 887, 895, 896, 897, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 868, 0, 899, 865, 866, 0, 885,
	886, 887, 895, 896, 897, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 867, 0, 0, 0, 0, 868,
	882, 899, 0, 0, 0, 0, 0, 0, 865, 866,
	0, 885, 886, 887, 895, 896, 897, 0, 0, 0,
	867, 0, 0, 0, 888, 0, 882, 0, 0, 0,
	0, 868, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 867, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 900, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 892, 900, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	889, 0, 0, 0, 883, 892, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	890, 0, 0, 0, 0, 884, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 893, 0, 879, 880, 881, 0,
	878, 875, 876, 877, 869, 870, 871, 872, 874, 0,
	894, 0, 0, 0, 1824, 0, 0, 0, 0, 891,
	0, 0, 879, 880, 881, 0, 878, 875, 876, 877,
	869, 870, 871, 872, 874, 0, 894, 0, 0, 0,
	1799, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 879, 880, 881, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 0,
	865, 866, 1794, 885, 886, 887, 895, 896, 897, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 868, 0, 899, 865, 866, 0, 885,
	886, 887, 895, 896, 897, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 867, 0, 0, 0, 0, 868,
	882, 899, 0, 0, 0, 0, 0, 0, 865, 866,
	0, 885, 886, 887, 895, 896, 897, 0, 0, 0,
	867, 0, 0, 0, 888, 0, 882, 0, 0, 0,
	0, 868, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 867, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 900, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 892, 900, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	889, 0, 0, 0, 883, 892, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	890, 0, 0, 0, 0, 884, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 893, 0, 879, 880, 881, 0,
	878, 875, 876, 877, 869, 870, 871, 872, 874, 0,
	894, 0, 0, 0, 1790, 0, 0, 0, 0, 891,
	0, 0, 879, 880, 881, 0, 878, 875, 876, 877,
	869, 870, 871, 872, 874, 0, 894, 0, 0, 0,
	1725, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 879, 880, 881, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 0,
	865, 866, 1724, 885, 886, 887, 895, 896, 897, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 868, 0, 899, 865, 866, 0, 885,
	886, 887, 895, 896, 897, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 867, 0, 0, 0, 0, 868,
	882, 899, 0, 0, 0, 0, 0, 0, 865, 866,
	0, 885, 886, 887, 895, 896, 897, 0, 0, 0,
	867, 0, 0, 0, 888, 0, 882, 0, 0, 0,
	0, 868, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 867, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 900, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 892, 900, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	889, 0, 0, 0, 883, 892, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	890, 0, 0, 0, 0, 884, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 893, 0, 879, 880, 881, 0,
	878, 875, 876, 877, 869, 870, 871, 872, 874, 0,
	894, 0, 0, 0, 1631, 0, 0, 0, 0, 891,
	0, 0, 879, 880, 881, 0, 878, 875, 876, 877,
	869, 870, 871, 872, 874, 0, 894, 0, 0, 0,
	1565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 891, 0, 0, 879, 880, 881, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 0,
	865, 866, 1549, 885, 886, 887, 895, 896, 897, 0,
	0, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 0, 868, 0, 899, 865, 866, 0, 885,
	886, 887, 895, 896, 897, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 867, 0, 0, 0, 0, 868,
	882, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 892, 900, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 892, 900, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	889, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	865, 866, 0, 885, 886, 887, 895, 896, 897, 0,
	0, 884, 0, 0, 0, 0, 888, 0, 0, 0,
	0, 0, 893, 868, 0, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	882, 0, 0, 891, 0, 0, 879, 880, 881, 0,
	878, 875, 876, 877, 869, 870, 871, 872, 874, 0,
	894, 0, 0, 0, 1159, 0, 0, 0, 0, 891,
	0, 0, 879, 880, 881, 0, 878, 875, 876, 877,
	869, 870, 871, 872, 874, 0, 894, 0, 1479, 873,
	1918, 0, 0, 0, 0, 865, 866, 0, 885, 886,
	887, 895, 896, 897, 0, 0, 0, 892, 900, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 868, 0,
	899, 0, 898, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 883, 867,
	0, 0, 0, 0, 0, 882, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1917, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 866, 0, 885, 886, 887,
	895, 896, 897, 0, 873, 884, 1430, 0, 0, 1429,
	888, 0, 0, 0, 0, 1092, 893, 868, 0, 899,
	0, 0, 892, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 867, 0,
	0, 0, 0, 0, 882, 0, 0, 890, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 891, 0, 889, 879, 880, 881, 0,
	878, 875, 876, 877, 869, 870, 871, 872, 874, 0,
	894, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	884, 892, 900, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 0, 0, 0, 0, 898, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 879, 880, 881, 0, 878, 875, 876, 877, 869,
	870, 871, 872, 874, 902, 894, 0, 0, 0, 884,
	865, 866, 0, 885, 886, 887, 895, 896, 897, 0,
	893, 0, 0, 0, 0, 0, 888, 0, 0, 0,
	901, 0, 0, 868, 0, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 0, 0, 0, 0, 0,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 891, 0, 0,
	879, 880, 881, 0, 878, 875, 876, 877, 869, 870,
	871, 872, 874, 0, 894, 0, 865, 866, 0, 885,
	886, 887, 895, 896, 897, 0, 0, 0, 0, 873,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 868,
	0, 899, 0, 0, 0, 0, 0, 892, 900, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 898, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 883, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	889, 0, 0, 0, 0, 865, 866, 0, 885, 886,
	887, 895, 896, 897, 0, 873, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 868, 0,
	899, 0, 0, 892, 900, 884, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 893, 0, 898, 867,
	0, 0, 0, 0, 0, 882, 0, 0, 890, 0,
	0, 0, 0, 0, 883, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 889, 435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 891, 873, 0, 879, 880, 881, 0,
	878, 875, 876, 877, 869, 870, 871, 872, 874, 0,
	894, 884, 892, 900, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 0, 898, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 883, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 891,
	0, 0, 879, 880, 881, 0, 878, 875, 876, 877,
	869, 870, 871, 872, 874, 0, 894, 0, 865, 866,
	884, 885, 886, 887, 895, 896, 897, 0, 0, 0,
	0, 893, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 868, 0, 899, 0, 0, 0, 0, 0, 0,
	1559, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 891, 0,
	0, 879, 880, 881, 0, 878, 875, 876, 877, 869,
	870, 871, 872, 874, 0, 894, 0, 865, 866, 0,
	885, 886, 887, 895, 896, 897, 0, 873, 0, 0,
	0, 0, 1436, 888, 0, 0, 0, 1431, 0, 0,
	868, 0, 899, 0, 0, 892, 900, 0, 0, 865,
	866, 0, 885, 886, 887, 895, 896, 897, 0, 0,
	898, 867, 0, 0, 0, 888, 0, 882, 0, 0,
	890, 0, 868, 0, 899, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 0, 0, 0, 0, 889, 882,
	0, 0, 0, 865, 866, 0, 885, 886, 887, 895,
	896, 897, 0, 0, 0, 0, 873, 0, 0, 888,
	0, 0, 0, 1389, 0, 0, 868, 0, 899, 0,
	0, 0, 0, 884, 892, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 0, 0, 867, 873, 898,
	0, 0, 0, 882, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 883, 892, 900, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 0, 0, 0, 0, 0, 889, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 883, 0, 0,
	0, 891, 873, 0, 879, 880, 881, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 889,
	892, 900, 884, 0, 0, 0, 0, 0, 0, 0,
	1396, 0, 0, 893, 0, 898, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 883, 0, 0, 884, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 0, 0, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	891, 0, 0, 879, 880, 881, 0, 878, 875, 876,
	877, 869, 870, 871, 872, 874, 0, 894, 884, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 893,
	0, 0, 891, 0, 0, 879, 880, 881, 0, 878,
	875, 876, 877, 869, 870, 871, 872, 874, 0, 894,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 866,
	0, 885, 886, 887, 895, 896, 897, 0, 0, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 868, 0, 899, 0, 0, 891, 0, 0, 879,
	880, 881, 0, 878, 875, 876, 877, 869, 870, 871,
	872, 874, 867, 894, 0, 0, 865, 866, 882, 885,
	886, 887, 895, 896, 897, 0, 0, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 868,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 882, 873, 865, 866,
	0, 885, 886, 887, 895, 896, 897, 0, 0, 0,
	0, 0, 0, 0, 0, 892, 900, 0, 0, 0,
	0, 868, 0, 899, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 867, 0, 0, 873, 883, 0, 882, 865,
	866, 0, 885, 886, 887, 895, 896, 897, 0, 0,
	0, 0, 0, 892, 900, 0, 0, 0, 889, 0,
	0, 0, 868, 0, 899, 0, 0, 0, 898, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 867, 883, 0, 0, 873, 0, 882,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 892, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 883, 0, 873, 0,
	0, 884, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 893, 0, 0, 0, 892, 900, 0, 0,
	0, 891, 0, 0, 879, 880, 881, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 0, 894, 0,
	0, 890, 0, 0, 0, 0, 0, 883, 0, 0,
	0, 0, 0, 884, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 893, 0, 0, 0, 0, 891,
	0, 0, 879, 880, 881, 0, 878, 875, 876, 877,
	869, 870, 871, 872, 874, 0, 894, 0, 0, 0,
	0, 0, 0, 744, 738, 761, 732, 752, 751, 0,
	0, 734, 733, 0, 884, 0, 763, 762, 0, 0,
	0, 0, 0, 0, 0, 893, 0, 0, 0, 0,
	0, 891, 0, 0, 879, 880, 881, 0, 878, 875,
	876, 877, 869, 870, 871, 872, 874, 757, 894, 749,
	748, 0, 0, 0, 0, 0, 0, 0, 747, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 746, 0, 0, 0, 0,
	0, 0, 891, 0, 0, 879, 880, 881, 0, 878,
	875, 876, 877, 869, 870, 871, 872, 874, 0, 894,
	0, 0, 739, 740, 741, 742, 0, 760, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 750, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 745, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 0, 0, 743, 737, 0, 0, 0,
	0, 0, 0, 0, 765, 0, 0, 0, 0, 0,
	0, 735, 0, 0, 758, 759, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 764,
}
var sqlPact = [...]int{

	221, -1000, 48, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 683, 17207, -1000,
	-1000, -1000, -1000, -1000, 658, 653, 918, 4690, 17207, 17207,
	16952, 1847, 1847, 18482, -1000, -1000, 21542, -1000, 2408, 515,
	523, 515, 515, 503, 18482, 615, 645, 246, -1000, 764,
	41, 21287, 17207, 1311, 46, 15677, 330, 221, 16697, 21032,
	17207, 16442, 260, 63, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1151, 1025, 1022, 15677, 20777, 20522, 20267, 20012, -1000,
	10649, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 726, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 341, 334, -1000, 16187, -1000, 878, -1000,
	45, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 871,
	-1000, 17207, -1000, -1000, 19757, 19502, 333, 835, -1000, -1000,
	542, 403, 1324, -1000, 66, -1000, -1000, 1149, -1000, 863,
	1142, 1137, 1135, 1134, 1132, 1125, 400, 855, 497, -1000,
	-1000, 835, -1000, 835, -1000, -1000, -1000, 577, 18482, -1000,
	15677, -1000, 19247, 17207, 1031, 18992, -1000, 764, -1000, -1000,
	-1000, 904, 1302, 1302, 1302, 1321, 166, 165, 246, 10,
	17207, -1000, 331, 10, 7300, 7300, -1000, -1000, 330, -1000,
	358, 13585, -1000, 7862, -1000, 846, 1208, 425, 668, 1206,
	-65, 753, 749, 1205, 635, 12803, 63, -1000, -1000, -1000,
	9270, 4411, 15677, 17207, 17207, 660, 18737, -1000, 1204, 111,
	1203, -1000, 107, 1199, -1000, 107, 1198, 44, -1000, -1000,
	-1000, -1000, -1000, -1000, 330, 15932, 17207, 1379, 25207, -1000,
	9270, -1000, -1000, 14119, 1184, 14119, -1000, -1000, 1376, -1000,
	9270, -1000, 34, 33, 979, 1035, 11198, 10930, 1251, 1568,
	-1000, -1000, -1000, 60, 4690, 17207, 1161, 14119, 17207, 17207,
	17207, 17207, 17207, 17207, -1000, 978, -1000, 17207, 17207, -1000,
	28, 22, -1000, 18482, -1000, 131, -1000, 328, 943, 100,
	18227, 1215, 942, -1000, 904, -1000, 882, 973, 8427, 9270,
	246, -1000, -1000, 246, 246, 9270, -1000, -1000, 17207, 10,
	1371, 17207, 99, -1000, 24090, -1000, -1000, 9270, 9270, 9270,
	9270, 9270, 813, -1000, -1000, -1000, 5551, -1000, -1000, 63,
	327, 167, -1000, -1000, 323, 63, -1000, -1000, -1000, -1000,
	322, 1452, 462, -1000, -1000, -1000, 9270, 412, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1158, 321, 320,
	-1000, -1000, -1000, -1000, 317, 316, 315, 314, 312, 310,
	305, 304, 303, 302, 300, 299, 298, 297, 296, 794,
	-1000, 445, -1000, -1000, 445, 445, -1000, 293, 293, 294,
	-1000, -1000, -1000, -1000, 293, -1000, -1000, -1000, 395, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 295, 99, -1000, -1000,
	-1000, 17207, 43, -1000, 24888, -1000, -25, 737, -1000, 15167,
	1295, 1279, 1264, 15677, 1335, 1332, 574, 17207, 17207, 573,
	566, 15677, -1000, 1122, 42, -1000, -1000, 2587, -1000, -1000,
	430, 88, 1365, 88, 13075, -1000, 17207, 17207, -1000, 17207,
	-1000, -1000, 17207, -1000, 17207, 17207, -1000, 17207, 150, 14657,
	709, 1197, 644, 41, 35, -1000, 1381, -1000, -1000, -1000,
	-1000, 80, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 294, 794, 293, 293,
	293, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 395, -1000,
	-1000, 445, 445, 445, -1000, -1000, 29, 24888, 557, -12,
	14388, 17207, -1000, 52, -1000, -1000, 1119, 500, 19, 788,
	1012, 804, -1000, -1000, -1000, -1000, 8, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1429, -1000, -1000,
	-1000, -1000, 1441, 8, -1000, -1000, -1000, -1000, -1000, 1451,
	-1000, -1000, -1000, 4690, -1000, -1000, -1000, 17207, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 788, 1012,
	-1000, -1000, 15677, 14912, 1359, 1193, 1352, 17207, 853, 941,
	-1000, -1000, 382, 1191, -1000, -1000, -1000, -1000, 24888, -1000,
	24888, 717, 1034, -1000, 1034, 2, -1000, 23884, -1000, 289,
	1, -1000, 430, 7300, 12548, 25207, 25207, 17207, 609, 9270,
	9270, 9270, 9270, 9270, 9270, 9270, 9270, 9270, 9270, 9270,
	9270, 9270, 9270, 9270, 9270, 9270, 9270, 9270, 9270, 9270,
	9270, 971, 9270, 554, 9270, 9270, 9270, 9270, 1227, 845,
	270, 4690, -1000, 642, 642, 642, 24988, 24988, 198, 58,
	23470, -3, 63, -1000, -1000, 7016, 6715, 63, 4969, -1000,
	798, 1440, 437, 24888, 1171, 1081, 283, 152, 147, 9270,
	9270, 9551, 9551, 9270, 9832, 9270, 9270, 5832, 9270, 9270,
	9270, 9270, 9270, 9270, -1000, 280, -1000, -1000, -1000, -1000,
	1438, -1000, -1000, 1437, -1000, 608, 602, 1436, 430, 144,
	7862, -1000, 709, 17207, 17207, 17207, -1000, -1000, 937, 17972,
	933, 25207, 17207, -1000, 279, 278, 997, 989, 17207, 17207,
	17717, 17462, 17207, 725, 276, 275, 17207, 744, -1000, 17207,
	17207, 712, 631, 1118, 17207, -1000, 9270, 685, 9270, 741,
	-1000, 12005, 454, 17207, 696, 70, -1000, -1000, -1000, 372,
	17207, -1000, -1000, -1000, 111, -1000, 107, 107, -1000, -1000,
	15677, -1000, -1000, -1000, -1000, -1000, -1000, 25207, 350, 251,
	-1000, 1434, 551, -1000, 548, 547, 546, -1000, 273, -1000,
	9270, 17207, 14388, -12, -19, -1000, -1000, 17207, 1012, -1000,
	-1000, -1000, -1000, 694, -1000, 777, -1000, 11466, -1000, -1000,
	-1000, 798, -1000, -29, -1000, -1000, -1000, -1000, 143, -8,
	-23, 25207, -1000, -1000, -1000, -1000, -1000, 17207, 254, 17207,
	41, 17207, 41, 17207, 1190, 1447, 17207, -1000, -1000, -1000,
	9270, -1000, -1000, -1000, 41, 17207, -1000, 1080, -1000, -84,
	1397, -109, 15422, -1000, 11734, -1000, -1000, -1000, 399, 291,
	291, 502, 502, 502, 502, 164, 164, 345, 2714, 3808,
	3808, 3808, 2698, 1630, 1630, 3808, 3808, 3808, 24988, 24936,
	617, 9270, 9270, 545, 826, 270, 617, 9270, 1424, 617,
	617, 617, -1000, 1576, -1000, -1000, -1000, 1116, 268, 9832,
	9832, -1000, -1000, -1000, 5551, -1000, -1000, 267, 9270, -1000,
	9270, -31, -112, -1000, -1000, -10, -1000, -1000, 5, 9270,
	9270, 9270, 140, -1000, 139, 624, -1000, 9270, 815, 261,
	256, 9270, -1000, -1000, 24643, 22070, 138, 1115, -92, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 135, 132, 24589, -92,
	129, 3342, -1000, 9832, 9832, 9832, 5551, 250, 127, 23795,
	-92, 24557, 8143, 8143, 8143, 125, 24468, 9270, -92, 3658,
	3464, 3125, -14, -15, -27, 1433, -39, 121, 396, 394,
	118, 1080, -1000, -1000, -1000, -1000, 539, 537, 1189, -1000,
	932, -1000, 460, -1000, 695, 9270, 17207, 240, 239, 800,
	-1000, 1187, 890, 1182, 890, -1000, -25, 711, 9270, 9270,
	-1000, 536, -1000, -1000, 535, -1000, 625, -1000, 23496, -1000,
	7300, 24888, -1000, 693, 1273, -40, -1000, -1000, 7300, 430,
	13075, 12548, 7862, -41, -1000, -1000, -1000, 709, -1000, 538,
	1432, 113, 961, 903, 729, 667, 1431, 24888, -29, -1000,
	-29, -1000, -1000, -1000, -1000, -1000, -1000, 17207, 1033, -1000,
	14912, 238, 17207, 237, -1000, 220, -1000, 219, 17207, -1000,
	1215, -1000, 109, -1000, 1061, 1306, -1000, 12548, 889, 1007,
	1005, 12548, 1021, 821, 821, 821, -1000, 15422, 4121, -1000,
	-1000, 17207, 216, 12276, 108, 1397, 9270, 617, 617, 9270,
	9832, 9832, -1000, 617, -1000, -1000, -1000, -1000, 1114, 208,
	9270, 25207, 2746, 2113, -46, 6414, -37, 23178, -1000, -1000,
	167, -1000, 106, 7581, -1000, 24176, -21, -21, -1000, 1446,
	1212, -1000, 9270, 24265, -1000, 13330, 435, 827, 23146, 25207,
	25207, -1000, 9270, -1000, -1000, 1109, 9270, -1000, 25207, 25207,
	9832, 9832, 9832, 9832, 9832, 9832, 9832, 9832, 9832, 9832,
	9832, 9832, 9832, 9832, 9832, 9832, 9832, 9832, 9832, 1086,
	9832, 1422, 1422, 1422, -38, 6113, -1000, 1157, 1109, 9270,
	9270, 25207, 105, 104, 103, -1000, 9270, -92, 9270, 9270,
	9270, -1000, -1000, -1000, 101, -1000, 1408, -1000, -1000, -1000,
	-1000, 1061, 17207, 17207, 17207, 1181, -1000, 1156, -1000, 23120,
	-50, 17207, 17207, -1000, 1056, 1101, 487, 17207, -1000, 17207,
	-1000, 17207, 17207, 17207, -51, -69, 17207, 17207, -1000, -1000,
	-55, 7300, 224, 41, -55, 685, -1000, -48, -1000, 371,
	-1000, 346, 292, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 97, -1000, -1000, 1051, -1000, 10394, 207, 17207, 14912,
	1350, 10394, 852, -1000, -1000, 417, 9270, 9270, 1397, 618,
	12548, 12548, 1805, 1004, 12548, -1000, -1000, -1000, -1000, -1000,
	-1000, 1023, 205, 17207, 15422, 504, 617, 2048, 2008, 9270,
	25207, 25039, -70, 9270, 9270, -1000, -71, -1000, 9270, -1000,
	-1000, 1445, 9270, 94, 93, 92, -1000, -1000, 24888, 9270,
	-1000, -1000, 21797, 9270, 91, -1000, 90, 89, 24888, 1157,
	24888, -1000, -1000, 600, 600, 1422, 1422, 1422, 1422, 1196,
	1196, 1128, 779, 2277, 2277, 2277, 2059, 484, 484, 2277,
	2277, 2277, 1091, 1002, 197, 3501, 9270, -75, -1000, -1000,
	-1000, 24888, 24888, 86, -1000, -1000, -1000, -92, 3077, 22828,
	22796, -1000, 85, 417, -1000, -1000, -1000, 17207, -1000, 17207,
	-1000, 17207, 17207, 1120, 915, -1000, -1000, 987, 189, 9832,
	17207, -1000, 806, -77, -83, 912, -1000, 896, 9270, -1000,
	25207, 890, 890, -1000, 528, 527, -1000, -1000, -1000, -1000,
	-55, 1222, 17207, 1261, -1000, -1000, 187, -1000, -1000, -1000,
	809, -85, -1000, 249, 1304, 9270, -1000, -1000, 184, 10394,
	-87, 84, 41, -93, 17207, -1000, 17207, 24888, -92, 585,
	-1000, 1805, -1000, 183, 9270, 12548, -1000, -152, -1000, 370,
	-1000, 17207, -97, -1000, 9270, 9270, 25039, -98, -1000, 617,
	617, -1000, 22770, -1000, 24176, -1000, -1000, -1000, 24888, 799,
	-1000, 22478, -1000, -1000, -1000, -1000, 9832, 1090, 181, 25207,
	22446, -1000, -1000, 9270, -1000, -1000, -1000, -1000, -1000, 949,
	-1000, -1000, 17207, 920, -1000, -1000, 9270, 3501, 178, 1033,
	177, -1000, -1000, -1000, 758, -1000, -1000, 24888, 1307, -1000,
	-1000, 17207, 17207, 563, -99, 17207, -1000, -1000, 5270, 17207,
	806, 10394, 1283, 63, 17207, 1283, 22420, 4969, -104, -1000,
	1033, -1000, 806, 176, -68, -1000, 1349, 13864, -1000, 17207,
	24888, -1000, 1023, -1000, 4690, -115, -1000, 617, 617, -1000,
	-1000, 83, 827, 1294, -1000, 3561, 9832, 25207, -116, -1000,
	22128, -1000, -1000, 1180, 22096, 966, 17207, -1000, 17207, 17207,
	463, 17207, -1000, -1000, 657, -1000, 430, -1000, 175, 1033,
	-1000, -1000, -1000, -1000, 1304, 5, 806, -1000, 1033, 10394,
	17207, 168, -1000, 112, 63, -122, -1000, -1000, -1000, -1000,
	730, 9270, 3561, -124, -1000, -1000, 1163, -1000, 836, 828,
	77, -126, 100, -1000, 9270, -1000, 13075, -1000, 17207, -1000,
	1283, 76, 1033, -1000, -128, -1000, -1000, 9270, -1000, 72,
	8989, 8989, -92, -1000, 17207, -1000, 851, 848, 662, -1000,
	-1000, -1000, -1000, -1000, 966, 24888, -114, -138, -1000, -1000,
	-1000, 806, -21, -1000, -1000, -1000, 10113, 897, 673, 23690,
	-1000, -1000, -1000, 1230, -1000, 472, 950, 950, 836, -1000,
	887, 1033, 69, 1386, -1000, -1000, -1000, -1000, -1000, -1000,
	1394, -1000, -1000, 1020, -1000, -1000, -1000, -1000, -1000, -1000,
	1445, 8708, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1719, 1715, 1336, 134, 1707, 133, 1699, 1697, 1696,
	1695, 1693, 100, 131, 130, 122, 128, 1688, 91, 1687,
	1683, 1682, 92, 1674, 1673, 1672, 36, 1671, 1670, 127,
	126, 1667, 1666, 86, 59, 138, 2381, 136, 1664, 1661,
	1659, 13, 102, 78, 1657, 152, 1656, 1655, 60, 97,
	110, 1172, 35, 1654, 1651, 143, 11, 20, 262, 101,
	147, 132, 115, 1650, 1644, 1643, 50, 1642, 3, 1639,
	1636, 15, 54, 7, 1635, 24, 37, 1634, 1630, 119,
	1629, 65, 98, 112, 26, 121, 103, 1628, 74, 8,
	75, 1615, 16, 1614, 34, 83, 140, 1612, 51, 150,
	57, 32, 64, 105, 1611, 1610, 1609, 79, 1608, 94,
	80, 1606, 1605, 82, 1604, 146, 139, 1602, 1601, 117,
	1600, 1599, 1597, 151, 1592, 1585, 154, 1584, 9, 42,
	61, 10, 108, 106, 22, 1583, 25, 1582, 2184, 906,
	827, 23, 53, 33, 81, 52, 58, 28, 1580, 1579,
	104, 1574, 1565, 1564, 1562, 1559, 76, 1553, 67, 142,
	46, 56, 93, 31, 45, 84, 159, 148, 107, 1552,
	1551, 116, 1548, 327, 1545, 1542, 1133, 113, 1538, 1532,
	1527, 1128, 1069, 561, 96, 1524, 1519, 226, 187, 1517,
	1516, 111, 1515, 1514, 145, 135, 21, 1513, 109, 1511,
	95, 1508, 0, 49, 30, 1507, 118, 77, 1506, 1505,
	1503, 1502, 27, 2, 12, 6, 5, 4, 43, 19,
	1501, 1498, 124, 88, 1485, 149, 1484, 1483, 1480, 48,
	1479, 17, 1476, 18, 1475, 1471, 14, 1, 141, 1467,
	99, 1466, 1370, 1465, 144, 1460, 1459, 1378, 85,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	43, 43, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 40, 40, 45,
	45, 45, 47, 47, 44, 44, 39, 39, 5, 5,
	5, 6, 6, 6, 6, 6, 12, 13, 13, 13,
	13, 13, 13, 13, 13, 85, 85, 84, 84, 87,
	87, 14, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 172, 172, 171, 17, 148, 148,
	18, 18, 18, 18, 19, 108, 108, 20, 20, 20,
	20, 21, 25, 238, 238, 238, 242, 242, 243, 243,
	244, 244, 244, 244, 244, 244, 244, 240, 240, 28,
	28, 28, 28, 28, 127, 123, 123, 125, 125, 125,
	125, 50, 122, 122, 122, 122, 124, 124, 124, 124,
	195, 194, 194, 200, 200, 200, 63, 63, 63, 63,
	63, 64, 64, 64, 193, 193, 193, 193, 201, 201,
	201, 201, 201, 201, 65, 65, 65, 199, 199, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 16, 239,
	239, 241, 241, 30, 30, 9, 9, 10, 10, 66,
	66, 67, 67, 130, 130, 130, 130, 68, 68, 46,
	46, 46, 129, 210, 210, 211, 211, 211, 211, 211,
	211, 212, 212, 212, 212, 212, 212, 212, 208, 208,
	209, 206, 206, 207, 207, 207, 207, 245, 245, 128,
	128, 71, 71, 215, 215, 215, 215, 213, 213, 213,
	213, 213, 216, 214, 217, 217, 217, 217, 217, 159,
	159, 159, 32, 11, 8, 8, 112, 112, 75, 75,
	163, 163, 163, 57, 57, 41, 41, 41, 24, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 113,
	113, 114, 114, 23, 27, 31, 31, 31, 31, 31,
	247, 247, 54, 54, 54, 54, 55, 55, 126, 126,
	126, 126, 126, 49, 7, 7, 48, 48, 22, 22,
	22, 22, 22, 60, 60, 119, 119, 119, 121, 121,
	120, 120, 120, 98, 98, 33, 80, 80, 89, 89,
	90, 90, 169, 91, 91, 26, 26, 36, 36, 34,
	34, 34, 34, 34, 34, 35, 35, 37, 37, 37,
	37, 37, 37, 37, 223, 223, 223, 225, 225, 222,
	224, 224, 246, 246, 99, 99, 99, 70, 69, 69,
	73, 73, 72, 74, 74, 162, 96, 96, 96, 96,
	115, 116, 116, 117, 117, 118, 118, 95, 95, 145,
	145, 38, 38, 79, 79, 81, 81, 136, 136, 137,
	137, 135, 135, 135, 164, 164, 164, 164, 165, 165,
	165, 165, 165, 165, 160, 160, 160, 160, 161, 161,
	170, 170, 102, 102, 102, 102, 100, 100, 101, 101,
	166, 166, 166, 166, 97, 97, 167, 167, 167, 131,
	131, 173, 173, 173, 78, 78, 78, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 174, 174, 174,
	175, 175, 175, 175, 177, 177, 177, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176,
	176, 178, 178, 185, 185, 186, 186, 187, 188, 179,
	179, 180, 180, 181, 182, 189, 189, 189, 189, 191,
	191, 183, 183, 183, 183, 183, 184, 109, 109, 109,
	109, 109, 109, 109, 109, 109, 109, 109, 109, 109,
	109, 110, 110, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 218, 218, 218, 218, 218, 218,
	218, 220, 220, 221, 221, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 226, 226, 227, 227, 229, 229, 230, 230,
	231, 232, 232, 232, 233, 234, 234, 228, 228, 235,
	235, 235, 236, 236, 237, 237, 237, 237, 237, 150,
	150, 150, 151, 151, 152, 86, 86, 147, 147, 146,
	146, 146, 149, 149, 103, 103, 190, 190, 190, 190,
	190, 190, 190, 104, 104, 104, 111, 105, 105, 106,
	106, 106, 106, 106, 106, 142, 143, 107, 107, 107,
	144, 144, 153, 157, 157, 156, 155, 155, 154, 154,
	134, 134, 134, 134, 133, 132, 92, 92, 248, 248,
	158, 158, 93, 93, 94, 88, 88, 168, 168, 168,
	168, 82, 82, 62, 62, 83, 83, 58, 58, 61,
	59, 59, 59, 59, 76, 76, 77, 77, 56, 56,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 192, 192, 192, 51, 51, 51, 52, 52, 53,
	53, 197, 197, 197, 198, 198, 198, 198, 196, 196,
	196, 196, 196, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 5, 3, 0,
	1, 1, 1, 1, 3, 3, 0, 2, 3, 2,
	3, 6, 6, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	3, 6, 3, 1, 5, 2, 1, 1, 1, 3,
	3, 2, 3, 3, 3, 3, 1, 3, 3, 2,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 0, 1, 1, 2,
	2, 4, 2, 4, 4, 4, 4, 4, 4, 4,
	2, 3, 4, 3, 4, 4, 2, 2, 2, 2,
	0, 2, 0, 8, 8, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 4, 7, 3, 0, 6, 6,
	8, 5, 7, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 0, 8, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 3, 2, 1, 4, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 3, 4, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 1, 1, 3, 1, 1, 1, 2,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 4, 1, 1, 1, 5, 1, 3, 1, 3,
	1, 1, 1, 1, 6, 6, 4, 4, 4, 4,
	4, 6, 5, 5, 5, 4, 8, 6, 6, 4,
	4, 4, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	3, 5, 4, 3, 5, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	1, 1, 3, 5, 2, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 3, 5, 1, 1,
	1, 1, 2, 2, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -17, -19, -20, -21, -22, -24, -25, -27, -26,
	-28, -29, -30, -31, -23, -32, -33, 23, 64, -7,
	-8, -9, -10, -11, -224, 92, 100, 122, 195, 99,
	85, 116, 209, 216, -34, -36, 224, -127, 225, 34,
	234, 58, 95, 211, 206, 255, 66, -223, -37, -35,
	303, 278, 284, 219, -38, 242, 270, 306, 242, 130,
	78, 273, -58, -51, 4, -202, -204, 20, 21, 23,
	33, 34, 39, 43, 46, 57, 58, 59, 61, 63,
	64, 65, 68, 69, 76, 77, 78, 79, 81, 85,
	87, 91, 92, 94, 99, 100, 106, 107, 110, 112,
	117, 122, 123, 124, 131, 134, 129, 143, 145, 146,
	151, 154, 157, 159, 160, 161, 162, 163, 165, 166,
	168, 170, 167, 173, 175, 176, 182, 185, 188, 189,
	190, 193, 195, 197, 198, 199, 201, 202, 206, 204,
	205, 207, 209, 211, 212, 214, 216, 217, 218, 221,
	222, 224, 225, 227, 230, 233, 234, 235, 238, 236,
	232, 241, 243, 244, 251, 255, 256, 257, 258, 261,
	262, 263, 265, 267, 268, 269, 274, 279, 280, 281,
	282, 28, 35, 36, 37, 38, 40, 41, 44, 45,
	49, 50, 51, 53, 80, 82, 83, 98, 101, 102,
	108, 118, 120, 125, 126, 135, 136, 137, 138, 140,
	149, 172, 174, 183, 187, 192, 194, 200, 213, 220,
	228, 229, 237, 239, 246, 247, 248, 252, 253, 270,
	271, 87, 134, 263, 262, 78, 130, 242, 273, -15,
	303, -26, -6, -13, -4, -22, -33, -12, -29, -16,
	-30, -14, 23, -196, 4, -202, -204, -203, -205, 55,
	67, 115, 133, 127, 142, 144, 150, 152, 164, 184,
	186, 210, 226, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 42, 47, 48, 52, 54, 56, 62, 66,
	70, 71, 72, 73, 74, 75, 84, 86, 88, 89,
	90, 93, 95, 97, 103, 104, 105, 111, 113, 114,
	116, 119, 121, 128, 130, 132, 139, 141, 147, 148,
	153, 155, 156, 169, 171, 177, 178, 179, 180, 181,
	191, 196, 203, 208, 219, 223, 231, 240, 242, 245,
	249, 250, 254, 259, 260, 264, 266, 272, 273, 275,
	276, 277, 278, -51, -51, -51, 195, 22, -242, 22,
	-243, -244, 66, 92, 116, 219, 134, 87, 262, -242,
	-55, 216, -51, -123, 154, 222, 213, 251, -124, -122,
	-195, 246, 163, -84, -51, 4, 78, 57, 79, 117,
	130, 131, 62, 63, 146, 243, 246, 251, 66, 265,
	22, -247, 251, 251, -247, -247, -54, 251, 249, -55,
	-246, 242, 242, 273, -112, 78, 260, -35, -37, -36,
	-72, -73, 259, 139, 97, 181, -34, -36, -223, -225,
	201, -222, -51, -225, -69, -70, 22, 89, 307, -166,
	-58, 179, -94, 303, -3, -166, 125, -58, -61, 125,
	-58, -51, -166, 125, 114, 303, -92, -134, -133, -132,
	301, 305, 114, 141, 141, -167, -166, -51, 125, -62,
	125, -61, -85, 125, -84, -85, 125, -172, -171, -198,
	4, -202, -204, -203, 270, 242, 130, -148, 303, -108,
	303, -51, 22, 178, 307, 178, -51, -123, 51, -123,
	303, -125, -49, -50, 143, 197, 249, 288, 114, 282,
	-65, 5, 84, -87, 305, 114, -239, 178, 114, 114,
	114, 114, 114, 114, 282, 143, 197, 242, 273, -126,
	-49, -50, -126, 249, -55, -97, -166, -84, 125, -84,
	130, -51, 125, -72, -73, -96, -115, -116, 153, 177,
	-99, 22, 89, -99, -99, 43, 304, 304, 307, -225,
	-77, 303, -88, -168, -138, 296, -140, 294, 295, 300,
	169, 283, -150, -58, -141, 9, 303, -153, -220, -36,
	98, 29, -151, -152, 213, -51, 7, 8, 5, 6,
	-56, -175, -184, 254, 103, 171, 47, -218, -219, 4,
	-202, -197, -176, -186, -180, -183, 140, 55, 71, 74,
	72, 75, 223, 264, 48, 28, 101, 102, 187, 192,
	239, 252, 253, 125, 172, 126, 53, 118, 149, 91,
	36, 38, 40, 41, 49, 50, 80, 82, 83, 108,
	135, 136, 137, 138, 174, 200, 228, 237, 247, 248,
	271, -203, -187, -188, -181, -182, -189, -88, -94, 296,
	-58, 303, -93, -158, -138, 84, -43, 204, -42, 21,
	23, 92, 268, 98, 232, 232, 204, 98, 308, 204,
	204, 98, 235, 304, -82, -58, -134, -138, -196, 296,
	-167, -60, -58, -60, 224, -51, 30, 98, -45, 307,
	46, 207, 98, -45, 307, 98, -45, 98, 304, 307,
	-166, 125, -61, 30, -147, -173, -174, -176, -185, -179,
	-183, -184, 39, 45, 44, 244, 220, 229, 37, 135,
	136, 137, 138, 228, 36, 200, 108, 91, 83, 82,
	174, 41, 40, -187, -188, -181, -182, 80, 247, 248,
	140, 38, 50, 49, 271, 237, -86, -138, -238, -83,
	242, 78, -59, -51, 296, -244, -238, 30, -86, 307,
	307, 151, -64, 157, 168, 123, -194, 84, -200, -193,
	-159, 9, 254, 103, 178, -199, 8, 295, -192, -198,
	5, 7, 294, -194, 84, 69, -201, 5, 4, -184,
	-159, 84, 154, 305, -196, -195, -241, 111, -238, -195,
	-195, -195, -195, -195, -51, 151, -195, -195, 307, 307,
	-55, -45, 307, 303, -71, 169, -71, 303, -52, 125,
	-51, -48, 94, 169, -96, -116, -115, -117, -138, 22,
	-138, -140, -35, -35, -35, -74, -162, -138, -222, 30,
	-76, -51, -79, 307, 114, 10, 11, 54, 33, 294,
	295, 296, 297, 109, 298, 291, 292, 293, 290, 286,
	287, 288, 60, 158, 215, 13, 14, 15, 26, 180,
	152, 283, 127, 226, 300, 16, 17, 18, 142, 35,
	128, 30, 4, -138, -138, -138, -138, -138, 186, -36,
	-138, -86, -92, -36, -146, 301, 303, -92, 303, 5,
	5, 303, -154, -138, -226, 279, 111, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 194, -191, 274, -191, -191, -177,
	303, -177, -178, 303, -177, 280, 284, 303, -79, -58,
	307, 304, 307, 249, -113, 62, 56, -129, 125, 56,
	-206, -51, 62, -207, 52, 260, 196, 113, -113, 62,
	-113, 62, 62, -166, 33, 33, 249, -61, -51, 249,
	249, -166, 114, 304, 307, 302, 311, -131, 276, -119,
	-26, 303, 84, 30, -119, -89, -90, -169, -91, -58,
	303, -51, -51, -61, -62, -84, -85, -85, -15, -171,
	98, -18, -26, -22, -33, -12, 304, 307, -78, 29,
	-109, 303, 281, 161, 81, 124, 160, -110, 218, 304,
	307, 249, 307, -83, -76, -133, -132, 114, 251, 304,
	-50, -49, -63, 199, 230, 205, 221, 307, 8, 7,
	7, 5, -196, -240, -51, -50, -49, -166, -66, -76,
	-67, -51, -130, -129, -208, -209, -206, 130, 260, 104,
	30, 98, 30, 178, 169, 288, 98, -118, 213, 214,
	307, -41, 31, 88, 303, 307, 304, -131, -168, -81,
	-164, -166, -36, -165, 303, -173, -173, -84, 246, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, -138, -138, -138, -138, -138, -138, -138, -138, -138,
	-138, 152, 127, 226, 35, 128, -138, 249, -138, -138,
	-138, -138, 171, 169, 254, 103, 261, 89, 175, -248,
	240, 32, -144, -36, 303, -196, -150, 213, 303, 304,
	307, -86, -149, 302, -146, -86, 304, 304, -86, 272,
	22, 89, 296, -109, 7, -157, -156, 275, -227, 106,
	119, 303, 304, 304, -138, -138, -103, -190, -86, 4,
	281, 161, 81, 124, 160, 218, -103, -104, -138, -86,
	-105, -139, -140, 294, 295, 300, 303, 213, -106, -138,
	-86, -138, 42, 148, 250, -107, -138, 114, -86, -138,
	-138, -138, -86, -86, -86, 303, 7, 7, 246, 246,
	7, -131, 304, -158, -42, -58, -51, -51, 169, -129,
	125, -47, 169, -173, -51, 303, 303, 145, 145, -51,
	-51, 125, -51, 125, -51, -51, -43, 204, 303, 303,
	-51, 204, -51, -58, 204, 235, 114, -58, -138, -98,
	208, -138, -98, -121, 178, -82, 270, -51, 208, -80,
	307, 114, 288, -82, -45, -45, -45, -166, -173, 301,
	301, 7, 249, 249, 249, 249, 303, -138, -240, -59,
	-240, -49, 258, 59, 199, -200, -109, 307, 304, 304,
	307, -52, 130, -52, -26, -84, -26, -58, 98, 5,
	-51, -162, -18, -51, -95, 119, -170, 307, 285, 67,
	-102, 144, 164, 115, 150, 210, 133, -135, 308, -161,
	-160, 30, -51, -36, -165, -164, 282, -138, -138, 249,
	-248, 240, -144, -138, 171, 254, 103, 261, 89, 175,
	114, 303, -139, -139, -86, 303, -86, -138, 302, 302,
	307, 304, -73, 307, -72, -138, -86, -86, 304, 304,
	-155, -156, 93, -138, -232, 185, 303, 303, -138, 30,
	307, 304, 114, 304, 304, -111, 191, 304, 10, 11,
	294, 295, 296, 297, 109, 298, 291, 292, 293, 290,
	286, 287, 288, 60, 158, 215, 13, 14, 15, 142,
	128, -139, -139, -139, -86, 303, 304, -142, -143, 114,
	111, 30, -107, -107, -107, 304, 114, -86, 307, 307,
	307, 304, 304, 304, 7, 304, 307, 304, 282, 282,
	304, -95, 249, 249, 98, 169, 267, -210, -207, -138,
	-76, 303, 303, -40, 92, 224, -114, 98, -45, 98,
	-45, 249, -113, 62, -86, -86, 249, 249, 235, 302,
	-88, 208, 61, 304, -88, -131, -90, -81, -158, 304,
	302, 7, 7, 304, 161, 124, 160, -110, 160, -110,
	-110, 7, -51, -68, 129, -130, 303, -52, 303, 303,
	-71, 303, -51, -48, 304, -145, 121, 43, -164, 175,
	144, 144, -164, -102, 144, -100, 184, -100, -100, -161,
	-196, 309, -51, 303, 304, -138, -138, -139, -139, 114,
	303, -138, -147, 26, 26, 304, -86, 304, 307, 304,
	-146, 304, 272, -73, -73, -73, 5, 95, -138, 245,
	-233, -51, 303, 276, -72, 304, -173, -173, -138, -142,
	-138, -173, -173, -139, -139, -139, -139, -139, -139, -139,
	-139, -139, -139, -139, -139, -139, -139, -139, -139, -139,
	-139, -139, 89, 169, 175, -139, 307, -86, 304, -143,
	-142, -138, -138, -173, 304, 304, 304, -86, -138, -138,
	-138, 304, 7, -145, -51, -51, -129, 98, -211, 62,
	-212, 54, 104, 66, 169, 171, 260, 196, 52, 84,
	203, 304, 304, -76, -76, 169, 84, 169, 84, 77,
	256, -51, -51, -58, -51, -51, 304, 304, -51, -58,
	-88, -120, 303, 178, -26, -98, 288, 302, 302, 304,
	128, -75, -163, -51, -221, 303, -218, -219, -56, 303,
	-76, -66, 30, -75, 178, -229, 277, -138, -86, 241,
	-164, -164, -101, 266, 178, 144, -164, -137, -136, 112,
	167, 303, -76, -160, 26, 26, -138, -147, 304, -138,
	-138, 304, -138, 5, -138, 304, 304, 304, -138, -234,
	-51, -138, 304, 304, 304, -143, 114, 89, 175, 303,
	-138, 304, 304, 307, 304, 304, 304, -229, -129, -51,
	-84, -51, 104, 125, 171, 145, 303, -139, -58, -128,
	-245, 65, 238, 304, 304, 171, 171, -138, -173, -45,
	-45, 249, 249, 90, -76, 62, -94, -36, 303, 188,
	304, 307, -57, -92, 54, -57, -138, 303, -75, 304,
	304, -26, 304, -58, -230, -231, -51, 246, -101, 303,
	-138, -164, 307, 310, 288, -76, 304, -138, -138, 304,
	304, -73, -228, 190, 304, -139, 114, 303, -147, 304,
	-138, -212, -52, 169, -138, -53, 303, -68, 303, 203,
	-44, 54, -51, -51, 262, 170, 304, -51, -51, -128,
	-163, -41, -84, -41, 304, -86, 304, -68, -128, 303,
	307, 30, -141, -56, -51, -76, -136, -196, 304, 304,
	-73, 43, -139, -147, 304, 304, 98, 304, -215, 159,
	-51, -76, -58, -39, 266, -84, 224, -131, 303, -68,
	-57, -73, -128, -68, -75, -231, -233, 303, 304, -235,
	198, 214, -86, 304, 104, -213, -216, -214, 178, 115,
	189, 227, 304, 304, -71, -138, -89, -76, -41, 304,
	-68, 304, -86, 304, -236, -237, 35, 257, 69, -138,
	-236, -51, -214, 178, -216, 178, 262, 87, -215, -131,
	304, -128, -73, -237, 193, 110, 213, 193, 110, -217,
	166, 207, 46, 224, -217, -213, -46, 46, 207, -68,
	304, 26, 20, 171, 84, -237,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 0, 0, 381, 0, 0, 0,
	0, 0, 0, 0, 355, -2, 0, 133, 0, 311,
	0, 311, 311, 315, 0, 383, 277, 380, -2, 391,
	0, 0, 0, 389, 369, 0, 0, -2, 0, 0,
	0, 0, 0, 787, 814, 815, 816, 833, 834, 835,
	836, 837, 838, 839, 840, 841, 842, 843, 844, 845,
	846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
	856, 857, 858, 859, 860, 861, 862, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 887, 888, 889, 890, 891, 892, 893, 894, 895,
	896, 897, 898, 899, 900, 901, 902, 903, 904, 905,
	906, 907, 908, 909, 910, 911, 912, 913, 914, 915,
	916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 0, 198, 828, 829, 830, 831, 832, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 99, 106, 107, 898, 109, 0, 116,
	117, 118, 120, 121, 122, 123, 124, 125, 126, 0,
	304, 912, 317, 129, 877, 916, 984, 930, 136, 146,
	0, 990, -2, 150, 77, 179, 180, 0, 182, 200,
	0, 0, 0, 0, 0, 190, 0, 0, 0, 196,
	197, 322, 310, 322, 307, 308, 309, 312, 0, 303,
	0, 382, 0, 0, 0, 0, 276, -2, 365, 366,
	-2, 0, 386, 386, 386, 0, 0, 366, 0, 374,
	902, 377, 797, 375, 0, 0, 388, 387, 0, 370,
	450, 0, 411, 0, 2, 0, 969, 450, 0, 969,
	0, 0, 0, 969, 0, 0, 788, 766, 760, 761,
	0, 0, 0, 0, 0, 0, 456, 67, 969, 51,
	969, 783, 51, 969, 75, 51, 969, 0, 94, 96,
	824, 825, 826, 827, 995, 0, 0, 0, 0, 104,
	0, 108, 110, 0, 0, 0, 316, 130, 958, 132,
	0, 135, 137, 138, 0, 0, 0, 0, 0, 0,
	149, 174, 175, 78, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 191, 0, 193, 0, 0, 305,
	318, 319, 306, 0, 314, 51, 454, 252, 969, 252,
	818, 327, 969, -2, 0, 361, 398, 399, 0, 0,
	0, 384, 385, 0, 0, 0, 357, 358, 0, 376,
	0, 0, 414, 775, 779, 780, 543, 0, 0, 0,
	0, 0, 0, 632, 633, 634, 0, 636, 637, 638,
	963, 0, 642, 643, 984, 787, 800, 801, 802, 803,
	0, 0, 0, 808, 809, 810, 759, 683, 652, -2,
	-2, 798, 480, 481, 482, 483, -2, 997, 656, 658,
	660, 661, 662, 663, 0, 947, 964, 965, 980, 981,
	989, 993, 994, 969, 977, 970, 959, 967, 976, 857,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 823, 505, 506, 511, 512, 514, 414, 412, 451,
	452, 0, 0, 772, 770, 771, 28, 300, 30, 0,
	300, 300, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 58, 0, 0, 781, 767, 0, 764, 765,
	460, 0, 333, 0, 0, 457, 0, 0, 69, 0,
	49, 50, 0, 71, 0, 0, 73, 0, 381, 0,
	0, 969, 0, 381, 0, 717, 466, 467, 468, 469,
	470, 540, 473, 474, 475, 476, 477, 478, 479, 487,
	488, 489, 490, 491, 492, 493, 502, 0, 486, 486,
	486, 499, 500, 503, 504, 509, 510, 521, 522, 524,
	526, 520, 520, 520, 517, 518, 0, 715, 0, 113,
	0, 852, 785, 790, 791, 119, 0, 0, 0, 0,
	0, 0, 141, 161, 162, 163, 142, 144, 151, 153,
	154, 155, 164, 165, 166, 167, 269, 0, 271, 177,
	178, 811, 0, 143, 145, 147, 148, 168, 169, 0,
	171, 172, 173, 0, 79, 181, 183, 0, 199, 184,
	185, 186, 187, 188, 189, 192, 194, 195, 0, 0,
	313, 272, 0, 210, 0, 0, 0, 0, 0, 969,
	817, 324, 0, 0, 364, 396, 397, 400, 403, 404,
	401, 543, 371, 372, 373, 392, 393, 287, 378, 0,
	0, 794, 460, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 769,
	0, 0, 778, 548, 549, 550, 572, 573, 0, -2,
	715, 0, 639, 640, 641, 0, 0, -2, 0, 805,
	540, 0, 0, 758, 685, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 744, 0, 0, 0, 0,
	0, 0, 0, 0, 495, 508, 519, 516, 515, 497,
	0, 496, 494, 0, 498, 0, 0, 0, 460, 0,
	0, 774, 0, 0, 0, 0, 299, 32, 969, 0,
	53, 0, 0, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 789, 0,
	0, 0, 0, 0, 0, 762, 0, 344, 0, 344,
	335, 0, 0, 0, 331, 347, 348, 350, 351, 0,
	0, 458, 68, 784, 51, 76, 51, 51, 82, 95,
	0, 97, 100, 101, 102, 103, 98, 0, 461, 463,
	471, 0, 527, 528, 529, 530, 531, 532, 541, 105,
	0, 0, 0, 114, 115, 792, 793, 0, 0, 134,
	139, 140, 323, 0, 158, 0, 160, 0, 270, 813,
	812, 540, 80, 201, 127, 320, 321, 455, 0, 0,
	209, 794, 211, 213, 214, 215, 216, 818, 0, 818,
	0, 0, 0, 0, 0, 0, 0, 402, 405, 406,
	0, 395, 285, 286, 381, 0, 796, 408, 776, 441,
	415, 423, 439, 426, 0, 544, 545, 546, 0, 551,
	552, 553, 554, 555, 556, 557, 558, 559, 560, -2,
	-2, -2, 564, 565, 566, -2, -2, -2, 570, 571,
	-2, 0, 0, 0, 769, 0, -2, 0, 580, -2,
	-2, -2, 584, 0, 587, 589, 591, 0, 0, 0,
	0, 768, 601, 750, 0, 777, 586, 0, 0, 635,
	0, 0, 0, 721, 722, 0, -2, 644, 391, 0,
	0, 0, 0, 806, 0, 757, 753, 0, 693, 0,
	0, 0, 657, 659, 0, 0, 0, 0, 725, -2,
	-2, -2, -2, -2, -2, -2, 0, 0, 715, 735,
	0, 0, 603, 0, 0, 0, 0, 984, 0, 715,
	743, 0, 0, 0, 0, 0, 715, 0, 749, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 408, 453, 773, 31, 289, 0, 0, 0, 34,
	969, 42, 0, 224, 0, 0, 0, 0, 0, 302,
	43, 969, 51, 969, 51, 44, 29, 300, 0, 0,
	293, 0, 288, 291, 0, 59, 0, 782, 0, 66,
	0, 459, 328, 329, 0, 0, 337, 334, 0, 460,
	0, 0, 0, 0, 70, 72, 74, 0, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 111, 786,
	112, 131, 156, 157, 159, 152, 170, 0, 218, 251,
	0, 0, 818, 0, 207, 252, 273, 0, 0, 326,
	327, 394, 0, 795, 410, 0, 413, 0, 0, 0,
	0, 0, 0, 447, 447, 447, 445, 439, 0, 425,
	438, 0, 437, -2, 426, 0, 0, -2, -2, 0,
	0, 0, 602, -2, 585, 588, 590, 592, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 716, 719, 720,
	0, -2, 0, 0, 390, 391, 391, 391, 650, 0,
	0, 754, 0, 0, 651, 0, 0, 0, 0, 0,
	0, 666, 0, 667, 668, 0, 0, 669, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 606, 607, 608, 0, 0, 670, 741, 742, 0,
	0, 0, 0, 0, 0, 675, 0, 748, 0, 0,
	0, 679, 680, 681, 0, 484, 0, 501, 523, 525,
	513, 410, 0, 0, 0, 0, 52, 222, 241, 0,
	0, 0, 0, 36, 0, 0, 0, 0, 40, 0,
	46, 0, 0, 0, 0, 0, 0, 0, 60, 763,
	343, 0, 342, 0, 332, 344, 349, 346, 352, 0,
	464, 0, 0, 472, 533, 534, 535, 536, 537, 538,
	539, 0, 128, 205, 0, 212, 0, 0, 0, 210,
	0, 0, 0, 325, 379, 687, 0, 0, 416, 0,
	0, 0, 0, 0, 0, 442, 446, 443, 444, 424,
	421, 0, 435, 0, 428, 547, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 751, 0, 710, 0, -2,
	723, 645, 0, 0, 0, 0, 807, 752, 756, 0,
	691, 692, 696, 0, 0, 655, 0, 0, 724, 734,
	736, 604, 605, 609, 610, 611, 612, 613, 614, 615,
	616, 617, 618, -2, -2, -2, 622, 623, 624, -2,
	-2, -2, 0, 0, 0, 737, 0, 0, 713, 739,
	740, 745, 746, 0, 672, 673, 674, 747, 0, 0,
	0, 507, 0, 687, 295, 297, 33, 0, 223, 0,
	226, 0, 0, 0, 0, 232, 233, 0, 0, 0,
	0, 243, 250, 0, 0, 0, 48, 0, 0, 301,
	0, 51, 51, 290, 0, 0, 203, 204, 294, 292,
	330, 0, 0, 0, 336, 345, 0, 465, 462, 542,
	0, 0, 278, 284, 284, 0, 653, 654, 0, 0,
	0, 0, 0, 0, 0, 367, 0, 409, 407, 0,
	429, 0, 431, 0, 0, 0, 433, 0, 419, 0,
	418, 0, 0, 427, 0, 0, -2, 0, 595, -2,
	-2, 709, 716, 804, 391, 646, 648, 649, 755, 698,
	695, 0, 682, 664, 665, 733, 0, 0, 0, 0,
	716, 712, 671, 0, 677, 678, 485, 368, 35, 0,
	227, 228, 818, 0, 231, 234, 0, 236, 820, 218,
	0, 247, 248, 245, 0, 37, 38, 47, 55, 39,
	45, 0, 0, 0, 0, 0, 353, 354, 0, 0,
	250, 0, 287, 799, 0, 287, 0, 0, 0, 240,
	218, 208, 250, 0, 686, 688, 0, 0, 430, 0,
	449, 432, 0, 422, 0, 0, 436, -2, -2, 596,
	711, 0, 391, 0, 684, -2, 0, 0, 0, 714,
	0, 225, 229, 0, 0, 256, 0, 244, 0, 0,
	57, 0, 296, 298, 0, 339, 460, 341, 0, 218,
	279, 280, 283, 281, 284, 391, 250, 206, 218, 0,
	0, 0, 440, 0, 0, 0, 420, 417, 434, 647,
	701, 0, -2, 0, 630, 676, 0, 235, 261, 0,
	0, 0, 252, 41, 0, 54, 0, 340, 0, 238,
	287, 0, 218, 274, 0, 689, 690, 0, 448, 0,
	0, 0, 697, 631, 0, 237, 257, 258, 0, 253,
	254, 255, 819, 249, 256, 56, 460, 0, 282, 645,
	239, 250, 391, 694, 699, 702, -2, 933, 849, 0,
	700, 230, 259, 0, 260, 0, 0, 0, 261, 338,
	221, 218, 0, 0, 704, 705, 706, 707, 708, 262,
	0, 265, 266, 0, 263, 246, 217, 219, 220, 275,
	0, 0, 264, 267, 268, 703,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 292, 3, 298, 293, 3,
	303, 304, 296, 294, 307, 295, 305, 297, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 311, 306,
	286, 288, 287, 3, 308, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 301, 3, 302, 291, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 309, 290, 310, 300,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 289, 57629, 299,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:714
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:720
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:726
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:836
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:846
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:856
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:909
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:913
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:917
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:971
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:989
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:999
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 81:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1042
		{ /* SKIP DOC */
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1060
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1241
		{ /* SKIP DOC */
		}
	case 134:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1289
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1304
		{
			return unimplemented(sqllex)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			return unimplemented(sqllex)
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = Low
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = Normal
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = High
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1423
		{
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return unimplemented(sqllex)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 203:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1554
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1614
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1618
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = DropDefault
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1628
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			return unimplemented(sqllex)
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1700
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			return unimplemented(sqllex)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1833
		{
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1840
		{
			return unimplemented(sqllex)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1841
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1842
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1844
		{
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1855
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = true
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = false
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1947
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1948
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1952
		{
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = Ascending
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = Descending
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 288:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2006
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2007
		{
			return unimplemented(sqllex)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = true
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2015
		{
			sqlVAL.union.val = false
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2020
		{
		}
	case 302:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2021
		{
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2054
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2063
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2064
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.str = ""
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.str = ""
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2134
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2158
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2165
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2197
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2207
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			return unimplemented(sqllex)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2213
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2236
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2237
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2446
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			return unimplemented(sqllex)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2465
		{
			return unimplemented(sqllex)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2466
		{
			return unimplemented(sqllex)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			return unimplemented(sqllex)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return unimplemented(sqllex)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2473
		{
			return unimplemented(sqllex)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2476
		{
			return unimplemented(sqllex)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2477
		{
		}
	case 382:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2480
		{
		}
	case 383:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2485
		{
			sqlVAL.union.val = true
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2489
		{
			sqlVAL.union.val = false
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = false
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = true
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2505
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2543
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2563
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2604
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2605
		{
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &From{}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.str = astFullJoin
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.str = astLeftJoin
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.str = astRightJoin
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.str = astInnerJoin
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2879
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2883
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2940
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2941
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2945
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2946
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			return unimplemented(sqllex)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3010
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = nil
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3059
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3131
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3163
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3189
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3203
		{
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 525:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			return unimplemented(sqllex)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			return unimplemented(sqllex)
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3236
		{
			return unimplemented(sqllex)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			return unimplemented(sqllex)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			return unimplemented(sqllex)
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			return unimplemented(sqllex)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			return unimplemented(sqllex)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			return unimplemented(sqllex)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3243
		{
			return unimplemented(sqllex)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3245
		{
			return unimplemented(sqllex)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			return unimplemented(sqllex)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3247
		{
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			return unimplemented(sqllex)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3251
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3283
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			return unimplemented(sqllex)
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3461
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3694
		{
			return unimplemented(sqllex)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3695
		{
			return unimplemented(sqllex)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3718
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3733
		{
			return unimplemented(sqllex)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3734
		{
			return unimplemented(sqllex)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3738
		{
			return unimplemented(sqllex)
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3755
		{
			return unimplemented(sqllex)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3757
		{
			return unimplemented(sqllex)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3758
		{
			return unimplemented(sqllex)
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3787
		{
			return unimplemented(sqllex)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3831
		{
			return unimplemented(sqllex)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3832
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3835
		{
			return unimplemented(sqllex)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3836
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = Window(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3861
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3869
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.str = ""
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3923
		{
			return unimplemented(sqllex)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3924
		{
			return unimplemented(sqllex)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3925
		{
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
			return unimplemented(sqllex)
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			return unimplemented(sqllex)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3937
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3938
		{
			return unimplemented(sqllex)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4137
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4149
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4275
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4276
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4291
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4384
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4432
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4468
		{
			return unimplemented(sqllex)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = DNull
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.str = ""
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
