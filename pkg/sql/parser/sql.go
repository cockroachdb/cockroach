// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}

//line sql.y:326
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT8 = 57480
const INT64 = 57481
const INTEGER = 57482
const INTERSECT = 57483
const INTERVAL = 57484
const INTO = 57485
const IS = 57486
const ISOLATION = 57487
const JOIN = 57488
const KEY = 57489
const KEYS = 57490
const LATERAL = 57491
const LC_CTYPE = 57492
const LC_COLLATE = 57493
const LEADING = 57494
const LEAST = 57495
const LEFT = 57496
const LEVEL = 57497
const LIKE = 57498
const LIMIT = 57499
const LOCAL = 57500
const LOCALTIME = 57501
const LOCALTIMESTAMP = 57502
const LOW = 57503
const LSHIFT = 57504
const MATCH = 57505
const MINUTE = 57506
const MONTH = 57507
const NAME = 57508
const NAMES = 57509
const NATURAL = 57510
const NEXT = 57511
const NO = 57512
const NO_INDEX_JOIN = 57513
const NORMAL = 57514
const NOT = 57515
const NOTHING = 57516
const NULL = 57517
const NULLIF = 57518
const NULLS = 57519
const NUMERIC = 57520
const OF = 57521
const OFF = 57522
const OFFSET = 57523
const OID = 57524
const ON = 57525
const ONLY = 57526
const OR = 57527
const ORDER = 57528
const ORDINALITY = 57529
const OUT = 57530
const OUTER = 57531
const OVER = 57532
const OVERLAPS = 57533
const OVERLAY = 57534
const PARENT = 57535
const PARTIAL = 57536
const PARTITION = 57537
const PASSWORD = 57538
const PLACING = 57539
const POSITION = 57540
const PRECEDING = 57541
const PRECISION = 57542
const PREPARE = 57543
const PRIMARY = 57544
const PRIORITY = 57545
const RANGE = 57546
const READ = 57547
const REAL = 57548
const RECURSIVE = 57549
const REF = 57550
const REFERENCES = 57551
const REGCLASS = 57552
const REGPROC = 57553
const REGPROCEDURE = 57554
const REGNAMESPACE = 57555
const REGTYPE = 57556
const RENAME = 57557
const REPEATABLE = 57558
const RELEASE = 57559
const RESTORE = 57560
const RESTRICT = 57561
const RETURNING = 57562
const REVOKE = 57563
const RIGHT = 57564
const ROLLBACK = 57565
const ROLLUP = 57566
const ROW = 57567
const ROWS = 57568
const RSHIFT = 57569
const STATUS = 57570
const SAVEPOINT = 57571
const SEARCH = 57572
const SECOND = 57573
const SELECT = 57574
const SERIAL = 57575
const SERIALIZABLE = 57576
const SESSION = 57577
const SESSION_USER = 57578
const SET = 57579
const SHOW = 57580
const SIMILAR = 57581
const SIMPLE = 57582
const SMALLINT = 57583
const SMALLSERIAL = 57584
const SNAPSHOT = 57585
const SOME = 57586
const SPLIT = 57587
const SQL = 57588
const START = 57589
const STDIN = 57590
const STRICT = 57591
const STRING = 57592
const STORING = 57593
const SUBSTRING = 57594
const SYMMETRIC = 57595
const SYSTEM = 57596
const TABLE = 57597
const TABLES = 57598
const TEMPLATE = 57599
const TEXT = 57600
const THEN = 57601
const TIME = 57602
const TIMESTAMP = 57603
const TIMESTAMPTZ = 57604
const TO = 57605
const TRAILING = 57606
const TRANSACTION = 57607
const TREAT = 57608
const TRIM = 57609
const TRUE = 57610
const TRUNCATE = 57611
const TYPE = 57612
const UNBOUNDED = 57613
const UNCOMMITTED = 57614
const UNION = 57615
const UNIQUE = 57616
const UNKNOWN = 57617
const UPDATE = 57618
const UPSERT = 57619
const USER = 57620
const USERS = 57621
const USING = 57622
const VALID = 57623
const VALIDATE = 57624
const VALUE = 57625
const VALUES = 57626
const VARCHAR = 57627
const VARIADIC = 57628
const VIEW = 57629
const VARYING = 57630
const WHEN = 57631
const WHERE = 57632
const WINDOW = 57633
const WITH = 57634
const WITHIN = 57635
const WITHOUT = 57636
const YEAR = 57637
const ZONE = 57638
const NOT_LA = 57639
const WITH_LA = 57640
const AS_LA = 57641
const POSTFIXOP = 57642
const UMINUS = 57643

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5244

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	320, 28,
	-2, 401,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 374,
	-1, 62,
	98, 383,
	141, 383,
	157, 383,
	181, 383,
	186, 383,
	273, 383,
	-2, 377,
	-1, 71,
	1, 28,
	320, 28,
	-2, 401,
	-1, 412,
	1, 182,
	320, 182,
	-2, 955,
	-1, 448,
	157, 411,
	181, 411,
	-2, 380,
	-1, 451,
	157, 410,
	181, 410,
	-2, 378,
	-1, 577,
	157, 410,
	181, 410,
	-2, 381,
	-1, 635,
	317, 889,
	-2, 882,
	-1, 636,
	317, 890,
	-2, 883,
	-1, 642,
	5, 559,
	317, 559,
	-2, 1057,
	-1, 666,
	5, 519,
	-2, 1031,
	-1, 667,
	5, 553,
	317, 553,
	-2, 1033,
	-1, 668,
	5, 527,
	-2, 1034,
	-1, 669,
	5, 526,
	-2, 1035,
	-1, 670,
	5, 553,
	317, 553,
	-2, 1038,
	-1, 671,
	5, 553,
	317, 553,
	-2, 1039,
	-1, 672,
	5, 554,
	-2, 1042,
	-1, 673,
	5, 513,
	-2, 1043,
	-1, 674,
	5, 513,
	-2, 1044,
	-1, 675,
	5, 535,
	-2, 1048,
	-1, 676,
	5, 514,
	-2, 1053,
	-1, 677,
	5, 515,
	-2, 1054,
	-1, 678,
	5, 516,
	-2, 1055,
	-1, 679,
	5, 517,
	-2, 1056,
	-1, 680,
	5, 513,
	-2, 1060,
	-1, 681,
	5, 520,
	-2, 1065,
	-1, 682,
	5, 518,
	-2, 1068,
	-1, 683,
	5, 551,
	317, 551,
	-2, 1070,
	-1, 684,
	5, 555,
	-2, 1073,
	-1, 685,
	5, 557,
	-2, 1074,
	-1, 686,
	5, 550,
	317, 550,
	-2, 1078,
	-1, 944,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 676,
	-1, 953,
	317, 867,
	-2, 855,
	-1, 1166,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 594,
	-1, 1167,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 595,
	-1, 1168,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 596,
	-1, 1172,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 600,
	-1, 1173,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 601,
	-1, 1174,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 602,
	-1, 1177,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 607,
	-1, 1183,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 609,
	-1, 1186,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 614,
	-1, 1187,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 615,
	-1, 1188,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 616,
	-1, 1214,
	191, 747,
	-2, 750,
	-1, 1243,
	115, 787,
	317, 889,
	-2, 882,
	-1, 1244,
	115, 788,
	-2, 1027,
	-1, 1245,
	115, 789,
	-2, 953,
	-1, 1246,
	115, 790,
	-2, 923,
	-1, 1247,
	115, 791,
	-2, 938,
	-1, 1248,
	115, 792,
	-2, 952,
	-1, 1249,
	115, 793,
	-2, 995,
	-1, 1401,
	98, 384,
	141, 384,
	157, 384,
	181, 384,
	186, 384,
	273, 384,
	-2, 452,
	-1, 1406,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 608,
	-1, 1407,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 610,
	-1, 1412,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 611,
	-1, 1429,
	191, 746,
	-2, 749,
	-1, 1604,
	1, 453,
	68, 453,
	98, 453,
	116, 453,
	120, 453,
	122, 453,
	135, 453,
	141, 453,
	146, 453,
	154, 453,
	157, 453,
	168, 453,
	181, 453,
	183, 453,
	186, 453,
	220, 453,
	222, 453,
	273, 453,
	280, 453,
	290, 453,
	291, 453,
	299, 453,
	316, 453,
	318, 453,
	320, 453,
	321, 453,
	-2, 452,
	-1, 1608,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 612,
	-1, 1613,
	144, 0,
	-2, 626,
	-1, 1623,
	191, 748,
	-2, 751,
	-1, 1657,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 653,
	-1, 1658,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 654,
	-1, 1659,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 655,
	-1, 1663,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 659,
	-1, 1664,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 660,
	-1, 1665,
	13, 0,
	14, 0,
	15, 0,
	300, 0,
	301, 0,
	302, 0,
	-2, 661,
	-1, 1780,
	144, 0,
	-2, 627,
	-1, 1783,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 630,
	-1, 1784,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 632,
	-1, 1879,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 631,
	-1, 1880,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 633,
	-1, 1887,
	144, 0,
	-2, 662,
	-1, 1940,
	144, 0,
	-2, 663,
	-1, 1998,
	36, 0,
	129, 0,
	156, 0,
	239, 0,
	297, 0,
	-2, 1030,
}

const sqlNprod = 1173
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 26929

var sqlAct = [...]int{

	636, 1997, 1976, 1599, 2022, 1946, 1977, 1399, 1978, 452,
	1996, 1824, 1039, 861, 1565, 1634, 1736, 629, 1863, 459,
	61, 1750, 1847, 613, 1762, 1769, 751, 1031, 1128, 1575,
	269, 490, 81, 283, 867, 1375, 634, 627, 48, 1694,
	633, 1737, 285, 81, 81, 81, 1377, 413, 81, 1600,
	1107, 81, 1581, 1755, 271, 20, 1490, 509, 1121, 81,
	61, 949, 1144, 473, 1489, 1324, 81, 81, 826, 1103,
	81, 1102, 1212, 81, 81, 81, 81, 81, 81, 1591,
	1106, 1440, 596, 1389, 863, 1137, 702, 735, 1136, 699,
	822, 61, 752, 1272, 1040, 1383, 1007, 1222, 1199, 1141,
	1196, 607, 1055, 457, 1269, 1071, 276, 27, 884, 998,
	1064, 275, 16, 277, 8, 815, 563, 1138, 1097, 799,
	722, 704, 1240, 606, 940, 492, 20, 597, 491, 796,
	979, 510, 983, 564, 504, 501, 503, 1110, 1033, 890,
	1848, 580, 579, 462, 581, 451, 400, 795, 817, 813,
	391, 728, 497, 584, 562, 460, 1870, 1428, 403, 1871,
	282, 62, 737, 63, 456, 1068, 1036, 2012, 737, 1032,
	1132, 1336, 1992, 1984, 737, 1846, 1132, 456, 27, 1974,
	1460, 1461, 1061, 16, 1397, 8, 1968, 470, 1967, 1132,
	476, 1132, 1942, 483, 1934, 1061, 689, 1132, 1918, 1908,
	1335, 1846, 1132, 1881, 60, 439, 1061, 892, 1069, 714,
	479, 893, 894, 1387, 913, 914, 915, 923, 924, 925,
	489, 1878, 464, 449, 746, 448, 410, 916, 1432, 1857,
	39, 1475, 1846, 1433, 896, 1386, 67, 927, 40, 1854,
	1845, 1829, 1132, 1846, 1132, 1074, 688, 1070, 1067, 1828,
	1806, 1785, 1132, 1074, 1074, 1782, 895, 1924, 1061, 69,
	41, 891, 910, 1386, 82, 81, 81, 81, 81, 81,
	1670, 513, 893, 894, 1772, 1721, 1720, 1074, 1074, 1074,
	1466, 1706, 1617, 1551, 1132, 1074, 1030, 1545, 70, 1507,
	1030, 1505, 1508, 1620, 1074, 896, 65, 1504, 1503, 1074,
	1074, 1074, 66, 1431, 1429, 1362, 286, 1074, 1074, 457,
	996, 901, 1439, 67, 1072, 506, 506, 895, 1365, 1364,
	1133, 64, 1132, 1132, 1083, 1073, 1060, 1074, 1074, 1061,
	920, 928, 1476, 1132, 738, 1029, 69, 1076, 1030, 511,
	738, 995, 1216, 1127, 994, 926, 738, 745, 1091, 592,
	746, 856, 855, 807, 806, 526, 469, 918, 71, 493,
	1400, 1849, 840, 911, 546, 70, 67, 2033, 282, 67,
	1995, 1990, 901, 65, 1208, 52, 1983, 1335, 1066, 66,
	591, 1937, 498, 1460, 1461, 1855, 917, 81, 1811, 69,
	1807, 1799, 69, 1798, 1797, 1793, 1792, 1477, 1035, 1367,
	1065, 487, 81, 507, 1791, 81, 81, 1734, 1728, 1685,
	1969, 1680, 60, 891, 1679, 687, 1678, 1628, 70, 1604,
	1580, 70, 1555, 1512, 1509, 1497, 1488, 1459, 912, 65,
	1456, 1455, 1453, 1787, 1445, 66, 741, 1444, 39, 81,
	921, 81, 736, 81, 81, 81, 40, 81, 859, 695,
	1363, 64, 956, 1286, 64, 866, 1398, 287, 578, 1237,
	1236, 591, 81, 950, 590, 64, 1209, 1966, 41, 1636,
	1956, 1921, 1900, 81, 1471, 1468, 1469, 1470, 1462, 1463,
	1464, 1465, 1467, 1466, 1898, 1889, 1874, 1553, 1867, 81,
	570, 1852, 573, 1843, 285, 81, 81, 81, 919, 81,
	1821, 907, 908, 909, 1804, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 1774, 922, 1744, 1612, 81, 81,
	1573, 724, 1808, 1571, 534, 1570, 81, 725, 81, 1568,
	577, 1524, 1523, 694, 1487, 514, 893, 894, 758, 513,
	513, 535, 1727, 1449, 1448, 893, 894, 285, 81, 693,
	81, 81, 81, 81, 81, 81, 81, 1425, 569, 836,
	1420, 81, 81, 529, 531, 1201, 1351, 81, 896, 1313,
	897, 898, 899, 900, 902, 81, 922, 67, 1312, 1776,
	841, 895, 1300, 52, 1300, 567, 1299, 865, 565, 1279,
	895, 1235, 740, 81, 1131, 743, 81, 984, 987, 991,
	69, 893, 894, 488, 977, 976, 975, 974, 587, 588,
	973, 972, 498, 971, 970, 969, 793, 593, 968, 967,
	966, 449, 282, 448, 896, 493, 805, 965, 964, 70,
	963, 962, 961, 1460, 1461, 747, 954, 65, 943, 64,
	860, 474, 595, 66, 532, 522, 895, 727, 730, 520,
	457, 1733, 1732, 950, 1345, 749, 858, 893, 894, 1344,
	870, 941, 1606, 710, 695, 888, 60, 1872, 1378, 1460,
	1461, 893, 894, 1731, 1337, 803, 540, 802, 1400, 1511,
	896, 1462, 1463, 1464, 1465, 1467, 515, 989, 1510, 830,
	837, 990, 39, 1405, 556, 541, 959, 845, 81, 864,
	40, 901, 895, 1756, 1032, 946, 81, 1637, 1223, 1436,
	81, 980, 560, 857, 81, 81, 1331, 781, 81, 513,
	513, 872, 41, 874, 1518, 873, 1952, 2009, 695, 2008,
	641, 265, 81, 1466, 81, 81, 886, 81, 1714, 1358,
	81, 74, 81, 81, 561, 81, 449, 513, 880, 449,
	449, 881, 882, 911, 1082, 432, 1001, 901, 286, 1194,
	438, 433, 437, 953, 957, 61, 1000, 780, 1907, 1466,
	61, 1837, 1535, 1192, 842, 1836, 1052, 846, 847, 848,
	849, 850, 1539, 1034, 266, 1034, 1538, 853, 854, 1049,
	506, 1515, 506, 1514, 73, 1408, 1552, 1350, 81, 81,
	1349, 981, 982, 514, 514, 1056, 1348, 985, 261, 1026,
	1027, 286, 705, 988, 706, 511, 1012, 1014, 912, 1347,
	705, 1476, 706, 1184, 538, 835, 834, 1017, 828, 823,
	1075, 67, 1024, 992, 1023, 1025, 1020, 52, 718, 566,
	922, 285, 1190, 1004, 1189, 81, 1000, 1865, 1195, 922,
	1021, 518, 999, 1283, 69, 1282, 262, 1058, 446, 1122,
	81, 81, 1057, 539, 1059, 1155, 441, 81, 1078, 1038,
	1906, 1417, 1759, 1047, 1096, 1048, 1198, 1050, 1053, 1051,
	1198, 1541, 1321, 70, 707, 1415, 1477, 711, 720, 712,
	1954, 65, 707, 81, 731, 1526, 81, 66, 905, 897,
	898, 899, 900, 902, 1223, 922, 838, 267, 985, 287,
	988, 758, 758, 1072, 1560, 2008, 270, 72, 1134, 711,
	982, 981, 1826, 1205, 1085, 2019, 1079, 1077, 1203, 1080,
	2030, 285, 1325, 1464, 1465, 1467, 737, 1191, 1543, 268,
	1084, 1125, 1126, 1154, 1193, 1329, 1333, 1068, 1318, 75,
	705, 1357, 706, 1315, 515, 515, 1413, 899, 900, 902,
	1418, 922, 287, 787, 1206, 893, 894, 1462, 1463, 1464,
	1465, 1467, 1533, 1100, 517, 922, 716, 1101, 715, 839,
	1087, 1072, 1325, 514, 514, 724, 1145, 1153, 896, 1099,
	1069, 1089, 455, 1901, 1557, 1359, 264, 263, 81, 81,
	81, 537, 1117, 978, 81, 1885, 1311, 81, 1844, 1090,
	895, 514, 1220, 81, 81, 81, 81, 81, 1088, 1135,
	1285, 81, 707, 758, 81, 81, 1008, 893, 894, 1070,
	1067, 81, 938, 1558, 442, 454, 81, 1213, 81, 1527,
	1447, 2025, 1592, 2018, 1217, 81, 1971, 1980, 1225, 1414,
	896, 1255, 997, 447, 1293, 81, 1416, 443, 1603, 1242,
	1242, 1253, 1207, 1264, 1210, 901, 444, 1230, 1972, 1276,
	1277, 1278, 895, 708, 457, 600, 81, 81, 456, 758,
	456, 708, 81, 1181, 1287, 1979, 2007, 1011, 2005, 1250,
	781, 781, 513, 1749, 536, 557, 1072, 1410, 1297, 1327,
	1072, 1197, 2031, 1119, 1310, 286, 549, 1827, 738, 527,
	525, 392, 81, 1831, 81, 583, 81, 911, 1288, 1802,
	81, 1585, 1830, 758, 81, 1981, 1388, 901, 2037, 829,
	824, 2017, 397, 81, 515, 515, 1339, 393, 1340, 1341,
	780, 780, 582, 81, 703, 1204, 1366, 1819, 1368, 1710,
	1895, 61, 537, 558, 1343, 1517, 1330, 1296, 1770, 1292,
	1066, 394, 515, 1370, 2023, 1338, 583, 453, 1120, 1369,
	871, 1982, 1342, 1372, 1392, 1010, 1179, 1182, 559, 911,
	396, 457, 912, 1713, 862, 1666, 1056, 1556, 1460, 1461,
	1712, 1392, 1702, 1395, 1353, 286, 1354, 1947, 1297, 1356,
	1355, 852, 781, 1178, 1390, 582, 1361, 1360, 1803, 812,
	1395, 708, 1393, 2024, 808, 1751, 1771, 1576, 2036, 1820,
	1302, 1590, 536, 1301, 1703, 1765, 1391, 1587, 1403, 1393,
	1586, 2026, 496, 495, 1381, 1438, 1380, 1709, 1058, 389,
	457, 1764, 1402, 1057, 912, 1059, 810, 1009, 454, 574,
	1566, 757, 780, 1735, 1320, 1817, 287, 811, 781, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 1667, 922,
	1582, 1384, 1234, 1888, 1668, 1801, 395, 1818, 1711, 1491,
	1394, 1411, 1409, 1611, 392, 1540, 1180, 1454, 1466, 1419,
	1322, 1081, 1028, 1233, 719, 1423, 555, 1394, 554, 457,
	553, 81, 781, 1426, 1424, 397, 552, 551, 780, 550,
	393, 691, 1698, 547, 1699, 494, 1492, 960, 844, 1435,
	398, 1442, 1443, 1975, 1404, 897, 898, 899, 900, 902,
	1944, 922, 1691, 1531, 394, 1529, 81, 81, 1763, 1516,
	1476, 1701, 1374, 1123, 1115, 1054, 287, 744, 1704, 742,
	739, 734, 780, 396, 1486, 717, 514, 713, 709, 1625,
	1376, 1838, 1547, 81, 585, 1499, 81, 622, 81, 2009,
	1522, 1494, 1495, 1496, 77, 81, 76, 543, 513, 832,
	1840, 1513, 467, 1016, 1572, 1544, 3, 81, 280, 23,
	1849, 81, 1903, 1939, 1530, 1520, 1532, 1000, 285, 79,
	81, 1129, 1569, 1015, 1595, 1477, 1536, 1537, 1542, 1019,
	383, 384, 385, 1700, 1018, 402, 1546, 1583, 414, 278,
	22, 1534, 1000, 1577, 61, 1549, 402, 1550, 1013, 1310,
	1548, 1596, 586, 463, 463, 1605, 589, 79, 758, 1925,
	79, 79, 482, 79, 485, 486, 1567, 1614, 81, 395,
	468, 1630, 1631, 1632, 1559, 1561, 1562, 544, 475, 1130,
	23, 279, 11, 388, 1579, 281, 10, 1747, 1578, 758,
	758, 431, 1584, 1593, 1594, 1589, 1588, 1118, 758, 758,
	273, 9, 1471, 1468, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 22, 1598, 398, 1114, 1624, 272, 7, 274, 4,
	1037, 1621, 887, 804, 750, 1063, 2034, 515, 2035, 1789,
	399, 758, 1460, 1461, 1640, 81, 81, 81, 1686, 1618,
	893, 894, 1643, 1645, 81, 81, 1563, 434, 435, 1554,
	81, 1638, 81, 11, 81, 81, 81, 10, 1506, 81,
	81, 513, 1093, 1092, 1145, 1641, 1673, 1346, 1284, 1281,
	1280, 1231, 9, 1145, 1646, 1674, 1094, 947, 1633, 1371,
	1095, 955, 440, 1825, 390, 843, 1687, 1690, 7, 548,
	4, 81, 81, 1970, 1794, 1446, 1862, 1884, 513, 1232,
	958, 1671, 38, 1739, 616, 1692, 1677, 81, 81, 1519,
	1748, 81, 1681, 1707, 1708, 1109, 81, 1108, 288, 1767,
	1729, 833, 81, 637, 816, 1742, 1743, 513, 825, 1741,
	1742, 1743, 1775, 1730, 1741, 1241, 1146, 781, 692, 639,
	755, 640, 756, 1752, 757, 757, 1725, 986, 628, 753,
	758, 1724, 79, 499, 79, 414, 414, 81, 1754, 1781,
	1745, 1385, 514, 1746, 1041, 457, 1202, 1388, 781, 781,
	1221, 1434, 951, 608, 620, 619, 1218, 781, 781, 879,
	519, 1768, 286, 1396, 1777, 51, 533, 780, 1753, 408,
	409, 1328, 1760, 1761, 1726, 511, 1766, 1758, 1124, 875,
	1528, 794, 445, 1457, 521, 1262, 1254, 1251, 568, 698,
	781, 939, 81, 1042, 81, 1392, 81, 81, 780, 780,
	1800, 545, 1334, 1062, 594, 81, 883, 780, 780, 466,
	465, 1104, 542, 809, 1395, 1086, 932, 929, 436, 1897,
	1116, 1319, 1295, 2029, 1902, 1390, 1525, 1951, 81, 68,
	26, 24, 758, 1393, 21, 690, 757, 19, 18, 17,
	780, 1812, 1813, 1815, 25, 15, 14, 1391, 13, 12,
	81, 37, 36, 513, 523, 35, 34, 81, 33, 32,
	6, 1853, 1850, 5, 2, 1, 81, 0, 0, 528,
	0, 0, 414, 414, 0, 81, 81, 0, 0, 0,
	1873, 1742, 1743, 0, 1877, 1741, 1866, 0, 0, 0,
	1861, 0, 757, 515, 638, 1841, 0, 1839, 1859, 0,
	1883, 1394, 1856, 1834, 1835, 514, 402, 1833, 79, 781,
	414, 572, 414, 287, 575, 0, 0, 0, 81, 0,
	0, 0, 758, 0, 0, 1876, 0, 0, 0, 463,
	0, 1890, 783, 0, 0, 0, 757, 81, 81, 1899,
	79, 81, 514, 1860, 1875, 81, 0, 0, 0, 0,
	81, 1869, 1894, 0, 1893, 0, 79, 1911, 0, 780,
	513, 0, 79, 79, 79, 0, 732, 0, 81, 1920,
	1919, 514, 0, 285, 81, 81, 1913, 1932, 81, 1915,
	724, 1935, 457, 1742, 1743, 79, 79, 1741, 1912, 1926,
	0, 1923, 0, 800, 1938, 800, 1930, 1914, 61, 81,
	0, 81, 81, 1927, 81, 0, 1931, 758, 0, 1936,
	0, 781, 0, 0, 0, 414, 1941, 800, 414, 414,
	414, 414, 414, 851, 0, 81, 1957, 1959, 414, 414,
	1960, 0, 0, 0, 402, 1961, 1955, 1929, 1962, 1958,
	0, 1965, 869, 1964, 1933, 1963, 1917, 0, 0, 0,
	1922, 1953, 0, 0, 0, 81, 515, 81, 1742, 1743,
	463, 780, 1741, 889, 1985, 0, 0, 1987, 0, 0,
	1949, 0, 0, 0, 0, 1991, 81, 1994, 0, 0,
	612, 0, 0, 2002, 0, 2006, 2004, 1989, 0, 0,
	0, 2010, 0, 515, 0, 81, 0, 1702, 2015, 1695,
	2016, 781, 0, 2014, 2013, 0, 0, 1693, 0, 0,
	0, 1697, 78, 2028, 2027, 2011, 0, 514, 0, 0,
	0, 0, 515, 893, 894, 0, 1988, 0, 2032, 1703,
	0, 0, 0, 1973, 0, 0, 2038, 0, 0, 0,
	0, 0, 0, 0, 1256, 0, 896, 0, 0, 1696,
	471, 780, 0, 478, 481, 0, 471, 0, 0, 0,
	1993, 1460, 1461, 0, 0, 79, 0, 0, 895, 0,
	0, 0, 0, 1005, 0, 0, 0, 79, 0, 0,
	0, 79, 1022, 0, 0, 79, 781, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	0, 1045, 1046, 0, 79, 0, 0, 79, 0, 414,
	414, 0, 414, 0, 0, 0, 0, 1698, 0, 1699,
	0, 0, 0, 901, 514, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 780, 286, 1460, 1461,
	0, 1478, 1479, 1480, 0, 0, 1701, 598, 598, 0,
	0, 757, 0, 1704, 0, 0, 700, 0, 0, 0,
	0, 1466, 0, 0, 0, 800, 889, 0, 515, 0,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	0, 0, 757, 757, 0, 0, 0, 0, 0, 1475,
	0, 757, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 783, 783, 0, 0, 0,
	0, 0, 1098, 1476, 0, 0, 0, 0, 1700, 0,
	0, 0, 0, 0, 757, 0, 0, 79, 1105, 0,
	0, 0, 0, 0, 889, 0, 617, 49, 1466, 0,
	912, 0, 0, 0, 0, 471, 0, 481, 1421, 1422,
	0, 0, 0, 0, 0, 0, 782, 0, 0, 0,
	79, 0, 0, 414, 876, 878, 0, 0, 0, 0,
	0, 885, 1256, 1256, 0, 515, 0, 49, 1477, 0,
	0, 0, 0, 933, 934, 935, 936, 937, 287, 0,
	1476, 0, 0, 945, 0, 0, 0, 0, 450, 0,
	0, 458, 0, 952, 0, 0, 0, 0, 49, 1483,
	1484, 1485, 0, 0, 0, 754, 0, 783, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	0, 0, 0, 1256, 1256, 1256, 0, 0, 0, 0,
	0, 0, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1477, 1468, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 0, 79, 1290, 1291, 0, 0,
	0, 1005, 0, 783, 1298, 0, 0, 0, 0, 0,
	1303, 1304, 1306, 1308, 1309, 0, 0, 0, 1314, 0,
	0, 1316, 79, 0, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 79, 0, 1332, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 783, 0, 0,
	0, 471, 79, 0, 0, 0, 0, 0, 1472, 1473,
	1474, 0, 1471, 1468, 1469, 1470, 1462, 1463, 1464, 1465,
	1467, 0, 0, 1098, 800, 757, 0, 0, 0, 1098,
	0, 0, 0, 696, 0, 0, 0, 0, 0, 0,
	0, 1609, 1610, 0, 0, 0, 0, 0, 0, 723,
	0, 0, 0, 0, 0, 471, 729, 729, 0, 869,
	0, 869, 0, 414, 0, 1256, 1256, 79, 0, 0,
	0, 1379, 0, 0, 0, 0, 0, 0, 478, 481,
	1382, 0, 0, 0, 0, 0, 0, 458, 0, 0,
	79, 0, 0, 0, 1647, 1648, 1649, 1650, 1651, 1652,
	1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662,
	1663, 1664, 1665, 0, 1669, 757, 0, 0, 1256, 1256,
	1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
	1256, 1256, 1256, 1256, 1256, 1256, 1256, 0, 1256, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 598, 0, 0, 0, 0, 0, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 0, 1183, 0, 1185, 1186, 1187, 1188, 0, 0,
	0, 0, 0, 1460, 1461, 0, 0, 0, 0, 0,
	757, 0, 0, 1211, 0, 0, 0, 0, 0, 782,
	782, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1238, 1239, 0, 0, 1252,
	0, 1263, 1265, 1270, 1273, 1274, 1275, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 700, 0, 993, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 754, 754,
	471, 0, 0, 0, 481, 0, 450, 0, 471, 893,
	894, 0, 0, 79, 79, 923, 924, 925, 0, 0,
	0, 0, 1043, 1466, 1326, 0, 0, 481, 0, 0,
	481, 0, 896, 0, 0, 927, 0, 0, 0, 0,
	1564, 0, 783, 1005, 0, 869, 0, 0, 0, 0,
	0, 782, 1574, 0, 895, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 79, 1822, 1352, 0, 79, 0,
	0, 0, 0, 783, 783, 1476, 0, 1602, 0, 0,
	0, 0, 783, 783, 0, 0, 0, 0, 0, 1256,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 782, 0, 901,
	754, 0, 0, 0, 0, 783, 0, 0, 0, 885,
	0, 0, 0, 0, 0, 1635, 0, 0, 920, 928,
	0, 450, 0, 0, 450, 450, 0, 0, 0, 0,
	1477, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	471, 782, 0, 0, 0, 918, 942, 0, 944, 0,
	0, 911, 0, 1887, 0, 948, 754, 0, 0, 0,
	1406, 1407, 0, 0, 0, 0, 1412, 0, 0, 0,
	0, 0, 0, 1139, 0, 0, 0, 1256, 0, 0,
	0, 0, 1688, 1689, 1005, 0, 0, 0, 0, 0,
	0, 889, 889, 0, 0, 0, 0, 1715, 1430, 1716,
	754, 79, 1718, 1719, 0, 1437, 1722, 79, 1441, 0,
	1470, 1462, 1463, 1464, 1465, 1467, 912, 1450, 0, 0,
	0, 0, 0, 0, 783, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 0, 1738, 0, 889, 1105,
	1940, 1738, 945, 0, 0, 0, 0, 0, 1270, 1270,
	1270, 0, 0, 0, 79, 79, 0, 0, 79, 0,
	0, 0, 0, 1602, 1256, 49, 0, 49, 0, 1773,
	0, 0, 0, 0, 0, 0, 0, 0, 1289, 0,
	0, 1521, 49, 893, 894, 0, 919, 49, 0, 0,
	0, 0, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 1795, 1317, 896, 598, 0, 0,
	0, 1323, 0, 0, 0, 598, 723, 0, 0, 700,
	0, 0, 0, 0, 0, 723, 783, 0, 895, 0,
	0, 0, 0, 0, 910, 471, 0, 1460, 1461, 0,
	1478, 1479, 1480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1779, 0, 0, 0, 0, 0, 1005,
	0, 1814, 0, 414, 1816, 0, 0, 0, 0, 0,
	0, 0, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 1607, 1475, 0,
	1608, 0, 0, 0, 0, 889, 0, 0, 0, 0,
	1373, 1613, 0, 0, 0, 0, 0, 0, 0, 0,
	1622, 0, 1738, 0, 0, 0, 783, 79, 1626, 0,
	0, 1352, 0, 1139, 1864, 0, 0, 0, 0, 1140,
	0, 0, 0, 79, 0, 911, 1642, 1466, 0, 0,
	1644, 0, 889, 1602, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 782, 0, 0, 0,
	0, 0, 0, 0, 0, 1200, 0, 0, 0, 0,
	0, 1481, 0, 1675, 1676, 0, 0, 0, 0, 0,
	0, 0, 1682, 1683, 1684, 869, 0, 782, 782, 1476,
	0, 0, 0, 0, 0, 0, 782, 782, 0, 0,
	912, 783, 0, 0, 1904, 1905, 0, 0, 1909, 0,
	0, 0, 1910, 0, 1738, 754, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 782,
	0, 0, 0, 1928, 0, 889, 0, 0, 0, 0,
	0, 1602, 889, 0, 0, 1602, 754, 754, 0, 0,
	0, 0, 0, 0, 1477, 754, 754, 1460, 1461, 0,
	1478, 1479, 1480, 0, 1757, 0, 1948, 0, 889, 79,
	0, 414, 458, 1778, 0, 0, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 754, 1738,
	0, 0, 1864, 1780, 0, 0, 0, 1783, 1784, 0,
	0, 0, 1786, 0, 0, 0, 0, 0, 1475, 1788,
	0, 1790, 0, 0, 0, 0, 1043, 1139, 0, 1796,
	0, 0, 79, 0, 889, 0, 0, 1472, 1473, 1474,
	0, 1471, 1468, 1469, 1470, 1462, 1463, 1464, 1465, 1467,
	0, 0, 0, 2003, 0, 0, 0, 0, 782, 0,
	0, 49, 1805, 0, 0, 49, 0, 1466, 0, 0,
	0, 0, 1602, 0, 0, 0, 0, 1139, 49, 0,
	0, 1139, 415, 0, 0, 0, 0, 0, 0, 1401,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	416, 1481, 0, 0, 1832, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 754, 0, 1476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1200,
	0, 0, 1851, 0, 0, 0, 418, 0, 0, 0,
	0, 423, 424, 0, 0, 429, 0, 0, 944, 0,
	0, 0, 0, 0, 0, 0, 1868, 417, 419, 0,
	782, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1879, 1880, 893, 894, 0, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 1477, 0, 0, 0, 916, 0,
	0, 0, 0, 0, 0, 896, 420, 0, 927, 0,
	1892, 0, 0, 0, 0, 0, 0, 944, 0, 0,
	421, 422, 0, 1896, 0, 0, 0, 895, 0, 754,
	0, 0, 0, 910, 1717, 0, 425, 0, 0, 0,
	1723, 0, 0, 0, 0, 700, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	782, 0, 0, 0, 0, 0, 0, 1472, 1473, 1474,
	0, 1471, 1468, 1469, 1470, 1462, 1463, 1464, 1465, 1467,
	0, 0, 901, 0, 0, 0, 0, 1139, 1139, 0,
	0, 1139, 0, 1140, 0, 0, 0, 0, 0, 0,
	0, 920, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 926, 0, 0, 754,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 0, 911, 0, 0, 0, 0, 0,
	0, 0, 0, 1140, 426, 782, 0, 1140, 427, 0,
	0, 0, 0, 428, 1986, 0, 0, 917, 0, 0,
	0, 49, 0, 0, 0, 0, 0, 430, 0, 0,
	0, 0, 0, 2001, 2001, 893, 894, 0, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 0, 0, 896, 912,
	2001, 927, 0, 0, 754, 1823, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2001, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 0, 0, 919,
	0, 0, 907, 908, 909, 901, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 0, 0, 0,
	0, 0, 0, 1502, 920, 928, 0, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 893, 894, 926,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 918, 0, 916, 0, 0, 0, 911, 0, 0,
	896, 0, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1140, 1140, 0, 0, 1140, 0, 0,
	917, 0, 895, 0, 0, 0, 0, 0, 910, 0,
	0, 0, 0, 458, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1950, 0, 921, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 0, 1043, 0, 0, 0, 911,
	0, 0, 919, 0, 0, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 0, 922,
	0, 0, 917, 0, 0, 0, 1501, 0, 1842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 0, 907, 908, 909,
	944, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 0, 0, 0, 0, 0, 1500, 0,
	284, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 83, 84, 303, 85,
	304, 305, 306, 307, 211, 308, 309, 310, 311, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 312,
	90, 218, 219, 91, 313, 314, 220, 221, 222, 315,
	223, 316, 289, 317, 92, 93, 94, 0, 95, 318,
	96, 97, 98, 319, 290, 99, 100, 320, 321, 322,
	323, 324, 325, 101, 102, 103, 104, 224, 105, 225,
	226, 326, 106, 327, 107, 328, 329, 330, 108, 109,
	331, 110, 332, 0, 333, 227, 111, 112, 228, 229,
	334, 335, 336, 113, 114, 230, 0, 115, 337, 116,
	338, 339, 291, 340, 117, 231, 341, 232, 342, 118,
	119, 120, 121, 233, 234, 293, 343, 124, 344, 122,
	345, 292, 123, 235, 236, 237, 238, 346, 239, 347,
	294, 125, 295, 126, 127, 348, 129, 128, 349, 240,
	296, 130, 297, 350, 131, 351, 352, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 353,
	141, 354, 241, 143, 242, 144, 145, 355, 146, 356,
	357, 358, 359, 147, 243, 299, 148, 300, 244, 149,
	150, 151, 152, 360, 245, 153, 246, 154, 361, 155,
	156, 157, 247, 158, 159, 362, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 363, 170, 301, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 364, 249,
	178, 179, 365, 180, 181, 302, 182, 250, 251, 183,
	366, 189, 184, 185, 186, 188, 252, 187, 253, 367,
	190, 368, 191, 192, 193, 369, 254, 255, 256, 370,
	371, 194, 257, 258, 372, 195, 196, 197, 198, 373,
	374, 199, 200, 201, 375, 202, 376, 203, 204, 205,
	259, 260, 377, 378, 206, 379, 380, 381, 382, 207,
	208, 209, 210, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 284, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1597,
	83, 84, 303, 85, 304, 305, 306, 307, 211, 308,
	309, 310, 311, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 312, 90, 218, 219, 91, 313, 314,
	220, 221, 222, 315, 223, 316, 289, 317, 92, 93,
	94, 0, 95, 318, 96, 97, 98, 319, 290, 99,
	100, 320, 321, 322, 323, 324, 325, 101, 102, 103,
	104, 224, 105, 225, 226, 326, 106, 327, 107, 328,
	329, 330, 108, 109, 331, 110, 332, 0, 333, 227,
	111, 112, 228, 229, 334, 335, 336, 113, 114, 230,
	0, 115, 337, 116, 338, 339, 291, 340, 117, 231,
	341, 232, 342, 118, 119, 120, 121, 233, 234, 293,
	343, 124, 344, 122, 345, 292, 123, 235, 236, 237,
	238, 346, 239, 347, 294, 125, 295, 126, 127, 348,
	129, 128, 349, 240, 296, 130, 297, 350, 131, 351,
	352, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 353, 141, 354, 241, 143, 242, 144,
	145, 355, 146, 356, 357, 358, 359, 147, 243, 299,
	148, 300, 244, 149, 150, 151, 152, 360, 245, 153,
	246, 154, 361, 155, 156, 157, 247, 158, 159, 362,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	363, 170, 301, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 364, 249, 178, 179, 365, 180, 181, 302,
	182, 250, 251, 183, 366, 189, 184, 185, 186, 188,
	252, 187, 253, 367, 190, 368, 191, 192, 193, 369,
	254, 255, 256, 370, 371, 194, 257, 258, 372, 195,
	196, 197, 198, 373, 374, 199, 200, 201, 375, 202,
	376, 203, 204, 205, 259, 260, 377, 378, 206, 379,
	380, 381, 382, 207, 208, 209, 210, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 83, 84, 303, 85, 304, 305, 306,
	307, 211, 308, 309, 310, 311, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 312, 90, 218, 219,
	91, 313, 314, 220, 221, 222, 315, 223, 316, 289,
	317, 92, 93, 94, 0, 95, 318, 96, 97, 98,
	319, 290, 99, 100, 320, 321, 322, 323, 324, 325,
	101, 102, 103, 104, 224, 105, 225, 226, 326, 106,
	327, 107, 328, 329, 330, 108, 109, 331, 110, 332,
	0, 333, 227, 111, 112, 228, 229, 334, 335, 336,
	113, 114, 230, 0, 115, 337, 116, 338, 339, 291,
	340, 117, 231, 341, 232, 342, 118, 119, 120, 121,
	233, 234, 293, 343, 124, 344, 122, 345, 292, 123,
	235, 236, 237, 238, 346, 239, 347, 294, 125, 295,
	126, 127, 348, 129, 128, 349, 240, 296, 130, 297,
	350, 131, 351, 352, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 353, 141, 354, 241,
	143, 242, 144, 145, 355, 146, 356, 357, 358, 359,
	147, 243, 299, 148, 300, 244, 149, 150, 151, 152,
	360, 245, 153, 246, 154, 361, 155, 156, 157, 247,
	158, 159, 362, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 363, 170, 301, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 364, 249, 178, 179, 365,
	180, 181, 302, 182, 250, 251, 183, 366, 189, 184,
	185, 186, 188, 252, 187, 253, 367, 190, 368, 191,
	192, 193, 369, 254, 255, 256, 370, 371, 194, 257,
	258, 372, 195, 196, 197, 198, 373, 374, 199, 200,
	201, 375, 202, 376, 203, 204, 205, 259, 260, 377,
	378, 206, 379, 380, 381, 382, 207, 208, 209, 210,
	635, 625, 626, 623, 624, 615, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 1227, 85,
	0, 0, 0, 0, 651, 618, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 621, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 1228, 0, 665, 109,
	0, 110, 0, 0, 0, 609, 111, 112, 652, 653,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 604,
	141, 632, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 610, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 630, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	259, 686, 1226, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 602, 1229, 0, 0, 0,
	603, 0, 0, 611, 1224, 0, 0, 0, 614, 635,
	625, 626, 623, 624, 615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 84, 0, 85, 0,
	0, 0, 0, 651, 618, 0, 0, 0, 86, 87,
	88, 212, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 621, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	701, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 609, 111, 112, 652, 653, 631,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 604, 141,
	632, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	610, 173, 0, 174, 175, 176, 177, 67, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	69, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 630, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 516,
	686, 0, 0, 206, 0, 0, 0, 65, 207, 208,
	209, 210, 605, 66, 635, 625, 626, 623, 624, 615,
	0, 0, 0, 601, 602, 0, 0, 0, 0, 603,
	83, 84, 611, 85, 0, 0, 0, 614, 651, 618,
	0, 0, 0, 86, 87, 88, 212, 666, 214, 667,
	89, 668, 669, 0, 90, 218, 219, 91, 621, 650,
	670, 671, 222, 0, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 672, 105, 673, 674, 0, 106, 0, 107, 0,
	0, 0, 665, 109, 0, 110, 0, 0, 0, 609,
	111, 112, 652, 653, 631, 0, 0, 113, 114, 675,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 676, 677, 678,
	679, 0, 642, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 604, 141, 632, 660, 143, 680, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 681, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 610, 173, 0, 174, 175,
	176, 177, 67, 249, 178, 179, 648, 180, 181, 302,
	182, 682, 251, 183, 0, 189, 184, 185, 186, 188,
	683, 187, 656, 0, 190, 69, 191, 192, 193, 0,
	254, 684, 685, 0, 0, 194, 657, 658, 630, 195,
	196, 197, 198, 0, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 516, 686, 0, 0, 206, 0,
	0, 0, 65, 207, 208, 209, 210, 605, 66, 635,
	625, 626, 623, 624, 615, 0, 0, 0, 601, 602,
	0, 0, 0, 0, 603, 83, 84, 611, 85, 0,
	0, 0, 614, 651, 618, 0, 0, 0, 86, 87,
	88, 212, 666, 214, 667, 89, 668, 669, 1266, 90,
	218, 219, 91, 621, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	0, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 609, 111, 112, 652, 653, 631,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	1271, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 1267, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 604, 141,
	632, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	610, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 1268,
	194, 657, 658, 630, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 605, 0, 635, 625, 626, 623, 624, 615,
	0, 0, 0, 601, 602, 0, 0, 0, 0, 603,
	83, 84, 611, 85, 0, 0, 0, 614, 651, 618,
	0, 0, 0, 86, 87, 88, 212, 666, 214, 667,
	89, 668, 669, 0, 90, 218, 219, 91, 621, 650,
	670, 671, 222, 0, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 672, 105, 673, 674, 0, 106, 0, 107, 0,
	0, 0, 665, 109, 0, 110, 0, 0, 0, 609,
	111, 112, 652, 653, 631, 0, 0, 113, 114, 675,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 676, 677, 678,
	679, 0, 642, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 604, 141, 632, 660, 143, 680, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 681, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 610, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 648, 180, 181, 302,
	182, 682, 251, 183, 0, 189, 184, 185, 186, 188,
	683, 187, 656, 0, 190, 0, 191, 192, 193, 0,
	254, 684, 685, 0, 0, 194, 657, 658, 630, 195,
	196, 197, 198, 0, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 259, 686, 0, 0, 206, 0,
	0, 0, 0, 207, 208, 209, 210, 605, 0, 0,
	0, 0, 635, 625, 626, 623, 624, 615, 601, 602,
	0, 0, 0, 0, 603, 950, 1219, 611, 83, 84,
	0, 85, 614, 0, 0, 0, 651, 618, 0, 0,
	0, 86, 87, 88, 212, 666, 214, 667, 89, 668,
	669, 0, 90, 218, 219, 91, 621, 650, 670, 671,
	222, 0, 662, 0, 643, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 290, 99, 100, 0,
	644, 646, 0, 645, 647, 101, 102, 103, 104, 672,
	105, 673, 674, 0, 106, 0, 107, 0, 0, 0,
	665, 109, 0, 110, 0, 0, 0, 609, 111, 112,
	652, 653, 631, 0, 0, 113, 114, 675, 0, 115,
	0, 116, 0, 0, 291, 0, 117, 663, 0, 232,
	0, 118, 119, 120, 121, 659, 661, 293, 0, 124,
	0, 122, 0, 292, 123, 676, 677, 678, 679, 0,
	642, 0, 294, 125, 295, 126, 127, 0, 129, 128,
	0, 664, 296, 130, 297, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 298, 138, 139, 142,
	140, 604, 141, 632, 660, 143, 680, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 299, 148, 300,
	654, 149, 150, 151, 152, 0, 655, 153, 246, 154,
	0, 155, 156, 157, 681, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	301, 171, 172, 610, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 648, 180, 181, 302, 182, 682,
	251, 183, 0, 189, 184, 185, 186, 188, 683, 187,
	656, 0, 190, 0, 191, 192, 193, 0, 254, 684,
	685, 0, 0, 194, 657, 658, 630, 195, 196, 197,
	198, 0, 0, 199, 200, 201, 649, 202, 0, 203,
	204, 205, 259, 686, 0, 0, 206, 0, 0, 0,
	0, 207, 208, 209, 210, 605, 0, 635, 625, 626,
	623, 624, 615, 0, 0, 0, 601, 602, 599, 0,
	0, 0, 603, 83, 84, 611, 85, 0, 0, 0,
	614, 651, 618, 0, 0, 0, 86, 87, 88, 212,
	666, 214, 667, 89, 668, 669, 0, 90, 218, 219,
	91, 621, 650, 670, 671, 222, 0, 662, 0, 643,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 644, 646, 0, 645, 647,
	101, 102, 103, 104, 672, 105, 673, 674, 0, 106,
	0, 107, 0, 0, 0, 665, 109, 0, 110, 0,
	0, 0, 609, 111, 112, 652, 653, 631, 0, 0,
	113, 114, 675, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 663, 0, 232, 0, 118, 119, 120, 121,
	659, 661, 293, 0, 124, 0, 122, 0, 292, 123,
	676, 677, 678, 679, 0, 642, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 664, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 604, 141, 632, 660,
	143, 680, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 299, 148, 300, 654, 149, 150, 151, 152,
	0, 655, 153, 246, 154, 0, 155, 156, 157, 681,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 610, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 648,
	180, 181, 302, 182, 682, 251, 183, 0, 189, 184,
	185, 186, 188, 683, 187, 656, 0, 190, 0, 191,
	192, 193, 0, 254, 684, 685, 0, 0, 194, 657,
	658, 630, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 649, 202, 0, 203, 204, 205, 259, 686, 0,
	0, 206, 0, 0, 0, 0, 207, 208, 209, 210,
	605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 601, 602, 0, 0, 0, 0, 603, 0, 0,
	611, 1672, 0, 0, 0, 614, 635, 625, 626, 623,
	624, 615, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 84, 0, 85, 0, 0, 0, 0,
	651, 618, 0, 0, 0, 86, 87, 88, 212, 666,
	214, 667, 89, 668, 669, 0, 90, 218, 219, 91,
	621, 650, 670, 671, 222, 0, 662, 0, 643, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	290, 99, 100, 0, 644, 646, 0, 645, 647, 101,
	102, 103, 104, 672, 105, 673, 674, 0, 106, 0,
	107, 0, 0, 0, 665, 109, 0, 110, 0, 0,
	0, 609, 111, 112, 652, 653, 631, 0, 0, 113,
	114, 675, 0, 115, 0, 116, 0, 0, 291, 0,
	117, 663, 0, 232, 0, 118, 119, 120, 121, 659,
	661, 293, 0, 124, 0, 122, 0, 292, 123, 676,
	677, 678, 679, 0, 642, 0, 294, 125, 295, 126,
	127, 0, 129, 128, 0, 664, 296, 130, 297, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	298, 138, 139, 142, 140, 604, 141, 632, 660, 143,
	680, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 299, 148, 300, 654, 149, 150, 151, 152, 0,
	655, 153, 246, 154, 0, 155, 156, 157, 681, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 301, 171, 172, 610, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 648, 180,
	181, 302, 182, 682, 251, 183, 0, 189, 184, 185,
	186, 188, 683, 187, 656, 0, 190, 0, 191, 192,
	193, 0, 254, 684, 685, 0, 0, 194, 657, 658,
	630, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	649, 202, 0, 203, 204, 205, 259, 686, 1629, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 605,
	0, 635, 625, 626, 623, 624, 615, 0, 0, 0,
	601, 602, 0, 0, 0, 0, 603, 83, 84, 611,
	85, 0, 0, 0, 614, 651, 618, 0, 0, 0,
	86, 87, 88, 212, 666, 214, 667, 89, 668, 669,
	0, 90, 218, 219, 91, 621, 650, 670, 671, 222,
	0, 662, 0, 643, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 644,
	646, 0, 645, 647, 101, 102, 103, 104, 672, 105,
	673, 674, 0, 106, 0, 107, 0, 0, 0, 665,
	109, 0, 110, 0, 0, 0, 609, 111, 112, 652,
	653, 631, 0, 0, 113, 114, 675, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 663, 0, 232, 0,
	118, 119, 120, 121, 659, 661, 293, 0, 124, 0,
	122, 0, 292, 123, 676, 677, 678, 679, 0, 642,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	664, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	604, 141, 632, 660, 143, 680, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 299, 148, 300, 654,
	149, 150, 151, 152, 0, 655, 153, 246, 154, 0,
	155, 156, 157, 681, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 610, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 648, 180, 181, 302, 182, 682, 251,
	183, 0, 189, 184, 185, 186, 188, 683, 187, 656,
	0, 190, 0, 191, 192, 193, 0, 254, 684, 685,
	0, 0, 194, 657, 658, 630, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 649, 202, 0, 203, 204,
	205, 259, 686, 0, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 601, 602, 0, 0, 0,
	0, 603, 0, 0, 611, 1619, 0, 0, 0, 614,
	635, 625, 626, 623, 624, 615, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 0, 85,
	0, 0, 0, 0, 651, 618, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 621, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 701, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 609, 111, 112, 652, 653,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 604,
	141, 632, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 610, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 630, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	259, 686, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 605, 0, 635, 625, 626, 623, 624,
	615, 0, 0, 0, 601, 602, 0, 0, 0, 0,
	603, 83, 84, 611, 85, 0, 0, 0, 614, 651,
	618, 0, 0, 0, 86, 87, 88, 212, 666, 214,
	667, 89, 668, 669, 0, 90, 218, 219, 91, 621,
	650, 670, 671, 222, 0, 662, 0, 643, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 290,
	99, 100, 0, 644, 646, 0, 645, 647, 101, 102,
	103, 104, 672, 105, 673, 674, 0, 106, 0, 107,
	0, 0, 0, 665, 109, 0, 110, 0, 0, 0,
	609, 111, 112, 652, 653, 631, 0, 0, 113, 114,
	675, 0, 115, 0, 116, 0, 1271, 291, 0, 117,
	663, 0, 232, 0, 118, 119, 120, 121, 659, 661,
	293, 0, 124, 0, 122, 0, 292, 123, 676, 677,
	678, 679, 0, 642, 0, 294, 125, 295, 126, 127,
	0, 129, 128, 0, 664, 296, 130, 297, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 298,
	138, 139, 142, 140, 604, 141, 632, 660, 143, 680,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	299, 148, 300, 654, 149, 150, 151, 152, 0, 655,
	153, 246, 154, 0, 155, 156, 157, 681, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 301, 171, 172, 610, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 648, 180, 181,
	302, 182, 682, 251, 183, 0, 189, 184, 185, 186,
	188, 683, 187, 656, 0, 190, 0, 191, 192, 193,
	0, 254, 684, 685, 0, 0, 194, 657, 658, 630,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 649,
	202, 0, 203, 204, 205, 259, 686, 0, 0, 206,
	0, 0, 0, 0, 207, 208, 209, 210, 605, 0,
	635, 625, 626, 623, 624, 615, 0, 0, 0, 601,
	602, 0, 0, 0, 0, 603, 83, 84, 611, 85,
	0, 0, 0, 614, 651, 618, 0, 0, 0, 86,
	87, 88, 212, 666, 214, 667, 89, 668, 669, 0,
	90, 218, 219, 91, 621, 650, 670, 671, 222, 0,
	662, 0, 643, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 290, 99, 100, 0, 644, 646,
	0, 645, 647, 101, 102, 103, 104, 672, 105, 673,
	674, 0, 106, 0, 107, 0, 0, 0, 665, 109,
	0, 110, 0, 0, 0, 609, 111, 112, 652, 653,
	631, 0, 0, 113, 114, 675, 0, 115, 0, 116,
	0, 0, 291, 0, 117, 663, 0, 232, 0, 118,
	119, 120, 121, 659, 661, 293, 0, 124, 0, 122,
	0, 292, 123, 676, 677, 678, 679, 0, 642, 0,
	294, 125, 295, 126, 127, 0, 129, 128, 0, 664,
	296, 130, 297, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 298, 138, 139, 142, 140, 604,
	141, 632, 660, 143, 680, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 299, 148, 300, 654, 149,
	150, 151, 152, 0, 655, 153, 246, 154, 0, 155,
	156, 157, 681, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 301, 171,
	172, 610, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 648, 180, 181, 302, 182, 682, 251, 183,
	0, 189, 184, 185, 186, 188, 683, 187, 656, 0,
	190, 0, 191, 192, 193, 0, 254, 684, 685, 0,
	0, 194, 657, 658, 630, 195, 196, 197, 198, 0,
	0, 199, 200, 201, 649, 202, 0, 203, 204, 205,
	259, 686, 0, 0, 206, 0, 0, 0, 0, 207,
	208, 209, 210, 605, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 601, 602, 0, 0, 0, 0,
	603, 0, 0, 611, 1214, 0, 0, 0, 614, 635,
	625, 626, 623, 624, 615, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 84, 877, 85, 0,
	0, 0, 0, 651, 618, 0, 0, 0, 86, 87,
	88, 212, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 621, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	0, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 609, 111, 112, 652, 653, 631,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 604, 141,
	632, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	610, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 630, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 605, 0, 635, 625, 626, 623, 624, 615,
	0, 0, 0, 601, 602, 0, 0, 0, 0, 603,
	83, 84, 611, 85, 0, 0, 0, 614, 651, 618,
	0, 0, 0, 86, 87, 88, 212, 666, 214, 667,
	89, 668, 669, 0, 90, 218, 219, 91, 621, 650,
	670, 671, 222, 0, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	2000, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 672, 105, 673, 674, 0, 106, 0, 107, 0,
	0, 0, 665, 109, 0, 110, 0, 0, 0, 609,
	111, 112, 652, 653, 631, 0, 0, 113, 114, 675,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 676, 677, 678,
	679, 0, 642, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 604, 141, 632, 660, 143, 680, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 681, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 610, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 648, 180, 181, 302,
	182, 682, 251, 183, 0, 189, 184, 185, 186, 188,
	683, 187, 656, 0, 190, 0, 191, 192, 193, 0,
	254, 684, 685, 0, 0, 194, 657, 658, 630, 195,
	196, 1999, 198, 0, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 259, 686, 0, 0, 206, 0,
	0, 0, 0, 207, 208, 209, 210, 605, 0, 635,
	625, 626, 623, 624, 615, 0, 0, 0, 601, 602,
	0, 0, 0, 0, 603, 83, 84, 611, 85, 0,
	0, 0, 614, 651, 618, 0, 0, 0, 86, 87,
	88, 1998, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 621, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 2000, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	0, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 609, 111, 112, 652, 653, 631,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 604, 141,
	632, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	610, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 630, 195, 196, 1999, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 605, 0, 635, 625, 626, 623, 624, 615,
	0, 0, 0, 601, 602, 0, 0, 0, 0, 603,
	83, 84, 611, 85, 0, 0, 0, 614, 651, 618,
	0, 0, 0, 86, 87, 88, 212, 666, 214, 667,
	89, 668, 669, 0, 90, 218, 219, 91, 621, 650,
	670, 671, 222, 0, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 672, 105, 673, 674, 0, 106, 0, 107, 0,
	0, 0, 665, 109, 0, 110, 0, 0, 0, 609,
	111, 112, 652, 653, 631, 0, 0, 113, 114, 675,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 676, 677, 678,
	679, 0, 642, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 604, 141, 632, 660, 143, 680, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 681, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 610, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 648, 180, 181, 302,
	182, 682, 251, 183, 0, 189, 184, 185, 186, 188,
	683, 187, 656, 0, 190, 0, 191, 192, 193, 0,
	254, 684, 685, 0, 0, 194, 657, 658, 630, 195,
	196, 197, 198, 0, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 259, 686, 0, 0, 206, 0,
	0, 0, 0, 207, 208, 209, 210, 605, 0, 1243,
	625, 626, 623, 624, 615, 0, 0, 0, 601, 602,
	0, 0, 0, 0, 603, 83, 84, 611, 85, 0,
	0, 0, 614, 651, 618, 0, 0, 0, 86, 87,
	88, 212, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 621, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 1246, 673, 674,
	0, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 609, 111, 112, 652, 653, 631,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	1247, 121, 659, 661, 293, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 1248,
	1245, 136, 137, 298, 138, 139, 142, 140, 604, 141,
	632, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	610, 173, 0, 174, 175, 176, 1249, 0, 249, 178,
	179, 648, 180, 181, 302, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 630, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	1244, 210, 605, 0, 635, 625, 626, 623, 624, 615,
	0, 0, 0, 601, 602, 0, 0, 0, 0, 603,
	83, 84, 611, 85, 0, 0, 0, 614, 651, 618,
	0, 0, 0, 86, 87, 88, 212, 666, 214, 667,
	89, 668, 669, 0, 90, 218, 219, 91, 621, 650,
	670, 671, 222, 0, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 672, 105, 673, 674, 0, 106, 0, 107, 0,
	0, 0, 665, 109, 0, 110, 0, 0, 0, 609,
	111, 112, 652, 653, 631, 0, 0, 113, 114, 675,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 676, 677, 678,
	679, 0, 642, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 0, 141, 632, 660, 143, 680, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 681, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 1261, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 648, 180, 181, 302,
	182, 682, 251, 183, 0, 189, 184, 185, 186, 188,
	683, 187, 656, 0, 190, 0, 191, 192, 193, 0,
	254, 684, 685, 0, 0, 194, 657, 658, 630, 195,
	196, 197, 198, 0, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 259, 686, 0, 0, 206, 0,
	0, 0, 0, 207, 208, 209, 210, 0, 0, 635,
	625, 626, 623, 624, 615, 0, 0, 0, 1257, 1258,
	0, 0, 0, 0, 1259, 83, 84, 1260, 85, 0,
	0, 0, 614, 651, 618, 0, 0, 0, 86, 87,
	88, 0, 666, 214, 667, 89, 668, 669, 0, 90,
	218, 219, 91, 621, 650, 670, 671, 222, 0, 662,
	0, 643, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 2000, 0, 644, 646, 0,
	645, 647, 101, 102, 103, 104, 672, 105, 673, 674,
	0, 106, 0, 107, 0, 0, 0, 665, 109, 0,
	110, 0, 0, 0, 609, 111, 112, 652, 653, 631,
	0, 0, 113, 114, 675, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 663, 0, 232, 0, 118, 119,
	120, 121, 659, 661, 0, 0, 124, 0, 122, 0,
	292, 123, 676, 677, 678, 679, 0, 642, 0, 0,
	125, 295, 126, 127, 0, 129, 128, 0, 664, 296,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 604, 141,
	632, 660, 143, 680, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 299, 148, 300, 654, 149, 150,
	151, 152, 0, 655, 153, 246, 154, 0, 155, 156,
	157, 681, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	610, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 648, 180, 181, 0, 182, 682, 251, 183, 0,
	189, 184, 185, 186, 188, 683, 187, 656, 0, 190,
	0, 191, 192, 193, 0, 254, 684, 685, 0, 0,
	194, 657, 658, 630, 195, 196, 1999, 198, 0, 0,
	199, 200, 201, 649, 202, 0, 203, 204, 205, 259,
	686, 0, 0, 206, 0, 0, 0, 0, 207, 208,
	209, 210, 0, 0, 635, 625, 626, 623, 624, 615,
	0, 0, 0, 601, 602, 0, 0, 0, 0, 603,
	83, 84, 611, 85, 0, 0, 0, 614, 651, 618,
	0, 0, 0, 86, 87, 88, 212, 666, 214, 667,
	89, 668, 669, 0, 90, 218, 219, 91, 0, 650,
	670, 671, 222, 0, 662, 0, 643, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 644, 646, 0, 645, 647, 101, 102, 103,
	104, 672, 105, 673, 674, 0, 106, 0, 107, 0,
	0, 0, 665, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 652, 653, 631, 0, 0, 113, 114, 675,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 663,
	0, 232, 0, 118, 119, 120, 121, 659, 661, 293,
	0, 124, 0, 122, 0, 292, 123, 676, 677, 678,
	679, 0, 642, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 664, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 0, 141, 632, 660, 143, 680, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 654, 149, 150, 151, 152, 0, 655, 153,
	246, 154, 0, 155, 156, 157, 681, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 1261, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 648, 180, 181, 302,
	182, 682, 251, 183, 0, 189, 184, 185, 186, 188,
	683, 187, 656, 0, 190, 0, 191, 192, 193, 0,
	254, 684, 685, 0, 0, 194, 657, 658, 630, 195,
	196, 197, 198, 635, 0, 199, 200, 201, 649, 202,
	0, 203, 204, 205, 259, 686, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 651, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 1260, 650, 220,
	221, 222, 614, 662, 0, 643, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 290, 99, 100,
	0, 644, 646, 0, 645, 647, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 652, 653, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 291, 0, 117, 663, 0,
	232, 0, 118, 119, 120, 121, 659, 661, 293, 0,
	124, 0, 122, 0, 292, 123, 235, 236, 237, 238,
	0, 239, 0, 294, 125, 295, 126, 127, 0, 129,
	128, 0, 664, 296, 130, 297, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 298, 138, 139,
	142, 140, 0, 141, 0, 660, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 299, 148,
	300, 654, 149, 150, 151, 152, 0, 655, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 301, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 648, 180, 181, 302, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 656, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 657, 658, 0, 195, 196,
	197, 198, 512, 0, 199, 200, 201, 649, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 1740, 0, 220, 221,
	222, 0, 223, 0, 289, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 290, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 291, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 293, 0, 124,
	0, 122, 0, 292, 123, 235, 236, 237, 238, 0,
	239, 0, 294, 125, 295, 126, 127, 0, 129, 128,
	0, 240, 296, 130, 297, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 298, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 299, 148, 300,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	301, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	67, 249, 178, 179, 0, 180, 181, 302, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 69, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 0, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 516, 260, 0, 0, 206, 0, 0, 0,
	65, 207, 208, 209, 210, 0, 66, 512, 827, 0,
	828, 823, 818, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 84, 64, 85, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 289,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 290, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 831, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 820, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 291,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 293, 0, 124, 0, 122, 0, 292, 123,
	235, 236, 237, 238, 0, 239, 0, 294, 125, 295,
	126, 127, 0, 129, 128, 0, 240, 296, 130, 297,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 298, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 821, 0, 0, 0,
	147, 243, 299, 148, 300, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 301, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 302, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 819, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 512,
	827, 206, 828, 823, 818, 0, 207, 208, 209, 210,
	0, 0, 0, 0, 0, 83, 84, 0, 85, 0,
	0, 829, 824, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 289, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 290, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	814, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 820,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 291, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 293, 0, 124, 0, 122, 0,
	292, 123, 235, 236, 237, 238, 0, 239, 0, 294,
	125, 295, 126, 127, 0, 129, 128, 0, 240, 296,
	130, 297, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 298, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 821, 0,
	0, 0, 147, 243, 299, 148, 300, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 301, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 302, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 819, 195, 196, 197, 198, 0, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 512, 827, 206, 828, 823, 818, 0, 207, 208,
	209, 210, 0, 0, 0, 0, 0, 83, 84, 0,
	85, 0, 0, 829, 824, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 289, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 290, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 820, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 291, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 293, 0, 124, 0,
	122, 0, 292, 123, 235, 236, 237, 238, 0, 239,
	0, 294, 125, 295, 126, 127, 0, 129, 128, 0,
	240, 296, 130, 297, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 298, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	821, 0, 0, 0, 147, 243, 299, 148, 300, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 301,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 302, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 819, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 80, 0, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 0, 0, 83,
	84, 0, 85, 0, 0, 829, 824, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 472, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 67, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 69, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 516, 260, 0, 0, 206, 80, 0,
	0, 65, 207, 208, 209, 210, 0, 66, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 0, 211, 0, 1143, 0, 1142, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 67, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 69,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 0, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 516, 260,
	0, 0, 206, 80, 0, 0, 65, 207, 208, 209,
	210, 0, 66, 0, 0, 0, 0, 0, 0, 83,
	84, 0, 85, 0, 0, 0, 0, 211, 0, 0,
	0, 64, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 472, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 0, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 80, 0,
	0, 0, 207, 208, 209, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 85, 0, 0,
	0, 0, 211, 0, 1143, 0, 1142, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 721, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	1044, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 233,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 1636,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 0, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	0, 0, 0, 0, 207, 208, 209, 210, 635, 625,
	626, 623, 624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 84, 0, 85, 697, 0,
	0, 0, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 666, 214, 667, 89, 668, 669, 0, 90, 218,
	219, 91, 0, 0, 670, 671, 222, 0, 223, 0,
	289, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 290, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 672, 105, 673, 674, 0,
	106, 0, 107, 0, 0, 0, 665, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 631, 0,
	0, 113, 114, 675, 0, 115, 0, 116, 0, 0,
	291, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 293, 0, 124, 0, 122, 0, 292,
	123, 676, 677, 678, 679, 0, 642, 0, 294, 125,
	295, 126, 127, 0, 129, 128, 0, 240, 296, 130,
	297, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 298, 138, 139, 142, 140, 0, 141, 632,
	241, 143, 680, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 299, 148, 300, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	681, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 301, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 302, 182, 682, 251, 183, 0, 189,
	184, 185, 186, 188, 683, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 684, 685, 0, 0, 194,
	257, 258, 630, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 686,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 798, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 797, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 0, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 512, 827, 0, 0, 207, 208, 209, 210,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 84,
	0, 85, 0, 801, 0, 0, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 289, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 290, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 291, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 233, 234, 293, 0, 124,
	0, 122, 0, 292, 123, 235, 236, 237, 238, 0,
	239, 0, 294, 125, 295, 126, 127, 0, 129, 128,
	0, 240, 296, 130, 297, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 298, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 299, 148, 300,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	301, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 302, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	0, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 512, 206, 0, 0, 0, 0,
	207, 208, 209, 210, 0, 0, 0, 0, 0, 0,
	83, 84, 0, 85, 0, 0, 0, 801, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 289, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 290, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 291, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 293,
	0, 124, 0, 122, 0, 292, 123, 235, 236, 237,
	238, 0, 239, 0, 294, 125, 295, 126, 127, 0,
	129, 128, 0, 240, 296, 130, 297, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 298, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 299,
	148, 300, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 301, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 302,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 1008, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 1006, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 1113, 0, 113, 114, 230, 0,
	115, 0, 116, 1011, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 233, 234, 0, 0,
	124, 1111, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 1010, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 1112, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 1008, 223, 0, 0, 1003, 92, 93, 94, 0,
	95, 1006, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 1011, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 1002, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	1010, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 1009, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 1601, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 233, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 233, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	472, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 748, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 472,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 524, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	484, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 472, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 477,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 472, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 387, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 222, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 137, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 386, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 254, 255, 256, 0, 0, 194, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 137, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	254, 255, 256, 0, 0, 194, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 1307, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 1305, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 1294, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 868, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 233, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 401, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 733, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 158, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 0, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	576, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 131, 0, 0, 132, 0, 133, 134, 135, 136,
	137, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 248, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 179, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 254, 255, 256, 0, 0, 194, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 571,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 151, 152, 0,
	245, 153, 246, 154, 0, 155, 156, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 173, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 80, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 83, 84, 0, 85, 207, 208, 209, 210, 211,
	0, 0, 0, 0, 86, 87, 88, 212, 213, 214,
	215, 89, 216, 217, 0, 90, 218, 219, 91, 0,
	0, 220, 221, 530, 0, 223, 0, 0, 0, 92,
	93, 94, 0, 95, 0, 96, 97, 98, 0, 0,
	99, 100, 0, 0, 0, 0, 0, 0, 101, 102,
	103, 104, 224, 105, 225, 226, 0, 106, 0, 107,
	0, 0, 0, 108, 109, 0, 110, 0, 0, 0,
	227, 111, 112, 228, 229, 0, 0, 0, 113, 114,
	230, 0, 115, 0, 116, 0, 0, 0, 0, 117,
	231, 0, 232, 0, 118, 119, 120, 121, 233, 234,
	0, 0, 124, 0, 122, 0, 0, 123, 235, 236,
	237, 238, 0, 239, 0, 0, 125, 0, 126, 127,
	0, 129, 128, 0, 240, 0, 130, 0, 0, 131,
	0, 0, 132, 0, 133, 134, 135, 136, 412, 0,
	138, 139, 142, 140, 0, 141, 0, 241, 143, 242,
	144, 145, 0, 146, 0, 0, 0, 0, 147, 243,
	0, 148, 0, 244, 149, 150, 151, 152, 0, 245,
	153, 246, 154, 0, 155, 156, 157, 247, 158, 159,
	0, 160, 161, 162, 163, 164, 166, 167, 165, 168,
	169, 0, 170, 0, 171, 172, 248, 173, 0, 174,
	175, 176, 177, 0, 249, 178, 179, 0, 180, 181,
	0, 182, 250, 251, 183, 0, 189, 184, 185, 186,
	188, 252, 187, 253, 0, 190, 0, 191, 192, 193,
	0, 411, 255, 256, 0, 0, 407, 257, 258, 0,
	195, 196, 197, 198, 80, 0, 199, 200, 201, 0,
	202, 0, 203, 204, 205, 259, 260, 0, 0, 206,
	83, 84, 0, 85, 207, 208, 209, 210, 211, 0,
	0, 0, 0, 86, 87, 88, 212, 213, 214, 215,
	89, 216, 217, 0, 90, 218, 219, 91, 0, 0,
	220, 221, 222, 0, 223, 0, 0, 0, 92, 93,
	94, 0, 95, 0, 96, 97, 98, 0, 0, 99,
	100, 0, 0, 0, 0, 0, 0, 101, 102, 103,
	104, 224, 105, 225, 226, 0, 106, 0, 107, 0,
	0, 0, 108, 109, 0, 110, 0, 0, 0, 227,
	111, 112, 228, 229, 0, 0, 0, 113, 114, 230,
	0, 115, 0, 116, 0, 0, 0, 0, 117, 231,
	0, 232, 0, 118, 119, 120, 121, 233, 234, 0,
	0, 124, 0, 122, 0, 0, 123, 235, 236, 237,
	238, 0, 239, 0, 0, 125, 0, 126, 127, 0,
	129, 128, 0, 240, 0, 130, 0, 0, 131, 0,
	0, 132, 0, 133, 134, 135, 136, 412, 0, 138,
	139, 142, 140, 0, 141, 0, 241, 143, 242, 144,
	145, 0, 146, 0, 0, 0, 0, 147, 243, 0,
	148, 0, 244, 149, 150, 151, 152, 0, 245, 153,
	246, 154, 0, 155, 156, 157, 247, 158, 159, 0,
	160, 161, 162, 163, 164, 166, 167, 165, 168, 169,
	0, 170, 0, 171, 172, 248, 173, 0, 174, 175,
	176, 177, 0, 249, 178, 179, 0, 180, 181, 0,
	182, 250, 251, 183, 0, 189, 184, 185, 186, 188,
	252, 187, 253, 0, 190, 0, 191, 192, 193, 0,
	411, 255, 256, 0, 0, 407, 257, 258, 0, 195,
	196, 197, 198, 80, 0, 199, 200, 201, 0, 202,
	0, 203, 204, 205, 259, 260, 0, 0, 206, 83,
	84, 0, 85, 207, 208, 209, 210, 211, 0, 0,
	0, 0, 86, 87, 88, 212, 213, 214, 215, 89,
	216, 217, 0, 90, 218, 219, 91, 0, 0, 220,
	221, 222, 0, 223, 0, 0, 0, 92, 93, 94,
	0, 95, 0, 96, 97, 98, 0, 0, 99, 100,
	0, 0, 0, 0, 0, 0, 101, 102, 103, 104,
	224, 105, 225, 226, 0, 106, 0, 107, 0, 0,
	0, 108, 109, 0, 110, 0, 0, 0, 227, 111,
	112, 228, 229, 0, 0, 0, 113, 114, 230, 0,
	115, 0, 116, 0, 0, 0, 0, 117, 231, 0,
	232, 0, 118, 119, 120, 121, 508, 234, 0, 0,
	124, 0, 122, 0, 0, 123, 235, 236, 237, 238,
	0, 239, 0, 0, 125, 0, 126, 127, 0, 129,
	128, 0, 240, 0, 130, 0, 0, 131, 0, 0,
	132, 0, 133, 134, 135, 136, 137, 0, 138, 139,
	142, 140, 0, 141, 0, 241, 143, 242, 144, 145,
	0, 146, 0, 0, 0, 0, 147, 243, 0, 148,
	0, 244, 149, 150, 151, 152, 0, 245, 153, 246,
	154, 0, 155, 156, 157, 247, 158, 159, 0, 160,
	161, 162, 163, 164, 166, 167, 165, 168, 169, 0,
	170, 0, 171, 172, 248, 173, 0, 174, 175, 176,
	177, 0, 249, 178, 179, 0, 180, 181, 0, 182,
	250, 251, 183, 0, 189, 184, 185, 186, 188, 252,
	187, 253, 0, 190, 0, 191, 192, 193, 0, 254,
	255, 256, 0, 0, 194, 257, 258, 0, 195, 196,
	197, 198, 80, 0, 199, 200, 201, 0, 202, 0,
	203, 204, 205, 259, 260, 0, 0, 206, 83, 84,
	0, 85, 207, 208, 209, 210, 211, 0, 0, 0,
	0, 86, 87, 88, 212, 213, 214, 215, 89, 216,
	217, 0, 90, 218, 219, 91, 0, 0, 220, 221,
	222, 0, 223, 0, 0, 0, 92, 93, 94, 0,
	95, 0, 96, 97, 98, 0, 0, 99, 100, 0,
	0, 0, 0, 0, 0, 101, 102, 103, 104, 224,
	105, 225, 226, 0, 106, 0, 107, 0, 0, 0,
	108, 109, 0, 110, 0, 0, 0, 227, 111, 112,
	228, 229, 0, 0, 0, 113, 114, 230, 0, 115,
	0, 116, 0, 0, 0, 0, 117, 231, 0, 232,
	0, 118, 119, 120, 121, 505, 234, 0, 0, 124,
	0, 122, 0, 0, 123, 235, 236, 237, 238, 0,
	239, 0, 0, 125, 0, 126, 127, 0, 129, 128,
	0, 240, 0, 130, 0, 0, 131, 0, 0, 132,
	0, 133, 134, 135, 136, 137, 0, 138, 139, 142,
	140, 0, 141, 0, 241, 143, 242, 144, 145, 0,
	146, 0, 0, 0, 0, 147, 243, 0, 148, 0,
	244, 149, 150, 151, 152, 0, 245, 153, 246, 154,
	0, 155, 156, 157, 247, 158, 159, 0, 160, 161,
	162, 163, 164, 166, 167, 165, 168, 169, 0, 170,
	0, 171, 172, 248, 173, 0, 174, 175, 176, 177,
	0, 249, 178, 179, 0, 180, 181, 0, 182, 250,
	251, 183, 0, 189, 184, 185, 186, 188, 252, 187,
	253, 0, 190, 0, 191, 192, 193, 0, 254, 255,
	256, 0, 0, 194, 257, 258, 0, 195, 196, 197,
	198, 80, 0, 199, 200, 201, 0, 202, 0, 203,
	204, 205, 259, 260, 0, 0, 206, 83, 84, 0,
	85, 207, 208, 209, 210, 211, 0, 0, 0, 0,
	86, 87, 88, 212, 213, 214, 215, 89, 216, 217,
	0, 90, 218, 219, 91, 0, 0, 220, 221, 222,
	0, 223, 0, 0, 0, 92, 93, 94, 0, 95,
	0, 96, 97, 98, 0, 0, 99, 100, 0, 0,
	0, 0, 0, 0, 101, 102, 103, 104, 224, 105,
	225, 226, 0, 106, 0, 107, 0, 0, 0, 108,
	109, 0, 110, 0, 0, 0, 227, 111, 112, 228,
	229, 0, 0, 0, 113, 114, 230, 0, 115, 0,
	116, 0, 0, 0, 0, 117, 231, 0, 232, 0,
	118, 119, 120, 121, 502, 234, 0, 0, 124, 0,
	122, 0, 0, 123, 235, 236, 237, 238, 0, 239,
	0, 0, 125, 0, 126, 127, 0, 129, 128, 0,
	240, 0, 130, 0, 0, 131, 0, 0, 132, 0,
	133, 134, 135, 136, 137, 0, 138, 139, 142, 140,
	0, 141, 0, 241, 143, 242, 144, 145, 0, 146,
	0, 0, 0, 0, 147, 243, 0, 148, 0, 244,
	149, 150, 151, 152, 0, 245, 153, 246, 154, 0,
	155, 156, 157, 247, 158, 159, 0, 160, 161, 162,
	163, 164, 166, 167, 165, 168, 169, 0, 170, 0,
	171, 172, 248, 173, 0, 174, 175, 176, 177, 0,
	249, 178, 179, 0, 180, 181, 0, 182, 250, 251,
	183, 0, 189, 184, 185, 186, 188, 252, 187, 253,
	0, 190, 0, 191, 192, 193, 0, 254, 255, 256,
	0, 0, 194, 257, 258, 0, 195, 196, 197, 198,
	80, 0, 199, 200, 201, 0, 202, 0, 203, 204,
	205, 259, 260, 0, 0, 206, 83, 84, 0, 85,
	207, 208, 209, 210, 211, 0, 0, 0, 0, 86,
	87, 88, 212, 213, 214, 215, 89, 216, 217, 0,
	90, 218, 219, 91, 0, 0, 220, 221, 222, 0,
	223, 0, 0, 0, 92, 93, 94, 0, 95, 0,
	96, 97, 98, 0, 0, 99, 100, 0, 0, 0,
	0, 0, 0, 101, 102, 103, 104, 224, 105, 225,
	226, 0, 106, 0, 107, 0, 0, 0, 108, 109,
	0, 110, 0, 0, 0, 227, 111, 112, 228, 229,
	0, 0, 0, 113, 114, 230, 0, 115, 0, 116,
	0, 0, 0, 0, 117, 231, 0, 232, 0, 118,
	119, 120, 121, 500, 234, 0, 0, 124, 0, 122,
	0, 0, 123, 235, 236, 237, 238, 0, 239, 0,
	0, 125, 0, 126, 127, 0, 129, 128, 0, 240,
	0, 130, 0, 0, 131, 0, 0, 132, 0, 133,
	134, 135, 136, 137, 0, 138, 139, 142, 140, 0,
	141, 0, 241, 143, 242, 144, 145, 0, 146, 0,
	0, 0, 0, 147, 243, 0, 148, 0, 244, 149,
	150, 151, 152, 0, 245, 153, 246, 154, 0, 155,
	156, 157, 247, 158, 159, 0, 160, 161, 162, 163,
	164, 166, 167, 165, 168, 169, 0, 170, 0, 171,
	172, 248, 173, 0, 174, 175, 176, 177, 0, 249,
	178, 179, 0, 180, 181, 0, 182, 250, 251, 183,
	0, 189, 184, 185, 186, 188, 252, 187, 253, 0,
	190, 0, 191, 192, 193, 0, 254, 255, 256, 0,
	0, 194, 257, 258, 0, 195, 196, 197, 198, 80,
	0, 199, 200, 201, 0, 202, 0, 203, 204, 205,
	259, 260, 0, 0, 206, 83, 84, 0, 85, 207,
	208, 209, 210, 211, 0, 0, 0, 0, 86, 87,
	88, 212, 213, 214, 215, 89, 216, 217, 0, 90,
	218, 219, 91, 0, 0, 220, 221, 222, 0, 223,
	0, 0, 0, 92, 93, 94, 0, 95, 0, 96,
	97, 98, 0, 0, 99, 100, 0, 0, 0, 0,
	0, 0, 101, 102, 103, 104, 224, 105, 225, 226,
	0, 106, 0, 107, 0, 0, 0, 108, 109, 0,
	110, 0, 0, 0, 227, 111, 112, 228, 229, 0,
	0, 0, 113, 114, 230, 0, 115, 0, 116, 0,
	0, 0, 0, 117, 231, 0, 232, 0, 118, 119,
	120, 121, 480, 234, 0, 0, 124, 0, 122, 0,
	0, 123, 235, 236, 237, 238, 0, 239, 0, 0,
	125, 0, 126, 127, 0, 129, 128, 0, 240, 0,
	130, 0, 0, 131, 0, 0, 132, 0, 133, 134,
	135, 136, 137, 0, 138, 139, 142, 140, 0, 141,
	0, 241, 143, 242, 144, 145, 0, 146, 0, 0,
	0, 0, 147, 243, 0, 148, 0, 244, 149, 150,
	151, 152, 0, 245, 153, 246, 154, 0, 155, 156,
	157, 247, 158, 159, 0, 160, 161, 162, 163, 164,
	166, 167, 165, 168, 169, 0, 170, 0, 171, 172,
	248, 173, 0, 174, 175, 176, 177, 0, 249, 178,
	179, 0, 180, 181, 0, 182, 250, 251, 183, 0,
	189, 184, 185, 186, 188, 252, 187, 253, 0, 190,
	0, 191, 192, 193, 0, 254, 255, 256, 0, 0,
	194, 257, 258, 0, 195, 196, 197, 198, 80, 0,
	199, 200, 201, 0, 202, 0, 203, 204, 205, 259,
	260, 0, 0, 206, 83, 84, 0, 85, 207, 208,
	209, 210, 211, 0, 0, 0, 0, 86, 87, 88,
	212, 213, 214, 215, 89, 216, 217, 0, 90, 218,
	219, 91, 0, 0, 220, 221, 222, 0, 223, 0,
	0, 0, 92, 93, 94, 0, 95, 0, 96, 97,
	98, 0, 0, 99, 100, 0, 0, 0, 0, 0,
	0, 101, 102, 103, 104, 224, 105, 225, 226, 0,
	106, 0, 107, 0, 0, 0, 108, 109, 0, 110,
	0, 0, 0, 227, 111, 112, 228, 229, 0, 0,
	0, 113, 114, 230, 0, 115, 0, 116, 0, 0,
	0, 0, 117, 231, 0, 232, 0, 118, 119, 120,
	121, 233, 234, 0, 0, 124, 0, 122, 0, 0,
	123, 235, 236, 237, 238, 0, 239, 0, 0, 125,
	0, 126, 127, 0, 129, 128, 0, 240, 0, 130,
	0, 0, 131, 0, 0, 132, 0, 133, 134, 135,
	136, 137, 0, 138, 139, 142, 140, 0, 141, 0,
	241, 143, 242, 144, 145, 0, 146, 0, 0, 0,
	0, 147, 243, 0, 148, 0, 244, 149, 150, 151,
	152, 0, 245, 153, 246, 154, 0, 155, 156, 157,
	247, 461, 159, 0, 160, 161, 162, 163, 164, 166,
	167, 165, 168, 169, 0, 170, 0, 171, 172, 248,
	173, 0, 174, 175, 176, 177, 0, 249, 178, 179,
	0, 180, 181, 0, 182, 250, 251, 183, 0, 189,
	184, 185, 186, 188, 252, 187, 253, 0, 190, 0,
	191, 192, 193, 0, 254, 255, 256, 0, 0, 194,
	257, 258, 0, 195, 196, 197, 198, 80, 0, 199,
	200, 201, 0, 202, 0, 203, 204, 205, 259, 260,
	0, 0, 206, 83, 84, 0, 85, 207, 208, 209,
	210, 211, 0, 0, 0, 0, 86, 87, 88, 212,
	213, 214, 215, 89, 216, 217, 0, 90, 218, 219,
	91, 0, 0, 220, 221, 222, 0, 223, 0, 0,
	0, 92, 93, 94, 0, 95, 0, 96, 97, 98,
	0, 0, 99, 100, 0, 0, 0, 0, 0, 0,
	101, 102, 103, 104, 224, 105, 225, 226, 0, 106,
	0, 107, 0, 0, 0, 108, 109, 0, 110, 0,
	0, 0, 227, 111, 112, 228, 229, 0, 0, 0,
	113, 114, 230, 0, 115, 0, 116, 0, 0, 0,
	0, 117, 231, 0, 232, 0, 118, 119, 120, 121,
	233, 234, 0, 0, 124, 0, 122, 0, 0, 123,
	235, 236, 237, 238, 0, 239, 0, 0, 125, 0,
	126, 127, 0, 129, 128, 0, 240, 0, 130, 0,
	0, 404, 0, 0, 132, 0, 133, 134, 135, 136,
	412, 0, 138, 139, 142, 140, 0, 141, 0, 241,
	143, 242, 144, 145, 0, 146, 0, 0, 0, 0,
	147, 243, 0, 148, 0, 244, 149, 150, 151, 152,
	0, 245, 153, 246, 154, 0, 155, 156, 157, 247,
	158, 159, 0, 160, 161, 162, 163, 164, 166, 167,
	165, 168, 169, 0, 170, 0, 171, 172, 406, 173,
	0, 174, 175, 176, 177, 0, 249, 178, 405, 0,
	180, 181, 0, 182, 250, 251, 183, 0, 189, 184,
	185, 186, 188, 252, 187, 253, 0, 190, 0, 191,
	192, 193, 0, 411, 255, 256, 0, 0, 407, 257,
	258, 0, 195, 196, 197, 198, 80, 0, 199, 200,
	201, 0, 202, 0, 203, 204, 205, 259, 260, 0,
	0, 206, 83, 84, 0, 85, 207, 208, 209, 210,
	211, 0, 0, 0, 0, 86, 87, 88, 212, 213,
	214, 215, 89, 216, 217, 0, 90, 218, 219, 91,
	0, 0, 220, 221, 222, 0, 223, 0, 0, 0,
	92, 93, 94, 0, 95, 0, 96, 97, 98, 0,
	0, 99, 100, 0, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 224, 105, 225, 226, 0, 106, 0,
	107, 0, 0, 0, 108, 109, 0, 110, 0, 0,
	0, 227, 111, 112, 228, 229, 0, 0, 0, 113,
	114, 230, 0, 115, 0, 116, 0, 0, 0, 0,
	117, 231, 0, 232, 0, 118, 119, 120, 121, 233,
	234, 0, 0, 124, 0, 122, 0, 0, 123, 235,
	236, 237, 238, 0, 239, 0, 0, 125, 0, 126,
	127, 0, 129, 128, 0, 240, 0, 130, 0, 0,
	131, 0, 0, 132, 0, 133, 134, 135, 136, 137,
	0, 138, 139, 142, 140, 0, 141, 0, 241, 143,
	242, 144, 145, 0, 146, 0, 0, 0, 0, 147,
	243, 0, 148, 0, 244, 149, 150, 0, 152, 0,
	245, 153, 246, 154, 0, 155, 0, 157, 247, 158,
	159, 0, 160, 161, 162, 163, 164, 166, 167, 165,
	168, 169, 0, 170, 0, 171, 172, 248, 0, 0,
	174, 175, 176, 177, 0, 249, 178, 179, 0, 180,
	181, 0, 182, 250, 251, 183, 0, 189, 184, 185,
	186, 188, 252, 187, 253, 0, 190, 0, 191, 192,
	193, 0, 254, 255, 256, 0, 0, 194, 257, 258,
	0, 195, 196, 197, 198, 0, 0, 199, 200, 201,
	0, 202, 0, 203, 204, 205, 259, 260, 0, 0,
	206, 0, 0, 0, 0, 207, 208, 209, 210, 893,
	894, 0, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	0, 0, 896, 0, 0, 927, 0, 0, 0, 893,
	894, 0, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 895, 916, 0, 0, 0, 0,
	910, 0, 896, 0, 0, 927, 0, 0, 0, 893,
	894, 0, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 895, 916, 0, 0, 0, 0,
	910, 0, 896, 0, 0, 927, 0, 0, 0, 893,
	894, 0, 913, 914, 915, 923, 924, 925, 0, 901,
	0, 0, 0, 0, 895, 916, 0, 0, 0, 0,
	910, 0, 896, 0, 0, 927, 0, 0, 920, 928,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 926, 895, 0, 0, 0, 0, 0,
	910, 0, 0, 0, 0, 918, 0, 0, 920, 928,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 918, 0, 0, 920, 928,
	0, 911, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 918, 0, 0, 920, 928,
	0, 911, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 917, 918, 0, 0, 0, 0,
	0, 911, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 917, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 921, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 0, 912, 0, 0, 0,
	1452, 0, 0, 0, 0, 0, 919, 0, 921, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 0, 0, 1945, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 1460, 1461, 1943, 1478, 1479,
	1480, 0, 0, 0, 0, 0, 919, 0, 0, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 893, 894, 1916, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 1475, 0, 896, 893,
	894, 927, 913, 914, 915, 923, 924, 925, 0, 0,
	0, 0, 0, 0, 0, 916, 0, 0, 0, 0,
	895, 0, 896, 0, 0, 927, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 893, 894, 0, 913, 914,
	915, 923, 924, 925, 895, 1466, 0, 0, 0, 0,
	910, 916, 0, 0, 0, 0, 0, 0, 896, 0,
	0, 927, 0, 0, 0, 1482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 0, 0, 0, 1481,
	895, 0, 0, 0, 0, 0, 910, 0, 0, 0,
	0, 0, 0, 0, 920, 928, 0, 1476, 0, 901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 928,
	0, 918, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 926, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 918, 0, 0, 0, 0,
	917, 911, 0, 0, 920, 928, 0, 0, 0, 0,
	0, 0, 1477, 0, 0, 0, 0, 0, 0, 926,
	0, 0, 0, 0, 917, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 0, 911, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 912, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 921, 0,
	0, 0, 0, 0, 0, 1472, 1473, 1474, 0, 1471,
	1468, 1469, 1470, 1462, 1463, 1464, 1465, 1467, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 919, 0, 921, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 0, 922,
	0, 0, 0, 1891, 0, 0, 919, 0, 0, 907,
	908, 909, 0, 906, 903, 904, 905, 897, 898, 899,
	900, 902, 0, 922, 0, 0, 0, 1886, 0, 0,
	0, 1460, 1461, 0, 1478, 1479, 1480, 0, 0, 0,
	0, 0, 919, 0, 0, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 0, 922,
	0, 893, 894, 1882, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	0, 0, 1475, 0, 896, 893, 894, 927, 913, 914,
	915, 923, 924, 925, 0, 0, 0, 0, 0, 0,
	0, 916, 0, 0, 0, 0, 895, 0, 896, 0,
	0, 927, 910, 0, 0, 0, 0, 0, 0, 0,
	0, 893, 894, 0, 913, 914, 915, 923, 924, 925,
	895, 1466, 0, 0, 0, 0, 910, 916, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 927, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 901, 0, 0, 0, 1481, 895, 0, 0, 0,
	0, 0, 910, 0, 0, 0, 0, 0, 0, 0,
	920, 928, 0, 1476, 0, 901, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 928, 0, 918, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 0, 926,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 918, 0, 0, 0, 0, 917, 911, 0, 0,
	920, 928, 0, 0, 0, 0, 0, 0, 1477, 0,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 0, 911, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 912, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 921, 0, 0, 0, 0, 0,
	0, 1472, 1473, 1474, 0, 1471, 1468, 1469, 1470, 1462,
	1463, 1464, 1465, 1467, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	921, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 0, 0, 1810,
	0, 0, 919, 0, 0, 907, 908, 909, 0, 906,
	903, 904, 905, 897, 898, 899, 900, 902, 0, 922,
	0, 0, 0, 1809, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 893, 894, 1705,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 0, 0, 0, 0,
	896, 893, 894, 927, 913, 914, 915, 923, 924, 925,
	0, 0, 0, 0, 0, 0, 0, 916, 0, 0,
	0, 0, 895, 0, 896, 0, 0, 927, 910, 0,
	0, 0, 0, 0, 0, 0, 0, 893, 894, 0,
	913, 914, 915, 923, 924, 925, 895, 0, 0, 0,
	0, 0, 910, 916, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 927, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 901, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 910, 0,
	0, 0, 0, 0, 0, 0, 920, 928, 0, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	920, 928, 0, 918, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 926, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 918, 0, 0,
	0, 0, 917, 911, 0, 0, 920, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 912, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	921, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 921, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 0, 0, 1639, 0, 0, 919, 0,
	0, 907, 908, 909, 0, 906, 903, 904, 905, 897,
	898, 899, 900, 902, 0, 922, 0, 0, 0, 1623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 919, 0, 0, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 893, 894, 1215, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 896, 893, 894, 927,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 0, 0, 895, 0,
	896, 0, 0, 927, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 895, 0, 0, 0, 0, 0, 910, 916,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 910, 0, 0, 0, 0, 0,
	0, 0, 920, 928, 0, 0, 0, 901, 2021, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 928, 0, 918,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	0, 926, 0, 901, 0, 1492, 0, 0, 1491, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 917, 911,
	0, 0, 920, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 911, 2020, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 917, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 921, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 1427,
	0, 0, 0, 0, 919, 0, 0, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 931, 0, 0, 1129,
	0, 896, 893, 894, 927, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 930, 895, 0, 896, 0, 0, 927, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 895, 0, 0,
	0, 0, 0, 910, 916, 0, 0, 1130, 0, 0,
	0, 896, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 920, 928, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 928, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 926, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 917, 911, 0, 0, 920, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 917, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	0, 0, 0, 917, 456, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 921, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 907, 908, 909, 0, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 896, 893, 894, 927,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 0, 0, 916, 0, 0, 0, 0, 895, 0,
	896, 0, 0, 927, 910, 0, 0, 0, 0, 0,
	0, 0, 0, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 895, 0, 0, 0, 0, 0, 910, 916,
	0, 0, 0, 1493, 0, 0, 896, 0, 0, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 901, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 910, 0, 0, 0, 0, 0,
	0, 0, 920, 928, 0, 0, 0, 901, 0, 0,
	0, 0, 1498, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 928, 0, 918,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	0, 926, 0, 901, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 0, 0, 0, 0, 917, 911,
	0, 0, 920, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 0, 0, 0, 911, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 0, 0, 0, 0, 0, 917, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 0,
	0, 0, 1627, 0, 0, 0, 921, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	912, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 921, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	0, 0, 0, 0, 919, 0, 0, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	919, 0, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 0, 0, 0,
	0, 0, 0, 0, 916, 0, 0, 0, 0, 0,
	0, 896, 893, 894, 927, 913, 914, 915, 923, 924,
	925, 0, 0, 0, 0, 0, 0, 0, 916, 0,
	0, 0, 1451, 895, 0, 896, 0, 0, 927, 910,
	0, 0, 0, 0, 0, 0, 0, 0, 893, 894,
	0, 913, 914, 915, 923, 924, 925, 895, 0, 0,
	0, 0, 0, 910, 916, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 927, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 910,
	0, 0, 0, 0, 0, 0, 0, 920, 928, 0,
	0, 0, 901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 928, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 0, 926, 0, 901, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 918, 0,
	0, 0, 0, 917, 911, 0, 0, 920, 928, 0,
	0, 0, 0, 0, 0, 1458, 0, 0, 0, 0,
	0, 0, 926, 0, 0, 0, 0, 917, 0, 0,
	0, 0, 0, 0, 918, 0, 0, 0, 0, 0,
	911, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 921, 0, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 0, 912,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 921, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 912, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 921, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 907, 908, 909, 0, 906, 903, 904, 905,
	897, 898, 899, 900, 902, 0, 922, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 919, 0, 0, 907, 908,
	909, 0, 906, 903, 904, 905, 897, 898, 899, 900,
	902, 0, 922, 893, 894, 0, 913, 914, 915, 923,
	924, 925, 0, 0, 0, 0, 0, 0, 0, 916,
	0, 0, 0, 0, 0, 0, 896, 893, 894, 927,
	913, 914, 915, 923, 924, 925, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 0,
	896, 0, 0, 927, 910, 0, 893, 894, 0, 913,
	914, 915, 923, 924, 925, 0, 0, 0, 0, 0,
	0, 0, 895, 0, 0, 0, 0, 0, 910, 896,
	0, 0, 927, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 901, 0, 0, 0, 910, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 920, 928, 0, 0, 0, 901, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 926, 0, 0,
	0, 0, 0, 0, 0, 0, 920, 928, 0, 918,
	0, 0, 0, 0, 0, 911, 901, 0, 0, 0,
	0, 926, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 918, 0, 920, 928, 0, 0, 911,
	0, 0, 0, 0, 0, 0, 0, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 29, 53,
	0, 0, 918, 0, 0, 0, 0, 0, 911, 0,
	1460, 1461, 0, 1478, 1479, 1480, 0, 0, 0, 0,
	912, 0, 0, 55, 0, 0, 1616, 0, 0, 31,
	0, 60, 921, 0, 0, 0, 0, 1460, 1461, 0,
	1478, 1479, 1480, 0, 912, 0, 0, 0, 0, 0,
	44, 0, 0, 1615, 0, 0, 921, 39, 0, 0,
	56, 1475, 0, 0, 43, 40, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 0, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 921, 0, 41, 1475, 0,
	919, 0, 0, 907, 908, 909, 0, 906, 903, 904,
	905, 897, 898, 899, 900, 902, 0, 922, 0, 0,
	1466, 0, 0, 0, 919, 0, 0, 907, 908, 909,
	0, 906, 903, 904, 905, 897, 898, 899, 900, 902,
	0, 922, 0, 0, 0, 0, 0, 1466, 0, 0,
	0, 0, 0, 919, 1481, 0, 907, 908, 909, 0,
	906, 903, 904, 905, 897, 898, 899, 900, 902, 0,
	922, 0, 1476, 0, 0, 42, 0, 0, 0, 0,
	0, 1481, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 58, 30, 0, 0, 46, 0, 57, 0, 1476,
	0, 0, 0, 47, 0, 0, 67, 0, 0, 0,
	0, 50, 52, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 0, 0, 0, 0, 0, 0, 0, 69,
	0, 771, 765, 788, 759, 779, 778, 1477, 0, 761,
	760, 0, 0, 59, 790, 789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 1477, 0, 65, 0, 0, 0,
	0, 0, 66, 0, 0, 784, 0, 776, 775, 0,
	771, 765, 788, 759, 779, 778, 774, 0, 761, 760,
	0, 64, 0, 790, 789, 0, 0, 0, 0, 0,
	0, 0, 0, 773, 0, 0, 0, 0, 0, 0,
	1472, 1473, 1474, 0, 1471, 1468, 1469, 1470, 1462, 1463,
	1464, 1465, 1467, 0, 784, 0, 776, 775, 0, 0,
	0, 766, 767, 768, 769, 774, 787, 1472, 1473, 1474,
	0, 1471, 1468, 1469, 1470, 1462, 1463, 1464, 1465, 1467,
	0, 0, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 777, 0, 0, 0, 1147, 0, 0, 0,
	766, 767, 768, 769, 0, 787, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	772, 0, 0, 0, 1150, 1148, 1149, 1152, 1151, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 777, 0, 0, 0, 0, 0, 763, 0, 0,
	0, 0, 0, 0, 0, 770, 764, 0, 0, 0,
	0, 0, 0, 0, 792, 0, 0, 0, 0, 772,
	0, 0, 762, 0, 0, 785, 786, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 763, 0, 0, 791,
	0, 0, 0, 0, 770, 764, 0, 0, 0, 0,
	0, 0, 0, 792, 0, 0, 0, 0, 0, 0,
	0, 762, 0, 0, 785, 786, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 791,
}
var sqlPact = [...]int{

	26374, -1000, 38, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 662, 1297,
	1295, 18120, -1000, -1000, -1000, -1000, -1000, -1000, 720, 652,
	599, 4693, 18120, 18120, 17851, 1217, 1217, 19465, -1000, -1000,
	22693, -1000, 3368, 490, 496, 490, 490, 497, 19465, 611,
	779, 134, -1000, 894, 4, 22424, 18120, 1360, 35, 16506,
	324, 26374, 17582, 22155, 18120, 17313, 18120, 18120, 286, 40,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1200, 1090, 1089, 16506, 21886, 21617, 21348, 21079, -1000,
	11228, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 719, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 332, 328, -1000, 17044, -1000, 927, -1000,
	34, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 926,
	-1000, 18120, -1000, -1000, 20810, 20541, 327, 949, -1000, -1000,
	561, 399, 1372, -1000, 45, -1000, -1000, -1000, 1198, -1000,
	923, 1194, 1192, 1191, 1185, 1183, 1181, 398, 950, 457,
	-1000, 949, -1000, 949, -1000, -1000, -1000, 576, 19465, -1000,
	16506, -1000, 20272, 18120, 18120, 1117, 20003, -1000, 894, -1000,
	-1000, -1000, 985, 1342, 1342, 1342, 1392, 146, 143, 134,
	28, 18120, -1000, 325, 28, 6488, 6488, -1000, -1000, 324,
	-1000, 354, 14031, -1000, 7716, -1000, 929, 1259, 418, 674,
	1258, -113, 763, 761, 1256, 575, 1179, 640, 13224, 40,
	-1000, -1000, -1000, 4400, 16506, 18120, 18120, 657, 19734, -1000,
	1252, 121, 1251, -1000, 115, 1250, -1000, 115, 1248, 29,
	-1000, -1000, -1000, -1000, -1000, -1000, 324, 16775, 18120, 1474,
	26643, -1000, 9510, -1000, -1000, 14593, 1044, 14593, -1000, -1000,
	1473, -1000, 9510, -1000, 33, 32, 1059, 1085, 11805, 11523,
	1309, 821, -1000, -1000, -1000, 43, 4693, 18120, 1206, 14593,
	18120, 18120, 18120, 18120, 18120, 18120, -1000, 1046, -1000, -1000,
	18120, 18120, -1000, 31, 30, -1000, 19465, -1000, 127, -1000,
	323, 1011, 407, 138, 19196, 407, 997, -1000, 985, -1000,
	934, 1048, 8625, 9510, 134, -1000, -1000, 134, 134, 9510,
	-1000, -1000, 18120, 28, 1472, 18120, 92, -1000, 25132, -1000,
	-1000, 9510, 9510, 9510, 9510, 9510, 841, 346, -1000, 322,
	321, 5600, -1000, -1000, 1550, -1000, -1000, -1000, 148, -1000,
	-1000, 9510, 40, -1000, -1000, -1000, -1000, 319, 1556, 447,
	-1000, -1000, -1000, 403, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1205, 315, 314, -1000, -1000, -1000, -1000,
	313, 311, 310, 303, 302, 301, 298, 297, 296, 294,
	293, 290, 289, 288, 287, 803, -1000, 423, -1000, -1000,
	423, 423, -1000, 280, 280, 281, -1000, -1000, -1000, -1000,
	280, -1000, -1000, -1000, 393, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 282, 92, -1000, -1000, -1000, 18120, 23, -1000,
	25898, -1000, -11, 789, -1000, 15968, 1365, 1340, 1320, 16506,
	1381, 1376, 573, 18120, 18120, 571, 569, 16506, 14878, 14878,
	-1000, 1177, 17, -1000, -1000, -1000, -1000, 414, 81, 1470,
	81, 13493, -1000, 18120, 18120, -1000, 18120, -1000, -1000, 18120,
	-1000, 18120, 18120, -1000, 18120, 137, 15430, 799, 1246, 642,
	4, 8, -1000, 1476, -1000, -1000, -1000, -1000, 83, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 281, 803, 280, 280, 280, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 393, -1000, -1000, 423, 423,
	423, -1000, -1000, 7, 25898, 567, 16, 15147, 18120, -1000,
	40, -1000, -1000, 1176, 489, 6, 798, 1077, 775, -1000,
	-1000, -1000, -1000, 27, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1535, -1000, -1000, -1000, -1000, 1549,
	27, -1000, -1000, -1000, -1000, -1000, 1555, -1000, -1000, -1000,
	4693, -1000, -1000, -1000, 18120, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 798, 1077, -1000, -1000, 16506,
	15699, 1464, 1245, 806, -1000, 1447, 18120, 920, 995, -1000,
	602, 1244, -1000, -1000, -1000, -1000, 25898, -1000, 25898, 716,
	1107, -1000, 1107, 22, -1000, 25108, -1000, 277, 2, -1000,
	414, 6488, 12939, 26594, 26643, 18120, 605, 9510, 9510, 9510,
	9510, 9510, 9510, 9510, 9510, 9510, 9510, 9510, 9510, 9510,
	9510, 9510, 9510, 9510, 9510, 9510, 9510, 9510, 9510, 1047,
	9510, 560, 9510, 9510, 9510, 9510, 669, 848, 248, 901,
	4693, -1000, -1000, 661, 661, 661, 26227, 26227, 149, 346,
	-1000, 9510, -1000, 8306, 143, 24437, 21, -1000, -1000, -1000,
	6190, 419, 25898, 40, 4986, -1000, 865, 1544, 1186, 1152,
	274, 142, 141, 9510, 9510, 9805, 9805, 9510, 10100, 9510,
	9510, 5895, 9510, 9510, 9510, 9510, 9510, 9510, -1000, 272,
	-1000, -1000, -1000, -1000, 1543, -1000, -1000, 1542, -1000, 595,
	593, 1541, 414, 135, 7716, -1000, 799, 18120, 18120, 18120,
	-1000, -1000, 986, 18927, 984, 26643, 18120, -1000, 269, 265,
	1076, 1073, 18120, 18120, 18658, 18389, 18120, 791, 261, 252,
	18120, 738, -1000, 18120, 18120, 733, 1128, -1000, 634, 1175,
	18120, 712, 9510, 762, -1000, 12654, 432, 18120, 726, 56,
	-1000, -1000, -1000, 372, 18120, -1000, -1000, -1000, 121, -1000,
	115, 115, -1000, -1000, 16506, -1000, -1000, -1000, -1000, -1000,
	-1000, 26643, 344, 339, -1000, 1540, 556, -1000, 543, 537,
	534, -1000, 249, -1000, 9510, 18120, 15147, 16, 12, -1000,
	-1000, 18120, 1077, -1000, -1000, -1000, -1000, 679, -1000, 790,
	-1000, 12087, -1000, -1000, -1000, 865, -1000, -16, -1000, -1000,
	-1000, -1000, 132, 1, -3, 26643, -1000, -1000, -1000, -1000,
	-1000, 18120, 267, 18120, 4, 18120, -1000, 1554, 4, 18120,
	1243, 1265, 366, 18120, -1000, -1000, -1000, 9510, -1000, -1000,
	-1000, 4, 18120, -1000, 1151, -1000, -86, 1579, -138, 139,
	380, -1000, 12369, 1223, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 397, 647, 647, 535, 535,
	535, 535, 591, 591, 1017, 2013, 2689, 2689, 2689, 955,
	262, 262, 2689, 2689, 2689, 26227, 26203, 2973, 9510, 9510,
	532, 844, 248, 2973, 9510, 1510, 2973, 2973, 2973, -1000,
	781, -1000, -1000, -1000, 1174, 243, 10100, 10100, -1000, -1000,
	-1000, 5600, 10690, -1000, -1000, -1000, -1000, -1000, 240, 9510,
	-1000, 24743, -168, -14, -1000, -1000, 9510, -13, -88, -1000,
	-1000, 615, -1000, 9510, -1000, -9, 9510, 9510, 9510, 119,
	-1000, 116, 850, 227, 226, 9510, -1000, -1000, 25862, 23249,
	114, 1172, -76, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	113, 112, 25838, -76, 109, 23615, -1000, 10100, 10100, 10100,
	5600, 217, 108, 24803, -76, 25533, 8011, 8011, 8011, 107,
	25497, 9510, -76, 3777, 3645, 3452, -20, -21, -27, 1531,
	-29, 106, 392, 383, 105, 1151, -1000, -1000, -1000, -1000,
	530, 528, 1240, -1000, 982, -1000, 443, -1000, 973, 9510,
	18120, 215, 214, 802, -1000, 1236, 889, 1234, 889, -1000,
	-11, 709, 9510, 9510, -1000, 523, -1000, -1000, 519, -1000,
	1170, -1000, 633, -1000, -1000, 6488, 25898, -1000, 718, 1323,
	-31, -1000, -1000, 6488, 414, 13493, 12939, 7716, -35, -1000,
	-1000, -1000, 799, -1000, 480, 1522, 104, 1022, 869, 750,
	682, 1519, 25898, -16, -1000, -16, -1000, -1000, -1000, -1000,
	-1000, -1000, 18120, 1119, -1000, 15699, 212, 18120, 208, -1000,
	206, -1000, -1000, 203, 18120, 1066, 366, 14878, -1000, 407,
	-1000, 102, -1000, 1148, 1373, -1000, 12939, 942, 1084, 1081,
	12939, 1075, 853, 853, 853, -1000, 380, 4096, 9510, 16237,
	871, 62, 101, 1579, 345, 9510, 2973, 2973, 9510, 10100,
	10100, -1000, 2973, -1000, -1000, -1000, -1000, 1168, 200, 9510,
	26643, 26437, 26410, -36, -1000, 7397, -28, -1000, 9510, -1000,
	24401, -1000, -1000, 338, 1263, -1000, 9510, 25473, 99, 7102,
	-1000, 25168, -22, -22, -1000, 1553, -1000, 13762, 417, 892,
	24377, 26594, 26643, -1000, 9510, -1000, -1000, 1164, 9510, -1000,
	26594, 26643, 10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100,
	10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100,
	10100, 1095, 10100, 1502, 1502, 1502, -51, 6783, -1000, 1204,
	1164, 9510, 9510, 26643, 98, 96, 93, -1000, 9510, -76,
	9510, 9510, 9510, -1000, -1000, -1000, 91, -1000, 1511, -1000,
	-1000, -1000, -1000, 1148, 18120, 18120, 18120, 1233, -1000, 1944,
	-1000, 24071, -37, 18120, 18120, -1000, 1064, 1105, 468, 18120,
	-1000, 18120, -1000, 18120, 18120, 18120, -42, -43, 18120, 18120,
	14878, -1000, -60, 6488, 225, 4, -60, 712, -1000, -58,
	-1000, 371, -1000, 336, 335, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 89, -1000, -1000, 1123, -1000, 10959, 199,
	18120, 15699, 1437, 10959, 910, 1065, 366, 14878, -1000, 602,
	-1000, 412, 9510, 9510, 1579, 618, 12939, 12939, 1058, 1079,
	12939, -1000, -1000, -1000, -1000, 16237, -1000, 1045, -44, -1000,
	-1000, 18120, 197, -1000, 380, 263, 11228, 526, 2973, 3247,
	3027, 9510, 26643, 26256, -63, 9510, 9510, -1000, -67, -1000,
	9510, 117, 25898, -1000, -1000, -1000, 25898, 9510, 1504, 9510,
	86, 78, 77, -1000, -1000, -1000, 22962, 9510, 76, -1000,
	75, 73, 25898, 1204, 25898, -1000, -1000, 623, 623, 1502,
	1502, 1502, 1502, 2603, 2603, 659, 2051, 170, 170, 170,
	1178, 373, 373, 170, 170, 170, 1160, 1029, 187, 23981,
	9510, -68, -1000, -1000, -1000, 25898, 25898, 72, -1000, -1000,
	-1000, -76, 201, 24035, 24011, -1000, 70, 412, -1000, -1000,
	-1000, 18120, -1000, 18120, -1000, 18120, 18120, 1150, 972, -1000,
	-1000, 1072, 183, 10100, 18120, -1000, 856, -69, -77, 947,
	-1000, 938, 9510, -1000, 26643, 889, 889, -1000, 512, 508,
	-1000, -1000, -1000, -1000, -1000, -60, 1270, 18120, 1317, -1000,
	-1000, 176, -1000, -1000, -1000, 815, -78, -1000, 306, 1335,
	9510, -1000, -1000, 174, 10959, -79, 67, 4, -89, 18120,
	-1000, 366, 14878, -1000, 1265, -1000, 18120, 25898, -76, 587,
	-1000, 1058, -1000, 171, 9510, 12939, -1000, -1000, -165, -1000,
	365, -1000, 380, 169, 18120, 16237, 380, -97, 9510, 9510,
	26256, -115, -1000, 2973, 2973, -1000, 23705, -1000, 25898, -1000,
	25168, -1000, -1000, -1000, 810, -1000, 23669, -1000, -1000, -1000,
	-1000, 10100, 1158, 168, 26643, 23645, -1000, -1000, 9510, -1000,
	-1000, -1000, -1000, -1000, 1139, -1000, -1000, 18120, 977, -1000,
	-1000, 9510, 23981, 167, 1119, 155, -1000, -1000, -1000, 784,
	-1000, -1000, 25898, 1337, -1000, -1000, 18120, 18120, 594, -119,
	18120, -1000, -1000, 5305, 18120, 856, 10959, 1370, 40, 18120,
	1370, 23339, 4986, -120, -1000, 1119, -1000, 856, 154, 14878,
	-1000, 1066, -64, -1000, 1409, 14324, -1000, 18120, 25898, -1000,
	1045, -1000, 4693, 16237, 18120, -124, -1000, 16237, 137, 2973,
	2973, -1000, -1000, 63, 892, 1349, -1000, 2128, 10100, 26643,
	-126, -1000, 23309, -1000, -1000, 1231, 23279, 1034, 18120, -1000,
	18120, 18120, 446, 18120, -1000, -1000, 653, -1000, 414, -1000,
	153, 1119, -1000, -1000, -1000, -1000, 1335, -9, 856, -1000,
	1119, 10959, -1000, 1065, 18120, 152, -1000, 150, 40, -130,
	-1000, -1000, -1000, -132, -1000, -1000, 94, -1000, 842, 9510,
	2128, -139, -1000, -1000, 1218, -1000, 902, 931, 58, -145,
	138, -1000, 9510, -1000, 13493, -1000, 18120, -1000, 1370, 53,
	1119, -1000, -146, -1000, -1000, -1000, 9510, -1000, -1000, 380,
	52, 9215, 9215, -76, -1000, 18120, -1000, 905, 903, 639,
	-1000, -1000, -1000, -1000, -1000, 1034, 25898, -121, -151, -1000,
	-1000, -1000, 856, -22, 16237, -1000, -1000, -1000, 10395, 932,
	700, 24767, -1000, -1000, -1000, 1281, -1000, 453, 994, 994,
	902, -1000, 883, 1119, 49, -1000, 1480, -1000, -1000, -1000,
	-1000, -1000, -1000, 1488, -1000, -1000, 1043, -1000, -1000, -1000,
	-1000, -1000, -1000, 1504, 8920, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1765, 1764, 1386, 1498, 1763, 1760, 1496, 1759, 1758,
	1756, 1755, 1752, 1751, 113, 1480, 1465, 30, 1461, 1749,
	102, 1748, 1746, 1745, 111, 1744, 1739, 1738, 54, 1737,
	1734, 1419, 1388, 1731, 1730, 106, 38, 163, 2236, 161,
	1729, 1727, 1726, 28, 121, 86, 1724, 87, 1723, 1722,
	1721, 58, 35, 29, 21, 1720, 116, 133, 1367, 34,
	1719, 1718, 146, 1717, 37, 22, 1980, 119, 151, 136,
	135, 1716, 1715, 1713, 1712, 71, 1711, 14, 1710, 1709,
	13, 81, 9, 1706, 16, 69, 1704, 1703, 139, 1702,
	88, 120, 129, 47, 134, 93, 1701, 82, 12, 94,
	1693, 1691, 1691, 140, 31, 1689, 63, 95, 142, 1688,
	65, 153, 79, 24, 83, 122, 1687, 1686, 1685, 104,
	1684, 110, 105, 1683, 1682, 109, 1680, 141, 144, 1679,
	1678, 138, 1674, 1671, 1670, 158, 1669, 1666, 154, 1665,
	11, 50, 80, 27, 128, 125, 124, 72, 1663, 25,
	1661, 1681, 1051, 1075, 23, 101, 64, 56, 98, 52,
	61, 26, 1660, 1656, 123, 1655, 1654, 1653, 1652, 1651,
	97, 1650, 1646, 89, 148, 49, 3, 7, 108, 41,
	85, 99, 117, 152, 127, 1644, 1641, 131, 57, 92,
	1629, 1628, 1794, 132, 1627, 1622, 1621, 1735, 1311, 730,
	17, 1620, 1619, 246, 196, 1618, 1616, 62, 1615, 130,
	1608, 1604, 149, 226, 33, 1603, 68, 90, 115, 1601,
	0, 415, 264, 1598, 137, 96, 1597, 1595, 1589, 1585,
	39, 2, 8, 5, 6, 4, 40, 36, 1584, 1583,
	143, 19, 84, 1582, 155, 1580, 1579, 1577, 53, 1576,
	18, 1575, 15, 1574, 1573, 10, 1, 147, 1569, 118,
	1565, 1463, 1564, 150, 1563, 1562, 1471, 46, 100,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 45, 45, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 42, 42,
	47, 47, 47, 49, 49, 46, 46, 41, 41, 5,
	5, 50, 50, 6, 6, 6, 7, 7, 7, 7,
	7, 7, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 94, 94, 93, 93, 96, 96, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	188, 188, 187, 19, 162, 162, 20, 20, 20, 20,
	21, 120, 120, 22, 22, 22, 22, 23, 27, 257,
	257, 257, 261, 261, 262, 262, 263, 263, 263, 263,
	263, 263, 263, 259, 259, 30, 30, 30, 30, 30,
	139, 135, 135, 137, 137, 137, 137, 57, 134, 134,
	134, 134, 136, 136, 136, 136, 213, 212, 212, 218,
	218, 218, 72, 72, 72, 72, 72, 73, 73, 73,
	211, 211, 211, 211, 219, 219, 219, 219, 219, 219,
	74, 74, 74, 217, 217, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 18, 258, 258, 260, 260,
	32, 32, 10, 10, 11, 11, 75, 75, 76, 76,
	142, 142, 142, 142, 77, 77, 48, 48, 48, 141,
	228, 228, 229, 229, 229, 229, 229, 229, 230, 230,
	230, 230, 230, 230, 230, 226, 226, 227, 224, 224,
	225, 225, 225, 225, 264, 264, 140, 140, 80, 80,
	233, 233, 233, 233, 231, 231, 231, 231, 231, 234,
	232, 235, 235, 235, 235, 235, 174, 174, 174, 34,
	12, 55, 55, 13, 9, 9, 124, 124, 84, 84,
	179, 179, 179, 65, 65, 43, 43, 43, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 125,
	125, 126, 126, 25, 29, 33, 33, 33, 33, 33,
	266, 266, 61, 61, 61, 61, 62, 62, 138, 138,
	138, 138, 138, 56, 8, 8, 51, 51, 52, 52,
	53, 53, 54, 54, 267, 267, 24, 24, 24, 24,
	24, 68, 68, 131, 131, 131, 133, 133, 132, 132,
	132, 110, 110, 35, 89, 89, 98, 98, 99, 99,
	185, 100, 100, 28, 28, 38, 38, 36, 36, 36,
	36, 36, 36, 37, 37, 39, 39, 39, 39, 39,
	39, 39, 241, 241, 241, 244, 244, 240, 242, 242,
	243, 243, 265, 265, 111, 111, 111, 79, 78, 78,
	82, 82, 81, 83, 83, 178, 108, 108, 108, 108,
	127, 128, 128, 129, 129, 130, 130, 107, 107, 159,
	159, 40, 40, 88, 88, 90, 90, 149, 149, 150,
	150, 148, 148, 148, 180, 180, 180, 180, 180, 180,
	180, 177, 177, 181, 181, 181, 181, 181, 181, 175,
	175, 175, 175, 176, 176, 186, 186, 114, 114, 114,
	114, 112, 112, 113, 113, 182, 182, 182, 182, 109,
	109, 183, 183, 183, 143, 143, 189, 189, 189, 207,
	207, 87, 87, 87, 190, 190, 190, 190, 190, 190,
	190, 190, 190, 190, 190, 190, 190, 191, 191, 191,
	191, 193, 193, 193, 192, 192, 192, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 206, 206,
	206, 206, 206, 206, 194, 194, 201, 201, 202, 202,
	203, 204, 195, 195, 196, 196, 197, 198, 205, 205,
	205, 205, 209, 209, 199, 199, 199, 199, 199, 200,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 121, 122, 122, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
	152, 152, 152, 152, 152, 152, 153, 153, 153, 153,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 236, 236, 236, 236, 236, 236, 236, 238, 238,
	239, 239, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 245,
	245, 246, 246, 248, 248, 249, 249, 250, 251, 251,
	251, 252, 253, 253, 247, 247, 254, 254, 254, 255,
	255, 256, 256, 256, 256, 256, 164, 164, 164, 165,
	165, 166, 172, 172, 172, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 63, 63, 63, 63, 63, 95, 95, 161, 161,
	160, 160, 160, 163, 163, 115, 115, 208, 208, 208,
	208, 208, 208, 208, 116, 116, 116, 123, 117, 117,
	118, 118, 118, 118, 118, 118, 156, 157, 119, 119,
	119, 158, 158, 167, 171, 171, 170, 169, 169, 168,
	168, 146, 146, 147, 147, 145, 144, 104, 104, 103,
	103, 101, 101, 102, 102, 268, 268, 173, 173, 105,
	105, 106, 97, 97, 184, 184, 184, 184, 91, 91,
	70, 70, 92, 92, 66, 66, 69, 69, 67, 67,
	67, 67, 85, 85, 86, 86, 64, 64, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 210,
	210, 210, 58, 58, 58, 59, 59, 60, 60, 215,
	215, 215, 216, 216, 216, 216, 214, 214, 214, 214,
	214, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 220,
	220, 220, 220, 220, 220, 220, 220, 220, 220, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 6,
	5, 3, 0, 4, 6, 7, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 3, 6, 3, 1,
	5, 2, 1, 1, 1, 3, 3, 2, 3, 3,
	3, 3, 1, 3, 3, 2, 1, 1, 3, 1,
	1, 1, 2, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 0, 1, 1, 2, 2, 2, 4, 2,
	4, 4, 4, 4, 4, 4, 4, 2, 3, 4,
	3, 3, 4, 4, 2, 2, 2, 0, 2, 0,
	8, 8, 7, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	5, 2, 0, 6, 11, 14, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 6, 8, 8, 10, 8, 10, 1,
	0, 2, 0, 2, 2, 3, 3, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 1,
	3, 3, 0, 3, 8, 11, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 6, 8, 5,
	7, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 1, 1,
	3, 2, 4, 0, 4, 6, 3, 1, 5, 6,
	9, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	3, 4, 3, 4, 3, 4, 5, 6, 6, 7,
	6, 7, 6, 7, 3, 4, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 2, 1, 2,
	1, 1, 2, 1, 3, 1, 1, 2, 2, 1,
	1, 3, 5, 6, 8, 6, 6, 4, 4, 1,
	1, 1, 5, 1, 3, 1, 3, 1, 1, 1,
	1, 6, 6, 4, 4, 4, 4, 4, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 4, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 0, 1,
	4, 2, 2, 2, 2, 2, 4, 3, 5, 4,
	3, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 3, 1, 3,
	3, 3, 2, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 0, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 3, 5, 1, 1, 1, 1,
	2, 2, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	218, 65, -8, -9, -10, -11, -12, -13, -243, 93,
	101, 123, 201, 100, 86, 117, 221, 229, -36, -38,
	237, -139, 238, 35, 247, 59, 96, 223, 217, 269,
	67, -241, -39, -37, 317, 292, 298, 232, -40, 255,
	284, 320, 255, 132, 79, 287, 79, 79, -66, -58,
	4, -220, -222, 20, 21, 23, 33, 34, 35, 40,
	44, 47, 58, 59, 60, 62, 64, 65, 66, 69,
	70, 77, 78, 79, 80, 82, 86, 88, 92, 93,
	95, 100, 101, 107, 108, 111, 113, 118, 123, 124,
	125, 126, 133, 136, 131, 145, 147, 148, 151, 150,
	155, 158, 161, 163, 164, 165, 166, 167, 169, 170,
	172, 174, 171, 177, 179, 180, 182, 187, 190, 193,
	194, 195, 196, 199, 201, 203, 204, 205, 207, 208,
	210, 211, 212, 213, 214, 217, 215, 216, 218, 219,
	221, 223, 224, 226, 228, 229, 230, 231, 234, 235,
	237, 238, 240, 243, 246, 247, 248, 251, 249, 245,
	254, 256, 257, 258, 265, 269, 270, 271, 272, 275,
	276, 277, 279, 281, 282, 283, 288, 293, 294, 295,
	296, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	50, 51, 52, 54, 81, 83, 84, 99, 102, 103,
	109, 119, 121, 127, 128, 137, 138, 139, 140, 142,
	153, 176, 178, 188, 192, 198, 200, 206, 225, 233,
	241, 242, 250, 252, 260, 261, 262, 266, 267, 284,
	285, 88, 136, 277, 276, 79, 132, 255, 287, -17,
	317, -28, -7, -15, -4, -24, -35, -14, -31, -18,
	-32, -16, 23, -214, 4, -220, -222, -221, -223, 56,
	68, 116, 135, 129, 144, 146, 154, 156, 168, 189,
	191, 222, 239, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 55, 57, 63, 67,
	71, 72, 73, 74, 75, 76, 85, 87, 89, 90,
	91, 94, 96, 98, 104, 105, 106, 112, 114, 115,
	117, 120, 122, 130, 132, 134, 141, 143, 149, 152,
	157, 159, 160, 173, 175, 181, 183, 184, 185, 186,
	197, 202, 209, 220, 232, 236, 244, 253, 255, 259,
	263, 264, 268, 273, 274, 278, 280, 286, 287, 289,
	290, 291, 292, -58, -58, -58, 201, 22, -261, 22,
	-262, -263, 67, 93, 117, 232, 136, 88, 276, -261,
	-62, 229, -58, -135, 158, 235, 225, 265, -136, -134,
	-213, 260, 167, -93, -58, 4, 22, 79, 58, 80,
	118, 132, 133, 63, 64, 148, 256, 260, 265, 67,
	279, -266, 265, 265, -266, -266, -61, 265, 263, -62,
	-265, 255, 255, 278, 287, -124, 79, 274, -37, -39,
	-38, -81, -82, 273, 141, 98, 186, -36, -38, -241,
	-244, 207, -240, -58, -244, -78, -79, 22, 90, 321,
	-182, -66, 184, -106, 317, -3, -182, 127, -66, -69,
	127, -66, -58, -182, 127, -58, -58, 115, 317, -103,
	-104, -144, -145, 319, 115, 143, 143, -183, -182, -58,
	127, -70, 127, -69, -94, 127, -93, -94, 127, -188,
	-187, -216, 4, -220, -222, -221, 284, 255, 132, -162,
	317, -120, 317, -58, 22, 183, 321, 183, -58, -135,
	52, -135, 317, -137, -56, -57, 145, 203, 263, 302,
	115, 296, -74, 5, 85, -96, 319, 115, -258, 183,
	115, 115, 115, 115, 115, 115, 296, 145, 203, 228,
	255, 287, -138, -56, -57, -138, 263, -62, -109, -182,
	-93, 127, -58, -93, 132, -58, 127, -81, -82, -108,
	-127, -128, 157, 181, -111, 22, 90, -111, -111, 44,
	318, 318, 321, -244, -86, 317, -97, -184, -151, 310,
	-153, 308, 309, 314, 173, 297, -164, -155, -167, 99,
	225, 317, -66, -154, 322, 9, -238, -38, 29, -165,
	-166, 48, -58, 7, 8, 5, 6, -64, -191, -200,
	268, 104, 175, -236, -237, 4, -220, -215, -192, -202,
	-196, -199, 142, 56, 72, 75, 73, 76, 236, 278,
	49, 28, 102, 103, 192, 198, 252, 266, 267, 127,
	176, 128, 54, 119, 153, 92, 37, 39, 41, 42,
	50, 51, 81, 83, 84, 109, 137, 138, 139, 140,
	178, 206, 241, 250, 261, 262, 285, -221, -203, -204,
	-197, -198, -205, -97, -106, 310, -66, 317, -105, -173,
	-151, 85, -45, 215, -44, 21, 23, 93, 282, 99,
	245, 245, 215, 99, 322, 215, 215, 99, 263, 115,
	248, 318, -91, -66, -104, -214, 310, -183, -68, -66,
	-68, 237, -58, 30, 99, -47, 321, 47, 219, 99,
	-47, 321, 99, -47, 99, 318, 321, -182, 127, -69,
	30, -161, -189, -190, -192, -201, -195, -199, -200, 40,
	46, 45, 258, 233, 242, 38, 137, 138, 139, 140,
	241, 37, 206, 109, 92, 84, 83, 178, 42, 41,
	-203, -204, -197, -198, 81, 261, 262, 142, 39, 51,
	50, 285, 250, -95, -151, -257, -92, 255, 79, -67,
	-58, 310, -263, -257, 30, -95, 321, 321, 155, -73,
	161, 172, 124, -212, 85, -218, -211, -174, 9, 268,
	104, 183, -217, 8, 309, -210, -216, 5, 7, 308,
	-212, 85, 70, -219, 5, 4, -200, -174, 85, 158,
	319, -214, -213, -260, 112, -257, -213, -213, -213, -213,
	-213, -58, 155, -213, -213, 321, 321, -62, -47, 321,
	317, -80, 173, -242, 292, -80, 317, -59, 127, -58,
	-242, 173, -108, -128, -127, -129, -151, 22, -151, -153,
	-37, -37, -37, -83, -178, -151, -240, 30, -85, -58,
	-88, 321, 115, 10, 11, 55, 33, 308, 309, 310,
	311, 110, 312, 305, 306, 307, 304, 300, 301, 302,
	61, 162, 227, 13, 14, 15, 26, 185, 156, 297,
	129, 239, 314, 16, 17, 18, 144, 36, 130, -63,
	30, 4, -71, -151, -151, -151, -151, -151, 191, -101,
	-146, 315, -38, 317, -38, -151, -95, 7, -38, -160,
	315, -168, -151, -103, 317, 5, 5, 317, -245, 293,
	112, 317, 317, 317, 317, 317, 317, 317, 317, 317,
	317, 317, 317, 317, 317, 317, 317, 317, 200, -209,
	288, -209, -209, -193, 317, -193, -194, 317, -193, 294,
	298, 317, -88, -66, 321, 318, 321, 263, -125, 63,
	57, -141, 127, 57, -224, -58, 63, -225, 53, 274,
	202, 114, -125, 63, -125, 63, 63, -182, 33, 33,
	263, -69, -58, 263, 263, -182, -217, -217, 115, 318,
	321, -143, 290, -131, -28, 317, 85, 30, -131, -98,
	-99, -185, -100, -66, 317, -58, -58, -69, -70, -93,
	-94, -94, -17, -187, 99, -20, -28, -24, -35, -14,
	318, 321, -87, 29, -121, 317, 295, 165, 82, 125,
	164, -122, 231, 318, 321, 263, 321, -92, -85, -145,
	-144, 115, 265, 318, -57, -56, -72, 205, 243, 216,
	234, 321, 8, 7, 7, 5, -214, -259, -58, -57,
	-56, -182, -75, -85, -76, -58, -142, -141, -226, -227,
	-224, 132, 274, 105, 30, 99, -55, 196, 30, 183,
	173, -51, 257, 99, -130, 225, 226, 321, -43, 31,
	89, 317, 321, 318, -143, -184, -90, -180, -182, -66,
	-38, -181, 317, 315, -207, -189, -206, 182, 211, 212,
	210, 214, 213, -189, -93, 260, -151, -151, -151, -151,
	-151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
	-151, -151, -151, -151, -151, -151, -151, -151, 156, 129,
	239, 36, 130, -151, 263, -151, -151, -151, -151, 175,
	173, 268, 104, 275, 90, 179, -268, 253, 32, -158,
	-38, 317, -172, 27, 244, 22, -214, -164, 225, 317,
	-146, -151, -147, -95, 318, 318, 321, -95, -163, 316,
	-160, -171, -170, 289, 318, -95, 286, 22, 90, 310,
	-121, 7, -246, 107, 120, 317, 318, 318, -151, -151,
	-115, -208, -95, 4, 295, 165, 82, 125, 164, 231,
	-115, -116, -151, -95, -117, -152, -153, 308, 309, 314,
	317, 225, -118, -151, -95, -151, 43, 152, 264, -119,
	-151, 115, -95, -151, -151, -151, -95, -95, -95, 317,
	7, 7, 260, 260, 7, -143, 318, -173, -44, -66,
	-58, -58, 173, -141, 127, -49, 173, -189, -58, 317,
	317, 147, 147, -58, -58, 127, -58, 127, -58, -58,
	-45, 215, 317, 317, -58, 215, -58, -66, 215, -50,
	126, 248, 115, -66, -110, 220, -151, -110, -133, 183,
	-91, 284, -58, 220, -89, 321, 115, 302, -91, -47,
	-47, -47, -182, -189, 315, 315, 7, 263, 263, 263,
	263, 317, -151, -259, -67, -259, -56, 272, 60, 205,
	-218, -121, 321, 318, 318, 321, -59, 132, -59, -28,
	-93, 5, -28, -66, 99, -52, 95, -267, 302, -58,
	-178, -20, -58, -107, 120, -186, 321, 299, 68, -114,
	146, 168, 116, 154, 222, 135, -148, 322, 317, -177,
	298, -38, -181, -180, 101, 296, -151, -151, 263, -268,
	253, -158, -151, 175, 268, 104, 275, 90, 179, 115,
	317, -152, -152, -95, -155, 317, -95, 316, 325, 318,
	-151, 316, 316, 321, -169, -170, 94, -151, -82, 321,
	-81, -151, -95, -95, 318, 318, -251, 190, 317, 317,
	-151, 30, 321, 318, 115, 318, 318, -123, 197, 318,
	10, 11, 308, 309, 310, 311, 110, 312, 305, 306,
	307, 304, 300, 301, 302, 61, 162, 227, 13, 14,
	15, 144, 130, -152, -152, -152, -95, 317, 318, -156,
	-157, 115, 112, 30, -119, -119, -119, 318, 115, -95,
	321, 321, 321, 318, 318, 318, 7, 318, 321, 318,
	296, 296, 318, -107, 263, 263, 99, 173, 281, -228,
	-225, -151, -85, 317, 317, -42, 93, 237, -126, 99,
	-47, 99, -47, 263, -125, 63, -95, -95, 263, 263,
	115, 248, -97, 220, 62, 318, -97, -143, -99, -90,
	-173, 318, 316, 7, 7, 318, 165, 125, 164, -122,
	164, -122, -122, 7, -58, -77, 131, -142, 317, -59,
	317, 317, -80, 317, -58, -53, 151, -267, -217, -242,
	318, -159, 122, 44, -180, 179, 146, 146, -180, -114,
	146, -112, 189, -112, -112, -177, -214, 323, -95, -176,
	-175, 30, -58, 187, 318, -17, 317, -151, -151, -152,
	-152, 115, 317, -151, -161, 26, 26, 318, -95, 318,
	321, -147, -151, 318, -160, 96, -151, 259, 318, 286,
	-82, -82, -82, 5, -252, -58, 317, 290, -81, 318,
	-207, -189, -151, -156, -151, -207, -189, -152, -152, -152,
	-152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
	-152, -152, -152, -152, -152, -152, 90, 173, 179, -152,
	321, -95, 318, -157, -156, -151, -151, -189, 318, 318,
	318, -95, -151, -151, -151, 318, 7, -159, -58, -58,
	-141, 99, -229, 63, -230, 55, 105, 67, 173, 175,
	274, 202, 53, 85, 209, 318, 318, -85, -85, 173,
	85, 173, 85, 78, 270, -58, -58, -66, -58, -58,
	318, 318, -58, -66, -217, -97, -132, 317, 183, -28,
	-110, 302, 316, 316, 318, 130, -84, -179, -58, -239,
	317, -236, -237, -64, 317, -85, -75, 30, -84, 183,
	-54, 150, -267, -217, -51, -248, 291, -151, -95, 254,
	-180, -180, -113, 280, 183, 146, -180, -176, -150, -149,
	113, 171, 318, -58, 317, -177, 316, -188, 26, 26,
	-151, -161, 318, -151, -151, 318, -151, 316, -151, 5,
	-151, 318, 318, 318, -253, -58, -151, 318, 318, 318,
	-157, 115, 90, 179, 317, -151, 318, 318, 321, 318,
	318, 318, -248, -141, -58, -93, -58, 105, 127, 175,
	147, 317, -152, -66, -140, -264, 66, 251, 318, 318,
	175, 175, -151, -189, -47, -47, 263, 263, 91, -85,
	63, -106, -38, 317, 193, 318, 321, -65, -103, 55,
	-65, -151, 317, -84, 318, 318, -28, 318, -66, -267,
	-217, -52, -249, -250, -58, 260, -113, 317, -151, -180,
	321, 324, 302, -177, 317, -85, -175, -177, 318, -151,
	-151, 318, 318, -82, -247, 195, 318, -152, 115, 317,
	-161, 318, -151, -230, -59, 173, -151, -60, 317, -77,
	317, 209, -46, 55, -58, -58, 276, 174, 318, -58,
	-58, -140, -179, -43, -93, -43, 318, -95, 318, -77,
	-140, 317, -217, -53, 321, 30, -154, -64, -58, -85,
	-149, -214, -176, -85, 318, -176, -17, 318, -82, 44,
	-152, -161, 318, 318, 99, 318, -233, 163, -58, -85,
	-66, -41, 280, -93, 237, -143, 317, -77, -65, -82,
	-140, -77, -84, -54, -250, -252, 317, 318, 318, 316,
	-254, 204, 226, -95, 318, 105, -231, -234, -232, 183,
	116, 194, 240, 318, 318, -80, -151, -98, -85, -43,
	318, -77, 318, -95, -177, 318, -255, -256, 36, 271,
	70, -151, -255, -58, -232, 183, -234, 183, 276, 88,
	-233, -143, 318, -140, -82, -176, -256, 199, 111, 225,
	199, 111, -235, 170, 219, 47, 237, -235, -231, -48,
	47, 219, -77, 318, 26, 20, 175, 85, -256,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 66, 67, 68, 69, 70, 71, 0, 0,
	401, 0, 0, 0, 0, 0, 0, 0, 373, -2,
	0, 139, 0, 321, 0, 321, 321, 325, 0, 403,
	287, 400, -2, 411, 0, 0, 0, 409, 387, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 854,
	882, 883, 884, 901, 902, 903, 904, 905, 906, 907,
	908, 909, 910, 911, 912, 913, 914, 915, 916, 917,
	918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 959, 960, 961, 962, 963, 964, 965, 966, 967,
	968, 969, 970, 971, 972, 973, 974, 975, 976, 977,
	978, 979, 980, 981, 982, 983, 984, 985, 986, 987,
	988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
	998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
	1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 89, 90, 91, 92, 93, 94, 95, 96, 97,
	98, 99, 0, 205, 896, 897, 898, 899, 900, 1079,
	1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
	1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
	1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
	1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
	1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
	1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
	1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
	1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 105, 112, 113, 972, 115, 0, 122,
	123, 124, 126, 127, 128, 129, 130, 131, 132, 0,
	314, 993, 327, 135, 949, 997, 1066, 1012, 142, 152,
	0, 1072, -2, 156, 83, 185, 186, 187, 0, 189,
	207, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	204, 332, 320, 332, 317, 318, 319, 322, 0, 313,
	0, 402, 0, 0, 0, 0, 0, 286, -2, 383,
	384, -2, 0, 406, 406, 406, 0, 0, 384, 0,
	392, 976, 395, 865, 393, 0, 0, 408, 407, 0,
	388, 475, 0, 431, 0, 2, 0, 1051, 475, 0,
	1051, 857, 0, 0, 1051, 0, 0, 0, 0, 855,
	829, 827, 828, 0, 0, 0, 0, 0, 481, 73,
	1051, 52, 1051, 850, 52, 1051, 81, 52, 1051, 0,
	100, 102, 892, 893, 894, 895, 1077, 0, 0, 0,
	0, 110, 0, 114, 116, 0, 0, 0, 326, 136,
	1040, 138, 0, 141, 143, 144, 0, 0, 0, 0,
	0, 0, 155, 180, 181, 84, 0, 0, 209, 0,
	0, 0, 0, 0, 0, 0, 198, 0, 200, 201,
	0, 0, 315, 328, 329, 316, 0, 324, 52, 479,
	259, 1051, 399, 259, 886, 399, 1051, -2, 0, 379,
	418, 419, 0, 0, 0, 404, 405, 0, 0, 0,
	375, 376, 0, 394, 0, 0, 434, 842, 846, 847,
	576, 0, 0, 0, 0, 0, 0, 666, 668, 1045,
	1066, 0, 670, 671, 0, 673, 675, 676, 0, 679,
	680, 820, 854, 868, 869, 870, 871, 0, 0, 0,
	876, 877, 878, 720, 689, -2, -2, 866, 507, 508,
	509, 510, -2, 1079, 693, 695, 697, 698, 699, 700,
	0, 1029, 1046, 1047, 1062, 1063, 1071, 1075, 1076, 1051,
	1059, 1052, 1041, 1049, 1058, 926, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 891, 538, 539,
	544, 545, 547, 434, 432, 476, 477, 0, 0, 839,
	837, 838, 29, 310, 31, 0, 310, 310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 848, 830, 825, 826, 485, 0, 351,
	0, 0, 482, 0, 0, 75, 0, 50, 51, 0,
	77, 0, 0, 79, 0, 401, 0, 0, 1051, 0,
	401, 0, 778, 493, 494, 495, 496, 497, 573, 500,
	501, 502, 503, 504, 505, 506, 514, 515, 516, 517,
	518, 519, 520, 535, 0, 513, 513, 513, 526, 527,
	536, 537, 542, 543, 554, 555, 557, 559, 553, 553,
	553, 550, 551, 0, 776, 0, 119, 0, 921, 852,
	858, 859, 125, 0, 0, 0, 0, 0, 0, 147,
	167, 168, 169, 148, 150, 157, 159, 160, 161, 170,
	171, 172, 173, 276, 0, 278, 183, 184, 879, 0,
	149, 151, 153, 154, 174, 175, 0, 177, 178, 179,
	0, 85, 188, 190, 0, 206, 191, 192, 193, 194,
	195, 196, 199, 202, 203, 0, 0, 323, 279, 0,
	217, 0, 0, 282, 398, 0, 0, 0, 1051, 885,
	337, 0, 382, 416, 417, 420, 423, 424, 421, 576,
	389, 390, 391, 412, 413, 297, 396, 0, 0, 862,
	485, 0, 0, 0, 0, 0, 0, 755, 756, 757,
	758, 759, 760, 763, 764, 761, 762, 765, 766, 767,
	0, 0, 0, 768, 769, 770, 0, 0, 772, 0,
	774, 0, 0, 0, 0, 0, 0, 836, 0, 0,
	0, 845, 771, 581, 582, 583, 605, 606, 0, 667,
	831, 824, 669, 0, -2, 776, 0, 672, 677, 678,
	0, 0, 819, -2, 0, 873, 573, 0, 722, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 799, 805,
	0, 0, 0, 0, 0, 0, 0, 0, 522, 541,
	552, 549, 548, 524, 0, 523, 521, 0, 525, 0,
	0, 0, 485, 0, 0, 841, 0, 0, 0, 0,
	309, 33, 1051, 0, 54, 0, 0, 249, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 856, 0, 0, 0, 62, 60, 0, 0,
	0, 362, 0, 362, 353, 0, 0, 0, 349, 365,
	366, 368, 369, 0, 0, 483, 74, 851, 52, 82,
	52, 52, 88, 101, 0, 103, 106, 107, 108, 109,
	104, 0, 486, 488, 498, 0, 560, 561, 562, 563,
	564, 565, 574, 111, 0, 0, 0, 120, 121, 860,
	861, 0, 0, 140, 145, 146, 333, 0, 164, 0,
	166, 0, 277, 881, 880, 573, 86, 208, 133, 330,
	331, 480, 0, 0, 216, 862, 218, 220, 221, 222,
	223, 886, 0, 886, 0, 0, 280, 0, 0, 0,
	0, 339, 345, 0, 422, 425, 426, 0, 415, 295,
	296, 401, 0, 864, 428, 843, 466, 435, 443, 475,
	452, 447, 0, 0, 577, 489, 490, 528, 529, 530,
	531, 532, 533, 578, 579, 0, 584, 585, 586, 587,
	588, 589, 590, 591, 592, 593, -2, -2, -2, 597,
	598, 599, -2, -2, -2, 603, 604, -2, 773, 775,
	0, 836, 0, -2, 0, 613, -2, -2, -2, 617,
	0, 620, 622, 624, 0, 0, 0, 0, 835, 634,
	811, 0, 0, 752, 753, 754, 844, 619, 0, 0,
	832, 823, 0, 0, -2, 674, 0, 0, 0, 782,
	783, 818, 814, 0, 681, 411, 0, 0, 0, 0,
	874, 0, 730, 0, 0, 0, 694, 696, 0, 0,
	0, 0, 786, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 776, 796, 0, 0, 637, 0, 0, 0,
	0, 1066, 0, 776, 804, 0, 0, 0, 0, 0,
	776, 0, 810, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 428, 478, 840, 32, 299,
	0, 0, 0, 35, 1051, 43, 0, 231, 0, 0,
	0, 0, 0, 312, 44, 1051, 52, 1051, 52, 45,
	30, 310, 0, 0, 303, 0, 298, 301, 0, 59,
	0, 64, 0, 849, 72, 0, 484, 346, 347, 0,
	0, 355, 352, 0, 485, 0, 0, 0, 0, 76,
	78, 80, 0, 779, 0, 0, 0, 0, 0, 0,
	0, 0, 777, 117, 853, 118, 137, 162, 163, 165,
	158, 176, 0, 225, 258, 0, 0, 886, 0, 214,
	259, 281, 283, 0, 0, 341, 345, 0, 344, 399,
	414, 0, 863, 430, 0, 433, 0, 0, 0, 0,
	0, 0, 472, 472, 472, 470, 452, 0, 0, 464,
	0, -2, 447, 0, 401, 0, -2, -2, 0, 0,
	0, 635, -2, 618, 621, 623, 625, 0, 0, 0,
	0, 0, 0, 0, 636, 0, 0, 821, 824, -2,
	777, 780, 781, 0, 0, 815, 0, 0, 0, 0,
	410, 411, 411, 411, 687, 0, 688, 0, 0, 0,
	0, 0, 0, 703, 0, 704, 705, 0, 0, 706,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 640, 641, 642, 0, 0, 707, 802,
	803, 0, 0, 0, 0, 0, 0, 712, 0, 809,
	0, 0, 0, 716, 717, 718, 0, 511, 0, 534,
	556, 558, 546, 430, 0, 0, 0, 0, 53, 229,
	248, 0, 0, 0, 0, 37, 0, 0, 0, 0,
	41, 0, 47, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 361, 0, 360, 0, 350, 362, 367, 364,
	370, 0, 491, 0, 0, 499, 566, 567, 568, 569,
	570, 571, 572, 0, 134, 212, 0, 219, 0, 0,
	0, 217, 0, 0, 0, 343, 345, 0, 336, 337,
	397, 724, 0, 0, 436, 0, 0, 0, 0, 0,
	0, 467, 471, 468, 469, 464, 441, 0, 0, 446,
	463, 0, 462, 451, -2, 0, 0, 580, -2, 0,
	0, 0, 0, -2, 0, 0, 0, 812, 0, 747,
	0, 0, 823, -2, 784, 813, 817, 0, 682, 0,
	0, 0, 0, 875, 728, 729, 733, 0, 0, 692,
	0, 0, 785, 795, 797, 638, 639, 643, 644, 645,
	646, 647, 648, 649, 650, 651, 652, -2, -2, -2,
	656, 657, 658, -2, -2, -2, 0, 0, 0, 798,
	0, 0, 750, 800, 801, 806, 807, 0, 709, 710,
	711, 808, 0, 0, 0, 540, 0, 724, 305, 307,
	34, 0, 230, 0, 233, 0, 0, 0, 0, 239,
	240, 0, 0, 0, 0, 250, 257, 0, 0, 0,
	49, 0, 0, 311, 0, 52, 52, 300, 0, 0,
	210, 211, 304, 302, 61, 348, 0, 0, 0, 354,
	363, 0, 492, 487, 575, 0, 0, 288, 294, 294,
	0, 690, 691, 0, 0, 0, 0, 0, 0, 0,
	334, 345, 0, 338, 339, 385, 0, 429, 427, 0,
	454, 0, 456, 0, 0, 0, 458, 444, 0, 439,
	0, 438, 452, 460, 0, 0, 452, 0, 0, 0,
	-2, 0, 628, -2, -2, 746, 777, 822, 816, 872,
	411, 683, 685, 686, 735, 732, 0, 719, 701, 702,
	794, 0, 0, 0, 0, 777, 749, 708, 0, 714,
	715, 512, 386, 36, 0, 234, 235, 886, 0, 238,
	241, 0, 243, 888, 225, 0, 254, 255, 252, 0,
	38, 39, 48, 56, 40, 46, 0, 0, 0, 0,
	0, 371, 372, 0, 0, 257, 0, 297, 867, 0,
	297, 0, 0, 0, 247, 225, 215, 257, 0, 0,
	340, 341, 723, 725, 0, 0, 455, 0, 474, 457,
	0, 442, 0, 464, 0, 0, 448, 464, 401, -2,
	-2, 629, 748, 0, 411, 0, 721, -2, 0, 0,
	0, 751, 0, 232, 236, 0, 0, 263, 0, 251,
	0, 0, 58, 0, 306, 308, 0, 357, 485, 359,
	0, 225, 289, 290, 293, 291, 294, 411, 257, 213,
	225, 0, 342, 343, 0, 0, 465, 0, 0, 0,
	440, 437, 445, 0, 461, 449, 0, 684, 738, 0,
	-2, 0, 664, 713, 0, 242, 268, 0, 0, 0,
	259, 42, 0, 55, 0, 358, 0, 245, 297, 0,
	225, 284, 0, 335, 726, 727, 0, 473, 459, 452,
	0, 0, 0, 734, 665, 0, 244, 264, 265, 0,
	260, 261, 262, 887, 256, 263, 57, 485, 0, 292,
	682, 246, 257, 411, 464, 731, 736, 739, -2, 1015,
	918, 0, 737, 237, 266, 0, 267, 0, 0, 0,
	268, 356, 228, 225, 0, 450, 0, 741, 742, 743,
	744, 745, 269, 0, 272, 273, 0, 270, 253, 224,
	226, 227, 285, 0, 0, 271, 274, 275, 740,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 306, 3, 312, 307, 3,
	317, 318, 310, 308, 321, 309, 319, 311, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 325, 320,
	300, 302, 301, 3, 322, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 315, 3, 316, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 323, 304, 324, 314,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 303, 57643, 313, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:749
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:755
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:761
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:798
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:808
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:835
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:854
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:877
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:916
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:926
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:950
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:954
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:959
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Database: Name(sqlDollar[3].str), To: Name(sqlDollar[5].str), IncrementalFrom: Name(sqlDollar[6].str)}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:963
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Database: Name(sqlDollar[3].str), From: Name(sqlDollar[5].str)}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.str = ""
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 83:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 85:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 87:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1106
		{ /* SKIP DOC */
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 103:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1293
		{
			return unimplemented(sqllex)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{ /* SKIP DOC */
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1365
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1371
		{
			return unimplemented(sqllex)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = Low
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = Normal
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = High
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			return unimplemented(sqllex)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1492
		{
			return unimplemented(sqllex)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1493
		{
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 224:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1689
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = DropDefault
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1778
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1906
		{
			return unimplemented(sqllex)
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1907
		{
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1914
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1915
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1918
		{
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1924
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1928
		{
			return unimplemented(sqllex)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1930
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 282:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = true
		}
	case 287:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = false
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2038
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2039
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2042
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2043
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = Ascending
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = Descending
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 298:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2097
		{
			return unimplemented(sqllex)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2098
		{
			return unimplemented(sqllex)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = true
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = false
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2155
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.str = ""
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.str = ""
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: Name(sqlDollar[5].str),
				Encoding: Name(sqlDollar[6].str),
				Collate:  Name(sqlDollar[7].str),
				CType:    Name(sqlDollar[8].str),
			}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    Name(sqlDollar[8].str),
				Encoding:    Name(sqlDollar[9].str),
				Collate:     Name(sqlDollar[10].str),
				CType:       Name(sqlDollar[11].str),
			}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.str = ""
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.str = ""
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.str = ""
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.str = ""
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2277
		{
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2278
		{
		}
	case 346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2297
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2304
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2346
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			return unimplemented(sqllex)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2375
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2376
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2559
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2585
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2603
		{
			return unimplemented(sqllex)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			return unimplemented(sqllex)
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2605
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			return unimplemented(sqllex)
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2609
		{
			return unimplemented(sqllex)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2612
		{
			return unimplemented(sqllex)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2615
		{
		}
	case 399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2616
		{
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			return unimplemented(sqllex)
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2620
		{
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2624
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = true
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = false
		}
	case 406:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = false
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = true
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2647
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2648
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2662
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2686
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2706
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2733
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2747
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2748
		{
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2778
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 430:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2806
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = &From{}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2849
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2854
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = true
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = false
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.str = astFullJoin
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.str = astLeftJoin
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.str = astRightJoin
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.str = astInnerJoin
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3137
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3152
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3161
		{
			return unimplemented(sqllex)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3179
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3208
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3217
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = nil
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3266
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = oidPseudoTypeOid
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = oidPseudoTypeRegProc
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = oidPseudoTypeRegClass
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = oidPseudoTypeRegType
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = oidPseudoTypeRegNamespace
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3365
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3397
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3437
		{
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = year
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = month
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = day
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = hour
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = minute
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = month
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = hour
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = minute
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = minute
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3522
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = second
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3529
		{
			return unimplemented(sqllex)
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3564
		{
			return unimplemented(sqllex)
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			return unimplemented(sqllex)
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3790
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4016
		{
			return unimplemented(sqllex)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4017
		{
			return unimplemented(sqllex)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4040
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			return unimplemented(sqllex)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4057
		{
			return unimplemented(sqllex)
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4061
		{
			return unimplemented(sqllex)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4078
		{
			return unimplemented(sqllex)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			return unimplemented(sqllex)
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
			return unimplemented(sqllex)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4081
		{
			return unimplemented(sqllex)
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4110
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4154
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4155
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = Window(nil)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.str = ""
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4254
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			return unimplemented(sqllex)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4258
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4265
		{
			return unimplemented(sqllex)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4266
		{
			return unimplemented(sqllex)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4267
		{
			return unimplemented(sqllex)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			return unimplemented(sqllex)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = Any
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4313
		{
			sqlVAL.union.val = Some
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = All
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = Plus
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = Minus
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = Mult
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = Div
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = FloorDiv
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = Mod
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = Bitand
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = Bitor
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = Bitxor
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = Bitxor
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = LT
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = GT
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = EQ
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = LE
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = GE
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = NE
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = Like
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = NotLike
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = ILike
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = NotILike
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 805:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4643
		{
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4696
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4803
		{
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4839
		{
			return unimplemented(sqllex)
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = DNull
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4868
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.str = ""
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 888:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
