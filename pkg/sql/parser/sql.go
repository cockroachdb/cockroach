// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESET = 57563
const RESTORE = 57564
const RESTRICT = 57565
const RETURNING = 57566
const REVOKE = 57567
const RIGHT = 57568
const ROLLBACK = 57569
const ROLLUP = 57570
const ROW = 57571
const ROWS = 57572
const RSHIFT = 57573
const STATUS = 57574
const SAVEPOINT = 57575
const SEARCH = 57576
const SECOND = 57577
const SELECT = 57578
const SERIAL = 57579
const SERIALIZABLE = 57580
const SESSION = 57581
const SESSION_USER = 57582
const SET = 57583
const SHOW = 57584
const SIMILAR = 57585
const SIMPLE = 57586
const SMALLINT = 57587
const SMALLSERIAL = 57588
const SNAPSHOT = 57589
const SOME = 57590
const SPLIT = 57591
const SQL = 57592
const START = 57593
const STDIN = 57594
const STRICT = 57595
const STRING = 57596
const STORING = 57597
const SUBSTRING = 57598
const SYMMETRIC = 57599
const SYSTEM = 57600
const TABLE = 57601
const TABLES = 57602
const TEMPLATE = 57603
const TEXT = 57604
const THEN = 57605
const TIME = 57606
const TIMESTAMP = 57607
const TIMESTAMPTZ = 57608
const TO = 57609
const TRAILING = 57610
const TRANSACTION = 57611
const TREAT = 57612
const TRIM = 57613
const TRUE = 57614
const TRUNCATE = 57615
const TYPE = 57616
const UNBOUNDED = 57617
const UNCOMMITTED = 57618
const UNION = 57619
const UNIQUE = 57620
const UNKNOWN = 57621
const UPDATE = 57622
const UPSERT = 57623
const USER = 57624
const USERS = 57625
const USING = 57626
const VALID = 57627
const VALIDATE = 57628
const VALUE = 57629
const VALUES = 57630
const VARCHAR = 57631
const VARIADIC = 57632
const VIEW = 57633
const VARYING = 57634
const WHEN = 57635
const WHERE = 57636
const WINDOW = 57637
const WITH = 57638
const WITHIN = 57639
const WITHOUT = 57640
const YEAR = 57641
const ZONE = 57642
const NOT_LA = 57643
const WITH_LA = 57644
const AS_LA = 57645
const POSTFIXOP = 57646
const UMINUS = 57647

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5410

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 29,
	324, 29,
	-2, 415,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	277, 398,
	-2, 388,
	-1, 64,
	98, 397,
	142, 397,
	158, 397,
	183, 397,
	189, 397,
	277, 397,
	-2, 391,
	-1, 73,
	1, 29,
	324, 29,
	-2, 415,
	-1, 424,
	1, 195,
	324, 195,
	-2, 980,
	-1, 461,
	158, 425,
	183, 425,
	-2, 394,
	-1, 464,
	158, 424,
	183, 424,
	-2, 392,
	-1, 596,
	158, 424,
	183, 424,
	-2, 395,
	-1, 655,
	321, 914,
	-2, 907,
	-1, 656,
	321, 915,
	-2, 908,
	-1, 662,
	5, 583,
	321, 583,
	-2, 1084,
	-1, 686,
	5, 544,
	-2, 1058,
	-1, 687,
	5, 577,
	321, 577,
	-2, 1060,
	-1, 688,
	5, 552,
	-2, 1061,
	-1, 689,
	5, 551,
	-2, 1062,
	-1, 690,
	5, 577,
	321, 577,
	-2, 1065,
	-1, 691,
	5, 577,
	321, 577,
	-2, 1066,
	-1, 692,
	5, 578,
	-2, 1069,
	-1, 693,
	5, 538,
	-2, 1070,
	-1, 694,
	5, 538,
	-2, 1071,
	-1, 695,
	5, 559,
	-2, 1075,
	-1, 696,
	5, 539,
	-2, 1080,
	-1, 697,
	5, 540,
	-2, 1081,
	-1, 698,
	5, 541,
	-2, 1082,
	-1, 699,
	5, 542,
	-2, 1083,
	-1, 700,
	5, 538,
	-2, 1088,
	-1, 701,
	5, 545,
	-2, 1093,
	-1, 702,
	5, 543,
	-2, 1096,
	-1, 703,
	5, 575,
	321, 575,
	-2, 1098,
	-1, 704,
	5, 579,
	-2, 1101,
	-1, 705,
	5, 581,
	-2, 1102,
	-1, 706,
	5, 574,
	321, 574,
	-2, 1106,
	-1, 966,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	277, 398,
	-2, 702,
	-1, 975,
	321, 891,
	-2, 879,
	-1, 1183,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 618,
	-1, 1184,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 619,
	-1, 1185,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 620,
	-1, 1189,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 624,
	-1, 1190,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 625,
	-1, 1191,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 626,
	-1, 1194,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 631,
	-1, 1200,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 633,
	-1, 1203,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 638,
	-1, 1204,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 639,
	-1, 1205,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 640,
	-1, 1232,
	194, 773,
	-2, 776,
	-1, 1261,
	115, 813,
	321, 914,
	-2, 907,
	-1, 1262,
	115, 814,
	-2, 1054,
	-1, 1263,
	115, 815,
	-2, 979,
	-1, 1264,
	115, 816,
	-2, 948,
	-1, 1265,
	115, 817,
	-2, 963,
	-1, 1266,
	115, 818,
	-2, 978,
	-1, 1267,
	115, 819,
	-2, 1022,
	-1, 1421,
	98, 398,
	142, 398,
	158, 398,
	183, 398,
	189, 398,
	277, 398,
	-2, 474,
	-1, 1425,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 632,
	-1, 1426,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 634,
	-1, 1431,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 635,
	-1, 1449,
	194, 772,
	-2, 775,
	-1, 1637,
	1, 475,
	68, 475,
	98, 475,
	116, 475,
	120, 475,
	122, 475,
	135, 475,
	142, 475,
	147, 475,
	155, 475,
	158, 475,
	170, 475,
	183, 475,
	185, 475,
	189, 475,
	224, 475,
	226, 475,
	277, 475,
	284, 475,
	294, 475,
	295, 475,
	303, 475,
	320, 475,
	322, 475,
	324, 475,
	325, 475,
	-2, 474,
	-1, 1639,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 636,
	-1, 1644,
	145, 0,
	-2, 652,
	-1, 1654,
	194, 774,
	-2, 777,
	-1, 1688,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 679,
	-1, 1689,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 680,
	-1, 1690,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 681,
	-1, 1694,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 685,
	-1, 1695,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 686,
	-1, 1696,
	13, 0,
	14, 0,
	15, 0,
	304, 0,
	305, 0,
	306, 0,
	-2, 687,
	-1, 1815,
	145, 0,
	-2, 653,
	-1, 1818,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 656,
	-1, 1819,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 658,
	-1, 1922,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 657,
	-1, 1923,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 659,
	-1, 1930,
	145, 0,
	-2, 688,
	-1, 1984,
	145, 0,
	-2, 689,
	-1, 2045,
	36, 0,
	129, 0,
	157, 0,
	243, 0,
	301, 0,
	-2, 1057,
}

const sqlPrivate = 57344

const sqlLast = 27643

var sqlAct = [...]int{

	656, 2044, 1594, 2024, 1632, 2069, 1990, 2025, 1859, 2026,
	2043, 465, 1419, 1064, 884, 1633, 1665, 1781, 1147, 1903,
	1883, 1122, 294, 778, 1604, 1725, 654, 1542, 653, 1806,
	1056, 86, 86, 86, 280, 1739, 486, 1792, 472, 63,
	1416, 510, 890, 296, 86, 86, 86, 632, 1397, 86,
	1126, 1786, 86, 1395, 741, 1140, 1543, 528, 739, 646,
	86, 86, 1510, 49, 1346, 1121, 615, 747, 86, 86,
	1460, 1610, 86, 1509, 1162, 86, 86, 86, 86, 971,
	63, 86, 86, 1230, 425, 1290, 886, 1407, 1619, 1096,
	1125, 719, 722, 1154, 1340, 1065, 1029, 1020, 1402, 1240,
	1217, 626, 1160, 501, 1287, 1214, 907, 1048, 839, 724,
	287, 28, 63, 582, 286, 16, 1155, 751, 1258, 1089,
	288, 8, 1080, 748, 962, 1116, 625, 616, 583, 529,
	470, 522, 523, 1157, 520, 1058, 464, 912, 475, 1740,
	1129, 599, 1001, 1005, 600, 64, 412, 841, 598, 755,
	78, 648, 837, 516, 403, 282, 20, 82, 473, 581,
	603, 415, 1915, 1448, 1057, 1916, 293, 1061, 293, 293,
	2060, 65, 764, 744, 1093, 915, 916, 764, 469, 469,
	1417, 764, 268, 762, 28, 734, 2039, 2032, 16, 1738,
	744, 1358, 1049, 2022, 8, 1357, 1086, 2017, 918, 2013,
	744, 1986, 744, 1099, 1086, 483, 451, 492, 489, 462,
	62, 496, 62, 62, 1405, 1968, 1980, 1094, 619, 744,
	917, 1962, 1958, 1953, 1738, 744, 1952, 477, 1924, 20,
	1913, 1086, 1049, 773, 1910, 461, 40, 1911, 40, 40,
	1897, 69, 1894, 1738, 41, 744, 41, 41, 1892, 1870,
	1869, 1738, 744, 1738, 1052, 914, 1841, 1095, 1092, 1099,
	1820, 913, 1817, 1099, 71, 1086, 42, 1809, 42, 42,
	1099, 1737, 1052, 1405, 1738, 923, 86, 86, 86, 86,
	86, 1648, 532, 1580, 1099, 1574, 1055, 1527, 1055, 1525,
	1528, 1524, 1099, 72, 1099, 1701, 1651, 1523, 915, 916,
	1099, 67, 1449, 1452, 1451, 1099, 1382, 68, 1453, 1099,
	1384, 1018, 1385, 744, 1099, 1459, 1151, 1103, 69, 744,
	1099, 918, 1098, 1234, 1146, 1099, 66, 1097, 933, 1085,
	1054, 1017, 1086, 1055, 1016, 772, 530, 1111, 773, 611,
	879, 71, 878, 917, 831, 470, 830, 744, 765, 499,
	422, 545, 482, 765, 73, 1741, 505, 765, 863, 565,
	1420, 2058, 2042, 525, 525, 2031, 1995, 1981, 779, 1895,
	72, 1846, 1800, 1842, 915, 916, 1834, 69, 67, 69,
	610, 69, 69, 1833, 68, 53, 1832, 53, 53, 1828,
	1827, 1091, 1826, 1772, 1766, 649, 934, 918, 923, 86,
	71, 1357, 71, 1060, 71, 71, 1716, 1711, 1710, 517,
	509, 452, 526, 1090, 86, 1709, 1659, 86, 86, 917,
	1637, 1609, 1584, 915, 916, 932, 1532, 1529, 1517, 72,
	1508, 72, 1479, 72, 72, 1476, 1475, 1473, 1465, 67,
	1464, 67, 67, 1387, 1383, 68, 918, 68, 68, 1304,
	768, 86, 1226, 1255, 86, 763, 86, 86, 86, 882,
	86, 1254, 66, 715, 66, 913, 1626, 281, 917, 610,
	1418, 889, 979, 597, 923, 86, 927, 919, 920, 921,
	922, 924, 972, 944, 66, 507, 86, 2041, 609, 1480,
	1481, 1667, 2005, 1965, 915, 916, 1951, 1943, 1941, 532,
	86, 1932, 1919, 1906, 1890, 1856, 296, 532, 1839, 86,
	915, 916, 1811, 1775, 86, 86, 86, 918, 86, 714,
	1762, 1744, 1643, 923, 1624, 1602, 1600, 933, 745, 1599,
	1765, 1597, 596, 553, 1551, 1480, 1481, 86, 86, 917,
	589, 1550, 592, 1507, 1227, 86, 713, 86, 554, 1469,
	1468, 753, 1445, 1440, 1582, 917, 1480, 1481, 532, 532,
	1219, 1373, 1318, 1317, 1297, 1253, 296, 86, 1150, 86,
	86, 86, 86, 86, 86, 86, 1006, 1009, 548, 550,
	86, 86, 1013, 999, 998, 997, 86, 588, 864, 1486,
	996, 995, 994, 993, 86, 934, 992, 586, 991, 990,
	919, 920, 921, 922, 924, 584, 944, 888, 989, 715,
	988, 987, 86, 986, 985, 86, 846, 846, 462, 984,
	983, 2015, 738, 505, 976, 965, 66, 823, 606, 607,
	883, 487, 1318, 612, 614, 1486, 911, 829, 551, 541,
	539, 1914, 1822, 1801, 461, 1797, 1771, 517, 1770, 915,
	916, 972, 709, 1367, 708, 1366, 1486, 743, 857, 856,
	963, 850, 847, 1955, 1917, 757, 1398, 754, 730, 776,
	774, 1049, 928, 925, 926, 927, 919, 920, 921, 922,
	924, 893, 944, 1769, 1480, 1481, 1359, 1798, 1011, 1420,
	559, 508, 1012, 1531, 470, 825, 1530, 827, 1424, 1273,
	826, 575, 560, 981, 887, 1341, 1787, 767, 859, 1496,
	770, 852, 858, 1456, 1057, 1668, 968, 1241, 86, 868,
	276, 1002, 1353, 579, 1538, 1998, 86, 921, 922, 924,
	86, 944, 880, 715, 86, 86, 661, 2055, 86, 860,
	1752, 1957, 897, 1102, 896, 86, 895, 1030, 76, 462,
	909, 444, 462, 462, 641, 580, 450, 1379, 449, 86,
	2056, 86, 86, 445, 86, 1878, 1877, 86, 1564, 86,
	86, 881, 86, 277, 532, 903, 1023, 1497, 904, 905,
	1563, 975, 1535, 1534, 1486, 83, 83, 270, 978, 1480,
	1481, 1482, 1483, 1484, 1485, 1487, 1427, 817, 395, 396,
	397, 75, 944, 414, 272, 1372, 426, 1077, 1033, 1371,
	1370, 63, 459, 861, 414, 426, 63, 1733, 944, 1369,
	1201, 902, 476, 476, 1034, 1036, 270, 1100, 530, 270,
	270, 495, 270, 1003, 1004, 83, 502, 1496, 1007, 1484,
	1485, 1487, 557, 1046, 1010, 1956, 915, 916, 1045, 1734,
	1042, 1014, 273, 1074, 525, 1051, 525, 1490, 1482, 1483,
	1484, 1485, 1487, 1039, 296, 1043, 1026, 1581, 86, 918,
	468, 1047, 725, 585, 726, 725, 725, 726, 726, 498,
	1761, 558, 1301, 86, 86, 1300, 1115, 1172, 1083, 1486,
	86, 917, 1082, 1063, 1141, 1072, 454, 1093, 1084, 1032,
	278, 1073, 1075, 1078, 1076, 1497, 1567, 1861, 1569, 1216,
	1022, 1059, 1241, 1059, 467, 86, 1562, 865, 86, 1343,
	869, 870, 871, 872, 873, 749, 731, 537, 74, 404,
	876, 877, 279, 1081, 1216, 785, 2003, 732, 2028, 1729,
	1094, 1730, 1496, 1152, 727, 1105, 923, 727, 727, 1007,
	409, 1010, 2055, 296, 758, 405, 862, 944, 1553, 1104,
	77, 469, 1004, 1003, 1022, 1097, 851, 848, 731, 1732,
	1021, 2066, 1031, 1378, 1589, 1224, 1735, 1144, 1145, 406,
	1095, 1092, 1491, 1488, 1489, 1490, 1482, 1483, 1484, 1485,
	1487, 1347, 455, 1119, 1572, 1223, 275, 274, 408, 933,
	1221, 2072, 1171, 2077, 2019, 764, 1355, 1118, 1586, 1336,
	1497, 460, 1333, 1480, 1481, 456, 1120, 753, 576, 2029,
	86, 86, 86, 736, 457, 1351, 86, 2020, 735, 86,
	270, 518, 270, 426, 426, 86, 86, 86, 86, 86,
	1946, 1153, 1731, 86, 1097, 1303, 86, 86, 1587, 466,
	1097, 1231, 1238, 532, 536, 1380, 86, 555, 1235, 1000,
	1136, 86, 1243, 86, 1347, 556, 2030, 934, 1928, 1329,
	86, 1891, 723, 1260, 1260, 1271, 1311, 1282, 577, 960,
	86, 1467, 1620, 1294, 1295, 1296, 1228, 1225, 1488, 1489,
	1490, 1482, 1483, 1484, 1485, 1487, 1862, 469, 407, 1249,
	2065, 86, 86, 1636, 578, 1568, 1554, 1268, 1305, 2027,
	2054, 2052, 532, 1486, 1091, 1780, 1138, 556, 1097, 568,
	1560, 546, 401, 1349, 470, 544, 2070, 602, 1306, 1339,
	1198, 86, 1328, 86, 1429, 86, 711, 728, 601, 86,
	728, 728, 410, 86, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 542, 944, 1872, 1697, 1837, 2083, 1215,
	1871, 1854, 86, 602, 1585, 836, 1496, 404, 547, 1938,
	846, 426, 426, 1386, 1019, 1388, 1342, 2071, 1352, 2078,
	1537, 765, 1314, 1751, 1748, 1310, 1139, 1360, 409, 63,
	1750, 2064, 811, 405, 810, 2073, 1330, 1331, 710, 894,
	885, 1991, 601, 834, 875, 414, 1807, 1107, 270, 1274,
	426, 591, 426, 1364, 594, 835, 1377, 406, 1109, 1390,
	1381, 1222, 1605, 1196, 1199, 470, 1375, 1376, 832, 476,
	1782, 1855, 1320, 1319, 1497, 1795, 408, 1110, 1615, 1614,
	270, 1698, 555, 593, 467, 515, 1108, 1699, 1838, 1595,
	2082, 1195, 514, 1400, 83, 1458, 1773, 1361, 1338, 1362,
	1363, 1083, 1404, 270, 1422, 1082, 1808, 1611, 270, 270,
	270, 1084, 759, 1401, 1747, 1852, 784, 1403, 1423, 1252,
	1749, 1931, 1836, 470, 1163, 1170, 1511, 1642, 1566, 1389,
	1474, 270, 270, 1392, 1439, 1344, 1101, 1853, 1053, 83,
	1430, 83, 574, 573, 1428, 1443, 1081, 572, 571, 570,
	569, 785, 785, 1446, 566, 1482, 1483, 1484, 1485, 1487,
	513, 426, 1444, 83, 426, 426, 426, 426, 426, 874,
	1212, 1462, 1463, 506, 426, 426, 407, 1197, 1512, 1455,
	414, 982, 470, 867, 1210, 1548, 658, 1547, 892, 1251,
	2023, 1988, 1414, 1410, 1722, 1558, 1556, 1536, 86, 86,
	1394, 1142, 1134, 1079, 1506, 771, 476, 769, 766, 502,
	761, 737, 1413, 733, 729, 1519, 1656, 1396, 1549, 1885,
	410, 604, 2056, 86, 1618, 512, 86, 1576, 86, 1514,
	1515, 1516, 1411, 854, 1437, 86, 1315, 562, 532, 480,
	1148, 1887, 1533, 1038, 3, 1601, 86, 1206, 1435, 86,
	79, 1573, 1948, 1540, 1570, 1207, 1741, 1208, 296, 511,
	86, 1213, 1575, 785, 291, 23, 1983, 1561, 1969, 1627,
	1598, 400, 1565, 1274, 1274, 289, 22, 290, 11, 1612,
	1628, 1022, 915, 916, 608, 1606, 1415, 1037, 1041, 605,
	1625, 1579, 1578, 1577, 63, 1365, 1607, 1328, 1149, 1040,
	1588, 1590, 1591, 1412, 1645, 918, 1778, 481, 86, 503,
	1137, 1432, 270, 1661, 1662, 1663, 1596, 563, 488, 411,
	1027, 1433, 785, 1133, 270, 1438, 1608, 917, 270, 1044,
	1062, 500, 270, 1315, 1274, 1274, 1274, 1617, 23, 1050,
	1621, 1622, 910, 504, 1631, 828, 292, 10, 1557, 22,
	1559, 11, 1209, 270, 1088, 1070, 1071, 443, 270, 1211,
	785, 270, 1613, 426, 426, 1616, 426, 777, 284, 9,
	2080, 1649, 1652, 1655, 2081, 86, 86, 86, 283, 7,
	1669, 1022, 923, 285, 4, 1824, 1671, 1035, 1480, 1481,
	2002, 1674, 86, 915, 916, 1676, 2016, 86, 1972, 86,
	1804, 86, 86, 86, 86, 86, 1717, 532, 811, 811,
	810, 810, 1704, 1746, 446, 447, 1434, 1548, 1745, 1547,
	10, 1742, 1592, 1436, 1705, 1113, 1112, 1721, 1583, 1526,
	1368, 1302, 1299, 1702, 1298, 933, 1248, 1114, 969, 1884,
	86, 86, 9, 1664, 1712, 1718, 1391, 532, 979, 977,
	1549, 453, 7, 1860, 402, 86, 86, 4, 866, 86,
	567, 1776, 1117, 1799, 1548, 1774, 1547, 532, 86, 1548,
	1779, 1547, 1803, 1623, 1760, 86, 2018, 270, 1124, 1763,
	1829, 1768, 1466, 1902, 502, 1927, 1250, 1274, 1274, 980,
	1812, 39, 784, 784, 1783, 1545, 635, 1549, 1723, 1539,
	1128, 1127, 1549, 934, 1785, 1784, 1777, 1816, 86, 270,
	299, 855, 426, 657, 840, 849, 813, 1259, 1164, 712,
	811, 530, 810, 659, 1802, 782, 660, 783, 1008, 647,
	470, 780, 1066, 1220, 1239, 1454, 973, 627, 1789, 639,
	638, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
	1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
	1236, 1274, 538, 86, 1805, 86, 52, 86, 86, 552,
	1767, 1790, 1791, 420, 421, 1796, 86, 1835, 812, 811,
	1350, 810, 86, 1764, 919, 920, 921, 922, 924, 1143,
	944, 898, 1555, 458, 1477, 540, 1280, 1272, 1864, 1269,
	587, 1866, 718, 961, 784, 1548, 86, 1547, 1067, 564,
	1847, 1356, 1087, 1848, 270, 1308, 1309, 811, 613, 810,
	1027, 86, 753, 1316, 532, 906, 479, 1886, 86, 1321,
	1322, 1324, 1326, 1327, 631, 1863, 86, 1332, 1549, 478,
	1334, 270, 1548, 1893, 1547, 1123, 1888, 824, 561, 1879,
	270, 1850, 86, 86, 1912, 270, 833, 1354, 1106, 954,
	951, 1880, 1918, 784, 270, 448, 1865, 269, 1921, 1905,
	1868, 1899, 1940, 1920, 270, 1549, 785, 1926, 1909, 1901,
	1163, 1672, 1900, 1135, 1313, 2076, 1947, 1552, 1997, 1163,
	1677, 70, 1954, 86, 1882, 1117, 1117, 1337, 27, 24,
	21, 784, 1942, 1933, 19, 18, 484, 785, 785, 491,
	494, 26, 484, 17, 25, 1936, 785, 785, 86, 86,
	1945, 15, 1708, 14, 13, 892, 781, 892, 86, 426,
	12, 38, 86, 270, 37, 1937, 36, 1399, 1963, 35,
	532, 1961, 34, 1944, 33, 6, 1964, 86, 5, 785,
	2, 1, 1908, 86, 1441, 1442, 270, 1973, 296, 86,
	86, 0, 1971, 1978, 0, 0, 1967, 0, 1970, 0,
	0, 0, 0, 0, 1896, 0, 0, 1875, 1876, 1982,
	1976, 1979, 86, 0, 86, 1975, 0, 86, 1974, 86,
	0, 0, 63, 1274, 470, 0, 1985, 0, 1966, 0,
	0, 0, 0, 1994, 2006, 1993, 0, 2008, 0, 86,
	0, 2007, 86, 2001, 0, 1503, 1504, 1505, 0, 0,
	0, 0, 0, 0, 0, 2010, 2012, 2014, 2011, 2004,
	0, 0, 1548, 2009, 1547, 0, 0, 0, 1406, 0,
	0, 0, 0, 0, 86, 0, 86, 0, 0, 0,
	2038, 2033, 2035, 0, 0, 0, 0, 2036, 0, 0,
	0, 0, 0, 0, 86, 1549, 0, 2037, 2040, 0,
	0, 2049, 0, 1999, 2053, 2051, 0, 2000, 87, 785,
	2057, 86, 0, 0, 0, 2062, 1410, 2063, 2061, 0,
	0, 0, 813, 813, 0, 1274, 0, 0, 0, 0,
	0, 2075, 2074, 707, 2079, 1413, 0, 2059, 0, 2021,
	484, 0, 494, 1544, 0, 0, 0, 1408, 0, 0,
	0, 297, 2084, 0, 0, 1411, 0, 0, 0, 0,
	0, 0, 0, 811, 0, 810, 0, 0, 0, 0,
	1409, 0, 0, 0, 0, 0, 298, 0, 0, 0,
	0, 0, 270, 270, 812, 812, 0, 0, 0, 0,
	0, 1874, 0, 0, 811, 811, 810, 810, 1640, 1641,
	0, 0, 0, 811, 811, 810, 810, 1593, 0, 0,
	1027, 0, 892, 0, 0, 0, 0, 0, 785, 1603,
	1274, 0, 0, 0, 0, 0, 1412, 0, 0, 0,
	270, 0, 0, 270, 813, 0, 811, 1406, 810, 0,
	0, 0, 0, 0, 1635, 0, 0, 784, 0, 0,
	0, 0, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685,
	1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695,
	1696, 0, 1700, 0, 0, 0, 0, 0, 784, 784,
	0, 0, 0, 0, 0, 1410, 0, 784, 784, 0,
	0, 0, 1666, 813, 0, 0, 812, 0, 0, 0,
	0, 0, 0, 0, 1413, 785, 0, 0, 0, 0,
	0, 0, 1733, 0, 1726, 0, 1408, 0, 484, 0,
	784, 0, 1724, 0, 1411, 0, 1728, 0, 0, 0,
	0, 813, 781, 781, 0, 0, 0, 0, 0, 1409,
	0, 0, 0, 0, 1734, 0, 0, 0, 0, 0,
	716, 0, 0, 0, 1794, 812, 617, 617, 0, 1719,
	1720, 1027, 0, 0, 1727, 720, 811, 0, 810, 0,
	0, 636, 50, 752, 0, 1544, 502, 0, 484, 756,
	756, 1753, 0, 1754, 0, 270, 1756, 1757, 1758, 270,
	533, 0, 0, 812, 0, 1412, 0, 0, 785, 0,
	0, 491, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 0, 534, 0, 0, 0, 0,
	0, 0, 1544, 0, 502, 1124, 0, 1544, 0, 0,
	0, 0, 0, 0, 1729, 463, 1730, 0, 471, 270,
	270, 0, 0, 270, 781, 50, 0, 0, 0, 0,
	784, 0, 1635, 1793, 0, 1480, 1481, 0, 0, 1810,
	0, 0, 0, 0, 1732, 0, 0, 0, 0, 0,
	0, 1735, 0, 0, 0, 811, 0, 810, 0, 899,
	901, 0, 0, 0, 0, 0, 908, 0, 0, 0,
	0, 0, 1830, 0, 0, 0, 0, 0, 955, 956,
	957, 958, 959, 781, 1857, 0, 1495, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 974, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1731, 0, 0,
	0, 781, 0, 0, 0, 0, 0, 1027, 0, 1849,
	0, 426, 1851, 0, 0, 1486, 0, 0, 0, 784,
	270, 0, 811, 1544, 810, 0, 426, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1015, 0, 0, 0, 1881, 0, 0, 0,
	502, 0, 0, 0, 484, 0, 0, 0, 494, 0,
	1544, 0, 484, 0, 0, 270, 1930, 533, 1496, 0,
	0, 0, 1904, 0, 297, 533, 0, 0, 0, 0,
	270, 0, 0, 1068, 0, 0, 0, 0, 494, 0,
	0, 494, 534, 0, 0, 0, 502, 1635, 0, 298,
	534, 0, 0, 0, 0, 0, 784, 813, 0, 0,
	0, 0, 0, 471, 0, 811, 0, 810, 0, 0,
	0, 0, 0, 0, 0, 0, 533, 533, 0, 0,
	0, 0, 0, 0, 297, 0, 1497, 892, 813, 813,
	0, 915, 916, 0, 0, 0, 0, 813, 813, 0,
	0, 534, 534, 0, 0, 0, 0, 0, 0, 298,
	0, 1984, 1949, 1950, 918, 0, 0, 0, 0, 812,
	0, 0, 1959, 0, 0, 0, 1960, 0, 0, 0,
	813, 0, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 502, 0, 0, 0, 0, 0, 1635, 0, 784,
	812, 812, 0, 1635, 502, 0, 0, 484, 0, 812,
	812, 0, 0, 1491, 1488, 1489, 1490, 1482, 1483, 1484,
	1485, 1487, 0, 0, 0, 0, 1992, 0, 502, 0,
	0, 270, 0, 426, 0, 0, 0, 427, 0, 1158,
	0, 923, 812, 0, 0, 0, 0, 0, 0, 0,
	1544, 617, 0, 1904, 0, 428, 1635, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 0,
	1200, 0, 1202, 1203, 1204, 1205, 0, 0, 270, 0,
	502, 430, 0, 0, 933, 0, 435, 436, 0, 0,
	441, 1229, 0, 0, 463, 0, 0, 0, 2050, 0,
	813, 0, 429, 431, 0, 0, 0, 781, 0, 0,
	0, 0, 0, 1256, 1257, 1635, 0, 1270, 0, 1281,
	1283, 1288, 1291, 1292, 1293, 0, 1480, 1481, 0, 1498,
	1499, 1500, 533, 0, 1307, 0, 0, 0, 781, 781,
	0, 432, 1814, 0, 720, 0, 0, 781, 781, 0,
	0, 0, 934, 0, 0, 433, 434, 534, 0, 0,
	0, 1335, 812, 1480, 1481, 0, 1498, 1499, 1500, 0,
	1345, 0, 437, 0, 0, 752, 0, 1495, 0, 1813,
	781, 0, 0, 0, 752, 1348, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 813,
	0, 0, 0, 0, 1495, 0, 0, 0, 0, 0,
	0, 0, 297, 0, 0, 463, 1486, 1374, 463, 463,
	925, 926, 927, 919, 920, 921, 922, 924, 0, 944,
	0, 0, 0, 0, 0, 0, 0, 298, 0, 0,
	964, 0, 966, 1393, 0, 0, 0, 0, 0, 970,
	0, 1501, 0, 1486, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 908, 0, 1158, 0, 0, 1496,
	0, 0, 0, 438, 0, 0, 0, 439, 0, 0,
	0, 0, 440, 0, 0, 0, 813, 0, 1501, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	781, 297, 0, 0, 0, 0, 1496, 0, 0, 0,
	0, 0, 0, 1425, 1426, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 298, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 812, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 1457,
	0, 0, 1461, 0, 0, 0, 0, 50, 0, 50,
	0, 1470, 0, 0, 1497, 0, 0, 0, 0, 813,
	0, 0, 1480, 1481, 50, 1498, 1499, 1500, 0, 50,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 533, 1288, 1288, 1288, 0, 0, 0, 0, 781,
	1492, 1493, 1494, 0, 1491, 1488, 1489, 1490, 1482, 1483,
	1484, 1485, 1487, 0, 0, 0, 534, 0, 0, 0,
	0, 0, 0, 1495, 0, 1541, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 1492, 1493, 1494,
	0, 1491, 1488, 1489, 1490, 1482, 1483, 1484, 1485, 1487,
	533, 0, 1068, 1158, 0, 617, 0, 0, 0, 0,
	0, 0, 0, 617, 0, 0, 0, 720, 0, 0,
	0, 0, 1486, 0, 0, 534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 781, 0, 0, 0,
	0, 915, 916, 0, 935, 936, 937, 945, 946, 947,
	1158, 0, 0, 1158, 0, 0, 0, 938, 0, 0,
	0, 0, 0, 0, 918, 0, 1159, 949, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 1638, 0, 0, 1639, 917, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 1644, 0, 0,
	0, 0, 1218, 0, 0, 0, 1653, 0, 0, 0,
	0, 0, 0, 0, 1657, 0, 0, 1374, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 1673, 0, 0, 0, 1675, 0, 0, 0,
	0, 923, 0, 1497, 0, 915, 916, 0, 0, 0,
	0, 945, 946, 947, 0, 0, 0, 0, 0, 0,
	942, 950, 0, 0, 0, 0, 0, 0, 918, 1706,
	1707, 949, 0, 0, 0, 0, 948, 0, 1713, 1714,
	1715, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	917, 0, 50, 50, 933, 0, 932, 0, 0, 0,
	0, 0, 0, 0, 1743, 1755, 0, 0, 0, 1759,
	0, 0, 471, 0, 0, 0, 1492, 1493, 1494, 939,
	1491, 1488, 1489, 1490, 1482, 1483, 1484, 1485, 1487, 0,
	617, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 923, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1158,
	1158, 0, 934, 1158, 942, 950, 0, 0, 0, 1788,
	0, 0, 0, 0, 943, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 533, 0, 0, 50,
	0, 0, 940, 0, 0, 0, 0, 0, 933, 0,
	1815, 0, 50, 0, 1818, 1819, 297, 0, 0, 1821,
	0, 534, 0, 1421, 0, 0, 1823, 0, 1825, 0,
	0, 0, 0, 0, 0, 0, 1831, 0, 0, 0,
	0, 298, 941, 0, 0, 929, 930, 931, 0, 928,
	925, 926, 927, 919, 920, 921, 922, 924, 0, 944,
	0, 1218, 0, 0, 0, 0, 1843, 0, 0, 1840,
	0, 0, 0, 0, 0, 0, 934, 0, 0, 0,
	0, 966, 0, 0, 0, 0, 0, 0, 943, 0,
	1858, 0, 0, 0, 0, 0, 1480, 1481, 0, 1498,
	1499, 1500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1647, 0, 0, 0, 0, 0, 1873, 0,
	0, 0, 0, 0, 0, 0, 915, 916, 0, 935,
	936, 937, 945, 946, 947, 1898, 0, 0, 0, 0,
	966, 0, 938, 0, 0, 0, 941, 1495, 0, 918,
	1158, 0, 949, 928, 925, 926, 927, 919, 920, 921,
	922, 924, 1907, 944, 0, 533, 0, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 1922, 1923, 0, 0, 0, 0, 0, 0, 0,
	534, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 533, 0, 0, 0, 0,
	0, 1935, 0, 0, 0, 0, 0, 0, 0, 0,
	1159, 0, 0, 0, 1939, 533, 923, 0, 0, 0,
	534, 1501, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 950, 0, 0, 1496,
	534, 0, 0, 0, 0, 0, 0, 0, 720, 0,
	0, 948, 0, 0, 0, 0, 0, 1159, 0, 0,
	1159, 0, 0, 940, 0, 0, 0, 50, 0, 933,
	0, 0, 0, 0, 0, 0, 915, 916, 0, 935,
	936, 937, 945, 946, 947, 0, 0, 0, 0, 0,
	0, 1996, 0, 0, 939, 0, 0, 0, 0, 918,
	0, 0, 949, 0, 0, 0, 0, 1497, 915, 916,
	0, 935, 936, 937, 945, 946, 947, 0, 0, 0,
	0, 917, 0, 0, 938, 0, 0, 932, 0, 0,
	0, 918, 0, 0, 949, 0, 0, 934, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1068, 943,
	0, 0, 0, 917, 0, 0, 2034, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 533, 0, 0, 0, 923, 2048, 2048, 0,
	1492, 1493, 1494, 0, 1491, 1488, 1489, 1490, 1482, 1483,
	1484, 1485, 1487, 0, 0, 942, 950, 534, 0, 0,
	0, 0, 0, 2048, 0, 0, 0, 941, 923, 0,
	929, 930, 931, 0, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 940, 944, 0, 50, 942, 950, 933,
	0, 1522, 0, 0, 0, 0, 0, 0, 2048, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 29, 0, 0,
	0, 933, 0, 0, 0, 0, 1159, 1159, 30, 54,
	1159, 0, 0, 0, 0, 0, 0, 0, 471, 0,
	0, 0, 0, 0, 0, 0, 939, 0, 533, 0,
	0, 0, 0, 56, 0, 0, 0, 934, 0, 32,
	0, 62, 0, 0, 0, 0, 297, 0, 0, 943,
	0, 0, 0, 534, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 40, 0, 934,
	57, 298, 0, 0, 44, 41, 0, 0, 0, 0,
	0, 943, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 42, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	929, 930, 931, 0, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 0, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	0, 0, 929, 930, 931, 0, 928, 925, 926, 927,
	919, 920, 921, 922, 924, 0, 944, 0, 0, 0,
	0, 1889, 0, 1521, 0, 0, 0, 0, 0, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 1159, 0, 0,
	0, 0, 0, 0, 59, 60, 31, 0, 0, 47,
	0, 58, 0, 0, 0, 0, 0, 48, 0, 0,
	69, 0, 0, 0, 0, 51, 53, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 0, 0,
	0, 0, 0, 71, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 68, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 0, 0, 0, 0,
	295, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 88, 89, 314, 90,
	315, 316, 317, 318, 217, 319, 320, 321, 322, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 323,
	95, 224, 225, 96, 324, 325, 226, 227, 228, 326,
	229, 327, 300, 328, 97, 98, 99, 0, 100, 329,
	101, 102, 103, 330, 301, 104, 105, 331, 332, 333,
	334, 335, 336, 106, 107, 271, 108, 230, 109, 231,
	232, 337, 110, 338, 111, 339, 340, 341, 112, 113,
	342, 114, 343, 0, 344, 233, 115, 116, 234, 235,
	345, 346, 347, 117, 118, 236, 0, 119, 348, 120,
	349, 350, 302, 351, 121, 237, 352, 238, 353, 122,
	123, 124, 125, 239, 240, 304, 354, 129, 355, 126,
	356, 303, 127, 241, 128, 242, 243, 244, 357, 245,
	358, 305, 130, 306, 131, 132, 359, 134, 133, 360,
	246, 307, 135, 308, 361, 136, 362, 363, 137, 0,
	138, 139, 140, 142, 247, 141, 309, 143, 144, 146,
	145, 364, 365, 366, 248, 147, 249, 148, 149, 367,
	150, 368, 369, 151, 370, 371, 152, 250, 310, 153,
	311, 251, 154, 155, 156, 157, 372, 252, 158, 253,
	159, 373, 160, 161, 162, 254, 163, 164, 374, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	375, 176, 312, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 376, 256, 184, 185, 377, 186, 187, 313,
	188, 257, 258, 189, 378, 195, 190, 191, 192, 194,
	259, 193, 260, 379, 196, 380, 197, 198, 199, 381,
	261, 262, 263, 382, 383, 200, 264, 265, 384, 201,
	202, 203, 204, 385, 386, 205, 206, 207, 387, 208,
	388, 209, 210, 211, 266, 267, 389, 390, 212, 391,
	392, 393, 394, 213, 214, 215, 216, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 295, 0,
	0, 0, 0, 0, 0, 1629, 0, 0, 0, 0,
	0, 0, 0, 1630, 88, 89, 314, 90, 315, 316,
	317, 318, 217, 319, 320, 321, 322, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 323, 95, 224,
	225, 96, 324, 325, 226, 227, 228, 326, 229, 327,
	300, 328, 97, 98, 99, 0, 100, 329, 101, 102,
	103, 330, 301, 104, 105, 331, 332, 333, 334, 335,
	336, 106, 107, 271, 108, 230, 109, 231, 232, 337,
	110, 338, 111, 339, 340, 341, 112, 113, 342, 114,
	343, 0, 344, 233, 115, 116, 234, 235, 345, 346,
	347, 117, 118, 236, 0, 119, 348, 120, 349, 350,
	302, 351, 121, 237, 352, 238, 353, 122, 123, 124,
	125, 239, 240, 304, 354, 129, 355, 126, 356, 303,
	127, 241, 128, 242, 243, 244, 357, 245, 358, 305,
	130, 306, 131, 132, 359, 134, 133, 360, 246, 307,
	135, 308, 361, 136, 362, 363, 137, 0, 138, 139,
	140, 142, 247, 141, 309, 143, 144, 146, 145, 364,
	365, 366, 248, 147, 249, 148, 149, 367, 150, 368,
	369, 151, 370, 371, 152, 250, 310, 153, 311, 251,
	154, 155, 156, 157, 372, 252, 158, 253, 159, 373,
	160, 161, 162, 254, 163, 164, 374, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 375, 176,
	312, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	376, 256, 184, 185, 377, 186, 187, 313, 188, 257,
	258, 189, 378, 195, 190, 191, 192, 194, 259, 193,
	260, 379, 196, 380, 197, 198, 199, 381, 261, 262,
	263, 382, 383, 200, 264, 265, 384, 201, 202, 203,
	204, 385, 386, 205, 206, 207, 387, 208, 388, 209,
	210, 211, 266, 267, 389, 390, 212, 391, 392, 393,
	394, 213, 214, 215, 216, 0, 0, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1977, 88, 89, 314, 90, 315, 316,
	317, 318, 217, 319, 320, 321, 322, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 323, 95, 224,
	225, 96, 324, 325, 226, 227, 228, 326, 229, 327,
	300, 328, 97, 98, 99, 0, 100, 329, 101, 102,
	103, 330, 301, 104, 105, 331, 332, 333, 334, 335,
	336, 106, 107, 271, 108, 230, 109, 231, 232, 337,
	110, 338, 111, 339, 340, 341, 112, 113, 342, 114,
	343, 0, 344, 233, 115, 116, 234, 235, 345, 346,
	347, 117, 118, 236, 0, 119, 348, 120, 349, 350,
	302, 351, 121, 237, 352, 238, 353, 122, 123, 124,
	125, 239, 240, 304, 354, 129, 355, 126, 356, 303,
	127, 241, 128, 242, 243, 244, 357, 245, 358, 305,
	130, 306, 131, 132, 359, 134, 133, 360, 246, 307,
	135, 308, 361, 136, 362, 363, 137, 0, 138, 139,
	140, 142, 247, 141, 309, 143, 144, 146, 145, 364,
	365, 366, 248, 147, 249, 148, 149, 367, 150, 368,
	369, 151, 370, 371, 152, 250, 310, 153, 311, 251,
	154, 155, 156, 157, 372, 252, 158, 253, 159, 373,
	160, 161, 162, 254, 163, 164, 374, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 375, 176,
	312, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	376, 256, 184, 185, 377, 186, 187, 313, 188, 257,
	258, 189, 378, 195, 190, 191, 192, 194, 259, 193,
	260, 379, 196, 380, 197, 198, 199, 381, 261, 262,
	263, 382, 383, 200, 264, 265, 384, 201, 202, 203,
	204, 385, 386, 205, 206, 207, 387, 208, 388, 209,
	210, 211, 266, 267, 389, 390, 212, 391, 392, 393,
	394, 213, 214, 215, 216, 295, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 746, 0,
	0, 88, 89, 314, 90, 315, 316, 317, 318, 217,
	319, 320, 321, 322, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 323, 95, 224, 225, 96, 324,
	325, 226, 227, 228, 326, 229, 327, 300, 328, 97,
	98, 99, 0, 100, 329, 101, 102, 103, 330, 301,
	104, 105, 331, 332, 333, 334, 335, 336, 106, 107,
	271, 108, 230, 109, 231, 232, 337, 110, 338, 111,
	339, 340, 341, 112, 113, 342, 114, 343, 0, 344,
	233, 115, 116, 234, 235, 345, 346, 347, 117, 118,
	236, 0, 119, 348, 120, 349, 350, 302, 351, 121,
	237, 352, 238, 353, 122, 123, 124, 125, 239, 240,
	304, 354, 129, 355, 126, 356, 303, 127, 241, 128,
	242, 243, 244, 357, 245, 358, 305, 130, 306, 131,
	132, 359, 134, 133, 360, 246, 307, 135, 308, 361,
	136, 362, 363, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 364, 365, 366, 248,
	147, 249, 148, 149, 367, 150, 368, 369, 151, 370,
	371, 152, 250, 310, 153, 311, 251, 154, 155, 156,
	157, 372, 252, 158, 253, 159, 373, 160, 161, 162,
	254, 163, 164, 374, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 375, 176, 312, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 376, 256, 184,
	185, 377, 186, 187, 313, 188, 257, 258, 189, 378,
	195, 190, 191, 192, 194, 259, 193, 260, 379, 196,
	380, 197, 198, 199, 381, 261, 262, 263, 382, 383,
	200, 264, 265, 384, 201, 202, 203, 204, 385, 386,
	205, 206, 207, 387, 208, 388, 209, 210, 211, 266,
	267, 389, 390, 212, 391, 392, 393, 394, 213, 214,
	215, 216, 655, 644, 645, 642, 643, 634, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 671, 637, 0, 0,
	0, 91, 92, 93, 218, 686, 220, 687, 94, 688,
	689, 0, 95, 224, 225, 96, 640, 670, 690, 691,
	228, 0, 682, 0, 663, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 301, 104, 105, 0,
	664, 666, 0, 665, 667, 106, 107, 271, 108, 692,
	109, 693, 694, 721, 110, 0, 111, 0, 0, 0,
	685, 113, 0, 114, 0, 0, 0, 628, 115, 116,
	672, 673, 651, 0, 0, 117, 118, 695, 0, 119,
	0, 120, 0, 0, 302, 0, 121, 683, 0, 238,
	0, 122, 123, 124, 125, 679, 681, 304, 0, 129,
	0, 126, 0, 303, 127, 696, 128, 697, 698, 699,
	0, 662, 0, 305, 130, 306, 131, 132, 0, 134,
	133, 0, 684, 307, 135, 308, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 247, 141, 309, 143,
	144, 146, 145, 623, 0, 652, 680, 147, 700, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 250,
	310, 153, 311, 674, 154, 155, 156, 157, 0, 675,
	158, 253, 159, 0, 160, 161, 162, 701, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 312, 177, 178, 629, 179, 0,
	180, 181, 182, 183, 69, 256, 184, 185, 668, 186,
	187, 313, 188, 702, 258, 189, 0, 195, 190, 191,
	192, 194, 703, 193, 676, 0, 196, 71, 197, 198,
	199, 0, 261, 704, 705, 0, 0, 200, 677, 678,
	650, 201, 202, 203, 204, 0, 0, 205, 206, 207,
	669, 208, 0, 209, 210, 211, 535, 706, 0, 0,
	212, 0, 0, 0, 67, 213, 214, 215, 216, 624,
	68, 0, 0, 0, 655, 644, 645, 642, 643, 634,
	620, 621, 0, 0, 0, 0, 622, 0, 0, 630,
	88, 89, 1245, 90, 633, 0, 0, 0, 671, 637,
	0, 0, 0, 91, 92, 93, 218, 686, 220, 687,
	94, 688, 689, 0, 95, 224, 225, 96, 640, 670,
	690, 691, 228, 0, 682, 0, 663, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 301, 104,
	105, 0, 664, 666, 0, 665, 667, 106, 107, 271,
	108, 692, 109, 693, 694, 0, 110, 0, 111, 0,
	1246, 0, 685, 113, 0, 114, 0, 0, 0, 628,
	115, 116, 672, 673, 651, 0, 0, 117, 118, 695,
	0, 119, 0, 120, 0, 0, 302, 0, 121, 683,
	0, 238, 0, 122, 123, 124, 125, 679, 681, 304,
	0, 129, 0, 126, 0, 303, 127, 696, 128, 697,
	698, 699, 0, 662, 0, 305, 130, 306, 131, 132,
	0, 134, 133, 0, 684, 307, 135, 308, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	309, 143, 144, 146, 145, 623, 0, 652, 680, 147,
	700, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 310, 153, 311, 674, 154, 155, 156, 157,
	0, 675, 158, 253, 159, 0, 160, 161, 162, 701,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 312, 177, 178, 629,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	668, 186, 187, 313, 188, 702, 258, 189, 0, 195,
	190, 191, 192, 194, 703, 193, 676, 0, 196, 0,
	197, 198, 199, 0, 261, 704, 705, 0, 0, 200,
	677, 678, 650, 201, 202, 203, 204, 0, 0, 205,
	206, 207, 669, 208, 0, 209, 210, 211, 266, 706,
	1244, 0, 212, 0, 0, 0, 0, 213, 214, 215,
	216, 624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 621, 1247, 0, 0, 0, 622, 0,
	0, 630, 1242, 0, 0, 0, 633, 655, 644, 645,
	642, 643, 634, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 671, 637, 0, 0, 0, 91, 92, 93, 218,
	686, 220, 687, 94, 688, 689, 0, 95, 224, 225,
	96, 640, 670, 690, 691, 228, 0, 682, 0, 663,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 301, 104, 105, 0, 664, 666, 0, 665, 667,
	106, 107, 271, 108, 692, 109, 693, 694, 0, 110,
	0, 111, 0, 0, 0, 685, 113, 0, 114, 0,
	0, 0, 628, 115, 116, 672, 673, 651, 0, 0,
	117, 118, 695, 0, 119, 0, 120, 0, 0, 302,
	0, 121, 683, 0, 238, 0, 122, 123, 124, 125,
	679, 681, 304, 0, 129, 0, 126, 0, 303, 127,
	696, 128, 697, 698, 699, 0, 662, 0, 305, 130,
	306, 131, 132, 0, 134, 133, 0, 684, 307, 135,
	308, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 309, 143, 144, 146, 145, 623, 0,
	652, 680, 147, 700, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 310, 153, 311, 674, 154,
	155, 156, 157, 0, 675, 158, 253, 159, 0, 160,
	161, 162, 701, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 312,
	177, 178, 629, 179, 0, 180, 181, 182, 183, 69,
	256, 184, 185, 668, 186, 187, 313, 188, 702, 258,
	189, 0, 195, 190, 191, 192, 194, 703, 193, 676,
	0, 196, 71, 197, 198, 199, 0, 261, 704, 705,
	0, 0, 200, 677, 678, 650, 201, 202, 203, 204,
	0, 0, 205, 206, 207, 669, 208, 0, 209, 210,
	211, 535, 706, 0, 0, 212, 0, 0, 0, 67,
	213, 214, 215, 216, 624, 68, 655, 644, 645, 642,
	643, 634, 0, 0, 0, 620, 621, 0, 0, 0,
	0, 622, 88, 89, 630, 90, 0, 0, 0, 633,
	671, 637, 0, 0, 0, 91, 92, 93, 218, 686,
	220, 687, 94, 688, 689, 1284, 95, 224, 225, 96,
	640, 670, 690, 691, 228, 0, 682, 0, 663, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	301, 104, 105, 0, 664, 666, 0, 665, 667, 106,
	107, 271, 108, 692, 109, 693, 694, 0, 110, 0,
	111, 0, 0, 0, 685, 113, 0, 114, 0, 0,
	0, 628, 115, 116, 672, 673, 651, 0, 0, 117,
	118, 695, 0, 119, 0, 120, 0, 1289, 302, 0,
	121, 683, 0, 238, 0, 122, 123, 124, 125, 679,
	681, 304, 0, 129, 0, 126, 0, 303, 127, 696,
	128, 697, 698, 699, 0, 662, 0, 305, 130, 306,
	131, 132, 0, 134, 133, 1285, 684, 307, 135, 308,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 309, 143, 144, 146, 145, 623, 0, 652,
	680, 147, 700, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 310, 153, 311, 674, 154, 155,
	156, 157, 0, 675, 158, 253, 159, 0, 160, 161,
	162, 701, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 312, 177,
	178, 629, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 668, 186, 187, 313, 188, 702, 258, 189,
	0, 195, 190, 191, 192, 194, 703, 193, 676, 0,
	196, 0, 197, 198, 199, 0, 261, 704, 705, 0,
	1286, 200, 677, 678, 650, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 669, 208, 0, 209, 210, 211,
	266, 706, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 624, 0, 655, 644, 645, 642, 643,
	634, 0, 0, 0, 620, 621, 0, 0, 0, 0,
	622, 88, 89, 630, 90, 0, 0, 0, 633, 671,
	637, 0, 0, 0, 91, 92, 93, 218, 686, 220,
	687, 94, 688, 689, 0, 95, 224, 225, 96, 640,
	670, 690, 691, 228, 0, 682, 0, 663, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 105, 0, 664, 666, 0, 665, 667, 106, 107,
	271, 108, 692, 109, 693, 694, 0, 110, 0, 111,
	0, 0, 0, 685, 113, 0, 114, 0, 0, 0,
	628, 115, 116, 672, 673, 651, 0, 0, 117, 118,
	695, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	683, 0, 238, 0, 122, 123, 124, 125, 679, 681,
	304, 0, 129, 0, 126, 0, 303, 127, 696, 128,
	697, 698, 699, 0, 662, 0, 305, 130, 306, 131,
	132, 0, 134, 133, 0, 684, 307, 135, 308, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 623, 1571, 652, 680,
	147, 700, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 674, 154, 155, 156,
	157, 0, 675, 158, 253, 159, 0, 160, 161, 162,
	701, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	629, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 668, 186, 187, 313, 188, 702, 258, 189, 0,
	195, 190, 191, 192, 194, 703, 193, 676, 0, 196,
	0, 197, 198, 199, 0, 261, 704, 705, 0, 0,
	200, 677, 678, 650, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 669, 208, 0, 209, 210, 211, 266,
	706, 0, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 624, 0, 655, 644, 645, 642, 643, 634,
	0, 0, 0, 620, 621, 618, 0, 0, 0, 622,
	88, 89, 630, 90, 0, 0, 0, 633, 671, 637,
	0, 0, 0, 91, 92, 93, 218, 686, 220, 687,
	94, 688, 689, 0, 95, 224, 225, 96, 640, 670,
	690, 691, 228, 0, 682, 0, 663, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 301, 104,
	105, 0, 664, 666, 0, 665, 667, 106, 107, 271,
	108, 692, 109, 693, 694, 0, 110, 0, 111, 0,
	0, 0, 685, 113, 0, 114, 0, 0, 0, 628,
	115, 116, 672, 673, 651, 0, 0, 117, 118, 695,
	0, 119, 0, 120, 0, 0, 302, 0, 121, 683,
	0, 238, 0, 122, 123, 124, 125, 679, 681, 304,
	0, 129, 0, 126, 0, 303, 127, 696, 128, 697,
	698, 699, 0, 662, 0, 305, 130, 306, 131, 132,
	0, 134, 133, 0, 684, 307, 135, 308, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	309, 143, 144, 146, 145, 623, 0, 652, 680, 147,
	700, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 310, 153, 311, 674, 154, 155, 156, 157,
	0, 675, 158, 253, 159, 0, 160, 161, 162, 701,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 312, 177, 178, 629,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	668, 186, 187, 313, 188, 702, 258, 189, 0, 195,
	190, 191, 192, 194, 703, 193, 676, 0, 196, 0,
	197, 198, 199, 0, 261, 704, 705, 0, 0, 200,
	677, 678, 650, 201, 202, 203, 204, 0, 0, 205,
	206, 207, 669, 208, 0, 209, 210, 211, 266, 706,
	0, 0, 212, 0, 0, 0, 0, 213, 214, 215,
	216, 624, 0, 0, 0, 0, 655, 644, 645, 642,
	643, 634, 620, 621, 0, 0, 0, 0, 622, 972,
	1237, 630, 88, 89, 0, 90, 633, 0, 0, 0,
	671, 637, 0, 0, 0, 91, 92, 93, 218, 686,
	220, 687, 94, 688, 689, 0, 95, 224, 225, 96,
	640, 670, 690, 691, 228, 0, 682, 0, 663, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	301, 104, 105, 0, 664, 666, 0, 665, 667, 106,
	107, 271, 108, 692, 109, 693, 694, 0, 110, 0,
	111, 0, 0, 0, 685, 113, 0, 114, 0, 0,
	0, 628, 115, 116, 672, 673, 651, 0, 0, 117,
	118, 695, 0, 119, 0, 120, 0, 0, 302, 0,
	121, 683, 0, 238, 0, 122, 123, 124, 125, 679,
	681, 304, 0, 129, 0, 126, 0, 303, 127, 696,
	128, 697, 698, 699, 0, 662, 0, 305, 130, 306,
	131, 132, 0, 134, 133, 0, 684, 307, 135, 308,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 309, 143, 144, 146, 145, 623, 0, 652,
	680, 147, 700, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 310, 153, 311, 674, 154, 155,
	156, 157, 0, 675, 158, 253, 159, 0, 160, 161,
	162, 701, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 312, 177,
	178, 629, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 668, 186, 187, 313, 188, 702, 258, 189,
	0, 195, 190, 191, 192, 194, 703, 193, 676, 0,
	196, 0, 197, 198, 199, 0, 261, 704, 705, 0,
	0, 200, 677, 678, 650, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 669, 208, 0, 209, 210, 211,
	266, 706, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 624, 0, 655, 644, 645, 642, 643,
	634, 0, 0, 0, 620, 621, 618, 0, 0, 0,
	622, 88, 89, 630, 90, 0, 0, 0, 633, 671,
	637, 0, 0, 0, 91, 92, 93, 218, 686, 220,
	687, 94, 688, 689, 0, 95, 224, 225, 96, 640,
	670, 690, 691, 228, 0, 682, 0, 663, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 105, 0, 664, 666, 0, 665, 667, 106, 107,
	271, 108, 692, 109, 693, 694, 0, 110, 0, 111,
	0, 0, 0, 685, 113, 0, 114, 0, 0, 0,
	628, 115, 116, 672, 673, 651, 0, 0, 117, 118,
	695, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	683, 0, 238, 0, 122, 123, 124, 125, 679, 681,
	304, 0, 129, 0, 126, 0, 303, 127, 696, 128,
	697, 698, 699, 0, 662, 0, 305, 130, 306, 131,
	132, 0, 134, 133, 0, 684, 307, 135, 308, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 623, 0, 652, 680,
	147, 700, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 674, 154, 155, 156,
	157, 0, 675, 158, 253, 159, 0, 160, 161, 162,
	701, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	629, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 668, 186, 187, 313, 188, 702, 258, 189, 0,
	195, 190, 191, 192, 194, 703, 193, 676, 0, 196,
	0, 197, 198, 199, 0, 261, 704, 705, 0, 0,
	200, 677, 678, 650, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 669, 208, 0, 209, 210, 211, 266,
	706, 0, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 624, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 620, 621, 0, 0, 0, 0, 622,
	0, 0, 630, 1703, 0, 0, 0, 633, 655, 644,
	645, 642, 643, 634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 0, 0,
	0, 0, 671, 637, 0, 0, 0, 91, 92, 93,
	218, 686, 220, 687, 94, 688, 689, 0, 95, 224,
	225, 96, 640, 670, 690, 691, 228, 0, 682, 0,
	663, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 301, 104, 105, 0, 664, 666, 0, 665,
	667, 106, 107, 271, 108, 692, 109, 693, 694, 0,
	110, 0, 111, 0, 0, 0, 685, 113, 0, 114,
	0, 0, 0, 628, 115, 116, 672, 673, 651, 0,
	0, 117, 118, 695, 0, 119, 0, 120, 0, 0,
	302, 0, 121, 683, 0, 238, 0, 122, 123, 124,
	125, 679, 681, 304, 0, 129, 0, 126, 0, 303,
	127, 696, 128, 697, 698, 699, 0, 662, 0, 305,
	130, 306, 131, 132, 0, 134, 133, 0, 684, 307,
	135, 308, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 309, 143, 144, 146, 145, 623,
	0, 652, 680, 147, 700, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 310, 153, 311, 674,
	154, 155, 156, 157, 0, 675, 158, 253, 159, 0,
	160, 161, 162, 701, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	312, 177, 178, 629, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 668, 186, 187, 313, 188, 702,
	258, 189, 0, 195, 190, 191, 192, 194, 703, 193,
	676, 0, 196, 0, 197, 198, 199, 0, 261, 704,
	705, 0, 0, 200, 677, 678, 650, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 669, 208, 0, 209,
	210, 211, 266, 706, 1660, 0, 212, 0, 0, 0,
	0, 213, 214, 215, 216, 624, 0, 655, 644, 645,
	642, 643, 634, 0, 0, 0, 620, 621, 0, 0,
	0, 0, 622, 88, 89, 630, 90, 0, 0, 0,
	633, 671, 637, 0, 0, 0, 91, 92, 93, 218,
	686, 220, 687, 94, 688, 689, 0, 95, 224, 225,
	96, 640, 670, 690, 691, 228, 0, 682, 0, 663,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 301, 104, 105, 0, 664, 666, 0, 665, 667,
	106, 107, 271, 108, 692, 109, 693, 694, 0, 110,
	0, 111, 0, 0, 0, 685, 113, 0, 114, 0,
	0, 0, 628, 115, 116, 672, 673, 651, 0, 0,
	117, 118, 695, 0, 119, 0, 120, 0, 0, 302,
	0, 121, 683, 0, 238, 0, 122, 123, 124, 125,
	679, 681, 304, 0, 129, 0, 126, 0, 303, 127,
	696, 128, 697, 698, 699, 0, 662, 0, 305, 130,
	306, 131, 132, 0, 134, 133, 0, 684, 307, 135,
	308, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 309, 143, 144, 146, 145, 623, 0,
	652, 680, 147, 700, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 310, 153, 311, 674, 154,
	155, 156, 157, 0, 675, 158, 253, 159, 0, 160,
	161, 162, 701, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 312,
	177, 178, 629, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 668, 186, 187, 313, 188, 702, 258,
	189, 0, 195, 190, 191, 192, 194, 703, 193, 676,
	0, 196, 0, 197, 198, 199, 0, 261, 704, 705,
	0, 0, 200, 677, 678, 650, 201, 202, 203, 204,
	0, 0, 205, 206, 207, 669, 208, 0, 209, 210,
	211, 266, 706, 0, 0, 212, 0, 0, 0, 0,
	213, 214, 215, 216, 624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 620, 621, 0, 0, 0,
	0, 622, 0, 0, 630, 1650, 0, 0, 0, 633,
	655, 644, 645, 642, 643, 634, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 671, 637, 0, 0, 0, 91,
	92, 93, 218, 686, 220, 687, 94, 688, 689, 0,
	95, 224, 225, 96, 640, 670, 690, 691, 228, 0,
	682, 0, 663, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 301, 104, 105, 0, 664, 666,
	0, 665, 667, 106, 107, 271, 108, 692, 109, 693,
	694, 721, 110, 0, 111, 0, 0, 0, 685, 113,
	0, 114, 0, 0, 0, 628, 115, 116, 672, 673,
	651, 0, 0, 117, 118, 695, 0, 119, 0, 120,
	0, 0, 302, 0, 121, 683, 0, 238, 0, 122,
	123, 124, 125, 679, 681, 304, 0, 129, 0, 126,
	0, 303, 127, 696, 128, 697, 698, 699, 0, 662,
	0, 305, 130, 306, 131, 132, 0, 134, 133, 0,
	684, 307, 135, 308, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 309, 143, 144, 146,
	145, 623, 0, 652, 680, 147, 700, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 310, 153,
	311, 674, 154, 155, 156, 157, 0, 675, 158, 253,
	159, 0, 160, 161, 162, 701, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 312, 177, 178, 629, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 668, 186, 187, 313,
	188, 702, 258, 189, 0, 195, 190, 191, 192, 194,
	703, 193, 676, 0, 196, 0, 197, 198, 199, 0,
	261, 704, 705, 0, 0, 200, 677, 678, 650, 201,
	202, 203, 204, 0, 0, 205, 206, 207, 669, 208,
	0, 209, 210, 211, 266, 706, 0, 0, 212, 0,
	0, 0, 0, 213, 214, 215, 216, 624, 0, 655,
	644, 645, 642, 643, 634, 0, 0, 0, 620, 621,
	0, 0, 0, 0, 622, 88, 89, 630, 90, 0,
	0, 0, 633, 671, 637, 0, 0, 0, 91, 92,
	93, 218, 686, 220, 687, 94, 688, 689, 0, 95,
	224, 225, 96, 640, 670, 690, 691, 228, 0, 682,
	0, 663, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 301, 104, 105, 0, 664, 666, 0,
	665, 667, 106, 107, 271, 108, 692, 109, 693, 694,
	0, 110, 0, 111, 0, 0, 0, 685, 113, 0,
	114, 0, 0, 0, 628, 115, 116, 672, 673, 651,
	0, 0, 117, 118, 695, 0, 119, 0, 120, 0,
	1289, 302, 0, 121, 683, 0, 238, 0, 122, 123,
	124, 125, 679, 681, 304, 0, 129, 0, 126, 0,
	303, 127, 696, 128, 697, 698, 699, 0, 662, 0,
	305, 130, 306, 131, 132, 0, 134, 133, 0, 684,
	307, 135, 308, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 309, 143, 144, 146, 145,
	623, 0, 652, 680, 147, 700, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 310, 153, 311,
	674, 154, 155, 156, 157, 0, 675, 158, 253, 159,
	0, 160, 161, 162, 701, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 312, 177, 178, 629, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 668, 186, 187, 313, 188,
	702, 258, 189, 0, 195, 190, 191, 192, 194, 703,
	193, 676, 0, 196, 0, 197, 198, 199, 0, 261,
	704, 705, 0, 0, 200, 677, 678, 650, 201, 202,
	203, 204, 0, 0, 205, 206, 207, 669, 208, 0,
	209, 210, 211, 266, 706, 0, 0, 212, 0, 0,
	0, 0, 213, 214, 215, 216, 624, 0, 655, 644,
	645, 642, 643, 634, 0, 0, 0, 620, 621, 0,
	0, 0, 0, 622, 88, 89, 630, 90, 0, 0,
	0, 633, 671, 637, 0, 0, 0, 91, 92, 93,
	218, 686, 220, 687, 94, 688, 689, 0, 95, 224,
	225, 96, 640, 670, 690, 691, 228, 0, 682, 0,
	663, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 301, 104, 105, 0, 664, 666, 0, 665,
	667, 106, 107, 271, 108, 692, 109, 693, 694, 0,
	110, 0, 111, 0, 0, 0, 685, 113, 0, 114,
	0, 0, 0, 628, 115, 116, 672, 673, 651, 0,
	0, 117, 118, 695, 0, 119, 0, 120, 0, 0,
	302, 0, 121, 683, 0, 238, 0, 122, 123, 124,
	125, 679, 681, 304, 0, 129, 0, 126, 0, 303,
	127, 696, 128, 697, 698, 699, 0, 662, 0, 305,
	130, 306, 131, 132, 0, 134, 133, 0, 684, 307,
	135, 308, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 309, 143, 144, 146, 145, 623,
	0, 652, 680, 147, 700, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 310, 153, 311, 674,
	154, 155, 156, 157, 0, 675, 158, 253, 159, 0,
	160, 161, 162, 701, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	312, 177, 178, 629, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 668, 186, 187, 313, 188, 702,
	258, 189, 0, 195, 190, 191, 192, 194, 703, 193,
	676, 0, 196, 0, 197, 198, 199, 0, 261, 704,
	705, 0, 0, 200, 677, 678, 650, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 669, 208, 0, 209,
	210, 211, 266, 706, 0, 0, 212, 0, 0, 0,
	0, 213, 214, 215, 216, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 621, 0, 0,
	0, 0, 622, 0, 0, 630, 1232, 0, 0, 0,
	633, 655, 644, 645, 642, 643, 634, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 900,
	90, 0, 0, 0, 0, 671, 637, 0, 0, 0,
	91, 92, 93, 218, 686, 220, 687, 94, 688, 689,
	0, 95, 224, 225, 96, 640, 670, 690, 691, 228,
	0, 682, 0, 663, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 301, 104, 105, 0, 664,
	666, 0, 665, 667, 106, 107, 271, 108, 692, 109,
	693, 694, 0, 110, 0, 111, 0, 0, 0, 685,
	113, 0, 114, 0, 0, 0, 628, 115, 116, 672,
	673, 651, 0, 0, 117, 118, 695, 0, 119, 0,
	120, 0, 0, 302, 0, 121, 683, 0, 238, 0,
	122, 123, 124, 125, 679, 681, 304, 0, 129, 0,
	126, 0, 303, 127, 696, 128, 697, 698, 699, 0,
	662, 0, 305, 130, 306, 131, 132, 0, 134, 133,
	0, 684, 307, 135, 308, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 309, 143, 144,
	146, 145, 623, 0, 652, 680, 147, 700, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 310,
	153, 311, 674, 154, 155, 156, 157, 0, 675, 158,
	253, 159, 0, 160, 161, 162, 701, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 312, 177, 178, 629, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 668, 186, 187,
	313, 188, 702, 258, 189, 0, 195, 190, 191, 192,
	194, 703, 193, 676, 0, 196, 0, 197, 198, 199,
	0, 261, 704, 705, 0, 0, 200, 677, 678, 650,
	201, 202, 203, 204, 0, 0, 205, 206, 207, 669,
	208, 0, 209, 210, 211, 266, 706, 0, 0, 212,
	0, 0, 0, 0, 213, 214, 215, 216, 624, 0,
	655, 644, 645, 642, 643, 634, 0, 0, 0, 620,
	621, 0, 0, 0, 0, 622, 88, 89, 630, 90,
	0, 0, 0, 633, 671, 637, 0, 0, 0, 91,
	92, 93, 218, 686, 220, 687, 94, 688, 689, 0,
	95, 224, 225, 96, 640, 670, 690, 691, 228, 0,
	682, 0, 663, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 301, 104, 2047, 0, 664, 666,
	0, 665, 667, 106, 107, 271, 108, 692, 109, 693,
	694, 0, 110, 0, 111, 0, 0, 0, 685, 113,
	0, 114, 0, 0, 0, 628, 115, 116, 672, 673,
	651, 0, 0, 117, 118, 695, 0, 119, 0, 120,
	0, 0, 302, 0, 121, 683, 0, 238, 0, 122,
	123, 124, 125, 679, 681, 304, 0, 129, 0, 126,
	0, 303, 127, 696, 128, 697, 698, 699, 0, 662,
	0, 305, 130, 306, 131, 132, 0, 134, 133, 0,
	684, 307, 135, 308, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 309, 143, 144, 146,
	145, 623, 0, 652, 680, 147, 700, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 310, 153,
	311, 674, 154, 155, 156, 157, 0, 675, 158, 253,
	159, 0, 160, 161, 162, 701, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 312, 177, 178, 629, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 668, 186, 187, 313,
	188, 702, 258, 189, 0, 195, 190, 191, 192, 194,
	703, 193, 676, 0, 196, 0, 197, 198, 199, 0,
	261, 704, 705, 0, 0, 200, 677, 678, 650, 201,
	202, 2046, 204, 0, 0, 205, 206, 207, 669, 208,
	0, 209, 210, 211, 266, 706, 0, 0, 212, 0,
	0, 0, 0, 213, 214, 215, 216, 624, 0, 655,
	644, 645, 642, 643, 634, 0, 0, 0, 620, 621,
	0, 0, 0, 0, 622, 88, 89, 630, 90, 0,
	0, 0, 633, 671, 637, 0, 0, 0, 91, 92,
	93, 2045, 686, 220, 687, 94, 688, 689, 0, 95,
	224, 225, 96, 640, 670, 690, 691, 228, 0, 682,
	0, 663, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 301, 104, 2047, 0, 664, 666, 0,
	665, 667, 106, 107, 271, 108, 692, 109, 693, 694,
	0, 110, 0, 111, 0, 0, 0, 685, 113, 0,
	114, 0, 0, 0, 628, 115, 116, 672, 673, 651,
	0, 0, 117, 118, 695, 0, 119, 0, 120, 0,
	0, 302, 0, 121, 683, 0, 238, 0, 122, 123,
	124, 125, 679, 681, 304, 0, 129, 0, 126, 0,
	303, 127, 696, 128, 697, 698, 699, 0, 662, 0,
	305, 130, 306, 131, 132, 0, 134, 133, 0, 684,
	307, 135, 308, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 309, 143, 144, 146, 145,
	623, 0, 652, 680, 147, 700, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 310, 153, 311,
	674, 154, 155, 156, 157, 0, 675, 158, 253, 159,
	0, 160, 161, 162, 701, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 312, 177, 178, 629, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 668, 186, 187, 313, 188,
	702, 258, 189, 0, 195, 190, 191, 192, 194, 703,
	193, 676, 0, 196, 0, 197, 198, 199, 0, 261,
	704, 705, 0, 0, 200, 677, 678, 650, 201, 202,
	2046, 204, 0, 0, 205, 206, 207, 669, 208, 0,
	209, 210, 211, 266, 706, 0, 0, 212, 0, 0,
	0, 0, 213, 214, 215, 216, 624, 0, 655, 644,
	645, 642, 643, 634, 0, 0, 0, 620, 621, 0,
	0, 0, 0, 622, 88, 89, 630, 90, 0, 0,
	0, 633, 671, 637, 0, 0, 0, 91, 92, 93,
	218, 686, 220, 687, 94, 688, 689, 0, 95, 224,
	225, 96, 640, 670, 690, 691, 228, 0, 682, 0,
	663, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 301, 104, 105, 0, 664, 666, 0, 665,
	667, 106, 107, 271, 108, 692, 109, 693, 694, 0,
	110, 0, 111, 0, 0, 0, 685, 113, 0, 114,
	0, 0, 0, 628, 115, 116, 672, 673, 651, 0,
	0, 117, 118, 695, 0, 119, 0, 120, 0, 0,
	302, 0, 121, 683, 0, 238, 0, 122, 123, 124,
	125, 679, 681, 304, 0, 129, 0, 126, 0, 303,
	127, 696, 128, 697, 698, 699, 0, 662, 0, 305,
	130, 306, 131, 132, 0, 134, 133, 0, 684, 307,
	135, 308, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 309, 143, 144, 146, 145, 623,
	0, 652, 680, 147, 700, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 310, 153, 311, 674,
	154, 155, 156, 157, 0, 675, 158, 253, 159, 0,
	160, 161, 162, 701, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	312, 177, 178, 629, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 668, 186, 187, 313, 188, 702,
	258, 189, 0, 195, 190, 191, 192, 194, 703, 193,
	676, 0, 196, 0, 197, 198, 199, 0, 261, 704,
	705, 0, 0, 200, 677, 678, 650, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 669, 208, 0, 209,
	210, 211, 266, 706, 0, 0, 212, 0, 0, 0,
	0, 213, 214, 215, 216, 624, 0, 1261, 644, 645,
	642, 643, 634, 0, 0, 0, 620, 621, 0, 0,
	0, 0, 622, 88, 89, 630, 90, 0, 0, 0,
	633, 671, 637, 0, 0, 0, 91, 92, 93, 218,
	686, 220, 687, 94, 688, 689, 0, 95, 224, 225,
	96, 640, 670, 690, 691, 228, 0, 682, 0, 663,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 301, 104, 105, 0, 664, 666, 0, 665, 667,
	106, 107, 271, 108, 692, 1264, 693, 694, 0, 110,
	0, 111, 0, 0, 0, 685, 113, 0, 114, 0,
	0, 0, 628, 115, 116, 672, 673, 651, 0, 0,
	117, 118, 695, 0, 119, 0, 120, 0, 0, 302,
	0, 121, 683, 0, 238, 0, 122, 123, 1265, 125,
	679, 681, 304, 0, 129, 0, 126, 0, 303, 127,
	696, 128, 697, 698, 699, 0, 662, 0, 305, 130,
	306, 131, 132, 0, 134, 133, 0, 684, 307, 135,
	308, 0, 136, 0, 0, 137, 0, 138, 1266, 1263,
	142, 247, 141, 309, 143, 144, 146, 145, 623, 0,
	652, 680, 147, 700, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 310, 153, 311, 674, 154,
	155, 156, 157, 0, 675, 158, 253, 159, 0, 160,
	161, 162, 701, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 312,
	177, 178, 629, 179, 0, 180, 181, 182, 1267, 0,
	256, 184, 185, 668, 186, 187, 313, 188, 702, 258,
	189, 0, 195, 190, 191, 192, 194, 703, 193, 676,
	0, 196, 0, 197, 198, 199, 0, 261, 704, 705,
	0, 0, 200, 677, 678, 650, 201, 202, 203, 204,
	0, 0, 205, 206, 207, 669, 208, 0, 209, 210,
	211, 266, 706, 0, 0, 212, 0, 0, 0, 0,
	213, 214, 1262, 216, 624, 0, 655, 644, 645, 642,
	643, 634, 0, 0, 0, 620, 621, 0, 0, 0,
	0, 622, 88, 89, 630, 90, 0, 0, 0, 633,
	671, 637, 0, 0, 0, 91, 92, 93, 218, 686,
	220, 687, 94, 688, 689, 0, 95, 224, 225, 96,
	640, 670, 690, 691, 228, 0, 682, 0, 663, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	301, 104, 105, 0, 664, 666, 0, 665, 667, 106,
	107, 271, 108, 692, 109, 693, 694, 0, 110, 0,
	111, 0, 0, 0, 685, 113, 0, 114, 0, 0,
	0, 628, 115, 116, 672, 673, 651, 0, 0, 117,
	118, 695, 0, 119, 0, 120, 0, 0, 302, 0,
	121, 683, 0, 238, 0, 122, 123, 124, 125, 679,
	681, 304, 0, 129, 0, 126, 0, 303, 127, 696,
	128, 697, 698, 699, 0, 662, 0, 305, 130, 306,
	131, 132, 0, 134, 133, 0, 684, 307, 135, 308,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 309, 143, 144, 146, 145, 0, 0, 652,
	680, 147, 700, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 310, 153, 311, 674, 154, 155,
	156, 157, 0, 675, 158, 253, 159, 0, 160, 161,
	162, 701, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 312, 177,
	178, 1279, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 668, 186, 187, 313, 188, 702, 258, 189,
	0, 195, 190, 191, 192, 194, 703, 193, 676, 0,
	196, 0, 197, 198, 199, 0, 261, 704, 705, 0,
	0, 200, 677, 678, 650, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 669, 208, 0, 209, 210, 211,
	266, 706, 0, 0, 212, 0, 0, 0, 0, 213,
	214, 215, 216, 0, 0, 655, 644, 645, 642, 643,
	634, 0, 0, 0, 1275, 1276, 0, 0, 0, 0,
	1277, 88, 89, 1278, 90, 0, 0, 0, 633, 671,
	637, 0, 0, 0, 91, 92, 93, 0, 686, 220,
	687, 94, 688, 689, 0, 95, 224, 225, 96, 640,
	670, 690, 691, 228, 0, 682, 0, 663, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 2047, 0, 664, 666, 0, 665, 667, 106, 107,
	271, 108, 692, 109, 693, 694, 0, 110, 0, 111,
	0, 0, 0, 685, 113, 0, 114, 0, 0, 0,
	628, 115, 116, 672, 673, 651, 0, 0, 117, 118,
	695, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	683, 0, 238, 0, 122, 123, 124, 125, 679, 681,
	0, 0, 129, 0, 126, 0, 303, 127, 696, 128,
	697, 698, 699, 0, 662, 0, 0, 130, 306, 131,
	132, 0, 134, 133, 0, 684, 307, 135, 0, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 623, 0, 652, 680,
	147, 700, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 674, 154, 155, 156,
	157, 0, 675, 158, 253, 159, 0, 160, 161, 162,
	701, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	629, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 668, 186, 187, 0, 188, 702, 258, 189, 0,
	195, 190, 191, 192, 194, 703, 193, 676, 0, 196,
	0, 197, 198, 199, 0, 261, 704, 705, 0, 0,
	200, 677, 678, 650, 201, 202, 2046, 204, 0, 0,
	205, 206, 207, 669, 208, 0, 209, 210, 211, 266,
	706, 0, 0, 212, 0, 0, 0, 0, 213, 214,
	215, 216, 0, 0, 655, 644, 645, 642, 643, 634,
	0, 0, 0, 620, 621, 0, 0, 0, 0, 622,
	88, 89, 630, 90, 0, 0, 0, 633, 671, 637,
	0, 0, 0, 91, 92, 93, 218, 686, 220, 687,
	94, 688, 689, 0, 95, 224, 225, 96, 0, 670,
	690, 691, 228, 0, 682, 0, 663, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 301, 104,
	105, 0, 664, 666, 0, 665, 667, 106, 107, 271,
	108, 692, 109, 693, 694, 0, 110, 0, 111, 0,
	0, 0, 685, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 672, 673, 651, 0, 0, 117, 118, 695,
	0, 119, 0, 120, 0, 0, 302, 0, 121, 683,
	0, 238, 0, 122, 123, 124, 125, 679, 681, 304,
	0, 129, 0, 126, 0, 303, 127, 696, 128, 697,
	698, 699, 0, 662, 0, 305, 130, 306, 131, 132,
	0, 134, 133, 0, 684, 307, 135, 308, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	309, 143, 144, 146, 145, 0, 0, 652, 680, 147,
	700, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 310, 153, 311, 674, 154, 155, 156, 157,
	0, 675, 158, 253, 159, 0, 160, 161, 162, 701,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 312, 177, 178, 1279,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	668, 186, 187, 313, 188, 702, 258, 189, 0, 195,
	190, 191, 192, 194, 703, 193, 676, 0, 196, 0,
	197, 198, 199, 0, 261, 704, 705, 0, 0, 200,
	677, 678, 650, 201, 202, 203, 204, 655, 0, 205,
	206, 207, 669, 208, 0, 209, 210, 211, 266, 706,
	0, 0, 212, 88, 89, 0, 90, 213, 214, 215,
	216, 671, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 1278, 670, 226, 227, 228, 633, 682, 0, 663,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 301, 104, 105, 0, 664, 666, 0, 665, 667,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 672, 673, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 302,
	0, 121, 683, 0, 238, 0, 122, 123, 124, 125,
	679, 681, 304, 0, 129, 0, 126, 0, 303, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 305, 130,
	306, 131, 132, 0, 134, 133, 0, 684, 307, 135,
	308, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 309, 143, 144, 146, 145, 0, 0,
	0, 680, 147, 249, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 310, 153, 311, 674, 154,
	155, 156, 157, 0, 675, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 312,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 668, 186, 187, 313, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 676,
	0, 196, 0, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 677, 678, 0, 201, 202, 203, 204,
	531, 0, 205, 206, 207, 669, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 88, 89, 0, 90,
	213, 214, 215, 216, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 0,
	95, 224, 225, 96, 1546, 0, 226, 227, 228, 0,
	229, 0, 300, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 301, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 230, 109, 231,
	232, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	0, 0, 0, 117, 118, 236, 0, 119, 0, 120,
	0, 0, 302, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 239, 240, 304, 0, 129, 0, 126,
	0, 303, 127, 241, 128, 242, 243, 244, 0, 245,
	0, 305, 130, 306, 131, 132, 0, 134, 133, 0,
	246, 307, 135, 308, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 309, 143, 144, 146,
	145, 0, 0, 0, 248, 147, 249, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 310, 153,
	311, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	159, 0, 160, 161, 162, 254, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 312, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 69, 256, 184, 185, 0, 186, 187, 313,
	188, 257, 258, 189, 0, 195, 190, 191, 192, 194,
	259, 193, 260, 0, 196, 71, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 0, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 535, 267, 0, 0, 212, 0,
	0, 0, 67, 213, 214, 215, 216, 0, 68, 531,
	742, 0, 850, 847, 842, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 66, 90, 0,
	0, 0, 0, 217, 0, 0, 0, 0, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 0, 95,
	224, 225, 96, 0, 0, 226, 227, 228, 0, 229,
	0, 300, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 301, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 271, 108, 230, 109, 231, 232,
	853, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 233, 115, 116, 234, 235, 844,
	0, 0, 117, 118, 236, 0, 119, 0, 120, 0,
	0, 302, 0, 121, 237, 0, 238, 0, 122, 123,
	124, 125, 239, 240, 304, 0, 129, 0, 126, 0,
	303, 127, 241, 128, 242, 243, 244, 0, 245, 0,
	305, 130, 306, 131, 132, 0, 134, 133, 0, 246,
	307, 135, 308, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 309, 143, 144, 146, 145,
	0, 0, 0, 248, 147, 249, 148, 149, 0, 150,
	845, 0, 151, 0, 0, 152, 250, 310, 153, 311,
	251, 154, 155, 156, 157, 0, 252, 158, 253, 159,
	0, 160, 161, 162, 254, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 312, 177, 178, 255, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 0, 186, 187, 313, 188,
	257, 258, 189, 0, 195, 190, 191, 192, 194, 259,
	193, 260, 0, 196, 0, 197, 198, 199, 0, 261,
	262, 263, 0, 0, 200, 264, 265, 843, 201, 202,
	203, 204, 0, 0, 205, 206, 207, 0, 208, 0,
	209, 210, 211, 266, 267, 531, 742, 212, 850, 847,
	842, 0, 213, 214, 215, 216, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 851, 848, 217,
	0, 0, 0, 0, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 300, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 838, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 844, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 239, 240,
	304, 0, 129, 0, 126, 0, 303, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 305, 130, 306, 131,
	132, 0, 134, 133, 0, 246, 307, 135, 308, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 845, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 313, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 843, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 531, 742, 212, 850, 847, 842, 0, 213, 214,
	215, 216, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 851, 848, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 0, 0, 226, 227, 228,
	0, 229, 0, 300, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 301, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 844, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 0, 0, 302, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 239, 240, 304, 0, 129, 0,
	126, 0, 303, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 305, 130, 306, 131, 132, 0, 134, 133,
	0, 246, 307, 135, 308, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 309, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 845, 0, 151, 0, 0, 152, 250, 310,
	153, 311, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 254, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 312, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 186, 187,
	313, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 843,
	201, 202, 203, 204, 0, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 85, 0, 212,
	0, 0, 0, 0, 213, 214, 215, 216, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 851,
	848, 217, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	239, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 485,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 156, 157, 0, 252, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 69,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 71, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	0, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 535, 267, 0, 0, 212, 85, 0, 0, 67,
	213, 214, 215, 216, 0, 68, 0, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 0, 0,
	217, 0, 1156, 0, 1161, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 239,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 69, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 71, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	535, 267, 0, 0, 212, 85, 0, 0, 67, 213,
	214, 215, 216, 0, 68, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 217,
	0, 0, 0, 66, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 0, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 239, 240,
	0, 0, 129, 0, 126, 0, 0, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 0, 130, 0, 131,
	132, 0, 134, 133, 0, 246, 0, 135, 0, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 0, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 485, 151, 0,
	0, 152, 250, 0, 153, 0, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 0, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 0, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 0, 201, 202, 203, 204, 0, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 85, 0, 0, 0, 213, 214,
	215, 216, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 217, 0,
	1156, 0, 1161, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 0, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 271,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 239, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 255,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 0,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 85, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 88, 89, 0, 90, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 750, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	239, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 156, 157, 0, 252, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 0, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	85, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 88, 89, 0, 90,
	213, 214, 215, 216, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 0,
	95, 224, 225, 96, 1069, 0, 226, 227, 228, 0,
	229, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 230, 109, 231,
	232, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	0, 0, 0, 117, 118, 236, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 239, 240, 0, 0, 129, 0, 126,
	0, 0, 127, 241, 128, 242, 243, 244, 0, 245,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	246, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 248, 147, 249, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 0, 153,
	0, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	159, 0, 160, 161, 162, 254, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 0, 186, 187, 0,
	188, 257, 258, 189, 0, 195, 190, 191, 192, 194,
	259, 193, 260, 0, 196, 0, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 85, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 88,
	89, 0, 90, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 1667, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 0, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 0, 0,
	129, 0, 126, 0, 0, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 0, 130, 0, 131, 132, 0,
	134, 133, 0, 246, 0, 135, 0, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 0,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 0, 153, 0, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 0, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	186, 187, 0, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 261, 262, 263, 0, 0, 200, 264,
	265, 0, 201, 202, 203, 204, 0, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 0, 0, 0, 0, 213, 214, 215, 216,
	655, 644, 645, 642, 643, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	717, 0, 0, 0, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 686, 220, 687, 94, 688, 689, 0,
	95, 224, 225, 96, 0, 0, 690, 691, 228, 0,
	229, 0, 300, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 301, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 692, 109, 693,
	694, 0, 110, 0, 111, 0, 0, 0, 685, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	651, 0, 0, 117, 118, 695, 0, 119, 0, 120,
	0, 0, 302, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 239, 240, 304, 0, 129, 0, 126,
	0, 303, 127, 696, 128, 697, 698, 699, 0, 662,
	0, 305, 130, 306, 131, 132, 0, 134, 133, 0,
	246, 307, 135, 308, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 309, 143, 144, 146,
	145, 0, 0, 652, 248, 147, 700, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 310, 153,
	311, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	159, 0, 160, 161, 162, 701, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 312, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 0, 186, 187, 313,
	188, 702, 258, 189, 0, 195, 190, 191, 192, 194,
	703, 193, 260, 0, 196, 0, 197, 198, 199, 0,
	261, 704, 705, 0, 0, 200, 264, 265, 650, 201,
	202, 203, 204, 531, 742, 205, 206, 207, 740, 208,
	0, 209, 210, 211, 266, 706, 0, 0, 212, 88,
	89, 0, 90, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 0, 0, 226,
	227, 228, 0, 229, 0, 300, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 301, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 302, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 304, 0,
	129, 0, 126, 0, 303, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 305, 130, 306, 131, 132, 0,
	134, 133, 0, 246, 307, 135, 308, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 309,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 310, 153, 311, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 312, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	186, 187, 313, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 261, 262, 263, 0, 0, 200, 264,
	265, 0, 201, 202, 203, 204, 85, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 88, 89, 0, 90, 213, 214, 215, 216,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 81, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 239,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 80, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 0,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 531, 742, 0, 0, 213,
	214, 215, 216, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 84, 0, 0, 217,
	0, 0, 0, 0, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 300, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 239, 240,
	304, 0, 129, 0, 126, 0, 303, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 305, 130, 306, 131,
	132, 0, 134, 133, 0, 246, 307, 135, 308, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 313, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 0, 201, 202, 203, 204, 85, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 0, 226, 227, 228, 0, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 239, 240, 0, 0, 129, 0, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 0, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 531, 212, 0, 0, 0,
	0, 213, 214, 215, 216, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 84, 217,
	0, 0, 0, 0, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 300, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 301,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 302, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 239, 240,
	304, 0, 129, 0, 126, 0, 303, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 305, 130, 306, 131,
	132, 0, 134, 133, 0, 246, 307, 135, 308, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 309, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 310, 153, 311, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 312, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 313, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 0, 201, 202, 203, 204, 85, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 0, 226, 227, 228, 1030, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 1028, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 1132,
	0, 117, 118, 236, 0, 119, 0, 120, 1033, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 239, 240, 0, 0, 129, 1130, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 1032,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 85, 1131, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 88, 89, 0,
	90, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 0, 0, 226, 227, 228,
	1030, 229, 0, 0, 1025, 97, 98, 99, 0, 100,
	1028, 101, 102, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 0, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 1033, 0, 0, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 1024, 240, 0, 0, 129, 0,
	126, 0, 0, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 0, 130, 0, 131, 132, 0, 134, 133,
	0, 246, 0, 135, 0, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 0, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 0,
	153, 0, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 1032, 160, 161, 162, 254, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 0, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 186, 187,
	0, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 85, 1031, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 0, 0, 212,
	88, 89, 0, 90, 213, 214, 215, 216, 217, 0,
	1634, 0, 0, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 0, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 271,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 239, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 255,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 0,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 85, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 88, 89, 0, 90, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	239, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 485,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 156, 157, 0, 252, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 0, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	85, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 88, 89, 0, 90,
	213, 214, 215, 216, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 0,
	95, 224, 225, 96, 0, 0, 226, 227, 228, 0,
	229, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 230, 109, 231,
	232, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	0, 0, 0, 117, 118, 236, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 775, 240, 0, 0, 129, 0, 126,
	0, 0, 127, 241, 128, 242, 243, 244, 0, 245,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	246, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 248, 147, 249, 148, 149, 0,
	150, 0, 485, 151, 0, 0, 152, 250, 0, 153,
	0, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	159, 0, 160, 161, 162, 254, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 0, 186, 187, 0,
	188, 257, 258, 189, 0, 195, 190, 191, 192, 194,
	259, 193, 260, 0, 196, 0, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 85, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 88,
	89, 543, 90, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 0, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 0, 0,
	129, 0, 126, 0, 0, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 0, 130, 0, 131, 132, 0,
	134, 133, 0, 246, 0, 135, 0, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 0,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 0, 153, 0, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 0, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	186, 187, 0, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 261, 262, 263, 0, 0, 200, 264,
	265, 0, 201, 202, 203, 204, 85, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 88, 89, 0, 90, 213, 214, 215, 216,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 497,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 485, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 85,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 88, 89, 0, 90, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 0, 95,
	224, 225, 96, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 271, 108, 230, 109, 231, 232,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 233, 115, 116, 234, 235, 0,
	0, 0, 117, 118, 236, 0, 119, 0, 120, 0,
	0, 0, 0, 121, 237, 0, 238, 0, 122, 123,
	124, 125, 490, 240, 0, 0, 129, 0, 126, 0,
	0, 127, 241, 128, 242, 243, 244, 0, 245, 0,
	0, 130, 0, 131, 132, 0, 134, 133, 0, 246,
	0, 135, 0, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 0, 143, 144, 146, 145,
	0, 0, 0, 248, 147, 249, 148, 149, 0, 150,
	0, 485, 151, 0, 0, 152, 250, 0, 153, 0,
	251, 154, 155, 156, 157, 0, 252, 158, 253, 159,
	0, 160, 161, 162, 254, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 0, 177, 178, 255, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 0, 186, 187, 0, 188,
	257, 258, 189, 0, 195, 190, 191, 192, 194, 259,
	193, 260, 0, 196, 0, 197, 198, 199, 0, 261,
	262, 263, 0, 0, 200, 264, 265, 0, 201, 202,
	203, 204, 85, 0, 205, 206, 207, 0, 208, 0,
	209, 210, 211, 266, 267, 0, 0, 212, 88, 89,
	399, 90, 213, 214, 215, 216, 217, 0, 0, 0,
	0, 91, 92, 93, 218, 219, 220, 221, 94, 222,
	223, 0, 95, 224, 225, 96, 0, 0, 226, 227,
	228, 0, 229, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 271, 108, 230,
	109, 231, 232, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 233, 115, 116,
	234, 235, 0, 0, 0, 117, 118, 236, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 237, 0, 238,
	0, 122, 123, 124, 125, 239, 240, 0, 0, 129,
	0, 126, 0, 0, 127, 241, 128, 242, 243, 244,
	0, 245, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 246, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 247, 141, 0, 143,
	144, 146, 145, 0, 0, 0, 248, 147, 249, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 250,
	0, 153, 0, 251, 154, 155, 156, 157, 0, 252,
	158, 253, 398, 0, 160, 161, 162, 254, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 255, 179, 0,
	180, 181, 182, 183, 0, 256, 184, 185, 0, 186,
	187, 0, 188, 257, 258, 189, 0, 195, 190, 191,
	192, 194, 259, 193, 260, 0, 196, 0, 197, 198,
	199, 0, 261, 262, 263, 0, 0, 200, 264, 265,
	0, 201, 202, 203, 204, 85, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 88, 89, 0, 90, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 0, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 239, 240,
	0, 0, 129, 0, 126, 0, 0, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 0, 130, 0, 131,
	132, 0, 134, 133, 0, 246, 0, 135, 0, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	141, 0, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 0, 153, 0, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 0, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 0, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 261, 262, 263, 0, 0,
	200, 264, 265, 0, 201, 202, 203, 204, 85, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 0, 226, 227, 228, 0, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 1325, 240, 0, 0, 129, 0, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 85, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 88, 89, 0,
	90, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 0, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 0, 0, 0, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 1323, 240, 0, 0, 129, 0,
	126, 0, 0, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 0, 130, 0, 131, 132, 0, 134, 133,
	0, 246, 0, 135, 0, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 0, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 0,
	153, 0, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 254, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 0, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 186, 187,
	0, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 85, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 0, 0, 212,
	88, 89, 0, 90, 213, 214, 215, 216, 217, 0,
	0, 0, 0, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 0, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 271,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 1312, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 255,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 0,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 85, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 88, 89, 0, 90, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	891, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 156, 157, 0, 252, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 0, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	85, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 88, 89, 0, 90,
	213, 214, 215, 216, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 0,
	95, 224, 225, 96, 0, 0, 226, 227, 228, 0,
	229, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 230, 109, 231,
	232, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	0, 0, 0, 117, 118, 236, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 239, 240, 0, 0, 129, 0, 126,
	0, 0, 127, 241, 128, 242, 243, 244, 0, 245,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	246, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 248, 147, 249, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 0, 153,
	0, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	159, 0, 160, 161, 162, 254, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 255, 179, 0, 180, 413,
	182, 183, 0, 256, 184, 185, 0, 186, 187, 0,
	188, 257, 258, 189, 0, 195, 190, 191, 192, 194,
	259, 193, 260, 0, 196, 0, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 85, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 88,
	89, 0, 90, 213, 214, 215, 216, 217, 0, 760,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 0, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 0, 0,
	129, 0, 126, 0, 0, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 0, 130, 0, 131, 132, 0,
	134, 133, 0, 246, 0, 135, 0, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 0,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 0, 153, 0, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 163,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 0, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	0, 187, 0, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 261, 262, 263, 0, 0, 200, 264,
	265, 0, 201, 202, 203, 204, 85, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 88, 89, 0, 90, 213, 214, 215, 216,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 595,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 141, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 255, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 185, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 261, 262, 263, 0,
	0, 200, 264, 265, 0, 201, 202, 203, 204, 85,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 88, 89, 0, 90, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 0, 95,
	224, 225, 96, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 271, 108, 230, 109, 231, 232,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 233, 115, 116, 234, 235, 0,
	0, 0, 117, 118, 236, 0, 119, 0, 120, 0,
	0, 0, 0, 121, 237, 0, 238, 0, 122, 123,
	124, 125, 590, 240, 0, 0, 129, 0, 126, 0,
	0, 127, 241, 128, 242, 243, 244, 0, 245, 0,
	0, 130, 0, 131, 132, 0, 134, 133, 0, 246,
	0, 135, 0, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 0, 143, 144, 146, 145,
	0, 0, 0, 248, 147, 249, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 0, 153, 0,
	251, 154, 155, 156, 157, 0, 252, 158, 253, 159,
	0, 160, 161, 162, 254, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 0, 177, 178, 255, 179, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 0, 186, 187, 0, 188,
	257, 258, 189, 0, 195, 190, 191, 192, 194, 259,
	193, 260, 0, 196, 0, 197, 198, 199, 0, 261,
	262, 263, 0, 0, 200, 264, 265, 0, 201, 202,
	203, 204, 85, 0, 205, 206, 207, 0, 208, 0,
	209, 210, 211, 266, 267, 0, 0, 212, 88, 89,
	0, 90, 213, 214, 215, 216, 217, 0, 0, 0,
	0, 91, 92, 93, 218, 219, 220, 221, 94, 222,
	223, 0, 95, 224, 225, 96, 0, 0, 226, 227,
	549, 0, 229, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 271, 108, 230,
	109, 231, 232, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 233, 115, 116,
	234, 235, 0, 0, 0, 117, 118, 236, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 237, 0, 238,
	0, 122, 123, 124, 125, 239, 240, 0, 0, 129,
	0, 126, 0, 0, 127, 241, 128, 242, 243, 244,
	0, 245, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 246, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 142, 247, 424, 0, 143,
	144, 146, 145, 0, 0, 0, 248, 147, 249, 148,
	149, 0, 150, 0, 0, 151, 0, 0, 152, 250,
	0, 153, 0, 251, 154, 155, 156, 157, 0, 252,
	158, 253, 159, 0, 160, 161, 162, 254, 163, 164,
	0, 165, 166, 167, 168, 169, 171, 172, 170, 173,
	174, 175, 0, 176, 0, 177, 178, 255, 179, 0,
	180, 181, 182, 183, 0, 256, 184, 185, 0, 186,
	187, 0, 188, 257, 258, 189, 0, 195, 190, 191,
	192, 194, 259, 193, 260, 0, 196, 0, 197, 198,
	199, 0, 423, 262, 263, 0, 0, 419, 264, 265,
	0, 201, 202, 203, 204, 85, 0, 205, 206, 207,
	0, 208, 0, 209, 210, 211, 266, 267, 0, 0,
	212, 88, 89, 0, 90, 213, 214, 215, 216, 217,
	0, 0, 0, 0, 91, 92, 93, 218, 219, 220,
	221, 94, 222, 223, 0, 95, 224, 225, 96, 0,
	0, 226, 227, 228, 0, 229, 0, 0, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 0,
	104, 105, 0, 0, 0, 0, 0, 0, 106, 107,
	271, 108, 230, 109, 231, 232, 0, 110, 0, 111,
	0, 0, 0, 112, 113, 0, 114, 0, 0, 0,
	233, 115, 116, 234, 235, 0, 0, 0, 117, 118,
	236, 0, 119, 0, 120, 0, 0, 0, 0, 121,
	237, 0, 238, 0, 122, 123, 124, 125, 239, 240,
	0, 0, 129, 0, 126, 0, 0, 127, 241, 128,
	242, 243, 244, 0, 245, 0, 0, 130, 0, 131,
	132, 0, 134, 133, 0, 246, 0, 135, 0, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 142, 247,
	424, 0, 143, 144, 146, 145, 0, 0, 0, 248,
	147, 249, 148, 149, 0, 150, 0, 0, 151, 0,
	0, 152, 250, 0, 153, 0, 251, 154, 155, 156,
	157, 0, 252, 158, 253, 159, 0, 160, 161, 162,
	254, 163, 164, 0, 165, 166, 167, 168, 169, 171,
	172, 170, 173, 174, 175, 0, 176, 0, 177, 178,
	255, 179, 0, 180, 181, 182, 183, 0, 256, 184,
	185, 0, 186, 187, 0, 188, 257, 258, 189, 0,
	195, 190, 191, 192, 194, 259, 193, 260, 0, 196,
	0, 197, 198, 199, 0, 423, 262, 263, 0, 0,
	419, 264, 265, 0, 201, 202, 203, 204, 85, 0,
	205, 206, 207, 0, 208, 0, 209, 210, 211, 266,
	267, 0, 0, 212, 88, 89, 0, 90, 213, 214,
	215, 216, 217, 0, 0, 0, 0, 91, 92, 93,
	218, 219, 220, 221, 94, 222, 223, 0, 95, 224,
	225, 96, 0, 0, 226, 227, 228, 0, 229, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 271, 108, 230, 109, 231, 232, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 233, 115, 116, 234, 235, 0, 0,
	0, 117, 118, 236, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 237, 0, 238, 0, 122, 123, 124,
	125, 527, 240, 0, 0, 129, 0, 126, 0, 0,
	127, 241, 128, 242, 243, 244, 0, 245, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 246, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 142, 247, 141, 0, 143, 144, 146, 145, 0,
	0, 0, 248, 147, 249, 148, 149, 0, 150, 0,
	0, 151, 0, 0, 152, 250, 0, 153, 0, 251,
	154, 155, 156, 157, 0, 252, 158, 253, 159, 0,
	160, 161, 162, 254, 163, 164, 0, 165, 166, 167,
	168, 169, 171, 172, 170, 173, 174, 175, 0, 176,
	0, 177, 178, 255, 179, 0, 180, 181, 182, 183,
	0, 256, 184, 185, 0, 186, 187, 0, 188, 257,
	258, 189, 0, 195, 190, 191, 192, 194, 259, 193,
	260, 0, 196, 0, 197, 198, 199, 0, 261, 262,
	263, 0, 0, 200, 264, 265, 0, 201, 202, 203,
	204, 85, 0, 205, 206, 207, 0, 208, 0, 209,
	210, 211, 266, 267, 0, 0, 212, 88, 89, 0,
	90, 213, 214, 215, 216, 217, 0, 0, 0, 0,
	91, 92, 93, 218, 219, 220, 221, 94, 222, 223,
	0, 95, 224, 225, 96, 0, 0, 226, 227, 228,
	0, 229, 0, 0, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 0, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 271, 108, 230, 109,
	231, 232, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 233, 115, 116, 234,
	235, 0, 0, 0, 117, 118, 236, 0, 119, 0,
	120, 0, 0, 0, 0, 121, 237, 0, 238, 0,
	122, 123, 124, 125, 524, 240, 0, 0, 129, 0,
	126, 0, 0, 127, 241, 128, 242, 243, 244, 0,
	245, 0, 0, 130, 0, 131, 132, 0, 134, 133,
	0, 246, 0, 135, 0, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 142, 247, 141, 0, 143, 144,
	146, 145, 0, 0, 0, 248, 147, 249, 148, 149,
	0, 150, 0, 0, 151, 0, 0, 152, 250, 0,
	153, 0, 251, 154, 155, 156, 157, 0, 252, 158,
	253, 159, 0, 160, 161, 162, 254, 163, 164, 0,
	165, 166, 167, 168, 169, 171, 172, 170, 173, 174,
	175, 0, 176, 0, 177, 178, 255, 179, 0, 180,
	181, 182, 183, 0, 256, 184, 185, 0, 186, 187,
	0, 188, 257, 258, 189, 0, 195, 190, 191, 192,
	194, 259, 193, 260, 0, 196, 0, 197, 198, 199,
	0, 261, 262, 263, 0, 0, 200, 264, 265, 0,
	201, 202, 203, 204, 85, 0, 205, 206, 207, 0,
	208, 0, 209, 210, 211, 266, 267, 0, 0, 212,
	88, 89, 0, 90, 213, 214, 215, 216, 217, 0,
	0, 0, 0, 91, 92, 93, 218, 219, 220, 221,
	94, 222, 223, 0, 95, 224, 225, 96, 0, 0,
	226, 227, 228, 0, 229, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 271,
	108, 230, 109, 231, 232, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 233,
	115, 116, 234, 235, 0, 0, 0, 117, 118, 236,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 237,
	0, 238, 0, 122, 123, 124, 125, 521, 240, 0,
	0, 129, 0, 126, 0, 0, 127, 241, 128, 242,
	243, 244, 0, 245, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 246, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 142, 247, 141,
	0, 143, 144, 146, 145, 0, 0, 0, 248, 147,
	249, 148, 149, 0, 150, 0, 0, 151, 0, 0,
	152, 250, 0, 153, 0, 251, 154, 155, 156, 157,
	0, 252, 158, 253, 159, 0, 160, 161, 162, 254,
	163, 164, 0, 165, 166, 167, 168, 169, 171, 172,
	170, 173, 174, 175, 0, 176, 0, 177, 178, 255,
	179, 0, 180, 181, 182, 183, 0, 256, 184, 185,
	0, 186, 187, 0, 188, 257, 258, 189, 0, 195,
	190, 191, 192, 194, 259, 193, 260, 0, 196, 0,
	197, 198, 199, 0, 261, 262, 263, 0, 0, 200,
	264, 265, 0, 201, 202, 203, 204, 85, 0, 205,
	206, 207, 0, 208, 0, 209, 210, 211, 266, 267,
	0, 0, 212, 88, 89, 0, 90, 213, 214, 215,
	216, 217, 0, 0, 0, 0, 91, 92, 93, 218,
	219, 220, 221, 94, 222, 223, 0, 95, 224, 225,
	96, 0, 0, 226, 227, 228, 0, 229, 0, 0,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 0, 104, 105, 0, 0, 0, 0, 0, 0,
	106, 107, 271, 108, 230, 109, 231, 232, 0, 110,
	0, 111, 0, 0, 0, 112, 113, 0, 114, 0,
	0, 0, 233, 115, 116, 234, 235, 0, 0, 0,
	117, 118, 236, 0, 119, 0, 120, 0, 0, 0,
	0, 121, 237, 0, 238, 0, 122, 123, 124, 125,
	519, 240, 0, 0, 129, 0, 126, 0, 0, 127,
	241, 128, 242, 243, 244, 0, 245, 0, 0, 130,
	0, 131, 132, 0, 134, 133, 0, 246, 0, 135,
	0, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	142, 247, 141, 0, 143, 144, 146, 145, 0, 0,
	0, 248, 147, 249, 148, 149, 0, 150, 0, 0,
	151, 0, 0, 152, 250, 0, 153, 0, 251, 154,
	155, 156, 157, 0, 252, 158, 253, 159, 0, 160,
	161, 162, 254, 163, 164, 0, 165, 166, 167, 168,
	169, 171, 172, 170, 173, 174, 175, 0, 176, 0,
	177, 178, 255, 179, 0, 180, 181, 182, 183, 0,
	256, 184, 185, 0, 186, 187, 0, 188, 257, 258,
	189, 0, 195, 190, 191, 192, 194, 259, 193, 260,
	0, 196, 0, 197, 198, 199, 0, 261, 262, 263,
	0, 0, 200, 264, 265, 0, 201, 202, 203, 204,
	85, 0, 205, 206, 207, 0, 208, 0, 209, 210,
	211, 266, 267, 0, 0, 212, 88, 89, 0, 90,
	213, 214, 215, 216, 217, 0, 0, 0, 0, 91,
	92, 93, 218, 219, 220, 221, 94, 222, 223, 0,
	95, 224, 225, 96, 0, 0, 226, 227, 228, 0,
	229, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 271, 108, 230, 109, 231,
	232, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 233, 115, 116, 234, 235,
	0, 0, 0, 117, 118, 236, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 237, 0, 238, 0, 122,
	123, 124, 125, 493, 240, 0, 0, 129, 0, 126,
	0, 0, 127, 241, 128, 242, 243, 244, 0, 245,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	246, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 142, 247, 141, 0, 143, 144, 146,
	145, 0, 0, 0, 248, 147, 249, 148, 149, 0,
	150, 0, 0, 151, 0, 0, 152, 250, 0, 153,
	0, 251, 154, 155, 156, 157, 0, 252, 158, 253,
	159, 0, 160, 161, 162, 254, 163, 164, 0, 165,
	166, 167, 168, 169, 171, 172, 170, 173, 174, 175,
	0, 176, 0, 177, 178, 255, 179, 0, 180, 181,
	182, 183, 0, 256, 184, 185, 0, 186, 187, 0,
	188, 257, 258, 189, 0, 195, 190, 191, 192, 194,
	259, 193, 260, 0, 196, 0, 197, 198, 199, 0,
	261, 262, 263, 0, 0, 200, 264, 265, 0, 201,
	202, 203, 204, 85, 0, 205, 206, 207, 0, 208,
	0, 209, 210, 211, 266, 267, 0, 0, 212, 88,
	89, 0, 90, 213, 214, 215, 216, 217, 0, 0,
	0, 0, 91, 92, 93, 218, 219, 220, 221, 94,
	222, 223, 0, 95, 224, 225, 96, 0, 0, 226,
	227, 228, 0, 229, 0, 0, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 0, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 271, 108,
	230, 109, 231, 232, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 233, 115,
	116, 234, 235, 0, 0, 0, 117, 118, 236, 0,
	119, 0, 120, 0, 0, 0, 0, 121, 237, 0,
	238, 0, 122, 123, 124, 125, 239, 240, 0, 0,
	129, 0, 126, 0, 0, 127, 241, 128, 242, 243,
	244, 0, 245, 0, 0, 130, 0, 131, 132, 0,
	134, 133, 0, 246, 0, 135, 0, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 142, 247, 141, 0,
	143, 144, 146, 145, 0, 0, 0, 248, 147, 249,
	148, 149, 0, 150, 0, 0, 151, 0, 0, 152,
	250, 0, 153, 0, 251, 154, 155, 156, 157, 0,
	252, 158, 253, 159, 0, 160, 161, 162, 254, 474,
	164, 0, 165, 166, 167, 168, 169, 171, 172, 170,
	173, 174, 175, 0, 176, 0, 177, 178, 255, 179,
	0, 180, 181, 182, 183, 0, 256, 184, 185, 0,
	186, 187, 0, 188, 257, 258, 189, 0, 195, 190,
	191, 192, 194, 259, 193, 260, 0, 196, 0, 197,
	198, 199, 0, 261, 262, 263, 0, 0, 200, 264,
	265, 0, 201, 202, 203, 204, 85, 0, 205, 206,
	207, 0, 208, 0, 209, 210, 211, 266, 267, 0,
	0, 212, 88, 89, 0, 90, 213, 214, 215, 216,
	217, 0, 0, 0, 0, 91, 92, 93, 218, 219,
	220, 221, 94, 222, 223, 0, 95, 224, 225, 96,
	0, 0, 226, 227, 228, 0, 229, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 271, 108, 230, 109, 231, 232, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 233, 115, 116, 234, 235, 0, 0, 0, 117,
	118, 236, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 237, 0, 238, 0, 122, 123, 124, 125, 239,
	240, 0, 0, 129, 0, 126, 0, 0, 127, 241,
	128, 242, 243, 244, 0, 245, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 246, 0, 135, 0,
	0, 416, 0, 0, 137, 0, 138, 139, 140, 142,
	247, 424, 0, 143, 144, 146, 145, 0, 0, 0,
	248, 147, 249, 148, 149, 0, 150, 0, 0, 151,
	0, 0, 152, 250, 0, 153, 0, 251, 154, 155,
	156, 157, 0, 252, 158, 253, 159, 0, 160, 161,
	162, 254, 163, 164, 0, 165, 166, 167, 168, 169,
	171, 172, 170, 173, 174, 175, 0, 176, 0, 177,
	178, 418, 179, 0, 180, 181, 182, 183, 0, 256,
	184, 417, 0, 186, 187, 0, 188, 257, 258, 189,
	0, 195, 190, 191, 192, 194, 259, 193, 260, 0,
	196, 0, 197, 198, 199, 0, 423, 262, 263, 0,
	0, 419, 264, 265, 0, 201, 202, 203, 204, 85,
	0, 205, 206, 207, 0, 208, 0, 209, 210, 211,
	266, 267, 0, 0, 212, 88, 89, 0, 90, 213,
	214, 215, 216, 217, 0, 0, 0, 0, 91, 92,
	93, 218, 219, 220, 221, 94, 222, 223, 0, 95,
	224, 225, 96, 0, 0, 226, 227, 228, 0, 229,
	0, 0, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 0, 104, 105, 0, 0, 0, 0,
	0, 0, 106, 107, 271, 108, 230, 109, 231, 232,
	0, 110, 0, 111, 0, 0, 0, 112, 113, 0,
	114, 0, 0, 0, 233, 115, 116, 234, 235, 0,
	0, 0, 117, 118, 236, 0, 119, 0, 120, 0,
	0, 0, 0, 121, 237, 0, 238, 0, 122, 123,
	124, 125, 239, 240, 0, 0, 129, 0, 126, 0,
	0, 127, 241, 128, 242, 243, 244, 0, 245, 0,
	0, 130, 0, 131, 132, 0, 134, 133, 0, 246,
	0, 135, 0, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 142, 247, 141, 0, 143, 144, 146, 145,
	0, 0, 0, 248, 147, 249, 148, 149, 0, 150,
	0, 0, 151, 0, 0, 152, 250, 0, 153, 0,
	251, 154, 155, 0, 157, 0, 252, 158, 253, 159,
	0, 160, 0, 162, 254, 163, 164, 0, 165, 166,
	167, 168, 169, 171, 172, 170, 173, 174, 175, 0,
	176, 0, 177, 178, 255, 0, 0, 180, 181, 182,
	183, 0, 256, 184, 185, 0, 186, 187, 0, 188,
	257, 258, 189, 0, 195, 190, 191, 192, 194, 259,
	193, 260, 0, 196, 0, 197, 198, 199, 0, 261,
	262, 263, 0, 0, 200, 264, 265, 0, 201, 202,
	203, 204, 0, 0, 205, 206, 207, 0, 208, 0,
	209, 210, 211, 266, 267, 0, 0, 212, 0, 0,
	0, 0, 213, 214, 215, 216, 915, 916, 0, 935,
	936, 937, 945, 946, 947, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 949, 0, 0, 0, 915, 916, 0, 935,
	936, 937, 945, 946, 947, 0, 0, 0, 0, 0,
	0, 917, 938, 0, 0, 0, 0, 932, 0, 918,
	0, 0, 949, 0, 0, 0, 915, 916, 0, 935,
	936, 937, 945, 946, 947, 0, 0, 0, 0, 0,
	0, 917, 938, 0, 0, 0, 0, 932, 0, 918,
	0, 0, 949, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 942, 950, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 948, 915, 916, 0, 935, 936, 937, 945, 946,
	947, 0, 0, 940, 0, 942, 950, 0, 938, 933,
	0, 0, 0, 0, 0, 918, 923, 0, 949, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 939, 942, 950, 917, 0, 933,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 939, 0, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 923, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 942, 950, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 0, 0, 0, 0, 0, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 940,
	0, 0, 0, 0, 0, 933, 0, 941, 0, 943,
	929, 930, 931, 0, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 0, 944, 0, 0, 0, 0, 0,
	939, 1520, 0, 0, 0, 0, 0, 941, 0, 0,
	929, 930, 931, 0, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 0, 944, 0, 0, 0, 0, 0,
	0, 1472, 0, 0, 0, 0, 0, 941, 0, 0,
	929, 930, 931, 934, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 0, 944, 943, 915, 916, 1989, 935,
	936, 937, 945, 946, 947, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 949, 0, 0, 0, 915, 916, 0, 935,
	936, 937, 945, 946, 947, 0, 0, 0, 0, 0,
	0, 917, 938, 0, 0, 0, 0, 932, 0, 918,
	0, 0, 949, 941, 0, 0, 929, 930, 931, 0,
	928, 925, 926, 927, 919, 920, 921, 922, 924, 0,
	944, 917, 0, 0, 1987, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 915, 916, 0, 935, 936, 937, 945, 946,
	947, 0, 0, 0, 0, 942, 950, 0, 938, 0,
	0, 0, 0, 0, 0, 918, 923, 0, 949, 0,
	0, 948, 915, 916, 0, 935, 936, 937, 945, 946,
	947, 0, 0, 940, 0, 942, 950, 917, 938, 933,
	0, 0, 0, 932, 0, 918, 0, 0, 949, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 939, 0, 0, 917, 0, 933,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 923, 0, 939, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 942, 950, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 923, 0, 0, 0, 0, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 940,
	0, 942, 950, 0, 0, 933, 0, 0, 0, 943,
	0, 0, 0, 0, 0, 0, 0, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	939, 0, 0, 0, 0, 933, 0, 941, 0, 0,
	929, 930, 931, 0, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 0, 944, 0, 0, 0, 1934, 0,
	939, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	929, 930, 931, 934, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 0, 944, 943, 0, 0, 1929, 0,
	0, 915, 916, 0, 935, 936, 937, 945, 946, 947,
	0, 0, 0, 934, 0, 0, 0, 938, 0, 0,
	0, 0, 0, 0, 918, 943, 0, 949, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 932, 941, 0, 0, 929, 930, 931, 0,
	928, 925, 926, 927, 919, 920, 921, 922, 924, 0,
	944, 0, 0, 0, 1925, 0, 0, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 929, 930, 931, 0,
	928, 925, 926, 927, 919, 920, 921, 922, 924, 0,
	944, 923, 0, 0, 1867, 0, 915, 916, 0, 935,
	936, 937, 945, 946, 947, 0, 0, 0, 0, 0,
	942, 950, 938, 0, 0, 0, 0, 0, 0, 918,
	0, 0, 949, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 917, 0, 0, 933, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 915, 916, 0, 935, 936, 937, 945, 946,
	947, 0, 934, 0, 0, 942, 950, 0, 938, 0,
	0, 0, 0, 0, 943, 918, 0, 0, 949, 0,
	0, 948, 915, 916, 0, 935, 936, 937, 945, 946,
	947, 0, 0, 940, 0, 0, 0, 917, 938, 933,
	0, 0, 0, 932, 0, 918, 0, 0, 949, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 0, 0, 917, 0, 0,
	0, 0, 941, 932, 0, 929, 930, 931, 0, 928,
	925, 926, 927, 919, 920, 921, 922, 924, 0, 944,
	0, 0, 923, 1845, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 942, 950, 0, 0, 0, 0, 0, 0, 943,
	0, 0, 923, 0, 0, 0, 0, 948, 915, 916,
	0, 935, 936, 937, 945, 946, 947, 0, 0, 940,
	0, 942, 950, 0, 938, 933, 0, 0, 0, 0,
	0, 918, 0, 0, 949, 0, 0, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	939, 0, 0, 917, 0, 933, 0, 941, 0, 932,
	929, 930, 931, 0, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 0, 944, 0, 0, 0, 1844, 0,
	939, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 943, 0, 0, 923, 0,
	0, 0, 0, 915, 916, 0, 935, 936, 937, 945,
	946, 947, 0, 934, 0, 0, 0, 942, 950, 938,
	0, 0, 0, 0, 0, 943, 918, 0, 0, 949,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 917, 0,
	0, 933, 0, 941, 932, 0, 929, 930, 931, 0,
	928, 925, 926, 927, 919, 920, 921, 922, 924, 0,
	944, 0, 0, 0, 1736, 0, 939, 0, 0, 0,
	0, 0, 0, 941, 0, 0, 929, 930, 931, 0,
	928, 925, 926, 927, 919, 920, 921, 922, 924, 0,
	944, 0, 0, 923, 1670, 0, 0, 0, 0, 915,
	916, 0, 935, 936, 937, 945, 946, 947, 0, 934,
	0, 0, 942, 950, 0, 938, 0, 0, 0, 0,
	0, 943, 918, 0, 0, 949, 0, 0, 948, 915,
	916, 0, 935, 936, 937, 945, 946, 947, 0, 0,
	940, 0, 0, 0, 917, 938, 933, 0, 0, 0,
	932, 0, 918, 0, 0, 949, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 917, 0, 0, 0, 0, 941,
	932, 0, 929, 930, 931, 0, 928, 925, 926, 927,
	919, 920, 921, 922, 924, 0, 944, 0, 0, 923,
	1654, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 0, 942, 950,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 923,
	2068, 0, 0, 0, 948, 915, 916, 0, 935, 936,
	937, 945, 946, 947, 0, 0, 940, 0, 942, 950,
	0, 938, 933, 0, 0, 0, 0, 0, 918, 0,
	0, 949, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 939, 0, 0,
	917, 0, 933, 0, 941, 0, 932, 929, 930, 931,
	0, 928, 925, 926, 927, 919, 920, 921, 922, 924,
	0, 944, 0, 0, 0, 1233, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 2067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 943, 0, 0, 923, 0, 1512, 0, 0,
	1511, 1480, 1481, 0, 1498, 1499, 1500, 0, 0, 0,
	934, 0, 0, 0, 942, 950, 0, 1646, 0, 0,
	0, 0, 943, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 940, 0, 0, 0, 0, 0, 933, 0,
	941, 0, 1495, 929, 930, 931, 0, 928, 925, 926,
	927, 919, 920, 921, 922, 924, 0, 944, 0, 1447,
	0, 0, 0, 939, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 929, 930, 931, 0, 928, 925, 926,
	927, 919, 920, 921, 922, 924, 0, 944, 0, 0,
	0, 1486, 0, 0, 915, 916, 0, 935, 936, 937,
	945, 946, 947, 0, 0, 0, 934, 0, 0, 0,
	938, 0, 0, 0, 0, 1148, 0, 918, 943, 0,
	949, 0, 0, 0, 0, 0, 1501, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 917,
	0, 0, 0, 0, 1496, 932, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1149, 0, 0, 941, 0, 0, 929,
	930, 931, 0, 928, 925, 926, 927, 919, 920, 921,
	922, 924, 0, 944, 923, 953, 0, 0, 0, 0,
	0, 915, 916, 0, 935, 936, 937, 945, 946, 947,
	0, 0, 1497, 942, 950, 0, 0, 938, 0, 0,
	0, 952, 0, 0, 918, 0, 0, 949, 0, 948,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 0, 917, 933, 0, 0,
	0, 0, 932, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 1493, 1494, 0, 1491,
	1488, 1489, 1490, 1482, 1483, 1484, 1485, 1487, 0, 0,
	0, 923, 0, 0, 0, 0, 915, 916, 0, 935,
	936, 937, 945, 946, 947, 934, 0, 0, 0, 0,
	942, 950, 938, 0, 0, 0, 0, 943, 0, 918,
	0, 0, 949, 0, 0, 0, 948, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 917, 0, 0, 933, 0, 0, 932, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 941, 0, 0, 929, 930,
	931, 0, 928, 925, 926, 927, 919, 920, 921, 922,
	924, 0, 944, 0, 0, 0, 923, 0, 0, 0,
	0, 0, 915, 916, 0, 935, 936, 937, 945, 946,
	947, 0, 934, 0, 0, 942, 950, 0, 938, 0,
	0, 0, 0, 0, 943, 918, 0, 0, 949, 0,
	0, 948, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 917, 0, 933,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 469, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 929, 930, 931, 0, 928,
	925, 926, 927, 919, 920, 921, 922, 924, 0, 944,
	0, 0, 923, 0, 0, 0, 0, 915, 916, 0,
	935, 936, 937, 945, 946, 947, 0, 934, 0, 0,
	0, 942, 950, 938, 0, 0, 0, 0, 0, 943,
	918, 0, 0, 949, 0, 0, 0, 948, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	0, 0, 917, 0, 0, 933, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 0, 0, 0, 0, 0, 0, 941, 0, 0,
	929, 930, 931, 0, 928, 925, 926, 927, 919, 920,
	921, 922, 924, 0, 944, 0, 0, 923, 0, 0,
	0, 0, 1518, 915, 916, 0, 935, 936, 937, 945,
	946, 947, 0, 934, 0, 0, 942, 950, 0, 938,
	0, 0, 0, 1513, 0, 943, 918, 0, 0, 949,
	0, 0, 948, 915, 916, 0, 935, 936, 937, 945,
	946, 947, 0, 0, 940, 1658, 0, 0, 917, 938,
	933, 0, 0, 0, 932, 0, 918, 0, 0, 949,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 939, 0, 0, 917, 0,
	0, 0, 0, 941, 932, 0, 929, 930, 931, 0,
	928, 925, 926, 927, 919, 920, 921, 922, 924, 0,
	944, 0, 0, 923, 0, 0, 0, 0, 0, 915,
	916, 0, 935, 936, 937, 945, 946, 947, 934, 0,
	0, 0, 942, 950, 0, 938, 0, 0, 0, 1471,
	943, 0, 918, 923, 0, 949, 0, 0, 948, 915,
	916, 0, 935, 936, 937, 945, 946, 947, 0, 0,
	940, 0, 942, 950, 917, 938, 933, 0, 0, 0,
	932, 0, 918, 0, 0, 949, 0, 0, 948, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	940, 939, 0, 0, 917, 0, 933, 0, 941, 0,
	932, 929, 930, 931, 0, 928, 925, 926, 927, 919,
	920, 921, 922, 924, 0, 944, 0, 0, 0, 923,
	0, 939, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1478, 934, 0, 0, 0, 942, 950,
	0, 0, 0, 0, 0, 0, 943, 0, 0, 923,
	0, 0, 0, 0, 948, 915, 916, 0, 935, 936,
	937, 945, 946, 947, 934, 0, 940, 0, 942, 950,
	0, 938, 933, 0, 0, 0, 943, 0, 918, 0,
	0, 949, 0, 0, 948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 939, 0, 0,
	917, 0, 933, 0, 941, 0, 932, 929, 930, 931,
	0, 928, 925, 926, 927, 919, 920, 921, 922, 924,
	0, 944, 0, 0, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 929, 930, 931,
	934, 928, 925, 926, 927, 919, 920, 921, 922, 924,
	0, 944, 943, 0, 0, 923, 0, 0, 915, 916,
	0, 935, 936, 937, 945, 946, 947, 0, 0, 0,
	934, 0, 0, 0, 942, 950, 0, 0, 0, 0,
	0, 918, 943, 0, 949, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 1480, 1481, 0, 1498, 1499,
	1500, 0, 940, 917, 0, 0, 0, 0, 933, 932,
	941, 0, 0, 929, 930, 931, 0, 928, 925, 926,
	927, 919, 920, 921, 922, 924, 0, 944, 0, 1480,
	1481, 0, 1498, 1499, 1500, 0, 0, 0, 0, 0,
	941, 0, 0, 929, 930, 931, 1495, 928, 925, 926,
	927, 919, 920, 921, 922, 924, 0, 944, 923, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 934, 942, 950, 0,
	1495, 0, 0, 0, 0, 0, 0, 0, 943, 0,
	0, 0, 0, 948, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 933, 0, 0, 0, 1502, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1486,
	1501, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 1496, 929,
	930, 931, 0, 928, 925, 926, 927, 919, 920, 921,
	922, 924, 0, 944, 1501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 943, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 941,
	1497, 0, 929, 930, 931, 0, 928, 925, 926, 927,
	919, 920, 921, 922, 924, 0, 944, 801, 793, 818,
	786, 809, 808, 0, 0, 788, 787, 0, 0, 0,
	820, 819, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 0, 1491, 1488, 1489, 1490, 1482, 1483, 1484,
	1485, 1487, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 806, 805, 0, 0, 0, 0, 0,
	0, 0, 804, 1492, 1493, 1494, 0, 1491, 1488, 1489,
	1490, 1482, 1483, 1484, 1485, 1487, 0, 0, 0, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	801, 793, 818, 786, 809, 808, 0, 0, 788, 787,
	0, 0, 0, 820, 819, 0, 0, 796, 795, 797,
	798, 799, 0, 817, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 814, 0, 806, 805, 790, 0,
	0, 0, 0, 0, 0, 804, 0, 0, 0, 0,
	807, 0, 0, 0, 794, 0, 0, 0, 0, 0,
	0, 0, 803, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 1167, 1165, 1166, 1169, 1168, 0, 0,
	796, 795, 797, 798, 799, 0, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 791, 0, 0,
	0, 0, 0, 0, 0, 800, 792, 0, 0, 0,
	0, 790, 0, 0, 822, 0, 0, 0, 0, 0,
	0, 0, 789, 807, 0, 815, 816, 794, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 821,
	0, 0, 802, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	791, 0, 0, 0, 0, 0, 0, 0, 800, 792,
	0, 0, 0, 0, 0, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 789, 0, 0, 815, 816,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 821,
}
var sqlPact = [...]int{

	3884, -1000, 30, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 669,
	15712, 15712, 19291, -1000, -1000, -1000, -1000, -1000, -1000, 716,
	641, 146, 5101, 19291, 19291, 19018, 1100, 1100, 20656, -1000,
	-1000, 23932, -1000, 2703, 482, 494, 482, 482, 489, 20656,
	19291, 637, 733, 141, -1000, 772, 5, 23659, 19291, 1377,
	27, 17653, 310, 3884, 18745, 23386, 19291, 18472, 612, 24,
	16274, 19291, -1000, 33, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1218, 370,
	33, -1000, 1205, 1108, 1101, 17653, 23113, 22840, 22567, 22294,
	-1000, 12026, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 795, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 319, 318, -1000, 18199, -1000,
	940, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 936, -1000, 19291, -1000, -1000, 22021, 21748, 317, 911,
	-1000, -1000, 575, 402, 1392, -1000, 36, -1000, -1000, -1000,
	1199, -1000, 934, 1195, 1194, 1193, 1192, 1188, 1187, 401,
	872, 464, -1000, 911, -1000, 911, -1000, -1000, -1000, 606,
	20656, -1000, -1000, 17653, -1000, 21475, 19291, 19291, 1111, 21202,
	-1000, 772, -1000, -1000, -1000, 980, 1359, 1359, 1359, 1400,
	166, 147, 141, 14, 19291, -1000, 313, 14, 7222, 7222,
	-1000, -1000, 310, -1000, 295, 14869, -1000, 8466, -1000, 854,
	1275, 419, 719, 1274, -141, 810, 805, 1272, 15439, 16274,
	24, 22, -1000, -1000, -1000, 4804, 15439, 673, 14050, 33,
	-1000, -1000, -1000, 17653, 19291, 19291, 713, 20929, -1000, 1271,
	130, 1269, -1000, 125, 1268, -1000, 125, 1266, 13, -1000,
	-1000, -1000, -1000, -1000, -1000, 310, 17926, 19291, 1497, 27353,
	-1000, 10284, -1000, -1000, 15712, 862, 15712, -1000, -1000, 1475,
	-1000, 10284, -1000, 21, 19, 1072, 1041, 12611, 12325, 1323,
	654, -1000, -1000, -1000, 35, 5101, 19291, 1231, 15712, 19291,
	19291, 19291, 19291, 19291, 19291, -1000, 1048, -1000, -1000, 19291,
	19291, -1000, 17, 15, -1000, 20656, -1000, 134, -1000, 309,
	1025, 408, 150, 20383, 408, 1024, -1000, 980, -1000, 944,
	1044, 9387, 10284, 141, -1000, -1000, 141, 141, 10284, -1000,
	-1000, 19291, 14, 1472, 19291, 140, -1000, 26221, -1000, -1000,
	10284, 10284, 10284, 10284, 10284, 885, 341, -1000, 305, 304,
	6023, -1000, -1000, 1591, -1000, -1000, -1000, 163, -1000, -1000,
	10284, 33, -1000, -1000, -1000, -1000, 303, 1604, -1000, 467,
	-1000, -1000, -1000, 406, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1229, 299, 298, -1000, -1000, -1000, -1000,
	293, 292, 290, 289, 287, 278, 277, 275, 272, 271,
	270, 269, 264, 263, 262, 856, -1000, 429, -1000, -1000,
	429, 429, -1000, 255, 255, 256, -1000, -1000, -1000, -1000,
	255, -1000, -1000, -1000, 390, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 261, 140, -1000, -1000, -1000, 19291, 9, -1000,
	26779, -1000, -14, 907, -1000, 17107, 1484, 1384, 1340, 17653,
	1426, 1415, 583, 19291, 19291, 581, 576, 17653, 368, -1000,
	-1000, -1000, -1000, -1000, 19291, -1000, -1000, -71, -1000, -1000,
	1183, 8, -1000, -1000, 420, 82, 1460, 82, 14323, -1000,
	19291, 19291, -1000, 19291, -1000, -1000, 19291, -1000, 19291, 19291,
	-1000, 19291, 143, 16561, 855, 1264, 677, 5, 7, -1000,
	1485, -1000, -1000, -1000, -1000, 92, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 256, 856, 255, 255, 255, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 390, -1000, -1000, 429, 429,
	429, -1000, -1000, 0, 26779, 560, -1000, 1181, 474, -5,
	859, 1096, 999, -1000, -1000, -1000, -1000, 12, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1578, -1000,
	-1000, 1590, 12, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1603, 5101, -1000, -1000, -1000, 19291, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 859, 1096,
	-1000, -1000, 17653, 16834, 1453, 1263, 861, -1000, 1440, 19291,
	931, 1011, -1000, 633, 1262, -1000, -1000, -1000, -1000, 26779,
	-1000, 26779, 748, 1102, -1000, 1102, -1, -1000, 26114, -1000,
	247, -6, 420, 7222, 13761, 27270, 27353, 19291, 623, 10284,
	10284, 10284, 10284, 10284, 10284, 10284, 10284, 10284, 10284, 10284,
	10284, 10284, 10284, 10284, 10284, 10284, 10284, 10284, 10284, 10284,
	10284, 1094, 10284, 553, 10284, 10284, 10284, 10284, 1240, 902,
	239, 973, 5101, -1000, -1000, 639, 639, 639, 26988, 26988,
	223, 341, -1000, 10284, -1000, 9064, 147, 25663, -2, -1000,
	-1000, -1000, 6920, 424, 26779, 33, 5700, -1000, 1589, 815,
	1242, 1159, 244, 139, 131, 10284, 10284, 10583, 10583, 10284,
	10882, 10284, 10284, 6322, 10284, 10284, 10284, 10284, 10284, 10284,
	-1000, 243, -1000, -1000, -1000, -1000, 1587, -1000, -1000, 1585,
	-1000, 621, 618, 1584, 420, 127, 8466, -1000, 855, 19291,
	19291, 19291, -1000, -1000, 1010, 20110, 1007, 27353, 19291, -1000,
	242, 241, 1085, 1084, 19291, 19291, 19837, 19564, 19291, 851,
	5, 5, 19291, 794, -1000, 19291, 19291, 791, 1132, 948,
	-1000, 409, 15439, 667, 1180, 19291, 767, 10284, 840, -1000,
	13472, 434, 19291, 782, 76, -1000, -1000, -1000, 380, 19291,
	-1000, -1000, -1000, 130, -1000, 125, 125, -1000, -1000, 17653,
	-1000, -1000, -1000, -1000, -1000, -1000, 27353, 336, 334, -1000,
	1583, 552, -1000, 543, 542, 538, -1000, 240, -1000, 10284,
	19291, 19291, 1096, -1000, -1000, -1000, -1000, 697, -1000, 847,
	-1000, 12897, -1000, -1000, -1000, -1000, -19, -1000, -1000, -1000,
	-1000, 122, -12, -13, 27353, -1000, -1000, -1000, -1000, -1000,
	19291, 311, 19291, 5, 19291, -1000, 1601, 5, 19291, 1261,
	1282, 360, 19291, -1000, -1000, -1000, 10284, -1000, -1000, -1000,
	5, -1000, 1157, -1000, -111, 1930, 1345, -146, 149, 387,
	-1000, 13183, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 398, 413, 413, 484, 484, 484, 484, 165,
	165, 1432, 2601, 3285, 3285, 3285, 836, 288, 288, 3285,
	3285, 3285, 26988, 26885, 364, 10284, 10284, 529, 877, 239,
	364, 10284, 1543, 364, 364, 364, -1000, 1304, -1000, -1000,
	-1000, -1000, 1179, 232, 10882, 10882, -1000, -1000, -1000, 6023,
	11480, -1000, -1000, -1000, -1000, -1000, 231, 10284, -1000, 25769,
	-166, -20, -1000, -1000, 10284, -16, -17, -1000, -1000, 619,
	-1000, 10284, -1000, -10, 10284, 10284, 10284, 118, 116, -1000,
	888, 229, 228, 10284, -1000, -1000, 26749, 24526, 115, 1175,
	-122, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 114, 113,
	26673, -122, 110, 27025, -1000, 10882, 10882, 10882, 6023, 222,
	108, 25905, -122, 26643, 8765, 8765, 8765, 106, 26537, 10284,
	-122, 24496, 3748, 3556, -25, -31, -33, 1582, -35, 105,
	396, 393, 104, 1157, -1000, -1000, -1000, -1000, 516, 515,
	1258, -1000, 1005, -1000, 439, -1000, 694, 10284, 11753, 220,
	213, 865, -1000, 1257, 958, 1256, 958, -1000, -14, 853,
	-1000, -1000, -1000, 513, -1000, -1000, 501, 409, 1173, 648,
	-1000, 918, -1000, -1000, 656, -1000, -1000, 6621, 26779, -1000,
	770, 1349, -37, -1000, -1000, 7222, 420, 14323, 13761, 8466,
	-39, -1000, -1000, -1000, 855, -1000, 547, 1581, 100, 998,
	883, 809, 730, 1575, 26779, -19, -19, -1000, -1000, -1000,
	-1000, -1000, 19291, 1118, -1000, 16834, 210, 19291, 208, -1000,
	205, -1000, -1000, 204, 19291, 1070, 360, 16001, -1000, 408,
	-1000, 99, 1145, 1395, -1000, 13761, 1092, 1091, 13761, 1237,
	890, 890, 890, -1000, 203, 145, 387, 4196, 10284, 17380,
	913, 58, 98, 1930, 10284, 364, 364, 10284, 10882, 10882,
	-1000, 364, -1000, -1000, -1000, -1000, -1000, 1172, 201, 10284,
	27353, 26011, 3526, -41, -1000, 8143, -29, -1000, 10284, -1000,
	25558, -1000, -1000, 332, 1280, -1000, 10284, 26432, 94, 7844,
	-1000, 26326, -11, -11, -1000, 1598, -1000, 14596, 421, 908,
	25452, 27270, 27353, -1000, 10284, -1000, -1000, 1171, 10284, -1000,
	27270, 27353, 10882, 10882, 10882, 10882, 10882, 10882, 10882, 10882,
	10882, 10882, 10882, 10882, 10882, 10882, 10882, 10882, 10882, 10882,
	10882, 1066, 10882, 1538, 1538, 1538, -30, 7521, -1000, 1226,
	1171, 10284, 10284, 27353, 93, 86, 85, -1000, 10284, -122,
	10284, 10284, 10284, -1000, -1000, -1000, 84, -1000, 1559, -1000,
	-1000, -1000, -1000, 1145, 19291, 19291, 19291, 1255, -1000, 2189,
	-1000, 25422, -51, -1000, 300, 1361, 10284, -1000, -1000, 200,
	11753, 19291, -1000, 1099, 1105, 466, 19291, -1000, 19291, -1000,
	19291, 19291, 19291, 19291, 19291, -1000, 15439, 616, 199, -1000,
	-64, -1000, 7222, 209, 5, -64, 767, -1000, -52, -1000,
	377, -1000, 328, 326, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 71, -1000, -1000, 1126, -1000, 11753, 192, 19291,
	16834, 1436, 11753, 930, 1079, 360, 16001, -1000, 633, -1000,
	411, 10284, 10284, 1930, 13761, 13761, 2099, 1088, 13761, -1000,
	-1000, -1000, -1000, 325, 365, 323, 12026, 17380, -1000, 1553,
	1093, -55, -1000, -1000, 19291, 191, -1000, 387, 500, 364,
	2833, 2796, 10284, 27353, 3716, -60, 10284, 10284, -1000, -62,
	-1000, 10284, 322, 26779, -1000, -1000, -1000, 26779, 10284, 1540,
	10284, 70, 68, 67, -1000, -1000, -1000, 24205, 10284, 64,
	-1000, 61, 54, 26779, 1226, 26779, -1000, -1000, 525, 525,
	1538, 1538, 1538, 1538, 546, 546, 1003, 779, 2375, 2375,
	2375, 674, 479, 479, 2375, 2375, 2375, 1167, 1067, 187,
	27059, 10284, -66, -1000, -1000, -1000, 26779, 26779, 51, -1000,
	-1000, -1000, -122, 3181, 25316, 25211, -1000, 49, 411, -1000,
	-1000, -1000, 19291, -1000, 19291, -1000, 19291, 19291, 1170, 984,
	-1000, -1000, 1083, 184, 10882, 19291, -1000, 841, 11753, 1369,
	33, 19291, 1369, 25002, 5700, -72, -73, 983, -1000, 978,
	10284, -1000, 27353, 958, 958, -1000, 499, 498, -1000, -1000,
	-53, 15166, 1594, -64, 1288, 19291, 1338, -1000, -1000, 183,
	-1000, -1000, -1000, 875, -74, 11753, -80, 47, 5, -82,
	19291, -1000, 360, 16001, -1000, 1282, -1000, 19291, 26779, -122,
	-1000, 2099, -1000, 182, 10284, 13761, -1000, -146, -1000, -88,
	-1000, 387, -92, -1000, 321, -163, -1000, 358, -1000, 387,
	181, 19291, 17380, 10284, 10284, 3716, -94, -1000, 364, 364,
	-1000, 24972, -1000, 26779, -1000, 26326, -1000, -1000, -1000, 870,
	-1000, 24896, -1000, -1000, -1000, -1000, 10882, 1166, 180, 27353,
	24866, -1000, -1000, 10284, -1000, -1000, -1000, -1000, -1000, 764,
	-1000, -1000, 19291, 994, -1000, -1000, 10284, 27059, 177, 1118,
	176, -1000, -1000, -1000, -1000, -1000, -1000, 1361, -10, -1000,
	828, -1000, -1000, 26779, 1357, -1000, -1000, 19291, 19291, -1000,
	175, 33, -99, -1000, 357, 565, -100, 19291, -1000, -1000,
	5398, 19291, 841, -101, -1000, 1118, -1000, 841, 172, 16001,
	-1000, 1070, -110, -1000, 1398, -1000, 19291, 26779, -1000, 387,
	-1000, 1551, 17380, 143, -1000, 1093, -1000, 4504, 17380, 19291,
	-106, -1000, 364, 364, -1000, -1000, 45, 908, 1382, -1000,
	3062, 10882, 27353, -121, -1000, 24632, -1000, -1000, 1252, 24556,
	1037, 19291, -1000, 19291, 1369, 44, 19291, 441, 19291, -1000,
	-1000, 10284, 1594, -1000, -1000, 1545, 695, -1000, 420, -1000,
	171, 1118, 841, -1000, 1118, 11753, -1000, 1079, 19291, 170,
	-123, 17380, -1000, -1000, 301, -1000, -1000, 1549, -1000, -125,
	-1000, -1000, 797, 10284, 3062, -129, -1000, -1000, 1245, -1000,
	924, 822, 43, -135, -1000, -1000, 150, -1000, 10284, -1000,
	-11, -1000, -1000, 14323, -1000, 19291, -1000, 1118, -1000, -136,
	-1000, -1000, -1000, -1000, -1000, 387, 167, -1000, 40, 9985,
	9985, -122, -1000, 19291, -1000, 926, 925, 672, -1000, -1000,
	-1000, -1000, -1000, 1037, 26779, 39, -130, -152, -1000, 841,
	17380, -1000, -1000, -1000, -1000, 11181, 989, 742, 25799, -1000,
	-1000, -1000, 1294, -1000, 457, 954, 954, 924, 1540, -1000,
	956, 1118, -1000, 1504, -1000, -1000, -1000, -1000, -1000, -1000,
	1514, -1000, -1000, 1073, -1000, -1000, -1000, -1000, -1000, -1000,
	9686, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1911, 1910, 1404, 1543, 1908, 1905, 1538, 1904, 1902,
	1899, 1896, 1894, 1891, 120, 1528, 1506, 34, 1437, 1890,
	122, 1884, 1883, 1881, 114, 1874, 1873, 1871, 1865, 155,
	1864, 1860, 1435, 1424, 1859, 1858, 110, 1857, 20, 1854,
	94, 1852, 63, 171, 2301, 145, 1851, 1848, 1847, 18,
	109, 92, 1846, 183, 1845, 1844, 55, 53, 24, 17,
	1843, 113, 128, 754, 42, 1832, 1825, 146, 1820, 59,
	35, 1794, 157, 149, 131, 134, 1819, 1818, 1816, 1808,
	65, 1805, 2, 1799, 1786, 14, 70, 11, 1785, 27,
	21, 1778, 1772, 137, 1771, 93, 117, 1410, 84, 132,
	85, 1769, 66, 13, 95, 1768, 1763, 139, 41, 1762,
	36, 98, 148, 1760, 64, 160, 88, 37, 87, 118,
	1759, 1757, 1756, 104, 1755, 119, 89, 1754, 1753, 97,
	1752, 141, 144, 1751, 1749, 135, 1743, 1740, 1734, 161,
	1733, 1729, 159, 1726, 8, 50, 90, 30, 1419, 1385,
	124, 83, 40, 29, 1724, 1807, 699, 218, 47, 101,
	73, 62, 100, 71, 79, 151, 23, 1722, 1720, 126,
	1700, 1699, 1697, 1696, 1695, 99, 1694, 1693, 91, 147,
	15, 4, 12, 106, 56, 116, 102, 133, 153, 127,
	1692, 107, 129, 57, 368, 1691, 1689, 1346, 143, 1688,
	1687, 1686, 1198, 1136, 736, 395, 1685, 1683, 654, 652,
	1679, 1678, 74, 1677, 142, 1675, 1674, 152, 350, 22,
	1673, 54, 58, 108, 1671, 123, 67, 0, 2063, 2038,
	1670, 140, 96, 1661, 1660, 1659, 1658, 25, 3, 9,
	6, 7, 5, 28, 26, 1656, 1655, 138, 38, 86,
	1651, 158, 1649, 1646, 1645, 51, 1643, 19, 1642, 16,
	1640, 1636, 10, 1, 1633, 1623, 150, 1620, 125, 1618,
	1431, 1614, 154, 1613, 1611, 1517, 48, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 51, 51, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 48,
	48, 53, 53, 53, 55, 55, 52, 52, 47, 47,
	5, 5, 225, 225, 226, 226, 37, 37, 41, 41,
	38, 39, 39, 40, 40, 6, 6, 6, 7, 7,
	7, 7, 7, 7, 14, 15, 15, 15, 15, 15,
	15, 15, 15, 99, 99, 98, 98, 101, 101, 16,
	16, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 193, 193, 192, 19, 167, 167, 20, 20,
	20, 20, 21, 124, 124, 22, 22, 22, 22, 23,
	28, 266, 266, 266, 270, 270, 271, 271, 272, 272,
	272, 272, 272, 272, 272, 268, 268, 27, 31, 31,
	31, 31, 31, 143, 139, 139, 141, 141, 141, 141,
	62, 138, 138, 138, 138, 140, 140, 140, 140, 218,
	217, 217, 223, 223, 223, 77, 77, 77, 77, 77,
	78, 78, 78, 216, 216, 216, 216, 224, 224, 224,
	224, 224, 224, 79, 79, 79, 222, 222, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 18, 267,
	267, 269, 269, 33, 33, 10, 10, 11, 11, 80,
	80, 81, 81, 146, 146, 146, 146, 82, 82, 54,
	54, 54, 145, 235, 235, 236, 236, 236, 236, 236,
	236, 237, 237, 237, 237, 237, 237, 237, 233, 233,
	234, 231, 231, 232, 232, 232, 232, 273, 273, 144,
	144, 85, 85, 240, 240, 240, 240, 238, 238, 238,
	238, 238, 241, 239, 242, 242, 242, 242, 242, 179,
	179, 179, 35, 12, 60, 60, 13, 9, 9, 128,
	128, 89, 89, 184, 184, 184, 70, 70, 49, 49,
	49, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 129, 129, 130, 130, 25, 30, 34, 34,
	34, 34, 34, 275, 275, 66, 66, 66, 66, 67,
	67, 142, 142, 142, 142, 142, 61, 8, 8, 56,
	56, 57, 57, 58, 58, 59, 59, 276, 276, 24,
	24, 24, 24, 24, 73, 73, 135, 135, 135, 137,
	137, 136, 136, 136, 114, 114, 114, 36, 94, 94,
	103, 103, 104, 104, 190, 105, 105, 29, 29, 44,
	44, 42, 42, 42, 42, 42, 42, 43, 43, 45,
	45, 45, 45, 45, 45, 45, 248, 248, 248, 251,
	251, 247, 249, 249, 250, 250, 274, 274, 115, 115,
	115, 84, 83, 83, 87, 87, 86, 88, 88, 183,
	112, 112, 112, 112, 131, 132, 132, 133, 133, 134,
	134, 111, 111, 163, 163, 46, 46, 93, 93, 95,
	95, 153, 153, 153, 154, 154, 152, 152, 152, 152,
	185, 185, 185, 185, 185, 185, 185, 185, 264, 264,
	264, 265, 265, 182, 182, 186, 186, 186, 186, 186,
	186, 180, 180, 180, 180, 181, 181, 191, 191, 118,
	118, 118, 118, 116, 116, 117, 117, 187, 187, 187,
	187, 113, 113, 188, 188, 188, 147, 147, 194, 194,
	194, 212, 212, 92, 92, 92, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 196, 196, 196, 196, 198, 198, 198, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 211, 211, 211, 211, 211, 199, 199,
	206, 206, 207, 207, 208, 209, 200, 200, 201, 201,
	202, 203, 210, 210, 210, 210, 214, 214, 204, 204,
	204, 204, 204, 205, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 125, 125, 126, 126,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 157, 157, 157, 157, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 159, 159, 243, 243, 243,
	243, 243, 243, 243, 245, 245, 246, 246, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 252, 252, 253, 253, 255,
	255, 256, 256, 257, 258, 258, 258, 259, 260, 260,
	254, 254, 261, 261, 261, 262, 262, 263, 263, 263,
	263, 263, 169, 169, 169, 170, 170, 171, 177, 177,
	177, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 68, 68, 68,
	68, 68, 100, 100, 166, 166, 164, 164, 164, 168,
	168, 119, 119, 213, 213, 213, 213, 213, 213, 213,
	120, 120, 120, 127, 121, 121, 122, 122, 122, 122,
	122, 122, 160, 161, 123, 123, 123, 162, 162, 172,
	176, 176, 175, 174, 174, 173, 173, 150, 150, 151,
	151, 149, 148, 108, 108, 107, 107, 106, 106, 277,
	277, 178, 178, 109, 109, 110, 102, 102, 189, 189,
	189, 189, 96, 96, 75, 75, 97, 97, 71, 71,
	74, 74, 72, 72, 72, 72, 90, 90, 91, 91,
	69, 69, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 215, 215, 215, 165, 63, 63, 63,
	64, 64, 65, 65, 220, 220, 220, 221, 221, 221,
	221, 219, 219, 219, 219, 219, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 230, 230,
	230, 230,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 3, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 6, 1, 1, 1, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 4, 6, 7, 1, 1,
	1, 1, 1, 1, 6, 3, 5, 4, 6, 4,
	6, 4, 6, 1, 3, 1, 2, 2, 3, 2,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 5, 3, 0, 1, 1,
	1, 1, 3, 3, 0, 2, 3, 2, 3, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 3,
	6, 3, 1, 5, 2, 1, 1, 1, 3, 3,
	2, 3, 3, 3, 3, 1, 3, 3, 2, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 2, 2,
	2, 4, 2, 4, 4, 4, 4, 4, 4, 4,
	2, 3, 4, 3, 3, 4, 4, 2, 2, 2,
	0, 2, 0, 6, 6, 7, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 5, 2, 0, 6, 11, 14, 1,
	0, 1, 3, 3, 3, 5, 2, 0, 1, 1,
	0, 6, 6, 8, 6, 8, 6, 8, 8, 10,
	8, 10, 1, 0, 2, 0, 2, 2, 3, 3,
	2, 2, 2, 1, 0, 1, 3, 2, 0, 2,
	1, 1, 1, 3, 3, 0, 3, 8, 11, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	6, 8, 5, 7, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	7, 4, 6, 3, 1, 5, 6, 9, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 3, 4, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -25, -27, -35, -36, 23,
	34, 222, 65, -8, -9, -10, -11, -12, -13, -250,
	93, 101, 123, 204, 100, 86, 117, 225, 233, -42,
	-44, 241, -143, 242, 35, 251, 59, 96, 227, 220,
	221, 273, 67, -248, -45, -43, 321, 296, 302, 236,
	-46, 259, 288, 324, 259, 132, 79, 291, -266, -97,
	259, 79, -72, -63, 314, 4, -227, -229, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 58, 59, 60,
	62, 64, 65, 66, 69, 70, 77, 78, 80, 82,
	86, 88, 92, 93, 95, 100, 101, 107, 108, 111,
	113, 118, 123, 124, 125, 126, 133, 136, 138, 131,
	146, 148, 149, 152, 151, 156, 159, 162, 164, 165,
	166, 169, 167, 171, 172, 174, 173, 179, 181, 182,
	184, 187, 190, 193, 196, 197, 198, 199, 202, 204,
	206, 207, 208, 210, 211, 213, 214, 215, 216, 217,
	220, 218, 219, 221, 222, 223, 225, 227, 228, 230,
	232, 233, 234, 235, 238, 239, 241, 242, 244, 247,
	250, 251, 252, 255, 253, 249, 258, 260, 261, 262,
	269, 273, 274, 275, 276, 279, 280, 281, 283, 285,
	286, 287, 292, 297, 298, 299, 300, 28, 36, 37,
	38, 39, 41, 42, 45, 46, 50, 51, 52, 54,
	81, 83, 84, 99, 102, 103, 109, 119, 121, 127,
	128, 137, 139, 140, 141, 143, 154, 168, 178, 180,
	191, 195, 201, 203, 209, 229, 237, 245, 246, 254,
	256, 264, 265, 266, 270, 271, 288, 289, -266, -71,
	-63, 79, 88, 136, 281, 280, 79, 132, 259, 291,
	-17, 321, -29, -7, -15, -4, -24, -36, -14, -32,
	-18, -33, -16, 23, -219, 4, -227, -229, -228, -230,
	56, 68, 116, 135, 129, 145, 147, 155, 157, 170,
	192, 194, 226, 243, 22, 24, 25, 26, 27, 29,
	30, 31, 32, 43, 48, 49, 53, 55, 57, 63,
	67, 71, 72, 73, 74, 75, 76, 85, 87, 89,
	90, 91, 94, 96, 98, 104, 105, 106, 112, 114,
	115, 117, 120, 122, 130, 132, 134, 142, 144, 150,
	153, 158, 160, 161, 175, 176, 177, 183, 185, 186,
	188, 189, 200, 205, 212, 224, 236, 240, 248, 257,
	259, 263, 267, 268, 272, 277, 278, 282, 284, 290,
	291, 293, 294, 295, 296, -63, -63, -63, 204, 22,
	-270, 22, -271, -272, 67, 93, 117, 236, 136, 88,
	280, -270, -67, 233, -63, -139, 159, 239, 229, 269,
	-140, -138, -218, 264, 169, -98, -63, 4, 22, 79,
	58, 80, 118, 132, 133, 63, 64, 149, 260, 264,
	269, 67, 283, -275, 269, 269, -275, -275, -66, 269,
	267, -67, -218, -274, 259, 259, 282, 291, -128, 79,
	278, -43, -45, -44, -86, -87, 277, 142, 98, 189,
	-42, -44, -248, -251, 210, -247, -63, -251, -83, -84,
	22, 90, 325, -187, -71, 186, -110, 321, -3, -187,
	127, -71, -74, 127, -71, -63, -187, 127, 267, 325,
	-97, -90, -63, -149, -148, 323, 115, 115, 321, -107,
	-108, -148, -149, 115, 144, 144, -188, -187, -63, 127,
	-75, 127, -74, -99, 127, -98, -99, 127, -193, -192,
	-221, 4, -227, -229, -228, 288, 259, 132, -167, 321,
	-124, 321, -63, 22, 185, 325, 185, -63, -139, 52,
	-139, 321, -141, -61, -62, 146, 206, 267, 306, 115,
	300, -79, 5, 85, -101, 323, 115, -267, 185, 115,
	115, 115, 115, 115, 115, 300, 146, 206, 232, 259,
	291, -142, -61, -62, -142, 267, -67, -113, -187, -98,
	127, -63, -98, 132, -63, 127, -86, -87, -112, -131,
	-132, 158, 183, -115, 22, 90, -115, -115, 44, 322,
	322, 325, -251, -91, 321, -102, -189, -155, 314, -157,
	312, 313, 318, 175, 301, -169, -159, -172, 99, 229,
	321, -71, -158, 326, 9, -245, -44, 29, -170, -171,
	48, -63, 7, 8, 5, 6, -69, -196, -165, -205,
	272, 104, 177, -243, -244, 4, -227, -220, -197, -207,
	-201, -204, 143, 56, 72, 75, 73, 76, 240, 282,
	49, 28, 102, 103, 195, 201, 256, 270, 271, 127,
	178, 128, 54, 119, 154, 92, 37, 39, 41, 42,
	50, 51, 81, 83, 84, 109, 137, 139, 140, 141,
	180, 209, 245, 254, 265, 266, 289, -228, -208, -209,
	-202, -203, -210, -102, -110, 314, -71, 321, -109, -178,
	-155, 85, -51, 218, -50, 21, 23, 93, 286, 99,
	249, 249, 218, 99, 326, 218, 218, 99, -225, -222,
	9, -221, 5, -72, 325, -219, 314, -226, -225, 252,
	322, -96, -71, -108, -188, -73, -71, -73, 241, -63,
	30, 99, -53, 325, 47, 223, 99, -53, 325, 99,
	-53, 99, 322, 325, -187, 127, -74, 30, -166, -194,
	-195, -197, -206, -200, -204, -205, 40, 46, 45, 262,
	168, 237, 246, 38, 184, 138, 137, 139, 140, 141,
	245, 37, 209, 109, 92, 84, 83, 180, 42, 41,
	-208, -209, -202, -203, 81, 265, 266, 143, 39, 51,
	50, 289, 254, -100, -155, -266, -272, -266, 30, -100,
	325, 325, 156, -78, 162, 174, 124, -217, 85, -223,
	-216, -179, 9, 272, 104, 185, -222, 8, 313, -215,
	7, 312, -217, 85, 70, -224, 5, 4, -165, -179,
	85, 159, -205, 323, -219, -218, -269, 112, -266, -218,
	-218, -218, -218, -218, -63, 156, -218, -218, 325, 325,
	-67, -53, 325, 321, -85, 175, -249, 296, -85, 321,
	-64, 127, -63, -249, 175, -112, -132, -131, -133, -155,
	22, -155, -157, -43, -43, -43, -88, -183, -155, -247,
	30, -90, -93, 325, 115, 10, 11, 55, 33, 312,
	313, 314, 315, 110, 316, 309, 310, 311, 308, 304,
	305, 306, 61, 163, 231, 13, 14, 15, 26, 188,
	157, 301, 129, 243, 318, 16, 17, 18, 145, 36,
	130, -68, 30, 4, -76, -155, -155, -155, -155, -155,
	194, -106, -150, 319, -44, 321, -44, -155, -100, 7,
	-44, -164, 319, -173, -155, -107, 321, 5, 321, 5,
	-252, 297, 112, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	203, -214, 292, -214, -214, -198, 321, -198, -199, 321,
	-198, 298, 302, 321, -93, -71, 325, 322, 325, 267,
	-129, 63, 57, -145, 127, 57, -231, -63, 63, -232,
	53, 278, 205, 114, -129, 63, -129, 63, 63, -187,
	33, 33, 267, -74, -63, 267, 267, -187, -191, 303,
	-63, -191, 325, 115, 322, 325, -147, 294, -135, -29,
	321, 85, 30, -135, -103, -104, -190, -105, -71, 321,
	-63, -63, -74, -75, -98, -99, -99, -17, -192, 99,
	-20, -29, -24, -36, -14, 322, 325, -92, 29, -125,
	321, 299, 166, 82, 125, 165, -126, 235, 322, 325,
	267, 115, 269, 322, -62, -61, -77, 208, 247, 219,
	238, 325, 8, 7, 7, -219, -268, -63, -62, -61,
	-187, -80, -90, -81, -63, -146, -145, -233, -234, -231,
	132, 278, 105, 30, 99, -60, 199, 30, 185, 175,
	-56, 261, 99, -134, 229, 230, 325, -49, 31, 89,
	321, 322, -147, -189, -95, -185, 319, -187, -71, -44,
	-186, 321, -212, -194, -211, 214, 215, 213, 217, 216,
	-194, -98, 264, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, 157, 129, 243, 36, 130,
	-155, 267, -155, -155, -155, -155, 167, 175, 177, 272,
	104, 279, 90, 181, -277, 257, 32, -162, -44, 321,
	-177, 27, 248, 22, -219, -169, 229, 321, -150, -155,
	-151, -100, 322, 322, 325, -100, -168, 320, -164, -176,
	-175, 293, 322, -100, 290, 22, 90, 314, 7, -125,
	-253, 107, 120, 321, 322, 322, -155, -155, -119, -213,
	-100, 4, 299, 166, 82, 125, 165, 235, -119, -120,
	-155, -100, -121, -156, -157, 312, 313, 318, 321, 229,
	-122, -155, -100, -155, 43, 153, 268, -123, -155, 115,
	-100, -155, -155, -155, -100, -100, -100, 321, 7, 7,
	264, 264, 7, -147, 322, -178, -50, -71, -63, -63,
	175, -145, 127, -55, 175, -194, -63, 321, 321, 148,
	148, -63, -63, 127, -63, 127, -63, -63, -51, 218,
	-29, -29, -63, 218, -63, -71, 218, -37, 126, 181,
	-40, 296, -225, 252, 115, -71, -114, 224, -155, -114,
	-137, 185, -96, 288, -63, 224, -94, 325, 115, 306,
	-96, -53, -53, -53, -187, -194, 319, 319, 7, 267,
	267, 267, 267, 321, -155, -268, -268, -61, 276, 60,
	208, -223, 325, 322, 322, 325, -64, 132, -64, -29,
	-98, 5, -29, -71, 99, -57, 95, -276, 306, -63,
	-183, -20, -111, 120, -191, 325, 68, -118, 147, 170,
	116, 155, 226, 135, 7, 101, -152, 326, 321, -182,
	302, -44, -186, -185, 300, -155, -155, 267, -277, 257,
	-162, -155, 167, 177, 272, 104, 279, 90, 181, 115,
	321, -156, -156, -100, -159, 321, -100, 320, 329, 322,
	-155, 320, 320, 325, -174, -175, 94, -155, -87, 325,
	-86, -155, -100, -100, 322, 322, -258, 193, 321, 321,
	-155, 30, 325, 322, 115, 322, 322, -127, 200, 322,
	10, 11, 312, 313, 314, 315, 110, 316, 309, 310,
	311, 308, 304, 305, 306, 61, 163, 231, 13, 14,
	15, 145, 130, -156, -156, -156, -100, 321, 322, -160,
	-161, 115, 112, 30, -123, -123, -123, 322, 115, -100,
	325, 325, 325, 322, 322, 322, 7, 322, 325, 322,
	300, 300, 322, -111, 267, 267, 99, 175, 285, -235,
	-232, -155, -89, -184, -63, -246, 321, -243, -244, -69,
	321, 321, -48, 93, 241, -130, 99, -53, 99, -53,
	267, -129, 63, 267, 267, -40, 115, 258, 187, 252,
	-102, 176, 224, 62, 322, -102, -147, -104, -95, -178,
	322, 320, 7, 7, 322, 166, 125, 165, -126, 165,
	-126, -126, 7, -63, -82, 131, -146, 321, -64, 321,
	321, -85, 321, -63, -58, 152, -276, -222, -249, 322,
	-163, 122, 44, -185, 147, 147, -185, -118, 147, -116,
	192, -116, -116, -264, 321, -17, 321, -182, -219, 319,
	327, -100, -181, -180, 30, -63, 190, 322, -155, -155,
	-156, -156, 115, 321, -155, -166, 26, 26, 322, -100,
	322, 325, -151, -155, 322, -164, 96, -155, 263, 322,
	290, -87, -87, -87, 5, -259, -63, 321, 294, -86,
	322, -212, -194, -155, -160, -155, -212, -194, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, 90, 175, 181,
	-156, 325, -100, 322, -161, -160, -155, -155, -194, 322,
	322, 322, -100, -155, -155, -155, 322, 7, -163, -63,
	-63, -145, 99, -236, 63, -237, 55, 105, 67, 175,
	177, 278, 205, 53, 85, 212, 322, 322, 325, -70,
	-107, 55, -70, -155, 321, -89, -90, 175, 85, 175,
	85, 78, 274, -63, -63, -71, -63, -63, -63, -71,
	-226, 264, 321, -102, -136, 321, 185, -29, -114, 306,
	320, 320, 322, 130, -89, 321, -90, -80, 30, -89,
	185, -59, 151, -276, -222, -56, -255, 295, -155, -100,
	-185, -185, -117, 284, 185, 147, -185, 320, 322, -265,
	7, 320, -193, -181, 7, -154, -153, 113, 173, 322,
	-63, 321, -182, 26, 26, -155, -166, 322, -155, -155,
	322, -155, 320, -155, 5, -155, 322, 322, 322, -260,
	-63, -155, 322, 322, 322, -161, 115, 90, 181, 321,
	-155, 322, 322, 325, 322, 322, 322, -255, -145, -63,
	-98, -63, 105, 127, 177, 148, 321, -156, -71, -144,
	-273, 66, 255, -184, -49, -98, -49, 322, -100, 322,
	322, 177, 177, -155, -194, -53, -53, 267, 267, -158,
	-69, -63, -39, -38, 5, 91, -90, 63, -110, -44,
	321, 196, 322, -89, 322, 322, -29, 322, -71, -276,
	-222, -57, -256, -257, -63, -117, 321, -155, -185, -152,
	322, 325, -182, 322, 320, 325, 328, 306, -182, 321,
	-90, -180, -155, -155, 322, 322, -87, -254, 198, 322,
	-156, 115, 321, -166, 322, -155, -237, -64, 175, -155,
	-65, 321, -82, 321, -70, -87, 212, -52, 55, -63,
	-63, 321, 325, 322, -41, 306, 280, 176, 322, -63,
	-63, -144, 322, -82, -144, 321, -222, -58, 325, 30,
	-90, -182, 7, -181, -17, -153, -219, 319, -181, -90,
	322, 322, -87, 44, -156, -166, 322, 322, 99, 322,
	-240, 164, -63, -90, -49, 322, -71, -47, 284, -98,
	-100, -38, 5, 241, -147, 321, -82, -144, -82, -89,
	-59, -257, -259, 322, -180, 320, 7, 322, -261, 207,
	230, -100, 322, 105, -238, -241, -239, 185, 116, 197,
	244, 322, 322, -85, -155, -87, -103, -90, -82, 322,
	-182, 320, 322, -262, -263, 36, 275, 70, -155, -262,
	-63, -239, 185, -241, 185, 280, 88, -240, 322, -147,
	322, -144, -181, -263, 202, 111, 229, 202, 111, -242,
	172, 223, 47, 241, -242, -238, -54, 47, 223, -82,
	26, 20, 177, 85, -263,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 0,
	0, 415, 0, 0, 0, 0, 0, 0, 0, 387,
	-2, 0, 152, 0, 334, 0, 334, 334, 338, 0,
	0, 417, 300, 414, -2, 425, 0, 0, 0, 423,
	401, 0, 0, -2, 0, 0, 0, 0, 0, 131,
	0, 946, 876, 882, 883, 907, 908, 909, 926, 927,
	928, 929, 930, 931, 932, 933, 934, 935, 936, 937,
	938, 939, 940, 941, 942, 943, 944, 945, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 0, 0,
	878, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 0, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 0, 218, 921, 922, 923, 924, 925,
	1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
	1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126,
	1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136,
	1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146,
	1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156,
	1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166,
	1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196,
	1197, 1198, 1199, 1200, 1201, 117, 124, 125, 998, 127,
	0, 134, 135, 136, 138, 139, 140, 141, 142, 143,
	144, 0, 327, 1020, 340, 148, 975, 1024, 1094, 1039,
	155, 165, 0, 1100, -2, 169, 95, 198, 199, 200,
	0, 202, 220, 0, 0, 0, 0, 0, 210, 0,
	0, 0, 217, 345, 333, 345, 330, 331, 332, 335,
	0, 326, 147, 0, 416, 0, 0, 0, 0, 0,
	299, -2, 397, 398, -2, 0, 420, 420, 420, 0,
	0, 398, 0, 406, 1002, 409, 889, 407, 0, 0,
	422, 421, 0, 402, 497, 0, 445, 0, 2, 0,
	1078, 497, 0, 1078, 881, 0, 0, 1078, 0, 0,
	132, 133, 886, 884, 885, 0, 0, 0, 0, 879,
	855, 853, 854, 0, 0, 0, 0, 503, 85, 1078,
	53, 1078, 874, 53, 1078, 93, 53, 1078, 0, 112,
	114, 917, 918, 919, 920, 1105, 0, 0, 0, 0,
	122, 0, 126, 128, 0, 0, 0, 339, 149, 1067,
	151, 0, 154, 156, 157, 0, 0, 0, 0, 0,
	0, 168, 193, 194, 96, 0, 0, 222, 0, 0,
	0, 0, 0, 0, 0, 211, 0, 213, 214, 0,
	0, 328, 341, 342, 329, 0, 337, 53, 501, 272,
	1078, 413, 272, 911, 413, 1078, -2, 0, 393, 432,
	433, 0, 0, 0, 418, 419, 0, 0, 0, 389,
	390, 0, 408, 0, 0, 448, 866, 870, 871, 600,
	0, 0, 0, 0, 0, 0, 692, 694, 1072, 1094,
	0, 696, 697, 0, 699, 701, 702, 0, 705, 706,
	846, 878, 892, 893, 894, 895, 0, 0, 898, 0,
	900, 901, 902, 746, 715, -2, -2, 890, 532, 533,
	534, 535, -2, 1107, 719, 721, 723, 724, 725, 726,
	0, 1056, 1073, 1074, 1090, 1091, 1099, 1103, 1104, 1078,
	1087, 1079, 1068, 1076, 1085, 951, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 916, 562, 563,
	568, 569, 571, 448, 446, 498, 499, 0, 0, 863,
	861, 862, 30, 323, 32, 0, 323, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 488, 62,
	63, 196, 197, 877, 0, 851, 852, 488, 64, 75,
	0, 0, 872, 856, 507, 0, 364, 0, 0, 504,
	0, 0, 87, 0, 51, 52, 0, 89, 0, 0,
	91, 0, 415, 0, 0, 1078, 0, 415, 0, 804,
	515, 516, 517, 518, 519, 597, 522, 523, 524, 525,
	526, 527, 528, 529, 530, 531, 539, 540, 541, 542,
	543, 544, 545, 559, 0, 538, 538, 538, 551, 552,
	560, 561, 566, 567, 578, 579, 581, 583, 577, 577,
	577, 574, 575, 0, 802, 0, 137, 0, 0, 0,
	0, 0, 0, 160, 180, 181, 182, 161, 163, 170,
	172, 173, 174, 183, 184, 185, 186, 289, 0, 291,
	903, 0, 162, 164, 166, 167, 187, 188, 189, 190,
	191, 192, 0, 0, 97, 201, 203, 0, 219, 204,
	205, 206, 207, 208, 209, 212, 215, 216, 0, 0,
	336, 292, 0, 230, 0, 0, 295, 412, 0, 0,
	0, 1078, 910, 350, 0, 396, 430, 431, 434, 437,
	438, 435, 600, 403, 404, 405, 426, 427, 310, 410,
	0, 0, 507, 0, 0, 0, 0, 0, 0, 781,
	782, 783, 784, 785, 786, 789, 790, 787, 788, 791,
	792, 793, 0, 0, 0, 794, 795, 796, 0, 0,
	798, 0, 800, 0, 0, 0, 0, 0, 0, 860,
	0, 0, 0, 869, 797, 605, 606, 607, 629, 630,
	0, 693, 857, 850, 695, 0, -2, 802, 0, 698,
	703, 704, 0, 0, 845, -2, 0, 897, 0, 597,
	748, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	825, 831, 0, 0, 0, 0, 0, 0, 0, 0,
	547, 565, 576, 573, 572, 549, 0, 548, 546, 0,
	550, 0, 0, 0, 507, 0, 0, 865, 0, 0,
	0, 0, 322, 34, 1078, 0, 55, 0, 0, 262,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 880, 0, 0, 0, 67, 0,
	887, 74, 0, 0, 0, 0, 376, 0, 376, 366,
	0, 0, 0, 362, 379, 380, 382, 383, 0, 0,
	505, 86, 875, 53, 94, 53, 53, 100, 113, 0,
	115, 118, 119, 120, 121, 116, 0, 508, 510, 520,
	0, 584, 585, 586, 587, 588, 589, 598, 123, 0,
	0, 0, 0, 153, 158, 159, 346, 0, 177, 0,
	179, 0, 290, 905, 904, 98, 221, 145, 343, 344,
	502, 0, 0, 229, 886, 231, 233, 234, 235, 236,
	911, 0, 911, 0, 0, 293, 0, 0, 0, 0,
	352, 358, 0, 436, 439, 440, 0, 429, 308, 309,
	415, 888, 442, 867, 488, 449, 0, 459, 497, 474,
	464, 0, 601, 511, 512, 553, 554, 555, 556, 557,
	602, 603, 0, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, -2, -2, -2, 621, 622, 623, -2,
	-2, -2, 627, 628, -2, 799, 801, 0, 860, 0,
	-2, 0, 637, -2, -2, -2, 641, 0, 643, 646,
	648, 650, 0, 0, 0, 0, 859, 660, 837, 0,
	0, 778, 779, 780, 868, 645, 0, 0, 858, 849,
	0, 0, -2, 700, 0, 0, 0, 808, 809, 844,
	840, 0, 707, 425, 0, 0, 0, 0, 0, 906,
	756, 0, 0, 0, 720, 722, 0, 0, 0, 0,
	812, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	802, 822, 0, 0, 663, 0, 0, 0, 0, 1094,
	0, 802, 830, 0, 0, 0, 0, 0, 802, 0,
	836, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 442, 500, 864, 33, 312, 0, 0,
	0, 36, 1078, 44, 0, 244, 0, 0, 0, 0,
	0, 325, 45, 1078, 53, 1078, 53, 46, 31, 323,
	223, 224, 316, 0, 311, 314, 0, 74, 0, 0,
	61, 0, 65, 76, 0, 873, 84, 0, 506, 359,
	360, 0, 0, 368, 365, 0, 507, 0, 0, 0,
	0, 88, 90, 92, 0, 805, 0, 0, 0, 0,
	0, 0, 0, 0, 803, 129, 130, 150, 175, 176,
	178, 171, 0, 238, 271, 0, 0, 911, 0, 227,
	272, 294, 296, 0, 0, 354, 358, 0, 357, 413,
	428, 0, 444, 0, 447, 0, 0, 0, 0, 0,
	494, 494, 494, 492, 468, 415, 474, 0, 0, 486,
	0, -2, 464, 0, 0, -2, -2, 0, 0, 0,
	661, -2, 642, 644, 647, 649, 651, 0, 0, 0,
	0, 0, 0, 0, 662, 0, 0, 847, 850, -2,
	803, 806, 807, 0, 0, 841, 0, 0, 0, 0,
	424, 425, 425, 425, 713, 0, 714, 0, 0, 0,
	0, 0, 0, 729, 0, 730, 731, 0, 0, 732,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 666, 667, 668, 0, 0, 733, 828,
	829, 0, 0, 0, 0, 0, 0, 738, 0, 835,
	0, 0, 0, 742, 743, 744, 0, 536, 0, 558,
	580, 582, 570, 444, 0, 0, 0, 0, 54, 242,
	261, 0, 0, 301, 307, 307, 0, 716, 717, 0,
	0, 0, 38, 0, 0, 0, 0, 42, 0, 48,
	0, 0, 0, 0, 0, 60, 0, 0, 0, 77,
	374, 375, 0, 373, 0, 363, 376, 381, 378, 384,
	0, 513, 0, 0, 521, 590, 591, 592, 593, 594,
	595, 596, 0, 146, 225, 0, 232, 0, 0, 0,
	230, 0, 0, 0, 356, 358, 0, 349, 350, 411,
	750, 0, 0, 450, 0, 0, 0, 0, 0, 489,
	493, 490, 491, 0, 0, 0, 0, 486, 456, 0,
	0, 0, 463, 485, 0, 484, 473, -2, 604, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 838, 0,
	773, 0, 0, 849, -2, 810, 839, 843, 0, 708,
	0, 0, 0, 0, 899, 754, 755, 759, 0, 0,
	718, 0, 0, 811, 821, 823, 664, 665, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, -2, -2,
	-2, 682, 683, 684, -2, -2, -2, 0, 0, 0,
	824, 0, 0, 776, 826, 827, 832, 833, 0, 735,
	736, 737, 834, 0, 0, 0, 564, 0, 750, 318,
	320, 35, 0, 243, 0, 246, 0, 0, 0, 0,
	252, 253, 0, 0, 0, 0, 263, 270, 0, 310,
	891, 0, 310, 0, 0, 0, 0, 0, 50, 0,
	0, 324, 0, 53, 53, 313, 0, 0, 317, 315,
	66, 0, 0, 361, 0, 0, 0, 367, 377, 0,
	514, 509, 599, 0, 0, 0, 0, 0, 0, 0,
	0, 347, 358, 0, 351, 352, 399, 0, 443, 441,
	476, 0, 478, 0, 0, 0, 480, 459, 469, 0,
	471, 474, 0, 461, 0, 0, 454, 0, 453, 474,
	482, 0, 0, 0, 0, -2, 0, 654, -2, -2,
	772, 803, 848, 842, 896, 425, 709, 711, 712, 761,
	758, 0, 745, 727, 728, 820, 0, 0, 0, 0,
	803, 775, 734, 0, 740, 741, 537, 400, 37, 0,
	247, 248, 911, 0, 251, 254, 0, 256, 913, 238,
	0, 267, 268, 302, 303, 306, 304, 307, 425, 265,
	0, 39, 40, 49, 57, 41, 47, 0, 0, 487,
	0, 0, 0, 71, 69, 0, 0, 0, 385, 386,
	0, 0, 270, 0, 260, 238, 228, 270, 0, 0,
	353, 354, 749, 751, 0, 477, 0, 496, 479, 474,
	470, 0, 486, 415, 457, 0, 458, 0, 486, 0,
	0, 465, -2, -2, 655, 774, 0, 425, 0, 747,
	-2, 0, 0, 0, 777, 0, 245, 249, 0, 0,
	276, 0, 264, 0, 310, 0, 0, 59, 0, 319,
	321, 0, 0, 73, 70, 0, 0, 370, 507, 372,
	0, 238, 270, 226, 238, 0, 355, 356, 0, 0,
	0, 0, 472, 466, 0, 455, 451, 0, 462, 0,
	483, 710, 764, 0, -2, 0, 690, 739, 0, 255,
	281, 0, 0, 0, 305, 708, 272, 43, 0, 56,
	425, 72, 68, 0, 371, 0, 258, 238, 297, 0,
	348, 752, 753, 495, 460, 474, 0, 481, 0, 0,
	0, 760, 691, 0, 257, 277, 278, 0, 273, 274,
	275, 912, 269, 276, 58, 0, 507, 0, 259, 270,
	486, 452, 757, 762, 765, -2, 1042, 943, 0, 763,
	250, 279, 0, 280, 0, 0, 0, 281, 0, 369,
	241, 238, 467, 0, 767, 768, 769, 770, 771, 282,
	0, 285, 286, 0, 283, 266, 237, 239, 240, 298,
	0, 284, 287, 288, 766,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 310, 3, 316, 311, 3,
	321, 322, 314, 312, 325, 313, 323, 315, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 329, 324,
	304, 306, 305, 3, 326, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 319, 3, 320, 309, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 327, 308, 328, 318,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 307, 57647, 317, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:783
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:789
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:833
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:860
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:870
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:875
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:880
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			return unimplemented(sqllex)
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:902
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:912
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = nil
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:961
		{
			sqlVAL.union.val = DropCascade
		}
	case 52:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropRestrict
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:985
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplemented(sqllex)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1003
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 67:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = ""
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1062
		{
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1192
		{ /* SKIP DOC */
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1344
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1386
		{
			return unimplemented(sqllex)
		}
	case 150:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1388
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{ /* SKIP DOC */
		}
	case 153:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			return unimplemented(sqllex)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return unimplemented(sqllex)
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = Low
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = Normal
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = High
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1525
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			return unimplemented(sqllex)
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			return unimplemented(sqllex)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1575
		{
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1724
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1752
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1771
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 241:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = DropDefault
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1781
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1792
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1822
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1848
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1934
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1996
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2000
		{
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2003
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2006
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2009
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2010
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 296:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = true
		}
	case 300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = false
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2121
		{
			return unimplemented(sqllex)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return unimplemented(sqllex)
		}
	case 307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2125
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = Ascending
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = Descending
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2176
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2179
		{
			return unimplemented(sqllex)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2180
		{
			return unimplemented(sqllex)
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = true
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = false
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2194
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2236
		{
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2237
		{
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.str = ""
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.str = ""
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.str = ""
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2359
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2360
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2380
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 363:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2388
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2430
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			return unimplemented(sqllex)
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 377:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2465
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2473
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2576
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2635
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2692
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2693
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2694
		{
			return unimplemented(sqllex)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2698
		{
			return unimplemented(sqllex)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2701
		{
			return unimplemented(sqllex)
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2704
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2708
		{
			return unimplemented(sqllex)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2709
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2712
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2713
		{
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2717
		{
			sqlVAL.union.val = true
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = false
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = false
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = true
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2737
		{
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2795
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2836
		{
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2895
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = &From{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2931
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2949
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2976
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2993
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = nil
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3050
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3054
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = true
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = false
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.str = astFullJoin
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.str = astLeftJoin
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.str = astRightJoin
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.str = astInnerJoin
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3172
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3183
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3193
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3271
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3272
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3286
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3295
		{
			return unimplemented(sqllex)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3354
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3363
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = nil
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3412
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3434
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3507
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3539
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3561
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3579
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = year
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = month
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = day
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = hour
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = minute
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = month
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = hour
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = minute
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = minute
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = nil
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = second
		}
	case 599:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			return unimplemented(sqllex)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3709
		{
			return unimplemented(sqllex)
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3877
		{
			return unimplemented(sqllex)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3943
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4116
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4169
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4170
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4193
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			return unimplemented(sqllex)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4210
		{
			return unimplemented(sqllex)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4214
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4232
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4233
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4234
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4263
		{
			return unimplemented(sqllex)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4277
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4307
		{
			return unimplemented(sqllex)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4308
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = Window(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4343
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4355
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.str = ""
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4405
		{
			return unimplemented(sqllex)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4406
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4407
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4410
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4411
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4417
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			return unimplemented(sqllex)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4419
		{
			return unimplemented(sqllex)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4420
		{
			return unimplemented(sqllex)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4421
		{
			return unimplemented(sqllex)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4436
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4440
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = Any
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = Some
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = All
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = Plus
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = Minus
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = Mult
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = Div
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = FloorDiv
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = Mod
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = Bitand
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = Bitor
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = Bitxor
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = Bitxor
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = LT
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = GT
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = EQ
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = LE
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = GE
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = NE
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = Like
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = NotLike
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = ILike
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = NotILike
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 842:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4785
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4786
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4814
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4843
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4855
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4946
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4979
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4982
		{
			return unimplemented(sqllex)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = DNull
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5021
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.str = ""
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 913:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
