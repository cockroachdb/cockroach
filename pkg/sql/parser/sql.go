// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAN = 57509
const NAME = 57510
const NAMES = 57511
const NATURAL = 57512
const NEXT = 57513
const NO = 57514
const NO_INDEX_JOIN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESTORE = 57563
const RESTRICT = 57564
const RETURNING = 57565
const REVOKE = 57566
const RIGHT = 57567
const ROLLBACK = 57568
const ROLLUP = 57569
const ROW = 57570
const ROWS = 57571
const RSHIFT = 57572
const STATUS = 57573
const SAVEPOINT = 57574
const SEARCH = 57575
const SECOND = 57576
const SELECT = 57577
const SERIAL = 57578
const SERIALIZABLE = 57579
const SESSION = 57580
const SESSION_USER = 57581
const SET = 57582
const SHOW = 57583
const SIMILAR = 57584
const SIMPLE = 57585
const SMALLINT = 57586
const SMALLSERIAL = 57587
const SNAPSHOT = 57588
const SOME = 57589
const SPLIT = 57590
const SQL = 57591
const START = 57592
const STDIN = 57593
const STRICT = 57594
const STRING = 57595
const STORING = 57596
const SUBSTRING = 57597
const SYMMETRIC = 57598
const SYSTEM = 57599
const TABLE = 57600
const TABLES = 57601
const TEMPLATE = 57602
const TEXT = 57603
const THEN = 57604
const TIME = 57605
const TIMESTAMP = 57606
const TIMESTAMPTZ = 57607
const TO = 57608
const TRAILING = 57609
const TRANSACTION = 57610
const TREAT = 57611
const TRIM = 57612
const TRUE = 57613
const TRUNCATE = 57614
const TYPE = 57615
const UNBOUNDED = 57616
const UNCOMMITTED = 57617
const UNION = 57618
const UNIQUE = 57619
const UNKNOWN = 57620
const UPDATE = 57621
const UPSERT = 57622
const USER = 57623
const USERS = 57624
const USING = 57625
const VALID = 57626
const VALIDATE = 57627
const VALUE = 57628
const VALUES = 57629
const VARCHAR = 57630
const VARIADIC = 57631
const VIEW = 57632
const VARYING = 57633
const WHEN = 57634
const WHERE = 57635
const WINDOW = 57636
const WITH = 57637
const WITHIN = 57638
const WITHOUT = 57639
const YEAR = 57640
const ZONE = 57641
const NOT_LA = 57642
const WITH_LA = 57643
const AS_LA = 57644
const POSTFIXOP = 57645
const UMINUS = 57646

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5394

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	323, 28,
	-2, 411,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 394,
	142, 394,
	158, 394,
	183, 394,
	189, 394,
	276, 394,
	-2, 384,
	-1, 62,
	98, 393,
	142, 393,
	158, 393,
	183, 393,
	189, 393,
	276, 393,
	-2, 387,
	-1, 71,
	1, 28,
	323, 28,
	-2, 411,
	-1, 421,
	1, 193,
	323, 193,
	-2, 976,
	-1, 457,
	158, 421,
	183, 421,
	-2, 390,
	-1, 460,
	158, 420,
	183, 420,
	-2, 388,
	-1, 592,
	158, 420,
	183, 420,
	-2, 391,
	-1, 651,
	320, 910,
	-2, 903,
	-1, 652,
	320, 911,
	-2, 904,
	-1, 658,
	5, 579,
	320, 579,
	-2, 1079,
	-1, 682,
	5, 540,
	-2, 1053,
	-1, 683,
	5, 573,
	320, 573,
	-2, 1055,
	-1, 684,
	5, 548,
	-2, 1056,
	-1, 685,
	5, 547,
	-2, 1057,
	-1, 686,
	5, 573,
	320, 573,
	-2, 1060,
	-1, 687,
	5, 573,
	320, 573,
	-2, 1061,
	-1, 688,
	5, 574,
	-2, 1064,
	-1, 689,
	5, 534,
	-2, 1065,
	-1, 690,
	5, 534,
	-2, 1066,
	-1, 691,
	5, 555,
	-2, 1070,
	-1, 692,
	5, 535,
	-2, 1075,
	-1, 693,
	5, 536,
	-2, 1076,
	-1, 694,
	5, 537,
	-2, 1077,
	-1, 695,
	5, 538,
	-2, 1078,
	-1, 696,
	5, 534,
	-2, 1083,
	-1, 697,
	5, 541,
	-2, 1088,
	-1, 698,
	5, 539,
	-2, 1091,
	-1, 699,
	5, 571,
	320, 571,
	-2, 1093,
	-1, 700,
	5, 575,
	-2, 1096,
	-1, 701,
	5, 577,
	-2, 1097,
	-1, 702,
	5, 570,
	320, 570,
	-2, 1101,
	-1, 962,
	98, 394,
	142, 394,
	158, 394,
	183, 394,
	189, 394,
	276, 394,
	-2, 698,
	-1, 971,
	320, 887,
	-2, 875,
	-1, 1179,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 614,
	-1, 1180,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 615,
	-1, 1181,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 616,
	-1, 1185,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 620,
	-1, 1186,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 621,
	-1, 1187,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 622,
	-1, 1190,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 627,
	-1, 1196,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 629,
	-1, 1199,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 634,
	-1, 1200,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 635,
	-1, 1201,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 636,
	-1, 1228,
	194, 769,
	-2, 772,
	-1, 1257,
	115, 809,
	320, 910,
	-2, 903,
	-1, 1258,
	115, 810,
	-2, 1049,
	-1, 1259,
	115, 811,
	-2, 975,
	-1, 1260,
	115, 812,
	-2, 944,
	-1, 1261,
	115, 813,
	-2, 959,
	-1, 1262,
	115, 814,
	-2, 974,
	-1, 1263,
	115, 815,
	-2, 1017,
	-1, 1417,
	98, 394,
	142, 394,
	158, 394,
	183, 394,
	189, 394,
	276, 394,
	-2, 470,
	-1, 1421,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 628,
	-1, 1422,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 630,
	-1, 1427,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 631,
	-1, 1445,
	194, 768,
	-2, 771,
	-1, 1632,
	1, 471,
	68, 471,
	98, 471,
	116, 471,
	120, 471,
	122, 471,
	135, 471,
	142, 471,
	147, 471,
	155, 471,
	158, 471,
	170, 471,
	183, 471,
	185, 471,
	189, 471,
	223, 471,
	225, 471,
	276, 471,
	283, 471,
	293, 471,
	294, 471,
	302, 471,
	319, 471,
	321, 471,
	323, 471,
	324, 471,
	-2, 470,
	-1, 1634,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 632,
	-1, 1639,
	145, 0,
	-2, 648,
	-1, 1649,
	194, 770,
	-2, 773,
	-1, 1683,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 675,
	-1, 1684,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 676,
	-1, 1685,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 677,
	-1, 1689,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 681,
	-1, 1690,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 682,
	-1, 1691,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 683,
	-1, 1809,
	145, 0,
	-2, 649,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 652,
	-1, 1813,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 654,
	-1, 1916,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 653,
	-1, 1917,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 655,
	-1, 1924,
	145, 0,
	-2, 684,
	-1, 1978,
	145, 0,
	-2, 685,
	-1, 2039,
	36, 0,
	129, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 1052,
}

const sqlPrivate = 57344

const sqlLast = 28341

var sqlAct = [...]int{

	652, 2038, 2063, 1589, 2018, 1984, 2019, 2037, 1627, 2020,
	1060, 1853, 880, 1877, 1628, 1538, 1775, 1052, 1415, 1800,
	1660, 1599, 650, 642, 1897, 48, 1143, 291, 1151, 1391,
	84, 84, 84, 1412, 649, 1734, 1720, 774, 886, 1393,
	628, 1786, 293, 84, 84, 84, 482, 422, 84, 1539,
	1136, 84, 506, 1122, 1342, 1118, 1780, 461, 1506, 84,
	737, 1117, 524, 277, 279, 20, 84, 84, 1605, 1505,
	84, 743, 967, 84, 84, 84, 84, 1158, 1456, 84,
	84, 468, 61, 1226, 1403, 1121, 1614, 715, 1061, 718,
	466, 882, 1092, 1398, 1336, 1025, 758, 1016, 1150, 1236,
	622, 1210, 611, 1156, 1044, 1213, 1283, 284, 27, 283,
	16, 835, 1076, 720, 903, 285, 8, 1112, 747, 1254,
	1085, 958, 61, 578, 621, 744, 612, 579, 1001, 519,
	735, 1153, 525, 516, 1054, 497, 20, 1125, 518, 997,
	1735, 908, 460, 471, 627, 595, 62, 596, 837, 644,
	594, 409, 76, 61, 833, 400, 751, 512, 599, 469,
	577, 80, 290, 1909, 1444, 412, 1910, 290, 1057, 63,
	760, 911, 912, 465, 2054, 465, 266, 740, 760, 27,
	1413, 16, 1354, 265, 1053, 760, 2033, 8, 2026, 1733,
	2016, 740, 2011, 1082, 914, 740, 2007, 730, 1448, 740,
	1089, 479, 1980, 1449, 485, 1082, 60, 492, 458, 910,
	448, 60, 488, 419, 480, 1353, 913, 487, 490, 1974,
	480, 1956, 740, 1447, 1733, 775, 473, 1952, 1095, 67,
	740, 457, 39, 1947, 1095, 1918, 1946, 39, 1082, 1907,
	40, 1904, 769, 1090, 1905, 40, 911, 912, 1891, 290,
	1888, 1733, 69, 740, 1886, 1864, 1863, 1733, 740, 1733,
	1835, 1814, 41, 1095, 1095, 1811, 1045, 41, 1082, 914,
	1045, 919, 1962, 84, 84, 84, 84, 84, 1048, 528,
	1401, 70, 1803, 1091, 1088, 1095, 909, 1732, 1401, 65,
	1733, 913, 1048, 60, 1643, 66, 1286, 1095, 1575, 1570,
	1523, 1051, 1051, 1524, 466, 1696, 1521, 1646, 1095, 1095,
	1455, 1378, 1520, 1519, 64, 1095, 1095, 1445, 67, 39,
	1095, 1014, 1380, 521, 521, 740, 1147, 40, 1099, 740,
	1381, 1095, 911, 912, 1094, 1081, 1230, 1095, 1082, 526,
	1050, 69, 1142, 1051, 1013, 761, 919, 1012, 768, 41,
	1107, 769, 1093, 761, 607, 914, 875, 874, 827, 826,
	761, 740, 495, 541, 478, 71, 501, 1794, 859, 1416,
	70, 561, 67, 1736, 67, 2052, 2036, 913, 65, 67,
	52, 2025, 645, 1989, 66, 52, 705, 1476, 1477, 606,
	1975, 1353, 1889, 1840, 1836, 69, 84, 69, 1828, 929,
	1827, 1826, 69, 1056, 513, 1822, 522, 1821, 505, 1820,
	1766, 84, 1711, 1706, 84, 84, 1087, 480, 909, 490,
	911, 912, 1760, 1705, 70, 1704, 70, 1654, 1632, 1604,
	1579, 70, 919, 1528, 65, 1525, 1513, 1504, 1086, 65,
	66, 1475, 1472, 914, 975, 66, 1471, 764, 84, 1469,
	84, 1461, 84, 84, 84, 759, 84, 64, 503, 64,
	1383, 67, 878, 1460, 1621, 913, 930, 52, 1379, 1300,
	711, 84, 915, 916, 917, 918, 920, 1414, 940, 1251,
	1250, 606, 84, 1222, 69, 929, 968, 1482, 64, 1577,
	605, 885, 1662, 911, 912, 528, 84, 1999, 1959, 585,
	1945, 588, 293, 528, 1937, 84, 1935, 1926, 1913, 1900,
	84, 84, 84, 70, 84, 593, 914, 1884, 1850, 1833,
	919, 65, 1805, 1769, 1757, 710, 1739, 66, 1638, 741,
	1619, 1597, 1595, 84, 84, 1594, 592, 1592, 913, 1547,
	549, 84, 1546, 84, 550, 1503, 278, 915, 916, 917,
	918, 920, 930, 940, 528, 528, 968, 1759, 749, 1465,
	911, 912, 293, 84, 1464, 84, 84, 84, 84, 84,
	84, 84, 1441, 1436, 1215, 1223, 84, 84, 709, 544,
	546, 584, 84, 914, 1369, 1314, 1313, 1476, 1477, 860,
	84, 1293, 1249, 919, 480, 1146, 1002, 1005, 1009, 582,
	995, 884, 994, 580, 993, 913, 911, 912, 84, 992,
	991, 84, 990, 989, 988, 458, 763, 987, 986, 766,
	734, 985, 602, 603, 984, 983, 712, 982, 981, 980,
	608, 979, 923, 915, 916, 917, 918, 920, 457, 940,
	501, 513, 711, 972, 961, 64, 929, 879, 1314, 748,
	483, 913, 466, 610, 480, 752, 752, 739, 547, 537,
	535, 2035, 1363, 504, 770, 2009, 907, 750, 753, 1908,
	1816, 1795, 772, 1791, 1765, 1764, 1362, 487, 490, 959,
	877, 1792, 889, 726, 842, 842, 1949, 1482, 1478, 1479,
	1480, 1481, 1483, 821, 555, 823, 1911, 822, 1394, 911,
	912, 1763, 1355, 1045, 1416, 855, 854, 853, 852, 848,
	846, 843, 1007, 930, 84, 1527, 1008, 864, 1526, 1089,
	1420, 571, 84, 917, 918, 920, 84, 940, 556, 977,
	84, 84, 883, 876, 84, 1337, 1781, 1053, 1663, 1452,
	1237, 84, 893, 892, 891, 998, 458, 1349, 711, 458,
	458, 905, 575, 1534, 273, 84, 1992, 84, 84, 974,
	84, 269, 1090, 84, 74, 84, 84, 2049, 84, 899,
	528, 2050, 900, 901, 1951, 1019, 861, 1375, 971, 865,
	866, 867, 868, 869, 576, 1476, 1477, 1747, 856, 872,
	873, 921, 922, 923, 915, 916, 917, 918, 920, 1098,
	940, 1576, 1091, 1088, 447, 441, 446, 274, 442, 270,
	1872, 1871, 1070, 521, 1560, 521, 1055, 73, 1055, 1003,
	1030, 1032, 1559, 1531, 1530, 1006, 999, 1000, 1423, 464,
	526, 721, 1073, 722, 819, 1368, 1367, 1018, 1077, 1366,
	1476, 1477, 455, 1558, 825, 553, 813, 1365, 1047, 1197,
	61, 1010, 1096, 615, 1042, 61, 1041, 1035, 1011, 1022,
	293, 1038, 857, 1018, 84, 1043, 581, 940, 1039, 1017,
	480, 1093, 494, 463, 490, 1026, 1269, 1950, 480, 84,
	84, 1079, 1756, 1078, 554, 1482, 84, 1111, 1059, 1080,
	1480, 1481, 1483, 1297, 1296, 1071, 1069, 1072, 1068, 1064,
	1137, 1168, 1074, 723, 490, 450, 721, 490, 722, 1563,
	1212, 84, 1212, 940, 84, 637, 1565, 1855, 781, 1339,
	465, 533, 807, 964, 727, 745, 1148, 728, 1997, 721,
	1003, 722, 1006, 275, 754, 1087, 1029, 1237, 1492, 858,
	1482, 1093, 398, 72, 2060, 81, 81, 267, 2071, 293,
	1584, 1101, 272, 271, 1100, 1000, 999, 727, 392, 393,
	394, 1167, 2049, 411, 1581, 276, 423, 1343, 1549, 1332,
	1194, 760, 1219, 1376, 411, 75, 1220, 1217, 723, 1329,
	2022, 472, 472, 1140, 1141, 267, 732, 401, 267, 267,
	491, 267, 1374, 1492, 81, 498, 731, 1728, 2013, 1115,
	1347, 723, 1114, 552, 1582, 1493, 940, 462, 406, 572,
	1116, 1476, 1477, 402, 847, 844, 84, 84, 84, 1093,
	2014, 451, 84, 480, 749, 84, 1940, 1028, 1299, 1729,
	996, 84, 84, 84, 84, 84, 1149, 403, 1343, 84,
	456, 1234, 84, 84, 452, 1402, 1556, 532, 1132, 528,
	551, 1922, 84, 453, 1885, 1154, 405, 84, 1463, 84,
	1493, 2023, 2059, 1192, 1195, 956, 84, 1631, 1615, 573,
	2066, 465, 1015, 1093, 1564, 1307, 84, 2021, 2048, 1224,
	2046, 1221, 466, 1484, 1485, 1486, 1478, 1479, 1480, 1481,
	1483, 1191, 1774, 1406, 574, 724, 1245, 84, 84, 1027,
	1301, 1326, 1327, 1325, 1264, 1856, 1134, 2024, 528, 1345,
	552, 1482, 1409, 564, 1351, 1550, 542, 540, 598, 1724,
	1335, 1725, 1831, 2072, 1404, 1324, 719, 84, 1302, 84,
	1866, 84, 1407, 1692, 1425, 84, 1211, 1159, 1166, 84,
	1486, 1478, 1479, 1480, 1481, 1483, 761, 1405, 2077, 1727,
	704, 1865, 597, 2058, 1746, 404, 1730, 1848, 84, 1208,
	1303, 1745, 1788, 1743, 1492, 1382, 1357, 1384, 1358, 1359,
	724, 1103, 1932, 1206, 1338, 1348, 1193, 598, 1386, 657,
	1533, 1310, 1105, 466, 1356, 1402, 1419, 1331, 267, 514,
	267, 423, 423, 724, 1385, 2064, 1341, 1218, 1388, 407,
	1106, 748, 1408, 1306, 1135, 890, 881, 1360, 1801, 1104,
	748, 1077, 1580, 1832, 1371, 1372, 1985, 597, 1693, 1377,
	480, 1726, 1373, 871, 1694, 1600, 828, 1789, 61, 1849,
	1776, 1493, 1316, 1406, 1315, 832, 1202, 1610, 842, 1609,
	2076, 466, 551, 511, 1203, 2065, 1204, 1406, 510, 1311,
	1209, 1744, 1409, 1742, 1079, 1400, 1078, 1396, 1227, 1397,
	1787, 1418, 1080, 2067, 1404, 1231, 1409, 463, 1802, 1239,
	589, 1590, 1407, 830, 1767, 1334, 1606, 1399, 1613, 1389,
	1256, 1256, 1267, 1846, 1278, 831, 1407, 1405, 1248, 1433,
	1290, 1291, 1292, 1508, 781, 781, 1424, 1454, 807, 807,
	466, 1426, 1154, 1431, 1925, 1847, 1830, 1507, 1361, 1637,
	1562, 538, 1478, 1479, 1480, 1481, 1483, 1440, 1470, 1435,
	1340, 1097, 1049, 570, 569, 568, 543, 567, 566, 423,
	423, 565, 562, 85, 509, 1451, 502, 1544, 1545, 978,
	1205, 863, 1408, 1247, 2017, 1410, 1311, 1207, 1982, 1543,
	1717, 1554, 1552, 1532, 84, 84, 1408, 1390, 1138, 1130,
	1075, 767, 765, 411, 762, 267, 1428, 423, 587, 423,
	1571, 590, 757, 733, 729, 294, 1429, 725, 1651, 84,
	1434, 1392, 84, 1879, 84, 2050, 472, 1510, 1511, 1512,
	3, 84, 558, 1529, 528, 600, 1144, 267, 476, 1596,
	77, 1568, 84, 850, 1881, 84, 781, 508, 1536, 1018,
	807, 81, 1034, 1569, 293, 1033, 84, 1553, 507, 1555,
	267, 1942, 1593, 1557, 1736, 267, 267, 267, 1561, 755,
	1608, 1622, 1601, 1611, 288, 23, 286, 22, 1018, 1411,
	1977, 1623, 1572, 1574, 1031, 1607, 1566, 604, 267, 267,
	1324, 1037, 898, 1573, 1145, 397, 81, 1036, 81, 1583,
	1585, 1586, 484, 601, 84, 781, 477, 1591, 1963, 807,
	1430, 707, 559, 1772, 1640, 1620, 1133, 1432, 423, 496,
	81, 423, 423, 423, 423, 423, 870, 1603, 1129, 499,
	1612, 423, 423, 61, 1616, 1617, 1058, 411, 1064, 1154,
	500, 820, 408, 781, 906, 888, 23, 807, 22, 824,
	773, 1084, 1439, 287, 11, 1656, 1657, 1658, 289, 10,
	1442, 2074, 1650, 472, 1602, 2075, 498, 2010, 1647, 1966,
	401, 84, 84, 84, 281, 9, 1476, 1477, 1458, 1459,
	911, 912, 1798, 1669, 1664, 1666, 1154, 1712, 84, 1154,
	1587, 406, 1578, 84, 1671, 84, 402, 84, 84, 84,
	84, 84, 1740, 528, 1699, 1728, 1522, 1721, 440, 1544,
	1545, 1502, 280, 7, 1364, 1719, 1700, 1737, 1298, 1723,
	403, 1543, 1515, 282, 4, 11, 1716, 706, 1109, 1108,
	10, 1295, 1294, 654, 1244, 84, 84, 1729, 1713, 405,
	1110, 965, 528, 1741, 1818, 1996, 9, 1878, 1768, 1659,
	84, 84, 529, 1773, 84, 1544, 1545, 1722, 1387, 975,
	1544, 1545, 528, 84, 443, 444, 1762, 1543, 973, 267,
	84, 1797, 1543, 449, 1755, 1761, 1854, 1023, 1784, 1785,
	1777, 267, 1790, 399, 7, 267, 1040, 466, 862, 267,
	1770, 1806, 563, 1793, 1779, 4, 1046, 1771, 1618, 2012,
	1823, 1462, 1896, 84, 1921, 1246, 976, 38, 1541, 631,
	267, 1718, 1066, 1067, 1535, 267, 1810, 1124, 267, 1123,
	423, 423, 526, 423, 1796, 296, 806, 1724, 851, 1725,
	653, 836, 845, 1159, 1667, 1255, 1160, 708, 404, 655,
	778, 1750, 1159, 1672, 656, 1754, 779, 1004, 643, 776,
	1062, 1626, 1216, 1235, 1450, 780, 969, 1727, 84, 623,
	84, 635, 84, 84, 1730, 634, 1232, 534, 1829, 1799,
	51, 84, 1778, 548, 417, 1703, 418, 84, 1644, 1346,
	1758, 1139, 407, 894, 1551, 454, 1473, 536, 1276, 1268,
	1265, 583, 714, 957, 1154, 1154, 1544, 1545, 1154, 1063,
	84, 1858, 560, 1352, 1860, 1083, 609, 902, 1543, 1844,
	1841, 1842, 475, 474, 1119, 84, 557, 829, 528, 1113,
	1874, 1102, 84, 1857, 1859, 1887, 950, 947, 749, 1726,
	84, 445, 1544, 1545, 267, 1120, 1934, 1873, 1131, 1309,
	1697, 498, 2070, 1941, 1543, 1548, 84, 84, 1991, 1895,
	1882, 1707, 68, 1948, 1906, 1880, 1893, 1876, 1902, 781,
	1333, 1915, 1912, 807, 26, 1903, 267, 1899, 529, 423,
	24, 21, 19, 18, 17, 294, 529, 1890, 25, 15,
	1270, 14, 13, 12, 37, 1869, 1870, 84, 36, 35,
	781, 781, 34, 33, 807, 807, 32, 1936, 6, 781,
	781, 1914, 5, 807, 807, 2, 1, 0, 0, 0,
	0, 1927, 84, 84, 0, 1852, 0, 1920, 0, 0,
	1930, 0, 84, 0, 0, 1931, 84, 529, 529, 0,
	0, 0, 781, 1957, 528, 294, 807, 1938, 1955, 0,
	0, 84, 0, 1958, 1783, 0, 0, 84, 1894, 0,
	466, 0, 293, 84, 84, 1967, 0, 1961, 0, 1892,
	1939, 1972, 1965, 0, 0, 0, 0, 0, 0, 1969,
	0, 267, 1304, 1305, 1154, 0, 84, 1023, 84, 1970,
	1312, 84, 0, 84, 0, 0, 1317, 1318, 1320, 1322,
	1323, 0, 0, 0, 1328, 0, 1964, 1330, 267, 2000,
	1995, 0, 2002, 84, 1979, 1988, 84, 267, 2001, 1973,
	1998, 1968, 267, 1868, 1350, 2003, 613, 613, 2004, 1976,
	2008, 267, 1544, 1545, 2006, 716, 0, 2005, 0, 61,
	1993, 267, 0, 1987, 1543, 0, 0, 0, 84, 0,
	84, 0, 0, 2027, 0, 2032, 0, 809, 2030, 0,
	0, 0, 1113, 1113, 0, 0, 0, 0, 84, 0,
	0, 781, 2043, 0, 1960, 807, 0, 2047, 2034, 2045,
	0, 0, 0, 2051, 0, 84, 1862, 0, 0, 703,
	0, 2057, 888, 2056, 888, 2055, 423, 0, 2053, 0,
	267, 0, 2029, 2068, 1395, 2031, 2069, 0, 0, 2073,
	0, 0, 806, 806, 1270, 1270, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 0, 2078, 0, 0, 0,
	0, 295, 0, 0, 0, 1990, 0, 1437, 1438, 0,
	0, 780, 780, 0, 0, 0, 0, 0, 0, 895,
	897, 0, 0, 529, 1476, 1477, 904, 1494, 1495, 1496,
	0, 0, 0, 0, 0, 0, 632, 49, 951, 952,
	953, 954, 955, 808, 0, 1270, 1270, 1270, 963, 777,
	781, 0, 0, 0, 807, 0, 0, 0, 970, 0,
	0, 0, 1064, 0, 0, 0, 0, 0, 1499, 1500,
	1501, 0, 0, 0, 0, 1491, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 459, 0,
	0, 467, 0, 0, 0, 0, 0, 0, 49, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 780, 1482, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 781, 0, 0, 0,
	807, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	1540, 0, 0, 806, 0, 0, 0, 0, 0, 1497,
	0, 0, 1994, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 0, 0,
	0, 0, 780, 0, 0, 0, 0, 0, 0, 267,
	267, 806, 0, 0, 2015, 0, 0, 0, 1270, 1270,
	0, 0, 294, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1588, 0, 0, 1023, 0, 888,
	780, 1635, 1636, 0, 0, 0, 1598, 0, 0, 781,
	0, 0, 0, 807, 0, 0, 0, 267, 530, 0,
	267, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 1630, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
	1270, 0, 1270, 0, 0, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 0, 1695, 0, 0, 0, 1661,
	0, 0, 529, 809, 809, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 467, 0, 1488, 1489, 1490,
	0, 1487, 1484, 1485, 1486, 1478, 1479, 1480, 1481, 1483,
	0, 613, 0, 0, 0, 0, 0, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
	1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 0,
	1196, 529, 1198, 1199, 1200, 1201, 1714, 1715, 1023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1225, 1540, 498, 0, 0, 0, 0, 1748, 0,
	1749, 0, 267, 1751, 1752, 1753, 267, 0, 0, 0,
	0, 0, 0, 1252, 1253, 0, 0, 1266, 0, 1277,
	1279, 1284, 1287, 1288, 1289, 809, 0, 0, 0, 808,
	808, 0, 0, 0, 0, 777, 777, 0, 1540, 0,
	498, 1120, 0, 1540, 716, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 267, 267, 0, 0, 267,
	0, 0, 0, 0, 530, 0, 0, 0, 1630, 911,
	912, 295, 530, 0, 0, 1804, 0, 0, 0, 0,
	0, 0, 0, 0, 809, 1344, 0, 0, 0, 0,
	0, 0, 914, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1824, 0,
	0, 0, 0, 1270, 913, 459, 0, 806, 0, 0,
	928, 0, 809, 530, 530, 0, 0, 1370, 0, 0,
	0, 295, 0, 0, 0, 0, 1851, 0, 0, 0,
	0, 808, 0, 0, 0, 0, 780, 777, 806, 806,
	0, 0, 0, 0, 0, 0, 0, 806, 806, 0,
	0, 0, 0, 1023, 0, 1843, 0, 423, 1845, 919,
	0, 0, 0, 0, 904, 0, 267, 780, 780, 1540,
	0, 0, 423, 0, 0, 0, 780, 780, 0, 0,
	806, 0, 0, 0, 911, 912, 0, 0, 0, 0,
	808, 0, 1875, 0, 0, 498, 777, 0, 0, 0,
	0, 0, 0, 0, 1270, 1540, 0, 914, 0, 780,
	267, 0, 929, 1421, 1422, 0, 0, 1898, 0, 1427,
	0, 0, 0, 0, 0, 267, 0, 1924, 808, 913,
	0, 0, 0, 0, 777, 0, 459, 0, 0, 459,
	459, 498, 1630, 0, 0, 0, 0, 529, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 1453,
	0, 960, 1457, 962, 0, 0, 0, 294, 0, 0,
	966, 1466, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 888, 0, 919, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 963, 0, 0, 1270,
	0, 0, 1284, 1284, 1284, 0, 0, 1943, 1944, 806,
	0, 0, 0, 0, 0, 0, 0, 1953, 0, 0,
	0, 1954, 1978, 0, 0, 0, 0, 0, 0, 530,
	0, 0, 0, 0, 0, 1537, 498, 929, 780, 0,
	0, 0, 1630, 0, 0, 0, 0, 0, 1630, 498,
	0, 0, 1476, 1477, 0, 0, 924, 921, 922, 923,
	915, 916, 917, 918, 920, 613, 940, 0, 0, 0,
	0, 1986, 0, 498, 0, 0, 267, 716, 423, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
	49, 0, 0, 0, 0, 1540, 0, 0, 1898, 1476,
	1477, 1630, 0, 1491, 930, 49, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 0, 529, 0, 806, 295,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	0, 0, 0, 267, 0, 498, 0, 0, 0, 0,
	0, 0, 1633, 0, 0, 1634, 0, 780, 0, 0,
	0, 0, 1482, 2044, 0, 529, 0, 1639, 0, 809,
	809, 0, 0, 0, 0, 0, 1648, 0, 809, 809,
	1630, 0, 0, 0, 1652, 529, 0, 1370, 0, 0,
	0, 924, 921, 922, 923, 915, 916, 917, 918, 920,
	0, 940, 1668, 0, 0, 0, 1670, 0, 0, 1482,
	0, 809, 0, 0, 806, 1492, 0, 0, 295, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1701,
	1702, 0, 0, 780, 0, 0, 0, 0, 1708, 1709,
	1710, 0, 0, 0, 808, 0, 0, 1155, 0, 0,
	777, 0, 1492, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1738, 0, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 808, 808, 0, 0, 0,
	0, 777, 777, 1214, 808, 808, 0, 0, 0, 0,
	777, 777, 0, 0, 0, 911, 912, 806, 931, 932,
	933, 941, 942, 943, 0, 0, 0, 0, 530, 0,
	0, 934, 0, 0, 0, 0, 0, 808, 914, 1493,
	0, 945, 0, 777, 0, 0, 780, 0, 1782, 0,
	809, 529, 0, 0, 0, 0, 0, 0, 0, 0,
	913, 0, 0, 0, 0, 0, 928, 0, 0, 1487,
	1484, 1485, 1486, 1478, 1479, 1480, 1481, 1483, 0, 1809,
	0, 0, 0, 1812, 1813, 0, 0, 530, 1815, 0,
	0, 0, 0, 49, 49, 1817, 0, 1819, 0, 0,
	0, 0, 0, 0, 0, 1825, 0, 0, 0, 0,
	0, 0, 0, 467, 0, 919, 1487, 1484, 1485, 1486,
	1478, 1479, 1480, 1481, 1483, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 946, 0, 0, 1834, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 0, 0, 424, 0, 809,
	0, 0, 936, 0, 0, 0, 808, 529, 929, 0,
	0, 0, 777, 0, 0, 425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 49, 1867, 0, 0,
	49, 0, 0, 935, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 427, 0, 0, 1417, 0, 432, 433, 0, 0,
	438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1901, 0, 426, 428, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 809, 0, 939, 0, 1916,
	1917, 0, 1214, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 429, 962, 0, 0, 808, 0, 0, 0, 1929,
	0, 777, 0, 0, 0, 430, 431, 0, 0, 0,
	0, 0, 1933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 434, 0, 0, 937, 0, 0, 925, 926,
	927, 0, 924, 921, 922, 923, 915, 916, 917, 918,
	920, 0, 940, 0, 0, 0, 716, 0, 0, 1837,
	0, 962, 0, 0, 0, 0, 0, 0, 809, 0,
	0, 0, 0, 911, 912, 0, 931, 932, 933, 941,
	942, 943, 0, 0, 0, 0, 0, 0, 0, 934,
	0, 808, 0, 0, 0, 0, 914, 777, 0, 945,
	0, 0, 0, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 913, 0,
	0, 0, 0, 295, 928, 0, 0, 0, 0, 911,
	912, 0, 931, 932, 933, 941, 942, 943, 0, 0,
	0, 1155, 435, 0, 0, 934, 436, 0, 0, 0,
	0, 437, 914, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 2028, 439, 0, 0, 0, 0,
	0, 911, 912, 919, 913, 0, 0, 941, 942, 943,
	928, 0, 0, 0, 808, 2042, 2042, 0, 1155, 0,
	777, 1155, 938, 946, 914, 0, 0, 945, 49, 0,
	0, 1476, 1477, 0, 1494, 1495, 1496, 0, 944, 0,
	0, 2042, 0, 0, 0, 0, 913, 1808, 0, 0,
	936, 0, 928, 0, 0, 0, 929, 0, 0, 919,
	0, 0, 911, 912, 0, 931, 932, 933, 941, 942,
	943, 0, 0, 0, 0, 0, 2042, 0, 938, 946,
	0, 935, 1491, 0, 0, 914, 0, 0, 945, 0,
	0, 0, 0, 0, 944, 0, 0, 0, 0, 0,
	0, 919, 530, 0, 0, 0, 936, 913, 0, 0,
	0, 0, 929, 928, 0, 0, 0, 0, 0, 0,
	938, 946, 0, 930, 1476, 1477, 0, 1494, 1495, 1496,
	0, 1482, 0, 0, 0, 939, 0, 935, 0, 0,
	0, 530, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 0,
	0, 530, 919, 0, 0, 0, 1497, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 930,
	0, 938, 946, 0, 1492, 1476, 1477, 49, 1494, 1495,
	1496, 939, 0, 937, 0, 0, 925, 926, 927, 0,
	924, 921, 922, 923, 915, 916, 917, 918, 920, 936,
	940, 0, 0, 0, 0, 929, 0, 1518, 0, 0,
	0, 930, 0, 0, 1482, 0, 1155, 1155, 0, 0,
	1155, 0, 0, 939, 0, 0, 1491, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 1493, 925, 926, 927, 0, 924, 921, 922, 923,
	915, 916, 917, 918, 920, 0, 940, 0, 0, 0,
	0, 0, 0, 1517, 0, 0, 0, 1492, 0, 0,
	0, 0, 930, 0, 0, 1482, 0, 0, 0, 0,
	0, 937, 0, 0, 939, 0, 0, 0, 924, 921,
	922, 923, 915, 916, 917, 918, 920, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 530, 0, 0,
	1497, 0, 0, 0, 1488, 1489, 1490, 0, 1487, 1484,
	1485, 1486, 1478, 1479, 1480, 1481, 1483, 0, 1492, 0,
	0, 0, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 925, 926, 927, 0, 924,
	921, 922, 923, 915, 916, 917, 918, 920, 0, 940,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1883, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1493, 1155, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1488, 1489, 1490,
	0, 1487, 1484, 1485, 1486, 1478, 1479, 1480, 1481, 1483,
	0, 0, 0, 530, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1488, 1489,
	1490, 0, 1487, 1484, 1485, 1486, 1478, 1479, 1480, 1481,
	1483, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 0, 292,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 86, 87, 311, 88, 312,
	313, 314, 315, 214, 316, 317, 318, 319, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 320, 93,
	221, 222, 94, 321, 322, 223, 224, 225, 323, 226,
	324, 297, 325, 95, 96, 97, 0, 98, 326, 99,
	100, 101, 327, 298, 102, 103, 328, 329, 330, 331,
	332, 333, 104, 105, 268, 106, 227, 107, 228, 229,
	334, 108, 335, 109, 336, 337, 338, 110, 111, 339,
	112, 340, 0, 341, 230, 113, 114, 231, 232, 342,
	343, 344, 115, 116, 233, 0, 117, 345, 118, 346,
	347, 299, 348, 119, 234, 349, 235, 350, 120, 121,
	122, 123, 236, 237, 301, 351, 127, 352, 124, 353,
	300, 125, 238, 126, 239, 240, 241, 354, 242, 355,
	302, 128, 303, 129, 130, 356, 132, 131, 357, 243,
	304, 133, 305, 358, 134, 359, 360, 135, 0, 136,
	137, 138, 140, 244, 139, 306, 141, 142, 144, 143,
	361, 362, 363, 245, 145, 246, 146, 147, 364, 148,
	365, 366, 149, 367, 368, 150, 247, 307, 151, 308,
	248, 152, 153, 154, 155, 369, 249, 156, 250, 157,
	370, 158, 159, 160, 251, 161, 162, 371, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 372, 173,
	309, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	373, 253, 181, 182, 374, 183, 184, 310, 185, 254,
	255, 186, 375, 192, 187, 188, 189, 191, 256, 190,
	257, 376, 193, 377, 194, 195, 196, 378, 258, 259,
	260, 379, 380, 197, 261, 262, 381, 198, 199, 200,
	201, 382, 383, 202, 203, 204, 384, 205, 385, 206,
	207, 208, 263, 264, 386, 387, 209, 388, 389, 390,
	391, 210, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 0, 0, 0,
	0, 0, 0, 1624, 0, 0, 0, 0, 0, 0,
	0, 1625, 86, 87, 311, 88, 312, 313, 314, 315,
	214, 316, 317, 318, 319, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 320, 93, 221, 222, 94,
	321, 322, 223, 224, 225, 323, 226, 324, 297, 325,
	95, 96, 97, 0, 98, 326, 99, 100, 101, 327,
	298, 102, 103, 328, 329, 330, 331, 332, 333, 104,
	105, 268, 106, 227, 107, 228, 229, 334, 108, 335,
	109, 336, 337, 338, 110, 111, 339, 112, 340, 0,
	341, 230, 113, 114, 231, 232, 342, 343, 344, 115,
	116, 233, 0, 117, 345, 118, 346, 347, 299, 348,
	119, 234, 349, 235, 350, 120, 121, 122, 123, 236,
	237, 301, 351, 127, 352, 124, 353, 300, 125, 238,
	126, 239, 240, 241, 354, 242, 355, 302, 128, 303,
	129, 130, 356, 132, 131, 357, 243, 304, 133, 305,
	358, 134, 359, 360, 135, 0, 136, 137, 138, 140,
	244, 139, 306, 141, 142, 144, 143, 361, 362, 363,
	245, 145, 246, 146, 147, 364, 148, 365, 366, 149,
	367, 368, 150, 247, 307, 151, 308, 248, 152, 153,
	154, 155, 369, 249, 156, 250, 157, 370, 158, 159,
	160, 251, 161, 162, 371, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 372, 173, 309, 174, 175,
	252, 176, 0, 177, 178, 179, 180, 373, 253, 181,
	182, 374, 183, 184, 310, 185, 254, 255, 186, 375,
	192, 187, 188, 189, 191, 256, 190, 257, 376, 193,
	377, 194, 195, 196, 378, 258, 259, 260, 379, 380,
	197, 261, 262, 381, 198, 199, 200, 201, 382, 383,
	202, 203, 204, 384, 205, 385, 206, 207, 208, 263,
	264, 386, 387, 209, 388, 389, 390, 391, 210, 211,
	212, 213, 0, 0, 0, 292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1971, 86, 87, 311, 88, 312, 313, 314, 315, 214,
	316, 317, 318, 319, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 320, 93, 221, 222, 94, 321,
	322, 223, 224, 225, 323, 226, 324, 297, 325, 95,
	96, 97, 0, 98, 326, 99, 100, 101, 327, 298,
	102, 103, 328, 329, 330, 331, 332, 333, 104, 105,
	268, 106, 227, 107, 228, 229, 334, 108, 335, 109,
	336, 337, 338, 110, 111, 339, 112, 340, 0, 341,
	230, 113, 114, 231, 232, 342, 343, 344, 115, 116,
	233, 0, 117, 345, 118, 346, 347, 299, 348, 119,
	234, 349, 235, 350, 120, 121, 122, 123, 236, 237,
	301, 351, 127, 352, 124, 353, 300, 125, 238, 126,
	239, 240, 241, 354, 242, 355, 302, 128, 303, 129,
	130, 356, 132, 131, 357, 243, 304, 133, 305, 358,
	134, 359, 360, 135, 0, 136, 137, 138, 140, 244,
	139, 306, 141, 142, 144, 143, 361, 362, 363, 245,
	145, 246, 146, 147, 364, 148, 365, 366, 149, 367,
	368, 150, 247, 307, 151, 308, 248, 152, 153, 154,
	155, 369, 249, 156, 250, 157, 370, 158, 159, 160,
	251, 161, 162, 371, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 372, 173, 309, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 373, 253, 181, 182,
	374, 183, 184, 310, 185, 254, 255, 186, 375, 192,
	187, 188, 189, 191, 256, 190, 257, 376, 193, 377,
	194, 195, 196, 378, 258, 259, 260, 379, 380, 197,
	261, 262, 381, 198, 199, 200, 201, 382, 383, 202,
	203, 204, 384, 205, 385, 206, 207, 208, 263, 264,
	386, 387, 209, 388, 389, 390, 391, 210, 211, 212,
	213, 292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 0, 0, 86, 87, 311,
	88, 312, 313, 314, 315, 214, 316, 317, 318, 319,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	320, 93, 221, 222, 94, 321, 322, 223, 224, 225,
	323, 226, 324, 297, 325, 95, 96, 97, 0, 98,
	326, 99, 100, 101, 327, 298, 102, 103, 328, 329,
	330, 331, 332, 333, 104, 105, 268, 106, 227, 107,
	228, 229, 334, 108, 335, 109, 336, 337, 338, 110,
	111, 339, 112, 340, 0, 341, 230, 113, 114, 231,
	232, 342, 343, 344, 115, 116, 233, 0, 117, 345,
	118, 346, 347, 299, 348, 119, 234, 349, 235, 350,
	120, 121, 122, 123, 236, 237, 301, 351, 127, 352,
	124, 353, 300, 125, 238, 126, 239, 240, 241, 354,
	242, 355, 302, 128, 303, 129, 130, 356, 132, 131,
	357, 243, 304, 133, 305, 358, 134, 359, 360, 135,
	0, 136, 137, 138, 140, 244, 139, 306, 141, 142,
	144, 143, 361, 362, 363, 245, 145, 246, 146, 147,
	364, 148, 365, 366, 149, 367, 368, 150, 247, 307,
	151, 308, 248, 152, 153, 154, 155, 369, 249, 156,
	250, 157, 370, 158, 159, 160, 251, 161, 162, 371,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	372, 173, 309, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 373, 253, 181, 182, 374, 183, 184, 310,
	185, 254, 255, 186, 375, 192, 187, 188, 189, 191,
	256, 190, 257, 376, 193, 377, 194, 195, 196, 378,
	258, 259, 260, 379, 380, 197, 261, 262, 381, 198,
	199, 200, 201, 382, 383, 202, 203, 204, 384, 205,
	385, 206, 207, 208, 263, 264, 386, 387, 209, 388,
	389, 390, 391, 210, 211, 212, 213, 651, 640, 641,
	638, 639, 630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 667, 633, 0, 0, 0, 89, 90, 91, 215,
	682, 217, 683, 92, 684, 685, 0, 93, 221, 222,
	94, 636, 666, 686, 687, 225, 0, 678, 0, 659,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 660, 662, 0, 661, 663,
	104, 105, 268, 106, 688, 107, 689, 690, 717, 108,
	0, 109, 0, 0, 0, 681, 111, 0, 112, 0,
	0, 0, 624, 113, 114, 668, 669, 647, 0, 0,
	115, 116, 691, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 679, 0, 235, 0, 120, 121, 122, 123,
	675, 677, 301, 0, 127, 0, 124, 0, 300, 125,
	692, 126, 693, 694, 695, 0, 658, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 680, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 306, 141, 142, 144, 143, 619, 0,
	648, 676, 145, 696, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 670, 152,
	153, 154, 155, 0, 671, 156, 250, 157, 0, 158,
	159, 160, 697, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 625, 176, 0, 177, 178, 179, 180, 67, 253,
	181, 182, 664, 183, 184, 310, 185, 698, 255, 186,
	0, 192, 187, 188, 189, 191, 699, 190, 672, 0,
	193, 69, 194, 195, 196, 0, 258, 700, 701, 0,
	0, 197, 673, 674, 646, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 665, 205, 0, 206, 207, 208,
	531, 702, 0, 0, 209, 0, 0, 0, 65, 210,
	211, 212, 213, 620, 66, 0, 0, 0, 651, 640,
	641, 638, 639, 630, 616, 617, 0, 0, 0, 0,
	618, 0, 0, 626, 86, 87, 1241, 88, 629, 0,
	0, 0, 667, 633, 0, 0, 0, 89, 90, 91,
	215, 682, 217, 683, 92, 684, 685, 0, 93, 221,
	222, 94, 636, 666, 686, 687, 225, 0, 678, 0,
	659, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 298, 102, 103, 0, 660, 662, 0, 661,
	663, 104, 105, 268, 106, 688, 107, 689, 690, 0,
	108, 0, 109, 0, 1242, 0, 681, 111, 0, 112,
	0, 0, 0, 624, 113, 114, 668, 669, 647, 0,
	0, 115, 116, 691, 0, 117, 0, 118, 0, 0,
	299, 0, 119, 679, 0, 235, 0, 120, 121, 122,
	123, 675, 677, 301, 0, 127, 0, 124, 0, 300,
	125, 692, 126, 693, 694, 695, 0, 658, 0, 302,
	128, 303, 129, 130, 0, 132, 131, 0, 680, 304,
	133, 305, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 244, 139, 306, 141, 142, 144, 143, 619,
	0, 648, 676, 145, 696, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 670,
	152, 153, 154, 155, 0, 671, 156, 250, 157, 0,
	158, 159, 160, 697, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 625, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 664, 183, 184, 310, 185, 698, 255,
	186, 0, 192, 187, 188, 189, 191, 699, 190, 672,
	0, 193, 0, 194, 195, 196, 0, 258, 700, 701,
	0, 0, 197, 673, 674, 646, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 665, 205, 0, 206, 207,
	208, 263, 702, 1240, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 620, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 616, 617, 1243, 0, 0,
	0, 618, 0, 0, 626, 1238, 0, 0, 0, 629,
	651, 640, 641, 638, 639, 630, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 87, 0, 88,
	0, 0, 0, 0, 667, 633, 0, 0, 0, 89,
	90, 91, 215, 682, 217, 683, 92, 684, 685, 0,
	93, 221, 222, 94, 636, 666, 686, 687, 225, 0,
	678, 0, 659, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 298, 102, 103, 0, 660, 662,
	0, 661, 663, 104, 105, 268, 106, 688, 107, 689,
	690, 0, 108, 0, 109, 0, 0, 0, 681, 111,
	0, 112, 0, 0, 0, 624, 113, 114, 668, 669,
	647, 0, 0, 115, 116, 691, 0, 117, 0, 118,
	0, 0, 299, 0, 119, 679, 0, 235, 0, 120,
	121, 122, 123, 675, 677, 301, 0, 127, 0, 124,
	0, 300, 125, 692, 126, 693, 694, 695, 0, 658,
	0, 302, 128, 303, 129, 130, 0, 132, 131, 0,
	680, 304, 133, 305, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 244, 139, 306, 141, 142, 144,
	143, 619, 0, 648, 676, 145, 696, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 670, 152, 153, 154, 155, 0, 671, 156, 250,
	157, 0, 158, 159, 160, 697, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 625, 176, 0, 177, 178, 179,
	180, 67, 253, 181, 182, 664, 183, 184, 310, 185,
	698, 255, 186, 0, 192, 187, 188, 189, 191, 699,
	190, 672, 0, 193, 69, 194, 195, 196, 0, 258,
	700, 701, 0, 0, 197, 673, 674, 646, 198, 199,
	200, 201, 0, 0, 202, 203, 204, 665, 205, 0,
	206, 207, 208, 531, 702, 0, 0, 209, 0, 0,
	0, 65, 210, 211, 212, 213, 620, 66, 651, 640,
	641, 638, 639, 630, 0, 0, 0, 616, 617, 0,
	0, 0, 0, 618, 86, 87, 626, 88, 0, 0,
	0, 629, 667, 633, 0, 0, 0, 89, 90, 91,
	215, 682, 217, 683, 92, 684, 685, 1280, 93, 221,
	222, 94, 636, 666, 686, 687, 225, 0, 678, 0,
	659, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 298, 102, 103, 0, 660, 662, 0, 661,
	663, 104, 105, 268, 106, 688, 107, 689, 690, 0,
	108, 0, 109, 0, 0, 0, 681, 111, 0, 112,
	0, 0, 0, 624, 113, 114, 668, 669, 647, 0,
	0, 115, 116, 691, 0, 117, 0, 118, 0, 1285,
	299, 0, 119, 679, 0, 235, 0, 120, 121, 122,
	123, 675, 677, 301, 0, 127, 0, 124, 0, 300,
	125, 692, 126, 693, 694, 695, 0, 658, 0, 302,
	128, 303, 129, 130, 0, 132, 131, 1281, 680, 304,
	133, 305, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 140, 244, 139, 306, 141, 142, 144, 143, 619,
	0, 648, 676, 145, 696, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 670,
	152, 153, 154, 155, 0, 671, 156, 250, 157, 0,
	158, 159, 160, 697, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 625, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 664, 183, 184, 310, 185, 698, 255,
	186, 0, 192, 187, 188, 189, 191, 699, 190, 672,
	0, 193, 0, 194, 195, 196, 0, 258, 700, 701,
	0, 1282, 197, 673, 674, 646, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 665, 205, 0, 206, 207,
	208, 263, 702, 0, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 620, 0, 651, 640, 641, 638,
	639, 630, 0, 0, 0, 616, 617, 0, 0, 0,
	0, 618, 86, 87, 626, 88, 0, 0, 0, 629,
	667, 633, 0, 0, 0, 89, 90, 91, 215, 682,
	217, 683, 92, 684, 685, 0, 93, 221, 222, 94,
	636, 666, 686, 687, 225, 0, 678, 0, 659, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 660, 662, 0, 661, 663, 104,
	105, 268, 106, 688, 107, 689, 690, 0, 108, 0,
	109, 0, 0, 0, 681, 111, 0, 112, 0, 0,
	0, 624, 113, 114, 668, 669, 647, 0, 0, 115,
	116, 691, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 679, 0, 235, 0, 120, 121, 122, 123, 675,
	677, 301, 0, 127, 0, 124, 0, 300, 125, 692,
	126, 693, 694, 695, 0, 658, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 680, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	244, 139, 306, 141, 142, 144, 143, 619, 1567, 648,
	676, 145, 696, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 670, 152, 153,
	154, 155, 0, 671, 156, 250, 157, 0, 158, 159,
	160, 697, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	625, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 664, 183, 184, 310, 185, 698, 255, 186, 0,
	192, 187, 188, 189, 191, 699, 190, 672, 0, 193,
	0, 194, 195, 196, 0, 258, 700, 701, 0, 0,
	197, 673, 674, 646, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 665, 205, 0, 206, 207, 208, 263,
	702, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 620, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 0, 616, 617, 614, 0, 0, 0, 618,
	86, 87, 626, 88, 0, 0, 0, 629, 667, 633,
	0, 0, 0, 89, 90, 91, 215, 682, 217, 683,
	92, 684, 685, 0, 93, 221, 222, 94, 636, 666,
	686, 687, 225, 0, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 688, 107, 689, 690, 0, 108, 0, 109, 0,
	0, 0, 681, 111, 0, 112, 0, 0, 0, 624,
	113, 114, 668, 669, 647, 0, 0, 115, 116, 691,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 301,
	0, 127, 0, 124, 0, 300, 125, 692, 126, 693,
	694, 695, 0, 658, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 244, 139,
	306, 141, 142, 144, 143, 619, 0, 648, 676, 145,
	696, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 697,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 625, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 310, 185, 698, 255, 186, 0, 192, 187,
	188, 189, 191, 699, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 700, 701, 0, 0, 197, 673,
	674, 646, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 702, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	620, 0, 0, 0, 0, 651, 640, 641, 638, 639,
	630, 616, 617, 0, 0, 0, 0, 618, 968, 1233,
	626, 86, 87, 0, 88, 629, 0, 0, 0, 667,
	633, 0, 0, 0, 89, 90, 91, 215, 682, 217,
	683, 92, 684, 685, 0, 93, 221, 222, 94, 636,
	666, 686, 687, 225, 0, 678, 0, 659, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 298,
	102, 103, 0, 660, 662, 0, 661, 663, 104, 105,
	268, 106, 688, 107, 689, 690, 0, 108, 0, 109,
	0, 0, 0, 681, 111, 0, 112, 0, 0, 0,
	624, 113, 114, 668, 669, 647, 0, 0, 115, 116,
	691, 0, 117, 0, 118, 0, 0, 299, 0, 119,
	679, 0, 235, 0, 120, 121, 122, 123, 675, 677,
	301, 0, 127, 0, 124, 0, 300, 125, 692, 126,
	693, 694, 695, 0, 658, 0, 302, 128, 303, 129,
	130, 0, 132, 131, 0, 680, 304, 133, 305, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 306, 141, 142, 144, 143, 619, 0, 648, 676,
	145, 696, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 670, 152, 153, 154,
	155, 0, 671, 156, 250, 157, 0, 158, 159, 160,
	697, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 625,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	664, 183, 184, 310, 185, 698, 255, 186, 0, 192,
	187, 188, 189, 191, 699, 190, 672, 0, 193, 0,
	194, 195, 196, 0, 258, 700, 701, 0, 0, 197,
	673, 674, 646, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 665, 205, 0, 206, 207, 208, 263, 702,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 620, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 616, 617, 0, 0, 0, 0, 618, 0,
	0, 626, 1698, 0, 0, 0, 629, 651, 640, 641,
	638, 639, 630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 667, 633, 0, 0, 0, 89, 90, 91, 215,
	682, 217, 683, 92, 684, 685, 0, 93, 221, 222,
	94, 636, 666, 686, 687, 225, 0, 678, 0, 659,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 660, 662, 0, 661, 663,
	104, 105, 268, 106, 688, 107, 689, 690, 0, 108,
	0, 109, 0, 0, 0, 681, 111, 0, 112, 0,
	0, 0, 624, 113, 114, 668, 669, 647, 0, 0,
	115, 116, 691, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 679, 0, 235, 0, 120, 121, 122, 123,
	675, 677, 301, 0, 127, 0, 124, 0, 300, 125,
	692, 126, 693, 694, 695, 0, 658, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 680, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 306, 141, 142, 144, 143, 619, 0,
	648, 676, 145, 696, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 670, 152,
	153, 154, 155, 0, 671, 156, 250, 157, 0, 158,
	159, 160, 697, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 625, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 664, 183, 184, 310, 185, 698, 255, 186,
	0, 192, 187, 188, 189, 191, 699, 190, 672, 0,
	193, 0, 194, 195, 196, 0, 258, 700, 701, 0,
	0, 197, 673, 674, 646, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 665, 205, 0, 206, 207, 208,
	263, 702, 1655, 0, 209, 0, 0, 0, 0, 210,
	211, 212, 213, 620, 0, 651, 640, 641, 638, 639,
	630, 0, 0, 0, 616, 617, 0, 0, 0, 0,
	618, 86, 87, 626, 88, 0, 0, 0, 629, 667,
	633, 0, 0, 0, 89, 90, 91, 215, 682, 217,
	683, 92, 684, 685, 0, 93, 221, 222, 94, 636,
	666, 686, 687, 225, 0, 678, 0, 659, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 298,
	102, 103, 0, 660, 662, 0, 661, 663, 104, 105,
	268, 106, 688, 107, 689, 690, 0, 108, 0, 109,
	0, 0, 0, 681, 111, 0, 112, 0, 0, 0,
	624, 113, 114, 668, 669, 647, 0, 0, 115, 116,
	691, 0, 117, 0, 118, 0, 0, 299, 0, 119,
	679, 0, 235, 0, 120, 121, 122, 123, 675, 677,
	301, 0, 127, 0, 124, 0, 300, 125, 692, 126,
	693, 694, 695, 0, 658, 0, 302, 128, 303, 129,
	130, 0, 132, 131, 0, 680, 304, 133, 305, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 306, 141, 142, 144, 143, 619, 0, 648, 676,
	145, 696, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 670, 152, 153, 154,
	155, 0, 671, 156, 250, 157, 0, 158, 159, 160,
	697, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 625,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	664, 183, 184, 310, 185, 698, 255, 186, 0, 192,
	187, 188, 189, 191, 699, 190, 672, 0, 193, 0,
	194, 195, 196, 0, 258, 700, 701, 0, 0, 197,
	673, 674, 646, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 665, 205, 0, 206, 207, 208, 263, 702,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 620, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 616, 617, 0, 0, 0, 0, 618, 0,
	0, 626, 1645, 0, 0, 0, 629, 651, 640, 641,
	638, 639, 630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 667, 633, 0, 0, 0, 89, 90, 91, 215,
	682, 217, 683, 92, 684, 685, 0, 93, 221, 222,
	94, 636, 666, 686, 687, 225, 0, 678, 0, 659,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 660, 662, 0, 661, 663,
	104, 105, 268, 106, 688, 107, 689, 690, 717, 108,
	0, 109, 0, 0, 0, 681, 111, 0, 112, 0,
	0, 0, 624, 113, 114, 668, 669, 647, 0, 0,
	115, 116, 691, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 679, 0, 235, 0, 120, 121, 122, 123,
	675, 677, 301, 0, 127, 0, 124, 0, 300, 125,
	692, 126, 693, 694, 695, 0, 658, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 680, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 306, 141, 142, 144, 143, 619, 0,
	648, 676, 145, 696, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 670, 152,
	153, 154, 155, 0, 671, 156, 250, 157, 0, 158,
	159, 160, 697, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 625, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 664, 183, 184, 310, 185, 698, 255, 186,
	0, 192, 187, 188, 189, 191, 699, 190, 672, 0,
	193, 0, 194, 195, 196, 0, 258, 700, 701, 0,
	0, 197, 673, 674, 646, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 665, 205, 0, 206, 207, 208,
	263, 702, 0, 0, 209, 0, 0, 0, 0, 210,
	211, 212, 213, 620, 0, 651, 640, 641, 638, 639,
	630, 0, 0, 0, 616, 617, 0, 0, 0, 0,
	618, 86, 87, 626, 88, 0, 0, 0, 629, 667,
	633, 0, 0, 0, 89, 90, 91, 215, 682, 217,
	683, 92, 684, 685, 0, 93, 221, 222, 94, 636,
	666, 686, 687, 225, 0, 678, 0, 659, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 298,
	102, 103, 0, 660, 662, 0, 661, 663, 104, 105,
	268, 106, 688, 107, 689, 690, 0, 108, 0, 109,
	0, 0, 0, 681, 111, 0, 112, 0, 0, 0,
	624, 113, 114, 668, 669, 647, 0, 0, 115, 116,
	691, 0, 117, 0, 118, 0, 1285, 299, 0, 119,
	679, 0, 235, 0, 120, 121, 122, 123, 675, 677,
	301, 0, 127, 0, 124, 0, 300, 125, 692, 126,
	693, 694, 695, 0, 658, 0, 302, 128, 303, 129,
	130, 0, 132, 131, 0, 680, 304, 133, 305, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 306, 141, 142, 144, 143, 619, 0, 648, 676,
	145, 696, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 670, 152, 153, 154,
	155, 0, 671, 156, 250, 157, 0, 158, 159, 160,
	697, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 625,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	664, 183, 184, 310, 185, 698, 255, 186, 0, 192,
	187, 188, 189, 191, 699, 190, 672, 0, 193, 0,
	194, 195, 196, 0, 258, 700, 701, 0, 0, 197,
	673, 674, 646, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 665, 205, 0, 206, 207, 208, 263, 702,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 620, 0, 651, 640, 641, 638, 639, 630, 0,
	0, 0, 616, 617, 0, 0, 0, 0, 618, 86,
	87, 626, 88, 0, 0, 0, 629, 667, 633, 0,
	0, 0, 89, 90, 91, 215, 682, 217, 683, 92,
	684, 685, 0, 93, 221, 222, 94, 636, 666, 686,
	687, 225, 0, 678, 0, 659, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 298, 102, 103,
	0, 660, 662, 0, 661, 663, 104, 105, 268, 106,
	688, 107, 689, 690, 0, 108, 0, 109, 0, 0,
	0, 681, 111, 0, 112, 0, 0, 0, 624, 113,
	114, 668, 669, 647, 0, 0, 115, 116, 691, 0,
	117, 0, 118, 0, 0, 299, 0, 119, 679, 0,
	235, 0, 120, 121, 122, 123, 675, 677, 301, 0,
	127, 0, 124, 0, 300, 125, 692, 126, 693, 694,
	695, 0, 658, 0, 302, 128, 303, 129, 130, 0,
	132, 131, 0, 680, 304, 133, 305, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 244, 139, 306,
	141, 142, 144, 143, 619, 0, 648, 676, 145, 696,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 307, 151, 308, 670, 152, 153, 154, 155, 0,
	671, 156, 250, 157, 0, 158, 159, 160, 697, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 309, 174, 175, 625, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 664, 183,
	184, 310, 185, 698, 255, 186, 0, 192, 187, 188,
	189, 191, 699, 190, 672, 0, 193, 0, 194, 195,
	196, 0, 258, 700, 701, 0, 0, 197, 673, 674,
	646, 198, 199, 200, 201, 0, 0, 202, 203, 204,
	665, 205, 0, 206, 207, 208, 263, 702, 0, 0,
	209, 0, 0, 0, 0, 210, 211, 212, 213, 620,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	616, 617, 0, 0, 0, 0, 618, 0, 0, 626,
	1228, 0, 0, 0, 629, 651, 640, 641, 638, 639,
	630, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 667,
	633, 0, 0, 0, 89, 90, 91, 215, 682, 217,
	683, 92, 684, 685, 0, 93, 221, 222, 94, 636,
	666, 686, 687, 225, 0, 678, 0, 659, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 298,
	102, 103, 0, 660, 662, 0, 661, 663, 104, 105,
	268, 106, 688, 107, 689, 690, 0, 108, 0, 109,
	0, 0, 0, 681, 111, 0, 112, 0, 0, 0,
	624, 113, 114, 668, 669, 647, 0, 0, 115, 116,
	691, 0, 117, 0, 118, 0, 0, 299, 0, 119,
	679, 0, 235, 0, 120, 121, 122, 123, 675, 677,
	301, 0, 127, 0, 124, 0, 300, 125, 692, 126,
	693, 694, 695, 0, 658, 0, 302, 128, 303, 129,
	130, 0, 132, 131, 0, 680, 304, 133, 305, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 306, 141, 142, 144, 143, 619, 0, 648, 676,
	145, 696, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 670, 152, 153, 154,
	155, 0, 671, 156, 250, 157, 0, 158, 159, 160,
	697, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 625,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	664, 183, 184, 310, 185, 698, 255, 186, 0, 192,
	187, 188, 189, 191, 699, 190, 672, 0, 193, 0,
	194, 195, 196, 0, 258, 700, 701, 0, 0, 197,
	673, 674, 646, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 665, 205, 0, 206, 207, 208, 263, 702,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 620, 0, 0, 0, 0, 651, 640, 641, 638,
	639, 630, 616, 617, 614, 0, 0, 0, 618, 0,
	0, 626, 86, 87, 896, 88, 629, 0, 0, 0,
	667, 633, 0, 0, 0, 89, 90, 91, 215, 682,
	217, 683, 92, 684, 685, 0, 93, 221, 222, 94,
	636, 666, 686, 687, 225, 0, 678, 0, 659, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 660, 662, 0, 661, 663, 104,
	105, 268, 106, 688, 107, 689, 690, 0, 108, 0,
	109, 0, 0, 0, 681, 111, 0, 112, 0, 0,
	0, 624, 113, 114, 668, 669, 647, 0, 0, 115,
	116, 691, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 679, 0, 235, 0, 120, 121, 122, 123, 675,
	677, 301, 0, 127, 0, 124, 0, 300, 125, 692,
	126, 693, 694, 695, 0, 658, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 680, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	244, 139, 306, 141, 142, 144, 143, 619, 0, 648,
	676, 145, 696, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 670, 152, 153,
	154, 155, 0, 671, 156, 250, 157, 0, 158, 159,
	160, 697, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	625, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 664, 183, 184, 310, 185, 698, 255, 186, 0,
	192, 187, 188, 189, 191, 699, 190, 672, 0, 193,
	0, 194, 195, 196, 0, 258, 700, 701, 0, 0,
	197, 673, 674, 646, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 665, 205, 0, 206, 207, 208, 263,
	702, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 620, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 0, 616, 617, 0, 0, 0, 0, 618,
	86, 87, 626, 88, 0, 0, 0, 629, 667, 633,
	0, 0, 0, 89, 90, 91, 215, 682, 217, 683,
	92, 684, 685, 0, 93, 221, 222, 94, 636, 666,
	686, 687, 225, 0, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	2041, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 688, 107, 689, 690, 0, 108, 0, 109, 0,
	0, 0, 681, 111, 0, 112, 0, 0, 0, 624,
	113, 114, 668, 669, 647, 0, 0, 115, 116, 691,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 301,
	0, 127, 0, 124, 0, 300, 125, 692, 126, 693,
	694, 695, 0, 658, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 244, 139,
	306, 141, 142, 144, 143, 619, 0, 648, 676, 145,
	696, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 697,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 625, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 310, 185, 698, 255, 186, 0, 192, 187,
	188, 189, 191, 699, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 700, 701, 0, 0, 197, 673,
	674, 646, 198, 199, 2040, 201, 0, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 702, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	620, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	0, 616, 617, 0, 0, 0, 0, 618, 86, 87,
	626, 88, 0, 0, 0, 629, 667, 633, 0, 0,
	0, 89, 90, 91, 2039, 682, 217, 683, 92, 684,
	685, 0, 93, 221, 222, 94, 636, 666, 686, 687,
	225, 0, 678, 0, 659, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 2041, 0,
	660, 662, 0, 661, 663, 104, 105, 268, 106, 688,
	107, 689, 690, 0, 108, 0, 109, 0, 0, 0,
	681, 111, 0, 112, 0, 0, 0, 624, 113, 114,
	668, 669, 647, 0, 0, 115, 116, 691, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 679, 0, 235,
	0, 120, 121, 122, 123, 675, 677, 301, 0, 127,
	0, 124, 0, 300, 125, 692, 126, 693, 694, 695,
	0, 658, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 680, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 244, 139, 306, 141,
	142, 144, 143, 619, 0, 648, 676, 145, 696, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 670, 152, 153, 154, 155, 0, 671,
	156, 250, 157, 0, 158, 159, 160, 697, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 625, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 664, 183, 184,
	310, 185, 698, 255, 186, 0, 192, 187, 188, 189,
	191, 699, 190, 672, 0, 193, 0, 194, 195, 196,
	0, 258, 700, 701, 0, 0, 197, 673, 674, 646,
	198, 199, 2040, 201, 0, 0, 202, 203, 204, 665,
	205, 0, 206, 207, 208, 263, 702, 0, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 620, 0,
	651, 640, 641, 638, 639, 630, 0, 0, 0, 616,
	617, 0, 0, 0, 0, 618, 86, 87, 626, 88,
	0, 0, 0, 629, 667, 633, 0, 0, 0, 89,
	90, 91, 215, 682, 217, 683, 92, 684, 685, 0,
	93, 221, 222, 94, 636, 666, 686, 687, 225, 0,
	678, 0, 659, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 298, 102, 103, 0, 660, 662,
	0, 661, 663, 104, 105, 268, 106, 688, 107, 689,
	690, 0, 108, 0, 109, 0, 0, 0, 681, 111,
	0, 112, 0, 0, 0, 624, 113, 114, 668, 669,
	647, 0, 0, 115, 116, 691, 0, 117, 0, 118,
	0, 0, 299, 0, 119, 679, 0, 235, 0, 120,
	121, 122, 123, 675, 677, 301, 0, 127, 0, 124,
	0, 300, 125, 692, 126, 693, 694, 695, 0, 658,
	0, 302, 128, 303, 129, 130, 0, 132, 131, 0,
	680, 304, 133, 305, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 140, 244, 139, 306, 141, 142, 144,
	143, 619, 0, 648, 676, 145, 696, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 670, 152, 153, 154, 155, 0, 671, 156, 250,
	157, 0, 158, 159, 160, 697, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 625, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 664, 183, 184, 310, 185,
	698, 255, 186, 0, 192, 187, 188, 189, 191, 699,
	190, 672, 0, 193, 0, 194, 195, 196, 0, 258,
	700, 701, 0, 0, 197, 673, 674, 646, 198, 199,
	200, 201, 0, 0, 202, 203, 204, 665, 205, 0,
	206, 207, 208, 263, 702, 0, 0, 209, 0, 0,
	0, 0, 210, 211, 212, 213, 620, 0, 1257, 640,
	641, 638, 639, 630, 0, 0, 0, 616, 617, 0,
	0, 0, 0, 618, 86, 87, 626, 88, 0, 0,
	0, 629, 667, 633, 0, 0, 0, 89, 90, 91,
	215, 682, 217, 683, 92, 684, 685, 0, 93, 221,
	222, 94, 636, 666, 686, 687, 225, 0, 678, 0,
	659, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 298, 102, 103, 0, 660, 662, 0, 661,
	663, 104, 105, 268, 106, 688, 1260, 689, 690, 0,
	108, 0, 109, 0, 0, 0, 681, 111, 0, 112,
	0, 0, 0, 624, 113, 114, 668, 669, 647, 0,
	0, 115, 116, 691, 0, 117, 0, 118, 0, 0,
	299, 0, 119, 679, 0, 235, 0, 120, 121, 1261,
	123, 675, 677, 301, 0, 127, 0, 124, 0, 300,
	125, 692, 126, 693, 694, 695, 0, 658, 0, 302,
	128, 303, 129, 130, 0, 132, 131, 0, 680, 304,
	133, 305, 0, 134, 0, 0, 135, 0, 136, 1262,
	1259, 140, 244, 139, 306, 141, 142, 144, 143, 619,
	0, 648, 676, 145, 696, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 670,
	152, 153, 154, 155, 0, 671, 156, 250, 157, 0,
	158, 159, 160, 697, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 625, 176, 0, 177, 178, 179, 1263, 0,
	253, 181, 182, 664, 183, 184, 310, 185, 698, 255,
	186, 0, 192, 187, 188, 189, 191, 699, 190, 672,
	0, 193, 0, 194, 195, 196, 0, 258, 700, 701,
	0, 0, 197, 673, 674, 646, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 665, 205, 0, 206, 207,
	208, 263, 702, 0, 0, 209, 0, 0, 0, 0,
	210, 211, 1258, 213, 620, 0, 651, 640, 641, 638,
	639, 630, 0, 0, 0, 616, 617, 0, 0, 0,
	0, 618, 86, 87, 626, 88, 0, 0, 0, 629,
	667, 633, 0, 0, 0, 89, 90, 91, 215, 682,
	217, 683, 92, 684, 685, 0, 93, 221, 222, 94,
	636, 666, 686, 687, 225, 0, 678, 0, 659, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 660, 662, 0, 661, 663, 104,
	105, 268, 106, 688, 107, 689, 690, 0, 108, 0,
	109, 0, 0, 0, 681, 111, 0, 112, 0, 0,
	0, 624, 113, 114, 668, 669, 647, 0, 0, 115,
	116, 691, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 679, 0, 235, 0, 120, 121, 122, 123, 675,
	677, 301, 0, 127, 0, 124, 0, 300, 125, 692,
	126, 693, 694, 695, 0, 658, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 680, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	244, 139, 306, 141, 142, 144, 143, 0, 0, 648,
	676, 145, 696, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 670, 152, 153,
	154, 155, 0, 671, 156, 250, 157, 0, 158, 159,
	160, 697, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	1275, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 664, 183, 184, 310, 185, 698, 255, 186, 0,
	192, 187, 188, 189, 191, 699, 190, 672, 0, 193,
	0, 194, 195, 196, 0, 258, 700, 701, 0, 0,
	197, 673, 674, 646, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 665, 205, 0, 206, 207, 208, 263,
	702, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 0, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 0, 1271, 1272, 0, 0, 0, 0, 1273,
	86, 87, 1274, 88, 0, 0, 0, 629, 667, 633,
	0, 0, 0, 89, 90, 91, 0, 682, 217, 683,
	92, 684, 685, 0, 93, 221, 222, 94, 636, 666,
	686, 687, 225, 0, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	2041, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 688, 107, 689, 690, 0, 108, 0, 109, 0,
	0, 0, 681, 111, 0, 112, 0, 0, 0, 624,
	113, 114, 668, 669, 647, 0, 0, 115, 116, 691,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 0,
	0, 127, 0, 124, 0, 300, 125, 692, 126, 693,
	694, 695, 0, 658, 0, 0, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 0, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 244, 139,
	306, 141, 142, 144, 143, 619, 0, 648, 676, 145,
	696, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 697,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 625, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 0, 185, 698, 255, 186, 0, 192, 187,
	188, 189, 191, 699, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 700, 701, 0, 0, 197, 673,
	674, 646, 198, 199, 2040, 201, 0, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 702, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	0, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	0, 616, 617, 0, 0, 0, 0, 618, 86, 87,
	626, 88, 0, 0, 0, 629, 667, 633, 0, 0,
	0, 89, 90, 91, 215, 682, 217, 683, 92, 684,
	685, 0, 93, 221, 222, 94, 0, 666, 686, 687,
	225, 0, 678, 0, 659, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 103, 0,
	660, 662, 0, 661, 663, 104, 105, 268, 106, 688,
	107, 689, 690, 0, 108, 0, 109, 0, 0, 0,
	681, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	668, 669, 647, 0, 0, 115, 116, 691, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 679, 0, 235,
	0, 120, 121, 122, 123, 675, 677, 301, 0, 127,
	0, 124, 0, 300, 125, 692, 126, 693, 694, 695,
	0, 658, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 680, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 140, 244, 139, 306, 141,
	142, 144, 143, 0, 0, 648, 676, 145, 696, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 670, 152, 153, 154, 155, 0, 671,
	156, 250, 157, 0, 158, 159, 160, 697, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 1275, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 664, 183, 184,
	310, 185, 698, 255, 186, 0, 192, 187, 188, 189,
	191, 699, 190, 672, 0, 193, 0, 194, 195, 196,
	0, 258, 700, 701, 0, 0, 197, 673, 674, 646,
	198, 199, 200, 201, 651, 0, 202, 203, 204, 665,
	205, 0, 206, 207, 208, 263, 702, 0, 0, 209,
	86, 87, 0, 88, 210, 211, 212, 213, 667, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 1274, 666,
	223, 224, 225, 629, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 227, 107, 228, 229, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 668, 669, 0, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 301,
	0, 127, 0, 124, 0, 300, 125, 238, 126, 239,
	240, 241, 0, 242, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 244, 139,
	306, 141, 142, 144, 143, 0, 0, 0, 676, 145,
	246, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 251,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 252, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 310, 185, 254, 255, 186, 0, 192, 187,
	188, 189, 191, 256, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 259, 260, 0, 0, 197, 673,
	674, 0, 198, 199, 200, 201, 527, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 264, 0,
	0, 209, 86, 87, 0, 88, 210, 211, 212, 213,
	214, 0, 0, 0, 0, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 0, 93, 221, 222, 94,
	1542, 0, 223, 224, 225, 0, 226, 0, 297, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 0, 0, 0, 0, 0, 104,
	105, 268, 106, 227, 107, 228, 229, 0, 108, 0,
	109, 0, 0, 0, 110, 111, 0, 112, 0, 0,
	0, 230, 113, 114, 231, 232, 0, 0, 0, 115,
	116, 233, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 234, 0, 235, 0, 120, 121, 122, 123, 236,
	237, 301, 0, 127, 0, 124, 0, 300, 125, 238,
	126, 239, 240, 241, 0, 242, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 243, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 140,
	244, 139, 306, 141, 142, 144, 143, 0, 0, 0,
	245, 145, 246, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 248, 152, 153,
	154, 155, 0, 249, 156, 250, 157, 0, 158, 159,
	160, 251, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	252, 176, 0, 177, 178, 179, 180, 67, 253, 181,
	182, 0, 183, 184, 310, 185, 254, 255, 186, 0,
	192, 187, 188, 189, 191, 256, 190, 257, 0, 193,
	69, 194, 195, 196, 0, 258, 259, 260, 0, 0,
	197, 261, 262, 0, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 0, 205, 0, 206, 207, 208, 531,
	264, 0, 0, 209, 0, 0, 0, 65, 210, 211,
	212, 213, 0, 66, 527, 738, 0, 846, 843, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 64, 88, 0, 0, 0, 0, 214, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 0, 0,
	223, 224, 225, 0, 226, 0, 297, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 268,
	106, 227, 107, 228, 229, 849, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 231, 232, 840, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 234,
	0, 235, 0, 120, 121, 122, 123, 236, 237, 301,
	0, 127, 0, 124, 0, 300, 125, 238, 126, 239,
	240, 241, 0, 242, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 243, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 244, 139,
	306, 141, 142, 144, 143, 0, 0, 0, 245, 145,
	246, 146, 147, 0, 148, 841, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 248, 152, 153, 154, 155,
	0, 249, 156, 250, 157, 0, 158, 159, 160, 251,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 252, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 0,
	183, 184, 310, 185, 254, 255, 186, 0, 192, 187,
	188, 189, 191, 256, 190, 257, 0, 193, 0, 194,
	195, 196, 0, 258, 259, 260, 0, 0, 197, 261,
	262, 839, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 0, 205, 0, 206, 207, 208, 263, 264, 527,
	738, 209, 846, 843, 838, 0, 210, 211, 212, 213,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 847, 844, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 297, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 298, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	834, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 840,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 299, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 301, 0, 127, 0, 124, 0,
	300, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	302, 128, 303, 129, 130, 0, 132, 131, 0, 243,
	304, 133, 305, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 306, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	841, 0, 149, 0, 0, 150, 247, 307, 151, 308,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	309, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 310, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 839, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 527, 738, 209, 846, 843, 838,
	0, 210, 211, 212, 213, 0, 0, 0, 0, 0,
	86, 87, 0, 88, 0, 0, 847, 844, 214, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 0, 0,
	223, 224, 225, 0, 226, 0, 297, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 268,
	106, 227, 107, 228, 229, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 231, 232, 840, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 234,
	0, 235, 0, 120, 121, 122, 123, 236, 237, 301,
	0, 127, 0, 124, 0, 300, 125, 238, 126, 239,
	240, 241, 0, 242, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 243, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 140, 244, 139,
	306, 141, 142, 144, 143, 0, 0, 0, 245, 145,
	246, 146, 147, 0, 148, 841, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 248, 152, 153, 154, 155,
	0, 249, 156, 250, 157, 0, 158, 159, 160, 251,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 252, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 0,
	183, 184, 310, 185, 254, 255, 186, 0, 192, 187,
	188, 189, 191, 256, 190, 257, 0, 193, 0, 194,
	195, 196, 0, 258, 259, 260, 0, 0, 197, 261,
	262, 839, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 0, 205, 0, 206, 207, 208, 263, 264, 83,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	0, 0, 0, 0, 0, 86, 87, 0, 88, 0,
	0, 847, 844, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 481, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	67, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 69, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 531, 264, 0, 0, 209, 83, 0, 0,
	65, 210, 211, 212, 213, 0, 66, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 0,
	0, 214, 0, 1152, 0, 1157, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 67, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 69, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	531, 264, 0, 0, 209, 83, 0, 0, 65, 210,
	211, 212, 213, 0, 66, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 214,
	0, 0, 0, 64, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 481, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 83, 0, 0, 0, 210, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 214, 0, 1152,
	0, 1157, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 244, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	746, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 1065, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 1662, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 0, 0, 0,
	0, 210, 211, 212, 213, 651, 640, 641, 638, 639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 713, 0, 0, 0, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 682, 217,
	683, 92, 684, 685, 0, 93, 221, 222, 94, 0,
	0, 686, 687, 225, 0, 226, 0, 297, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 298,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 688, 107, 689, 690, 0, 108, 0, 109,
	0, 0, 0, 681, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 647, 0, 0, 115, 116,
	691, 0, 117, 0, 118, 0, 0, 299, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	301, 0, 127, 0, 124, 0, 300, 125, 692, 126,
	693, 694, 695, 0, 658, 0, 302, 128, 303, 129,
	130, 0, 132, 131, 0, 243, 304, 133, 305, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 306, 141, 142, 144, 143, 0, 0, 648, 245,
	145, 696, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	697, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 310, 185, 698, 255, 186, 0, 192,
	187, 188, 189, 191, 699, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 700, 701, 0, 0, 197,
	261, 262, 646, 198, 199, 200, 201, 527, 738, 202,
	203, 204, 736, 205, 0, 206, 207, 208, 263, 702,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 297,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 301, 0, 127, 0, 124, 0, 300, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 243, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 306, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 310, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 79, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 78, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 527, 738, 0,
	0, 210, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 82, 0,
	0, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 297,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 301, 0, 127, 0, 124, 0, 300, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 243, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 306, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 310, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 527, 209, 0, 0, 0,
	0, 210, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 82, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 297, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 298,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 299, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	301, 0, 127, 0, 124, 0, 300, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 302, 128, 303, 129,
	130, 0, 132, 131, 0, 243, 304, 133, 305, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 306, 141, 142, 144, 143, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 310, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 1026, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 1024, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 1128, 0,
	115, 116, 233, 0, 117, 0, 118, 1029, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 1126, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 1028, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	1127, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 1026, 226,
	0, 0, 1021, 95, 96, 97, 0, 98, 1024, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 1029,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 1020, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	1028, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 1027, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 1629, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 244, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 244, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 481, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 771, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 481, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 539, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 493, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 481, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 486, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 244, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 481, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 396, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 244, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 395, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	1321, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 1319, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 1308, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 244, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 887, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 244, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 410, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 756, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 0, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 591, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 586, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 244, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 545, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 244, 421, 0,
	141, 142, 144, 143, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 420, 259, 260, 0, 0, 416, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	421, 0, 141, 142, 144, 143, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 420, 259, 260, 0, 0, 416,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	523, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 520, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 139, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 517, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 244, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 515, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 140, 244, 139, 0,
	141, 142, 144, 143, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 489, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 140, 244,
	139, 0, 141, 142, 144, 143, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	140, 244, 139, 0, 141, 142, 144, 143, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 470, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 413, 0, 0, 135, 0, 136,
	137, 138, 140, 244, 421, 0, 141, 142, 144, 143,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 415, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 414, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 420, 259,
	260, 0, 0, 416, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 140, 244, 139, 0, 141, 142,
	144, 143, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 0, 155, 0, 249, 156,
	250, 157, 0, 158, 0, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 0, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 0, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 0,
	0, 0, 0, 210, 211, 212, 213, 911, 912, 0,
	931, 932, 933, 941, 942, 943, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	914, 0, 0, 945, 0, 0, 0, 911, 912, 0,
	931, 932, 933, 941, 942, 943, 0, 0, 0, 0,
	0, 0, 913, 934, 0, 0, 0, 0, 928, 0,
	914, 0, 0, 945, 0, 0, 0, 911, 912, 0,
	931, 932, 933, 941, 942, 943, 0, 0, 0, 0,
	0, 0, 913, 934, 0, 0, 0, 0, 928, 0,
	914, 0, 0, 945, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 913, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 938, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 938, 946, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 935, 938, 946, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 935, 0, 0, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 930, 911, 912,
	0, 931, 932, 933, 941, 942, 943, 0, 0, 939,
	0, 0, 0, 0, 934, 935, 0, 0, 0, 0,
	0, 914, 0, 0, 945, 0, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 913, 0, 0, 0, 0, 0, 928,
	0, 0, 0, 0, 0, 0, 0, 930, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 939,
	925, 926, 927, 0, 924, 921, 922, 923, 915, 916,
	917, 918, 920, 0, 940, 0, 0, 0, 0, 0,
	0, 1516, 0, 0, 0, 0, 0, 937, 919, 0,
	925, 926, 927, 0, 924, 921, 922, 923, 915, 916,
	917, 918, 920, 0, 940, 0, 0, 938, 946, 0,
	0, 1468, 0, 0, 0, 0, 0, 937, 0, 0,
	925, 926, 927, 944, 924, 921, 922, 923, 915, 916,
	917, 918, 920, 0, 940, 936, 0, 0, 1983, 0,
	0, 929, 0, 0, 0, 0, 0, 0, 0, 911,
	912, 0, 931, 932, 933, 941, 942, 943, 0, 0,
	0, 0, 0, 0, 0, 934, 935, 0, 0, 0,
	0, 0, 914, 0, 0, 945, 1476, 1477, 0, 1494,
	1495, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1807, 0, 913, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 911, 912, 930, 931,
	932, 933, 941, 942, 943, 0, 0, 0, 0, 0,
	939, 0, 934, 0, 0, 0, 0, 1491, 0, 914,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 913, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 938, 946,
	0, 0, 0, 0, 0, 0, 1482, 0, 937, 0,
	0, 925, 926, 927, 944, 924, 921, 922, 923, 915,
	916, 917, 918, 920, 0, 940, 936, 0, 0, 1981,
	0, 0, 929, 0, 0, 0, 919, 0, 0, 0,
	0, 1497, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 946, 935, 0, 1492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 944, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 936, 0, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 911, 912, 930,
	931, 932, 933, 941, 942, 943, 0, 0, 0, 0,
	0, 939, 0, 934, 935, 0, 0, 0, 0, 0,
	914, 0, 0, 945, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 913, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 937,
	0, 0, 925, 926, 927, 0, 924, 921, 922, 923,
	915, 916, 917, 918, 920, 0, 940, 0, 0, 0,
	1928, 0, 0, 0, 0, 0, 0, 919, 0, 1488,
	1489, 1490, 0, 1487, 1484, 1485, 1486, 1478, 1479, 1480,
	1481, 1483, 0, 0, 0, 0, 938, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 925,
	926, 927, 944, 924, 921, 922, 923, 915, 916, 917,
	918, 920, 0, 940, 936, 0, 0, 1923, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 911, 912,
	0, 931, 932, 933, 941, 942, 943, 0, 0, 0,
	0, 0, 0, 0, 934, 935, 0, 0, 0, 0,
	0, 914, 0, 0, 945, 1476, 1477, 0, 1494, 1495,
	1496, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1642, 0, 913, 0, 0, 0, 0, 0, 928,
	0, 0, 0, 0, 0, 911, 912, 930, 931, 932,
	933, 941, 942, 943, 0, 0, 0, 0, 0, 939,
	0, 934, 0, 0, 0, 0, 1491, 0, 914, 0,
	0, 945, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	913, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 938, 946, 0,
	0, 0, 0, 0, 0, 1482, 0, 937, 0, 0,
	925, 926, 927, 944, 924, 921, 922, 923, 915, 916,
	917, 918, 920, 0, 940, 936, 0, 0, 1919, 0,
	0, 929, 0, 0, 0, 919, 0, 0, 0, 0,
	1497, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 938, 946, 935, 0, 1492, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 0, 0, 911, 912, 930, 931,
	932, 933, 941, 942, 943, 0, 0, 0, 0, 0,
	939, 0, 934, 935, 0, 0, 0, 0, 0, 914,
	0, 0, 945, 0, 0, 1493, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 913, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 939, 937, 0,
	0, 925, 926, 927, 0, 924, 921, 922, 923, 915,
	916, 917, 918, 920, 0, 940, 0, 0, 0, 1861,
	0, 0, 0, 0, 0, 0, 919, 0, 1488, 1489,
	1490, 0, 1487, 1484, 1485, 1486, 1478, 1479, 1480, 1481,
	1483, 0, 0, 0, 0, 938, 946, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 925, 926,
	927, 944, 924, 921, 922, 923, 915, 916, 917, 918,
	920, 0, 940, 936, 0, 0, 1839, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 911, 912, 0,
	931, 932, 933, 941, 942, 943, 0, 0, 0, 0,
	0, 0, 0, 934, 935, 0, 0, 0, 0, 0,
	914, 0, 0, 945, 1476, 1477, 0, 1494, 1495, 1496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1641, 0, 913, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 911, 912, 930, 931, 932, 933,
	941, 942, 943, 0, 0, 0, 0, 0, 939, 0,
	934, 0, 0, 0, 0, 1491, 0, 914, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 0, 913,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 946, 0, 0,
	0, 0, 0, 0, 1482, 0, 937, 0, 0, 925,
	926, 927, 944, 924, 921, 922, 923, 915, 916, 917,
	918, 920, 0, 940, 936, 0, 0, 1838, 0, 0,
	929, 0, 0, 0, 919, 0, 0, 0, 0, 1497,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 938, 946, 935, 0, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 944,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 929, 0, 0,
	0, 0, 0, 0, 0, 911, 912, 930, 931, 932,
	933, 941, 942, 943, 0, 0, 0, 0, 0, 939,
	0, 934, 935, 0, 0, 0, 0, 0, 914, 0,
	0, 945, 0, 0, 1493, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	913, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 937, 0, 0,
	925, 926, 927, 0, 924, 921, 922, 923, 915, 916,
	917, 918, 920, 0, 940, 0, 0, 0, 1731, 0,
	0, 0, 0, 0, 0, 919, 0, 1488, 1489, 1490,
	0, 1487, 1484, 1485, 1486, 1478, 1479, 1480, 1481, 1483,
	0, 0, 0, 0, 938, 946, 0, 0, 0, 0,
	0, 0, 0, 0, 937, 0, 0, 925, 926, 927,
	944, 924, 921, 922, 923, 915, 916, 917, 918, 920,
	0, 940, 936, 0, 0, 1665, 0, 0, 929, 0,
	0, 0, 0, 0, 0, 0, 911, 912, 0, 931,
	932, 933, 941, 942, 943, 0, 0, 0, 0, 0,
	0, 0, 934, 935, 0, 0, 0, 0, 0, 914,
	0, 0, 945, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 913, 0, 0, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 911, 912, 930, 931, 932, 933, 941,
	942, 943, 0, 0, 0, 0, 0, 939, 0, 934,
	0, 0, 0, 0, 0, 0, 914, 0, 0, 945,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 913, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 946, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 925, 926,
	927, 944, 924, 921, 922, 923, 915, 916, 917, 918,
	920, 0, 940, 936, 0, 0, 1649, 0, 0, 929,
	0, 0, 0, 919, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 946, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 944, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 0, 0, 0, 911, 912, 930, 931, 932, 933,
	941, 942, 943, 0, 0, 0, 0, 0, 939, 0,
	934, 935, 0, 0, 0, 0, 0, 914, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 913,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 0,
	0, 0, 0, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 939, 937, 0, 0, 925,
	926, 927, 0, 924, 921, 922, 923, 915, 916, 917,
	918, 920, 0, 940, 0, 0, 0, 1229, 0, 0,
	0, 0, 0, 0, 919, 2062, 0, 0, 0, 911,
	912, 0, 931, 932, 933, 941, 942, 943, 0, 0,
	0, 0, 0, 938, 946, 934, 0, 0, 0, 0,
	0, 0, 914, 937, 0, 945, 925, 926, 927, 944,
	924, 921, 922, 923, 915, 916, 917, 918, 920, 0,
	940, 936, 1443, 0, 913, 0, 0, 929, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2061, 0, 0, 0,
	911, 912, 0, 931, 932, 933, 941, 942, 943, 919,
	0, 1508, 0, 0, 1507, 0, 934, 0, 0, 0,
	0, 1144, 0, 914, 930, 0, 945, 0, 938, 946,
	0, 0, 0, 0, 0, 0, 939, 0, 0, 0,
	0, 0, 0, 0, 944, 913, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1145,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 937, 0, 0, 925, 926, 927,
	919, 924, 921, 922, 923, 915, 916, 917, 918, 920,
	0, 940, 0, 0, 0, 0, 0, 0, 0, 938,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 0, 0, 0, 944, 0, 0, 0, 0,
	0, 939, 0, 0, 0, 0, 0, 936, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 925, 926, 927, 0, 924, 921, 922, 923,
	915, 916, 917, 918, 920, 949, 940, 0, 0, 0,
	930, 911, 912, 0, 931, 932, 933, 941, 942, 943,
	0, 0, 939, 0, 0, 0, 0, 934, 0, 0,
	0, 948, 0, 0, 914, 0, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 913, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 925, 926, 927, 0, 924, 921, 922,
	923, 915, 916, 917, 918, 920, 0, 940, 0, 911,
	912, 0, 931, 932, 933, 941, 942, 943, 0, 0,
	0, 919, 0, 0, 0, 934, 0, 0, 0, 0,
	0, 0, 914, 0, 0, 945, 0, 0, 0, 0,
	938, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 913, 0, 944, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 919,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 938, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 930, 0, 0, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 939, 0, 0, 936, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 465, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 925, 926, 927, 0, 924, 921,
	922, 923, 915, 916, 917, 918, 920, 0, 940, 930,
	911, 912, 0, 931, 932, 933, 941, 942, 943, 0,
	0, 939, 0, 0, 0, 0, 934, 0, 0, 0,
	0, 0, 0, 914, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 913, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 925, 926, 927, 0, 924, 921, 922, 923,
	915, 916, 917, 918, 920, 0, 940, 0, 911, 912,
	0, 931, 932, 933, 941, 942, 943, 0, 0, 0,
	919, 0, 0, 0, 934, 0, 0, 0, 0, 0,
	0, 914, 0, 0, 945, 0, 0, 0, 0, 938,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 913, 0, 944, 0, 0, 0, 928,
	0, 0, 0, 0, 0, 0, 0, 936, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 919, 0,
	0, 0, 0, 1514, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 938, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	930, 0, 0, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 0, 0, 936, 0, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1653, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 925, 926, 927, 0, 924, 921, 922,
	923, 915, 916, 917, 918, 920, 0, 940, 930, 911,
	912, 0, 931, 932, 933, 941, 942, 943, 0, 0,
	939, 0, 0, 0, 0, 934, 0, 0, 0, 1509,
	0, 0, 914, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 913, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 925, 926, 927, 0, 924, 921, 922, 923, 915,
	916, 917, 918, 920, 0, 940, 0, 911, 912, 0,
	931, 932, 933, 941, 942, 943, 0, 0, 0, 919,
	0, 0, 0, 934, 0, 0, 0, 0, 0, 0,
	914, 0, 0, 945, 0, 0, 0, 0, 938, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 913, 0, 944, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 930,
	0, 0, 944, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 0, 0, 936, 0, 0, 0, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 935, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1474, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 925, 926, 927, 0, 924, 921, 922, 923,
	915, 916, 917, 918, 920, 0, 940, 930, 911, 912,
	0, 931, 932, 933, 941, 942, 943, 0, 0, 939,
	0, 0, 0, 0, 934, 0, 0, 0, 1467, 0,
	0, 914, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 0, 928,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	925, 926, 927, 0, 924, 921, 922, 923, 915, 916,
	917, 918, 920, 0, 940, 0, 911, 912, 0, 931,
	932, 933, 941, 942, 943, 0, 0, 0, 919, 0,
	0, 0, 934, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 945, 0, 0, 0, 0, 938, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 913, 0, 944, 0, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 919, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 938, 946, 0, 911, 912,
	0, 931, 932, 933, 941, 942, 943, 0, 930, 0,
	0, 944, 0, 0, 934, 0, 0, 0, 0, 0,
	939, 914, 0, 936, 945, 0, 0, 0, 0, 929,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 0, 928,
	0, 0, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 925, 926, 927, 0, 924, 921, 922, 923, 915,
	916, 917, 918, 920, 0, 940, 930, 0, 919, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 939, 0,
	0, 0, 0, 0, 0, 0, 0, 938, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 944, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 0, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 925,
	926, 927, 0, 924, 921, 922, 923, 915, 916, 917,
	918, 920, 0, 940, 0, 0, 0, 911, 912, 0,
	931, 932, 933, 941, 942, 943, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	914, 0, 0, 945, 0, 0, 0, 0, 930, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 0, 913, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 919, 937, 0,
	0, 925, 926, 927, 0, 924, 921, 922, 923, 915,
	916, 917, 918, 920, 0, 940, 938, 946, 0, 0,
	0, 0, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 944, 29, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 936, 0, 0, 0, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 0, 0, 0, 31, 0, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 39, 0, 0, 56, 0, 0, 0, 43,
	40, 0, 0, 0, 0, 797, 789, 814, 782, 805,
	804, 0, 0, 784, 783, 0, 45, 930, 816, 815,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 939,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 810,
	0, 802, 801, 0, 0, 0, 0, 0, 0, 0,
	800, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 799, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	925, 926, 927, 0, 924, 921, 922, 923, 915, 916,
	917, 918, 920, 42, 940, 792, 791, 793, 794, 795,
	0, 813, 0, 0, 0, 0, 0, 0, 0, 58,
	30, 0, 0, 46, 0, 57, 0, 0, 0, 0,
	0, 47, 0, 0, 67, 0, 786, 0, 0, 50,
	52, 0, 0, 0, 0, 0, 0, 0, 803, 54,
	0, 0, 790, 0, 0, 0, 0, 69, 0, 797,
	789, 814, 782, 805, 804, 0, 0, 784, 783, 0,
	0, 59, 816, 815, 0, 0, 0, 798, 0, 0,
	0, 1163, 1161, 1162, 1165, 1164, 70, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	66, 0, 0, 810, 787, 802, 801, 0, 0, 0,
	0, 0, 796, 788, 800, 0, 0, 0, 0, 64,
	0, 818, 0, 0, 0, 0, 0, 0, 0, 785,
	0, 799, 811, 812, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 817, 0, 0, 792,
	791, 793, 794, 795, 0, 813, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	786, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 803, 0, 0, 0, 790, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 787, 0,
	0, 0, 0, 0, 0, 0, 796, 788, 0, 0,
	0, 0, 0, 0, 0, 818, 0, 0, 0, 0,
	0, 0, 0, 785, 0, 0, 811, 812, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	817,
}
var sqlPact = [...]int{

	27829, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 685, 15485,
	15485, 19051, -1000, -1000, -1000, -1000, -1000, -1000, 673, 675,
	226, 4907, 19051, 19051, 18779, 920, 920, 20411, -1000, -1000,
	23675, -1000, 3213, 537, 540, 537, 537, 538, 20411, 647,
	763, 137, -1000, 731, -6, 23403, 19051, 1376, 40, 17419,
	330, 27829, 18507, 23131, 19051, 18235, 606, 38, 16045, 19051,
	-1000, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1221, 343, 44, -1000, 1219,
	1104, 1099, 17419, 22859, 22587, 22315, 22043, -1000, 11812, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	789, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 340, 339, -1000, 17963, -1000, 932, -1000, 39,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 931, -1000,
	19051, -1000, -1000, 21771, 21499, 338, 904, -1000, -1000, 579,
	429, 1387, -1000, 49, -1000, -1000, -1000, 1217, -1000, 928,
	1216, 1213, 1212, 1210, 1209, 1208, 422, 863, 494, -1000,
	904, -1000, 904, -1000, -1000, -1000, 600, 20411, -1000, 17419,
	-1000, 21227, 19051, 19051, 1138, 20955, -1000, 731, -1000, -1000,
	-1000, 994, 1373, 1373, 1373, 1403, 169, 160, 137, 30,
	19051, -1000, 333, 30, 8881, 8881, -1000, -1000, 330, -1000,
	329, 14645, -1000, 7963, -1000, 908, 1278, 435, 709, 1275,
	-128, 778, 768, 1274, 15213, 16045, 38, 37, -1000, -1000,
	-1000, 4611, 15213, 674, 13829, 44, -1000, -1000, -1000, 17419,
	19051, 19051, 694, 20683, -1000, 1273, 131, 1265, -1000, 123,
	1263, -1000, 123, 1262, 27, -1000, -1000, -1000, -1000, -1000,
	-1000, 330, 17691, 19051, 1480, 28052, -1000, 10076, -1000, -1000,
	15485, 1463, 15485, -1000, -1000, 1479, -1000, 10076, -1000, 35,
	34, 1070, 1111, 12395, 12110, 1333, 703, -1000, -1000, -1000,
	46, 4907, 19051, 1229, 15485, 19051, 19051, 19051, 19051, 19051,
	19051, -1000, 1067, -1000, -1000, 19051, 19051, -1000, 33, 32,
	-1000, 20411, -1000, 138, -1000, 327, 1031, 437, 171, 20139,
	437, 1030, -1000, 994, -1000, 935, 1059, 9182, 10076, 137,
	-1000, -1000, 137, 137, 10076, -1000, -1000, 19051, 30, 1474,
	19051, 94, -1000, 26391, -1000, -1000, 10076, 10076, 10076, 10076,
	10076, 871, 361, -1000, 325, 324, 5826, -1000, -1000, 1594,
	-1000, -1000, -1000, 168, -1000, -1000, 10076, 44, -1000, -1000,
	-1000, -1000, 323, 1623, -1000, 439, -1000, -1000, -1000, 433,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1227,
	311, 309, -1000, -1000, -1000, -1000, 308, 307, 305, 304,
	301, 298, 297, 294, 293, 292, 290, 289, 284, 282,
	280, 827, -1000, 454, -1000, -1000, 454, 454, -1000, 276,
	276, 277, -1000, -1000, -1000, -1000, 276, -1000, -1000, -1000,
	415, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 278, 94,
	-1000, -1000, -1000, 19051, 23, -1000, 27406, -1000, -3, 806,
	-1000, 16875, 1381, 1352, 1349, 17419, 1424, 1418, 595, 19051,
	19051, 590, 588, 17419, 401, -1000, -1000, -1000, -1000, -1000,
	19051, -1000, -1000, -32, -1000, -1000, 1207, 19, -1000, -1000,
	444, 83, 1466, 83, 14101, -1000, 19051, 19051, -1000, 19051,
	-1000, -1000, 19051, -1000, 19051, 19051, -1000, 19051, 139, 16331,
	810, 1261, 676, -6, 14, -1000, 1482, -1000, -1000, -1000,
	-1000, 118, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 277,
	827, 276, 276, 276, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 415, -1000, -1000, 454, 454, 454, -1000, -1000, 13,
	27406, 586, -1000, 1206, 531, 7, 797, 1096, 963, -1000,
	-1000, -1000, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1581, -1000, -1000, 1593, 26, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1614, 4907,
	-1000, -1000, -1000, 19051, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 797, 1096, -1000, -1000, 17419, 16603,
	1458, 1260, 849, -1000, 1446, 19051, 921, 1029, -1000, 640,
	1259, -1000, -1000, -1000, -1000, 27406, -1000, 27406, 755, 1125,
	-1000, 1125, 18, -1000, 26170, -1000, 275, 5, 444, 8881,
	13541, 27898, 28052, 19051, 638, 10076, 10076, 10076, 10076, 10076,
	10076, 10076, 10076, 10076, 10076, 10076, 10076, 10076, 10076, 10076,
	10076, 10076, 10076, 10076, 10076, 10076, 10076, 934, 10076, 583,
	10076, 10076, 10076, 10076, 1069, 880, 254, 950, 4907, -1000,
	-1000, 689, 689, 689, 27717, 27717, 255, 361, -1000, 10076,
	-1000, 8559, 160, 25756, 12, -1000, -1000, -1000, 6720, 448,
	27406, 44, 5504, -1000, 1587, 637, 1236, 1168, 272, 159,
	158, 10076, 10076, 10374, 10374, 10076, 10672, 10076, 10076, 6124,
	10076, 10076, 10076, 10076, 10076, 10076, -1000, 271, -1000, -1000,
	-1000, -1000, 1585, -1000, -1000, 1584, -1000, 631, 630, 1571,
	444, 148, 7963, -1000, 810, 19051, 19051, 19051, -1000, -1000,
	1028, 19867, 1006, 28052, 19051, -1000, 266, 265, 1086, 1084,
	19051, 19051, 19595, 19323, 19051, 885, -6, -6, 19051, 761,
	-1000, 19051, 19051, 751, 1149, 939, -1000, 440, 15213, 668,
	1205, 19051, 744, 10076, 815, -1000, 13253, 460, 19051, 744,
	67, -1000, -1000, -1000, 397, 19051, -1000, -1000, -1000, 131,
	-1000, 123, 123, -1000, -1000, 17419, -1000, -1000, -1000, -1000,
	-1000, -1000, 28052, 358, 344, -1000, 1567, 581, -1000, 573,
	570, 569, -1000, 264, -1000, 10076, 19051, 19051, 1096, -1000,
	-1000, -1000, -1000, 717, -1000, 765, -1000, 12680, -1000, -1000,
	-1000, -1000, -13, -1000, -1000, -1000, -1000, 147, 1, 6,
	28052, -1000, -1000, -1000, -1000, -1000, 19051, 328, 19051, -6,
	19051, -1000, 1613, -6, 19051, 1258, 1286, 393, 19051, -1000,
	-1000, -1000, 10076, -1000, -1000, -1000, -6, -1000, 1157, -1000,
	-36, 1117, 1338, -145, 157, 403, -1000, 12965, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 421, 410,
	410, 550, 550, 550, 550, 322, 322, 236, 483, 3491,
	3491, 3491, 2654, 161, 161, 3491, 3491, 3491, 27717, 27528,
	2529, 10076, 10076, 562, 878, 254, 2529, 10076, 1530, 2529,
	2529, 2529, -1000, 1199, -1000, -1000, -1000, -1000, 1204, 253,
	10672, 10672, -1000, -1000, -1000, 5826, 11268, -1000, -1000, -1000,
	-1000, -1000, 252, 10076, -1000, 25813, -164, -4, -1000, -1000,
	10076, -96, -121, -1000, -1000, 645, -1000, 10076, -1000, -14,
	10076, 10076, 10076, 142, 130, -1000, 865, 244, 239, 10076,
	-1000, -1000, 27318, 24267, 128, 1203, -90, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 125, 121, 27097, -90, 120, 2094,
	-1000, 10672, 10672, 10672, 5826, 225, 116, 26079, -90, 27009,
	8261, 8261, 8261, 115, 26788, 10076, -90, 24237, 3449, 3393,
	-8, -9, -15, 1559, -21, 114, 419, 416, 112, 1157,
	-1000, -1000, -1000, -1000, 558, 557, 1254, -1000, 1005, -1000,
	469, -1000, 822, 10076, 11540, 222, 219, 875, -1000, 1253,
	924, 1252, 924, -1000, -3, 780, -1000, -1000, -1000, 556,
	-1000, -1000, 548, 440, 1195, 652, -1000, 887, -1000, -1000,
	665, -1000, -1000, 6422, 27406, -1000, 744, 1351, -22, -1000,
	-1000, -1000, 444, 14101, 13541, 7963, -23, -1000, -1000, -1000,
	810, -1000, 482, 1545, 109, 1046, 839, 785, 707, 1543,
	27406, -13, -13, -1000, -1000, -1000, -1000, -1000, 19051, 1140,
	-1000, 16603, 217, 19051, 215, -1000, 212, -1000, -1000, 211,
	19051, 1073, 393, 15773, -1000, 437, -1000, 108, 1154, 1401,
	-1000, 13541, 1092, 1090, 13541, 1131, 876, 876, 876, -1000,
	210, 144, 403, 4005, 10076, 17147, 877, 68, 107, 1117,
	10076, 2529, 2529, 10076, 10672, 10672, -1000, 2529, -1000, -1000,
	-1000, -1000, -1000, 1194, 208, 10076, 28052, 25404, 25025, -27,
	-1000, 7641, -17, -1000, 10076, -1000, 25595, -1000, -1000, 238,
	1282, -1000, 10076, 26700, 106, 7343, -1000, 26479, -16, -16,
	-1000, 1604, -1000, 14373, 445, 882, 25434, 27898, 28052, -1000,
	10076, -1000, -1000, 1192, 10076, -1000, 27898, 28052, 10672, 10672,
	10672, 10672, 10672, 10672, 10672, 10672, 10672, 10672, 10672, 10672,
	10672, 10672, 10672, 10672, 10672, 10672, 10672, 1043, 10672, 1526,
	1526, 1526, -19, 7021, -1000, 1181, 1192, 10076, 10076, 28052,
	104, 102, 92, -1000, 10076, -90, 10076, 10076, 10076, -1000,
	-1000, -1000, 91, -1000, 1540, -1000, -1000, -1000, -1000, 1154,
	19051, 19051, 19051, 1251, -1000, 1512, -1000, 25377, -34, -1000,
	318, 1369, 10076, -1000, -1000, 206, 11540, 19051, -1000, 1078,
	1076, 514, 19051, -1000, 19051, -1000, 19051, 19051, 19051, 19051,
	19051, -1000, 15213, 619, 204, -1000, -38, -1000, -1000, 237,
	-6, 744, -1000, -44, -1000, 396, -1000, 356, 355, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 89, -1000, -1000,
	1144, -1000, 11540, 203, 19051, 16603, 1443, 11540, 907, 1079,
	393, 15773, -1000, 640, -1000, 442, 10076, 10076, 1117, 13541,
	13541, 977, 1080, 13541, -1000, -1000, -1000, -1000, 354, 360,
	352, 11812, 17147, -1000, 1535, 1095, -39, -1000, -1000, 19051,
	202, -1000, 403, 596, 2529, 24646, 3521, 10076, 28052, 3552,
	-56, 10076, 10076, -1000, -60, -1000, 10076, 351, 27406, -1000,
	-1000, -1000, 27406, 10076, 1599, 10076, 88, 86, 84, -1000,
	-1000, -1000, 23947, 10076, 80, -1000, 79, 77, 27406, 1181,
	27406, -1000, -1000, 577, 577, 1526, 1526, 1526, 1526, 830,
	830, 1001, 775, 2822, 2822, 2822, 2869, 377, 377, 2822,
	2822, 2822, 1191, 1032, 199, 3675, 10076, -61, -1000, -1000,
	-1000, 27406, 27406, 73, -1000, -1000, -1000, -90, 3065, 25216,
	25055, -1000, 72, 442, -1000, -1000, -1000, 19051, -1000, 19051,
	-1000, 19051, 19051, 1178, 980, -1000, -1000, 1081, 198, 10672,
	19051, -1000, 851, 11540, 1365, 44, 19051, 1365, 24998, 5504,
	-65, -66, 974, -1000, 953, 10076, -1000, 28052, 924, 924,
	-1000, 545, 544, -1000, -1000, -46, 14941, 1602, 1292, 19051,
	1341, -1000, -1000, 197, -1000, -1000, -1000, 858, -67, 11540,
	-71, 71, -6, -73, 19051, -1000, 393, 15773, -1000, 1286,
	-1000, 19051, 27406, -90, -1000, 977, -1000, 189, 10076, 13541,
	-1000, -145, -1000, -80, -1000, 403, -82, -1000, 350, -161,
	-1000, 391, -1000, 403, 188, 19051, 17147, 10076, 10076, 3552,
	-86, -1000, 2529, 2529, -1000, 24837, -1000, 27406, -1000, 26479,
	-1000, -1000, -1000, 853, -1000, 24676, -1000, -1000, -1000, -1000,
	10672, 1189, 187, 28052, 24619, -1000, -1000, 10076, -1000, -1000,
	-1000, -1000, -1000, 944, -1000, -1000, 19051, 997, -1000, -1000,
	10076, 3675, 186, 1140, 184, -1000, -1000, -1000, -1000, -1000,
	-1000, 1369, -14, -1000, 814, -1000, -1000, 27406, 1366, -1000,
	-1000, 19051, 19051, -1000, 180, 44, -88, -1000, 381, 598,
	-94, 19051, -1000, -1000, 5203, 19051, 851, -100, -1000, 1140,
	-1000, 851, 178, 15773, -1000, 1073, -52, -1000, 1438, -1000,
	19051, 27406, -1000, 403, -1000, 1522, 17147, 139, -1000, 1095,
	-1000, 4312, 17147, 19051, -102, -1000, 2529, 2529, -1000, -1000,
	69, 882, 1396, -1000, 3614, 10672, 28052, -119, -1000, 24458,
	-1000, -1000, 1249, 24297, 1052, 19051, -1000, 19051, 1365, 62,
	19051, 473, 19051, -1000, -1000, 10076, 1602, -1000, -1000, 1600,
	688, -1000, 444, -1000, 177, 1140, 851, -1000, 1140, 11540,
	-1000, 1079, 19051, 172, -125, 17147, -1000, -1000, 346, -1000,
	-1000, 1520, -1000, -129, -1000, -1000, 791, 10076, 3614, -131,
	-1000, -1000, 1239, -1000, 892, 864, 60, -133, -1000, -1000,
	171, -1000, 10076, -1000, -16, -1000, -1000, 14101, -1000, 19051,
	-1000, 1140, -1000, -135, -1000, -1000, -1000, -1000, -1000, 403,
	342, -1000, 55, 9778, 9778, -90, -1000, 19051, -1000, 895,
	893, 683, -1000, -1000, -1000, -1000, -1000, 1052, 27406, 54,
	-109, -147, -1000, 851, 17147, -1000, -1000, -1000, -1000, 10970,
	951, 716, 25974, -1000, -1000, -1000, 1297, -1000, 488, 1023,
	1023, 892, 1599, -1000, 901, 1140, -1000, 1495, -1000, -1000,
	-1000, -1000, -1000, -1000, 1505, -1000, -1000, 1063, -1000, -1000,
	-1000, -1000, -1000, -1000, 9480, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1866, 1865, 1390, 1583, 1862, 1858, 1572, 1856, 1853,
	1852, 1849, 1848, 1844, 115, 1534, 1518, 63, 1513, 1843,
	112, 1842, 1841, 1839, 109, 1838, 1834, 1833, 64, 1832,
	1831, 1436, 1434, 1830, 1824, 107, 1820, 13, 1817, 94,
	1813, 25, 169, 2116, 146, 1812, 1808, 1805, 26, 113,
	89, 1803, 96, 1802, 1799, 50, 29, 21, 16, 1798,
	123, 127, 915, 38, 1796, 1791, 151, 1787, 23, 35,
	144, 161, 156, 138, 133, 1786, 1781, 1777, 1776, 61,
	1774, 3, 1773, 1772, 12, 78, 57, 1767, 15, 55,
	1766, 1765, 141, 1763, 98, 118, 1400, 47, 129, 296,
	1762, 102, 10, 88, 1759, 1753, 140, 52, 1752, 46,
	93, 150, 1751, 54, 158, 86, 41, 84, 119, 1750,
	1749, 1748, 106, 1747, 120, 92, 1746, 1745, 97, 1744,
	145, 147, 1743, 1741, 134, 1740, 1739, 1736, 165, 1734,
	1733, 160, 1730, 11, 53, 85, 17, 1418, 1407, 121,
	83, 33, 19, 1729, 1501, 876, 853, 40, 100, 69,
	58, 105, 68, 72, 149, 37, 1727, 1726, 124, 1725,
	1721, 1719, 1716, 1714, 99, 1713, 1712, 87, 148, 14,
	8, 18, 114, 49, 28, 103, 131, 157, 126, 1710,
	104, 132, 62, 225, 1709, 1708, 1593, 128, 1707, 1706,
	1704, 1587, 1471, 1179, 382, 1700, 1699, 1150, 386, 1697,
	1696, 77, 1695, 139, 1692, 1691, 154, 213, 27, 1690,
	60, 130, 111, 1688, 125, 71, 0, 2039, 1333, 1685,
	137, 95, 1679, 1677, 1674, 1671, 36, 4, 9, 5,
	6, 2, 34, 22, 1669, 1668, 143, 81, 91, 1667,
	159, 1666, 1665, 1664, 56, 1662, 24, 1661, 20, 1660,
	1659, 7, 1, 1658, 1653, 152, 1652, 117, 1648, 1455,
	1643, 155, 1636, 1633, 1568, 39, 101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 50, 50, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 47, 47,
	52, 52, 52, 54, 54, 51, 51, 46, 46, 5,
	5, 224, 224, 225, 225, 36, 36, 40, 40, 37,
	38, 38, 39, 39, 6, 6, 6, 7, 7, 7,
	7, 7, 7, 14, 15, 15, 15, 15, 15, 15,
	15, 15, 98, 98, 97, 97, 100, 100, 16, 16,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 192, 192, 191, 19, 166, 166, 20, 20, 20,
	20, 21, 123, 123, 22, 22, 22, 22, 23, 27,
	265, 265, 265, 269, 269, 270, 270, 271, 271, 271,
	271, 271, 271, 271, 267, 267, 30, 30, 30, 30,
	30, 142, 138, 138, 140, 140, 140, 140, 61, 137,
	137, 137, 137, 139, 139, 139, 139, 217, 216, 216,
	222, 222, 222, 76, 76, 76, 76, 76, 77, 77,
	77, 215, 215, 215, 215, 223, 223, 223, 223, 223,
	223, 78, 78, 78, 221, 221, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 18, 266, 266, 268,
	268, 32, 32, 10, 10, 11, 11, 79, 79, 80,
	80, 145, 145, 145, 145, 81, 81, 53, 53, 53,
	144, 234, 234, 235, 235, 235, 235, 235, 235, 236,
	236, 236, 236, 236, 236, 236, 232, 232, 233, 230,
	230, 231, 231, 231, 231, 272, 272, 143, 143, 84,
	84, 239, 239, 239, 239, 237, 237, 237, 237, 237,
	240, 238, 241, 241, 241, 241, 241, 178, 178, 178,
	34, 12, 59, 59, 13, 9, 9, 127, 127, 88,
	88, 183, 183, 183, 69, 69, 48, 48, 48, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	128, 128, 129, 129, 25, 29, 33, 33, 33, 33,
	33, 274, 274, 65, 65, 65, 65, 66, 66, 141,
	141, 141, 141, 141, 60, 8, 8, 55, 55, 56,
	56, 57, 57, 58, 58, 275, 275, 24, 24, 24,
	72, 72, 134, 134, 134, 136, 136, 135, 135, 135,
	113, 113, 113, 35, 93, 93, 102, 102, 103, 103,
	189, 104, 104, 28, 28, 43, 43, 41, 41, 41,
	41, 41, 41, 42, 42, 44, 44, 44, 44, 44,
	44, 44, 247, 247, 247, 250, 250, 246, 248, 248,
	249, 249, 273, 273, 114, 114, 114, 83, 82, 82,
	86, 86, 85, 87, 87, 182, 111, 111, 111, 111,
	130, 131, 131, 132, 132, 133, 133, 110, 110, 162,
	162, 45, 45, 92, 92, 94, 94, 152, 152, 152,
	153, 153, 151, 151, 151, 151, 184, 184, 184, 184,
	184, 184, 184, 184, 263, 263, 263, 264, 264, 181,
	181, 185, 185, 185, 185, 185, 185, 179, 179, 179,
	179, 180, 180, 190, 190, 117, 117, 117, 117, 115,
	115, 116, 116, 186, 186, 186, 186, 112, 112, 187,
	187, 187, 146, 146, 193, 193, 193, 211, 211, 91,
	91, 91, 194, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 195, 195,
	195, 195, 197, 197, 197, 196, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 210,
	210, 210, 210, 210, 198, 198, 205, 205, 206, 206,
	207, 208, 199, 199, 200, 200, 201, 202, 209, 209,
	209, 209, 213, 213, 203, 203, 203, 203, 203, 204,
	124, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 125, 125, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 156, 156,
	156, 156, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 242, 242, 242, 242, 242, 242, 242,
	244, 244, 245, 245, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 251, 251, 252, 252, 254, 254, 255, 255, 256,
	257, 257, 257, 258, 259, 259, 253, 253, 260, 260,
	260, 261, 261, 262, 262, 262, 262, 262, 168, 168,
	168, 169, 169, 170, 176, 176, 176, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 67, 67, 67, 67, 67, 99, 99,
	165, 165, 163, 163, 163, 167, 167, 118, 118, 212,
	212, 212, 212, 212, 212, 212, 119, 119, 119, 126,
	120, 120, 121, 121, 121, 121, 121, 121, 159, 160,
	122, 122, 122, 161, 161, 171, 175, 175, 174, 173,
	173, 172, 172, 149, 149, 150, 150, 148, 147, 107,
	107, 106, 106, 105, 105, 276, 276, 177, 177, 108,
	108, 109, 101, 101, 188, 188, 188, 188, 95, 95,
	74, 74, 96, 96, 70, 70, 73, 73, 71, 71,
	71, 71, 89, 89, 90, 90, 68, 68, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 214,
	214, 214, 164, 62, 62, 62, 63, 63, 64, 64,
	219, 219, 219, 220, 220, 220, 220, 218, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	6, 1, 1, 1, 3, 3, 0, 2, 0, 2,
	1, 3, 5, 0, 4, 6, 7, 1, 1, 1,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	4, 6, 1, 3, 1, 2, 2, 3, 2, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 5, 3, 0, 1, 1, 1,
	1, 3, 3, 0, 2, 3, 2, 3, 6, 6,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 3, 4, 4, 2, 2, 2, 0, 2,
	0, 6, 6, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 5, 2, 0, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 7, 6,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 7, 4, 6, 3,
	1, 5, 6, 9, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	5, 2, 1, 1, 1, 1, 4, 1, 2, 2,
	1, 1, 1, 0, 1, 1, 4, 1, 4, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 0, 1, 4, 1, 3, 3, 3,
	5, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 4, 3,
	4, 4, 5, 3, 3, 3, 3, 3, 4, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	221, 65, -8, -9, -10, -11, -12, -13, -249, 93,
	101, 123, 204, 100, 86, 117, 224, 232, -41, -43,
	240, -142, 241, 35, 250, 59, 96, 226, 220, 272,
	67, -247, -44, -42, 320, 295, 301, 235, -45, 258,
	287, 323, 258, 132, 79, 290, -265, -96, 258, 79,
	-71, -62, 313, 4, -226, -228, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 58, 59, 60, 62, 64,
	65, 66, 69, 70, 77, 78, 80, 82, 86, 88,
	92, 93, 95, 100, 101, 107, 108, 111, 113, 118,
	123, 124, 125, 126, 133, 136, 138, 131, 146, 148,
	149, 152, 151, 156, 159, 162, 164, 165, 166, 169,
	167, 171, 172, 174, 173, 179, 181, 182, 184, 187,
	190, 193, 196, 197, 198, 199, 202, 204, 206, 207,
	208, 210, 211, 213, 214, 215, 216, 217, 220, 218,
	219, 221, 222, 224, 226, 227, 229, 231, 232, 233,
	234, 237, 238, 240, 241, 243, 246, 249, 250, 251,
	254, 252, 248, 257, 259, 260, 261, 268, 272, 273,
	274, 275, 278, 279, 280, 282, 284, 285, 286, 291,
	296, 297, 298, 299, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 50, 51, 52, 54, 81, 83, 84,
	99, 102, 103, 109, 119, 121, 127, 128, 137, 139,
	140, 141, 143, 154, 168, 178, 180, 191, 195, 201,
	203, 209, 228, 236, 244, 245, 253, 255, 263, 264,
	265, 269, 270, 287, 288, -265, -70, -62, 79, 88,
	136, 280, 279, 79, 132, 258, 290, -17, 320, -28,
	-7, -15, -4, -24, -35, -14, -31, -18, -32, -16,
	23, -218, 4, -226, -228, -227, -229, 56, 68, 116,
	135, 129, 145, 147, 155, 157, 170, 192, 194, 225,
	242, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 48, 49, 53, 55, 57, 63, 67, 71, 72,
	73, 74, 75, 76, 85, 87, 89, 90, 91, 94,
	96, 98, 104, 105, 106, 112, 114, 115, 117, 120,
	122, 130, 132, 134, 142, 144, 150, 153, 158, 160,
	161, 175, 176, 177, 183, 185, 186, 188, 189, 200,
	205, 212, 223, 235, 239, 247, 256, 258, 262, 266,
	267, 271, 276, 277, 281, 283, 289, 290, 292, 293,
	294, 295, -62, -62, -62, 204, 22, -269, 22, -270,
	-271, 67, 93, 117, 235, 136, 88, 279, -269, -66,
	232, -62, -138, 159, 238, 228, 268, -139, -137, -217,
	263, 169, -97, -62, 4, 22, 79, 58, 80, 118,
	132, 133, 63, 64, 149, 259, 263, 268, 67, 282,
	-274, 268, 268, -274, -274, -65, 268, 266, -66, -273,
	258, 258, 281, 290, -127, 79, 277, -42, -44, -43,
	-85, -86, 276, 142, 98, 189, -41, -43, -247, -250,
	210, -246, -62, -250, -82, -83, 22, 90, 324, -186,
	-70, 186, -109, 320, -3, -186, 127, -70, -73, 127,
	-70, -62, -186, 127, 266, 324, -96, -89, -62, -148,
	-147, 322, 115, 115, 320, -106, -107, -147, -148, 115,
	144, 144, -187, -186, -62, 127, -74, 127, -73, -98,
	127, -97, -98, 127, -192, -191, -220, 4, -226, -228,
	-227, 287, 258, 132, -166, 320, -123, 320, -62, 22,
	185, 324, 185, -62, -138, 52, -138, 320, -140, -60,
	-61, 146, 206, 266, 305, 115, 299, -78, 5, 85,
	-100, 322, 115, -266, 185, 115, 115, 115, 115, 115,
	115, 299, 146, 206, 231, 258, 290, -141, -60, -61,
	-141, 266, -66, -112, -186, -97, 127, -62, -97, 132,
	-62, 127, -85, -86, -111, -130, -131, 158, 183, -114,
	22, 90, -114, -114, 44, 321, 321, 324, -250, -90,
	320, -101, -188, -154, 313, -156, 311, 312, 317, 175,
	300, -168, -158, -171, 99, 228, 320, -70, -157, 325,
	9, -244, -43, 29, -169, -170, 48, -62, 7, 8,
	5, 6, -68, -195, -164, -204, 271, 104, 177, -242,
	-243, 4, -226, -219, -196, -206, -200, -203, 143, 56,
	72, 75, 73, 76, 239, 281, 49, 28, 102, 103,
	195, 201, 255, 269, 270, 127, 178, 128, 54, 119,
	154, 92, 37, 39, 41, 42, 50, 51, 81, 83,
	84, 109, 137, 139, 140, 141, 180, 209, 244, 253,
	264, 265, 288, -227, -207, -208, -201, -202, -209, -101,
	-109, 313, -70, 320, -108, -177, -154, 85, -50, 218,
	-49, 21, 23, 93, 285, 99, 248, 248, 218, 99,
	325, 218, 218, 99, -224, -221, 9, -220, 5, -71,
	324, -218, 313, -225, -224, 251, 321, -95, -70, -107,
	-187, -72, -70, -72, 240, -62, 30, 99, -52, 324,
	47, 222, 99, -52, 324, 99, -52, 99, 321, 324,
	-186, 127, -73, 30, -165, -193, -194, -196, -205, -199,
	-203, -204, 40, 46, 45, 261, 168, 236, 245, 38,
	184, 138, 137, 139, 140, 141, 244, 37, 209, 109,
	92, 84, 83, 180, 42, 41, -207, -208, -201, -202,
	81, 264, 265, 143, 39, 51, 50, 288, 253, -99,
	-154, -265, -271, -265, 30, -99, 324, 324, 156, -77,
	162, 174, 124, -216, 85, -222, -215, -178, 9, 271,
	104, 185, -221, 8, 312, -214, 7, 311, -216, 85,
	70, -223, 5, 4, -164, -178, 85, 159, -204, 322,
	-218, -217, -268, 112, -265, -217, -217, -217, -217, -217,
	-62, 156, -217, -217, 324, 324, -66, -52, 324, 320,
	-84, 175, -248, 295, -84, 320, -63, 127, -62, -248,
	175, -111, -131, -130, -132, -154, 22, -154, -156, -42,
	-42, -42, -87, -182, -154, -246, 30, -89, -92, 324,
	115, 10, 11, 55, 33, 311, 312, 313, 314, 110,
	315, 308, 309, 310, 307, 303, 304, 305, 61, 163,
	230, 13, 14, 15, 26, 188, 157, 300, 129, 242,
	317, 16, 17, 18, 145, 36, 130, -67, 30, 4,
	-75, -154, -154, -154, -154, -154, 194, -105, -149, 318,
	-43, 320, -43, -154, -99, 7, -43, -163, 318, -172,
	-154, -106, 320, 5, 320, 5, -251, 296, 112, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 203, -213, 291, -213,
	-213, -197, 320, -197, -198, 320, -197, 297, 301, 320,
	-92, -70, 324, 321, 324, 266, -128, 63, 57, -144,
	127, 57, -230, -62, 63, -231, 53, 277, 205, 114,
	-128, 63, -128, 63, 63, -186, 33, 33, 266, -73,
	-62, 266, 266, -186, -190, 302, -62, -190, 324, 115,
	321, 324, -146, 293, -134, -28, 320, 85, 30, -134,
	-102, -103, -189, -104, -70, 320, -62, -62, -73, -74,
	-97, -98, -98, -17, -191, 99, -20, -28, -24, -35,
	-14, 321, 324, -91, 29, -124, 320, 298, 166, 82,
	125, 165, -125, 234, 321, 324, 266, 115, 268, 321,
	-61, -60, -76, 208, 246, 219, 237, 324, 8, 7,
	7, -218, -267, -62, -61, -60, -186, -79, -89, -80,
	-62, -145, -144, -232, -233, -230, 132, 277, 105, 30,
	99, -59, 199, 30, 185, 175, -55, 260, 99, -133,
	228, 229, 324, -48, 31, 89, 320, 321, -146, -188,
	-94, -184, 318, -186, -70, -43, -185, 320, -211, -193,
	-210, 214, 215, 213, 217, 216, -193, -97, 263, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
	-154, 157, 129, 242, 36, 130, -154, 266, -154, -154,
	-154, -154, 167, 175, 177, 271, 104, 278, 90, 181,
	-276, 256, 32, -161, -43, 320, -176, 27, 247, 22,
	-218, -168, 228, 320, -149, -154, -150, -99, 321, 321,
	324, -99, -167, 319, -163, -175, -174, 292, 321, -99,
	289, 22, 90, 313, 7, -124, -252, 107, 120, 320,
	321, 321, -154, -154, -118, -212, -99, 4, 298, 166,
	82, 125, 165, 234, -118, -119, -154, -99, -120, -155,
	-156, 311, 312, 317, 320, 228, -121, -154, -99, -154,
	43, 153, 267, -122, -154, 115, -99, -154, -154, -154,
	-99, -99, -99, 320, 7, 7, 263, 263, 7, -146,
	321, -177, -49, -70, -62, -62, 175, -144, 127, -54,
	175, -193, -62, 320, 320, 148, 148, -62, -62, 127,
	-62, 127, -62, -62, -50, 218, -28, -28, -62, 218,
	-62, -70, 218, -36, 126, 181, -39, 295, -224, 251,
	115, -70, -113, 223, -154, -113, -136, 185, -95, 287,
	-62, -113, -93, 324, 115, 305, -95, -52, -52, -52,
	-186, -193, 318, 318, 7, 266, 266, 266, 266, 320,
	-154, -267, -267, -60, 275, 60, 208, -222, 324, 321,
	321, 324, -63, 132, -63, -28, -97, 5, -28, -70,
	99, -56, 95, -275, 305, -62, -182, -20, -110, 120,
	-190, 324, 68, -117, 147, 170, 116, 155, 225, 135,
	7, 101, -151, 325, 320, -181, 301, -43, -185, -184,
	299, -154, -154, 266, -276, 256, -161, -154, 167, 177,
	271, 104, 278, 90, 181, 115, 320, -155, -155, -99,
	-158, 320, -99, 319, 328, 321, -154, 319, 319, 324,
	-173, -174, 94, -154, -86, 324, -85, -154, -99, -99,
	321, 321, -257, 193, 320, 320, -154, 30, 324, 321,
	115, 321, 321, -126, 200, 321, 10, 11, 311, 312,
	313, 314, 110, 315, 308, 309, 310, 307, 303, 304,
	305, 61, 163, 230, 13, 14, 15, 145, 130, -155,
	-155, -155, -99, 320, 321, -159, -160, 115, 112, 30,
	-122, -122, -122, 321, 115, -99, 324, 324, 324, 321,
	321, 321, 7, 321, 324, 321, 299, 299, 321, -110,
	266, 266, 99, 175, 284, -234, -231, -154, -88, -183,
	-62, -245, 320, -242, -243, -68, 320, 320, -47, 93,
	240, -129, 99, -52, 99, -52, 266, -128, 63, 266,
	266, -39, 115, 257, 187, 251, -101, 176, -113, 62,
	321, -146, -103, -94, -177, 321, 319, 7, 7, 321,
	166, 125, 165, -125, 165, -125, -125, 7, -62, -81,
	131, -145, 320, -63, 320, 320, -84, 320, -62, -57,
	152, -275, -221, -248, 321, -162, 122, 44, -184, 147,
	147, -184, -117, 147, -115, 192, -115, -115, -263, 320,
	-17, 320, -181, -218, 318, 326, -99, -180, -179, 30,
	-62, 190, 321, -154, -154, -155, -155, 115, 320, -154,
	-165, 26, 26, 321, -99, 321, 324, -150, -154, 321,
	-163, 96, -154, 262, 321, 289, -86, -86, -86, 5,
	-258, -62, 320, 293, -85, 321, -211, -193, -154, -159,
	-154, -211, -193, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, 90, 175, 181, -155, 324, -99, 321, -160,
	-159, -154, -154, -193, 321, 321, 321, -99, -154, -154,
	-154, 321, 7, -162, -62, -62, -144, 99, -235, 63,
	-236, 55, 105, 67, 175, 177, 277, 205, 53, 85,
	212, 321, 321, 324, -69, -106, 55, -69, -154, 320,
	-88, -89, 175, 85, 175, 85, 78, 273, -62, -62,
	-70, -62, -62, -62, -70, -225, 263, 320, -135, 320,
	185, -28, -113, 305, 319, 319, 321, 130, -88, 320,
	-89, -79, 30, -88, 185, -58, 151, -275, -221, -55,
	-254, 294, -154, -99, -184, -184, -116, 283, 185, 147,
	-184, 319, 321, -264, 7, 319, -192, -180, 7, -153,
	-152, 113, 173, 321, -62, 320, -181, 26, 26, -154,
	-165, 321, -154, -154, 321, -154, 319, -154, 5, -154,
	321, 321, 321, -259, -62, -154, 321, 321, 321, -160,
	115, 90, 181, 320, -154, 321, 321, 324, 321, 321,
	321, -254, -144, -62, -97, -62, 105, 127, 177, 148,
	320, -155, -70, -143, -272, 66, 254, -183, -48, -97,
	-48, 321, -99, 321, 321, 177, 177, -154, -193, -52,
	-52, 266, 266, -157, -68, -62, -38, -37, 5, 91,
	-89, 63, -109, -43, 320, 196, 321, -88, 321, 321,
	-28, 321, -70, -275, -221, -56, -255, -256, -62, -116,
	320, -154, -184, -151, 321, 324, -181, 321, 319, 324,
	327, 305, -181, 320, -89, -179, -154, -154, 321, 321,
	-86, -253, 198, 321, -155, 115, 320, -165, 321, -154,
	-236, -63, 175, -154, -64, 320, -81, 320, -69, -86,
	212, -51, 55, -62, -62, 320, 324, 321, -40, 305,
	279, 176, 321, -62, -62, -143, 321, -81, -143, 320,
	-221, -57, 324, 30, -89, -181, 7, -180, -17, -152,
	-218, 318, -180, -89, 321, 321, -86, 44, -155, -165,
	321, 321, 99, 321, -239, 164, -62, -89, -48, 321,
	-70, -46, 283, -97, -99, -37, 5, 240, -146, 320,
	-81, -143, -81, -88, -58, -256, -258, 321, -179, 319,
	7, 321, -260, 207, 229, -99, 321, 105, -237, -240,
	-238, 185, 116, 197, 243, 321, 321, -84, -154, -86,
	-102, -89, -81, 321, -181, 319, 321, -261, -262, 36,
	274, 70, -154, -261, -62, -238, 185, -240, 185, 279,
	88, -239, 321, -146, 321, -143, -180, -262, 202, 111,
	228, 202, 111, -241, 172, 222, 47, 240, -241, -237,
	-53, 47, 222, -81, 26, 20, 177, 85, -262,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 77, 78, 79, 80, 81, 82, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 383, -2,
	0, 150, 0, 332, 0, 332, 332, 336, 0, 413,
	298, 410, -2, 421, 0, 0, 0, 419, 397, 0,
	0, -2, 0, 0, 0, 0, 0, 130, 0, 942,
	872, 878, 879, 903, 904, 905, 922, 923, 924, 925,
	926, 927, 928, 929, 930, 931, 932, 933, 934, 935,
	936, 937, 938, 939, 940, 941, 943, 944, 945, 946,
	947, 948, 949, 950, 951, 952, 953, 954, 955, 956,
	957, 958, 959, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, 970, 971, 972, 973, 974, 975, 976,
	977, 978, 979, 980, 981, 982, 983, 984, 985, 986,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016,
	1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026,
	1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,
	1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046,
	1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
	1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066,
	1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076,
	1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 1101, 0, 0, 874, 942, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 100,
	101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
	0, 216, 917, 918, 919, 920, 921, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 116, 123, 124, 994, 126, 0, 133, 134,
	135, 137, 138, 139, 140, 141, 142, 143, 0, 325,
	1015, 338, 146, 971, 1019, 1089, 1034, 153, 163, 0,
	1095, -2, 167, 94, 196, 197, 198, 0, 200, 218,
	0, 0, 0, 0, 0, 208, 0, 0, 0, 215,
	343, 331, 343, 328, 329, 330, 333, 0, 324, 0,
	412, 0, 0, 0, 0, 0, 297, -2, 393, 394,
	-2, 0, 416, 416, 416, 0, 0, 394, 0, 402,
	998, 405, 885, 403, 0, 0, 418, 417, 0, 398,
	493, 0, 441, 0, 2, 0, 1073, 493, 0, 1073,
	877, 0, 0, 1073, 0, 0, 131, 132, 882, 880,
	881, 0, 0, 0, 0, 875, 851, 849, 850, 0,
	0, 0, 0, 499, 84, 1073, 52, 1073, 870, 52,
	1073, 92, 52, 1073, 0, 111, 113, 913, 914, 915,
	916, 1100, 0, 0, 0, 0, 121, 0, 125, 127,
	0, 0, 0, 337, 147, 1062, 149, 0, 152, 154,
	155, 0, 0, 0, 0, 0, 0, 166, 191, 192,
	95, 0, 0, 220, 0, 0, 0, 0, 0, 0,
	0, 209, 0, 211, 212, 0, 0, 326, 339, 340,
	327, 0, 335, 52, 497, 270, 1073, 409, 270, 907,
	409, 1073, -2, 0, 389, 428, 429, 0, 0, 0,
	414, 415, 0, 0, 0, 385, 386, 0, 404, 0,
	0, 444, 862, 866, 867, 596, 0, 0, 0, 0,
	0, 0, 688, 690, 1067, 1089, 0, 692, 693, 0,
	695, 697, 698, 0, 701, 702, 842, 874, 888, 889,
	890, 891, 0, 0, 894, 0, 896, 897, 898, 742,
	711, -2, -2, 886, 528, 529, 530, 531, -2, 1102,
	715, 717, 719, 720, 721, 722, 0, 1051, 1068, 1069,
	1085, 1086, 1094, 1098, 1099, 1073, 1082, 1074, 1063, 1071,
	1080, 947, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 912, 558, 559, 564, 565, 567, 444,
	442, 494, 495, 0, 0, 859, 857, 858, 29, 321,
	31, 0, 321, 321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484, 61, 62, 194, 195, 873,
	0, 847, 848, 484, 63, 74, 0, 0, 868, 852,
	503, 0, 360, 0, 0, 500, 0, 0, 86, 0,
	50, 51, 0, 88, 0, 0, 90, 0, 411, 0,
	0, 1073, 0, 411, 0, 800, 511, 512, 513, 514,
	515, 593, 518, 519, 520, 521, 522, 523, 524, 525,
	526, 527, 535, 536, 537, 538, 539, 540, 541, 555,
	0, 534, 534, 534, 547, 548, 556, 557, 562, 563,
	574, 575, 577, 579, 573, 573, 573, 570, 571, 0,
	798, 0, 136, 0, 0, 0, 0, 0, 0, 158,
	178, 179, 180, 159, 161, 168, 170, 171, 172, 181,
	182, 183, 184, 287, 0, 289, 899, 0, 160, 162,
	164, 165, 185, 186, 187, 188, 189, 190, 0, 0,
	96, 199, 201, 0, 217, 202, 203, 204, 205, 206,
	207, 210, 213, 214, 0, 0, 334, 290, 0, 228,
	0, 0, 293, 408, 0, 0, 0, 1073, 906, 348,
	0, 392, 426, 427, 430, 433, 434, 431, 596, 399,
	400, 401, 422, 423, 308, 406, 0, 0, 503, 0,
	0, 0, 0, 0, 0, 777, 778, 779, 780, 781,
	782, 785, 786, 783, 784, 787, 788, 789, 0, 0,
	0, 790, 791, 792, 0, 0, 794, 0, 796, 0,
	0, 0, 0, 0, 0, 856, 0, 0, 0, 865,
	793, 601, 602, 603, 625, 626, 0, 689, 853, 846,
	691, 0, -2, 798, 0, 694, 699, 700, 0, 0,
	841, -2, 0, 893, 0, 593, 744, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 821, 827, 0, 0,
	0, 0, 0, 0, 0, 0, 543, 561, 572, 569,
	568, 545, 0, 544, 542, 0, 546, 0, 0, 0,
	503, 0, 0, 861, 0, 0, 0, 0, 320, 33,
	1073, 0, 54, 0, 0, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	876, 0, 0, 0, 66, 0, 883, 73, 0, 0,
	0, 0, 372, 0, 372, 362, 0, 0, 0, 372,
	375, 376, 378, 379, 0, 0, 501, 85, 871, 52,
	93, 52, 52, 99, 112, 0, 114, 117, 118, 119,
	120, 115, 0, 504, 506, 516, 0, 580, 581, 582,
	583, 584, 585, 594, 122, 0, 0, 0, 0, 151,
	156, 157, 344, 0, 175, 0, 177, 0, 288, 901,
	900, 97, 219, 144, 341, 342, 498, 0, 0, 227,
	882, 229, 231, 232, 233, 234, 907, 0, 907, 0,
	0, 291, 0, 0, 0, 0, 350, 356, 0, 432,
	435, 436, 0, 425, 306, 307, 411, 884, 438, 863,
	484, 445, 0, 455, 493, 470, 460, 0, 597, 507,
	508, 549, 550, 551, 552, 553, 598, 599, 0, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, -2,
	-2, -2, 617, 618, 619, -2, -2, -2, 623, 624,
	-2, 795, 797, 0, 856, 0, -2, 0, 633, -2,
	-2, -2, 637, 0, 639, 642, 644, 646, 0, 0,
	0, 0, 855, 656, 833, 0, 0, 774, 775, 776,
	864, 641, 0, 0, 854, 845, 0, 0, -2, 696,
	0, 0, 0, 804, 805, 840, 836, 0, 703, 421,
	0, 0, 0, 0, 0, 902, 752, 0, 0, 0,
	716, 718, 0, 0, 0, 0, 808, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 798, 818, 0, 0,
	659, 0, 0, 0, 0, 1089, 0, 798, 826, 0,
	0, 0, 0, 0, 798, 0, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 438,
	496, 860, 32, 310, 0, 0, 0, 35, 1073, 43,
	0, 242, 0, 0, 0, 0, 0, 323, 44, 1073,
	52, 1073, 52, 45, 30, 321, 221, 222, 314, 0,
	309, 312, 0, 73, 0, 0, 60, 0, 64, 75,
	0, 869, 83, 0, 502, 357, 372, 0, 0, 364,
	361, 359, 503, 0, 0, 0, 0, 87, 89, 91,
	0, 801, 0, 0, 0, 0, 0, 0, 0, 0,
	799, 128, 129, 148, 173, 174, 176, 169, 0, 236,
	269, 0, 0, 907, 0, 225, 270, 292, 294, 0,
	0, 352, 356, 0, 355, 409, 424, 0, 440, 0,
	443, 0, 0, 0, 0, 0, 490, 490, 490, 488,
	464, 411, 470, 0, 0, 482, 0, -2, 460, 0,
	0, -2, -2, 0, 0, 0, 657, -2, 638, 640,
	643, 645, 647, 0, 0, 0, 0, 0, 0, 0,
	658, 0, 0, 843, 846, -2, 799, 802, 803, 0,
	0, 837, 0, 0, 0, 0, 420, 421, 421, 421,
	709, 0, 710, 0, 0, 0, 0, 0, 0, 725,
	0, 726, 727, 0, 0, 728, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 662,
	663, 664, 0, 0, 729, 824, 825, 0, 0, 0,
	0, 0, 0, 734, 0, 831, 0, 0, 0, 738,
	739, 740, 0, 532, 0, 554, 576, 578, 566, 440,
	0, 0, 0, 0, 53, 240, 259, 0, 0, 299,
	305, 305, 0, 712, 713, 0, 0, 0, 37, 0,
	0, 0, 0, 41, 0, 47, 0, 0, 0, 0,
	0, 59, 0, 0, 0, 76, 370, 371, 358, 369,
	0, 372, 377, 374, 380, 0, 509, 0, 0, 517,
	586, 587, 588, 589, 590, 591, 592, 0, 145, 223,
	0, 230, 0, 0, 0, 228, 0, 0, 0, 354,
	356, 0, 347, 348, 407, 746, 0, 0, 446, 0,
	0, 0, 0, 0, 485, 489, 486, 487, 0, 0,
	0, 0, 482, 452, 0, 0, 0, 459, 481, 0,
	480, 469, -2, 600, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 834, 0, 769, 0, 0, 845, -2,
	806, 835, 839, 0, 704, 0, 0, 0, 0, 895,
	750, 751, 755, 0, 0, 714, 0, 0, 807, 817,
	819, 660, 661, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, -2, -2, -2, 678, 679, 680, -2,
	-2, -2, 0, 0, 0, 820, 0, 0, 772, 822,
	823, 828, 829, 0, 731, 732, 733, 830, 0, 0,
	0, 560, 0, 746, 316, 318, 34, 0, 241, 0,
	244, 0, 0, 0, 0, 250, 251, 0, 0, 0,
	0, 261, 268, 0, 308, 887, 0, 308, 0, 0,
	0, 0, 0, 49, 0, 0, 322, 0, 52, 52,
	311, 0, 0, 315, 313, 65, 0, 0, 0, 0,
	0, 363, 373, 0, 510, 505, 595, 0, 0, 0,
	0, 0, 0, 0, 0, 345, 356, 0, 349, 350,
	395, 0, 439, 437, 472, 0, 474, 0, 0, 0,
	476, 455, 465, 0, 467, 470, 0, 457, 0, 0,
	450, 0, 449, 470, 478, 0, 0, 0, 0, -2,
	0, 650, -2, -2, 768, 799, 844, 838, 892, 421,
	705, 707, 708, 757, 754, 0, 741, 723, 724, 816,
	0, 0, 0, 0, 799, 771, 730, 0, 736, 737,
	533, 396, 36, 0, 245, 246, 907, 0, 249, 252,
	0, 254, 909, 236, 0, 265, 266, 300, 301, 304,
	302, 305, 421, 263, 0, 38, 39, 48, 56, 40,
	46, 0, 0, 483, 0, 0, 0, 70, 68, 0,
	0, 0, 381, 382, 0, 0, 268, 0, 258, 236,
	226, 268, 0, 0, 351, 352, 745, 747, 0, 473,
	0, 492, 475, 470, 466, 0, 482, 411, 453, 0,
	454, 0, 482, 0, 0, 461, -2, -2, 651, 770,
	0, 421, 0, 743, -2, 0, 0, 0, 773, 0,
	243, 247, 0, 0, 274, 0, 262, 0, 308, 0,
	0, 58, 0, 317, 319, 0, 0, 72, 69, 0,
	0, 366, 503, 368, 0, 236, 268, 224, 236, 0,
	353, 354, 0, 0, 0, 0, 468, 462, 0, 451,
	447, 0, 458, 0, 479, 706, 760, 0, -2, 0,
	686, 735, 0, 253, 279, 0, 0, 0, 303, 704,
	270, 42, 0, 55, 421, 71, 67, 0, 367, 0,
	256, 236, 295, 0, 346, 748, 749, 491, 456, 470,
	0, 477, 0, 0, 0, 756, 687, 0, 255, 275,
	276, 0, 271, 272, 273, 908, 267, 274, 57, 0,
	503, 0, 257, 268, 482, 448, 753, 758, 761, -2,
	1037, 939, 0, 759, 248, 277, 0, 278, 0, 0,
	0, 279, 0, 365, 239, 236, 463, 0, 763, 764,
	765, 766, 767, 280, 0, 283, 284, 0, 281, 264,
	235, 237, 238, 296, 0, 282, 285, 286, 762,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 309, 3, 315, 310, 3,
	320, 321, 313, 311, 324, 312, 322, 314, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 328, 323,
	303, 305, 304, 3, 325, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 318, 3, 319, 308, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 326, 307, 327, 317,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 306, 57646, 316, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:782
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:788
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:831
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:890
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:900
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:910
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:913
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:930
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:939
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:991
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:995
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 68:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.str = ""
		}
	case 69:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1060
		{
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1111
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{ /* SKIP DOC */
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 114:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1315
		{
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1377
		{
			return unimplemented(sqllex)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{ /* SKIP DOC */
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1434
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			return unimplemented(sqllex)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return unimplemented(sqllex)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1466
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1488
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = Low
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = Normal
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = High
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			return unimplemented(sqllex)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1565
		{
			return unimplemented(sqllex)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1566
		{
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1737
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1758
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1762
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1766
		{
			sqlVAL.union.val = DropDefault
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1855
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			return unimplemented(sqllex)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1980
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1987
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1991
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1994
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1997
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2002
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2036
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = true
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = false
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2112
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2116
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = Ascending
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = Descending
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2170
		{
			return unimplemented(sqllex)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2171
		{
			return unimplemented(sqllex)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = true
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = false
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2185
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2206
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2227
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2228
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.str = ""
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.str = ""
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2260
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2315
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2350
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2351
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2415
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2419
		{
			return unimplemented(sqllex)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 373:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2449
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2450
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2468
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2677
		{
			return unimplemented(sqllex)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			return unimplemented(sqllex)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2679
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2686
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2689
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2690
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
			return unimplemented(sqllex)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2694
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2698
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = true
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = false
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = false
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = true
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2722
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2760
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2780
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2821
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &From{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2916
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2961
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2978
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = nil
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = true
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = false
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.str = astFullJoin
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.str = astLeftJoin
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.str = astRightJoin
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.str = astInnerJoin
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
		}
	case 490:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3157
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3243
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3256
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3271
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3280
		{
			return unimplemented(sqllex)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3348
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = nil
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3397
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3492
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3524
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3540
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3564
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = year
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = month
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = day
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = hour
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = minute
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = month
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = hour
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = minute
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = minute
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = nil
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = second
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3659
		{
			return unimplemented(sqllex)
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3694
		{
			return unimplemented(sqllex)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3862
		{
			return unimplemented(sqllex)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3924
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3928
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4154
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4155
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4178
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4194
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4195
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4199
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4218
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4219
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4248
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4292
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4293
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = Window(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4351
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.str = ""
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4380
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			return unimplemented(sqllex)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4391
		{
			return unimplemented(sqllex)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4392
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4396
		{
			return unimplemented(sqllex)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4402
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4403
		{
			return unimplemented(sqllex)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4404
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4405
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4406
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = Any
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = Some
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = All
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = Plus
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = Minus
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = Mult
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = Div
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = FloorDiv
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = Mod
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = Bitand
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = Bitor
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = Bitxor
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = Bitxor
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = LT
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = GT
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = EQ
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = LE
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = GE
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = NE
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = Like
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = NotLike
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			sqlVAL.union.val = ILike
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = NotILike
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4755
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4771
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4799
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4879
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4931
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4967
		{
			return unimplemented(sqllex)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = DNull
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5006
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.str = ""
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
