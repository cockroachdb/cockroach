// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5684

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 36,
	354, 36,
	-2, 464,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 61,
	1, 437,
	197, 437,
	241, 437,
	350, 437,
	352, 437,
	354, 437,
	-2, 447,
	-1, 76,
	1, 440,
	197, 440,
	241, 440,
	350, 440,
	352, 440,
	354, 440,
	-2, 446,
	-1, 85,
	1, 36,
	354, 36,
	-2, 464,
	-1, 483,
	1, 188,
	354, 188,
	-2, 1048,
	-1, 554,
	111, 474,
	170, 474,
	195, 474,
	-2, 443,
	-1, 557,
	111, 473,
	170, 473,
	195, 473,
	-2, 441,
	-1, 637,
	351, 975,
	-2, 968,
	-1, 638,
	351, 976,
	-2, 969,
	-1, 644,
	5, 642,
	351, 642,
	-2, 1173,
	-1, 669,
	5, 601,
	-2, 1143,
	-1, 670,
	5, 636,
	351, 636,
	-2, 1145,
	-1, 671,
	5, 611,
	-2, 1146,
	-1, 672,
	5, 610,
	-2, 1147,
	-1, 673,
	5, 636,
	351, 636,
	-2, 1150,
	-1, 674,
	5, 636,
	351, 636,
	-2, 1151,
	-1, 675,
	5, 637,
	-2, 1154,
	-1, 676,
	5, 593,
	-2, 1155,
	-1, 677,
	5, 593,
	-2, 1156,
	-1, 678,
	5, 618,
	-2, 1160,
	-1, 679,
	5, 603,
	-2, 1161,
	-1, 680,
	5, 604,
	-2, 1162,
	-1, 681,
	5, 594,
	-2, 1167,
	-1, 682,
	5, 595,
	-2, 1168,
	-1, 683,
	5, 596,
	-2, 1169,
	-1, 684,
	5, 597,
	-2, 1170,
	-1, 685,
	5, 598,
	-2, 1171,
	-1, 686,
	5, 599,
	-2, 1172,
	-1, 687,
	5, 593,
	-2, 1177,
	-1, 688,
	5, 602,
	-2, 1182,
	-1, 689,
	5, 600,
	-2, 1185,
	-1, 690,
	5, 634,
	351, 634,
	-2, 1187,
	-1, 691,
	5, 638,
	-2, 1190,
	-1, 692,
	5, 640,
	-2, 1191,
	-1, 693,
	5, 633,
	351, 633,
	-2, 1196,
	-1, 811,
	111, 473,
	170, 473,
	195, 473,
	-2, 444,
	-1, 920,
	102, 447,
	111, 447,
	151, 447,
	170, 447,
	195, 447,
	201, 447,
	304, 447,
	-2, 761,
	-1, 929,
	351, 952,
	-2, 940,
	-1, 1208,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 677,
	-1, 1209,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 678,
	-1, 1210,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 679,
	-1, 1214,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 683,
	-1, 1215,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 684,
	-1, 1216,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 685,
	-1, 1219,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 690,
	-1, 1225,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 692,
	-1, 1227,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 696,
	-1, 1228,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 697,
	-1, 1229,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 698,
	-1, 1230,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 699,
	-1, 1256,
	206, 834,
	-2, 837,
	-1, 1293,
	122, 874,
	351, 975,
	-2, 968,
	-1, 1294,
	122, 875,
	-2, 1139,
	-1, 1295,
	122, 876,
	-2, 1047,
	-1, 1296,
	122, 877,
	-2, 1011,
	-1, 1297,
	122, 878,
	-2, 1028,
	-1, 1298,
	122, 879,
	-2, 1046,
	-1, 1299,
	122, 880,
	-2, 1098,
	-1, 1480,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 691,
	-1, 1481,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 693,
	-1, 1486,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 694,
	-1, 1504,
	206, 833,
	-2, 836,
	-1, 1669,
	102, 447,
	111, 447,
	151, 447,
	170, 447,
	195, 447,
	201, 447,
	304, 447,
	-2, 528,
	-1, 1711,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 695,
	-1, 1716,
	154, 0,
	-2, 711,
	-1, 1726,
	206, 835,
	-2, 838,
	-1, 1768,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 738,
	-1, 1769,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 739,
	-1, 1770,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 740,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 744,
	-1, 1775,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 745,
	-1, 1776,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 746,
	-1, 1858,
	1, 529,
	70, 529,
	102, 529,
	111, 529,
	123, 529,
	127, 529,
	129, 529,
	142, 529,
	151, 529,
	158, 529,
	167, 529,
	170, 529,
	182, 529,
	195, 529,
	197, 529,
	201, 529,
	241, 529,
	243, 529,
	304, 529,
	312, 529,
	323, 529,
	324, 529,
	333, 529,
	350, 529,
	352, 529,
	354, 529,
	355, 529,
	-2, 528,
	-1, 1908,
	154, 0,
	-2, 712,
	-1, 1911,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 715,
	-1, 1912,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 717,
	-1, 2028,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 716,
	-1, 2029,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 718,
	-1, 2036,
	154, 0,
	-2, 747,
	-1, 2103,
	154, 0,
	-2, 748,
	-1, 2184,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1142,
}

const sqlPrivate = 57344

const sqlLast = 31635

var sqlAct = [...]int{

	638, 1814, 2183, 2167, 2132, 2212, 1346, 558, 2000, 1338,
	2182, 1108, 2168, 1854, 2169, 2060, 2026, 636, 1745, 1392,
	347, 1957, 1824, 1866, 1981, 628, 1880, 1853, 1681, 1664,
	1667, 999, 635, 1391, 1421, 536, 1968, 1641, 98, 98,
	614, 98, 579, 1114, 1396, 704, 1962, 1570, 869, 1643,
	60, 1682, 349, 98, 98, 98, 1410, 1832, 1596, 1655,
	98, 1395, 1000, 98, 1428, 844, 831, 1110, 841, 1569,
	1187, 98, 925, 1347, 545, 1841, 1279, 1476, 1254, 1159,
	98, 98, 1515, 1429, 98, 1434, 329, 98, 98, 98,
	98, 342, 24, 98, 98, 1650, 1068, 1150, 565, 75,
	1417, 1134, 1182, 1431, 971, 1319, 482, 331, 1264, 1384,
	608, 1242, 870, 594, 846, 1239, 749, 539, 832, 748,
	1273, 540, 725, 717, 714, 716, 960, 956, 1290, 563,
	916, 568, 1340, 607, 1139, 1399, 814, 531, 815, 468,
	76, 813, 90, 630, 1066, 77, 457, 478, 975, 75,
	1881, 710, 94, 566, 819, 794, 795, 1503, 2071, 984,
	557, 2072, 1339, 2210, 984, 1276, 866, 471, 2192, 562,
	529, 1879, 2179, 2178, 1665, 1371, 1371, 24, 1608, 984,
	2175, 309, 2165, 866, 75, 866, 2162, 576, 562, 866,
	582, 631, 2151, 589, 1607, 1365, 2129, 1507, 1662, 866,
	1540, 1541, 1508, 1558, 1559, 1560, 2113, 81, 1141, 1879,
	522, 982, 1277, 585, 346, 2109, 555, 2105, 866, 2097,
	1365, 554, 2096, 2067, 2054, 479, 2068, 1879, 2051, 860,
	2049, 866, 1343, 1879, 570, 83, 2030, 1506, 1371, 1365,
	871, 872, 1371, 891, 892, 893, 901, 902, 903, 2011,
	2119, 2010, 866, 1555, 1879, 1186, 894, 1278, 1275, 1984,
	74, 1935, 1371, 874, 1371, 1913, 905, 1910, 1371, 1900,
	1365, 84, 1371, 1899, 1878, 1808, 1371, 1879, 1337, 79,
	1803, 1720, 1183, 1337, 1371, 1653, 80, 873, 49, 1630,
	1140, 1587, 866, 888, 1588, 53, 1585, 50, 1584, 1371,
	1183, 1371, 1627, 1322, 1653, 78, 1781, 1546, 1583, 1504,
	1425, 1371, 1371, 866, 1723, 1375, 871, 872, 1371, 98,
	1148, 51, 1186, 1371, 1631, 98, 98, 98, 98, 98,
	1370, 545, 1280, 1371, 1364, 1336, 866, 1365, 1337, 874,
	1147, 1420, 1514, 1146, 1561, 1382, 993, 879, 722, 994,
	985, 1258, 827, 871, 872, 985, 891, 892, 893, 901,
	902, 903, 1058, 873, 592, 1556, 898, 906, 737, 894,
	985, 575, 1882, 85, 598, 1976, 874, 1080, 542, 905,
	763, 563, 1668, 2202, 904, 81, 2181, 2174, 2137, 2100,
	2052, 1540, 1541, 1943, 1940, 1936, 1928, 81, 1927, 896,
	873, 1926, 826, 1922, 1921, 889, 888, 1920, 1113, 1274,
	1919, 1607, 1858, 83, 1831, 1812, 1796, 1791, 1790, 1789,
	1731, 837, 711, 879, 1633, 83, 1629, 1592, 1666, 701,
	895, 1369, 1747, 719, 719, 99, 1589, 1577, 1557, 1568,
	1539, 1140, 1536, 1535, 81, 1533, 1520, 1519, 1438, 84,
	1287, 720, 726, 98, 64, 1286, 1285, 826, 1250, 933,
	879, 84, 825, 926, 703, 78, 988, 1810, 2154, 79,
	98, 983, 83, 98, 98, 2116, 80, 2095, 890, 898,
	906, 889, 926, 78, 545, 2094, 1106, 350, 2093, 2085,
	2083, 2075, 545, 2063, 899, 1342, 2047, 904, 1546, 2038,
	1997, 1986, 1540, 1541, 1951, 1933, 1905, 1885, 84, 546,
	1846, 1822, 896, 346, 346, 1820, 79, 1819, 889, 1817,
	1715, 1690, 98, 80, 1552, 1553, 1554, 767, 98, 1551,
	1549, 1550, 1542, 1543, 1544, 1545, 1547, 1548, 1689, 1567,
	1529, 1617, 78, 895, 1528, 1525, 1500, 1942, 1495, 98,
	98, 98, 1244, 98, 890, 1467, 1465, 1452, 1451, 74,
	74, 897, 812, 1251, 885, 886, 887, 900, 98, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 1424, 98,
	759, 1616, 961, 871, 872, 1937, 964, 49, 49, 1329,
	1284, 890, 545, 98, 53, 53, 50, 50, 1107, 349,
	545, 580, 694, 968, 766, 954, 874, 899, 953, 1546,
	952, 951, 950, 949, 948, 947, 946, 945, 836, 867,
	51, 51, 944, 943, 942, 941, 940, 767, 939, 938,
	873, 800, 937, 747, 930, 767, 1452, 811, 919, 835,
	742, 744, 78, 830, 746, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 351, 804, 733, 807, 702, 731,
	2193, 798, 2070, 563, 1973, 2099, 1948, 1556, 598, 1947,
	1915, 1847, 796, 917, 897, 837, 547, 885, 886, 887,
	900, 2073, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 757, 755, 1644, 1946, 1609, 1540, 1541, 1582, 1540,
	1541, 935, 1183, 98, 864, 1668, 555, 1591, 98, 98,
	98, 554, 98, 543, 1416, 822, 823, 1590, 854, 1479,
	1974, 828, 1415, 1540, 1541, 1544, 1545, 1547, 1548, 98,
	98, 966, 786, 696, 1963, 756, 967, 98, 852, 758,
	1557, 98, 1064, 81, 81, 865, 98, 1111, 1477, 973,
	552, 1339, 1748, 64, 64, 853, 545, 545, 1265, 957,
	790, 1603, 1677, 2140, 349, 2199, 546, 1511, 2108, 1374,
	98, 83, 83, 98, 929, 98, 98, 98, 98, 98,
	98, 847, 1893, 848, 1081, 515, 98, 324, 783, 516,
	1095, 98, 98, 847, 847, 848, 848, 315, 98, 791,
	784, 958, 959, 1546, 962, 932, 2200, 84, 84, 98,
	1809, 711, 837, 2021, 965, 79, 79, 2020, 521, 1112,
	1624, 520, 80, 80, 88, 2019, 2018, 1705, 98, 1704,
	1546, 98, 995, 1550, 1542, 1543, 1544, 1545, 1547, 1548,
	98, 78, 330, 1674, 325, 1673, 1524, 1523, 98, 316,
	1138, 1082, 98, 1522, 1521, 997, 1482, 849, 977, 974,
	98, 98, 755, 75, 98, 1152, 1904, 98, 1372, 849,
	849, 1701, 1065, 1333, 349, 1226, 1084, 1117, 1180, 1051,
	1179, 87, 1176, 1053, 1052, 1152, 797, 2107, 1556, 591,
	1332, 1151, 1153, 1055, 1196, 1197, 1076, 1411, 1103, 528,
	1102, 1069, 1075, 729, 1276, 756, 857, 1798, 1708, 2002,
	1241, 1593, 969, 1083, 695, 1241, 922, 1089, 745, 546,
	881, 1692, 782, 1006, 2152, 1237, 855, 546, 1280, 987,
	978, 1738, 990, 547, 1188, 1195, 2206, 1104, 1597, 1248,
	1235, 2215, 2148, 856, 1246, 1171, 1164, 1166, 1174, 548,
	1079, 1277, 1121, 1120, 1119, 1169, 1418, 1419, 643, 1136,
	555, 1557, 1472, 555, 555, 1130, 2149, 1181, 1131, 1132,
	1144, 1056, 1185, 553, 1741, 973, 1739, 561, 549, 98,
	1160, 98, 98, 1156, 98, 1177, 326, 98, 550, 98,
	98, 1265, 98, 98, 1463, 545, 1278, 1275, 1086, 1262,
	1469, 1090, 1091, 1092, 1093, 1094, 845, 2088, 787, 862,
	1231, 1105, 1359, 318, 317, 328, 1099, 1100, 1232, 861,
	1233, 319, 2199, 86, 1238, 327, 560, 546, 1542, 1543,
	1544, 1545, 1547, 1548, 350, 546, 1548, 1049, 2221, 1625,
	1074, 1073, 1101, 542, 537, 728, 1252, 1163, 1249, 1280,
	1057, 1280, 1551, 1549, 1550, 1542, 1543, 1544, 1545, 1547,
	1548, 1623, 89, 1006, 1006, 698, 752, 1341, 697, 1341,
	1223, 1280, 1300, 788, 310, 850, 562, 2213, 984, 1601,
	1360, 349, 871, 872, 1693, 770, 547, 850, 850, 98,
	955, 780, 75, 2048, 547, 1356, 719, 75, 719, 1699,
	1406, 1383, 98, 98, 98, 874, 1363, 98, 98, 1354,
	1345, 1355, 2171, 1357, 98, 1358, 726, 1361, 2003, 1149,
	2205, 914, 771, 1597, 1077, 769, 789, 1368, 781, 873,
	1234, 753, 2214, 2034, 1527, 754, 1842, 1236, 871, 872,
	311, 1857, 98, 349, 562, 1162, 1709, 1829, 1274, 1426,
	98, 98, 98, 2216, 1437, 523, 98, 1484, 962, 98,
	965, 874, 1240, 1436, 1654, 98, 98, 98, 98, 98,
	1221, 1224, 601, 959, 958, 2170, 2198, 98, 1376, 559,
	98, 98, 1492, 1386, 613, 873, 1247, 545, 1043, 879,
	2196, 546, 546, 1956, 547, 75, 858, 1490, 2172, 350,
	1445, 351, 547, 1220, 871, 872, 1408, 1078, 774, 740,
	1390, 736, 857, 320, 818, 1439, 1931, 1658, 2204, 455,
	1449, 1777, 767, 1255, 1475, 312, 2226, 874, 1388, 2222,
	1259, 1161, 855, 524, 1267, 1462, 1661, 2013, 2012, 1995,
	2080, 817, 1889, 1414, 1676, 879, 1292, 1292, 1303, 856,
	1314, 873, 1656, 321, 2173, 1874, 1326, 1327, 1328, 1427,
	1448, 1659, 1464, 1440, 1063, 1466, 458, 1487, 577, 985,
	1444, 584, 587, 1409, 577, 1513, 1657, 1488, 1118, 1892,
	458, 1493, 322, 1109, 323, 1378, 1891, 1658, 463, 1875,
	1982, 1970, 1126, 1737, 459, 563, 1380, 2133, 1222, 1478,
	816, 817, 463, 1098, 1059, 1825, 1661, 1061, 459, 350,
	1958, 879, 1996, 1305, 1778, 1932, 1454, 1381, 1453, 1062,
	1779, 460, 1840, 1971, 1837, 818, 1836, 2225, 466, 1379,
	465, 1659, 526, 752, 709, 460, 1485, 1660, 98, 1483,
	462, 1888, 708, 98, 560, 98, 808, 1815, 1474, 1006,
	1949, 1993, 98, 1833, 462, 1983, 1499, 1651, 547, 547,
	816, 563, 1127, 98, 1283, 2037, 351, 1930, 1571, 889,
	1714, 1707, 1510, 98, 98, 1994, 1594, 1534, 543, 538,
	1494, 1373, 1335, 545, 1175, 1890, 1172, 1489, 1870, 793,
	1871, 792, 785, 563, 1491, 779, 778, 777, 776, 1599,
	623, 98, 775, 98, 1605, 98, 1969, 1660, 772, 98,
	525, 707, 599, 98, 875, 876, 877, 878, 880, 881,
	1873, 1572, 1574, 1575, 1576, 1096, 1088, 936, 1615, 1876,
	546, 764, 1282, 2166, 2130, 1863, 98, 1697, 95, 95,
	1695, 313, 890, 1675, 1632, 1640, 1634, 1602, 1412, 1404,
	461, 1362, 992, 449, 450, 451, 1610, 1449, 991, 989,
	470, 986, 981, 484, 461, 1037, 1614, 863, 859, 851,
	1687, 470, 877, 878, 880, 881, 351, 1728, 1688, 1626,
	569, 569, 1620, 1621, 313, 1686, 563, 313, 313, 588,
	313, 1622, 1628, 95, 595, 1635, 1642, 706, 2042, 1638,
	705, 1422, 2200, 577, 464, 820, 1872, 573, 1071, 1152,
	587, 1636, 344, 34, 1646, 1167, 350, 1663, 464, 1671,
	91, 1670, 1648, 75, 1733, 1734, 1735, 1717, 98, 75,
	1679, 1652, 1649, 1672, 882, 883, 875, 876, 877, 878,
	880, 881, 2044, 339, 29, 338, 28, 3, 1498, 337,
	27, 1706, 335, 26, 1168, 1501, 1802, 1006, 514, 343,
	18, 1700, 1423, 340, 15, 336, 13, 1611, 2090, 1612,
	1613, 454, 1882, 1517, 1518, 341, 12, 821, 350, 574,
	765, 1727, 1724, 333, 11, 1152, 1006, 2102, 1834, 824,
	1173, 1165, 1170, 596, 1188, 1752, 597, 547, 34, 1740,
	1742, 1743, 1751, 1188, 1757, 1037, 1037, 1754, 98, 98,
	2120, 1756, 1749, 593, 1566, 1954, 1804, 1784, 345, 9,
	871, 872, 546, 332, 8, 1579, 517, 518, 98, 29,
	467, 28, 98, 581, 98, 27, 1788, 1407, 26, 1403,
	1785, 98, 1344, 874, 545, 18, 1036, 1137, 1821, 15,
	1054, 13, 334, 4, 98, 998, 1367, 98, 2219, 1801,
	2224, 12, 1540, 1541, 1799, 2164, 349, 873, 98, 11,
	1696, 2123, 1698, 1806, 98, 98, 98, 1818, 1807, 1827,
	1462, 1805, 1979, 351, 871, 872, 1849, 1006, 871, 872,
	1005, 98, 1826, 1816, 1811, 1848, 98, 1797, 98, 1744,
	98, 98, 98, 802, 9, 98, 98, 1687, 545, 8,
	1887, 1883, 577, 1828, 1618, 1688, 1586, 1839, 1886, 313,
	1862, 1334, 1686, 1006, 1006, 712, 313, 484, 484, 595,
	1859, 873, 1006, 1006, 1331, 1843, 1844, 1835, 4, 1330,
	1838, 802, 801, 767, 1272, 351, 923, 1909, 98, 803,
	1917, 2146, 2027, 1736, 1637, 933, 1903, 931, 527, 2001,
	456, 1087, 773, 838, 1975, 1006, 1845, 2147, 1923, 1702,
	1526, 1703, 2059, 2033, 1281, 934, 47, 1684, 617, 640,
	1864, 1678, 1398, 1397, 352, 1072, 1036, 1036, 639, 547,
	530, 1291, 1189, 699, 641, 1003, 642, 1039, 1004, 963,
	1038, 629, 1929, 1001, 1721, 724, 1348, 1245, 1263, 1509,
	927, 609, 621, 620, 1260, 730, 1980, 481, 546, 63,
	98, 98, 477, 1600, 1941, 1125, 1413, 545, 1122, 1694,
	1005, 1005, 551, 1537, 732, 1687, 1312, 98, 98, 1952,
	1687, 98, 1304, 1688, 1301, 799, 1950, 840, 1688, 98,
	1686, 1955, 915, 734, 1953, 1686, 98, 1349, 762, 1606,
	1366, 829, 1960, 1945, 98, 1133, 98, 572, 349, 98,
	741, 1782, 571, 484, 484, 1959, 1978, 98, 1977, 1393,
	760, 1060, 1792, 349, 1377, 1961, 1654, 972, 1991, 1987,
	908, 1037, 577, 976, 976, 1944, 907, 1687, 519, 2082,
	751, 750, 1405, 2006, 1447, 1688, 1988, 1006, 1989, 2220,
	2089, 1691, 1686, 584, 587, 2005, 2139, 82, 2007, 2098,
	1966, 1967, 470, 2025, 1972, 1473, 2032, 973, 313, 35,
	2023, 2004, 33, 30, 25, 23, 22, 1039, 1039, 1658,
	1038, 1038, 21, 98, 32, 2022, 20, 31, 19, 484,
	806, 484, 17, 809, 16, 14, 2015, 98, 1661, 10,
	545, 46, 2043, 45, 98, 2039, 44, 43, 569, 1687,
	1852, 42, 98, 41, 1656, 7, 6, 1688, 98, 313,
	2050, 5, 2, 1659, 1686, 547, 1, 98, 98, 2045,
	0, 1129, 0, 95, 98, 2057, 0, 0, 1657, 2058,
	0, 2077, 2084, 2066, 2062, 2069, 2076, 0, 2056, 0,
	0, 0, 0, 0, 2078, 2074, 0, 2087, 0, 98,
	98, 0, 0, 0, 1145, 0, 0, 0, 0, 0,
	1050, 0, 0, 0, 0, 2086, 577, 2079, 0, 0,
	0, 2101, 0, 0, 587, 98, 2053, 0, 577, 98,
	0, 0, 0, 0, 2114, 2065, 0, 545, 2112, 1660,
	0, 0, 0, 2115, 98, 0, 0, 0, 0, 0,
	2104, 0, 1036, 0, 349, 98, 98, 0, 0, 546,
	0, 2118, 0, 2121, 98, 1006, 98, 0, 0, 98,
	0, 349, 2117, 0, 2125, 2128, 2124, 2122, 563, 1037,
	0, 350, 2127, 313, 0, 2135, 2016, 2017, 313, 313,
	313, 2141, 979, 2145, 2155, 0, 1005, 2157, 1306, 2153,
	98, 2136, 2156, 98, 0, 1006, 0, 0, 1037, 313,
	313, 0, 1540, 1541, 1687, 2160, 2163, 95, 1965, 2161,
	2159, 95, 1688, 546, 0, 2158, 484, 0, 0, 1686,
	2176, 0, 2180, 98, 0, 98, 0, 0, 2191, 2189,
	2188, 0, 0, 1350, 0, 0, 0, 98, 587, 0,
	484, 587, 0, 484, 2190, 95, 484, 484, 484, 484,
	484, 2201, 2197, 2195, 0, 0, 1097, 2203, 0, 2009,
	0, 484, 484, 0, 0, 0, 0, 0, 470, 2209,
	0, 2211, 0, 0, 0, 2218, 2217, 0, 0, 1116,
	0, 0, 0, 2223, 0, 0, 0, 0, 0, 0,
	0, 0, 2227, 1039, 0, 0, 1038, 0, 569, 1037,
	1006, 595, 0, 0, 0, 0, 0, 0, 0, 1546,
	313, 0, 0, 0, 0, 0, 547, 0, 1157, 0,
	0, 0, 313, 0, 0, 871, 872, 0, 0, 0,
	313, 1178, 546, 0, 313, 1037, 1037, 1184, 351, 0,
	0, 0, 0, 0, 1037, 1037, 0, 0, 874, 0,
	1036, 0, 0, 0, 0, 0, 1387, 587, 1389, 0,
	0, 577, 0, 0, 0, 0, 0, 1556, 0, 0,
	0, 0, 873, 350, 0, 0, 0, 1037, 888, 1036,
	547, 0, 0, 0, 0, 0, 0, 0, 350, 0,
	0, 0, 0, 0, 1005, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 1441, 0, 871, 872, 0, 0,
	0, 600, 700, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1005, 0, 0, 0, 0, 0, 874,
	0, 0, 879, 0, 0, 1471, 0, 0, 0, 0,
	1557, 0, 0, 0, 0, 0, 1540, 1541, 0, 313,
	0, 1352, 1353, 873, 313, 0, 0, 313, 0, 484,
	484, 0, 484, 595, 0, 546, 0, 2142, 2143, 2144,
	0, 0, 0, 0, 0, 0, 2150, 0, 0, 0,
	1036, 0, 1306, 1306, 0, 0, 0, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 1039, 0, 0, 1038, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 1036, 1036, 0, 1037,
	0, 0, 0, 0, 1005, 1036, 1036, 0, 0, 0,
	1039, 0, 0, 1038, 1542, 1543, 1544, 1545, 1547, 1548,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 1306, 1306, 1546, 0, 351, 0, 0, 1036, 1385,
	1005, 1005, 546, 890, 0, 0, 738, 739, 0, 1005,
	1005, 889, 313, 313, 313, 0, 0, 313, 1394, 350,
	0, 1002, 0, 0, 595, 0, 0, 0, 0, 0,
	0, 0, 1595, 0, 0, 0, 350, 972, 0, 0,
	0, 0, 1005, 0, 0, 0, 972, 0, 0, 0,
	0, 1556, 313, 0, 0, 0, 0, 577, 0, 0,
	313, 1442, 1443, 1496, 1497, 0, 1157, 0, 0, 1450,
	0, 1039, 547, 0, 1038, 1455, 1456, 1458, 1460, 1461,
	0, 0, 0, 0, 890, 0, 0, 1468, 0, 0,
	1470, 313, 0, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 1639, 0, 0, 0, 1039, 1039, 0,
	1038, 1038, 833, 833, 0, 0, 1039, 1039, 0, 1038,
	1038, 842, 0, 0, 1557, 618, 61, 0, 0, 0,
	1432, 1563, 1564, 1565, 0, 0, 0, 1037, 0, 0,
	1036, 0, 0, 909, 910, 911, 912, 913, 0, 1039,
	0, 0, 1038, 921, 0, 0, 0, 1874, 0, 0,
	1867, 1002, 1002, 928, 0, 0, 1306, 1306, 1865, 547,
	0, 0, 1869, 0, 0, 0, 61, 1037, 875, 876,
	877, 878, 880, 881, 1005, 0, 351, 0, 0, 0,
	0, 1875, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 556, 0, 351, 564, 0, 0, 0, 0, 0,
	0, 61, 0, 1868, 0, 0, 1549, 1550, 1542, 1543,
	1544, 1545, 1547, 1548, 0, 1306, 1306, 1306, 1306, 1306,
	1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
	1306, 1306, 1306, 1306, 0, 1306, 0, 0, 313, 0,
	0, 0, 0, 313, 0, 1604, 0, 0, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 1037, 1385, 1385, 0, 0, 0, 0, 0,
	1870, 1039, 1871, 0, 1038, 0, 1540, 1541, 0, 1558,
	1559, 1560, 1350, 1432, 0, 871, 872, 1712, 1713, 0,
	0, 1116, 1907, 1116, 0, 484, 0, 0, 1036, 313,
	0, 0, 1873, 1645, 0, 0, 0, 0, 874, 0,
	0, 1876, 0, 0, 0, 0, 0, 0, 0, 1540,
	1541, 0, 1558, 1559, 1560, 0, 313, 0, 1432, 1555,
	0, 1432, 873, 0, 0, 1906, 0, 1123, 1036, 1128,
	0, 0, 1005, 1683, 0, 1135, 1758, 1759, 1760, 1761,
	1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771,
	1772, 1773, 1774, 1775, 1776, 0, 1780, 0, 0, 0,
	0, 0, 1555, 0, 1896, 0, 0, 0, 0, 0,
	1902, 0, 1005, 1546, 0, 0, 0, 0, 1872, 0,
	0, 0, 879, 0, 0, 0, 1198, 1199, 1200, 1201,
	1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
	1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1746, 1225,
	1561, 1227, 1228, 1229, 1230, 0, 1546, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 564, 0, 1253, 0,
	0, 1556, 0, 1036, 0, 0, 0, 0, 0, 1039,
	889, 0, 1038, 0, 0, 0, 0, 0, 0, 0,
	0, 1288, 1289, 1561, 0, 1302, 0, 1313, 1315, 1320,
	1323, 1324, 1325, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1556, 0, 0, 1005, 0, 1039,
	0, 0, 1038, 0, 0, 0, 0, 0, 313, 313,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 1432, 0, 1557, 1432, 0, 0, 1813, 0,
	0, 0, 1157, 890, 1116, 0, 0, 0, 0, 0,
	0, 1823, 0, 0, 0, 0, 0, 0, 1306, 0,
	0, 0, 0, 0, 313, 0, 0, 313, 0, 0,
	0, 1999, 0, 0, 0, 0, 0, 1557, 1856, 0,
	0, 0, 0, 0, 1860, 1861, 1157, 0, 0, 0,
	0, 1540, 1541, 0, 1558, 1559, 1560, 0, 0, 0,
	1683, 595, 0, 1540, 1541, 0, 1894, 1719, 1895, 0,
	313, 1897, 1898, 1306, 1039, 1901, 313, 1038, 0, 0,
	1552, 1553, 1554, 0, 0, 1551, 1549, 1550, 1542, 1543,
	1544, 1545, 1547, 1548, 0, 0, 883, 875, 876, 877,
	878, 880, 881, 0, 1555, 0, 0, 0, 0, 0,
	0, 2055, 0, 0, 0, 1002, 1555, 0, 1924, 0,
	0, 0, 0, 1552, 1553, 1554, 1432, 0, 1551, 1549,
	1550, 1542, 1543, 1544, 1545, 1547, 1548, 0, 0, 0,
	0, 833, 0, 0, 1002, 0, 0, 842, 0, 0,
	0, 556, 0, 0, 0, 0, 0, 0, 1546, 1998,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1546, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 0, 0, 0, 0, 0, 0, 0, 1683, 0,
	595, 1394, 0, 1683, 0, 1561, 918, 0, 920, 0,
	0, 0, 0, 0, 0, 924, 0, 313, 313, 0,
	0, 313, 0, 0, 2036, 0, 1556, 0, 0, 1856,
	0, 1480, 1481, 0, 0, 0, 1985, 1486, 1556, 0,
	0, 0, 0, 0, 1157, 0, 1990, 0, 0, 1992,
	0, 0, 0, 2138, 0, 1002, 0, 313, 0, 0,
	1683, 0, 0, 0, 0, 0, 0, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 1512, 0, 0, 1516,
	0, 0, 0, 0, 0, 2024, 0, 0, 0, 0,
	0, 1002, 1002, 0, 0, 1530, 0, 0, 0, 1557,
	1002, 1002, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1557, 0, 0, 0, 0, 0, 1350, 0, 0,
	0, 921, 0, 595, 0, 0, 0, 1320, 1320, 1320,
	0, 2103, 1683, 1002, 0, 0, 0, 313, 0, 0,
	0, 0, 0, 0, 2061, 0, 0, 0, 0, 0,
	1598, 0, 313, 0, 0, 0, 0, 0, 1856, 0,
	61, 0, 0, 0, 0, 0, 0, 595, 1856, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 0,
	0, 0, 1619, 0, 0, 1552, 1553, 1554, 0, 0,
	1551, 1549, 1550, 1542, 1543, 1544, 1545, 1547, 1548, 2091,
	2092, 0, 1551, 1549, 1550, 1542, 1543, 1544, 1545, 1547,
	1548, 0, 0, 0, 0, 556, 0, 0, 556, 556,
	0, 0, 0, 0, 0, 2110, 1647, 0, 0, 2111,
	0, 1135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 595, 0, 0, 0, 0, 61,
	0, 0, 61, 0, 0, 1856, 595, 0, 0, 0,
	0, 0, 1680, 0, 2134, 0, 595, 0, 0, 313,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1710, 0, 0, 1711, 0, 0, 0, 1683, 0, 0,
	2061, 0, 1243, 1856, 0, 1716, 0, 0, 0, 0,
	0, 0, 0, 0, 1725, 0, 0, 0, 0, 0,
	0, 0, 1729, 0, 0, 1619, 0, 0, 0, 0,
	0, 0, 0, 313, 0, 595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1753, 0, 2194, 0, 1755,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 61, 0, 61, 894, 0, 0, 0, 0, 0,
	0, 874, 1786, 1787, 905, 0, 0, 0, 0, 61,
	0, 1793, 1794, 1795, 61, 0, 0, 0, 1540, 1541,
	0, 1558, 1559, 1560, 0, 873, 0, 0, 833, 0,
	0, 888, 0, 0, 1718, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 0, 894, 0, 0, 0, 0, 0, 0, 874,
	0, 1555, 905, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 898, 906, 0, 0, 0, 0,
	0, 0, 61, 1002, 0, 0, 1884, 0, 0, 0,
	0, 0, 904, 0, 0, 1546, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	0, 0, 0, 889, 0, 1908, 0, 0, 0, 1911,
	1912, 0, 0, 879, 1914, 0, 0, 1433, 0, 0,
	0, 1916, 1561, 1918, 0, 0, 0, 0, 895, 0,
	0, 0, 898, 906, 0, 0, 0, 0, 0, 1925,
	0, 0, 0, 1556, 0, 0, 61, 0, 0, 61,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 889, 1934, 0, 0, 0, 890, 0, 1002, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 0, 895, 0, 0, 0,
	1243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1557, 0, 0, 0,
	920, 0, 0, 0, 1964, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	899, 0, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 0, 0, 0,
	0, 0, 2014, 1581, 0, 0, 920, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2028, 2029, 0,
	0, 0, 1552, 1553, 1554, 0, 0, 1551, 1549, 1550,
	1542, 1543, 1544, 1545, 1547, 1548, 0, 0, 564, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 2041, 0,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 0, 0, 0, 0, 0, 0,
	0, 1580, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 2064, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 874, 0, 0, 905, 61,
	0, 0, 0, 61, 0, 0, 871, 872, 2081, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 873,
	61, 0, 894, 0, 0, 888, 61, 0, 0, 874,
	0, 1669, 905, 0, 0, 0, 0, 0, 0, 0,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 873, 0, 0, 0, 894, 842, 888,
	0, 0, 0, 0, 874, 0, 0, 905, 0, 0,
	0, 0, 1540, 1541, 0, 1558, 1559, 1560, 0, 879,
	0, 0, 0, 0, 0, 0, 1540, 1541, 873, 1558,
	1559, 1560, 0, 0, 888, 0, 0, 0, 898, 906,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 879, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 1555, 0, 0, 0, 0,
	0, 896, 898, 906, 0, 0, 0, 889, 0, 1555,
	0, 0, 0, 0, 0, 0, 0, 0, 879, 0,
	904, 2177, 0, 0, 0, 0, 0, 0, 0, 2187,
	2187, 0, 895, 0, 0, 896, 0, 898, 906, 0,
	0, 889, 0, 0, 0, 0, 0, 0, 0, 1546,
	0, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 1546, 0, 2187, 895, 0, 0, 1562,
	896, 0, 0, 0, 1433, 0, 889, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 1561, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 0,
	2187, 895, 0, 0, 0, 0, 0, 1556, 0, 0,
	0, 0, 0, 0, 890, 36, 0, 0, 0, 1433,
	0, 1556, 1433, 0, 0, 0, 37, 65, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 40,
	0, 74, 0, 897, 0, 899, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	1557, 54, 0, 0, 0, 48, 0, 1532, 0, 49,
	0, 0, 68, 0, 1557, 0, 53, 897, 50, 0,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 0, 0, 55, 0, 2131, 0,
	0, 0, 51, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	0, 0, 0, 2106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1552, 1553, 1554, 61,
	0, 1551, 1549, 1550, 1542, 1543, 1544, 1545, 1547, 1548,
	1552, 1553, 1554, 0, 0, 1551, 1549, 1550, 1542, 1543,
	1544, 1545, 1547, 1548, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 1433, 56, 0, 1433, 0, 0, 0,
	52, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 71,
	38, 0, 57, 0, 58, 0, 69, 0, 0, 0,
	0, 59, 0, 0, 0, 81, 0, 0, 0, 0,
	0, 0, 62, 0, 0, 64, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 2046, 0, 0, 0, 0, 79, 0, 0,
	61, 0, 0, 0, 80, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 367, 102, 368, 369, 370, 371, 253, 372,
	373, 374, 375, 103, 104, 105, 254, 255, 256, 257,
	106, 258, 259, 376, 107, 260, 261, 108, 109, 377,
	378, 262, 263, 264, 379, 110, 265, 380, 353, 381,
	111, 112, 113, 920, 114, 382, 115, 116, 117, 383,
	354, 118, 119, 384, 385, 387, 386, 388, 389, 390,
	120, 121, 314, 122, 266, 123, 267, 268, 391, 124,
	392, 125, 393, 126, 394, 395, 127, 128, 396, 129,
	397, 0, 398, 269, 130, 131, 132, 270, 271, 399,
	400, 401, 133, 134, 272, 273, 274, 0, 135, 402,
	136, 403, 404, 355, 405, 137, 275, 406, 276, 407,
	138, 139, 140, 141, 277, 278, 357, 408, 145, 409,
	142, 410, 356, 143, 279, 144, 280, 281, 282, 283,
	284, 411, 285, 412, 358, 146, 147, 148, 359, 149,
	150, 151, 413, 153, 152, 414, 286, 360, 154, 361,
	415, 155, 416, 417, 156, 0, 157, 158, 159, 161,
	287, 160, 362, 162, 163, 165, 164, 418, 419, 420,
	288, 166, 289, 167, 168, 421, 169, 422, 423, 170,
	424, 425, 171, 290, 363, 172, 364, 291, 173, 174,
	175, 176, 177, 426, 178, 292, 179, 293, 180, 427,
	181, 182, 183, 184, 185, 294, 186, 187, 428, 188,
	189, 190, 191, 192, 194, 195, 193, 196, 197, 198,
	199, 429, 200, 365, 201, 202, 295, 203, 0, 207,
	208, 209, 210, 430, 212, 296, 211, 213, 214, 431,
	215, 204, 205, 216, 366, 217, 297, 298, 218, 432,
	224, 219, 220, 206, 221, 223, 299, 222, 300, 433,
	225, 434, 226, 227, 228, 229, 230, 231, 232, 435,
	301, 302, 303, 436, 437, 233, 234, 304, 305, 438,
	235, 236, 237, 238, 439, 440, 239, 240, 241, 242,
	441, 243, 442, 306, 244, 245, 246, 307, 308, 443,
	444, 247, 445, 446, 447, 448, 248, 249, 250, 251,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 0, 0, 1850,
	0, 0, 0, 0, 0, 0, 0, 1851, 100, 101,
	367, 102, 368, 369, 370, 371, 253, 372, 373, 374,
	375, 103, 104, 105, 254, 255, 256, 257, 106, 258,
	259, 376, 107, 260, 261, 108, 109, 377, 378, 262,
	263, 264, 379, 110, 265, 380, 353, 381, 111, 112,
	113, 0, 114, 382, 115, 116, 117, 383, 354, 118,
	119, 384, 385, 387, 386, 388, 389, 390, 120, 121,
	314, 122, 266, 123, 267, 268, 391, 124, 392, 125,
	393, 126, 394, 395, 127, 128, 396, 129, 397, 0,
	398, 269, 130, 131, 132, 270, 271, 399, 400, 401,
	133, 134, 272, 273, 274, 0, 135, 402, 136, 403,
	404, 355, 405, 137, 275, 406, 276, 407, 138, 139,
	140, 141, 277, 278, 357, 408, 145, 409, 142, 410,
	356, 143, 279, 144, 280, 281, 282, 283, 284, 411,
	285, 412, 358, 146, 147, 148, 359, 149, 150, 151,
	413, 153, 152, 414, 286, 360, 154, 361, 415, 155,
	416, 417, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 418, 419, 420, 288, 166,
	289, 167, 168, 421, 169, 422, 423, 170, 424, 425,
	171, 290, 363, 172, 364, 291, 173, 174, 175, 176,
	177, 426, 178, 292, 179, 293, 180, 427, 181, 182,
	183, 184, 185, 294, 186, 187, 428, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 429,
	200, 365, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 430, 212, 296, 211, 213, 214, 431, 215, 204,
	205, 216, 366, 217, 297, 298, 218, 432, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 433, 225, 434,
	226, 227, 228, 229, 230, 231, 232, 435, 301, 302,
	303, 436, 437, 233, 234, 304, 305, 438, 235, 236,
	237, 238, 439, 440, 239, 240, 241, 242, 441, 243,
	442, 306, 244, 245, 246, 307, 308, 443, 444, 247,
	445, 446, 447, 448, 248, 249, 250, 251, 252, 0,
	0, 0, 348, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2126, 100, 101,
	367, 102, 368, 369, 370, 371, 253, 372, 373, 374,
	375, 103, 104, 105, 254, 255, 256, 257, 106, 258,
	259, 376, 107, 260, 261, 108, 109, 377, 378, 262,
	263, 264, 379, 110, 265, 380, 353, 381, 111, 112,
	113, 0, 114, 382, 115, 116, 117, 383, 354, 118,
	119, 384, 385, 387, 386, 388, 389, 390, 120, 121,
	314, 122, 266, 123, 267, 268, 391, 124, 392, 125,
	393, 126, 394, 395, 127, 128, 396, 129, 397, 0,
	398, 269, 130, 131, 132, 270, 271, 399, 400, 401,
	133, 134, 272, 273, 274, 0, 135, 402, 136, 403,
	404, 355, 405, 137, 275, 406, 276, 407, 138, 139,
	140, 141, 277, 278, 357, 408, 145, 409, 142, 410,
	356, 143, 279, 144, 280, 281, 282, 283, 284, 411,
	285, 412, 358, 146, 147, 148, 359, 149, 150, 151,
	413, 153, 152, 414, 286, 360, 154, 361, 415, 155,
	416, 417, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 418, 419, 420, 288, 166,
	289, 167, 168, 421, 169, 422, 423, 170, 424, 425,
	171, 290, 363, 172, 364, 291, 173, 174, 175, 176,
	177, 426, 178, 292, 179, 293, 180, 427, 181, 182,
	183, 184, 185, 294, 186, 187, 428, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 429,
	200, 365, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 430, 212, 296, 211, 213, 214, 431, 215, 204,
	205, 216, 366, 217, 297, 298, 218, 432, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 433, 225, 434,
	226, 227, 228, 229, 230, 231, 232, 435, 301, 302,
	303, 436, 437, 233, 234, 304, 305, 438, 235, 236,
	237, 238, 439, 440, 239, 240, 241, 242, 441, 243,
	442, 306, 244, 245, 246, 307, 308, 443, 444, 247,
	445, 446, 447, 448, 248, 249, 250, 251, 252, 348,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 0, 100, 101, 367, 102, 368,
	369, 370, 371, 253, 372, 373, 374, 375, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 376, 107,
	260, 261, 108, 109, 377, 378, 262, 263, 264, 379,
	110, 265, 380, 353, 381, 111, 112, 113, 0, 114,
	382, 115, 116, 117, 383, 354, 118, 119, 384, 385,
	387, 386, 388, 389, 390, 120, 121, 314, 122, 266,
	123, 267, 268, 391, 124, 392, 125, 393, 126, 394,
	395, 127, 128, 396, 129, 397, 0, 398, 269, 130,
	131, 132, 270, 271, 399, 400, 401, 133, 134, 272,
	273, 274, 0, 135, 402, 136, 403, 404, 355, 405,
	137, 275, 406, 276, 407, 138, 139, 140, 141, 277,
	278, 357, 408, 145, 409, 142, 410, 356, 143, 279,
	144, 280, 281, 282, 283, 284, 411, 285, 412, 358,
	146, 147, 148, 359, 149, 150, 151, 413, 153, 152,
	414, 286, 360, 154, 361, 415, 155, 416, 417, 156,
	0, 157, 158, 159, 161, 287, 160, 362, 162, 163,
	165, 164, 418, 419, 420, 288, 166, 289, 167, 168,
	421, 169, 422, 423, 170, 424, 425, 171, 290, 363,
	172, 364, 291, 173, 174, 175, 176, 177, 426, 178,
	292, 179, 293, 180, 427, 181, 182, 183, 184, 185,
	294, 186, 187, 428, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 429, 200, 365, 201,
	202, 295, 203, 0, 207, 208, 209, 210, 430, 212,
	296, 211, 213, 214, 431, 215, 204, 205, 216, 366,
	217, 297, 298, 218, 432, 224, 219, 220, 206, 221,
	223, 299, 222, 300, 433, 225, 434, 226, 227, 228,
	229, 230, 231, 232, 435, 301, 302, 303, 436, 437,
	233, 234, 304, 305, 438, 235, 236, 237, 238, 439,
	440, 239, 240, 241, 242, 441, 243, 442, 306, 244,
	245, 246, 307, 308, 443, 444, 247, 445, 446, 447,
	448, 248, 249, 250, 251, 252, 637, 626, 627, 624,
	625, 616, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 0, 102, 0, 0, 0, 0,
	654, 619, 0, 0, 0, 103, 104, 105, 254, 669,
	256, 670, 106, 671, 672, 0, 107, 260, 261, 108,
	109, 622, 653, 673, 674, 264, 0, 110, 665, 0,
	645, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 354, 118, 119, 0, 646, 647, 649, 0,
	648, 650, 120, 121, 314, 122, 675, 123, 676, 677,
	843, 124, 0, 125, 0, 126, 0, 0, 668, 128,
	0, 129, 0, 0, 0, 610, 130, 131, 132, 655,
	656, 633, 0, 0, 133, 134, 678, 679, 680, 0,
	135, 0, 136, 0, 0, 355, 0, 137, 666, 0,
	276, 0, 138, 139, 140, 141, 662, 664, 357, 0,
	145, 0, 142, 0, 356, 143, 681, 144, 682, 683,
	684, 685, 686, 0, 644, 0, 358, 146, 147, 148,
	359, 149, 150, 151, 0, 153, 152, 0, 667, 360,
	154, 361, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 362, 162, 163, 165, 164, 605,
	0, 634, 663, 166, 687, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 363, 172, 364, 657,
	173, 174, 175, 176, 177, 0, 178, 658, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 688, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 365, 201, 202, 611, 203,
	0, 207, 208, 209, 210, 81, 212, 296, 211, 213,
	214, 651, 215, 204, 205, 216, 366, 217, 689, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 690, 222,
	659, 0, 225, 83, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 691, 692, 0, 0, 233, 234, 660,
	661, 632, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 652, 243, 0, 306, 244, 245, 246, 727,
	693, 0, 0, 247, 0, 0, 0, 79, 248, 249,
	250, 251, 252, 606, 80, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 602, 603, 637, 626, 627, 624,
	625, 616, 0, 612, 0, 0, 0, 0, 615, 0,
	0, 0, 100, 101, 1269, 102, 0, 0, 0, 0,
	654, 619, 0, 0, 0, 103, 104, 105, 254, 669,
	256, 670, 106, 671, 672, 0, 107, 260, 261, 108,
	109, 622, 653, 673, 674, 264, 0, 110, 665, 0,
	645, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 354, 118, 119, 0, 646, 647, 649, 0,
	648, 650, 120, 121, 314, 122, 675, 123, 676, 677,
	0, 124, 0, 125, 0, 126, 1270, 0, 668, 128,
	0, 129, 0, 0, 0, 610, 130, 131, 132, 655,
	656, 633, 0, 0, 133, 134, 678, 679, 680, 0,
	135, 0, 136, 0, 0, 355, 0, 137, 666, 0,
	276, 0, 138, 139, 140, 141, 662, 664, 357, 0,
	145, 0, 142, 0, 356, 143, 681, 144, 682, 683,
	684, 685, 686, 0, 644, 0, 358, 146, 147, 148,
	359, 149, 150, 151, 0, 153, 152, 0, 667, 360,
	154, 361, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 362, 162, 163, 165, 164, 605,
	0, 634, 663, 166, 687, 167, 168, 0, 169, 0,
	0, 170, 0, 0, 171, 290, 363, 172, 364, 657,
	173, 174, 175, 176, 177, 0, 178, 658, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 688, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 365, 201, 202, 611, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 651, 215, 204, 205, 216, 366, 217, 689, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 690, 222,
	659, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 691, 692, 0, 0, 233, 234, 660,
	661, 632, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 652, 243, 0, 306, 244, 245, 246, 307,
	693, 1268, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 606, 0, 0, 0, 0, 0, 604,
	0, 0, 0, 0, 602, 603, 1271, 637, 626, 627,
	624, 625, 616, 612, 1266, 0, 0, 0, 615, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 654, 619, 0, 0, 0, 103, 104, 105, 254,
	669, 256, 670, 106, 671, 672, 0, 107, 260, 261,
	108, 109, 622, 653, 673, 674, 264, 0, 110, 665,
	0, 645, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 354, 118, 119, 0, 646, 647, 649,
	0, 648, 650, 120, 121, 314, 122, 675, 123, 676,
	677, 0, 124, 0, 125, 0, 126, 0, 0, 668,
	128, 0, 129, 0, 0, 0, 610, 130, 131, 132,
	655, 656, 633, 0, 0, 133, 134, 678, 679, 680,
	0, 135, 0, 136, 0, 0, 355, 0, 137, 666,
	0, 276, 0, 138, 139, 140, 141, 662, 664, 357,
	0, 145, 0, 142, 0, 356, 143, 681, 144, 682,
	683, 684, 685, 686, 0, 644, 0, 358, 146, 147,
	148, 359, 149, 150, 151, 0, 153, 152, 0, 667,
	360, 154, 361, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 362, 162, 163, 165, 164,
	605, 0, 634, 663, 166, 687, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 363, 172, 364,
	657, 173, 174, 175, 176, 177, 0, 178, 658, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 688, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 365, 201, 202, 611,
	203, 0, 207, 208, 209, 210, 81, 212, 296, 211,
	213, 214, 651, 215, 204, 205, 216, 366, 217, 689,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 690,
	222, 659, 0, 225, 83, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 691, 692, 0, 0, 233, 234,
	660, 661, 632, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 652, 243, 0, 306, 244, 245, 246,
	727, 693, 0, 0, 247, 0, 0, 0, 79, 248,
	249, 250, 251, 252, 606, 80, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 602, 603, 637, 626, 627,
	624, 625, 616, 0, 612, 0, 0, 0, 0, 615,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 654, 619, 0, 0, 0, 103, 104, 105, 254,
	669, 256, 670, 106, 671, 672, 1316, 107, 260, 261,
	108, 109, 622, 653, 673, 674, 264, 0, 110, 665,
	0, 645, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 354, 118, 119, 0, 646, 647, 649,
	0, 648, 650, 120, 121, 314, 122, 675, 123, 676,
	677, 0, 124, 0, 125, 0, 126, 0, 0, 668,
	128, 0, 129, 0, 0, 0, 610, 130, 131, 132,
	655, 656, 633, 0, 0, 133, 134, 678, 679, 680,
	0, 135, 0, 136, 0, 1321, 355, 0, 137, 666,
	0, 276, 0, 138, 139, 140, 141, 662, 664, 357,
	0, 145, 0, 142, 0, 356, 143, 681, 144, 682,
	683, 684, 685, 686, 0, 644, 0, 358, 146, 147,
	148, 359, 149, 150, 151, 0, 153, 152, 1317, 667,
	360, 154, 361, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 362, 162, 163, 165, 164,
	605, 0, 634, 663, 166, 687, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 363, 172, 364,
	657, 173, 174, 175, 176, 177, 0, 178, 658, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 688, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 365, 201, 202, 611,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 651, 215, 204, 205, 216, 366, 217, 689,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 690,
	222, 659, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 691, 692, 0, 1318, 233, 234,
	660, 661, 632, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 652, 243, 0, 306, 244, 245, 246,
	307, 693, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 606, 0, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 602, 603, 637, 626, 627,
	624, 625, 616, 0, 612, 0, 0, 0, 0, 615,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 654, 619, 0, 0, 0, 103, 104, 105, 254,
	669, 256, 670, 106, 671, 672, 0, 107, 260, 261,
	108, 109, 622, 653, 673, 674, 264, 0, 110, 665,
	0, 645, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 354, 118, 119, 0, 646, 647, 649,
	0, 648, 650, 120, 121, 314, 122, 675, 123, 676,
	677, 0, 124, 0, 125, 0, 126, 0, 0, 668,
	128, 0, 129, 0, 0, 0, 610, 130, 131, 132,
	655, 656, 633, 0, 0, 133, 134, 678, 679, 680,
	0, 135, 0, 136, 0, 0, 355, 0, 137, 666,
	0, 276, 0, 138, 139, 140, 141, 662, 664, 357,
	0, 145, 0, 142, 0, 356, 143, 681, 144, 682,
	683, 684, 685, 686, 0, 644, 0, 358, 146, 147,
	148, 359, 149, 150, 151, 0, 153, 152, 0, 667,
	360, 154, 361, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 362, 162, 163, 165, 164,
	605, 1800, 634, 663, 166, 687, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 363, 172, 364,
	657, 173, 174, 175, 176, 177, 0, 178, 658, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 688, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 365, 201, 202, 611,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 651, 215, 204, 205, 216, 366, 217, 689,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 690,
	222, 659, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 691, 692, 0, 0, 233, 234,
	660, 661, 632, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 652, 243, 0, 306, 244, 245, 246,
	307, 693, 0, 0, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 606, 0, 0, 0, 0, 0,
	604, 0, 0, 0, 0, 602, 603, 834, 637, 626,
	627, 624, 625, 616, 612, 0, 0, 0, 0, 615,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 654, 619, 0, 0, 0, 103, 104, 105,
	254, 669, 256, 670, 106, 671, 672, 0, 107, 260,
	261, 108, 109, 622, 653, 673, 674, 264, 0, 110,
	665, 0, 645, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 354, 118, 119, 0, 646, 647,
	649, 0, 648, 650, 120, 121, 314, 122, 675, 123,
	676, 677, 0, 124, 0, 125, 0, 126, 0, 0,
	668, 128, 0, 129, 0, 0, 0, 610, 130, 131,
	132, 655, 656, 633, 0, 0, 133, 134, 678, 679,
	680, 0, 135, 0, 136, 0, 0, 355, 0, 137,
	666, 0, 276, 0, 138, 139, 140, 141, 662, 664,
	357, 0, 145, 0, 142, 0, 356, 143, 681, 144,
	682, 683, 684, 685, 686, 0, 644, 0, 358, 146,
	147, 148, 359, 149, 150, 151, 0, 153, 152, 0,
	667, 360, 154, 361, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 362, 162, 163, 165,
	164, 605, 0, 634, 663, 166, 687, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 363, 172,
	364, 657, 173, 174, 175, 176, 177, 0, 178, 658,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 688,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 365, 201, 202,
	611, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 651, 215, 204, 205, 216, 366, 217,
	689, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	690, 222, 659, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 691, 692, 0, 0, 233,
	234, 660, 661, 632, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 652, 243, 0, 306, 244, 245,
	246, 307, 693, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 606, 0, 0, 0, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 0,
	0, 0, 0, 926, 1261, 612, 0, 0, 0, 0,
	615, 637, 626, 627, 624, 625, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 654, 619, 0, 0, 0,
	103, 104, 105, 254, 669, 256, 670, 106, 671, 672,
	0, 107, 260, 261, 108, 109, 622, 653, 673, 674,
	264, 0, 110, 665, 0, 645, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 646, 647, 649, 0, 648, 650, 120, 121, 314,
	122, 675, 123, 676, 677, 843, 124, 0, 125, 0,
	126, 0, 0, 668, 128, 0, 129, 0, 0, 0,
	610, 130, 131, 132, 655, 656, 633, 0, 0, 133,
	134, 678, 679, 680, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 666, 0, 276, 0, 138, 139, 140,
	141, 662, 664, 357, 0, 145, 0, 142, 0, 356,
	143, 681, 144, 682, 683, 684, 685, 686, 0, 644,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 667, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 605, 0, 634, 663, 166, 687,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 657, 173, 174, 175, 176, 177,
	0, 178, 658, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 688, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 611, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 651, 215, 204, 205,
	216, 366, 217, 689, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 690, 222, 659, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 691, 692,
	0, 0, 233, 234, 660, 661, 632, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 652, 243, 0,
	306, 244, 245, 246, 307, 693, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 606, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 637, 626, 627, 624, 625, 616, 0, 612, 0,
	0, 0, 0, 615, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 654, 619, 0, 0, 0,
	103, 104, 105, 254, 669, 256, 670, 106, 671, 672,
	0, 107, 260, 261, 108, 109, 622, 653, 673, 674,
	264, 0, 110, 665, 0, 645, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 646, 647, 649, 0, 648, 650, 120, 121, 314,
	122, 675, 123, 676, 677, 0, 124, 0, 125, 0,
	126, 0, 0, 668, 128, 0, 129, 0, 0, 0,
	610, 130, 131, 132, 655, 656, 633, 0, 0, 133,
	134, 678, 679, 680, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 666, 0, 276, 0, 138, 139, 140,
	141, 662, 664, 357, 0, 145, 0, 142, 0, 356,
	143, 681, 144, 682, 683, 684, 685, 686, 0, 644,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 667, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 605, 0, 634, 663, 166, 687,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 657, 173, 174, 175, 176, 177,
	0, 178, 658, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 688, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 611, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 651, 215, 204, 205,
	216, 366, 217, 689, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 690, 222, 659, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 691, 692,
	0, 0, 233, 234, 660, 661, 632, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 652, 243, 0,
	306, 244, 245, 246, 307, 693, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 606, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 637, 626, 627, 624, 625, 616, 0, 612, 1783,
	0, 0, 0, 615, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 654, 619, 0, 0, 0,
	103, 104, 105, 254, 669, 256, 670, 106, 671, 672,
	0, 107, 260, 261, 108, 109, 622, 653, 673, 674,
	264, 0, 110, 665, 0, 645, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 646, 647, 649, 0, 648, 650, 120, 121, 314,
	122, 675, 123, 676, 677, 0, 124, 0, 125, 0,
	126, 0, 0, 668, 128, 0, 129, 0, 0, 0,
	610, 130, 131, 132, 655, 656, 633, 0, 0, 133,
	134, 678, 679, 680, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 666, 0, 276, 0, 138, 139, 140,
	141, 662, 664, 357, 0, 145, 0, 142, 0, 356,
	143, 681, 144, 682, 683, 684, 685, 686, 0, 644,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 667, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 605, 0, 634, 663, 166, 687,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 657, 173, 174, 175, 176, 177,
	0, 178, 658, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 688, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 611, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 651, 215, 204, 205,
	216, 366, 217, 689, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 690, 222, 659, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 691, 692,
	0, 0, 233, 234, 660, 661, 632, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 652, 243, 0,
	306, 244, 245, 246, 307, 693, 1732, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 606, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 637, 626, 627, 624, 625, 616, 0, 612, 0,
	0, 0, 0, 615, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 654, 619, 0, 0, 0,
	103, 104, 105, 254, 669, 256, 670, 106, 671, 672,
	0, 107, 260, 261, 108, 109, 622, 653, 673, 674,
	264, 0, 110, 665, 0, 645, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 646, 647, 649, 0, 648, 650, 120, 121, 314,
	122, 675, 123, 676, 677, 0, 124, 0, 125, 0,
	126, 0, 0, 668, 128, 0, 129, 0, 0, 0,
	610, 130, 131, 132, 655, 656, 633, 0, 0, 133,
	134, 678, 679, 680, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 666, 0, 276, 0, 138, 139, 140,
	141, 662, 664, 357, 0, 145, 0, 142, 0, 356,
	143, 681, 144, 682, 683, 684, 685, 686, 0, 644,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 667, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 605, 0, 634, 663, 166, 687,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 657, 173, 174, 175, 176, 177,
	0, 178, 658, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 688, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 611, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 651, 215, 204, 205,
	216, 366, 217, 689, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 690, 222, 659, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 691, 692,
	0, 0, 233, 234, 660, 661, 632, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 652, 243, 0,
	306, 244, 245, 246, 307, 693, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 606, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 637, 626, 627, 624, 625, 616, 0, 612, 1722,
	0, 0, 0, 615, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 654, 619, 0, 0, 0,
	103, 104, 105, 254, 669, 256, 670, 106, 671, 672,
	0, 107, 260, 261, 108, 109, 622, 653, 673, 674,
	264, 0, 110, 665, 0, 645, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 646, 647, 649, 0, 648, 650, 120, 121, 314,
	122, 675, 123, 676, 677, 0, 124, 0, 125, 0,
	126, 0, 0, 668, 128, 0, 129, 0, 0, 0,
	610, 130, 131, 132, 655, 656, 633, 0, 0, 133,
	134, 678, 679, 680, 0, 135, 0, 136, 0, 1321,
	355, 0, 137, 666, 0, 276, 0, 138, 139, 140,
	141, 662, 664, 357, 0, 145, 0, 142, 0, 356,
	143, 681, 144, 682, 683, 684, 685, 686, 0, 644,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 667, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 605, 0, 634, 663, 166, 687,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 657, 173, 174, 175, 176, 177,
	0, 178, 658, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 688, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 611, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 651, 215, 204, 205,
	216, 366, 217, 689, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 690, 222, 659, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 691, 692,
	0, 0, 233, 234, 660, 661, 632, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 652, 243, 0,
	306, 244, 245, 246, 307, 693, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 606, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 637, 626, 627, 624, 625, 616, 0, 612, 0,
	0, 0, 0, 615, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 654, 619, 0, 0, 0,
	103, 104, 105, 254, 669, 256, 670, 106, 671, 672,
	0, 107, 260, 261, 108, 109, 622, 653, 673, 674,
	264, 0, 110, 665, 0, 645, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 119,
	0, 646, 647, 649, 0, 648, 650, 120, 121, 314,
	122, 675, 123, 676, 677, 0, 124, 0, 125, 0,
	126, 0, 0, 668, 128, 0, 129, 0, 0, 0,
	610, 130, 131, 132, 655, 656, 633, 0, 0, 133,
	134, 678, 679, 680, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 666, 0, 276, 0, 138, 139, 140,
	141, 662, 664, 357, 0, 145, 0, 142, 0, 356,
	143, 681, 144, 682, 683, 684, 685, 686, 0, 644,
	0, 358, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 667, 360, 154, 361, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 605, 0, 634, 663, 166, 687,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 657, 173, 174, 175, 176, 177,
	0, 178, 658, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 688, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 611, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 651, 215, 204, 205,
	216, 366, 217, 689, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 690, 222, 659, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 691, 692,
	0, 0, 233, 234, 660, 661, 632, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 652, 243, 0,
	306, 244, 245, 246, 307, 693, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 606, 0,
	0, 0, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 834, 637, 626, 627, 624, 625, 616, 612, 0,
	0, 0, 0, 615, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	1256, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	1124, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	2186, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	2185, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 2184, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	2186, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	2185, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 1293, 626, 627, 624, 625, 616, 0, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 1296, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	1297, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 1298, 1295, 161, 287, 160,
	362, 162, 163, 165, 164, 605, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 611, 203, 0, 207, 208, 209,
	1299, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 1294, 252, 606,
	0, 0, 0, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 637, 626, 627, 624, 625, 616, 0, 612,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 622, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 610, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 0, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 1311, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 0, 0, 0, 0, 1309, 0, 0, 0, 0,
	1307, 1308, 637, 626, 627, 624, 625, 616, 0, 1310,
	0, 0, 0, 0, 615, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 654, 619, 0, 0,
	0, 103, 104, 105, 254, 669, 256, 670, 106, 671,
	672, 0, 107, 260, 261, 108, 109, 0, 653, 673,
	674, 264, 0, 110, 665, 0, 645, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 354, 118,
	119, 0, 646, 647, 649, 0, 648, 650, 120, 121,
	314, 122, 675, 123, 676, 677, 0, 124, 0, 125,
	0, 126, 0, 0, 668, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 655, 656, 633, 0, 0,
	133, 134, 678, 679, 680, 0, 135, 0, 136, 0,
	0, 355, 0, 137, 666, 0, 276, 0, 138, 139,
	140, 141, 662, 664, 357, 0, 145, 0, 142, 0,
	356, 143, 681, 144, 682, 683, 684, 685, 686, 0,
	644, 0, 358, 146, 147, 148, 359, 149, 150, 151,
	0, 153, 152, 0, 667, 360, 154, 361, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	362, 162, 163, 165, 164, 0, 0, 634, 663, 166,
	687, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 363, 172, 364, 657, 173, 174, 175, 176,
	177, 0, 178, 658, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 688, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 365, 201, 202, 1311, 203, 0, 207, 208, 209,
	210, 0, 212, 296, 211, 213, 214, 651, 215, 204,
	205, 216, 366, 217, 689, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 690, 222, 659, 0, 225, 0,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 691,
	692, 0, 0, 233, 234, 660, 661, 632, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 652, 243,
	0, 306, 244, 245, 246, 307, 693, 0, 0, 247,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 0,
	0, 637, 626, 627, 624, 625, 616, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 100, 101, 1310,
	102, 0, 0, 0, 615, 654, 619, 0, 0, 0,
	103, 104, 105, 0, 669, 256, 670, 106, 671, 672,
	0, 107, 260, 261, 108, 109, 622, 653, 673, 674,
	264, 0, 110, 665, 0, 645, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 354, 118, 2186,
	0, 646, 647, 649, 0, 648, 650, 120, 121, 314,
	122, 675, 123, 676, 677, 0, 124, 0, 125, 0,
	126, 0, 0, 668, 128, 0, 129, 0, 0, 0,
	610, 130, 131, 132, 655, 656, 633, 0, 0, 133,
	134, 678, 679, 680, 0, 135, 0, 136, 0, 0,
	355, 0, 137, 666, 0, 276, 0, 138, 139, 140,
	141, 662, 664, 0, 0, 145, 0, 142, 0, 356,
	143, 681, 144, 682, 683, 684, 685, 686, 0, 644,
	0, 0, 146, 147, 148, 359, 149, 150, 151, 0,
	153, 152, 0, 667, 360, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 362,
	162, 163, 165, 164, 605, 0, 634, 663, 166, 687,
	167, 168, 0, 169, 0, 0, 170, 0, 0, 171,
	290, 363, 172, 364, 657, 173, 174, 175, 176, 177,
	0, 178, 658, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 688, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	365, 201, 202, 611, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 651, 215, 204, 205,
	216, 0, 217, 689, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 690, 222, 659, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 691, 692,
	0, 0, 233, 234, 660, 661, 632, 235, 236, 2185,
	238, 0, 0, 239, 240, 241, 242, 652, 243, 0,
	306, 244, 245, 246, 307, 693, 0, 0, 247, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 637, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 602,
	603, 0, 0, 0, 100, 101, 0, 102, 612, 0,
	0, 0, 654, 615, 0, 0, 0, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 0, 107, 260,
	261, 108, 109, 0, 653, 262, 263, 264, 0, 110,
	665, 0, 645, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 354, 118, 119, 0, 646, 647,
	649, 0, 648, 650, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 655, 656, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 355, 0, 137,
	666, 0, 276, 0, 138, 139, 140, 141, 662, 664,
	357, 0, 145, 0, 142, 0, 356, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 358, 146,
	147, 148, 359, 149, 150, 151, 0, 153, 152, 0,
	667, 360, 154, 361, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 362, 162, 163, 165,
	164, 0, 0, 0, 663, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 363, 172,
	364, 657, 173, 174, 175, 176, 177, 0, 178, 658,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 365, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 651, 215, 204, 205, 216, 366, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 659, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 660, 661, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 652, 243, 0, 306, 244, 245,
	246, 307, 308, 0, 0, 247, 0, 544, 0, 0,
	248, 249, 250, 251, 252, 0, 0, 0, 0, 0,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 1685, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 353, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 354, 118, 119, 0, 0, 0, 0,
	0, 0, 0, 120, 121, 314, 122, 266, 123, 267,
	268, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 269, 130, 131, 132,
	270, 271, 0, 0, 0, 133, 134, 272, 273, 274,
	0, 135, 0, 136, 0, 0, 355, 0, 137, 275,
	0, 276, 0, 138, 139, 140, 141, 277, 278, 357,
	0, 145, 0, 142, 0, 356, 143, 279, 144, 280,
	281, 282, 283, 284, 0, 285, 0, 358, 146, 147,
	148, 359, 149, 150, 151, 0, 153, 152, 0, 286,
	360, 154, 361, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 362, 162, 163, 165, 164,
	0, 0, 0, 288, 166, 289, 167, 168, 0, 169,
	0, 0, 170, 0, 0, 171, 290, 363, 172, 364,
	291, 173, 174, 175, 176, 177, 0, 178, 292, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 294, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 365, 201, 202, 295,
	203, 0, 207, 208, 209, 210, 81, 212, 296, 211,
	213, 214, 0, 215, 204, 205, 216, 366, 217, 297,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 299,
	222, 300, 0, 225, 83, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 302, 303, 0, 0, 233, 234,
	304, 305, 0, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 0, 243, 0, 306, 244, 245, 246,
	727, 308, 0, 0, 247, 0, 0, 0, 79, 248,
	249, 250, 251, 252, 0, 80, 544, 541, 0, 542,
	537, 532, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 100, 101, 78, 102, 0, 0, 0, 0,
	253, 0, 0, 0, 0, 103, 104, 105, 254, 255,
	256, 257, 106, 258, 259, 0, 107, 260, 261, 108,
	109, 0, 0, 262, 263, 264, 0, 110, 265, 0,
	353, 0, 111, 112, 113, 0, 114, 0, 115, 116,
	117, 0, 354, 118, 119, 0, 0, 0, 0, 0,
	0, 0, 120, 121, 314, 122, 266, 123, 267, 268,
	1070, 124, 0, 125, 0, 126, 0, 0, 127, 128,
	0, 129, 0, 0, 0, 269, 130, 131, 132, 270,
	271, 534, 0, 0, 133, 134, 272, 273, 274, 0,
	135, 0, 136, 0, 0, 355, 0, 137, 275, 0,
	276, 0, 138, 139, 140, 141, 277, 278, 357, 0,
	145, 0, 142, 0, 356, 143, 279, 144, 280, 281,
	282, 283, 284, 0, 285, 0, 358, 146, 147, 148,
	359, 149, 150, 151, 0, 153, 152, 0, 286, 360,
	154, 361, 0, 155, 0, 0, 156, 0, 157, 158,
	159, 161, 287, 160, 362, 162, 163, 165, 164, 0,
	0, 0, 288, 166, 289, 167, 168, 0, 169, 535,
	0, 170, 0, 0, 171, 290, 363, 172, 364, 291,
	173, 174, 175, 176, 177, 0, 178, 292, 179, 293,
	180, 0, 181, 182, 183, 184, 185, 294, 186, 187,
	0, 188, 189, 190, 191, 192, 194, 195, 193, 196,
	197, 198, 199, 0, 200, 365, 201, 202, 295, 203,
	0, 207, 208, 209, 210, 0, 212, 296, 211, 213,
	214, 0, 215, 204, 205, 216, 366, 217, 297, 298,
	218, 0, 224, 219, 220, 206, 221, 223, 299, 222,
	300, 0, 225, 0, 226, 227, 228, 229, 230, 231,
	232, 0, 301, 302, 303, 0, 0, 233, 234, 304,
	305, 533, 235, 236, 237, 238, 0, 0, 239, 240,
	241, 242, 0, 243, 0, 306, 244, 245, 246, 307,
	308, 0, 0, 247, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 544, 541, 0, 542, 537, 532, 0,
	0, 0, 0, 0, 543, 538, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 0, 0, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 353, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 354,
	118, 119, 0, 0, 0, 0, 0, 0, 0, 120,
	121, 314, 122, 266, 123, 267, 268, 1067, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 270, 271, 534, 0,
	0, 133, 134, 272, 273, 274, 0, 135, 0, 136,
	0, 0, 355, 0, 137, 275, 0, 276, 0, 138,
	139, 140, 141, 277, 278, 357, 0, 145, 0, 142,
	0, 356, 143, 279, 144, 280, 281, 282, 283, 284,
	0, 285, 0, 358, 146, 147, 148, 359, 149, 150,
	151, 0, 153, 152, 0, 286, 360, 154, 361, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 362, 162, 163, 165, 164, 0, 0, 0, 288,
	166, 289, 167, 168, 0, 169, 535, 0, 170, 0,
	0, 171, 290, 363, 172, 364, 291, 173, 174, 175,
	176, 177, 0, 178, 292, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 294, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 365, 201, 202, 295, 203, 0, 207, 208,
	209, 210, 0, 212, 296, 211, 213, 214, 0, 215,
	204, 205, 216, 366, 217, 297, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 299, 222, 300, 0, 225,
	0, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	302, 303, 0, 0, 233, 234, 304, 305, 533, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 0,
	243, 0, 306, 244, 245, 246, 307, 308, 0, 0,
	247, 0, 0, 0, 0, 248, 249, 250, 251, 252,
	544, 541, 0, 542, 537, 532, 0, 0, 0, 0,
	0, 543, 538, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 353, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 354, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 761, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 534, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 355,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 357, 0, 145, 0, 142, 0, 356, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	358, 146, 147, 148, 359, 149, 150, 151, 0, 153,
	152, 0, 286, 360, 154, 361, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 362, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 535, 0, 170, 0, 0, 171, 290,
	363, 172, 364, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 365,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	366, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 533, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 0, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 544, 541, 0,
	542, 537, 532, 0, 0, 0, 0, 0, 543, 538,
	0, 0, 0, 100, 101, 0, 102, 0, 0, 0,
	0, 253, 0, 0, 0, 0, 103, 104, 105, 254,
	255, 256, 257, 106, 258, 259, 0, 107, 260, 261,
	108, 109, 0, 0, 262, 263, 264, 0, 110, 265,
	0, 353, 0, 111, 112, 113, 0, 114, 0, 115,
	116, 117, 0, 354, 118, 119, 0, 0, 0, 0,
	0, 0, 0, 120, 121, 314, 122, 266, 123, 267,
	268, 0, 124, 0, 125, 0, 126, 0, 0, 127,
	128, 0, 129, 0, 0, 0, 269, 130, 131, 132,
	270, 271, 534, 0, 0, 133, 134, 272, 273, 274,
	0, 135, 0, 136, 0, 0, 355, 0, 137, 275,
	0, 276, 0, 138, 139, 140, 141, 277, 278, 357,
	0, 145, 0, 142, 0, 356, 143, 279, 144, 280,
	281, 282, 283, 284, 0, 285, 0, 358, 146, 147,
	148, 359, 149, 150, 151, 0, 153, 152, 0, 286,
	360, 154, 361, 0, 155, 0, 0, 156, 0, 157,
	158, 159, 161, 287, 160, 362, 162, 163, 165, 164,
	0, 0, 0, 288, 166, 289, 167, 168, 0, 169,
	535, 0, 170, 0, 0, 171, 290, 363, 172, 364,
	291, 173, 174, 175, 176, 177, 0, 178, 292, 179,
	293, 180, 0, 181, 182, 183, 184, 185, 294, 186,
	187, 0, 188, 189, 190, 191, 192, 194, 195, 193,
	196, 197, 198, 199, 0, 200, 365, 201, 202, 295,
	203, 0, 207, 208, 209, 210, 0, 212, 296, 211,
	213, 214, 0, 215, 204, 205, 216, 366, 217, 297,
	298, 218, 0, 224, 219, 220, 206, 221, 223, 299,
	222, 300, 0, 225, 0, 226, 227, 228, 229, 230,
	231, 232, 0, 301, 302, 303, 0, 0, 233, 234,
	304, 305, 533, 235, 236, 237, 238, 0, 0, 239,
	240, 241, 242, 0, 243, 0, 306, 244, 245, 246,
	307, 308, 0, 97, 247, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 0, 0, 0, 0, 0, 100,
	101, 0, 102, 0, 0, 543, 538, 253, 0, 0,
	0, 0, 103, 104, 105, 254, 255, 256, 257, 106,
	258, 259, 0, 107, 260, 261, 108, 109, 0, 0,
	262, 263, 264, 0, 110, 265, 0, 0, 0, 111,
	112, 113, 0, 114, 0, 115, 116, 117, 0, 0,
	118, 119, 0, 0, 0, 0, 0, 0, 0, 120,
	121, 314, 122, 266, 123, 267, 268, 0, 124, 0,
	125, 0, 126, 0, 0, 127, 128, 0, 129, 0,
	0, 0, 269, 130, 131, 132, 270, 271, 0, 0,
	0, 133, 134, 272, 273, 274, 0, 135, 0, 136,
	0, 0, 0, 0, 137, 275, 0, 276, 0, 138,
	139, 140, 141, 277, 278, 0, 0, 145, 0, 142,
	0, 0, 143, 279, 144, 280, 281, 282, 283, 284,
	0, 285, 0, 0, 146, 147, 148, 0, 149, 150,
	151, 0, 153, 152, 0, 286, 0, 154, 0, 0,
	155, 0, 0, 156, 0, 157, 158, 159, 161, 287,
	160, 0, 162, 163, 165, 164, 0, 0, 0, 288,
	166, 289, 167, 168, 0, 169, 0, 578, 170, 0,
	0, 171, 290, 0, 172, 0, 291, 173, 174, 175,
	176, 177, 0, 178, 292, 179, 293, 180, 0, 181,
	182, 183, 184, 185, 294, 186, 187, 0, 188, 189,
	190, 191, 192, 194, 195, 193, 196, 197, 198, 199,
	0, 200, 0, 201, 202, 295, 203, 0, 207, 208,
	209, 210, 81, 212, 296, 211, 213, 214, 0, 215,
	204, 205, 216, 0, 217, 297, 298, 218, 0, 224,
	219, 220, 206, 221, 223, 299, 222, 300, 0, 225,
	83, 226, 227, 228, 229, 230, 231, 232, 0, 301,
	302, 303, 0, 0, 233, 234, 304, 305, 0, 235,
	236, 237, 238, 0, 0, 239, 240, 241, 242, 0,
	243, 0, 306, 244, 245, 246, 727, 308, 0, 0,
	247, 0, 97, 0, 79, 248, 249, 250, 251, 252,
	0, 80, 0, 0, 0, 0, 0, 0, 100, 101,
	0, 102, 0, 0, 0, 0, 253, 0, 1430, 0,
	1435, 103, 104, 105, 254, 255, 256, 257, 106, 258,
	259, 0, 107, 260, 261, 108, 109, 0, 0, 262,
	263, 264, 0, 110, 265, 0, 0, 0, 111, 112,
	113, 0, 114, 0, 115, 116, 117, 0, 0, 118,
	119, 0, 0, 0, 0, 0, 0, 0, 120, 121,
	314, 122, 266, 123, 267, 268, 0, 124, 0, 125,
	0, 126, 0, 0, 127, 128, 0, 129, 0, 0,
	0, 269, 130, 131, 132, 270, 271, 0, 0, 0,
	133, 134, 272, 273, 274, 0, 135, 0, 136, 0,
	0, 0, 0, 137, 275, 0, 276, 0, 138, 139,
	140, 141, 277, 278, 0, 0, 145, 0, 142, 0,
	0, 143, 279, 144, 280, 281, 282, 283, 284, 0,
	285, 0, 0, 146, 147, 148, 0, 149, 150, 151,
	0, 153, 152, 0, 286, 0, 154, 0, 0, 155,
	0, 0, 156, 0, 157, 158, 159, 161, 287, 160,
	0, 162, 163, 165, 164, 0, 0, 0, 288, 166,
	289, 167, 168, 0, 169, 0, 0, 170, 0, 0,
	171, 290, 0, 172, 0, 291, 173, 174, 175, 176,
	177, 0, 178, 292, 179, 293, 180, 0, 181, 182,
	183, 184, 185, 294, 186, 187, 0, 188, 189, 190,
	191, 192, 194, 195, 193, 196, 197, 198, 199, 0,
	200, 0, 201, 202, 295, 203, 0, 207, 208, 209,
	210, 81, 212, 296, 211, 213, 214, 0, 215, 204,
	205, 216, 0, 217, 297, 298, 218, 0, 224, 219,
	220, 206, 221, 223, 299, 222, 300, 0, 225, 83,
	226, 227, 228, 229, 230, 231, 232, 0, 301, 302,
	303, 0, 0, 233, 234, 304, 305, 0, 235, 236,
	237, 238, 0, 0, 239, 240, 241, 242, 0, 243,
	0, 306, 244, 245, 246, 727, 308, 0, 0, 247,
	0, 97, 0, 79, 248, 249, 250, 251, 252, 0,
	80, 0, 0, 0, 0, 0, 0, 100, 101, 0,
	102, 0, 0, 0, 0, 253, 0, 0, 0, 78,
	103, 104, 105, 254, 255, 256, 257, 106, 258, 259,
	0, 107, 260, 261, 108, 109, 0, 0, 262, 263,
	264, 0, 110, 265, 0, 0, 0, 111, 112, 113,
	0, 114, 0, 115, 116, 117, 0, 0, 118, 119,
	0, 0, 0, 0, 0, 0, 0, 120, 121, 314,
	122, 266, 123, 267, 268, 0, 124, 0, 125, 0,
	126, 0, 0, 127, 128, 0, 129, 0, 0, 0,
	269, 130, 131, 132, 270, 271, 0, 0, 0, 133,
	134, 272, 273, 274, 0, 135, 0, 136, 0, 0,
	0, 0, 137, 275, 0, 276, 0, 138, 139, 140,
	141, 277, 278, 0, 0, 145, 0, 142, 0, 0,
	143, 279, 144, 280, 281, 282, 283, 284, 0, 285,
	0, 0, 146, 147, 148, 0, 149, 150, 151, 0,
	153, 152, 0, 286, 0, 154, 0, 0, 155, 0,
	0, 156, 0, 157, 158, 159, 161, 287, 160, 0,
	162, 163, 165, 164, 0, 0, 0, 288, 166, 289,
	167, 168, 0, 169, 0, 578, 170, 0, 0, 171,
	290, 0, 172, 0, 291, 173, 174, 175, 176, 177,
	0, 178, 292, 179, 293, 180, 0, 181, 182, 183,
	184, 185, 294, 186, 187, 0, 188, 189, 190, 191,
	192, 194, 195, 193, 196, 197, 198, 199, 0, 200,
	0, 201, 202, 295, 203, 0, 207, 208, 209, 210,
	0, 212, 296, 211, 213, 214, 0, 215, 204, 205,
	216, 0, 217, 297, 298, 218, 0, 224, 219, 220,
	206, 221, 223, 299, 222, 300, 0, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 0, 301, 302, 303,
	0, 0, 233, 234, 304, 305, 0, 235, 236, 237,
	238, 0, 0, 239, 240, 241, 242, 0, 243, 0,
	306, 244, 245, 246, 307, 308, 0, 0, 247, 0,
	97, 0, 0, 248, 249, 250, 251, 252, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 1430, 0, 1435, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 0, 0, 247, 0, 0,
	97, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 970, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 0, 0, 247, 0, 97,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 0, 0, 0, 0, 100, 101, 0, 102, 0,
	0, 0, 0, 253, 0, 0, 0, 1351, 103, 104,
	105, 254, 255, 256, 257, 106, 258, 259, 0, 107,
	260, 261, 108, 109, 0, 0, 262, 263, 264, 0,
	110, 265, 0, 0, 0, 111, 112, 113, 0, 114,
	0, 115, 116, 117, 0, 0, 118, 119, 0, 0,
	0, 0, 0, 0, 0, 120, 121, 314, 122, 266,
	123, 267, 268, 0, 124, 0, 125, 0, 126, 0,
	0, 127, 128, 0, 129, 0, 0, 0, 269, 130,
	131, 132, 270, 271, 0, 0, 0, 133, 134, 272,
	273, 274, 0, 135, 0, 136, 0, 0, 0, 0,
	137, 275, 0, 276, 0, 138, 139, 140, 141, 277,
	278, 0, 0, 145, 0, 142, 0, 0, 143, 279,
	144, 280, 281, 282, 283, 284, 0, 285, 0, 0,
	146, 147, 148, 0, 149, 150, 151, 0, 153, 152,
	0, 286, 0, 154, 0, 0, 155, 0, 0, 156,
	0, 157, 158, 159, 161, 287, 160, 0, 162, 163,
	165, 164, 0, 0, 0, 288, 166, 289, 167, 168,
	0, 169, 0, 0, 170, 0, 0, 171, 290, 0,
	172, 0, 291, 173, 174, 175, 176, 177, 0, 178,
	292, 179, 293, 180, 0, 181, 182, 183, 184, 185,
	294, 186, 187, 0, 188, 189, 190, 191, 192, 194,
	195, 193, 196, 197, 198, 199, 0, 200, 0, 201,
	202, 295, 203, 0, 207, 208, 209, 210, 0, 212,
	296, 211, 213, 214, 0, 215, 204, 205, 216, 0,
	217, 297, 298, 218, 0, 224, 219, 220, 206, 221,
	223, 299, 222, 300, 0, 225, 0, 226, 227, 228,
	229, 230, 231, 232, 0, 301, 302, 303, 0, 0,
	233, 234, 304, 305, 0, 235, 236, 237, 238, 0,
	0, 239, 240, 241, 242, 0, 243, 0, 306, 244,
	245, 246, 307, 308, 0, 0, 247, 0, 97, 0,
	0, 248, 249, 250, 251, 252, 0, 0, 0, 0,
	0, 0, 0, 0, 100, 101, 0, 102, 0, 0,
	0, 0, 253, 0, 0, 0, 1747, 103, 104, 105,
	254, 255, 256, 257, 106, 258, 259, 0, 107, 260,
	261, 108, 109, 0, 0, 262, 263, 264, 0, 110,
	265, 0, 0, 0, 111, 112, 113, 0, 114, 0,
	115, 116, 117, 0, 0, 118, 119, 0, 0, 0,
	0, 0, 0, 0, 120, 121, 314, 122, 266, 123,
	267, 268, 0, 124, 0, 125, 0, 126, 0, 0,
	127, 128, 0, 129, 0, 0, 0, 269, 130, 131,
	132, 270, 271, 0, 0, 0, 133, 134, 272, 273,
	274, 0, 135, 0, 136, 0, 0, 0, 0, 137,
	275, 0, 276, 0, 138, 139, 140, 141, 277, 278,
	0, 0, 145, 0, 142, 0, 0, 143, 279, 144,
	280, 281, 282, 283, 284, 0, 285, 0, 0, 146,
	147, 148, 0, 149, 150, 151, 0, 153, 152, 0,
	286, 0, 154, 0, 0, 155, 0, 0, 156, 0,
	157, 158, 159, 161, 287, 160, 0, 162, 163, 165,
	164, 0, 0, 0, 288, 166, 289, 167, 168, 0,
	169, 0, 0, 170, 0, 0, 171, 290, 0, 172,
	0, 291, 173, 174, 175, 176, 177, 0, 178, 292,
	179, 293, 180, 0, 181, 182, 183, 184, 185, 294,
	186, 187, 0, 188, 189, 190, 191, 192, 194, 195,
	193, 196, 197, 198, 199, 0, 200, 0, 201, 202,
	295, 203, 0, 207, 208, 209, 210, 0, 212, 296,
	211, 213, 214, 0, 215, 204, 205, 216, 0, 217,
	297, 298, 218, 0, 224, 219, 220, 206, 221, 223,
	299, 222, 300, 0, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 0, 301, 302, 303, 0, 0, 233,
	234, 304, 305, 0, 235, 236, 237, 238, 0, 0,
	239, 240, 241, 242, 0, 243, 0, 306, 244, 245,
	246, 307, 308, 0, 0, 247, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 637, 626, 627, 624, 625,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 100, 101, 0, 102, 839, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 669, 256,
	670, 106, 671, 672, 0, 107, 260, 261, 108, 109,
	0, 0, 673, 674, 264, 0, 110, 265, 0, 353,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 354, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 675, 123, 676, 677, 0,
	124, 0, 125, 0, 126, 0, 0, 668, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	633, 0, 0, 133, 134, 678, 679, 680, 0, 135,
	0, 136, 0, 0, 355, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 357, 0, 145,
	0, 142, 0, 356, 143, 681, 144, 682, 683, 684,
	685, 686, 0, 644, 0, 358, 146, 147, 148, 359,
	149, 150, 151, 0, 153, 152, 0, 286, 360, 154,
	361, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 362, 162, 163, 165, 164, 0, 0,
	634, 288, 166, 687, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 363, 172, 364, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 688, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 365, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 366, 217, 689, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 690, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 691, 692, 0, 0, 233, 234, 304, 305,
	632, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 693,
	544, 541, 247, 0, 0, 768, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 353, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 354, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 355,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 357, 0, 145, 0, 142, 0, 356, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	358, 146, 147, 148, 359, 149, 150, 151, 0, 153,
	152, 0, 286, 360, 154, 361, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 362, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	363, 172, 364, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 365,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	366, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 93, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 92, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	544, 541, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 96, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 353, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 354, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 355,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 357, 0, 145, 0, 142, 0, 356, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	358, 146, 147, 148, 359, 149, 150, 151, 0, 153,
	152, 0, 286, 360, 154, 361, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 362, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	363, 172, 364, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 365,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	366, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	544, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 96, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 353, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 354, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 355,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 357, 0, 145, 0, 142, 0, 356, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	358, 146, 147, 148, 359, 149, 150, 151, 0, 153,
	152, 0, 286, 360, 154, 361, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 362, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	363, 172, 364, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 365,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	366, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 1160, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 1158, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 1402, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 1163, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	1400, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	1162, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 1401, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	1160, 110, 265, 0, 0, 1155, 111, 112, 113, 0,
	114, 1158, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 1163, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	1154, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 1162, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 1161, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 1855, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 578, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 1085, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	996, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 578, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 735, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	590, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 578, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 583, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 578,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 453, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 452, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	1459, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 1457, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	1446, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 1115, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 469, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 980, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 0, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	810, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 805, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 743,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 483, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 480, 302, 303, 0,
	0, 233, 476, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 483, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 480, 302, 303, 0, 0, 233, 476, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	723, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 721, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	718, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 715, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	713, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 110, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 586, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 155, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 160, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 295, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 213, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 301, 302, 303, 0, 0, 233, 234, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 175, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 184,
	185, 294, 567, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 203, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 97, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 0, 0, 0,
	0, 100, 101, 0, 102, 0, 0, 0, 0, 253,
	0, 0, 0, 0, 103, 104, 105, 254, 255, 256,
	257, 106, 258, 259, 0, 107, 260, 261, 108, 109,
	0, 0, 262, 263, 264, 0, 474, 265, 0, 0,
	0, 111, 112, 113, 0, 114, 0, 115, 116, 117,
	0, 0, 118, 119, 0, 0, 0, 0, 0, 0,
	0, 120, 121, 314, 122, 266, 123, 267, 268, 0,
	124, 0, 125, 0, 126, 0, 0, 127, 128, 0,
	129, 0, 0, 0, 269, 130, 131, 132, 270, 271,
	0, 0, 0, 133, 134, 272, 273, 274, 0, 135,
	0, 136, 0, 0, 0, 0, 137, 275, 0, 276,
	0, 138, 139, 140, 141, 277, 278, 0, 0, 145,
	0, 142, 0, 0, 143, 279, 144, 280, 281, 282,
	283, 284, 0, 285, 0, 0, 146, 147, 148, 0,
	149, 150, 151, 0, 153, 152, 0, 286, 0, 154,
	0, 0, 472, 0, 0, 156, 0, 157, 158, 159,
	161, 287, 483, 0, 162, 163, 165, 164, 0, 0,
	0, 288, 166, 289, 167, 168, 0, 169, 0, 0,
	170, 0, 0, 171, 290, 0, 172, 0, 291, 173,
	174, 175, 176, 177, 0, 178, 292, 179, 293, 180,
	0, 181, 182, 183, 184, 185, 294, 186, 187, 0,
	188, 189, 190, 191, 192, 194, 195, 193, 196, 197,
	198, 199, 0, 200, 0, 201, 202, 475, 203, 0,
	207, 208, 209, 210, 0, 212, 296, 211, 473, 214,
	0, 215, 204, 205, 216, 0, 217, 297, 298, 218,
	0, 224, 219, 220, 206, 221, 223, 299, 222, 300,
	0, 225, 0, 226, 227, 228, 229, 230, 231, 232,
	0, 480, 302, 303, 0, 0, 233, 476, 304, 305,
	0, 235, 236, 237, 238, 0, 0, 239, 240, 241,
	242, 0, 243, 0, 306, 244, 245, 246, 307, 308,
	97, 0, 247, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 0, 0, 0, 0, 100, 101, 0, 102,
	0, 0, 0, 0, 253, 0, 0, 0, 0, 103,
	104, 105, 254, 255, 256, 257, 106, 258, 259, 0,
	107, 260, 261, 108, 109, 0, 0, 262, 263, 264,
	0, 110, 265, 0, 0, 0, 111, 112, 113, 0,
	114, 0, 115, 116, 117, 0, 0, 118, 119, 0,
	0, 0, 0, 0, 0, 0, 120, 121, 314, 122,
	266, 123, 267, 268, 0, 124, 0, 125, 0, 126,
	0, 0, 127, 128, 0, 129, 0, 0, 0, 269,
	130, 131, 132, 270, 271, 0, 0, 0, 133, 134,
	272, 273, 274, 0, 135, 0, 136, 0, 0, 0,
	0, 137, 275, 0, 276, 0, 138, 139, 140, 141,
	277, 278, 0, 0, 145, 0, 142, 0, 0, 143,
	279, 144, 280, 281, 282, 283, 284, 0, 285, 0,
	0, 146, 147, 148, 0, 149, 150, 151, 0, 153,
	152, 0, 286, 0, 154, 0, 0, 155, 0, 0,
	156, 0, 157, 158, 159, 161, 287, 160, 0, 162,
	163, 165, 164, 0, 0, 0, 288, 166, 289, 167,
	168, 0, 169, 0, 0, 170, 0, 0, 171, 290,
	0, 172, 0, 291, 173, 174, 0, 176, 177, 0,
	178, 292, 179, 293, 180, 0, 181, 182, 183, 0,
	185, 294, 186, 187, 0, 188, 189, 190, 191, 192,
	194, 195, 193, 196, 197, 198, 199, 0, 200, 0,
	201, 202, 295, 0, 0, 207, 208, 209, 210, 0,
	212, 296, 211, 213, 214, 0, 215, 204, 205, 216,
	0, 217, 297, 298, 218, 0, 224, 219, 220, 206,
	221, 223, 299, 222, 300, 0, 225, 0, 226, 227,
	228, 229, 230, 231, 232, 0, 301, 302, 303, 0,
	0, 233, 234, 304, 305, 0, 235, 236, 237, 238,
	0, 0, 239, 240, 241, 242, 0, 243, 0, 306,
	244, 245, 246, 307, 308, 0, 0, 247, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	874, 0, 0, 905, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 0, 873, 0, 0, 0, 874, 0,
	888, 905, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 873, 0, 0, 0, 874, 0, 888, 905,
	0, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	873, 0, 0, 0, 879, 874, 888, 0, 905, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 898, 906, 0, 894, 0, 0, 873,
	0, 0, 879, 874, 0, 888, 905, 0, 0, 0,
	0, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 906, 0, 0, 0, 896, 873, 0, 0,
	879, 0, 889, 888, 0, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 896, 0, 0, 895, 0, 879,
	889, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 898, 906,
	0, 0, 896, 0, 0, 895, 0, 879, 889, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 898, 906, 0, 0,
	0, 896, 0, 895, 0, 0, 0, 889, 0, 0,
	0, 899, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 0, 0, 0, 896,
	0, 0, 895, 0, 0, 889, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	890, 885, 886, 887, 900, 0, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 899, 0, 0, 2040,
	0, 0, 0, 0, 0, 0, 897, 0, 890, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 899, 0, 0, 2035, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 2031, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	0, 0, 0, 0, 2008, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 885, 886, 887, 900, 0, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 0, 0,
	871, 872, 1939, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	0, 0, 0, 874, 0, 0, 905, 0, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 873, 0, 0,
	0, 874, 0, 888, 905, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 0, 894, 0, 0, 873, 0, 0, 0, 874,
	0, 888, 905, 0, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	0, 894, 0, 873, 0, 0, 0, 879, 874, 888,
	0, 905, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 898, 906, 0, 894,
	0, 0, 873, 0, 0, 879, 874, 0, 888, 905,
	0, 0, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 906, 0, 0, 0, 896,
	873, 0, 0, 879, 0, 889, 888, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 906, 0, 0, 0, 896, 0, 0,
	895, 0, 879, 889, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 906, 0, 0, 896, 0, 0, 895, 0,
	879, 889, 0, 0, 0, 0, 0, 0, 0, 904,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 898,
	906, 0, 0, 0, 896, 0, 895, 0, 0, 0,
	889, 0, 0, 0, 899, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 896, 0, 0, 895, 0, 0, 889, 0,
	0, 0, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 890, 885, 886, 887, 900, 0, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 0, 899,
	0, 0, 1938, 0, 0, 0, 0, 0, 0, 897,
	0, 890, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 899, 0, 0,
	1877, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 0, 0, 0, 0, 1830, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 885,
	886, 887, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 0, 0, 0, 1750, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 871, 872, 1726, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 874, 0, 0, 905,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	873, 0, 0, 0, 874, 0, 888, 905, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 873, 0,
	0, 0, 874, 0, 888, 905, 0, 0, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 873, 0, 0, 0,
	879, 874, 888, 0, 905, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 898,
	906, 0, 894, 0, 0, 873, 0, 1422, 879, 874,
	0, 888, 905, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 898, 906, 0,
	0, 0, 896, 873, 0, 0, 879, 2208, 889, 888,
	0, 0, 0, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 0, 0, 0,
	896, 0, 0, 895, 0, 879, 889, 1572, 1423, 0,
	1571, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 906, 0, 0, 896, 0,
	0, 895, 0, 879, 889, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 890, 898, 906, 0, 0, 0, 896, 0, 895,
	0, 0, 0, 889, 0, 0, 0, 899, 0, 0,
	904, 0, 0, 0, 0, 2207, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 896, 0, 0, 895, 0,
	0, 889, 0, 0, 0, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 895, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 890, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 899, 0, 0, 1257, 0, 0, 0, 0,
	0, 0, 897, 0, 890, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 0,
	899, 1502, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 0, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 1143, 0, 0, 0, 0, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	1142, 0, 0, 874, 0, 0, 905, 0, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 873, 0, 0,
	0, 874, 0, 888, 905, 0, 0, 0, 0, 0,
	0, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 873, 0, 0, 894, 0,
	0, 888, 0, 0, 0, 874, 0, 0, 905, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	0, 0, 0, 0, 0, 0, 894, 879, 0, 873,
	0, 0, 0, 874, 0, 888, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 906, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 873, 0, 0,
	0, 0, 0, 888, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 898, 906, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 889, 0, 0, 0, 879,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 898, 906,
	895, 0, 0, 889, 0, 0, 0, 879, 0, 0,
	0, 0, 1578, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 898, 906, 895, 562,
	0, 896, 0, 0, 0, 0, 0, 889, 0, 0,
	0, 0, 0, 0, 904, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 896,
	0, 0, 895, 0, 899, 889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 890, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 899, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 0,
	0, 897, 0, 0, 885, 886, 887, 900, 890, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 0, 0,
	0, 1730, 0, 0, 899, 0, 0, 0, 0, 897,
	0, 0, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 0, 885, 886, 887, 900,
	0, 884, 882, 883, 875, 876, 877, 878, 880, 881,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 0, 885, 886, 887, 900, 0, 884,
	882, 883, 875, 876, 877, 878, 880, 881, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 1573, 0,
	0, 874, 0, 0, 905, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 0, 0, 0, 0,
	0, 0, 894, 0, 0, 873, 0, 0, 0, 874,
	0, 888, 905, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 873, 1531, 0, 0, 874, 0, 888,
	905, 0, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 0, 0, 0, 894,
	0, 873, 0, 0, 0, 879, 874, 888, 0, 905,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 898, 906, 0, 894, 0, 0,
	873, 0, 0, 879, 874, 0, 888, 905, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 906, 0, 0, 0, 896, 873, 0,
	0, 879, 0, 889, 888, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	898, 906, 0, 0, 0, 896, 0, 0, 895, 0,
	879, 889, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 896, 0, 0, 895, 0, 879, 889,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 1538,
	0, 0, 0, 0, 0, 0, 890, 898, 906, 0,
	0, 0, 896, 0, 895, 0, 0, 0, 889, 0,
	0, 0, 899, 0, 0, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	896, 0, 0, 895, 0, 0, 889, 0, 0, 0,
	899, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 899, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	0, 890, 885, 886, 887, 900, 0, 884, 882, 883,
	875, 876, 877, 878, 880, 881, 0, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 890,
	885, 886, 887, 900, 0, 884, 882, 883, 875, 876,
	877, 878, 880, 881, 0, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 897, 0, 0, 885, 886,
	887, 900, 0, 884, 882, 883, 875, 876, 877, 878,
	880, 881, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	900, 0, 884, 882, 883, 875, 876, 877, 878, 880,
	881, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 885, 886, 887, 900, 0,
	884, 882, 883, 875, 876, 877, 878, 880, 881, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 905, 0, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	874, 0, 888, 905, 0, 871, 872, 0, 0, 0,
	0, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 874, 0,
	888, 905, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 879, 0, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 898, 906, 0, 0, 0,
	0, 0, 0, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 898, 906, 0, 0, 0, 896, 0,
	0, 0, 879, 0, 889, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 898, 906, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 890, 0, 0, 1025, 1015, 1044, 1007,
	1035, 1034, 0, 0, 1009, 1008, 0, 0, 0, 899,
	1046, 1045, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 0, 0, 885, 886, 887, 900, 0, 884, 882,
	883, 875, 876, 877, 878, 880, 881, 0, 0, 0,
	0, 0, 0, 1040, 0, 1032, 1031, 0, 897, 0,
	0, 885, 886, 887, 900, 1030, 884, 882, 883, 875,
	876, 877, 878, 880, 881, 0, 0, 0, 0, 0,
	0, 0, 0, 1029, 1027, 1028, 897, 0, 0, 0,
	0, 0, 900, 0, 884, 882, 883, 875, 876, 877,
	878, 880, 881, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1018, 1017, 1019, 1020, 1021, 1022, 1023,
	0, 1043, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1025, 1015, 1044, 1007, 1035, 1034, 0, 0, 1009,
	1008, 0, 0, 0, 0, 1046, 1045, 0, 0, 1011,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1033, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1040, 0,
	1032, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	1030, 0, 0, 0, 1026, 0, 0, 485, 1192, 1190,
	1191, 1194, 1193, 0, 0, 0, 0, 0, 1029, 1027,
	1028, 0, 0, 0, 0, 490, 0, 0, 0, 0,
	0, 0, 0, 0, 1012, 0, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 1024, 1013, 0, 1018, 1017,
	1019, 1020, 1021, 1022, 1023, 1048, 1043, 0, 492, 0,
	0, 0, 0, 493, 0, 0, 0, 1010, 498, 499,
	1041, 1042, 510, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1011, 488, 494, 0, 0, 0,
	0, 0, 1014, 0, 0, 0, 1033, 1047, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 513, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 495, 1026,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1012,
	503, 0, 0, 500, 505, 0, 0, 0, 0, 0,
	1024, 1013, 0, 0, 502, 0, 0, 0, 0, 0,
	1048, 0, 0, 0, 486, 0, 0, 0, 0, 0,
	0, 0, 1010, 0, 0, 1041, 1042, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1014, 0, 0,
	0, 0, 1047, 0, 501, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	504, 506, 487, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 507, 0, 0, 0, 512,
	0, 0, 0, 508, 0, 0, 0, 0, 489, 509,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 511,
}
var sqlPact = [...]int{

	4242, -1000, 19, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 742, 17871, 17871, 918,
	22281, -1000, -1000, -1000, -1000, -1000, -1000, 706, 999, 705,
	491, 5595, 22281, 22281, 21966, 1197, 1174, 1172, 1197, 23856,
	-1000, -1000, 27951, -1000, 31323, 489, 493, 489, 489, 525,
	23856, 1151, 618, 14683, 668, 132, -1000, 875, -46, 27636,
	22281, 1485, 16, 20076, 250, 4242, 21651, 27321, 22281, 21336,
	596, 9, 18501, 22281, -1000, 21, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1290,
	11378, 11378, 307, 21, -1000, 1289, 1189, 1181, 20076, -1000,
	-1000, -1000, -1000, -1000, 27006, 26691, 26376, 26061, 25746, -1000,
	13373, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 764, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 308,
	305, -1000, 21021, -1000, 1014, -1000, 13, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 11378, 11378, 1012, -1000, 22281,
	-1000, -1000, 25431, 25116, 657, 293, 911, -1000, -1000, 569,
	409, -1000, -1000, 14356, 27, -1000, -1000, -1000, -1000, 1312,
	1525, 17556, 864, 1286, -1000, 1011, 1280, 1276, 1275, 1274,
	1273, -1000, 870, -1000, 627, 505, -1000, 1270, 402, 853,
	479, -1000, 1269, 1267, 911, -1000, 911, -1000, -1000, -1000,
	593, 23856, -1000, -1000, -1000, -1000, -1000, 20076, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1734, -1000,
	-1000, -1000, -1000, 1742, -1000, -1000, -1000, -1000, 24801, 22281,
	22281, 1207, 24486, -1000, 875, -1000, -1000, -1000, 1130, 1483,
	1483, 1483, 1545, 110, 105, 132, -3, 22281, -1000, 292,
	-3, 9677, 9677, -1000, -1000, 250, -1000, 331, 16914, -1000,
	7977, -1000, 772, 1366, 468, 962, 1365, -127, 785, 775,
	1364, 17556, 18501, 9, -19, -1000, -1000, -1000, 5268, 17556,
	30463, -1000, 11378, 11378, 11378, 11378, 11378, 915, 324, -1000,
	291, 287, 6603, -1000, -1000, 1739, -1000, -1000, -1000, 114,
	-1000, -1000, 11378, 21, -1000, -1000, -1000, -1000, 283, 1752,
	-1000, 454, -1000, -1000, -1000, 375, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1308, 281, 278, 277, -1000,
	-1000, -1000, -1000, 275, 274, 273, 272, 271, 266, 265,
	264, 263, 262, 261, 260, 259, 257, 254, 873, -1000,
	438, -1000, -1000, 438, 438, -1000, 231, 231, 235, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 231, -1000, -1000,
	-1000, 404, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 252,
	30463, 638, 15956, 21, -1000, -1000, -1000, 20076, 22281, 22281,
	670, 24171, -1000, 1359, 116, 1358, -1000, 111, 1356, -1000,
	111, 1355, -19, 1349, -6, -1000, -1000, 250, 20706, 22281,
	1625, 31224, -1000, 11378, -1000, -1000, 17871, 1211, 30463, 30463,
	17871, -1000, -1000, 1620, -1000, 22281, 11378, 7, -1000, -1000,
	-1000, -1000, 1136, 1133, 544, 14029, 13702, 1436, 1036, -1000,
	-1000, -1000, 24, 5595, 490, 651, -1000, -1000, -1000, 20391,
	-1000, -1000, 22281, 1307, 17871, 22281, 22281, 22281, 22281, 22281,
	-1000, -1000, -1000, 495, 1306, 22281, -1000, 1135, -1000, -1000,
	22281, 22281, 761, 617, -1000, 7, -1000, 23856, -1000, 131,
	-1000, -1000, -1000, -1000, 247, 1096, 422, 57, 23541, 422,
	1091, -1000, 1130, -1000, 1019, 1190, 10358, 1179, 11378, 132,
	-1000, -1000, 132, 132, 11378, -1000, -1000, 22281, -3, 1617,
	22281, 86, -1000, 29950, -1000, 86, -1000, -1000, -1000, 22281,
	-12, -1000, 30463, -1000, -35, 826, -1000, 19446, 1526, 1450,
	1489, 20076, 1559, -46, 1264, 1557, -46, 1262, 589, 22281,
	22281, 587, 585, 20076, 369, -1000, 22281, -1000, -1000, -33,
	-1000, 31099, 31224, 5595, 605, 11378, 11378, 11378, 11378, 11378,
	11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378, 11378,
	11378, 11378, 11378, 11378, 11378, 11378, 11378, 1034, 11378, 582,
	11378, 11378, 11378, 11378, 831, 883, 201, 917, -1000, 1678,
	1678, 1678, 30829, 30829, 212, 324, -1000, 11378, -1000, 10018,
	105, 29493, -4, -1000, -1000, -1000, 7624, 436, 30463, 21,
	6262, -1000, 1737, 819, 1320, 1237, 239, 104, 103, 98,
	11378, 11378, 11718, 11718, 11378, 12058, 11378, 11378, 6943, 11378,
	11378, 11378, 11378, 11378, 11378, -1000, 238, -1000, -1000, -1000,
	-1000, 1732, -1000, -1000, 1727, -1000, 600, 583, 1714, -1000,
	1260, -17, -1000, -1000, 428, 144, 1612, 144, 16276, -1000,
	22281, 22281, -1000, 22281, -1000, -1000, 22281, -1000, 22281, 22281,
	-1000, 22281, 22281, 490, 18816, 773, 1348, 656, -46, -18,
	-1000, 1627, -1000, -1000, -1000, -1000, 80, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 235,
	873, 231, 231, 231, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 404, -1000, -1000, 438, 438, 438, -1000, -1000, -22,
	30463, 575, -1000, 1259, 473, -1000, 399, -37, 911, 1061,
	-1000, -1000, -1000, -1000, -1000, -1000, -10, -1000, -1000, -10,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1750,
	5595, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 22281, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 490, -1000, -1000, -1000,
	-1000, 22281, 22281, 22281, -1000, -1000, 20076, 19131, 1609, 1346,
	889, -1000, 1607, 22281, 1009, 1086, -1000, 613, 1345, -1000,
	-1000, -1000, -1000, 30463, -1000, 371, -1000, -1000, 30463, 710,
	1193, -1000, 1193, -14, -1000, 29606, -1000, 227, -42, 428,
	9677, 15637, 5595, -1000, 428, 96, 7977, -1000, 773, 22281,
	22281, 22281, -1000, -1000, 1083, 23226, 1073, 31224, 22281, -1000,
	207, 206, 1159, 1157, 22281, 22281, 22911, 22596, 22281, 760,
	-46, -1000, 205, -46, -1000, 204, 22281, 766, -1000, 22281,
	22281, 728, 1215, 1031, -1000, 423, 17556, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 389, 1128, 1128,
	573, 573, 573, 573, 1610, 2785, 2326, 1194, 30885, 30885,
	30885, 306, 1072, 1072, 30885, 30885, 30885, 30829, 30491, 2245,
	11378, 11378, 563, 878, 201, 2245, 11378, 2245, 2245, 2245,
	2245, -1000, 1088, -1000, -1000, -1000, -1000, 1258, 197, 12058,
	12058, -1000, -1000, -1000, 6603, 12398, -1000, -1000, -1000, -1000,
	195, 11378, -1000, 29521, -202, -43, -1000, -1000, 11378, -113,
	-153, -1000, -1000, 669, -1000, 11378, -1000, -13, 11378, 11378,
	11378, 95, 94, -1000, 561, -1000, 560, 554, 553, -1000,
	194, 929, 193, 189, 11378, -1000, -1000, -1000, 30434, 3982,
	93, 1255, -117, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	91, 90, 30406, -117, 88, 4082, -1000, 12058, 12058, 12058,
	6603, 188, 87, 29578, -117, 30378, 9337, 9337, 9337, 85,
	30040, 11378, -117, 3636, 3568, 343, -44, -54, -56, 1709,
	-61, 84, 387, 377, 75, 637, 1254, 22281, 697, 11378,
	882, -1000, 15318, 444, 22281, 697, 56, -1000, -1000, -1000,
	359, 22281, -1000, -1000, -1000, 116, -1000, 111, 111, -19,
	-1000, -1000, 20076, -1000, -1000, 31224, 232, 192, -1000, 1707,
	-1000, 11378, 22281, 22281, 1178, -1000, -1000, -1000, 758, -1000,
	815, -1000, 14683, -1000, -53, -1000, -1000, -1000, -1000, 369,
	-1000, 74, -63, -31, 31224, -1000, -1000, -1000, -1000, -1000,
	22281, 285, 22281, -46, 22281, -1000, 1749, -46, 22281, 1342,
	1397, 357, 22281, 710, -1000, 11378, 1696, -1000, -1000, -1000,
	11378, -1000, -1000, -1000, -46, -1000, 1230, -1000, -51, 1816,
	191, -182, 77, 373, -1000, 14999, -1000, 1230, -1000, -1000,
	-1000, -1000, 552, 550, 1340, -1000, 1057, -1000, 448, -1000,
	926, 11378, 13054, 187, 170, 824, -1000, 1337, 1030, 1334,
	1030, -1000, -35, 806, -1000, 11378, -1000, 11378, -1000, 536,
	-1000, -1000, 534, 423, 1249, 628, -1000, 947, -1000, 11378,
	2245, 2245, 11378, 12058, 12058, -1000, 2245, -1000, -1000, -1000,
	-1000, -1000, 1248, 169, 11378, 31224, 3608, 3071, -71, -1000,
	8997, -41, -1000, 11378, -1000, 29153, -1000, -1000, 133, 1377,
	-1000, 11378, 30012, 68, 8657, -1000, 29978, -32, -32, -1000,
	1748, 1115, 799, 797, 676, 1692, -1000, 16595, 429, 943,
	29125, 31099, 31224, -1000, 11378, -1000, -1000, 1246, 11378, -1000,
	31099, 31224, 12058, 12058, 12058, 12058, 12058, 12058, 12058, 12058,
	12058, 12058, 12058, 12058, 12058, 12058, 12058, 12058, 12058, 12058,
	12058, 1127, 12058, 1652, 1652, 1652, -49, 8317, -1000, 1302,
	1246, 11378, 11378, 31224, 67, 66, 65, -1000, 11378, -117,
	11378, 11378, 11378, -1000, -1000, -1000, 64, -1000, 1690, -1000,
	-1000, -1000, -1000, -1000, 633, -1000, -1000, 7283, 30463, -1000,
	697, 1492, -72, -1000, -1000, -1000, 428, 16276, 15637, 7977,
	-77, -1000, -1000, -1000, 773, -1000, 460, 1687, 63, 30463,
	-53, -53, -1000, -1000, -1000, -1000, -1000, 22281, -1000, 1209,
	-1000, 19131, 168, 22281, 166, -1000, 164, -1000, -1000, 160,
	22281, 1141, 357, 18186, -1000, 422, 949, 29096, -1000, 62,
	1224, 1544, -1000, 15637, 1168, 1166, 15637, 1164, 932, 932,
	932, -1000, 159, 321, 373, 4600, 11378, 19761, 939, 50,
	60, 1816, 1224, 22281, 22281, 22281, 1332, -1000, 2593, -1000,
	29068, -78, -1000, 315, 1515, 11378, -1000, -1000, 156, 13054,
	22281, -1000, 1154, 1198, 481, 22281, -1000, 22281, -1000, 22281,
	22281, 22281, -79, -83, 22281, 22281, -1000, 17556, 576, 155,
	1674, 2245, 2819, 2776, 11378, 31224, 30857, -85, 11378, 11378,
	-1000, -87, -1000, 11378, 320, 30463, -1000, -1000, -1000, 30463,
	11378, 1745, 11378, 58, 55, 52, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 51, -1000, -1000, 28266, 11378, 49,
	-1000, 46, 44, 30463, 1302, 30463, -1000, -1000, 381, 381,
	689, 689, 689, 689, 1652, 492, 2122, 2366, 3083, 3083,
	3083, 713, 686, 686, 3083, 3083, 3083, 1245, 1122, 154,
	190, 11378, -91, -1000, -1000, -1000, 30463, 30463, 43, -1000,
	-1000, -1000, -117, 230, 29040, 28700, -1000, 42, -1000, -65,
	-1000, -1000, 196, -46, 697, -1000, -70, -1000, 358, -1000,
	319, 316, -1000, -1000, -1000, 1213, -1000, 13054, 153, 22281,
	19131, 1585, 13054, 996, 1147, 357, 18186, -1000, 613, -1000,
	-1000, -1000, 410, 11378, 11378, 1816, 15637, 15637, 1094, 1165,
	15637, -1000, -1000, -1000, -1000, 314, 368, 373, 19761, -1000,
	1675, 1170, -93, -1000, -1000, 22281, 150, -1000, 373, 410,
	-1000, -1000, -1000, 22281, -1000, 22281, -1000, 5595, 22281, 1241,
	1050, -1000, -1000, 1153, 149, 12058, 22281, -1000, 841, 13054,
	1470, 21, 5595, 1470, 28672, 6262, -101, -103, 1049, -1000,
	1048, 11378, -1000, 31224, 1030, 1030, -1000, 533, 532, 524,
	520, -1000, -1000, -100, 17241, 1747, 11378, 11378, 30857, -116,
	-1000, 2245, 2245, -1000, 28643, -1000, 30463, -1000, 29978, -1000,
	-1000, -1000, -1000, 923, -1000, 28615, -1000, -1000, -1000, -1000,
	12058, 1243, 148, 31224, 28587, -1000, -1000, 11378, -1000, -1000,
	-1000, 1403, 22281, 1477, -1000, -1000, 145, -1000, -1000, 885,
	-122, 13054, -124, 38, -46, -128, 22281, -1000, 357, 18186,
	-1000, 1397, -1000, 22281, 30463, -117, -1000, 1094, -1000, 142,
	11378, 15637, -1000, -182, -1000, -129, -1000, 19761, -1000, 312,
	-197, -1000, 345, -1000, 373, 140, 22281, 19761, -1000, -1000,
	1201, -1000, -1000, 22281, 1053, -1000, -1000, 11378, 190, 139,
	1209, 138, -1000, -1000, -1000, -1000, -1000, -1000, 1515, -13,
	-1000, 779, -1000, -1000, 30463, 1511, -1000, -1000, 22281, 22281,
	137, 134, -1000, 126, 21, -133, -1000, 329, 2245, 2245,
	-1000, -1000, 37, 943, 1543, -1000, 4096, 12058, 31224, -135,
	-1000, 4051, 580, -137, 22281, -1000, -1000, 5922, 22281, 841,
	-146, -1000, 1209, -1000, 841, 124, 18186, -1000, 1141, -105,
	-1000, 1580, -1000, 22281, 30463, -1000, 373, -1000, 1664, -1000,
	-1000, 1170, -1000, 4938, 19761, 22281, -156, -1000, -1000, -1000,
	1331, 4016, 1121, 22281, -1000, 22281, 1470, 36, 22281, 451,
	5595, -1000, -1000, 11378, 11378, 11378, 1747, -1000, -1000, 1746,
	-1000, 719, 11378, 4096, -160, -1000, -1000, 664, -1000, 428,
	-1000, 117, 1209, 841, -1000, 1209, 13054, -1000, 1147, 22281,
	81, -166, 19761, -1000, -1000, -1000, 1658, -1000, -170, -1000,
	1323, -1000, 978, 989, 35, -172, -1000, -1000, 57, -1000,
	11378, -1000, -179, -180, -32, -1000, -1000, 34, 11038, 11038,
	-117, -1000, 16276, -1000, 22281, -1000, 1209, -1000, -184, -1000,
	-1000, -1000, -1000, -1000, 310, -1000, 22281, -1000, 993, 979,
	715, -1000, -1000, -1000, -1000, -1000, 1121, 30463, -1000, -1000,
	31, -1000, -1000, -1000, 12727, 1002, 690, 29549, -1000, -161,
	-189, -1000, 841, -1000, -1000, -1000, 1411, -1000, 458, 893,
	893, 978, 1745, 1632, -1000, -1000, -1000, -1000, -1000, -1000,
	990, 1209, -1000, 1640, -1000, -1000, 1138, -1000, -1000, 10698,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1986, 1982, 1547, 1652, 1981, 1976, 1975, 1623, 1973,
	1971, 1967, 1966, 1963, 1961, 1618, 1959, 1583, 1575, 1565,
	1955, 107, 86, 1563, 1954, 1952, 1559, 1948, 1947, 1946,
	1944, 1942, 1936, 91, 1935, 1934, 1552, 1549, 1545, 1543,
	1933, 1932, 1512, 1929, 1925, 16, 1923, 77, 1919, 50,
	145, 2615, 140, 1917, 1916, 1911, 34, 114, 65, 1910,
	211, 1909, 1904, 56, 37, 22, 21, 1902, 116, 1901,
	1900, 1400, 43, 1899, 1898, 139, 1896, 25, 26, 1184,
	152, 148, 125, 124, 1890, 1884, 1881, 1880, 33, 1879,
	1, 1872, 1867, 11, 82, 7, 1865, 28, 19, 1861,
	1860, 134, 1859, 64, 104, 1520, 106, 123, 303, 1858,
	66, 6, 73, 1857, 1852, 150, 45, 1847, 42, 95,
	141, 1845, 58, 154, 75, 36, 59, 128, 1844, 1842,
	1836, 105, 1834, 120, 76, 1833, 1832, 97, 1829, 136,
	138, 1828, 1826, 100, 1825, 132, 1824, 1823, 147, 167,
	1822, 155, 1819, 1817, 156, 119, 8, 44, 61, 9,
	1500, 1497, 130, 78, 29, 24, 1816, 2030, 1313, 1172,
	40, 110, 69, 47, 111, 57, 72, 143, 31, 1815,
	1814, 133, 1813, 1812, 1811, 1810, 1809, 108, 1808, 1807,
	68, 137, 13, 27, 30, 101, 51, 83, 85, 103,
	151, 118, 1806, 102, 122, 1805, 62, 1803, 1801, 1779,
	126, 1799, 1798, 1796, 1068, 1065, 958, 191, 1795, 1794,
	914, 733, 1793, 1792, 70, 1791, 127, 117, 1790, 144,
	225, 20, 1788, 121, 35, 96, 1785, 112, 48, 0,
	602, 435, 1784, 135, 79, 1783, 1782, 1781, 1780, 23,
	3, 14, 4, 12, 5, 32, 17, 1778, 1777, 131,
	98, 67, 1776, 153, 1775, 1774, 1773, 46, 1772, 15,
	1770, 18, 1768, 1767, 10, 2, 1766, 1764, 142, 1762,
	109, 1761, 1571, 1760, 146, 1759, 1758, 1558, 49, 115,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 58,
	58, 57, 57, 57, 57, 57, 57, 57, 57, 57,
	57, 57, 57, 57, 57, 57, 55, 55, 60, 60,
	60, 62, 62, 59, 59, 54, 54, 5, 5, 237,
	237, 238, 238, 44, 44, 48, 48, 45, 46, 46,
	47, 47, 7, 7, 7, 6, 6, 8, 8, 8,
	8, 8, 8, 15, 16, 16, 16, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 107,
	107, 106, 106, 109, 109, 18, 18, 21, 21, 21,
	21, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 205, 205, 204, 20, 179, 179, 23, 132,
	132, 24, 24, 24, 24, 25, 32, 278, 278, 278,
	282, 282, 283, 283, 284, 284, 284, 284, 284, 284,
	284, 280, 280, 30, 30, 30, 30, 43, 35, 35,
	35, 35, 35, 35, 152, 149, 149, 148, 148, 148,
	148, 150, 150, 150, 150, 153, 153, 87, 87, 230,
	229, 229, 235, 235, 235, 85, 85, 85, 85, 85,
	86, 86, 86, 228, 228, 228, 228, 236, 236, 236,
	236, 236, 236, 234, 234, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 19, 279, 279, 281,
	281, 27, 37, 37, 38, 38, 39, 39, 39, 39,
	11, 11, 12, 12, 88, 88, 89, 89, 158, 158,
	158, 158, 90, 90, 61, 61, 61, 157, 247, 247,
	248, 248, 248, 248, 248, 248, 249, 249, 249, 249,
	249, 249, 249, 245, 245, 246, 243, 243, 244, 244,
	244, 244, 285, 285, 156, 156, 93, 93, 252, 252,
	252, 252, 250, 250, 250, 250, 250, 253, 251, 254,
	254, 254, 254, 254, 191, 191, 191, 41, 13, 67,
	67, 14, 10, 10, 136, 136, 97, 97, 196, 196,
	196, 78, 78, 56, 56, 56, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 137, 137, 138,
	138, 28, 31, 34, 40, 40, 40, 40, 40, 287,
	287, 74, 74, 74, 74, 75, 75, 151, 151, 154,
	154, 155, 155, 155, 69, 68, 70, 70, 9, 9,
	63, 63, 64, 64, 65, 65, 66, 66, 288, 288,
	26, 26, 26, 81, 81, 145, 145, 145, 147, 147,
	146, 146, 146, 122, 122, 122, 42, 102, 102, 111,
	111, 112, 112, 202, 113, 113, 33, 33, 51, 51,
	49, 49, 49, 49, 49, 49, 50, 50, 52, 52,
	52, 52, 52, 52, 52, 260, 260, 260, 263, 263,
	259, 261, 261, 262, 262, 286, 286, 123, 123, 123,
	92, 91, 91, 95, 95, 94, 96, 96, 195, 120,
	120, 120, 120, 139, 139, 140, 140, 141, 141, 142,
	142, 142, 143, 143, 144, 144, 119, 119, 175, 175,
	53, 53, 101, 101, 103, 103, 165, 165, 165, 166,
	166, 164, 164, 164, 164, 197, 197, 197, 197, 197,
	197, 197, 276, 276, 276, 277, 277, 194, 194, 198,
	198, 198, 198, 198, 198, 192, 192, 192, 192, 193,
	193, 203, 203, 126, 126, 126, 126, 124, 124, 125,
	125, 199, 199, 199, 199, 121, 121, 200, 200, 200,
	159, 159, 206, 206, 206, 224, 224, 100, 100, 100,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 208, 208, 208,
	208, 210, 210, 210, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 223, 223, 223, 223, 223, 211, 211, 218,
	218, 219, 219, 220, 221, 212, 212, 213, 213, 214,
	215, 222, 222, 222, 222, 226, 226, 216, 216, 216,
	216, 216, 217, 133, 133, 133, 133, 133, 133, 133,
	133, 133, 133, 133, 133, 133, 133, 134, 134, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 168, 168, 168, 168, 168, 168, 168, 168, 168,
	168, 169, 169, 169, 169, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 171, 171, 255, 255, 255, 255,
	255, 255, 255, 257, 257, 258, 258, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256,
	256, 256, 256, 256, 256, 256, 264, 264, 265, 265,
	267, 267, 268, 268, 269, 270, 270, 270, 271, 272,
	272, 266, 266, 273, 273, 273, 274, 274, 275, 275,
	275, 275, 275, 181, 181, 181, 182, 182, 183, 189,
	189, 189, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 76, 76,
	76, 76, 76, 108, 108, 178, 178, 176, 176, 176,
	180, 180, 127, 127, 225, 225, 225, 225, 225, 225,
	225, 128, 128, 128, 135, 129, 129, 130, 130, 130,
	130, 130, 130, 172, 173, 131, 131, 131, 174, 174,
	184, 188, 188, 187, 186, 186, 185, 185, 162, 162,
	163, 163, 161, 160, 116, 116, 115, 115, 114, 114,
	289, 289, 190, 190, 117, 117, 118, 110, 110, 201,
	201, 201, 201, 104, 104, 83, 83, 105, 105, 79,
	79, 82, 82, 80, 80, 80, 80, 98, 98, 99,
	99, 77, 77, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 170, 170, 227, 227, 227, 177, 71, 71,
	71, 72, 72, 73, 73, 232, 232, 232, 233, 233,
	233, 233, 231, 231, 231, 231, 231, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 3, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 2, 0, 7, 6, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 3, 3, 1, 1, 1,
	1, 1, 1, 6, 2, 2, 2, 2, 2, 3,
	5, 4, 6, 4, 6, 4, 6, 3, 5, 1,
	3, 1, 2, 2, 3, 2, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 5, 3, 0, 3, 3,
	0, 2, 3, 2, 3, 6, 6, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 2, 2, 2, 2, 2, 3,
	6, 3, 4, 1, 5, 2, 1, 3, 3, 3,
	3, 1, 3, 3, 1, 2, 2, 1, 0, 1,
	1, 3, 1, 1, 1, 2, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	2, 3, 4, 4, 4, 4, 2, 4, 4, 4,
	4, 4, 4, 2, 3, 3, 2, 3, 4, 4,
	5, 2, 3, 3, 4, 2, 3, 4, 3, 3,
	4, 4, 2, 5, 5, 6, 2, 2, 0, 2,
	0, 3, 6, 6, 5, 5, 4, 12, 4, 12,
	7, 10, 6, 9, 1, 0, 1, 3, 1, 1,
	1, 1, 8, 0, 1, 1, 0, 3, 2, 0,
	3, 1, 2, 2, 3, 6, 2, 1, 1, 2,
	4, 2, 5, 7, 8, 5, 3, 1, 4, 6,
	5, 10, 1, 1, 4, 0, 3, 0, 2, 2,
	2, 0, 1, 1, 2, 2, 0, 3, 3, 2,
	1, 1, 2, 2, 1, 2, 1, 4, 5, 2,
	0, 6, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 6, 8, 8, 10, 8, 10, 1, 0, 2,
	0, 2, 3, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 6, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 2, 0, 1,
	3, 1, 1, 3, 5, 5, 1, 1, 3, 3,
	1, 2, 3, 2, 3, 4, 1, 1, 8, 8,
	1, 2, 4, 4, 4, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 1, 0, 1, 0, 3, 1, 3, 2, 2,
	2, 1, 1, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	2, 3, 3, 0, 1, 3, 3, 5, 1, 1,
	3, 2, 4, 4, 0, 7, 4, 6, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 3, 3, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 6, 6,
	7, 1, 2, 1, 2, 1, 1, 2, 1, 3,
	1, 1, 2, 2, 1, 1, 3, 5, 6, 8,
	6, 6, 4, 4, 1, 1, 1, 5, 1, 3,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 6,
	4, 4, 4, 4, 4, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 4, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 3, 5, 4, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 3, 1, 3, 3, 3, 2,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 0, 2, 2, 3, 2, 1, 1, 3,
	5, 1, 2, 4, 2, 0, 1, 0, 3, 5,
	1, 0, 2, 2, 1, 1, 1, 2, 1, 2,
	1, 0, 1, 1, 1, 3, 3, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	2, 3, 1, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 1,
	5, 1, 1, 1, 1, 2, 2, 3, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -18, -19, -20, -23, -24, -25, -26, -27,
	-29, -31, -32, -34, -33, -35, -36, -37, -38, -39,
	-40, -28, -30, -41, -42, -43, 23, 34, 238, 47,
	67, -9, -10, -11, -12, -13, -14, -262, 93, 97,
	106, 130, 218, 104, 89, 124, 212, 240, 242, 249,
	-49, -51, 260, -152, 263, 35, 272, 61, 100, 244,
	236, 237, 300, 309, 69, -260, -52, -50, 351, 325,
	332, 253, -53, 281, 317, 354, 281, 139, 82, 320,
	-278, -105, 281, 82, -80, -71, 344, 4, -239, -241,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 48,
	55, 60, 61, 62, 64, 66, 67, 68, 71, 72,
	80, 81, 83, 85, 89, 91, 93, 96, 97, 99,
	104, 105, 106, 112, 113, 118, 120, 125, 130, 131,
	132, 133, 140, 143, 145, 138, 155, 156, 157, 159,
	160, 161, 164, 163, 168, 171, 174, 176, 177, 178,
	181, 179, 183, 184, 186, 185, 191, 193, 194, 196,
	199, 202, 205, 208, 209, 210, 211, 212, 214, 216,
	218, 220, 221, 222, 223, 224, 226, 227, 229, 230,
	231, 232, 233, 236, 234, 235, 237, 238, 239, 240,
	242, 244, 245, 247, 261, 262, 273, 249, 250, 251,
	252, 256, 254, 257, 258, 260, 263, 265, 268, 271,
	272, 274, 277, 275, 270, 280, 282, 283, 284, 285,
	286, 287, 288, 295, 296, 300, 301, 302, 303, 306,
	307, 308, 309, 311, 314, 315, 316, 321, 326, 327,
	328, 329, 330, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 84, 86, 87, 103,
	107, 108, 114, 115, 116, 126, 128, 134, 135, 144,
	146, 147, 148, 149, 150, 152, 166, 180, 190, 192,
	203, 207, 215, 217, 225, 246, 255, 266, 267, 276,
	278, 290, 291, 292, 297, 298, 313, 317, 318, -278,
	156, 222, -79, -71, 82, 91, 143, 308, 307, 22,
	214, 254, 283, 285, 82, 139, 281, 320, 310, -22,
	351, -21, -8, -17, -4, -36, -19, -37, -38, -39,
	-23, -18, -33, -26, -42, -15, 23, -231, 4, -239,
	-241, -240, -242, 58, 70, 123, 142, 136, 154, 158,
	167, 169, 182, 204, 206, 243, 264, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 65, 69, 73, 74, 76, 75, 77, 78,
	79, 88, 90, 92, 94, 95, 98, 100, 102, 109,
	110, 111, 119, 121, 122, 124, 127, 129, 137, 139,
	141, 151, 153, 162, 165, 170, 172, 173, 187, 188,
	189, 195, 197, 198, 200, 201, 213, 219, 228, 241,
	253, 259, 269, 279, 281, 289, 293, 294, 299, 304,
	305, 310, 312, 319, 320, 322, 323, 324, 325, -71,
	-71, -71, 218, 22, -282, 22, -283, -284, 69, 97,
	124, 253, 143, 91, 307, 156, 156, -282, -75, 249,
	-71, -149, 171, 257, 55, 246, 296, -150, -148, -230,
	290, -153, -106, 181, -71, 4, 181, 259, 82, 295,
	22, 34, 55, 60, 83, 125, 139, 140, 65, 66,
	160, 221, 171, 157, 257, 161, 258, 282, 290, 296,
	69, 311, 286, 105, -287, 296, 296, -287, -287, -74,
	296, 293, -75, 4, 82, 259, 181, -286, 281, -235,
	-228, -191, 9, 299, 109, 197, -234, 8, 343, -227,
	-233, 5, 7, 342, 4, -239, -241, -240, 281, 310,
	320, -136, 82, 305, -50, -52, -51, -94, -95, 304,
	151, 102, 201, -49, -51, -260, -263, 226, -259, -71,
	-263, -91, -92, 22, 94, 355, -199, -79, 198, -118,
	351, -3, -199, 134, -79, -82, 134, -79, -71, -199,
	134, 293, 355, -105, -98, -71, -161, -160, 353, 122,
	-167, -169, 342, 343, 337, 187, 331, -181, -171, -184,
	103, 246, 351, -79, -170, 356, 9, -257, -51, 29,
	-182, -183, 49, -71, 7, 8, 5, 6, -77, -208,
	-177, -217, 299, 109, 189, -255, -256, 4, -239, -232,
	-209, -219, -213, -216, 152, 58, 74, 75, 78, 76,
	79, 259, 310, 50, 28, 107, 108, 207, 215, 278,
	297, 298, 134, 190, 135, 56, 126, 166, 96, 37,
	39, 41, 42, 51, 52, 84, 86, 87, 114, 115,
	116, 144, 146, 147, 148, 149, 150, 192, 225, 266,
	276, 291, 292, 318, -240, -220, -221, -214, -215, -222,
	-167, 122, 351, -115, -116, -160, -161, 122, 153, 153,
	-200, -199, -71, 134, -83, 134, -82, -107, 134, -106,
	-107, 134, -98, 134, -205, -204, -233, 317, 281, 139,
	-179, 351, -132, 351, -71, 22, 197, 355, -167, -167,
	197, -71, -149, 53, -149, 261, 351, -154, -155, -68,
	-69, -70, 155, 220, 224, 293, 336, 122, 330, -235,
	-87, 88, -109, 353, 119, 55, -237, -234, 9, 261,
	221, 258, 122, -279, 197, 122, 122, 122, 122, 122,
	221, 258, 295, 161, 295, 122, 330, 155, 220, 273,
	281, 320, 122, 122, -151, -154, -151, 293, -75, -121,
	-199, 8, 7, 7, -106, 134, -71, -106, 139, -71,
	134, -94, -95, -120, -139, -140, 170, 111, 195, -123,
	22, 94, -123, -123, 44, 352, 352, 355, -263, -99,
	351, -110, -201, -167, 344, -110, -118, 344, -79, 351,
	-117, -190, -167, 88, -58, 234, -57, 21, 23, 97,
	315, 103, 270, 287, 250, 270, 287, 250, 234, 103,
	356, 234, 234, 103, -237, -80, 355, -231, 344, -238,
	-237, 10, 11, 57, 33, 342, 343, 344, 345, 117,
	346, 347, 340, 341, 339, 334, 335, 336, 63, 175,
	248, 13, 14, 15, 26, 200, 169, 331, 136, 264,
	337, 16, 17, 18, 154, 36, 137, -76, -84, -167,
	-167, -167, -167, -167, 206, -114, -162, 349, -51, 351,
	-51, -167, -108, 7, -51, -176, 349, -185, -167, -115,
	351, 5, 351, 5, -264, 326, 119, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 217, -226, 321, -226, -226,
	-210, 351, -210, -211, 351, -210, 327, 332, 351, 274,
	352, -104, -79, -116, -200, -81, -79, -81, 260, -71,
	30, 103, -60, 355, 48, 239, 103, -60, 355, 103,
	-60, 103, 103, 352, 355, -199, 134, -82, 30, -178,
	-206, -207, -209, -218, -212, -216, -217, 40, 46, 45,
	288, 180, 255, 267, 313, 38, 196, 145, 144, 146,
	147, 148, 149, 150, 266, 37, 225, 115, 116, 114,
	96, 87, 86, 192, 42, 41, -220, -221, -214, -215,
	84, 291, 292, 152, 39, 52, 51, 318, 276, -108,
	-167, -278, -284, -278, 30, -148, -230, -108, 355, 168,
	-86, 174, 186, 131, 198, 328, -229, 88, -235, -229,
	88, 72, -236, 5, 4, -177, -191, 88, 171, -217,
	353, -231, -22, 262, -106, 22, -230, -281, 119, -278,
	-230, -230, -230, -230, -230, 295, 119, -71, 168, -230,
	-230, 281, 139, 281, -75, -60, 355, 351, -93, 187,
	-261, 325, -93, 351, -72, 134, -71, -261, 187, -120,
	-140, -139, -141, -167, 22, -144, 113, 183, -167, -169,
	-50, -50, -50, -96, -195, -167, -259, 30, -98, -101,
	355, 122, 30, 4, -101, -79, 355, 352, 355, 293,
	-137, 65, 59, -157, 134, 59, -243, -71, 65, -244,
	54, 305, 219, 121, -137, 65, -137, 65, 65, -199,
	33, -33, 122, 33, -33, 122, 293, -82, -71, 293,
	293, -199, -203, 333, -71, -203, 355, -224, -206, -223,
	230, 231, 229, 233, 232, -206, -231, 290, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	169, 136, 264, 36, 137, -167, 293, -167, -167, -167,
	-167, 179, 187, 189, 299, 109, 306, 94, 193, -289,
	279, 32, -174, -51, 351, -189, 27, 269, 22, -181,
	246, 351, -162, -167, -163, -108, 352, 352, 355, -108,
	-180, 350, -176, -188, -187, 322, 352, -108, 319, 22,
	94, 344, 7, -133, 329, 178, 85, 132, 177, -134,
	252, -265, 112, 127, 351, 352, 352, 352, -167, -167,
	-127, -225, -108, 4, 329, 178, 85, 132, 177, 252,
	-127, -128, -167, -108, -129, -168, -169, 342, 343, 337,
	351, 246, -130, -167, -108, -167, 43, 165, 294, -131,
	-167, 122, -108, -167, -167, -167, -108, -108, -108, 351,
	7, 7, 290, 290, 7, 122, 352, 355, -159, 323,
	-145, -33, 351, 88, 30, -145, -111, -112, -202, -113,
	-79, 351, -71, -71, -82, -83, -106, -107, -107, -98,
	-22, -204, 103, -21, 352, 355, -100, 29, -133, 351,
	352, 355, 293, 122, 296, 352, -155, -85, 224, 268,
	235, 256, 355, -231, -280, -71, -22, -79, -82, -79,
	-199, -88, -98, -89, -71, -158, -157, -245, -246, -243,
	139, 305, 110, 30, 103, -67, 211, 30, 197, 187,
	-63, 284, 103, -142, -227, 351, 343, -143, 246, 247,
	355, -56, 31, 92, 351, 352, -159, -201, -103, -197,
	349, -199, -79, -51, -198, 351, -231, -159, 352, -190,
	-57, -79, -71, -71, 187, -157, 134, -62, 187, -206,
	-71, 351, 351, 159, 159, -71, -71, 134, -71, 134,
	-71, -71, -58, 234, -33, 351, -33, 351, -71, 234,
	-71, -79, 234, -44, 133, 193, -47, 325, -237, 330,
	-167, -167, 293, -289, 279, -174, -167, 179, 189, 299,
	109, 306, 94, 193, 122, 351, -168, -168, -108, -171,
	351, -108, 350, 359, 352, -167, 350, 350, 355, -186,
	-187, 98, -167, -95, 355, -94, -167, -108, -108, 352,
	352, 293, 293, 293, 293, 351, -270, 205, 351, 351,
	-167, 30, 355, 352, 122, 352, 352, -135, 213, 352,
	10, 11, 342, 343, 344, 345, 117, 346, 347, 340,
	341, 339, 334, 335, 336, 63, 175, 248, 13, 14,
	15, 154, 137, -168, -168, -168, -108, 351, 352, -172,
	-173, 122, 119, 30, -131, -131, -131, 352, 122, -108,
	355, 355, 355, 352, 352, 352, 7, 352, 355, 352,
	330, 330, 352, 274, 122, -79, -122, 241, -167, -122,
	-147, 197, -104, 317, -71, -122, -102, 355, 122, 336,
	-104, -60, -60, -60, -199, -206, 349, 349, 7, -167,
	-280, -280, -68, 303, 62, 224, -235, 355, -203, 352,
	352, 355, -72, 139, -72, -33, -106, 5, -33, -79,
	103, -64, 99, -288, 336, -71, -143, -167, -195, -21,
	-119, 127, -203, 355, 70, -126, 158, 182, 123, 167,
	243, 142, 7, -22, -164, 356, 351, -194, 332, -51,
	-198, -197, -119, 293, 293, 103, 187, 314, -247, -244,
	-167, -97, -196, -71, -258, 351, -255, -256, -77, 351,
	351, -55, 97, 260, -138, 103, -60, 103, -60, 293,
	-137, 65, -108, -108, 293, 293, -47, 122, 280, 199,
	-167, -167, -168, -168, 122, 351, -167, -178, 26, 26,
	352, -108, 352, 355, -163, -167, 352, -176, 100, -167,
	289, 352, 319, -95, -95, -95, 5, 178, 132, 177,
	-134, 177, -134, -134, 7, -271, -71, 351, 323, -94,
	352, -224, -206, -167, -172, -167, -224, -206, -168, -168,
	-168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
	-168, -168, -168, -168, -168, -168, -168, 94, 187, 193,
	-168, 355, -108, 352, -173, -172, -167, -167, -206, 352,
	352, 352, -108, -167, -167, -167, 352, 7, 274, -110,
	188, -122, 64, 352, -159, -112, -103, -190, 352, 350,
	7, 7, 352, -71, -90, 138, -158, 351, -72, 351,
	351, -93, 351, -71, -65, 164, -288, -234, -261, 198,
	352, 352, -175, 129, 44, -197, 158, 158, -197, -126,
	158, -124, 204, -124, -124, -276, 351, 350, -194, -231,
	349, 357, -108, -193, -192, 30, -71, 202, 352, -175,
	-71, -71, -157, 103, -248, 65, -249, 57, 110, 69,
	187, 189, 305, 219, 54, 88, 228, 352, 352, 355,
	-78, -115, 57, -78, -167, 351, -97, -98, 187, 88,
	187, 88, 81, 301, -71, -71, -79, -71, -71, 352,
	352, -71, -79, -238, 290, 351, 26, 26, -167, -178,
	352, -167, -167, 352, -167, 350, -167, 5, -167, 352,
	352, 352, 352, -272, -71, -167, 352, 352, 352, -173,
	122, 94, 193, 351, -167, 352, 352, 355, 352, 352,
	352, -146, 351, 197, -33, -122, 336, 350, 350, 137,
	-97, 351, -98, -88, 30, -97, 197, -66, 163, -288,
	-234, -63, -267, 324, -167, -108, -197, -197, -125, 312,
	197, 158, -197, 350, 352, -277, 7, -194, -193, 7,
	-166, -165, 120, 185, 352, -71, 351, -194, -267, -157,
	-71, -231, -71, 110, 134, 189, 159, 351, -168, -79,
	-156, -285, 68, 277, -196, -56, -231, -56, 352, -108,
	352, 352, 189, 189, -167, -206, -60, -60, 293, 293,
	293, 293, -170, -77, -71, -46, -45, 5, -167, -167,
	352, 352, -95, -266, 210, 352, -168, 122, 351, -178,
	352, -167, 95, -98, 65, -118, -51, 351, 208, 352,
	-97, 352, 352, -33, 352, -79, -288, -234, -64, -268,
	-269, -71, -125, 351, -167, -197, -164, 352, 355, -193,
	350, 355, 358, 336, -194, 351, -98, -192, -249, -72,
	187, -167, -73, 351, -90, 351, -78, -95, 228, -59,
	57, -71, -71, 351, 351, 351, 355, 352, -48, 336,
	352, -95, 44, -168, -178, 352, 352, 307, 188, 352,
	-71, -71, -156, 352, -90, -156, 351, -234, -65, 355,
	30, -98, -194, 7, -165, -231, 349, -193, -98, 352,
	103, 352, -252, 176, -71, -98, -56, 352, -79, -54,
	312, -231, -108, -108, -108, -45, 5, -273, 223, 247,
	-108, 352, 260, -159, 351, -90, -156, -90, -97, -66,
	-269, -271, 352, -192, 7, 352, 110, -250, -253, -251,
	197, 123, 209, 265, 352, 352, -93, -167, 352, 352,
	-95, 352, -274, -275, 36, 302, 72, -167, -274, -111,
	-98, -90, 352, 350, -71, -251, 197, -253, 197, 307,
	91, -252, 352, -275, 216, 118, 246, 216, 118, -159,
	352, -156, -254, 184, 239, 48, 260, -254, -250, 26,
	-61, 48, 239, -90, 20, 189, 88, -275,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 35, 0, 0, 0, 0,
	0, 87, 88, 89, 90, 91, 92, 0, 0, 0,
	464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	436, -2, 0, 173, 0, 380, 0, 380, 380, 384,
	0, 0, 466, 0, 345, 463, -2, 474, 0, 0,
	0, 472, 450, 0, 0, -2, 0, 0, 0, 0,
	0, 147, 0, 1009, 937, 943, 944, 968, 969, 970,
	987, 988, 989, 990, 991, 992, 993, 994, 995, 996,
	997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006,
	1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
	1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
	1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
	1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
	1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
	1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
	1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
	1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
	1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
	1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
	1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
	1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
	1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
	1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
	1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 0,
	0, 0, 0, 939, 1009, 0, 0, 0, 0, 94,
	95, 96, 97, 98, 0, 0, 0, 0, 0, 115,
	0, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	130, 131, 117, 118, 119, 120, 0, 256, 982, 983,
	984, 985, 986, 1197, 1198, 1199, 1200, 1201, 1202, 1203,
	1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213,
	1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 137,
	140, 141, 1068, 143, 0, 150, 151, 152, 154, 155,
	156, 157, 158, 159, 160, 0, 0, 0, 373, 1095,
	386, 168, 1043, 1101, 997, 1183, 1122, 176, 181, 0,
	1189, 184, 189, -2, 111, 215, 216, 217, 218, 219,
	220, 0, 0, 0, 226, 258, 0, 0, 0, 0,
	0, 233, 0, 236, 0, 0, 241, 245, 0, 0,
	0, 252, 0, 0, 388, 379, 388, 376, 377, 378,
	381, 0, 371, 163, 164, 165, 166, 0, 465, 167,
	192, 193, 194, 203, 204, 205, 206, 334, 0, 336,
	213, 214, 964, 0, 978, 979, 980, 981, 0, 0,
	0, 0, 0, 344, -2, 446, 447, -2, 0, 469,
	469, 469, 0, 0, 447, 0, 455, 1074, 458, 950,
	456, 0, 0, 471, 470, 0, 451, 551, 0, 500,
	0, 2, 0, 1165, 551, 0, 1165, 942, 0, 0,
	1165, 0, 0, 148, 149, 947, 945, 946, 0, 0,
	85, 659, 0, 0, 0, 0, 0, 0, 751, 753,
	1157, 1183, 0, 755, 756, 0, 758, 760, 761, 0,
	764, 765, 907, 939, 953, 954, 955, 956, 0, 0,
	959, 0, 961, 962, 963, 807, 774, -2, -2, 951,
	587, 588, 589, 590, -2, 1197, 778, 780, 782, 784,
	785, 786, 787, 0, 1141, 1158, 1159, 1179, 1180, 1188,
	1192, 1193, 1165, 1176, 1166, 1153, 1163, 1174, 1015, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 977, 621, 622, 627, 628, 630,
	86, 0, 0, 940, 916, 914, 915, 0, 0, 0,
	0, 557, 99, 1165, 60, 1165, 935, 60, 1165, 109,
	60, 1165, 107, 1165, 0, 132, 134, 1195, 0, 0,
	0, 0, 138, 0, 142, 144, 0, 0, 261, 372,
	0, 385, 169, 1152, 171, 0, 0, 175, 389, 391,
	392, 393, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 187, 112, 0, 464, 0, 221, 69, 70, 0,
	234, 242, 0, 260, 0, 0, 0, 0, 0, 0,
	235, 243, 237, 0, 0, 0, 246, 0, 248, 249,
	0, 0, 0, 0, 374, 387, 375, 0, 383, 60,
	555, 335, 966, 965, 317, 1165, 462, 317, 972, 462,
	1165, -2, 0, 442, 481, 482, 0, 0, 0, 0,
	467, 468, 0, 0, 0, 438, 439, 0, 457, 0,
	0, 503, 927, 931, 932, 503, 501, 552, 553, 0,
	0, 924, 922, 923, 37, 368, 39, 0, 368, 368,
	0, 0, 0, 0, 266, 0, 0, 268, 0, 0,
	0, 0, 0, 0, 542, 938, 0, 912, 913, 542,
	71, 0, 0, 0, 0, 842, 843, 844, 845, 846,
	847, 850, 851, 848, 849, 852, 853, 854, 0, 0,
	0, 855, 856, 857, 0, 0, 859, 0, 861, 0,
	0, 0, 0, 0, 0, 921, 0, 0, 858, 664,
	665, 666, 688, 689, 0, 752, 918, 911, 754, 0,
	-2, 863, 0, 757, 762, 763, 0, 0, 906, -2,
	0, 958, 0, 656, 809, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 892, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 624, 635, 632, 631,
	608, 0, 607, 605, 0, 609, 0, 0, 0, 82,
	0, 0, 933, 917, 561, 0, 413, 0, 0, 558,
	0, 0, 101, 0, 58, 59, 0, 103, 0, 0,
	105, 0, 0, 464, 0, 0, 1165, 0, 464, 0,
	865, 569, 570, 571, 572, 573, 656, 576, 577, 578,
	579, 580, 581, 582, 583, 584, 585, 586, 594, 595,
	596, 597, 598, 599, 600, 601, 602, 603, 604, 618,
	0, 593, 593, 593, 610, 611, 619, 620, 625, 626,
	637, 638, 640, 642, 636, 636, 636, 633, 634, 0,
	863, 0, 153, 0, 0, 172, 0, 0, 0, 0,
	394, 200, 201, 202, 396, 397, 177, 179, 190, 178,
	180, 182, 183, 207, 208, 209, 210, 211, 212, 0,
	0, 113, 239, 224, 222, 223, 225, 227, 0, 257,
	228, 229, 230, 231, 232, 238, 464, 244, 247, 250,
	251, 0, 0, 0, 382, 337, 0, 275, 0, 0,
	340, 461, 0, 0, 0, 1165, 971, 401, 0, 445,
	479, 480, 483, 487, 488, 491, 494, 495, 485, 659,
	452, 453, 454, 475, 476, 355, 459, 0, 0, 561,
	0, 0, 0, 930, 561, 0, 0, 926, 0, 0,
	0, 0, 367, 41, 1165, 0, 62, 0, 0, 307,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 264, 0, 0, 265, 0, 0, 0, 941, 0,
	0, 0, 74, 0, 948, 81, 0, 660, 565, 566,
	612, 613, 614, 615, 616, 661, 662, 0, 667, 668,
	669, 670, 671, 672, 673, 674, 675, 676, -2, -2,
	-2, 680, 681, 682, -2, -2, -2, 686, 687, -2,
	860, 862, 0, 921, 0, -2, 0, -2, -2, -2,
	-2, 700, 0, 702, 705, 707, 709, 0, 0, 0,
	0, 920, 719, 898, 0, 0, 839, 840, 841, 704,
	0, 0, 919, 910, 0, 0, -2, 759, 0, 0,
	0, 869, 870, 905, 901, 0, 766, 474, 0, 0,
	0, 0, 0, 967, 643, 644, 645, 646, 647, 648,
	657, 817, 0, 0, 0, 779, 781, 783, 0, 0,
	0, 0, 873, -2, -2, -2, -2, -2, -2, -2,
	0, 0, 863, 883, 0, 0, 722, 0, 0, 0,
	0, 1183, 0, 863, 891, 0, 0, 0, 0, 0,
	863, 0, 897, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 425, 0,
	425, 415, 0, 0, 0, 425, 428, 429, 431, 432,
	0, 0, 559, 100, 936, 60, 110, 60, 60, 108,
	116, 133, 0, 135, 136, 0, 562, 564, 574, 0,
	139, 0, 0, 0, 0, 174, 390, 395, 0, 197,
	0, 199, 0, 114, 259, 161, 240, 253, 254, 542,
	556, 0, 0, 274, 947, 276, 278, 279, 280, 281,
	972, 0, 972, 0, 0, 338, 0, 0, 0, 0,
	403, 409, 0, 0, 489, 0, 0, 486, 492, 493,
	0, 478, 353, 354, 464, 949, 497, 928, 542, 504,
	464, 514, 551, 528, 519, 0, 929, 497, 554, 925,
	40, 357, 0, 0, 0, 43, 1165, 51, 0, 289,
	0, 0, 0, 0, 0, 370, 52, 1165, 60, 1165,
	60, 53, 38, 368, 262, 0, 263, 0, 361, 0,
	356, 359, 0, 81, 0, 0, 68, 0, 72, 0,
	-2, -2, 0, 0, 0, 720, -2, 701, 703, 706,
	708, 710, 0, 0, 0, 0, 0, 0, 0, 721,
	0, 0, 908, 911, -2, 864, 867, 868, 0, 0,
	902, 0, 0, 0, 0, 473, 474, 474, 474, 772,
	0, 0, 0, 0, 0, 0, 773, 0, 0, 0,
	0, 0, 0, 790, 0, 791, 792, 0, 0, 793,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 725, 726, 727, 0, 0, 794, 889,
	890, 0, 0, 0, 0, 0, 0, 799, 0, 896,
	0, 0, 0, 803, 804, 805, 0, 591, 0, 617,
	639, 641, 629, 83, 0, 934, 93, 0, 560, 410,
	425, 0, 0, 417, 414, 412, 561, 0, 0, 0,
	0, 102, 104, 106, 0, 866, 0, 0, 0, 864,
	145, 146, 170, 195, 196, 198, 191, 0, 255, 283,
	316, 0, 0, 972, 0, 272, 317, 339, 341, 0,
	0, 405, 409, 0, 408, 462, 0, 0, 477, 0,
	499, 0, 502, 0, 0, 0, 0, 0, 548, 548,
	548, 546, 522, 0, 528, 0, 0, 540, 0, -2,
	519, 0, 499, 0, 0, 0, 0, 61, 287, 306,
	0, 0, 346, 352, 352, 0, 775, 776, 0, 0,
	0, 45, 0, 0, 0, 0, 49, 0, 55, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	663, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	899, 0, 834, 0, 0, 910, -2, 871, 900, 904,
	0, 767, 0, 0, 0, 0, 960, 649, 650, 651,
	652, 653, 654, 655, 0, 815, 816, 820, 0, 0,
	777, 0, 0, 872, 882, 884, 723, 724, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, -2, -2,
	-2, 741, 742, 743, -2, -2, -2, 0, 0, 0,
	885, 0, 0, 837, 887, 888, 893, 894, 0, 796,
	797, 798, 895, 0, 0, 0, 623, 0, 84, 423,
	424, 411, 422, 0, 425, 430, 427, 433, 0, 567,
	0, 0, 575, 162, 270, 0, 277, 0, 0, 0,
	275, 0, 0, 0, 407, 409, 0, 400, 401, 484,
	490, 460, 811, 0, 0, 505, 0, 0, 0, 0,
	0, 543, 547, 544, 545, 0, 0, 528, 540, 511,
	0, 0, 0, 518, 539, 0, 538, 527, -2, 811,
	363, 365, 42, 0, 288, 0, 291, 0, 0, 0,
	0, 297, 298, 0, 0, 0, 0, 308, 315, 0,
	355, 952, 0, 355, 0, 0, 0, 0, 0, 57,
	0, 0, 369, 0, 60, 60, 358, 0, 0, 0,
	0, 362, 360, 73, 0, 0, 0, 0, -2, 0,
	713, -2, -2, 833, 864, 909, 903, 957, 474, 768,
	770, 771, 658, 822, 819, 0, 806, 788, 789, 881,
	0, 0, 0, 0, 864, 836, 795, 0, 801, 802,
	592, 0, 0, 0, 416, 426, 0, 568, 563, 0,
	0, 0, 0, 0, 0, 0, 0, 398, 409, 0,
	402, 403, 448, 0, 498, 496, 530, 0, 532, 0,
	0, 0, 534, 514, 523, 0, 525, 540, 516, 0,
	0, 509, 0, 508, 528, 536, 0, 0, 449, 44,
	0, 292, 293, 972, 0, 296, 299, 0, 301, 974,
	283, 0, 312, 313, 347, 348, 351, 349, 352, 474,
	310, 0, 46, 47, 56, 64, 48, 54, 0, 0,
	0, 0, 541, 0, 0, 0, 78, 76, -2, -2,
	714, 835, 0, 474, 0, 808, -2, 0, 0, 0,
	838, 0, 0, 0, 0, 434, 435, 0, 0, 315,
	0, 305, 283, 273, 315, 0, 0, 404, 405, 810,
	812, 0, 531, 0, 550, 533, 528, 524, 0, 521,
	512, 0, 513, 0, 540, 0, 0, 520, 290, 294,
	0, 0, 321, 0, 309, 0, 355, 0, 0, 66,
	0, 364, 366, 0, 0, 0, 0, 80, 77, 0,
	769, 825, 0, -2, 0, 749, 800, 0, 419, 561,
	421, 0, 283, 315, 271, 283, 0, 406, 407, 0,
	0, 0, 0, 526, 510, 506, 0, 517, 0, 537,
	0, 300, 326, 0, 0, 0, 350, 767, 317, 50,
	0, 63, 0, 0, 474, 79, 75, 0, 0, 0,
	821, 750, 0, 420, 0, 303, 283, 342, 0, 399,
	813, 814, 549, 515, 0, 535, 0, 302, 322, 323,
	0, 318, 319, 320, 973, 314, 321, 65, 267, 269,
	0, 818, 823, 826, -2, 1125, 1006, 0, 824, 561,
	0, 304, 315, 507, 295, 324, 0, 325, 0, 0,
	0, 326, 0, 0, 828, 829, 830, 831, 832, 418,
	286, 283, 327, 0, 330, 331, 0, 328, 311, 0,
	282, 284, 285, 343, 329, 332, 333, 827,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 355, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 359, 354,
	334, 336, 335, 3, 356, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 357, 339, 358, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:801
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:807
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 36:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:858
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:868
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:894
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:908
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:931
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:934
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:941
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = nil
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = DropCascade
		}
	case 59:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = DropRestrict
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = DropDefault
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1003
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1004
		{
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1007
		{
			return unimplemented(sqllex, "alter using")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1008
		{
		}
	case 67:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 74:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.str = ""
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 80:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 81:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1081
		{
		}
	case 82:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1104
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1130
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1132
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{ /* SKIP DOC */
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1382
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1429
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1442
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			return unimplemented(sqllex, "set local")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 172:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1468
		{ /* SKIP DOC */
		}
	case 174:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1474
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			return unimplemented(sqllex, "set from current")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1509
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1518
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1526
		{
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1545
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = Low
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = Normal
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = High
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1617
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1621
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1766
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1770
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1778
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1794
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1798
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1802
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1814
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1852
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1856
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1862
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1866
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1870
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1874
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1918
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 282:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1949
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = DropDefault
		}
	case 287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 289:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2112
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2164
		{
			return unimplemented(sqllex, "match full")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			return unimplemented(sqllex, "match partial")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			return unimplemented(sqllex, "match simple")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2167
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2174
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2177
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2183
		{
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return unimplemented(sqllex, "no action")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2189
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return unimplemented(sqllex, "action set null")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return unimplemented(sqllex, "action set default")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = true
		}
	case 345:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = false
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2283
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2300
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2304
		{
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = Ascending
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = Descending
		}
	case 355:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2358
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2359
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = true
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2367
		{
			sqlVAL.union.val = false
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2373
		{
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2384
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2413
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2422
		{
		}
	case 380:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2423
		{
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.str = ""
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.str = ""
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2493
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = ReadOnly
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = ReadWrite
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2525
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.str = ""
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.str = ""
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2562
		{
			sqlVAL.str = ""
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.str = ""
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2577
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2578
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 412:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2595
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2618
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2626
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2642
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 426:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2676
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2677
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2685
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2707
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2905
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2906
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2913
		{
			return unimplemented(sqllex, "cte")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2917
		{
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2921
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2925
		{
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = true
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = false
		}
	case 469:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2937
		{
			sqlVAL.union.val = false
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = true
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2948
		{
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2949
		{
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2963
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3007
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3036
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3086
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3118
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = &From{}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3154
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3172
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3199
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3216
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = nil
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3274
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = true
		}
	case 528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = false
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3338
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.str = astFullJoin
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.str = astLeftJoin
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.str = astRightJoin
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.str = astInnerJoin
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3391
		{
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3392
		{
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3407
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3491
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3492
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3506
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3515
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3587
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = nil
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3652
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3748
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3780
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3819
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3820
		{
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 641:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = year
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = month
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = day
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = hour
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = minute
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = month
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3882
		{
			sqlVAL.union.val = hour
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = minute
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = minute
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = nil
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = second
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3915
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3950
		{
			return unimplemented(sqllex, "at tz")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4176
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4184
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4236
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4240
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4256
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4316
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4320
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4357
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4410
		{
			return unimplemented(sqllex, "variadic")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4411
		{
			return unimplemented(sqllex, "variadic")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4434
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			return unimplemented(sqllex, "func_application")
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4455
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			return unimplemented(sqllex, "current role")
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4481
		{
			return unimplemented(sqllex, "current user")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			return unimplemented(sqllex, "session user")
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4483
		{
			return unimplemented(sqllex, "user")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4485
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4512
		{
			return unimplemented(sqllex, "treat")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4556
		{
			return unimplemented(sqllex, "within group")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4557
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 811:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = Window(nil)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 814:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4592
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.str = ""
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4654
		{
			return unimplemented(sqllex, "frame range")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4655
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4656
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4660
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4666
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4667
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4668
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4669
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4670
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = Any
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = Some
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = All
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Plus
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = Minus
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = Mult
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = Div
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = FloorDiv
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = Mod
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = Bitand
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = Bitor
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = Pow
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = Bitxor
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = LT
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = GT
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = EQ
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = LE
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = GE
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = NE
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = Like
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = NotLike
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = ILike
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = NotILike
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4791
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 892:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4970
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5034
		{
		}
	case 921:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5035
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5079
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5128
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5153
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5188
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5197
		{
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5233
		{
			return unimplemented(sqllex, "func const")
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 960:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5242
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 961:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5252
		{
			sqlVAL.union.val = DNull
		}
	case 965:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 972:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5304
		{
			sqlVAL.str = ""
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 974:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
