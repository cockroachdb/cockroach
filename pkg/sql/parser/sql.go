// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:45

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:303
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LEADING = 57490
const LEAST = 57491
const LEFT = 57492
const LEVEL = 57493
const LIKE = 57494
const LIMIT = 57495
const LOCAL = 57496
const LOCALTIME = 57497
const LOCALTIMESTAMP = 57498
const LOW = 57499
const LSHIFT = 57500
const MATCH = 57501
const MINUTE = 57502
const MONTH = 57503
const NAME = 57504
const NAMES = 57505
const NATURAL = 57506
const NEXT = 57507
const NO = 57508
const NO_INDEX_JOIN = 57509
const NORMAL = 57510
const NOT = 57511
const NOTHING = 57512
const NULL = 57513
const NULLIF = 57514
const NULLS = 57515
const NUMERIC = 57516
const OF = 57517
const OFF = 57518
const OFFSET = 57519
const ON = 57520
const ONLY = 57521
const OR = 57522
const ORDER = 57523
const ORDINALITY = 57524
const OUT = 57525
const OUTER = 57526
const OVER = 57527
const OVERLAPS = 57528
const OVERLAY = 57529
const PARENT = 57530
const PARTIAL = 57531
const PARTITION = 57532
const PASSWORD = 57533
const PLACING = 57534
const POSITION = 57535
const PRECEDING = 57536
const PRECISION = 57537
const PREPARE = 57538
const PRIMARY = 57539
const PRIORITY = 57540
const RANGE = 57541
const READ = 57542
const REAL = 57543
const RECURSIVE = 57544
const REF = 57545
const REFERENCES = 57546
const RENAME = 57547
const REPEATABLE = 57548
const RELEASE = 57549
const RESTRICT = 57550
const RETURNING = 57551
const REVOKE = 57552
const RIGHT = 57553
const ROLLBACK = 57554
const ROLLUP = 57555
const ROW = 57556
const ROWS = 57557
const RSHIFT = 57558
const SAVEPOINT = 57559
const SEARCH = 57560
const SECOND = 57561
const SELECT = 57562
const SERIAL = 57563
const SERIALIZABLE = 57564
const SESSION = 57565
const SESSION_USER = 57566
const SET = 57567
const SHOW = 57568
const SIMILAR = 57569
const SIMPLE = 57570
const SMALLINT = 57571
const SMALLSERIAL = 57572
const SNAPSHOT = 57573
const SOME = 57574
const SPLIT = 57575
const SQL = 57576
const START = 57577
const STDIN = 57578
const STRICT = 57579
const STRING = 57580
const STORING = 57581
const SUBSTRING = 57582
const SYMMETRIC = 57583
const SYSTEM = 57584
const TABLE = 57585
const TABLES = 57586
const TEXT = 57587
const THEN = 57588
const TIME = 57589
const TIMESTAMP = 57590
const TIMESTAMPTZ = 57591
const TO = 57592
const TRAILING = 57593
const TRANSACTION = 57594
const TREAT = 57595
const TRIM = 57596
const TRUE = 57597
const TRUNCATE = 57598
const TYPE = 57599
const UNBOUNDED = 57600
const UNCOMMITTED = 57601
const UNION = 57602
const UNIQUE = 57603
const UNKNOWN = 57604
const UPDATE = 57605
const UPSERT = 57606
const USER = 57607
const USERS = 57608
const USING = 57609
const VALID = 57610
const VALIDATE = 57611
const VALUE = 57612
const VALUES = 57613
const VARCHAR = 57614
const VARIADIC = 57615
const VIEW = 57616
const VARYING = 57617
const WHEN = 57618
const WHERE = 57619
const WINDOW = 57620
const WITH = 57621
const WITHIN = 57622
const WITHOUT = 57623
const YEAR = 57624
const ZONE = 57625
const NOT_LA = 57626
const WITH_LA = 57627
const AS_LA = 57628
const POSTFIXOP = 57629
const UMINUS = 57630

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4896

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	307, 27,
	-2, 387,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 360,
	178, 360,
	209, 360,
	305, 360,
	307, 360,
	-2, 370,
	-1, 59,
	1, 363,
	178, 363,
	209, 363,
	305, 363,
	307, 363,
	-2, 369,
	-1, 68,
	1, 27,
	307, 27,
	-2, 387,
	-1, 394,
	1, 177,
	307, 177,
	-2, 890,
	-1, 430,
	153, 397,
	177, 397,
	-2, 366,
	-1, 433,
	153, 396,
	177, 396,
	-2, 364,
	-1, 557,
	153, 396,
	177, 396,
	-2, 367,
	-1, 613,
	304, 828,
	-2, 821,
	-1, 614,
	304, 829,
	-2, 822,
	-1, 620,
	5, 532,
	304, 532,
	-2, 983,
	-1, 644,
	5, 498,
	-2, 957,
	-1, 645,
	5, 526,
	304, 526,
	-2, 959,
	-1, 646,
	5, 506,
	-2, 960,
	-1, 647,
	5, 505,
	-2, 961,
	-1, 648,
	5, 526,
	304, 526,
	-2, 964,
	-1, 649,
	5, 526,
	304, 526,
	-2, 965,
	-1, 650,
	5, 527,
	-2, 968,
	-1, 651,
	5, 492,
	-2, 969,
	-1, 652,
	5, 492,
	-2, 970,
	-1, 653,
	5, 508,
	-2, 974,
	-1, 654,
	5, 493,
	-2, 979,
	-1, 655,
	5, 494,
	-2, 980,
	-1, 656,
	5, 495,
	-2, 981,
	-1, 657,
	5, 496,
	-2, 982,
	-1, 658,
	5, 492,
	-2, 986,
	-1, 659,
	5, 499,
	-2, 991,
	-1, 660,
	5, 497,
	-2, 994,
	-1, 661,
	5, 524,
	304, 524,
	-2, 996,
	-1, 662,
	5, 528,
	-2, 999,
	-1, 663,
	5, 530,
	-2, 1000,
	-1, 664,
	5, 523,
	304, 523,
	-2, 1004,
	-1, 915,
	97, 370,
	139, 370,
	153, 370,
	177, 370,
	181, 370,
	260, 370,
	-2, 644,
	-1, 923,
	304, 806,
	-2, 794,
	-1, 1127,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 567,
	-1, 1128,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 568,
	-1, 1129,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 569,
	-1, 1133,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 573,
	-1, 1134,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 574,
	-1, 1135,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 575,
	-1, 1138,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 580,
	-1, 1144,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 582,
	-1, 1147,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 587,
	-1, 1148,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 588,
	-1, 1149,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 589,
	-1, 1174,
	186, 716,
	-2, 719,
	-1, 1197,
	114, 732,
	304, 828,
	-2, 821,
	-1, 1198,
	114, 733,
	-2, 953,
	-1, 1199,
	114, 734,
	-2, 888,
	-1, 1200,
	114, 735,
	-2, 861,
	-1, 1201,
	114, 736,
	-2, 876,
	-1, 1202,
	114, 737,
	-2, 887,
	-1, 1203,
	114, 738,
	-2, 922,
	-1, 1352,
	97, 370,
	139, 370,
	153, 370,
	177, 370,
	181, 370,
	260, 370,
	-2, 445,
	-1, 1356,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 581,
	-1, 1357,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 583,
	-1, 1362,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 584,
	-1, 1380,
	186, 715,
	-2, 718,
	-1, 1545,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 585,
	-1, 1550,
	142, 0,
	-2, 599,
	-1, 1558,
	186, 717,
	-2, 720,
	-1, 1592,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 625,
	-1, 1593,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 626,
	-1, 1594,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 627,
	-1, 1598,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 631,
	-1, 1599,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 632,
	-1, 1600,
	13, 0,
	14, 0,
	15, 0,
	287, 0,
	288, 0,
	289, 0,
	-2, 633,
	-1, 1705,
	142, 0,
	-2, 600,
	-1, 1708,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 603,
	-1, 1709,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 605,
	-1, 1796,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 604,
	-1, 1797,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 606,
	-1, 1804,
	142, 0,
	-2, 634,
	-1, 1851,
	142, 0,
	-2, 635,
	-1, 1905,
	35, 0,
	127, 0,
	152, 0,
	227, 0,
	284, 0,
	-2, 956,
}

const sqlNprod = 1099
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25204

var sqlAct = [...]int{

	614, 1904, 1884, 1512, 1928, 1885, 1857, 1903, 1748, 1003,
	1886, 434, 1670, 1099, 1011, 918, 1771, 1569, 1697, 588,
	728, 604, 1784, 265, 612, 838, 395, 1671, 1629, 76,
	611, 455, 1108, 1691, 844, 1684, 1075, 45, 1437, 267,
	76, 76, 76, 1349, 1277, 76, 1074, 576, 76, 470,
	1524, 1436, 1079, 1383, 1348, 920, 76, 1339, 1534, 847,
	1078, 680, 1107, 76, 76, 19, 970, 76, 677, 1012,
	76, 76, 76, 76, 1043, 1333, 1160, 979, 1184, 1223,
	1157, 1111, 862, 77, 1027, 1036, 441, 58, 26, 698,
	469, 729, 15, 792, 606, 1109, 7, 776, 682, 439,
	1194, 586, 544, 253, 543, 577, 1069, 773, 951, 471,
	472, 485, 803, 482, 433, 1082, 491, 1005, 484, 712,
	868, 444, 268, 22, 58, 21, 258, 251, 10, 9,
	257, 8, 6, 560, 259, 4, 59, 955, 60, 561,
	559, 790, 382, 794, 665, 392, 373, 587, 705, 442,
	564, 772, 542, 478, 1791, 58, 385, 1792, 714, 438,
	714, 262, 452, 260, 438, 458, 261, 263, 465, 255,
	254, 714, 1919, 256, 1004, 1103, 73, 1347, 1040, 871,
	872, 1900, 1892, 269, 1770, 1103, 1289, 1882, 1008, 461,
	1033, 1877, 870, 1853, 1103, 431, 1033, 430, 421, 692,
	1847, 1835, 874, 1103, 1770, 1288, 1825, 1798, 1795, 1103,
	1033, 1103, 1781, 446, 453, 1770, 64, 460, 463, 1778,
	453, 1041, 1103, 873, 1769, 1753, 1046, 1770, 1103, 888,
	1752, 1730, 1710, 1103, 1046, 1046, 1839, 1707, 1656, 66,
	1033, 1046, 1655, 1641, 869, 1046, 1103, 76, 76, 76,
	76, 76, 1554, 494, 1773, 1046, 1498, 1042, 1039, 1000,
	1492, 1454, 1337, 1000, 1455, 667, 1452, 67, 1451, 1046,
	1450, 1046, 1336, 1046, 1605, 62, 487, 487, 879, 1380,
	1378, 63, 1046, 1377, 1336, 1379, 1046, 1557, 1046, 1317,
	439, 1382, 1103, 1104, 871, 872, 1103, 1315, 1055, 1045,
	61, 1046, 1046, 1032, 999, 967, 1033, 1000, 966, 722,
	968, 1318, 723, 1103, 1048, 1168, 1044, 874, 1098, 1063,
	715, 572, 715, 833, 64, 473, 832, 889, 571, 474,
	784, 64, 783, 715, 507, 451, 495, 473, 873, 68,
	474, 474, 479, 817, 527, 1939, 1902, 66, 1898, 1891,
	1848, 1779, 1735, 1731, 66, 1407, 1408, 1723, 1425, 1426,
	1427, 1722, 488, 1721, 1716, 492, 1715, 1714, 1668, 76,
	1620, 1704, 1615, 1614, 1613, 67, 1560, 467, 1543, 1038,
	1288, 1523, 67, 62, 76, 890, 869, 76, 76, 63,
	1502, 1662, 1459, 879, 453, 1456, 463, 496, 1444, 1435,
	1406, 1037, 1500, 1403, 1402, 1422, 1400, 1388, 1007, 926,
	1387, 1316, 1320, 1240, 1191, 61, 673, 931, 1190, 843,
	718, 76, 713, 76, 1165, 76, 76, 76, 571, 76,
	1667, 570, 1876, 836, 1571, 1867, 1838, 1817, 1815, 1806,
	1407, 1408, 558, 1788, 76, 1776, 1767, 1745, 1728, 871,
	872, 550, 1700, 553, 1413, 76, 1678, 1549, 1542, 1520,
	884, 881, 882, 883, 875, 876, 877, 878, 880, 76,
	900, 1518, 874, 1407, 1408, 267, 76, 76, 76, 1517,
	76, 871, 872, 672, 557, 1515, 1471, 1428, 1470, 1434,
	1396, 1395, 516, 873, 515, 1374, 671, 1370, 702, 76,
	76, 1162, 473, 1423, 921, 1304, 474, 76, 1267, 76,
	1266, 1254, 1253, 1233, 1166, 871, 872, 1661, 549, 700,
	494, 494, 1189, 1102, 956, 873, 959, 963, 267, 76,
	949, 76, 76, 76, 76, 76, 76, 76, 874, 1413,
	948, 76, 76, 510, 512, 947, 946, 76, 945, 944,
	943, 818, 942, 941, 940, 76, 939, 938, 268, 873,
	937, 1424, 936, 547, 935, 934, 933, 468, 545, 924,
	453, 479, 1413, 76, 922, 61, 76, 837, 431, 842,
	430, 877, 878, 880, 456, 900, 1254, 567, 568, 575,
	513, 503, 501, 573, 724, 1666, 735, 1298, 1297, 521,
	871, 872, 674, 495, 495, 717, 688, 1793, 720, 1665,
	1290, 268, 866, 1093, 879, 923, 699, 813, 726, 269,
	1458, 1457, 1355, 453, 706, 706, 707, 961, 439, 704,
	537, 962, 1419, 1420, 1421, 522, 1418, 1415, 1416, 1417,
	1409, 1410, 1411, 1412, 1414, 841, 460, 463, 1685, 1004,
	952, 1572, 1185, 1284, 779, 1465, 1863, 1824, 1649, 1391,
	780, 247, 807, 889, 496, 496, 814, 683, 835, 684,
	673, 1916, 269, 1915, 819, 1054, 76, 823, 824, 825,
	826, 827, 822, 420, 76, 419, 830, 831, 76, 834,
	243, 1761, 76, 76, 864, 852, 76, 414, 1499, 850,
	851, 431, 666, 858, 431, 431, 859, 860, 927, 76,
	540, 76, 76, 248, 76, 428, 71, 76, 1311, 76,
	76, 890, 76, 1760, 494, 1409, 1410, 1411, 1412, 1414,
	415, 1486, 1485, 1462, 1461, 519, 973, 244, 685, 1358,
	900, 541, 1303, 1302, 437, 1021, 487, 1301, 487, 1300,
	1823, 984, 986, 1145, 1047, 1786, 996, 953, 954, 995,
	1411, 1412, 1414, 683, 992, 684, 546, 758, 70, 580,
	1237, 1006, 900, 1006, 520, 76, 76, 1236, 1116, 423,
	1688, 499, 1487, 989, 1273, 1750, 436, 696, 253, 689,
	957, 997, 964, 1028, 1407, 1408, 960, 1865, 980, 976,
	875, 876, 877, 878, 880, 1159, 900, 495, 1044, 58,
	993, 258, 1050, 1159, 58, 257, 1030, 690, 267, 259,
	1029, 972, 76, 965, 1031, 1010, 249, 1482, 438, 708,
	1020, 1022, 1019, 1023, 685, 453, 492, 76, 76, 463,
	1025, 1068, 1185, 453, 76, 689, 262, 1915, 260, 1473,
	1024, 261, 263, 1925, 255, 254, 1015, 250, 256, 983,
	1040, 463, 1278, 972, 463, 1507, 246, 245, 496, 971,
	1936, 76, 714, 1059, 76, 954, 953, 1490, 1105, 1061,
	424, 69, 1049, 1209, 1286, 599, 1056, 1051, 1052, 1057,
	957, 900, 960, 1413, 498, 1062, 1096, 1097, 429, 1272,
	1115, 268, 425, 1041, 1060, 1269, 1931, 435, 267, 694,
	1818, 426, 72, 1142, 74, 686, 1888, 693, 1310, 1282,
	1879, 1637, 1312, 517, 1044, 365, 366, 367, 518, 1504,
	384, 1163, 1073, 396, 950, 1071, 1880, 1367, 1072, 1042,
	1039, 384, 1423, 982, 1089, 1407, 1408, 1265, 445, 445,
	1278, 1365, 74, 1638, 538, 74, 74, 464, 74, 1751,
	871, 872, 269, 1113, 1114, 1505, 735, 735, 700, 1924,
	76, 76, 76, 700, 1239, 1106, 76, 1172, 518, 76,
	1802, 1768, 1474, 874, 453, 76, 76, 76, 76, 76,
	1889, 268, 683, 76, 684, 1422, 76, 76, 1044, 914,
	1424, 76, 1342, 1394, 873, 1140, 1143, 981, 76, 539,
	76, 686, 1181, 1535, 1360, 1480, 1164, 76, 453, 1363,
	1345, 374, 1158, 1368, 1044, 438, 1929, 76, 1247, 1890,
	1139, 1533, 1937, 1887, 715, 1241, 1914, 1343, 1633, 1204,
	1634, 1155, 379, 1912, 1413, 439, 1683, 375, 76, 76,
	1280, 1264, 269, 1923, 76, 1153, 563, 969, 1091, 879,
	530, 1038, 508, 685, 494, 1528, 1636, 1242, 1930, 1251,
	562, 376, 735, 1639, 506, 1418, 1415, 1416, 1417, 1409,
	1410, 1411, 1412, 1414, 76, 1932, 76, 1726, 76, 378,
	1943, 619, 76, 1423, 563, 76, 1755, 1283, 1344, 1754,
	1601, 1743, 1812, 1364, 76, 1141, 1291, 1645, 1464, 1648,
	1366, 76, 1250, 76, 1323, 1246, 1647, 1243, 1319, 1503,
	1321, 1151, 1295, 1150, 1698, 1296, 1092, 1156, 735, 849,
	1635, 839, 74, 480, 74, 396, 396, 758, 758, 1858,
	1292, 562, 1293, 1294, 1271, 1354, 1307, 495, 1275, 1744,
	439, 1424, 1322, 1314, 1306, 699, 1325, 1313, 829, 1309,
	1308, 785, 1256, 1255, 699, 1694, 1530, 264, 1028, 1251,
	1529, 789, 735, 1727, 453, 377, 681, 1942, 517, 1699,
	1602, 1330, 477, 476, 436, 669, 1603, 1331, 1381, 58,
	668, 1030, 1644, 554, 1353, 1029, 1513, 1669, 1741, 1031,
	439, 1646, 1525, 1334, 757, 787, 1188, 1152, 496, 1805,
	57, 1725, 1438, 371, 1154, 1548, 788, 1401, 380, 1742,
	1361, 1369, 1274, 1359, 1053, 998, 1418, 1415, 1416, 1417,
	1409, 1410, 1411, 1412, 1414, 536, 36, 535, 534, 1326,
	686, 533, 532, 758, 37, 875, 876, 877, 878, 880,
	531, 900, 439, 528, 504, 76, 475, 374, 1439, 932,
	453, 821, 1390, 1187, 1883, 1855, 38, 1626, 1478, 509,
	1476, 1463, 396, 396, 1327, 1094, 1087, 1026, 379, 721,
	719, 716, 711, 375, 695, 691, 687, 1566, 848, 76,
	76, 1469, 1762, 565, 1916, 524, 809, 1494, 3, 758,
	1441, 1442, 1443, 1764, 988, 449, 384, 376, 74, 1100,
	396, 552, 396, 1491, 555, 1460, 76, 972, 972, 76,
	1773, 76, 1820, 987, 985, 378, 1489, 1850, 76, 445,
	1467, 370, 1481, 857, 1493, 1526, 569, 76, 991, 1226,
	74, 76, 990, 758, 1840, 1681, 1090, 76, 267, 1519,
	1086, 76, 1496, 76, 74, 1516, 413, 1264, 1495, 1497,
	566, 74, 74, 74, 64, 709, 1101, 457, 1009, 1527,
	49, 1539, 450, 1531, 525, 381, 1506, 1508, 1509, 1514,
	1477, 865, 1479, 781, 74, 74, 727, 66, 1035, 1522,
	1940, 1551, 777, 1941, 777, 76, 1562, 1563, 1564, 1532,
	1621, 1538, 1536, 1537, 1407, 1408, 871, 872, 1510, 416,
	417, 377, 1065, 1064, 396, 67, 777, 396, 396, 396,
	396, 396, 828, 62, 1501, 1453, 396, 396, 1299, 63,
	1238, 268, 384, 1235, 1234, 1559, 1015, 453, 1182, 1066,
	846, 1712, 771, 616, 1565, 1328, 1324, 1067, 61, 422,
	1573, 925, 1749, 372, 380, 820, 1578, 529, 445, 1878,
	1718, 867, 76, 76, 76, 735, 1393, 1783, 1801, 1186,
	930, 76, 76, 35, 840, 1608, 1673, 76, 592, 76,
	1627, 76, 76, 76, 453, 1466, 76, 76, 453, 1609,
	1575, 1576, 269, 735, 735, 1081, 1637, 1080, 1630, 1580,
	1581, 270, 735, 735, 810, 799, 1628, 1642, 1643, 615,
	1632, 1622, 793, 802, 1195, 670, 1625, 617, 76, 76,
	812, 811, 732, 805, 800, 618, 733, 958, 1638, 605,
	76, 76, 1612, 1682, 76, 735, 730, 1677, 1659, 1664,
	1676, 490, 1677, 76, 76, 1676, 1675, 1335, 1631, 1013,
	1183, 1675, 1389, 928, 1679, 591, 597, 596, 1663, 1170,
	500, 74, 1689, 1690, 1696, 1680, 1695, 1346, 48, 977,
	1706, 514, 76, 74, 757, 757, 390, 74, 994, 1701,
	391, 74, 1281, 1660, 1095, 853, 1475, 1702, 427, 1404,
	502, 1216, 1208, 734, 74, 1205, 1017, 1018, 548, 74,
	815, 676, 74, 1014, 396, 396, 526, 396, 1287, 1034,
	574, 861, 448, 1633, 447, 1634, 1076, 1724, 523, 1338,
	786, 1058, 418, 1814, 1088, 1249, 1935, 76, 1652, 76,
	1819, 76, 76, 1472, 1658, 1862, 758, 65, 25, 23,
	76, 1636, 20, 18, 735, 17, 16, 24, 1639, 14,
	13, 12, 11, 34, 33, 32, 764, 1739, 1736, 31,
	777, 867, 76, 30, 758, 758, 29, 1342, 5, 2,
	816, 1, 0, 758, 758, 0, 0, 453, 453, 1737,
	757, 453, 0, 0, 76, 1345, 76, 760, 1772, 0,
	1774, 1777, 759, 0, 0, 76, 1340, 1765, 1763, 0,
	1677, 76, 1343, 1676, 0, 1635, 758, 1070, 0, 1675,
	1210, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 74, 1077, 1787, 1800, 0, 1790, 0, 867,
	0, 0, 0, 0, 0, 0, 757, 1794, 0, 0,
	0, 1757, 76, 0, 735, 0, 0, 1780, 0, 1807,
	0, 0, 1816, 0, 0, 0, 74, 0, 0, 396,
	0, 76, 76, 1344, 0, 76, 0, 1810, 0, 76,
	1758, 1759, 0, 0, 76, 0, 1811, 0, 1828, 0,
	757, 0, 0, 1836, 0, 1830, 0, 1747, 1832, 76,
	1837, 0, 1677, 0, 267, 1676, 0, 0, 1829, 0,
	1831, 1675, 0, 0, 0, 439, 1841, 0, 1842, 0,
	1845, 806, 801, 1849, 0, 758, 76, 1846, 76, 76,
	0, 76, 700, 735, 0, 1844, 0, 1852, 0, 0,
	0, 1782, 1868, 0, 0, 1866, 0, 0, 0, 0,
	76, 1872, 453, 770, 1871, 0, 1870, 1864, 0, 0,
	1869, 1873, 0, 782, 1860, 74, 1244, 1245, 1875, 1772,
	1677, 977, 1874, 1676, 1252, 0, 76, 0, 76, 1675,
	1257, 1258, 1260, 1262, 1263, 1899, 0, 268, 1268, 264,
	1895, 1270, 74, 1897, 76, 0, 74, 1893, 1909, 0,
	578, 578, 1913, 74, 0, 1285, 1911, 0, 0, 678,
	1917, 735, 74, 0, 1896, 1918, 0, 1922, 0, 1920,
	0, 0, 74, 1921, 0, 758, 701, 0, 0, 0,
	1934, 1933, 57, 0, 1938, 0, 1338, 1210, 1210, 0,
	917, 0, 0, 1070, 777, 0, 0, 0, 269, 1070,
	0, 0, 1944, 0, 0, 731, 0, 0, 36, 0,
	0, 0, 0, 0, 0, 0, 37, 0, 0, 0,
	0, 1407, 1408, 734, 734, 0, 1861, 0, 0, 846,
	0, 846, 0, 396, 1342, 0, 0, 74, 38, 0,
	1329, 1210, 1210, 1210, 0, 0, 0, 0, 0, 1332,
	0, 0, 1345, 0, 758, 0, 1351, 0, 74, 0,
	0, 0, 0, 1340, 0, 854, 856, 0, 0, 1343,
	0, 0, 863, 1015, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1341, 909, 910, 911, 912, 913, 0,
	0, 0, 0, 916, 0, 0, 0, 1693, 0, 0,
	0, 1371, 1372, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 760, 760, 0,
	1413, 0, 759, 759, 0, 0, 0, 0, 0, 734,
	1344, 0, 758, 757, 0, 0, 64, 0, 0, 0,
	0, 0, 49, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1430, 1431, 1432, 0, 66,
	0, 757, 757, 0, 0, 0, 0, 0, 0, 1423,
	757, 757, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 734, 1692, 67, 0, 1210,
	1210, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	867, 63, 0, 757, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	252, 0, 0, 760, 0, 0, 0, 1424, 759, 734,
	0, 0, 0, 0, 74, 74, 0, 0, 0, 1210,
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 0, 1210,
	0, 1511, 0, 0, 977, 0, 846, 0, 0, 0,
	0, 0, 0, 1521, 0, 0, 0, 0, 0, 760,
	0, 0, 74, 0, 759, 0, 74, 0, 0, 0,
	0, 0, 1351, 0, 0, 0, 1541, 0, 1351, 0,
	0, 0, 0, 1546, 1547, 1417, 1409, 1410, 1411, 1412,
	1414, 0, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 1169, 1173, 760, 1176, 0, 0, 0, 759, 0,
	0, 0, 0, 0, 0, 0, 0, 1196, 1196, 1207,
	1570, 1218, 0, 0, 0, 0, 0, 1230, 1231, 1232,
	0, 0, 0, 1582, 1583, 1584, 1585, 1586, 1587, 1588,
	1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598,
	1599, 1600, 578, 1604, 0, 731, 731, 0, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
	1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138,
	0, 1144, 0, 1146, 1147, 1148, 1149, 1623, 1624, 977,
	0, 0, 757, 0, 0, 0, 867, 867, 0, 0,
	0, 0, 1650, 0, 1651, 0, 74, 1653, 1654, 0,
	0, 1657, 74, 0, 0, 0, 0, 0, 1192, 1193,
	593, 46, 1206, 0, 1217, 1219, 1224, 1227, 1228, 1229,
	0, 0, 0, 0, 0, 0, 0, 871, 872, 0,
	0, 1672, 0, 867, 1077, 0, 1672, 0, 1210, 678,
	0, 0, 0, 0, 0, 74, 74, 0, 46, 74,
	874, 731, 0, 0, 0, 0, 0, 0, 867, 1351,
	0, 757, 0, 0, 0, 0, 0, 0, 0, 432,
	0, 873, 440, 0, 0, 1276, 0, 1279, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 1719, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 731, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	734, 734, 0, 0, 0, 1210, 879, 0, 0, 734,
	734, 0, 1373, 0, 0, 0, 1375, 0, 0, 757,
	0, 0, 977, 0, 1738, 0, 396, 1740, 1385, 1386,
	0, 731, 1746, 0, 0, 74, 0, 0, 0, 0,
	0, 0, 734, 0, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 889, 0, 867, 0, 0,
	0, 0, 0, 0, 1433, 0, 760, 0, 0, 0,
	0, 759, 0, 0, 1672, 1446, 0, 0, 0, 74,
	0, 1785, 0, 0, 0, 1210, 0, 0, 0, 0,
	74, 0, 1356, 1357, 760, 760, 867, 0, 1362, 759,
	759, 0, 0, 760, 760, 0, 0, 0, 759, 759,
	0, 0, 0, 890, 0, 0, 1483, 1484, 0, 1804,
	0, 1376, 0, 0, 0, 0, 0, 0, 0, 0,
	1384, 0, 0, 0, 1407, 1408, 760, 846, 1392, 0,
	0, 759, 1397, 440, 0, 0, 0, 0, 0, 0,
	0, 734, 0, 871, 872, 0, 1821, 1822, 0, 0,
	1826, 0, 0, 0, 1827, 0, 1672, 916, 0, 396,
	0, 0, 0, 1224, 1224, 1224, 874, 0, 0, 871,
	872, 0, 1843, 0, 867, 901, 902, 903, 884, 881,
	882, 883, 875, 876, 877, 878, 880, 873, 900, 1851,
	0, 0, 874, 0, 905, 0, 1468, 0, 0, 0,
	0, 1859, 0, 867, 74, 0, 396, 0, 0, 0,
	0, 0, 0, 873, 1555, 0, 0, 0, 0, 888,
	0, 578, 0, 1413, 1672, 1785, 0, 0, 0, 578,
	0, 0, 0, 678, 0, 760, 0, 0, 0, 0,
	759, 734, 879, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 867, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 879, 1910,
	0, 894, 1423, 0, 1606, 0, 0, 0, 874, 0,
	905, 0, 0, 0, 0, 1616, 898, 906, 0, 0,
	0, 889, 0, 0, 0, 0, 0, 0, 1544, 873,
	0, 1545, 0, 0, 0, 888, 0, 0, 0, 0,
	0, 896, 1550, 0, 731, 0, 0, 889, 0, 0,
	734, 0, 432, 0, 0, 1305, 0, 0, 0, 0,
	1424, 0, 0, 0, 1567, 760, 0, 0, 0, 0,
	759, 0, 731, 731, 1577, 0, 0, 0, 1579, 890,
	0, 731, 731, 0, 879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1407, 1408, 1687, 0, 0, 0,
	0, 0, 898, 906, 0, 890, 0, 0, 871, 872,
	0, 1610, 1611, 0, 731, 0, 899, 904, 0, 0,
	1617, 1618, 1619, 0, 0, 0, 0, 896, 734, 0,
	0, 874, 0, 889, 0, 0, 1415, 1416, 1417, 1409,
	1410, 1411, 1412, 1414, 760, 0, 0, 0, 0, 759,
	0, 0, 873, 0, 0, 895, 0, 883, 875, 876,
	877, 878, 880, 578, 900, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 432, 0, 0, 432, 432,
	884, 881, 882, 883, 875, 876, 877, 878, 880, 0,
	900, 890, 0, 1413, 0, 0, 0, 0, 1686, 0,
	0, 915, 899, 0, 0, 919, 0, 879, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 1705, 760, 731, 894, 1708, 1709, 759, 0, 0,
	1711, 874, 0, 905, 1713, 0, 0, 0, 0, 0,
	0, 1717, 1423, 0, 0, 1720, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 889, 0, 888, 897,
	0, 0, 885, 886, 887, 0, 884, 881, 882, 883,
	875, 876, 877, 878, 880, 0, 900, 0, 1729, 0,
	0, 0, 0, 1732, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 0, 871, 872, 879, 891, 892,
	893, 901, 902, 903, 890, 0, 46, 0, 46, 0,
	1756, 894, 0, 731, 0, 898, 906, 0, 874, 0,
	905, 0, 0, 46, 0, 0, 0, 0, 46, 0,
	904, 0, 0, 0, 0, 0, 1834, 1775, 0, 873,
	896, 0, 0, 0, 0, 888, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1789, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1796, 1797, 895, 1409,
	1410, 1411, 1412, 1414, 0, 0, 0, 0, 0, 0,
	881, 882, 883, 875, 876, 877, 878, 880, 0, 900,
	0, 0, 731, 0, 879, 1809, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 0, 0, 0, 1813, 0,
	1881, 0, 898, 906, 0, 899, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	678, 0, 0, 0, 0, 0, 1901, 896, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 27, 1407, 1408, 0, 1425, 1426, 1427,
	0, 0, 0, 0, 50, 895, 0, 0, 0, 0,
	731, 1110, 897, 0, 0, 885, 886, 887, 0, 884,
	881, 882, 883, 875, 876, 877, 878, 880, 52, 900,
	0, 1001, 0, 0, 28, 0, 57, 0, 0, 0,
	1002, 890, 0, 0, 1422, 0, 0, 1161, 0, 0,
	0, 0, 899, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 53, 1894, 0, 0, 40,
	37, 0, 0, 0, 0, 0, 397, 0, 0, 0,
	0, 0, 1908, 1908, 0, 0, 42, 0, 0, 0,
	0, 0, 38, 1413, 398, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1908, 897,
	0, 0, 885, 886, 887, 0, 884, 881, 882, 883,
	875, 876, 877, 878, 880, 0, 900, 0, 0, 400,
	0, 0, 0, 1449, 405, 406, 0, 0, 411, 0,
	0, 0, 1423, 1908, 0, 0, 0, 0, 440, 0,
	399, 401, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 39, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	43, 0, 54, 0, 0, 0, 0, 44, 0, 402,
	64, 0, 0, 0, 0, 47, 49, 0, 0, 0,
	1424, 0, 403, 404, 0, 51, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 407, 0,
	0, 0, 0, 0, 0, 0, 56, 46, 0, 0,
	0, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 67, 0, 46, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 1352, 0, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 1420, 1421, 61, 1418, 1415, 1416, 1417, 1409,
	1410, 1411, 1412, 1414, 1161, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 915, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 408, 0, 0, 409,
	0, 0, 0, 0, 410, 0, 0, 0, 0, 613,
	602, 603, 600, 601, 589, 0, 0, 0, 412, 0,
	0, 0, 0, 0, 0, 78, 79, 0, 80, 0,
	0, 0, 0, 629, 595, 915, 0, 0, 81, 82,
	0, 644, 196, 645, 83, 646, 647, 0, 84, 200,
	201, 85, 610, 628, 648, 649, 204, 0, 640, 0,
	621, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 272, 93, 1907, 0, 622, 624, 0, 623,
	625, 95, 96, 97, 98, 650, 99, 651, 652, 0,
	100, 0, 101, 0, 0, 0, 643, 103, 0, 104,
	0, 0, 0, 594, 105, 106, 630, 631, 608, 0,
	1110, 107, 108, 653, 0, 109, 0, 110, 0, 0,
	273, 0, 111, 641, 0, 214, 0, 112, 113, 114,
	637, 639, 0, 0, 117, 0, 115, 0, 274, 116,
	654, 655, 656, 657, 0, 620, 0, 0, 118, 277,
	119, 120, 0, 0, 642, 278, 121, 1110, 0, 122,
	0, 1110, 123, 0, 124, 125, 126, 127, 128, 280,
	129, 130, 133, 131, 584, 132, 609, 638, 134, 658,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 281,
	138, 282, 632, 139, 140, 141, 142, 0, 633, 143,
	228, 144, 0, 145, 146, 147, 659, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 283, 155, 156, 598,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 626,
	163, 164, 0, 165, 660, 233, 166, 0, 172, 167,
	168, 169, 171, 661, 170, 634, 0, 173, 0, 174,
	175, 0, 236, 662, 663, 0, 0, 176, 635, 636,
	607, 177, 178, 1906, 180, 0, 0, 181, 182, 183,
	627, 184, 0, 185, 186, 187, 241, 664, 0, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 0,
	0, 0, 0, 0, 748, 742, 765, 736, 756, 755,
	581, 582, 738, 737, 0, 0, 583, 767, 766, 590,
	0, 0, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 761, 0,
	753, 752, 0, 0, 0, 0, 0, 0, 0, 751,
	1110, 1110, 0, 0, 1110, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 750, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 743, 744, 745, 746, 0, 764, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 754, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 740,
	0, 0, 0, 0, 0, 0, 1766, 747, 741, 0,
	0, 0, 0, 0, 0, 0, 769, 0, 0, 0,
	0, 0, 46, 739, 0, 0, 762, 763, 0, 0,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	768, 0, 266, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	285, 80, 286, 287, 288, 289, 193, 290, 291, 292,
	293, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	294, 84, 200, 201, 85, 295, 296, 202, 203, 204,
	297, 205, 298, 271, 299, 86, 87, 88, 915, 89,
	300, 90, 91, 92, 301, 272, 93, 94, 302, 303,
	304, 305, 306, 307, 95, 96, 97, 98, 206, 99,
	207, 208, 308, 100, 309, 101, 310, 311, 312, 102,
	103, 313, 104, 314, 0, 315, 209, 105, 106, 210,
	211, 316, 317, 318, 107, 108, 212, 0, 109, 319,
	110, 320, 321, 273, 322, 111, 213, 323, 214, 324,
	112, 113, 114, 215, 216, 275, 325, 117, 326, 115,
	327, 274, 116, 217, 218, 219, 220, 328, 221, 329,
	276, 118, 277, 119, 120, 330, 331, 222, 278, 121,
	279, 332, 122, 333, 334, 123, 0, 124, 125, 126,
	127, 128, 280, 129, 130, 133, 131, 335, 132, 336,
	223, 134, 224, 135, 136, 337, 338, 339, 340, 341,
	137, 225, 281, 138, 282, 226, 139, 140, 141, 142,
	342, 227, 143, 228, 144, 343, 145, 146, 147, 229,
	148, 149, 344, 151, 152, 150, 153, 345, 154, 283,
	155, 156, 230, 157, 0, 158, 159, 160, 346, 231,
	161, 162, 347, 163, 164, 284, 165, 232, 233, 166,
	348, 172, 167, 168, 169, 171, 234, 170, 235, 349,
	173, 350, 174, 175, 351, 236, 237, 238, 352, 353,
	176, 239, 240, 354, 177, 178, 179, 180, 355, 356,
	181, 182, 183, 357, 184, 358, 185, 186, 187, 241,
	242, 359, 360, 188, 361, 362, 363, 364, 189, 190,
	191, 192, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1540, 78,
	79, 285, 80, 286, 287, 288, 289, 193, 290, 291,
	292, 293, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 294, 84, 200, 201, 85, 295, 296, 202, 203,
	204, 297, 205, 298, 271, 299, 86, 87, 88, 0,
	89, 300, 90, 91, 92, 301, 272, 93, 94, 302,
	303, 304, 305, 306, 307, 95, 96, 97, 98, 206,
	99, 207, 208, 308, 100, 309, 101, 310, 311, 312,
	102, 103, 313, 104, 314, 0, 315, 209, 105, 106,
	210, 211, 316, 317, 318, 107, 108, 212, 0, 109,
	319, 110, 320, 321, 273, 322, 111, 213, 323, 214,
	324, 112, 113, 114, 215, 216, 275, 325, 117, 326,
	115, 327, 274, 116, 217, 218, 219, 220, 328, 221,
	329, 276, 118, 277, 119, 120, 330, 331, 222, 278,
	121, 279, 332, 122, 333, 334, 123, 0, 124, 125,
	126, 127, 128, 280, 129, 130, 133, 131, 335, 132,
	336, 223, 134, 224, 135, 136, 337, 338, 339, 340,
	341, 137, 225, 281, 138, 282, 226, 139, 140, 141,
	142, 342, 227, 143, 228, 144, 343, 145, 146, 147,
	229, 148, 149, 344, 151, 152, 150, 153, 345, 154,
	283, 155, 156, 230, 157, 0, 158, 159, 160, 346,
	231, 161, 162, 347, 163, 164, 284, 165, 232, 233,
	166, 348, 172, 167, 168, 169, 171, 234, 170, 235,
	349, 173, 350, 174, 175, 351, 236, 237, 238, 352,
	353, 176, 239, 240, 354, 177, 178, 179, 180, 355,
	356, 181, 182, 183, 357, 184, 358, 185, 186, 187,
	241, 242, 359, 360, 188, 361, 362, 363, 364, 189,
	190, 191, 192, 266, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 703, 0, 0, 78,
	79, 285, 80, 286, 287, 288, 289, 193, 290, 291,
	292, 293, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 294, 84, 200, 201, 85, 295, 296, 202, 203,
	204, 297, 205, 298, 271, 299, 86, 87, 88, 0,
	89, 300, 90, 91, 92, 301, 272, 93, 94, 302,
	303, 304, 305, 306, 307, 95, 96, 97, 98, 206,
	99, 207, 208, 308, 100, 309, 101, 310, 311, 312,
	102, 103, 313, 104, 314, 0, 315, 209, 105, 106,
	210, 211, 316, 317, 318, 107, 108, 212, 0, 109,
	319, 110, 320, 321, 273, 322, 111, 213, 323, 214,
	324, 112, 113, 114, 215, 216, 275, 325, 117, 326,
	115, 327, 274, 116, 217, 218, 219, 220, 328, 221,
	329, 276, 118, 277, 119, 120, 330, 331, 222, 278,
	121, 279, 332, 122, 333, 334, 123, 0, 124, 125,
	126, 127, 128, 280, 129, 130, 133, 131, 335, 132,
	336, 223, 134, 224, 135, 136, 337, 338, 339, 340,
	341, 137, 225, 281, 138, 282, 226, 139, 140, 141,
	142, 342, 227, 143, 228, 144, 343, 145, 146, 147,
	229, 148, 149, 344, 151, 152, 150, 153, 345, 154,
	283, 155, 156, 230, 157, 0, 158, 159, 160, 346,
	231, 161, 162, 347, 163, 164, 284, 165, 232, 233,
	166, 348, 172, 167, 168, 169, 171, 234, 170, 235,
	349, 173, 350, 174, 175, 351, 236, 237, 238, 352,
	353, 176, 239, 240, 354, 177, 178, 179, 180, 355,
	356, 181, 182, 183, 357, 184, 358, 185, 186, 187,
	241, 242, 359, 360, 188, 361, 362, 363, 364, 189,
	190, 191, 192, 613, 602, 603, 600, 601, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 1178, 80, 0, 0, 0, 0, 629, 595, 0,
	0, 0, 81, 82, 194, 644, 196, 645, 83, 646,
	647, 0, 84, 200, 201, 85, 610, 628, 648, 649,
	204, 0, 640, 0, 621, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 272, 93, 94, 0,
	622, 624, 0, 623, 625, 95, 96, 97, 98, 650,
	99, 651, 652, 0, 100, 0, 101, 0, 1179, 0,
	643, 103, 0, 104, 0, 0, 0, 594, 105, 106,
	630, 631, 608, 0, 0, 107, 108, 653, 0, 109,
	0, 110, 0, 0, 273, 0, 111, 641, 0, 214,
	0, 112, 113, 114, 637, 639, 275, 0, 117, 0,
	115, 0, 274, 116, 654, 655, 656, 657, 0, 620,
	0, 276, 118, 277, 119, 120, 0, 0, 642, 278,
	121, 279, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 280, 129, 130, 133, 131, 584, 132,
	609, 638, 134, 658, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 281, 138, 282, 632, 139, 140, 141,
	142, 0, 633, 143, 228, 144, 0, 145, 146, 147,
	659, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	283, 155, 156, 598, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 626, 163, 164, 284, 165, 660, 233,
	166, 0, 172, 167, 168, 169, 171, 661, 170, 634,
	0, 173, 0, 174, 175, 0, 236, 662, 663, 0,
	0, 176, 635, 636, 607, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 627, 184, 0, 185, 186, 187,
	241, 664, 1177, 0, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 582, 1180, 0, 0, 0,
	583, 0, 0, 590, 1175, 613, 602, 603, 600, 601,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 629,
	595, 0, 0, 0, 81, 82, 194, 644, 196, 645,
	83, 646, 647, 0, 84, 200, 201, 85, 610, 628,
	648, 649, 204, 0, 640, 0, 621, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 272, 93,
	94, 0, 622, 624, 0, 623, 625, 95, 96, 97,
	98, 650, 99, 651, 652, 679, 100, 0, 101, 0,
	0, 0, 643, 103, 0, 104, 0, 0, 0, 594,
	105, 106, 630, 631, 608, 0, 0, 107, 108, 653,
	0, 109, 0, 110, 0, 0, 273, 0, 111, 641,
	0, 214, 0, 112, 113, 114, 637, 639, 275, 0,
	117, 0, 115, 0, 274, 116, 654, 655, 656, 657,
	0, 620, 0, 276, 118, 277, 119, 120, 0, 0,
	642, 278, 121, 279, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	584, 132, 609, 638, 134, 658, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 281, 138, 282, 632, 139,
	140, 141, 142, 0, 633, 143, 228, 144, 0, 145,
	146, 147, 659, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 283, 155, 156, 598, 157, 0, 158, 159,
	160, 64, 231, 161, 162, 626, 163, 164, 284, 165,
	660, 233, 166, 0, 172, 167, 168, 169, 171, 661,
	170, 634, 0, 173, 66, 174, 175, 0, 236, 662,
	663, 0, 0, 176, 635, 636, 607, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 627, 184, 0, 185,
	186, 187, 497, 664, 0, 0, 188, 0, 0, 0,
	62, 189, 190, 191, 192, 585, 63, 613, 602, 603,
	600, 601, 589, 0, 0, 0, 581, 582, 0, 0,
	0, 0, 583, 78, 79, 590, 80, 0, 0, 0,
	0, 629, 595, 0, 0, 0, 81, 82, 194, 644,
	196, 645, 83, 646, 647, 0, 84, 200, 201, 85,
	610, 628, 648, 649, 204, 0, 640, 0, 621, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	272, 93, 94, 0, 622, 624, 0, 623, 625, 95,
	96, 97, 98, 650, 99, 651, 652, 0, 100, 0,
	101, 0, 0, 0, 643, 103, 0, 104, 0, 0,
	0, 594, 105, 106, 630, 631, 608, 0, 0, 107,
	108, 653, 0, 109, 0, 110, 0, 0, 273, 0,
	111, 641, 0, 214, 0, 112, 113, 114, 637, 639,
	275, 0, 117, 0, 115, 0, 274, 116, 654, 655,
	656, 657, 0, 620, 0, 276, 118, 277, 119, 120,
	0, 0, 642, 278, 121, 279, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 280, 129, 130,
	133, 131, 584, 132, 609, 638, 134, 658, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 281, 138, 282,
	632, 139, 140, 141, 142, 0, 633, 143, 228, 144,
	0, 145, 146, 147, 659, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 283, 155, 156, 598, 157, 0,
	158, 159, 160, 64, 231, 161, 162, 626, 163, 164,
	284, 165, 660, 233, 166, 0, 172, 167, 168, 169,
	171, 661, 170, 634, 0, 173, 66, 174, 175, 0,
	236, 662, 663, 0, 0, 176, 635, 636, 607, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 627, 184,
	0, 185, 186, 187, 497, 664, 0, 0, 188, 0,
	0, 0, 62, 189, 190, 191, 192, 585, 63, 613,
	602, 603, 600, 601, 589, 0, 0, 0, 581, 582,
	0, 0, 0, 0, 583, 78, 79, 590, 80, 0,
	0, 0, 0, 629, 595, 0, 0, 0, 81, 82,
	194, 644, 196, 645, 83, 646, 647, 1220, 84, 200,
	201, 85, 610, 628, 648, 649, 204, 0, 640, 0,
	621, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 272, 93, 94, 0, 622, 624, 0, 623,
	625, 95, 96, 97, 98, 650, 99, 651, 652, 0,
	100, 0, 101, 0, 0, 0, 643, 103, 0, 104,
	0, 0, 0, 594, 105, 106, 630, 631, 608, 0,
	0, 107, 108, 653, 0, 109, 0, 110, 0, 1225,
	273, 0, 111, 641, 0, 214, 0, 112, 113, 114,
	637, 639, 275, 0, 117, 0, 115, 0, 274, 116,
	654, 655, 656, 657, 0, 620, 0, 276, 118, 277,
	119, 120, 0, 1221, 642, 278, 121, 279, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 280,
	129, 130, 133, 131, 584, 132, 609, 638, 134, 658,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 281,
	138, 282, 632, 139, 140, 141, 142, 0, 633, 143,
	228, 144, 0, 145, 146, 147, 659, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 283, 155, 156, 598,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 626,
	163, 164, 284, 165, 660, 233, 166, 0, 172, 167,
	168, 169, 171, 661, 170, 634, 0, 173, 0, 174,
	175, 0, 236, 662, 663, 0, 1222, 176, 635, 636,
	607, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	627, 184, 0, 185, 186, 187, 241, 664, 0, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 585,
	0, 613, 602, 603, 600, 601, 589, 0, 0, 0,
	581, 582, 0, 0, 0, 0, 583, 78, 79, 590,
	80, 0, 0, 0, 0, 629, 595, 0, 0, 0,
	81, 82, 194, 644, 196, 645, 83, 646, 647, 0,
	84, 200, 201, 85, 610, 628, 648, 649, 204, 0,
	640, 0, 621, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 272, 93, 94, 0, 622, 624,
	0, 623, 625, 95, 96, 97, 98, 650, 99, 651,
	652, 0, 100, 0, 101, 0, 0, 0, 643, 103,
	0, 104, 0, 0, 0, 594, 105, 106, 630, 631,
	608, 0, 0, 107, 108, 653, 0, 109, 0, 110,
	0, 0, 273, 0, 111, 641, 0, 214, 0, 112,
	113, 114, 637, 639, 275, 0, 117, 0, 115, 0,
	274, 116, 654, 655, 656, 657, 0, 620, 0, 276,
	118, 277, 119, 120, 0, 0, 642, 278, 121, 279,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 280, 129, 130, 133, 131, 584, 132, 609, 638,
	134, 658, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 281, 138, 282, 632, 139, 140, 141, 142, 0,
	633, 143, 228, 144, 0, 145, 146, 147, 659, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 283, 155,
	156, 598, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 626, 163, 164, 284, 165, 660, 233, 166, 0,
	172, 167, 168, 169, 171, 661, 170, 634, 0, 173,
	0, 174, 175, 0, 236, 662, 663, 0, 0, 176,
	635, 636, 607, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 627, 184, 0, 185, 186, 187, 241, 664,
	0, 0, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 581, 582, 0, 0, 0, 0, 583, 0,
	0, 590, 1607, 613, 602, 603, 600, 601, 589, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 0, 0, 629, 595, 0,
	0, 0, 81, 82, 194, 644, 196, 645, 83, 646,
	647, 0, 84, 200, 201, 85, 610, 628, 648, 649,
	204, 0, 640, 0, 621, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 272, 93, 94, 0,
	622, 624, 0, 623, 625, 95, 96, 97, 98, 650,
	99, 651, 652, 0, 100, 0, 101, 0, 0, 0,
	643, 103, 0, 104, 0, 0, 0, 594, 105, 106,
	630, 631, 608, 0, 0, 107, 108, 653, 0, 109,
	0, 110, 0, 0, 273, 0, 111, 641, 0, 214,
	0, 112, 113, 114, 637, 639, 275, 0, 117, 0,
	115, 0, 274, 116, 654, 655, 656, 657, 0, 620,
	0, 276, 118, 277, 119, 120, 0, 0, 642, 278,
	121, 279, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 280, 129, 130, 133, 131, 584, 132,
	609, 638, 134, 658, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 281, 138, 282, 632, 139, 140, 141,
	142, 0, 633, 143, 228, 144, 0, 145, 146, 147,
	659, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	283, 155, 156, 598, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 626, 163, 164, 284, 165, 660, 233,
	166, 0, 172, 167, 168, 169, 171, 661, 170, 634,
	0, 173, 0, 174, 175, 0, 236, 662, 663, 0,
	0, 176, 635, 636, 607, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 627, 184, 0, 185, 186, 187,
	241, 664, 0, 0, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 581, 582, 0, 0, 0, 0,
	583, 0, 0, 590, 1556, 613, 602, 603, 600, 601,
	589, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 629,
	595, 0, 0, 0, 81, 82, 194, 644, 196, 645,
	83, 646, 647, 0, 84, 200, 201, 85, 610, 628,
	648, 649, 204, 0, 640, 0, 621, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 272, 93,
	94, 0, 622, 624, 0, 623, 625, 95, 96, 97,
	98, 650, 99, 651, 652, 0, 100, 0, 101, 0,
	0, 0, 643, 103, 0, 104, 0, 0, 0, 594,
	105, 106, 630, 631, 608, 0, 0, 107, 108, 653,
	0, 109, 0, 110, 0, 0, 273, 0, 111, 641,
	0, 214, 0, 112, 113, 114, 637, 639, 275, 0,
	117, 0, 115, 0, 274, 116, 654, 655, 656, 657,
	0, 620, 0, 276, 118, 277, 119, 120, 0, 0,
	642, 278, 121, 279, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	584, 132, 609, 638, 134, 658, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 281, 138, 282, 632, 139,
	140, 141, 142, 0, 633, 143, 228, 144, 0, 145,
	146, 147, 659, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 283, 155, 156, 598, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 626, 163, 164, 284, 165,
	660, 233, 166, 0, 172, 167, 168, 169, 171, 661,
	170, 634, 0, 173, 0, 174, 175, 0, 236, 662,
	663, 0, 0, 176, 635, 636, 607, 177, 178, 179,
	180, 0, 0, 181, 182, 183, 627, 184, 0, 185,
	186, 187, 241, 664, 0, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 581, 582, 0, 0,
	0, 0, 583, 0, 0, 590, 1174, 613, 602, 603,
	600, 601, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 629, 595, 0, 0, 0, 81, 82, 194, 644,
	196, 645, 83, 646, 647, 0, 84, 200, 201, 85,
	610, 628, 648, 649, 204, 0, 640, 0, 621, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	272, 93, 94, 0, 622, 624, 0, 623, 625, 95,
	96, 97, 98, 650, 99, 651, 652, 0, 100, 0,
	101, 0, 0, 0, 643, 103, 0, 104, 0, 0,
	0, 594, 105, 106, 630, 631, 608, 0, 0, 107,
	108, 653, 0, 109, 0, 110, 0, 0, 273, 0,
	111, 641, 0, 214, 0, 112, 113, 114, 637, 639,
	275, 0, 117, 0, 115, 0, 274, 116, 654, 655,
	656, 657, 0, 620, 0, 276, 118, 277, 119, 120,
	0, 0, 642, 278, 121, 279, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 280, 129, 130,
	133, 131, 584, 132, 609, 638, 134, 658, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 281, 138, 282,
	632, 139, 140, 141, 142, 0, 633, 143, 228, 144,
	0, 145, 146, 147, 659, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 283, 155, 156, 598, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 626, 163, 164,
	284, 165, 660, 233, 166, 0, 172, 167, 168, 169,
	171, 661, 170, 634, 0, 173, 0, 174, 175, 0,
	236, 662, 663, 0, 0, 176, 635, 636, 607, 177,
	178, 179, 180, 0, 0, 181, 182, 183, 627, 184,
	0, 185, 186, 187, 241, 664, 0, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 585, 0, 0,
	0, 0, 613, 602, 603, 600, 601, 589, 581, 582,
	0, 0, 0, 0, 583, 921, 1171, 590, 78, 79,
	0, 80, 0, 0, 0, 0, 629, 595, 0, 0,
	0, 81, 82, 194, 644, 196, 645, 83, 646, 647,
	0, 84, 200, 201, 85, 610, 628, 648, 649, 204,
	0, 640, 0, 621, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 272, 93, 94, 0, 622,
	624, 0, 623, 625, 95, 96, 97, 98, 650, 99,
	651, 652, 0, 100, 0, 101, 0, 0, 0, 643,
	103, 0, 104, 0, 0, 0, 594, 105, 106, 630,
	631, 608, 0, 0, 107, 108, 653, 0, 109, 0,
	110, 0, 0, 273, 0, 111, 641, 0, 214, 0,
	112, 113, 114, 637, 639, 275, 0, 117, 0, 115,
	0, 274, 116, 654, 655, 656, 657, 0, 620, 0,
	276, 118, 277, 119, 120, 0, 0, 642, 278, 121,
	279, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 280, 129, 130, 133, 131, 584, 132, 609,
	638, 134, 658, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 281, 138, 282, 632, 139, 140, 141, 142,
	0, 633, 143, 228, 144, 0, 145, 146, 147, 659,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 283,
	155, 156, 598, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 626, 163, 164, 284, 165, 660, 233, 166,
	0, 172, 167, 168, 169, 171, 661, 170, 634, 0,
	173, 0, 174, 175, 0, 236, 662, 663, 0, 0,
	176, 635, 636, 607, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 627, 184, 0, 185, 186, 187, 241,
	664, 0, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 585, 0, 613, 602, 603, 600, 601, 589,
	0, 0, 0, 581, 582, 579, 0, 0, 0, 583,
	78, 79, 590, 80, 0, 0, 0, 0, 629, 595,
	0, 0, 0, 81, 82, 194, 644, 196, 645, 83,
	646, 647, 0, 84, 200, 201, 85, 610, 628, 648,
	649, 204, 0, 640, 0, 621, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 622, 624, 0, 623, 625, 95, 96, 97, 98,
	650, 99, 651, 652, 0, 100, 0, 101, 0, 0,
	0, 643, 103, 0, 104, 0, 0, 0, 594, 105,
	106, 630, 631, 608, 0, 0, 107, 108, 653, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 641, 0,
	214, 0, 112, 113, 114, 637, 639, 275, 0, 117,
	0, 115, 0, 274, 116, 654, 655, 656, 657, 0,
	620, 0, 276, 118, 277, 119, 120, 0, 0, 642,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 280, 129, 130, 133, 131, 584,
	132, 609, 638, 134, 658, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 281, 138, 282, 632, 139, 140,
	141, 142, 0, 633, 143, 228, 144, 0, 145, 146,
	147, 659, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 598, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 626, 163, 164, 284, 165, 660,
	233, 166, 0, 172, 167, 168, 169, 171, 661, 170,
	634, 0, 173, 0, 174, 175, 0, 236, 662, 663,
	0, 0, 176, 635, 636, 607, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 627, 184, 0, 185, 186,
	187, 241, 664, 1561, 0, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 585, 0, 613, 602, 603, 600,
	601, 589, 0, 0, 0, 581, 582, 0, 0, 0,
	0, 583, 78, 79, 590, 80, 0, 0, 0, 0,
	629, 595, 0, 0, 0, 81, 82, 194, 644, 196,
	645, 83, 646, 647, 0, 84, 200, 201, 85, 610,
	628, 648, 649, 204, 0, 640, 0, 621, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 272,
	93, 94, 0, 622, 624, 0, 623, 625, 95, 96,
	97, 98, 650, 99, 651, 652, 679, 100, 0, 101,
	0, 0, 0, 643, 103, 0, 104, 0, 0, 0,
	594, 105, 106, 630, 631, 608, 0, 0, 107, 108,
	653, 0, 109, 0, 110, 0, 0, 273, 0, 111,
	641, 0, 214, 0, 112, 113, 114, 637, 639, 275,
	0, 117, 0, 115, 0, 274, 116, 654, 655, 656,
	657, 0, 620, 0, 276, 118, 277, 119, 120, 0,
	0, 642, 278, 121, 279, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 280, 129, 130, 133,
	131, 584, 132, 609, 638, 134, 658, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 281, 138, 282, 632,
	139, 140, 141, 142, 0, 633, 143, 228, 144, 0,
	145, 146, 147, 659, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 283, 155, 156, 598, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 626, 163, 164, 284,
	165, 660, 233, 166, 0, 172, 167, 168, 169, 171,
	661, 170, 634, 0, 173, 0, 174, 175, 0, 236,
	662, 663, 0, 0, 176, 635, 636, 607, 177, 178,
	179, 180, 0, 0, 181, 182, 183, 627, 184, 0,
	185, 186, 187, 241, 664, 0, 0, 188, 0, 0,
	0, 0, 189, 190, 191, 192, 585, 0, 613, 602,
	603, 600, 601, 589, 0, 0, 0, 581, 582, 0,
	0, 0, 0, 583, 78, 79, 590, 80, 0, 0,
	0, 0, 629, 595, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 610, 628, 648, 649, 204, 0, 640, 0, 621,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 622, 624, 0, 623, 625,
	95, 96, 97, 98, 650, 99, 651, 652, 0, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 594, 105, 106, 630, 631, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 1225, 273,
	0, 111, 641, 0, 214, 0, 112, 113, 114, 637,
	639, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 642, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 584, 132, 609, 638, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 632, 139, 140, 141, 142, 0, 633, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 598, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 626, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 634, 0, 173, 0, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 635, 636, 607,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 627,
	184, 0, 185, 186, 187, 241, 664, 0, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 585, 0,
	0, 0, 0, 613, 602, 603, 600, 601, 589, 581,
	582, 0, 0, 0, 0, 583, 0, 0, 590, 78,
	79, 855, 80, 0, 0, 0, 0, 629, 595, 0,
	0, 0, 81, 82, 194, 644, 196, 645, 83, 646,
	647, 0, 84, 200, 201, 85, 610, 628, 648, 649,
	204, 0, 640, 0, 621, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 272, 93, 94, 0,
	622, 624, 0, 623, 625, 95, 96, 97, 98, 650,
	99, 651, 652, 0, 100, 0, 101, 0, 0, 0,
	643, 103, 0, 104, 0, 0, 0, 594, 105, 106,
	630, 631, 608, 0, 0, 107, 108, 653, 0, 109,
	0, 110, 0, 0, 273, 0, 111, 641, 0, 214,
	0, 112, 113, 114, 637, 639, 275, 0, 117, 0,
	115, 0, 274, 116, 654, 655, 656, 657, 0, 620,
	0, 276, 118, 277, 119, 120, 0, 0, 642, 278,
	121, 279, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 280, 129, 130, 133, 131, 584, 132,
	609, 638, 134, 658, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 281, 138, 282, 632, 139, 140, 141,
	142, 0, 633, 143, 228, 144, 0, 145, 146, 147,
	659, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	283, 155, 156, 598, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 626, 163, 164, 284, 165, 660, 233,
	166, 0, 172, 167, 168, 169, 171, 661, 170, 634,
	0, 173, 0, 174, 175, 0, 236, 662, 663, 0,
	0, 176, 635, 636, 607, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 627, 184, 0, 185, 186, 187,
	241, 664, 0, 0, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 585, 0, 613, 602, 603, 600, 601,
	589, 0, 0, 0, 581, 582, 0, 0, 0, 0,
	583, 78, 79, 590, 80, 0, 0, 0, 0, 629,
	595, 0, 0, 0, 81, 82, 194, 644, 196, 645,
	83, 646, 647, 0, 84, 200, 201, 85, 610, 628,
	648, 649, 204, 0, 640, 0, 621, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 272, 93,
	1907, 0, 622, 624, 0, 623, 625, 95, 96, 97,
	98, 650, 99, 651, 652, 0, 100, 0, 101, 0,
	0, 0, 643, 103, 0, 104, 0, 0, 0, 594,
	105, 106, 630, 631, 608, 0, 0, 107, 108, 653,
	0, 109, 0, 110, 0, 0, 273, 0, 111, 641,
	0, 214, 0, 112, 113, 114, 637, 639, 275, 0,
	117, 0, 115, 0, 274, 116, 654, 655, 656, 657,
	0, 620, 0, 276, 118, 277, 119, 120, 0, 0,
	642, 278, 121, 279, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	584, 132, 609, 638, 134, 658, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 281, 138, 282, 632, 139,
	140, 141, 142, 0, 633, 143, 228, 144, 0, 145,
	146, 147, 659, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 283, 155, 156, 598, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 626, 163, 164, 284, 165,
	660, 233, 166, 0, 172, 167, 168, 169, 171, 661,
	170, 634, 0, 173, 0, 174, 175, 0, 236, 662,
	663, 0, 0, 176, 635, 636, 607, 177, 178, 1906,
	180, 0, 0, 181, 182, 183, 627, 184, 0, 185,
	186, 187, 241, 664, 0, 0, 188, 0, 0, 0,
	0, 189, 190, 191, 192, 585, 0, 613, 602, 603,
	600, 601, 589, 0, 0, 0, 581, 582, 0, 0,
	0, 0, 583, 78, 79, 590, 80, 0, 0, 0,
	0, 629, 595, 0, 0, 0, 81, 82, 1905, 644,
	196, 645, 83, 646, 647, 0, 84, 200, 201, 85,
	610, 628, 648, 649, 204, 0, 640, 0, 621, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	272, 93, 1907, 0, 622, 624, 0, 623, 625, 95,
	96, 97, 98, 650, 99, 651, 652, 0, 100, 0,
	101, 0, 0, 0, 643, 103, 0, 104, 0, 0,
	0, 594, 105, 106, 630, 631, 608, 0, 0, 107,
	108, 653, 0, 109, 0, 110, 0, 0, 273, 0,
	111, 641, 0, 214, 0, 112, 113, 114, 637, 639,
	275, 0, 117, 0, 115, 0, 274, 116, 654, 655,
	656, 657, 0, 620, 0, 276, 118, 277, 119, 120,
	0, 0, 642, 278, 121, 279, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 280, 129, 130,
	133, 131, 584, 132, 609, 638, 134, 658, 135, 136,
	0, 0, 0, 0, 0, 137, 225, 281, 138, 282,
	632, 139, 140, 141, 142, 0, 633, 143, 228, 144,
	0, 145, 146, 147, 659, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 283, 155, 156, 598, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 626, 163, 164,
	284, 165, 660, 233, 166, 0, 172, 167, 168, 169,
	171, 661, 170, 634, 0, 173, 0, 174, 175, 0,
	236, 662, 663, 0, 0, 176, 635, 636, 607, 177,
	178, 1906, 180, 0, 0, 181, 182, 183, 627, 184,
	0, 185, 186, 187, 241, 664, 0, 0, 188, 0,
	0, 0, 0, 189, 190, 191, 192, 585, 0, 613,
	602, 603, 600, 601, 589, 0, 0, 0, 581, 582,
	0, 0, 0, 0, 583, 78, 79, 590, 80, 0,
	0, 0, 0, 629, 595, 0, 0, 0, 81, 82,
	194, 644, 196, 645, 83, 646, 647, 0, 84, 200,
	201, 85, 610, 628, 648, 649, 204, 0, 640, 0,
	621, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 272, 93, 94, 0, 622, 624, 0, 623,
	625, 95, 96, 97, 98, 650, 99, 651, 652, 0,
	100, 0, 101, 0, 0, 0, 643, 103, 0, 104,
	0, 0, 0, 594, 105, 106, 630, 631, 608, 0,
	0, 107, 108, 653, 0, 109, 0, 110, 0, 0,
	273, 0, 111, 641, 0, 214, 0, 112, 113, 114,
	637, 639, 275, 0, 117, 0, 115, 0, 274, 116,
	654, 655, 656, 657, 0, 620, 0, 276, 118, 277,
	119, 120, 0, 0, 642, 278, 121, 279, 0, 122,
	0, 0, 123, 0, 124, 125, 126, 127, 128, 280,
	129, 130, 133, 131, 584, 132, 609, 638, 134, 658,
	135, 136, 0, 0, 0, 0, 0, 137, 225, 281,
	138, 282, 632, 139, 140, 141, 142, 0, 633, 143,
	228, 144, 0, 145, 146, 147, 659, 148, 149, 0,
	151, 152, 150, 153, 0, 154, 283, 155, 156, 598,
	157, 0, 158, 159, 160, 0, 231, 161, 162, 626,
	163, 164, 284, 165, 660, 233, 166, 0, 172, 167,
	168, 169, 171, 661, 170, 634, 0, 173, 0, 174,
	175, 0, 236, 662, 663, 0, 0, 176, 635, 636,
	607, 177, 178, 179, 180, 0, 0, 181, 182, 183,
	627, 184, 0, 185, 186, 187, 241, 664, 0, 0,
	188, 0, 0, 0, 0, 189, 190, 191, 192, 585,
	0, 1197, 602, 603, 600, 601, 589, 0, 0, 0,
	581, 582, 0, 0, 0, 0, 583, 78, 79, 590,
	80, 0, 0, 0, 0, 629, 595, 0, 0, 0,
	81, 82, 194, 644, 196, 645, 83, 646, 647, 0,
	84, 200, 201, 85, 610, 628, 648, 649, 204, 0,
	640, 0, 621, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 272, 93, 94, 0, 622, 624,
	0, 623, 625, 95, 96, 97, 98, 650, 1200, 651,
	652, 0, 100, 0, 101, 0, 0, 0, 643, 103,
	0, 104, 0, 0, 0, 594, 105, 106, 630, 631,
	608, 0, 0, 107, 108, 653, 0, 109, 0, 110,
	0, 0, 273, 0, 111, 641, 0, 214, 0, 112,
	113, 1201, 637, 639, 275, 0, 117, 0, 115, 0,
	274, 116, 654, 655, 656, 657, 0, 620, 0, 276,
	118, 277, 119, 120, 0, 0, 642, 278, 121, 279,
	0, 122, 0, 0, 123, 0, 124, 1202, 1199, 127,
	128, 280, 129, 130, 133, 131, 584, 132, 609, 638,
	134, 658, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 281, 138, 282, 632, 139, 140, 141, 142, 0,
	633, 143, 228, 144, 0, 145, 146, 147, 659, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 283, 155,
	156, 598, 157, 0, 158, 159, 1203, 0, 231, 161,
	162, 626, 163, 164, 284, 165, 660, 233, 166, 0,
	172, 167, 168, 169, 171, 661, 170, 634, 0, 173,
	0, 174, 175, 0, 236, 662, 663, 0, 0, 176,
	635, 636, 607, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 627, 184, 0, 185, 186, 187, 241, 664,
	0, 0, 188, 0, 0, 0, 0, 189, 190, 1198,
	192, 585, 0, 613, 602, 603, 600, 601, 589, 0,
	0, 0, 581, 582, 0, 0, 0, 0, 583, 78,
	79, 590, 80, 0, 0, 0, 0, 629, 595, 0,
	0, 0, 81, 82, 194, 644, 196, 645, 83, 646,
	647, 0, 84, 200, 201, 85, 610, 628, 648, 649,
	204, 0, 640, 0, 621, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 272, 93, 94, 0,
	622, 624, 0, 623, 625, 95, 96, 97, 98, 650,
	99, 651, 652, 0, 100, 0, 101, 0, 0, 0,
	643, 103, 0, 104, 0, 0, 0, 594, 105, 106,
	630, 631, 608, 0, 0, 107, 108, 653, 0, 109,
	0, 110, 0, 0, 273, 0, 111, 641, 0, 214,
	0, 112, 113, 114, 637, 639, 275, 0, 117, 0,
	115, 0, 274, 116, 654, 655, 656, 657, 0, 620,
	0, 276, 118, 277, 119, 120, 0, 0, 642, 278,
	121, 279, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 280, 129, 130, 133, 131, 0, 132,
	609, 638, 134, 658, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 281, 138, 282, 632, 139, 140, 141,
	142, 0, 633, 143, 228, 144, 0, 145, 146, 147,
	659, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	283, 155, 156, 1215, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 626, 163, 164, 284, 165, 660, 233,
	166, 0, 172, 167, 168, 169, 171, 661, 170, 634,
	0, 173, 0, 174, 175, 0, 236, 662, 663, 0,
	0, 176, 635, 636, 607, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 627, 184, 0, 185, 186, 187,
	241, 664, 0, 0, 188, 0, 0, 0, 0, 189,
	190, 191, 192, 0, 0, 613, 0, 0, 0, 0,
	0, 0, 0, 0, 1211, 1212, 0, 0, 0, 0,
	1213, 78, 79, 1214, 80, 0, 0, 0, 0, 629,
	0, 0, 0, 0, 81, 82, 194, 195, 196, 197,
	83, 198, 199, 0, 84, 200, 201, 85, 0, 628,
	202, 203, 204, 0, 640, 0, 621, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 272, 93,
	94, 0, 622, 624, 0, 623, 625, 95, 96, 97,
	98, 206, 99, 207, 208, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 209,
	105, 106, 630, 631, 0, 0, 0, 107, 108, 212,
	0, 109, 0, 110, 0, 0, 273, 0, 111, 641,
	0, 214, 0, 112, 113, 114, 637, 639, 275, 0,
	117, 0, 115, 0, 274, 116, 217, 218, 219, 220,
	0, 221, 0, 276, 118, 277, 119, 120, 0, 0,
	642, 278, 121, 279, 0, 122, 0, 0, 123, 0,
	124, 125, 126, 127, 128, 280, 129, 130, 133, 131,
	0, 132, 0, 638, 134, 224, 135, 136, 0, 0,
	0, 0, 0, 137, 225, 281, 138, 282, 632, 139,
	140, 141, 142, 0, 633, 143, 228, 144, 0, 145,
	146, 147, 229, 148, 149, 0, 151, 152, 150, 153,
	0, 154, 283, 155, 156, 230, 157, 0, 158, 159,
	160, 0, 231, 161, 162, 626, 163, 164, 284, 165,
	232, 233, 166, 0, 172, 167, 168, 169, 171, 234,
	170, 634, 0, 173, 0, 174, 175, 0, 236, 237,
	238, 0, 0, 176, 635, 636, 0, 177, 178, 179,
	180, 493, 0, 181, 182, 183, 627, 184, 0, 185,
	186, 187, 241, 242, 0, 0, 188, 78, 79, 0,
	80, 189, 190, 191, 192, 193, 0, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 1674, 202, 203, 204, 0,
	205, 0, 271, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 272, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	0, 0, 0, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 273, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 215, 216, 275, 0, 117, 0, 115, 0,
	274, 116, 217, 218, 219, 220, 0, 221, 0, 276,
	118, 277, 119, 120, 0, 0, 222, 278, 121, 279,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 280, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 0, 0, 0, 0, 137,
	225, 281, 138, 282, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 283, 155,
	156, 230, 157, 0, 158, 159, 160, 64, 231, 161,
	162, 0, 163, 164, 284, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	66, 174, 175, 0, 236, 237, 238, 0, 0, 176,
	239, 240, 0, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 497, 242,
	0, 0, 188, 0, 0, 0, 62, 189, 190, 191,
	192, 0, 63, 493, 804, 0, 805, 800, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 61, 80, 0, 0, 0, 0, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 0, 202, 203,
	204, 0, 205, 0, 271, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 272, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 808, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 797, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 273, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 215, 216, 275, 0, 117, 0,
	115, 0, 274, 116, 217, 218, 219, 220, 0, 221,
	0, 276, 118, 277, 119, 120, 0, 0, 222, 278,
	121, 279, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 280, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 798, 0, 0,
	0, 137, 225, 281, 138, 282, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	283, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 163, 164, 284, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 796, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 493, 804, 188, 805, 800, 795, 0, 189,
	190, 191, 192, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 806, 801, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 271, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 272, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 791, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 797, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 273, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 215, 216, 275, 0, 117, 0, 115,
	0, 274, 116, 217, 218, 219, 220, 0, 221, 0,
	276, 118, 277, 119, 120, 0, 0, 222, 278, 121,
	279, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 280, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 798, 0, 0, 0,
	137, 225, 281, 138, 282, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 283,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 284, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 796, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 493, 804, 188, 805, 800, 795, 0, 189, 190,
	191, 192, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 0, 0, 806, 801, 193, 0, 0, 0, 0,
	81, 82, 194, 195, 196, 197, 83, 198, 199, 0,
	84, 200, 201, 85, 0, 0, 202, 203, 204, 0,
	205, 0, 271, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 272, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 206, 99, 207,
	208, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 209, 105, 106, 210, 211,
	797, 0, 0, 107, 108, 212, 0, 109, 0, 110,
	0, 0, 273, 0, 111, 213, 0, 214, 0, 112,
	113, 114, 215, 216, 275, 0, 117, 0, 115, 0,
	274, 116, 217, 218, 219, 220, 0, 221, 0, 276,
	118, 277, 119, 120, 0, 0, 222, 278, 121, 279,
	0, 122, 0, 0, 123, 0, 124, 125, 126, 127,
	128, 280, 129, 130, 133, 131, 0, 132, 0, 223,
	134, 224, 135, 136, 0, 798, 0, 0, 0, 137,
	225, 281, 138, 282, 226, 139, 140, 141, 142, 0,
	227, 143, 228, 144, 0, 145, 146, 147, 229, 148,
	149, 0, 151, 152, 150, 153, 0, 154, 283, 155,
	156, 230, 157, 0, 158, 159, 160, 0, 231, 161,
	162, 0, 163, 164, 284, 165, 232, 233, 166, 0,
	172, 167, 168, 169, 171, 234, 170, 235, 0, 173,
	0, 174, 175, 0, 236, 237, 238, 0, 0, 176,
	239, 240, 796, 177, 178, 179, 180, 0, 0, 181,
	182, 183, 0, 184, 0, 185, 186, 187, 241, 242,
	75, 0, 188, 0, 0, 0, 0, 189, 190, 191,
	192, 0, 0, 0, 0, 0, 78, 79, 0, 80,
	0, 0, 806, 801, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 454, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 64, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 66,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 0, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 497, 242, 0,
	0, 188, 75, 0, 0, 62, 189, 190, 191, 192,
	0, 63, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 193, 0, 0, 0,
	1112, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 215, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 64, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 66, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 497,
	242, 0, 0, 188, 75, 0, 0, 62, 189, 190,
	191, 192, 0, 63, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 193, 0,
	1350, 0, 61, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 0, 75, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 193, 0, 0, 0, 571, 81, 82, 194, 195,
	196, 197, 83, 198, 199, 0, 84, 200, 201, 85,
	0, 0, 202, 203, 204, 0, 205, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 206, 99, 207, 208, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 209, 105, 106, 210, 211, 0, 0, 0, 107,
	108, 212, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 213, 0, 214, 0, 112, 113, 114, 215, 216,
	0, 0, 117, 0, 115, 0, 0, 116, 217, 218,
	219, 220, 0, 221, 0, 0, 118, 0, 119, 120,
	0, 0, 222, 0, 121, 0, 0, 122, 0, 0,
	123, 0, 124, 125, 126, 127, 128, 0, 129, 130,
	133, 131, 0, 132, 0, 223, 134, 224, 135, 136,
	0, 0, 454, 0, 0, 137, 225, 0, 138, 0,
	226, 139, 140, 141, 142, 0, 227, 143, 228, 144,
	0, 145, 146, 147, 229, 148, 149, 0, 151, 152,
	150, 153, 0, 154, 0, 155, 156, 230, 157, 0,
	158, 159, 160, 0, 231, 161, 162, 0, 163, 164,
	0, 165, 232, 233, 166, 0, 172, 167, 168, 169,
	171, 234, 170, 235, 0, 173, 0, 174, 175, 0,
	236, 237, 238, 0, 0, 176, 239, 240, 0, 177,
	178, 179, 180, 75, 0, 181, 182, 183, 0, 184,
	0, 185, 186, 187, 241, 242, 0, 0, 188, 78,
	79, 0, 80, 189, 190, 191, 192, 193, 0, 0,
	0, 0, 81, 82, 194, 195, 196, 197, 83, 198,
	199, 0, 84, 200, 201, 85, 0, 1112, 202, 203,
	204, 0, 205, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 206,
	99, 207, 208, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 209, 105, 106,
	210, 211, 0, 0, 0, 107, 108, 212, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 213, 0, 214,
	0, 112, 113, 114, 215, 216, 0, 0, 117, 0,
	115, 0, 0, 116, 217, 218, 219, 220, 0, 221,
	0, 0, 118, 0, 119, 120, 0, 0, 222, 0,
	121, 0, 0, 122, 0, 0, 123, 0, 124, 125,
	126, 127, 128, 0, 129, 130, 133, 131, 0, 132,
	0, 223, 134, 224, 135, 136, 0, 0, 0, 0,
	0, 137, 225, 0, 138, 0, 226, 139, 140, 141,
	142, 0, 227, 143, 228, 144, 0, 145, 146, 147,
	229, 148, 149, 0, 151, 152, 150, 153, 0, 154,
	0, 155, 156, 230, 157, 0, 158, 159, 160, 0,
	231, 161, 162, 0, 163, 164, 0, 165, 232, 233,
	166, 0, 172, 167, 168, 169, 171, 234, 170, 235,
	0, 173, 0, 174, 175, 0, 236, 237, 238, 0,
	0, 176, 239, 240, 0, 177, 178, 179, 180, 0,
	0, 181, 182, 183, 0, 184, 0, 185, 186, 187,
	241, 242, 0, 0, 188, 0, 75, 0, 0, 189,
	190, 191, 192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 0, 80, 0, 0, 0, 0,
	193, 0, 0, 0, 697, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 215, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 1016, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 215, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 1571, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 0, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	0, 0, 0, 0, 189, 190, 191, 192, 613, 602,
	603, 600, 601, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 675, 0,
	0, 0, 193, 0, 0, 0, 0, 81, 82, 194,
	644, 196, 645, 83, 646, 647, 0, 84, 200, 201,
	85, 0, 0, 648, 649, 204, 0, 205, 0, 271,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 272, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 650, 99, 651, 652, 0, 100,
	0, 101, 0, 0, 0, 643, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 608, 0, 0,
	107, 108, 653, 0, 109, 0, 110, 0, 0, 273,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 275, 0, 117, 0, 115, 0, 274, 116, 654,
	655, 656, 657, 0, 620, 0, 276, 118, 277, 119,
	120, 0, 0, 222, 278, 121, 279, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 280, 129,
	130, 133, 131, 0, 132, 609, 223, 134, 658, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 281, 138,
	282, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 659, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 283, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 284, 165, 660, 233, 166, 0, 172, 167, 168,
	169, 171, 661, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 662, 663, 0, 0, 176, 239, 240, 607,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 664, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 775, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 774, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 75, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 778, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	0, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 493, 188, 0, 0, 0, 0,
	189, 190, 191, 192, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 778, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 271, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 272, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 273, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 275, 0, 117,
	0, 115, 0, 274, 116, 217, 218, 219, 220, 0,
	221, 0, 276, 118, 277, 119, 120, 0, 0, 222,
	278, 121, 279, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 280, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 281, 138, 282, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 283, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 284, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 980, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 978, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	1085, 0, 107, 108, 212, 0, 109, 0, 110, 983,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 1083, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 982, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 1084, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 980, 205, 0, 0, 975, 86,
	87, 88, 0, 89, 978, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 983, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 974, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 982,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 981, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 1350, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 215, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 454, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 725, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 454,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 505, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 466, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 454, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 459, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 454, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 369, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	368, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 1261, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 1259, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 1248, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 845,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 383, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 710, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 0, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 556, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 551, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 511, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 215,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 394, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 393, 237, 238, 0, 0, 389, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 215, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 394, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 393, 237, 238,
	0, 0, 389, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 489, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 148, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 486, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 122, 0, 0, 123,
	0, 124, 125, 126, 127, 128, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 230, 157, 0, 158,
	159, 160, 0, 231, 161, 162, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 236,
	237, 238, 0, 0, 176, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 483, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 141, 142,
	0, 227, 143, 228, 144, 0, 145, 146, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 157, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 75, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 78, 79, 0, 80, 189, 190,
	191, 192, 193, 0, 0, 0, 0, 81, 82, 194,
	195, 196, 197, 83, 198, 199, 0, 84, 200, 201,
	85, 0, 0, 202, 203, 204, 0, 205, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 206, 99, 207, 208, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 209, 105, 106, 210, 211, 0, 0, 0,
	107, 108, 212, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 213, 0, 214, 0, 112, 113, 114, 481,
	216, 0, 0, 117, 0, 115, 0, 0, 116, 217,
	218, 219, 220, 0, 221, 0, 0, 118, 0, 119,
	120, 0, 0, 222, 0, 121, 0, 0, 122, 0,
	0, 123, 0, 124, 125, 126, 127, 128, 0, 129,
	130, 133, 131, 0, 132, 0, 223, 134, 224, 135,
	136, 0, 0, 0, 0, 0, 137, 225, 0, 138,
	0, 226, 139, 140, 141, 142, 0, 227, 143, 228,
	144, 0, 145, 146, 147, 229, 148, 149, 0, 151,
	152, 150, 153, 0, 154, 0, 155, 156, 230, 157,
	0, 158, 159, 160, 0, 231, 161, 162, 0, 163,
	164, 0, 165, 232, 233, 166, 0, 172, 167, 168,
	169, 171, 234, 170, 235, 0, 173, 0, 174, 175,
	0, 236, 237, 238, 0, 0, 176, 239, 240, 0,
	177, 178, 179, 180, 75, 0, 181, 182, 183, 0,
	184, 0, 185, 186, 187, 241, 242, 0, 0, 188,
	78, 79, 0, 80, 189, 190, 191, 192, 193, 0,
	0, 0, 0, 81, 82, 194, 195, 196, 197, 83,
	198, 199, 0, 84, 200, 201, 85, 0, 0, 202,
	203, 204, 0, 205, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	206, 99, 207, 208, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 209, 105,
	106, 210, 211, 0, 0, 0, 107, 108, 212, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 213, 0,
	214, 0, 112, 113, 114, 462, 216, 0, 0, 117,
	0, 115, 0, 0, 116, 217, 218, 219, 220, 0,
	221, 0, 0, 118, 0, 119, 120, 0, 0, 222,
	0, 121, 0, 0, 122, 0, 0, 123, 0, 124,
	125, 126, 127, 128, 0, 129, 130, 133, 131, 0,
	132, 0, 223, 134, 224, 135, 136, 0, 0, 0,
	0, 0, 137, 225, 0, 138, 0, 226, 139, 140,
	141, 142, 0, 227, 143, 228, 144, 0, 145, 146,
	147, 229, 148, 149, 0, 151, 152, 150, 153, 0,
	154, 0, 155, 156, 230, 157, 0, 158, 159, 160,
	0, 231, 161, 162, 0, 163, 164, 0, 165, 232,
	233, 166, 0, 172, 167, 168, 169, 171, 234, 170,
	235, 0, 173, 0, 174, 175, 0, 236, 237, 238,
	0, 0, 176, 239, 240, 0, 177, 178, 179, 180,
	75, 0, 181, 182, 183, 0, 184, 0, 185, 186,
	187, 241, 242, 0, 0, 188, 78, 79, 0, 80,
	189, 190, 191, 192, 193, 0, 0, 0, 0, 81,
	82, 194, 195, 196, 197, 83, 198, 199, 0, 84,
	200, 201, 85, 0, 0, 202, 203, 204, 0, 205,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 206, 99, 207, 208,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 209, 105, 106, 210, 211, 0,
	0, 0, 107, 108, 212, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 213, 0, 214, 0, 112, 113,
	114, 215, 216, 0, 0, 117, 0, 115, 0, 0,
	116, 217, 218, 219, 220, 0, 221, 0, 0, 118,
	0, 119, 120, 0, 0, 222, 0, 121, 0, 0,
	122, 0, 0, 123, 0, 124, 125, 126, 127, 128,
	0, 129, 130, 133, 131, 0, 132, 0, 223, 134,
	224, 135, 136, 0, 0, 0, 0, 0, 137, 225,
	0, 138, 0, 226, 139, 140, 141, 142, 0, 227,
	143, 228, 144, 0, 145, 146, 147, 229, 443, 149,
	0, 151, 152, 150, 153, 0, 154, 0, 155, 156,
	230, 157, 0, 158, 159, 160, 0, 231, 161, 162,
	0, 163, 164, 0, 165, 232, 233, 166, 0, 172,
	167, 168, 169, 171, 234, 170, 235, 0, 173, 0,
	174, 175, 0, 236, 237, 238, 0, 0, 176, 239,
	240, 0, 177, 178, 179, 180, 75, 0, 181, 182,
	183, 0, 184, 0, 185, 186, 187, 241, 242, 0,
	0, 188, 78, 79, 0, 80, 189, 190, 191, 192,
	193, 0, 0, 0, 0, 81, 82, 194, 195, 196,
	197, 83, 198, 199, 0, 84, 200, 201, 85, 0,
	0, 202, 203, 204, 0, 205, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 206, 99, 207, 208, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	209, 105, 106, 210, 211, 0, 0, 0, 107, 108,
	212, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	213, 0, 214, 0, 112, 113, 114, 215, 216, 0,
	0, 117, 0, 115, 0, 0, 116, 217, 218, 219,
	220, 0, 221, 0, 0, 118, 0, 119, 120, 0,
	0, 222, 0, 121, 0, 0, 386, 0, 0, 123,
	0, 124, 125, 126, 127, 394, 0, 129, 130, 133,
	131, 0, 132, 0, 223, 134, 224, 135, 136, 0,
	0, 0, 0, 0, 137, 225, 0, 138, 0, 226,
	139, 140, 141, 142, 0, 227, 143, 228, 144, 0,
	145, 146, 147, 229, 148, 149, 0, 151, 152, 150,
	153, 0, 154, 0, 155, 156, 388, 157, 0, 158,
	159, 160, 0, 231, 161, 387, 0, 163, 164, 0,
	165, 232, 233, 166, 0, 172, 167, 168, 169, 171,
	234, 170, 235, 0, 173, 0, 174, 175, 0, 393,
	237, 238, 0, 0, 389, 239, 240, 0, 177, 178,
	179, 180, 75, 0, 181, 182, 183, 0, 184, 0,
	185, 186, 187, 241, 242, 0, 0, 188, 78, 79,
	0, 80, 189, 190, 191, 192, 193, 0, 0, 0,
	0, 81, 82, 194, 195, 196, 197, 83, 198, 199,
	0, 84, 200, 201, 85, 0, 0, 202, 203, 204,
	0, 205, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 206, 99,
	207, 208, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 209, 105, 106, 210,
	211, 0, 0, 0, 107, 108, 212, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 213, 0, 214, 0,
	112, 113, 114, 215, 216, 0, 0, 117, 0, 115,
	0, 0, 116, 217, 218, 219, 220, 0, 221, 0,
	0, 118, 0, 119, 120, 0, 0, 222, 0, 121,
	0, 0, 122, 0, 0, 123, 0, 124, 125, 126,
	127, 128, 0, 129, 130, 133, 131, 0, 132, 0,
	223, 134, 224, 135, 136, 0, 0, 0, 0, 0,
	137, 225, 0, 138, 0, 226, 139, 140, 0, 142,
	0, 227, 143, 228, 144, 0, 145, 0, 147, 229,
	148, 149, 0, 151, 152, 150, 153, 0, 154, 0,
	155, 156, 230, 0, 0, 158, 159, 160, 0, 231,
	161, 162, 0, 163, 164, 0, 165, 232, 233, 166,
	0, 172, 167, 168, 169, 171, 234, 170, 235, 0,
	173, 0, 174, 175, 0, 236, 237, 238, 0, 0,
	176, 239, 240, 0, 177, 178, 179, 180, 0, 0,
	181, 182, 183, 0, 184, 0, 185, 186, 187, 241,
	242, 0, 0, 188, 0, 0, 0, 0, 189, 190,
	191, 192, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 0, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 874, 0, 905, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 873, 0, 0, 0,
	0, 874, 888, 905, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 898,
	906, 0, 0, 0, 0, 0, 0, 879, 0, 0,
	0, 0, 0, 0, 904, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 898, 906, 0, 0, 0,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 895, 0, 0, 0, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 890, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 874, 899, 905, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 897, 0, 0, 885,
	886, 887, 0, 884, 881, 882, 883, 875, 876, 877,
	878, 880, 0, 900, 0, 0, 0, 0, 0, 0,
	1448, 0, 897, 0, 0, 885, 886, 887, 0, 884,
	881, 882, 883, 875, 876, 877, 878, 880, 0, 900,
	879, 0, 0, 0, 871, 872, 1447, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 898, 906,
	894, 0, 0, 0, 0, 0, 0, 874, 0, 905,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 873, 889,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 879, 0, 0, 0, 890, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 874, 899, 905,
	0, 898, 906, 0, 0, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 904, 0, 873, 0,
	0, 0, 894, 0, 888, 0, 896, 0, 0, 874,
	0, 905, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 895, 897, 888, 0, 885, 886,
	887, 0, 884, 881, 882, 883, 875, 876, 877, 878,
	880, 0, 900, 879, 0, 0, 0, 0, 0, 1399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 898, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 0, 0, 0, 879, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 889, 898, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 895, 0, 0, 0, 896, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 0, 900, 895, 0, 0, 1856,
	890, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 899, 0, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 874, 0, 905, 0, 0,
	0, 0, 890, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 0, 873, 0, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 0, 900, 0, 0, 0, 1854,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 879, 0, 885, 886, 887, 0, 884, 881, 882,
	883, 875, 876, 877, 878, 880, 0, 900, 0, 898,
	906, 1833, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 904, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 896, 0, 0, 874, 0, 905,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 895, 0, 888, 0, 0, 0, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 0, 0, 894, 0, 0, 0, 0, 0,
	0, 874, 0, 905, 0, 0, 0, 0, 890, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 899,
	0, 0, 873, 879, 0, 0, 894, 0, 888, 0,
	0, 0, 0, 874, 0, 905, 0, 0, 0, 0,
	0, 898, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 904, 0, 0, 0,
	888, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 889, 0, 0, 0, 897, 879, 0, 885,
	886, 887, 0, 884, 881, 882, 883, 875, 876, 877,
	878, 880, 0, 900, 895, 898, 906, 1808, 0, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 879,
	904, 0, 0, 0, 0, 0, 894, 0, 0, 0,
	896, 0, 0, 874, 0, 905, 889, 898, 906, 0,
	890, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 899, 904, 0, 873, 0, 0, 0, 895, 0,
	888, 0, 896, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	895, 0, 0, 0, 890, 0, 1407, 1408, 0, 1425,
	1426, 1427, 0, 0, 0, 899, 0, 0, 897, 879,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 0, 900, 890, 898, 906, 1803,
	0, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 904, 0, 0, 0, 1422, 0, 0, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 897, 0, 0, 885, 886, 887, 0, 884,
	881, 882, 883, 875, 876, 877, 878, 880, 0, 900,
	895, 0, 0, 1799, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 1413, 0, 885, 886, 887,
	0, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	0, 900, 0, 0, 1429, 1734, 890, 871, 872, 0,
	891, 892, 893, 901, 902, 903, 0, 899, 1428, 0,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	874, 0, 905, 0, 1423, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 888, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	0, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	0, 900, 1424, 871, 872, 1733, 891, 892, 893, 901,
	902, 903, 0, 0, 0, 0, 879, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 874, 0, 905, 0,
	0, 0, 0, 0, 898, 906, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 904,
	0, 0, 0, 888, 0, 0, 0, 0, 0, 896,
	0, 0, 0, 0, 0, 889, 0, 0, 0, 0,
	0, 0, 0, 1419, 1420, 1421, 0, 1418, 1415, 1416,
	1417, 1409, 1410, 1411, 1412, 1414, 0, 895, 0, 0,
	0, 0, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 879, 0, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 874, 0, 905, 0,
	898, 906, 0, 890, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 899, 904, 0, 873, 0, 0,
	0, 894, 0, 888, 0, 896, 0, 0, 874, 0,
	905, 889, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 895, 0, 888, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 879, 0, 885, 886, 887, 0, 884, 881,
	882, 883, 875, 876, 877, 878, 880, 0, 900, 890,
	898, 906, 1640, 0, 0, 0, 0, 0, 0, 0,
	899, 0, 0, 0, 879, 904, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 889, 898, 906, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 895, 0, 0, 0, 896, 0, 0,
	0, 0, 0, 889, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 0, 884, 881, 882, 883, 875, 876,
	877, 878, 880, 0, 900, 895, 0, 0, 1574, 890,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	899, 0, 0, 0, 0, 0, 0, 894, 0, 0,
	0, 0, 0, 0, 874, 0, 905, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 0, 0, 873, 0, 0, 0, 0,
	0, 888, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 0, 884, 881, 882, 883, 875, 876,
	877, 878, 880, 0, 900, 0, 0, 0, 1558, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 897,
	879, 0, 885, 886, 887, 0, 884, 881, 882, 883,
	875, 876, 877, 878, 880, 0, 900, 0, 898, 906,
	1167, 0, 0, 871, 872, 0, 891, 892, 893, 901,
	902, 903, 0, 904, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 896, 0, 0, 874, 0, 905, 889,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 895, 0, 888, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 890, 0, 871,
	872, 0, 891, 892, 893, 901, 902, 903, 899, 0,
	0, 0, 879, 1927, 0, 894, 0, 0, 0, 0,
	0, 0, 874, 0, 905, 0, 0, 0, 0, 0,
	898, 906, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 904, 0, 0, 0, 888,
	0, 0, 0, 0, 0, 896, 0, 0, 0, 0,
	0, 889, 0, 0, 0, 897, 0, 0, 885, 886,
	887, 0, 884, 881, 882, 883, 875, 876, 877, 878,
	880, 0, 900, 895, 1488, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1926, 879, 0,
	1439, 0, 0, 1438, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 898, 906, 0, 890,
	894, 0, 0, 0, 0, 1100, 0, 874, 0, 905,
	899, 904, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 896, 0, 0, 0, 0, 0, 889, 873, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 897, 0, 0,
	885, 886, 887, 0, 884, 881, 882, 883, 875, 876,
	877, 878, 880, 879, 900, 890, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 899, 0, 0, 0,
	0, 898, 906, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 895, 0, 885, 886, 887, 0,
	884, 881, 882, 883, 875, 876, 877, 878, 880, 908,
	900, 0, 0, 0, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	890, 894, 0, 0, 0, 907, 0, 0, 874, 0,
	905, 899, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 0, 873,
	894, 0, 0, 0, 0, 888, 0, 874, 0, 905,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 888, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 879, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 898, 906, 1407, 1408, 0, 1425, 1426, 1427,
	0, 0, 0, 879, 0, 0, 0, 904, 0, 0,
	1703, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	0, 898, 906, 889, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 1422, 895, 896, 0, 0, 0,
	0, 0, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 895, 438, 0, 0, 0, 0,
	0, 890, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 899, 1413, 0, 871, 872, 0, 891, 892,
	893, 901, 902, 903, 0, 0, 0, 0, 0, 0,
	890, 894, 0, 0, 0, 0, 0, 0, 874, 0,
	905, 899, 0, 0, 0, 0, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 1423, 0, 0, 888, 0, 0, 0, 897,
	0, 0, 885, 886, 887, 0, 884, 881, 882, 883,
	875, 876, 877, 878, 880, 0, 900, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 879, 900, 0, 0, 871, 872,
	1424, 891, 892, 893, 901, 902, 903, 0, 0, 0,
	0, 0, 898, 906, 894, 0, 0, 0, 0, 0,
	0, 874, 0, 905, 0, 0, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 896, 0, 0,
	0, 0, 873, 889, 0, 0, 0, 0, 888, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 895, 0, 0, 0, 0,
	0, 1419, 1420, 1421, 0, 1418, 1415, 1416, 1417, 1409,
	1410, 1411, 1412, 1414, 0, 0, 0, 0, 871, 872,
	0, 891, 892, 893, 901, 902, 903, 879, 0, 0,
	0, 890, 1445, 0, 894, 0, 0, 0, 1440, 0,
	0, 874, 899, 905, 0, 898, 906, 0, 0, 0,
	871, 872, 0, 891, 892, 893, 901, 902, 903, 0,
	904, 1568, 873, 0, 0, 0, 894, 0, 888, 0,
	896, 0, 0, 874, 0, 905, 889, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 895, 897,
	888, 0, 885, 886, 887, 0, 884, 881, 882, 883,
	875, 876, 877, 878, 880, 0, 900, 879, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 890, 898, 906, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 0, 0, 0, 879,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	896, 0, 0, 0, 0, 0, 889, 898, 906, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 904, 0, 0, 0, 0, 0, 895, 0,
	0, 0, 896, 0, 0, 0, 0, 0, 889, 0,
	0, 0, 897, 0, 0, 885, 886, 887, 0, 884,
	881, 882, 883, 875, 876, 877, 878, 880, 0, 900,
	895, 0, 0, 0, 890, 0, 0, 0, 0, 0,
	0, 0, 1405, 0, 0, 899, 0, 0, 0, 0,
	0, 871, 872, 0, 891, 892, 893, 901, 902, 903,
	0, 0, 0, 0, 0, 0, 890, 894, 0, 0,
	0, 1398, 0, 0, 874, 0, 905, 899, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 888, 897, 0, 0, 885, 886, 887, 0, 884,
	881, 882, 883, 875, 876, 877, 878, 880, 0, 900,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 897, 0, 0, 885, 886, 887,
	0, 884, 881, 882, 883, 875, 876, 877, 878, 880,
	879, 900, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 0, 0, 0, 0, 0, 898, 906,
	894, 0, 0, 0, 0, 0, 0, 874, 0, 905,
	0, 0, 0, 904, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 896, 0, 0, 0, 0, 873, 889,
	0, 0, 0, 0, 888, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 872, 0, 891, 892, 893,
	901, 902, 903, 879, 0, 0, 0, 890, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 874, 899, 905,
	0, 898, 906, 0, 0, 0, 871, 872, 0, 891,
	892, 893, 901, 902, 903, 0, 904, 0, 873, 0,
	0, 0, 0, 0, 888, 0, 896, 0, 0, 874,
	0, 905, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 895, 897, 888, 0, 885, 886,
	887, 0, 884, 881, 882, 883, 875, 876, 877, 878,
	880, 0, 900, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 898, 906, 0, 0, 1407, 1408, 0, 1425, 1426,
	1427, 899, 0, 0, 0, 879, 904, 0, 0, 0,
	0, 1553, 0, 0, 0, 0, 896, 0, 0, 0,
	0, 0, 889, 898, 906, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 904, 0,
	0, 0, 0, 0, 0, 1422, 0, 0, 896, 0,
	0, 0, 0, 0, 889, 0, 0, 0, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 0, 900, 0, 0, 0, 0,
	890, 0, 871, 872, 0, 891, 892, 893, 901, 902,
	903, 899, 0, 0, 1413, 0, 0, 1407, 1408, 0,
	1425, 1426, 1427, 0, 0, 874, 0, 905, 0, 0,
	0, 0, 890, 1552, 1407, 1408, 0, 1425, 1426, 1427,
	0, 0, 0, 899, 0, 0, 873, 1428, 0, 0,
	0, 0, 888, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1423, 0, 0, 0, 1422, 897, 0,
	0, 885, 886, 887, 0, 884, 881, 882, 883, 875,
	876, 877, 878, 880, 1422, 900, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	897, 879, 0, 885, 886, 887, 0, 884, 881, 882,
	883, 875, 876, 877, 878, 880, 1413, 900, 0, 898,
	906, 1424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 896, 0, 0, 0, 0, 1428,
	889, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1423, 1428, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 1420, 1421, 0, 1418, 1415, 1416, 1417,
	1409, 1410, 1411, 1412, 1414, 0, 0, 0, 890, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 897, 0, 0, 885,
	886, 887, 0, 884, 881, 882, 883, 875, 876, 877,
	878, 880, 0, 900, 1419, 1420, 1421, 0, 1418, 1415,
	1416, 1417, 1409, 1410, 1411, 1412, 1414, 0, 0, 0,
	0, 1419, 1420, 1421, 0, 1418, 1415, 1416, 1417, 1409,
	1410, 1411, 1412, 1414,
}
var sqlPact = [...]int{

	3210, -1000, 32, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 638, 16940, -1000,
	-1000, -1000, -1000, -1000, -1000, 603, 583, 1856, 4659, 16940,
	16940, 16684, 1191, 1191, 18220, -1000, -1000, 21292, -1000, 3312,
	445, 478, 445, 445, 433, 18220, 536, 637, 111, -1000,
	647, -4, 21036, 16940, 1283, 27, 15404, 280, 3210, 16428,
	20780, 16940, 16172, 263, 35, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1142, 1042, 1041, 15404, 20524, 20268, 20012,
	19756, -1000, 10357, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 651, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 288, 287, -1000, 15916, -1000,
	896, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 884, -1000, 16940, -1000, -1000, 19500, 19244, 286, 780,
	-1000, -1000, 485, 352, 1290, -1000, 38, -1000, -1000, -1000,
	1139, -1000, 882, 1136, 1128, 1127, 1124, 1123, 1121, 347,
	811, 467, -1000, 780, -1000, 780, -1000, -1000, -1000, 516,
	18220, -1000, 15404, -1000, 18988, 16940, 16940, 1063, 18732, -1000,
	647, -1000, -1000, -1000, 917, 1271, 1271, 1271, 1293, 126,
	123, 111, 13, 16940, -1000, 285, 13, 7278, 7278, -1000,
	-1000, 280, -1000, 119, 13304, -1000, 7842, -1000, 971, 1188,
	373, 612, 1187, -110, 712, 704, 1186, 551, 12519, 35,
	-1000, -1000, -1000, 9255, 4379, 15404, 16940, 16940, 604, 18476,
	-1000, 1184, 114, 1183, -1000, 112, 1182, -1000, 112, 1181,
	4, -1000, -1000, -1000, -1000, -1000, -1000, 280, 15660, 16940,
	1356, 3818, -1000, 9255, -1000, -1000, 13840, 955, 13840, -1000,
	-1000, 1353, -1000, 9255, -1000, 24, 22, 1010, 1048, 10908,
	10639, 1227, 1516, -1000, -1000, -1000, 37, 4659, 16940, 1150,
	13840, 16940, 16940, 16940, 16940, 16940, 16940, -1000, 1007, -1000,
	16940, 16940, -1000, 18, 15, -1000, 18220, -1000, 125, -1000,
	273, 962, 366, 115, 17964, 1194, 960, -1000, 917, -1000,
	879, 988, 8409, 9255, 111, -1000, -1000, 111, 111, 9255,
	-1000, -1000, 16940, 13, 1351, 16940, 78, -1000, 23835, -1000,
	-1000, 9255, 9255, 9255, 9255, 9255, 813, -1000, -1000, -1000,
	5523, -1000, -1000, 35, 271, 202, -1000, -1000, 270, 35,
	-1000, -1000, -1000, -1000, 265, 1446, 404, -1000, -1000, -1000,
	9255, 137, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1148, 262, 261, -1000, -1000, -1000, -1000, 260, 258,
	256, 253, 252, 250, 249, 248, 246, 245, 244, 242,
	241, 236, 226, 739, -1000, 375, -1000, -1000, 375, 375,
	-1000, 220, 220, 222, -1000, -1000, -1000, -1000, 220, -1000,
	-1000, -1000, 346, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	223, 78, -1000, -1000, -1000, 16940, 0, -1000, 24574, -1000,
	2, 807, -1000, 14892, 1262, 1261, 1242, 15404, 1309, 1305,
	514, 16940, 16940, 509, 506, 15404, -1000, 1111, -1, -1000,
	-1000, 2968, -1000, -1000, 372, 104, 1338, 104, 12792, -1000,
	16940, 16940, -1000, 16940, -1000, -1000, 16940, -1000, 16940, 16940,
	-1000, 16940, 1144, 14380, 646, 1179, 556, -4, -2, -1000,
	1359, -1000, -1000, -1000, -1000, 97, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	222, 739, 220, 220, 220, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 346, -1000, -1000, 375, 375, 375, -1000, -1000,
	-6, 24574, 504, 6, 14110, 16940, -1000, 34, -1000, -1000,
	1110, 423, -7, 730, 1035, 673, -1000, -1000, -1000, -1000,
	11, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1405, -1000, -1000, -1000, -1000, 1432, 11, -1000, -1000,
	-1000, -1000, -1000, 1442, -1000, -1000, -1000, 4659, -1000, -1000,
	-1000, 16940, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 730, 1035, -1000, -1000, 15404, 14636, 1320, 1178,
	753, -1000, 1316, 16940, 880, 957, -1000, -1000, 324, 1177,
	-1000, -1000, -1000, -1000, 24574, -1000, 24574, 682, 1045, -1000,
	1045, 10, -1000, 23644, -1000, 219, -12, -1000, 372, 7278,
	12263, 3818, 3818, 16940, 531, 9255, 9255, 9255, 9255, 9255,
	9255, 9255, 9255, 9255, 9255, 9255, 9255, 9255, 9255, 9255,
	9255, 9255, 9255, 9255, 9255, 9255, 9255, 878, 9255, 503,
	9255, 9255, 9255, 9255, 952, 781, 197, 4659, -1000, 590,
	590, 590, 24696, 24696, 210, 23, 23155, 7, 35, -1000,
	-1000, 6993, 6691, 35, 4939, -1000, 779, 1431, 376, 24574,
	1157, 1087, 218, 113, 109, 9255, 9255, 9537, 9537, 9255,
	9819, 9255, 9255, 5805, 9255, 9255, 9255, 9255, 9255, 9255,
	-1000, 209, -1000, -1000, -1000, -1000, 1427, -1000, -1000, 1426,
	-1000, 530, 523, 1423, 372, 108, 7842, -1000, 646, 16940,
	16940, 16940, -1000, -1000, 946, 17708, 943, 3818, 16940, -1000,
	208, 207, 1018, 1017, 16940, 16940, 17452, 17196, 16940, 742,
	206, 204, 16940, 700, -1000, 16940, 16940, 694, 548, 1108,
	16940, -1000, 9255, 653, 9255, 741, -1000, 11718, 382, 16940,
	675, 72, -1000, -1000, -1000, 321, 16940, -1000, -1000, -1000,
	114, -1000, 112, 112, -1000, -1000, 15404, -1000, -1000, -1000,
	-1000, -1000, -1000, 3818, 296, 295, -1000, 1421, 499, -1000,
	497, 493, 492, -1000, 201, -1000, 9255, 16940, 14110, 6,
	5, -1000, -1000, 16940, 1035, -1000, -1000, -1000, -1000, 659,
	-1000, 722, -1000, 11177, -1000, -1000, -1000, 779, -1000, -11,
	-1000, -1000, -1000, -1000, 106, -16, 3, 3818, -1000, -1000,
	-1000, -1000, -1000, 16940, 282, 16940, -4, 16940, -1000, 1441,
	-4, 16940, 1176, 1440, 16940, -1000, -1000, -1000, 9255, -1000,
	-1000, -1000, -4, 16940, -1000, 1084, -1000, -24, 1552, -132,
	15148, -1000, 11446, -1000, -1000, -1000, 339, 284, 284, 439,
	439, 439, 439, 2633, 2633, 505, 2868, 2659, 2659, 2659,
	2387, 950, 950, 2659, 2659, 2659, 24696, 24664, 169, 9255,
	9255, 489, 773, 197, 169, 9255, 1396, 169, 169, 169,
	-1000, 848, -1000, -1000, -1000, 1107, 193, 9819, 9819, -1000,
	-1000, -1000, 5523, -1000, -1000, 191, 9255, -1000, 9255, -20,
	-23, -1000, -1000, -26, -1000, -1000, -17, 9255, 9255, 9255,
	105, -1000, 102, 566, -1000, 9255, 818, 187, 186, 9255,
	-1000, -1000, 24471, 22041, 101, 1103, -82, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 99, 98, 24280, -82, 95, 22826,
	-1000, 9819, 9819, 9819, 5523, 185, 94, 23539, -82, 24248,
	8124, 8124, 8124, 93, 24158, 9255, -82, 21848, 21822, 3065,
	-35, -37, -39, 1418, -44, 90, 338, 337, 87, 1084,
	-1000, -1000, -1000, -1000, 484, 483, 1173, -1000, 939, -1000,
	387, -1000, 746, 9255, 16940, 184, 182, 757, -1000, 1172,
	826, 1170, 826, -1000, 2, 765, 9255, 9255, -1000, 482,
	-1000, -1000, 481, -1000, 546, -1000, 23331, -1000, 7278, 24574,
	-1000, 668, 1252, -45, -1000, -1000, 7278, 372, 12792, 12263,
	7842, -49, -1000, -1000, -1000, 646, -1000, 395, 1417, 85,
	958, 805, 705, 589, 1401, 24574, -11, -1000, -11, -1000,
	-1000, -1000, -1000, -1000, -1000, 16940, 1067, -1000, 14636, 181,
	16940, 175, -1000, 167, -1000, -1000, 155, 16940, -1000, 1194,
	-1000, 76, -1000, 1081, 1292, -1000, 12263, 890, 1026, 1022,
	12263, 887, 829, 829, 829, -1000, 15148, 4088, -1000, -1000,
	16940, 154, 11990, 73, 1552, 9255, 169, 169, 9255, 9819,
	9819, -1000, 169, -1000, -1000, -1000, -1000, 1101, 153, 9255,
	3818, 24887, 24785, -53, 6389, -21, 23123, -1000, -1000, 202,
	-1000, 71, 7560, -1000, 23864, -22, -22, -1000, 1439, 1192,
	-1000, 9255, 24055, -1000, 13048, 374, 844, 23033, 3818, 3818,
	-1000, 9255, -1000, -1000, 1098, 9255, -1000, 3818, 3818, 9819,
	9819, 9819, 9819, 9819, 9819, 9819, 9819, 9819, 9819, 9819,
	9819, 9819, 9819, 9819, 9819, 9819, 9819, 9819, 1011, 9819,
	1394, 1394, 1394, -34, 6087, -1000, 1147, 1098, 9255, 9255,
	3818, 69, 68, 67, -1000, 9255, -82, 9255, 9255, 9255,
	-1000, -1000, -1000, 65, -1000, 1393, -1000, -1000, -1000, -1000,
	1081, 16940, 16940, 16940, 1169, -1000, 1444, -1000, 22947, -62,
	16940, 16940, -1000, 1023, 1032, 401, 16940, -1000, 16940, -1000,
	16940, 16940, 16940, -63, -67, 16940, 16940, -1000, -1000, -64,
	7278, 213, -4, -64, 653, -1000, -36, -1000, 320, -1000,
	292, 127, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	63, -1000, -1000, 1069, -1000, 10101, 152, 16940, 14636, 1315,
	10101, 868, -1000, -1000, 370, 9255, 9255, 1552, 538, 12263,
	12263, 1859, 1021, 12263, -1000, -1000, -1000, -1000, -1000, -1000,
	1012, 148, 16940, 15148, 471, 169, 23954, 345, 9255, 3818,
	24872, -68, 9255, 9255, -1000, -73, -1000, 9255, -1000, -1000,
	1436, 9255, 62, 61, 59, -1000, -1000, 24574, 9255, -1000,
	-1000, 21548, 9255, 58, -1000, 56, 52, 24574, 1147, 24574,
	-1000, -1000, 463, 463, 1394, 1394, 1394, 1394, 1951, 1951,
	2854, 2614, 935, 935, 935, 784, 430, 430, 935, 935,
	935, 1097, 998, 144, 24904, 9255, -74, -1000, -1000, -1000,
	24574, 24574, 48, -1000, -1000, -1000, -82, 2745, 22740, 22650,
	-1000, 47, 370, -1000, -1000, -1000, 16940, -1000, 16940, -1000,
	16940, 16940, 1094, 930, -1000, -1000, 1004, 143, 9819, 16940,
	-1000, 720, -75, -80, 928, -1000, 925, 9255, -1000, 3818,
	826, 826, -1000, 473, 441, -1000, -1000, -1000, -1000, -64,
	1202, 16940, 1241, -1000, -1000, 142, -1000, -1000, -1000, 793,
	-81, -1000, 200, 1266, 9255, -1000, -1000, 141, 10101, -86,
	46, -4, -93, 16940, -1000, 16940, 24574, -82, 508, -1000,
	1859, -1000, 139, 9255, 12263, -1000, -154, -1000, 318, -1000,
	16940, -97, -1000, 9255, 9255, 24872, -98, -1000, 169, 169,
	-1000, 22618, -1000, 23864, -1000, -1000, -1000, 24574, 790, -1000,
	22564, -1000, -1000, -1000, -1000, 9819, 1095, 135, 3818, 22442,
	-1000, -1000, 9255, -1000, -1000, -1000, -1000, -1000, 869, -1000,
	-1000, 16940, 933, -1000, -1000, 9255, 24904, 134, 1067, 133,
	-1000, -1000, -1000, 706, -1000, -1000, 24574, 1268, -1000, -1000,
	16940, 16940, 487, -99, 16940, -1000, -1000, 5241, 16940, 720,
	10101, 1278, 35, 16940, 1278, 22266, 4939, -104, -1000, 1067,
	-1000, 720, 132, -72, -1000, 1314, 13584, -1000, 16940, 24574,
	-1000, 1012, -1000, 4659, -105, -1000, 169, 169, -1000, -1000,
	45, 844, 1284, -1000, 3224, 9819, 3818, -112, -1000, 22234,
	-1000, -1000, 1167, 22144, 980, 16940, -1000, 16940, 16940, 389,
	16940, -1000, -1000, 572, -1000, 372, -1000, 131, 1067, -1000,
	-1000, -1000, -1000, 1266, -17, 720, -1000, 1067, 10101, 16940,
	130, -1000, 128, 35, -114, -1000, -1000, -1000, -1000, 721,
	9255, 3224, -118, -1000, -1000, 1160, -1000, 855, 801, 44,
	-123, 115, -1000, 9255, -1000, 12792, -1000, 16940, -1000, 1278,
	43, 1067, -1000, -124, -1000, -1000, 9255, -1000, 41, 8973,
	8973, -82, -1000, 16940, -1000, 865, 858, 584, -1000, -1000,
	-1000, -1000, -1000, 980, 24574, -103, -133, -1000, -1000, -1000,
	720, -22, -1000, -1000, -1000, 3565, 859, 639, 23453, -1000,
	-1000, -1000, 1207, -1000, 410, 860, 860, 855, -1000, 824,
	1067, 40, 1364, -1000, -1000, -1000, -1000, -1000, -1000, 1373,
	-1000, -1000, 1006, -1000, -1000, -1000, -1000, -1000, -1000, 1436,
	8691, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1671, 1669, 1298, 135, 1668, 132, 1666, 1663, 1659,
	1655, 1654, 1653, 96, 131, 129, 127, 128, 1652, 84,
	1651, 1650, 1649, 92, 1647, 1646, 1645, 65, 1643, 1642,
	125, 123, 1639, 1638, 88, 37, 138, 2380, 136, 1637,
	1635, 1633, 13, 98, 61, 1630, 119, 1626, 1625, 59,
	1624, 104, 102, 885, 34, 1623, 1622, 142, 21, 16,
	147, 97, 148, 118, 113, 1621, 1620, 1618, 46, 1616,
	3, 1614, 1612, 25, 53, 11, 1611, 12, 36, 1610,
	1609, 120, 1608, 62, 89, 107, 26, 111, 1339, 1606,
	47, 14, 69, 1603, 15, 1601, 31, 75, 140, 1598,
	44, 150, 58, 33, 57, 100, 1595, 1592, 1591, 79,
	1590, 85, 74, 1589, 1588, 66, 1586, 133, 139, 1585,
	1584, 117, 1583, 1582, 1580, 156, 1576, 1571, 152, 1568,
	8, 52, 60, 9, 110, 109, 49, 1567, 18, 1564,
	1442, 883, 769, 19, 51, 38, 76, 50, 55, 20,
	1560, 1559, 101, 1557, 1556, 1555, 1553, 1552, 78, 1550,
	68, 143, 43, 54, 82, 27, 32, 81, 95, 153,
	105, 1549, 1547, 116, 1541, 91, 1536, 1529, 1443, 137,
	1527, 1526, 1525, 1190, 1185, 1091, 94, 1522, 1517, 702,
	265, 1515, 1514, 108, 1513, 1512, 141, 145, 23, 1509,
	112, 1505, 93, 1504, 0, 144, 83, 1501, 115, 77,
	1497, 1495, 1485, 1480, 28, 2, 10, 6, 5, 4,
	30, 24, 1478, 1476, 121, 86, 1474, 1473, 149, 1470,
	1469, 1468, 35, 1467, 22, 1466, 17, 1460, 1459, 7,
	1, 151, 1457, 106, 1455, 1331, 1453, 146, 1452, 1449,
	1356, 80,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 87, 87, 86, 86,
	89, 89, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 174, 174, 173, 18, 150,
	150, 19, 19, 19, 19, 20, 110, 110, 21, 21,
	21, 21, 22, 26, 241, 241, 241, 245, 245, 246,
	246, 247, 247, 247, 247, 247, 247, 247, 243, 243,
	29, 29, 29, 29, 29, 129, 125, 125, 127, 127,
	127, 127, 52, 124, 124, 124, 124, 126, 126, 126,
	126, 197, 196, 196, 202, 202, 202, 65, 65, 65,
	65, 65, 66, 66, 66, 195, 195, 195, 195, 203,
	203, 203, 203, 203, 203, 67, 67, 67, 201, 201,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 17,
	242, 242, 244, 244, 31, 31, 9, 9, 10, 10,
	68, 68, 69, 69, 132, 132, 132, 132, 70, 70,
	47, 47, 47, 131, 212, 212, 213, 213, 213, 213,
	213, 213, 214, 214, 214, 214, 214, 214, 214, 210,
	210, 211, 208, 208, 209, 209, 209, 209, 248, 248,
	130, 130, 73, 73, 217, 217, 217, 217, 215, 215,
	215, 215, 215, 218, 216, 219, 219, 219, 219, 219,
	161, 161, 161, 33, 11, 50, 50, 12, 8, 8,
	114, 114, 77, 77, 165, 165, 165, 59, 59, 42,
	42, 42, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 115, 115, 116, 116, 24, 28, 32,
	32, 32, 32, 32, 250, 250, 56, 56, 56, 56,
	57, 57, 128, 128, 128, 128, 128, 51, 7, 7,
	49, 49, 23, 23, 23, 23, 23, 62, 62, 121,
	121, 121, 123, 123, 122, 122, 122, 100, 100, 34,
	82, 82, 91, 91, 92, 92, 171, 93, 93, 27,
	27, 37, 37, 35, 35, 35, 35, 35, 35, 36,
	36, 38, 38, 38, 38, 38, 38, 38, 225, 225,
	225, 228, 228, 224, 226, 226, 227, 227, 249, 249,
	101, 101, 101, 72, 71, 71, 75, 75, 74, 76,
	76, 164, 98, 98, 98, 98, 117, 118, 118, 119,
	119, 120, 120, 97, 97, 147, 147, 39, 39, 81,
	81, 83, 83, 138, 138, 139, 139, 137, 137, 137,
	166, 166, 166, 166, 167, 167, 167, 167, 167, 167,
	162, 162, 162, 162, 163, 163, 172, 172, 104, 104,
	104, 104, 102, 102, 103, 103, 168, 168, 168, 168,
	99, 99, 169, 169, 169, 133, 133, 175, 175, 175,
	80, 80, 80, 176, 176, 176, 176, 176, 176, 176,
	176, 176, 176, 176, 176, 176, 177, 177, 177, 177,
	179, 179, 179, 178, 178, 178, 178, 178, 178, 178,
	178, 178, 178, 178, 178, 178, 178, 180, 180, 187,
	187, 188, 188, 189, 190, 181, 181, 182, 182, 183,
	184, 191, 191, 191, 191, 193, 193, 185, 185, 185,
	185, 185, 186, 111, 111, 111, 111, 111, 111, 111,
	111, 111, 111, 111, 111, 111, 111, 112, 112, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
	141, 141, 141, 141, 141, 141, 141, 141, 142, 142,
	142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
	220, 220, 220, 220, 220, 220, 220, 222, 222, 223,
	223, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 221, 221, 229, 229,
	230, 230, 232, 232, 233, 233, 234, 235, 235, 235,
	236, 237, 237, 231, 231, 238, 238, 238, 239, 239,
	240, 240, 240, 240, 240, 152, 152, 152, 153, 153,
	154, 88, 88, 149, 149, 148, 148, 148, 151, 151,
	105, 105, 192, 192, 192, 192, 192, 192, 192, 106,
	106, 106, 113, 107, 107, 108, 108, 108, 108, 108,
	108, 144, 145, 109, 109, 109, 146, 146, 155, 159,
	159, 158, 157, 157, 156, 156, 136, 136, 136, 136,
	135, 134, 94, 94, 251, 251, 160, 160, 95, 95,
	96, 90, 90, 170, 170, 170, 170, 84, 84, 64,
	64, 85, 85, 60, 60, 63, 63, 61, 61, 61,
	61, 78, 78, 79, 79, 58, 58, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 194, 194,
	194, 53, 53, 53, 54, 54, 55, 55, 199, 199,
	199, 200, 200, 200, 200, 198, 198, 198, 198, 198,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 204, 204, 204, 204, 204,
	204, 204, 204, 204, 204, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 4, 4, 2, 2,
	2, 0, 2, 0, 8, 8, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 1, 1, 3, 2, 4, 0,
	3, 2, 1, 4, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 4, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 4, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 3, 1, 3, 3, 3, 2, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	0, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 1, 1, 3, 5,
	2, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 3, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -227, 92, 100, 122, 196,
	99, 85, 116, 210, 217, -35, -37, 225, -129, 226,
	34, 235, 58, 95, 212, 207, 256, 66, -225, -38,
	-36, 304, 279, 285, 220, -39, 243, 271, 307, 243,
	130, 78, 274, -60, -53, 4, -204, -206, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 151, 154, 157, 159, 160, 161, 162, 163, 165,
	166, 168, 170, 167, 173, 175, 176, 182, 185, 188,
	189, 190, 191, 194, 196, 198, 199, 200, 202, 203,
	207, 205, 206, 208, 210, 212, 213, 215, 217, 218,
	219, 222, 223, 225, 226, 228, 231, 234, 235, 236,
	239, 237, 233, 242, 244, 245, 252, 256, 257, 258,
	259, 262, 263, 264, 266, 268, 269, 270, 275, 280,
	281, 282, 283, 28, 35, 36, 37, 38, 40, 41,
	44, 45, 49, 50, 51, 53, 80, 82, 83, 98,
	101, 102, 108, 118, 120, 125, 126, 135, 136, 137,
	138, 140, 149, 172, 174, 183, 187, 193, 195, 201,
	214, 221, 229, 230, 238, 240, 247, 248, 249, 253,
	254, 271, 272, 87, 134, 264, 263, 78, 130, 243,
	274, -16, 304, -27, -6, -14, -4, -23, -34, -13,
	-30, -17, -31, -15, 23, -198, 4, -204, -206, -205,
	-207, 55, 67, 115, 133, 127, 142, 144, 150, 152,
	164, 184, 186, 211, 227, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 42, 47, 48, 52, 54, 56,
	62, 66, 70, 71, 72, 73, 74, 75, 84, 86,
	88, 89, 90, 93, 95, 97, 103, 104, 105, 111,
	113, 114, 116, 119, 121, 128, 130, 132, 139, 141,
	147, 148, 153, 155, 156, 169, 171, 177, 178, 179,
	180, 181, 192, 197, 204, 209, 220, 224, 232, 241,
	243, 246, 250, 251, 255, 260, 261, 265, 267, 273,
	274, 276, 277, 278, 279, -53, -53, -53, 196, 22,
	-245, 22, -246, -247, 66, 92, 116, 220, 134, 87,
	263, -245, -57, 217, -53, -125, 154, 223, 214, 252,
	-126, -124, -197, 247, 163, -86, -53, 4, 22, 78,
	57, 79, 117, 130, 131, 62, 63, 146, 244, 247,
	252, 66, 266, -250, 252, 252, -250, -250, -56, 252,
	250, -57, -249, 243, 243, 265, 274, -114, 78, 261,
	-36, -38, -37, -74, -75, 260, 139, 97, 181, -35,
	-37, -225, -228, 202, -224, -53, -228, -71, -72, 22,
	89, 308, -168, -60, 179, -96, 304, -3, -168, 125,
	-60, -63, 125, -60, -53, -168, 125, 114, 304, -94,
	-136, -135, -134, 302, 306, 114, 141, 141, -169, -168,
	-53, 125, -64, 125, -63, -87, 125, -86, -87, 125,
	-174, -173, -200, 4, -204, -206, -205, 271, 243, 130,
	-150, 304, -110, 304, -53, 22, 178, 308, 178, -53,
	-125, 51, -125, 304, -127, -51, -52, 143, 198, 250,
	289, 114, 283, -67, 5, 84, -89, 306, 114, -242,
	178, 114, 114, 114, 114, 114, 114, 283, 143, 198,
	243, 274, -128, -51, -52, -128, 250, -57, -99, -168,
	-86, 125, -53, -86, 130, -53, 125, -74, -75, -98,
	-117, -118, 153, 177, -101, 22, 89, -101, -101, 43,
	305, 305, 308, -228, -79, 304, -90, -170, -140, 297,
	-142, 295, 296, 301, 169, 284, -152, -60, -143, 9,
	304, -155, -222, -37, 98, 29, -153, -154, 214, -53,
	7, 8, 5, 6, -58, -177, -186, 255, 103, 171,
	47, -220, -221, 4, -204, -199, -178, -188, -182, -185,
	140, 55, 71, 74, 72, 75, 224, 265, 48, 28,
	101, 102, 187, 193, 240, 253, 254, 125, 172, 126,
	53, 118, 149, 91, 36, 38, 40, 41, 49, 50,
	80, 82, 83, 108, 135, 136, 137, 138, 174, 201,
	229, 238, 248, 249, 272, -205, -189, -190, -183, -184,
	-191, -90, -96, 297, -60, 304, -95, -160, -140, 84,
	-44, 205, -43, 21, 23, 92, 269, 98, 233, 233,
	205, 98, 309, 205, 205, 98, 236, 305, -84, -60,
	-136, -140, -198, 297, -169, -62, -60, -62, 225, -53,
	30, 98, -46, 308, 46, 208, 98, -46, 308, 98,
	-46, 98, 305, 308, -168, 125, -63, 30, -149, -175,
	-176, -178, -187, -181, -185, -186, 39, 45, 44, 245,
	221, 230, 37, 135, 136, 137, 138, 229, 36, 201,
	108, 91, 83, 82, 174, 41, 40, -189, -190, -183,
	-184, 80, 248, 249, 140, 38, 50, 49, 272, 238,
	-88, -140, -241, -85, 243, 78, -61, -53, 297, -247,
	-241, 30, -88, 308, 308, 151, -66, 157, 168, 123,
	-196, 84, -202, -195, -161, 9, 255, 103, 178, -201,
	8, 296, -194, -200, 5, 7, 295, -196, 84, 69,
	-203, 5, 4, -186, -161, 84, 154, 306, -198, -197,
	-244, 111, -241, -197, -197, -197, -197, -197, -53, 151,
	-197, -197, 308, 308, -57, -46, 308, 304, -73, 169,
	-226, 279, -73, 304, -54, 125, -53, -49, 94, 169,
	-98, -118, -117, -119, -140, 22, -140, -142, -36, -36,
	-36, -76, -164, -140, -224, 30, -78, -53, -81, 308,
	114, 10, 11, 54, 33, 295, 296, 297, 298, 109,
	299, 292, 293, 294, 291, 287, 288, 289, 60, 158,
	216, 13, 14, 15, 26, 180, 152, 284, 127, 227,
	301, 16, 17, 18, 142, 35, 128, 30, 4, -140,
	-140, -140, -140, -140, 186, -37, -140, -88, -94, -37,
	-148, 302, 304, -94, 304, 5, 5, 304, -156, -140,
	-229, 280, 111, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	195, -193, 275, -193, -193, -179, 304, -179, -180, 304,
	-179, 281, 285, 304, -81, -60, 308, 305, 308, 250,
	-115, 62, 56, -131, 125, 56, -208, -53, 62, -209,
	52, 261, 197, 113, -115, 62, -115, 62, 62, -168,
	33, 33, 250, -63, -53, 250, 250, -168, 114, 305,
	308, 303, 312, -133, 277, -121, -27, 304, 84, 30,
	-121, -91, -92, -171, -93, -60, 304, -53, -53, -63,
	-64, -86, -87, -87, -16, -173, 98, -19, -27, -23,
	-34, -13, 305, 308, -80, 29, -111, 304, 282, 161,
	81, 124, 160, -112, 219, 305, 308, 250, 308, -85,
	-78, -135, -134, 114, 252, 305, -52, -51, -65, 200,
	231, 206, 222, 308, 8, 7, 7, 5, -198, -243,
	-53, -52, -51, -168, -68, -78, -69, -53, -132, -131,
	-210, -211, -208, 130, 261, 104, 30, 98, -50, 191,
	30, 178, 169, 289, 98, -120, 214, 215, 308, -42,
	31, 88, 304, 308, 305, -133, -170, -83, -166, -168,
	-37, -167, 304, -175, -175, -86, 247, -140, -140, -140,
	-140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
	-140, -140, -140, -140, -140, -140, -140, -140, -140, 152,
	127, 227, 35, 128, -140, 250, -140, -140, -140, -140,
	171, 169, 255, 103, 262, 89, 175, -251, 241, 32,
	-146, -37, 304, -198, -152, 214, 304, 305, 308, -88,
	-151, 303, -148, -88, 305, 305, -88, 273, 22, 89,
	297, -111, 7, -159, -158, 276, -230, 106, 119, 304,
	305, 305, -140, -140, -105, -192, -88, 4, 282, 161,
	81, 124, 160, 219, -105, -106, -140, -88, -107, -141,
	-142, 295, 296, 301, 304, 214, -108, -140, -88, -140,
	42, 148, 251, -109, -140, 114, -88, -140, -140, -140,
	-88, -88, -88, 304, 7, 7, 247, 247, 7, -133,
	305, -160, -43, -60, -53, -53, 169, -131, 125, -48,
	169, -175, -53, 304, 304, 145, 145, -53, -53, 125,
	-53, 125, -53, -53, -44, 205, 304, 304, -53, 205,
	-53, -60, 205, 236, 114, -60, -140, -100, 209, -140,
	-100, -123, 178, -84, 271, -53, 209, -82, 308, 114,
	289, -84, -46, -46, -46, -168, -175, 302, 302, 7,
	250, 250, 250, 250, 304, -140, -243, -61, -243, -51,
	259, 59, 200, -202, -111, 308, 305, 305, 308, -54,
	130, -54, -27, -86, 5, -27, -60, 98, 5, -53,
	-164, -19, -53, -97, 119, -172, 308, 286, 67, -104,
	144, 164, 115, 150, 211, 133, -137, 309, -163, -162,
	30, -53, -37, -167, -166, 283, -140, -140, 250, -251,
	241, -146, -140, 171, 255, 103, 262, 89, 175, 114,
	304, -141, -141, -88, 304, -88, -140, 303, 303, 308,
	305, -75, 308, -74, -140, -88, -88, 305, 305, -157,
	-158, 93, -140, -235, 185, 304, 304, -140, 30, 308,
	305, 114, 305, 305, -113, 192, 305, 10, 11, 295,
	296, 297, 298, 109, 299, 292, 293, 294, 291, 287,
	288, 289, 60, 158, 216, 13, 14, 15, 142, 128,
	-141, -141, -141, -88, 304, 305, -144, -145, 114, 111,
	30, -109, -109, -109, 305, 114, -88, 308, 308, 308,
	305, 305, 305, 7, 305, 308, 305, 283, 283, 305,
	-97, 250, 250, 98, 169, 268, -212, -209, -140, -78,
	304, 304, -41, 92, 225, -116, 98, -46, 98, -46,
	250, -115, 62, -88, -88, 250, 250, 236, 303, -90,
	209, 61, 305, -90, -133, -92, -83, -160, 305, 303,
	7, 7, 305, 161, 124, 160, -112, 160, -112, -112,
	7, -53, -70, 129, -132, 304, -54, 304, 304, -73,
	304, -53, -49, 305, -147, 121, 43, -166, 175, 144,
	144, -166, -104, 144, -102, 184, -102, -102, -163, -198,
	310, -53, 304, 305, -140, -140, -141, -141, 114, 304,
	-140, -149, 26, 26, 305, -88, 305, 308, 305, -148,
	305, 273, -75, -75, -75, 5, 95, -140, 246, -236,
	-53, 304, 277, -74, 305, -175, -175, -140, -144, -140,
	-175, -175, -141, -141, -141, -141, -141, -141, -141, -141,
	-141, -141, -141, -141, -141, -141, -141, -141, -141, -141,
	-141, 89, 169, 175, -141, 308, -88, 305, -145, -144,
	-140, -140, -175, 305, 305, 305, -88, -140, -140, -140,
	305, 7, -147, -53, -53, -131, 98, -213, 62, -214,
	54, 104, 66, 169, 171, 261, 197, 52, 84, 204,
	305, 305, -78, -78, 169, 84, 169, 84, 77, 257,
	-53, -53, -60, -53, -53, 305, 305, -53, -60, -90,
	-122, 304, 178, -27, -100, 289, 303, 303, 305, 128,
	-77, -165, -53, -223, 304, -220, -221, -58, 304, -78,
	-68, 30, -77, 178, -232, 278, -140, -88, 242, -166,
	-166, -103, 267, 178, 144, -166, -139, -138, 112, 167,
	304, -78, -162, 26, 26, -140, -149, 305, -140, -140,
	305, -140, 5, -140, 305, 305, 305, -140, -237, -53,
	-140, 305, 305, 305, -145, 114, 89, 175, 304, -140,
	305, 305, 308, 305, 305, 305, -232, -131, -53, -86,
	-53, 104, 125, 171, 145, 304, -141, -60, -130, -248,
	65, 239, 305, 305, 171, 171, -140, -175, -46, -46,
	250, 250, 90, -78, 62, -96, -37, 304, 188, 305,
	308, -59, -94, 54, -59, -140, 304, -77, 305, 305,
	-27, 305, -60, -233, -234, -53, 247, -103, 304, -140,
	-166, 308, 311, 289, -78, 305, -140, -140, 305, 305,
	-75, -231, 190, 305, -141, 114, 304, -149, 305, -140,
	-214, -54, 169, -140, -55, 304, -70, 304, 204, -45,
	54, -53, -53, 263, 170, 305, -53, -53, -130, -165,
	-42, -86, -42, 305, -88, 305, -70, -130, 304, 308,
	30, -143, -58, -53, -78, -138, -198, 305, 305, -75,
	43, -141, -149, 305, 305, 98, 305, -217, 159, -53,
	-78, -60, -40, 267, -86, 225, -133, 304, -70, -59,
	-75, -130, -70, -77, -234, -236, 304, 305, -238, 199,
	215, -88, 305, 104, -215, -218, -216, 178, 115, 189,
	228, 305, 305, -73, -140, -91, -78, -42, 305, -70,
	305, -88, 305, -239, -240, 35, 258, 69, -140, -239,
	-53, -216, 178, -218, 178, 263, 87, -217, -133, 305,
	-130, -75, -240, 194, 110, 214, 194, 110, -219, 166,
	208, 46, 225, -219, -215, -47, 46, 208, -70, 305,
	26, 20, 171, 84, -240,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 387, 0, 0,
	0, 0, 0, 0, 0, 359, -2, 0, 134, 0,
	315, 0, 315, 315, 319, 0, 389, 281, 386, -2,
	397, 0, 0, 0, 395, 373, 0, 0, -2, 0,
	0, 0, 0, 0, 793, 821, 822, 823, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 878, 879, 880, 881,
	882, 883, 884, 885, 886, 887, 888, 889, 890, 891,
	892, 893, 894, 895, 896, 897, 898, 899, 900, 901,
	902, 903, 904, 905, 906, 907, 908, 909, 910, 911,
	912, 913, 914, 915, 916, 917, 918, 919, 920, 921,
	922, 923, 924, 925, 926, 927, 928, 929, 930, 931,
	932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
	942, 943, 944, 945, 946, 947, 948, 949, 950, 951,
	952, 953, 954, 955, 956, 957, 958, 959, 960, 961,
	962, 963, 964, 965, 966, 967, 968, 969, 970, 971,
	972, 973, 974, 975, 976, 977, 978, 979, 980, 981,
	982, 983, 984, 985, 986, 987, 988, 989, 990, 991,
	992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001,
	1002, 1003, 1004, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 84, 85, 86, 87, 88, 89, 90,
	91, 92, 93, 94, 0, 199, 835, 836, 837, 838,
	839, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 100, 107, 108, 906, 110,
	0, 117, 118, 119, 121, 122, 123, 124, 125, 126,
	127, 0, 308, 920, 321, 130, 884, 924, 992, 938,
	137, 147, 0, 998, -2, 151, 78, 180, 181, 182,
	0, 184, 201, 0, 0, 0, 0, 0, 192, 0,
	0, 0, 198, 326, 314, 326, 311, 312, 313, 316,
	0, 307, 0, 388, 0, 0, 0, 0, 0, 280,
	-2, 369, 370, -2, 0, 392, 392, 392, 0, 0,
	370, 0, 378, 910, 381, 804, 379, 0, 0, 394,
	393, 0, 374, 456, 0, 417, 0, 2, 0, 977,
	456, 0, 977, 796, 0, 0, 977, 0, 0, 794,
	772, 766, 767, 0, 0, 0, 0, 0, 0, 462,
	68, 977, 51, 977, 789, 51, 977, 76, 51, 977,
	0, 95, 97, 831, 832, 833, 834, 1003, 0, 0,
	0, 0, 105, 0, 109, 111, 0, 0, 0, 320,
	131, 966, 133, 0, 136, 138, 139, 0, 0, 0,
	0, 0, 0, 150, 175, 176, 79, 0, 0, 203,
	0, 0, 0, 0, 0, 0, 0, 193, 0, 195,
	0, 0, 309, 322, 323, 310, 0, 318, 51, 460,
	253, 977, 385, 253, 825, 331, 977, -2, 0, 365,
	404, 405, 0, 0, 0, 390, 391, 0, 0, 0,
	361, 362, 0, 380, 0, 0, 420, 781, 785, 786,
	549, 0, 0, 0, 0, 0, 0, 638, 639, 640,
	0, 642, 643, 644, 971, 0, 648, 649, 992, 793,
	807, 808, 809, 810, 0, 0, 0, 815, 816, 817,
	765, 689, 658, -2, -2, 805, 486, 487, 488, 489,
	-2, 1005, 662, 664, 666, 667, 668, 669, 0, 955,
	972, 973, 988, 989, 997, 1001, 1002, 977, 985, 978,
	967, 975, 984, 864, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 830, 511, 512, 517, 518,
	520, 420, 418, 457, 458, 0, 0, 778, 776, 777,
	28, 304, 30, 0, 304, 304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 787,
	773, 0, 770, 771, 466, 0, 337, 0, 0, 463,
	0, 0, 70, 0, 49, 50, 0, 72, 0, 0,
	74, 0, 387, 0, 0, 977, 0, 387, 0, 723,
	472, 473, 474, 475, 476, 546, 479, 480, 481, 482,
	483, 484, 485, 493, 494, 495, 496, 497, 498, 499,
	508, 0, 492, 492, 492, 505, 506, 509, 510, 515,
	516, 527, 528, 530, 532, 526, 526, 526, 523, 524,
	0, 721, 0, 114, 0, 859, 791, 797, 798, 120,
	0, 0, 0, 0, 0, 0, 142, 162, 163, 164,
	143, 145, 152, 154, 155, 156, 165, 166, 167, 168,
	270, 0, 272, 178, 179, 818, 0, 144, 146, 148,
	149, 169, 170, 0, 172, 173, 174, 0, 80, 183,
	185, 0, 200, 186, 187, 188, 189, 190, 191, 194,
	196, 197, 0, 0, 317, 273, 0, 211, 0, 0,
	276, 384, 0, 0, 0, 977, 824, 328, 0, 0,
	368, 402, 403, 406, 409, 410, 407, 549, 375, 376,
	377, 398, 399, 291, 382, 0, 0, 801, 466, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 775, 0, 0, 784, 554,
	555, 556, 578, 579, 0, -2, 721, 0, 645, 646,
	647, 0, 0, -2, 0, 812, 546, 0, 0, 764,
	691, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	744, 750, 0, 0, 0, 0, 0, 0, 0, 0,
	501, 514, 525, 522, 521, 503, 0, 502, 500, 0,
	504, 0, 0, 0, 466, 0, 0, 780, 0, 0,
	0, 0, 303, 32, 977, 0, 53, 0, 0, 243,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 795, 0, 0, 0, 0, 0,
	0, 768, 0, 348, 0, 348, 339, 0, 0, 0,
	335, 351, 352, 354, 355, 0, 0, 464, 69, 790,
	51, 77, 51, 51, 83, 96, 0, 98, 101, 102,
	103, 104, 99, 0, 467, 469, 477, 0, 533, 534,
	535, 536, 537, 538, 547, 106, 0, 0, 0, 115,
	116, 799, 800, 0, 0, 135, 140, 141, 327, 0,
	159, 0, 161, 0, 271, 820, 819, 546, 81, 202,
	128, 324, 325, 461, 0, 0, 210, 801, 212, 214,
	215, 216, 217, 825, 0, 825, 0, 0, 274, 0,
	0, 0, 0, 0, 0, 408, 411, 412, 0, 401,
	289, 290, 387, 0, 803, 414, 782, 447, 421, 429,
	445, 432, 0, 550, 551, 552, 0, 557, 558, 559,
	560, 561, 562, 563, 564, 565, 566, -2, -2, -2,
	570, 571, 572, -2, -2, -2, 576, 577, -2, 0,
	0, 0, 775, 0, -2, 0, 586, -2, -2, -2,
	590, 0, 593, 595, 597, 0, 0, 0, 0, 774,
	607, 756, 0, 783, 592, 0, 0, 641, 0, 0,
	0, 727, 728, 0, -2, 650, 397, 0, 0, 0,
	0, 813, 0, 763, 759, 0, 699, 0, 0, 0,
	663, 665, 0, 0, 0, 0, 731, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 721, 741, 0, 0,
	609, 0, 0, 0, 0, 992, 0, 721, 749, 0,
	0, 0, 0, 0, 721, 0, 755, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 414,
	459, 779, 31, 293, 0, 0, 0, 34, 977, 42,
	0, 225, 0, 0, 0, 0, 0, 306, 43, 977,
	51, 977, 51, 44, 29, 304, 0, 0, 297, 0,
	292, 295, 0, 59, 0, 788, 0, 67, 0, 465,
	332, 333, 0, 0, 341, 338, 0, 466, 0, 0,
	0, 0, 71, 73, 75, 0, 724, 0, 0, 0,
	0, 0, 0, 0, 0, 722, 112, 792, 113, 132,
	157, 158, 160, 153, 171, 0, 219, 252, 0, 0,
	825, 0, 208, 253, 275, 277, 0, 0, 330, 331,
	400, 0, 802, 416, 0, 419, 0, 0, 0, 0,
	0, 0, 453, 453, 453, 451, 445, 0, 431, 444,
	0, 443, -2, 432, 0, 0, -2, -2, 0, 0,
	0, 608, -2, 591, 594, 596, 598, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 722, 725, 726, 0,
	-2, 0, 0, 396, 397, 397, 397, 656, 0, 0,
	760, 0, 0, 657, 0, 0, 0, 0, 0, 0,
	672, 0, 673, 674, 0, 0, 675, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	612, 613, 614, 0, 0, 676, 747, 748, 0, 0,
	0, 0, 0, 0, 681, 0, 754, 0, 0, 0,
	685, 686, 687, 0, 490, 0, 507, 529, 531, 519,
	416, 0, 0, 0, 0, 52, 223, 242, 0, 0,
	0, 0, 36, 0, 0, 0, 0, 40, 0, 46,
	0, 0, 0, 0, 0, 0, 0, 60, 769, 347,
	0, 346, 0, 336, 348, 353, 350, 356, 0, 470,
	0, 0, 478, 539, 540, 541, 542, 543, 544, 545,
	0, 129, 206, 0, 213, 0, 0, 0, 211, 0,
	0, 0, 329, 383, 693, 0, 0, 422, 0, 0,
	0, 0, 0, 0, 448, 452, 449, 450, 430, 427,
	0, 441, 0, 434, 553, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 757, 0, 716, 0, -2, 729,
	651, 0, 0, 0, 0, 814, 758, 762, 0, 697,
	698, 702, 0, 0, 661, 0, 0, 730, 740, 742,
	610, 611, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, -2, -2, -2, 628, 629, 630, -2, -2,
	-2, 0, 0, 0, 743, 0, 0, 719, 745, 746,
	751, 752, 0, 678, 679, 680, 753, 0, 0, 0,
	513, 0, 693, 299, 301, 33, 0, 224, 0, 227,
	0, 0, 0, 0, 233, 234, 0, 0, 0, 0,
	244, 251, 0, 0, 0, 48, 0, 0, 305, 0,
	51, 51, 294, 0, 0, 204, 205, 298, 296, 334,
	0, 0, 0, 340, 349, 0, 471, 468, 548, 0,
	0, 282, 288, 288, 0, 659, 660, 0, 0, 0,
	0, 0, 0, 0, 371, 0, 415, 413, 0, 435,
	0, 437, 0, 0, 0, 439, 0, 425, 0, 424,
	0, 0, 433, 0, 0, -2, 0, 601, -2, -2,
	715, 722, 811, 397, 652, 654, 655, 761, 704, 701,
	0, 688, 670, 671, 739, 0, 0, 0, 0, 722,
	718, 677, 0, 683, 684, 491, 372, 35, 0, 228,
	229, 825, 0, 232, 235, 0, 237, 827, 219, 0,
	248, 249, 246, 0, 37, 38, 47, 55, 39, 45,
	0, 0, 0, 0, 0, 357, 358, 0, 0, 251,
	0, 291, 806, 0, 291, 0, 0, 0, 241, 219,
	209, 251, 0, 692, 694, 0, 0, 436, 0, 455,
	438, 0, 428, 0, 0, 442, -2, -2, 602, 717,
	0, 397, 0, 690, -2, 0, 0, 0, 720, 0,
	226, 230, 0, 0, 257, 0, 245, 0, 0, 57,
	0, 300, 302, 0, 343, 466, 345, 0, 219, 283,
	284, 287, 285, 288, 397, 251, 207, 219, 0, 0,
	0, 446, 0, 0, 0, 426, 423, 440, 653, 707,
	0, -2, 0, 636, 682, 0, 236, 262, 0, 0,
	0, 253, 41, 0, 54, 0, 344, 0, 239, 291,
	0, 219, 278, 0, 695, 696, 0, 454, 0, 0,
	0, 703, 637, 0, 238, 258, 259, 0, 254, 255,
	256, 826, 250, 257, 56, 466, 0, 286, 651, 240,
	251, 397, 700, 705, 708, -2, 941, 856, 0, 706,
	231, 260, 0, 261, 0, 0, 0, 262, 342, 222,
	219, 0, 0, 710, 711, 712, 713, 714, 263, 0,
	266, 267, 0, 264, 247, 218, 220, 221, 279, 0,
	0, 265, 268, 269, 709,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 293, 3, 299, 294, 3,
	304, 305, 297, 295, 308, 296, 306, 298, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 312, 307,
	287, 289, 288, 3, 309, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 302, 3, 303, 292, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 310, 291, 311, 301,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 290,
	57630, 300, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:717
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:723
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:754
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:765
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:781
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:792
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:797
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:802
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:807
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:812
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:817
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:824
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:834
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:844
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:854
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:917
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:920
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:921
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:949
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:984
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1033
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1051
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1121
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1144
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1247
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1285
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1310
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1408
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1427
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1429
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1542
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1559
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1569
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1623
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1627
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = DropDefault
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1637
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			return unimplemented(sqllex)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1748
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1834
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1842
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1849
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1850
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1851
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1852
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1853
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1856
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1859
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1864
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = true
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = false
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1972
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1973
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1977
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1981
		{
			sqlVAL.union.val = Ascending
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = Descending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2031
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2032
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = true
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.union.val = false
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2045
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2046
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2088
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2089
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.str = ""
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.str = ""
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 333:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2183
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2185
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2190
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2232
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			return unimplemented(sqllex)
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2261
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 351:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2262
		{
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2340
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2489
		{
			return unimplemented(sqllex)
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			return unimplemented(sqllex)
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2491
		{
			return unimplemented(sqllex)
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			return unimplemented(sqllex)
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			return unimplemented(sqllex)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2498
		{
			return unimplemented(sqllex)
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2501
		{
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2502
		{
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2505
		{
			return unimplemented(sqllex)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2506
		{
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2509
		{
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2510
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = true
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = false
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = false
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = true
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2533
		{
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2534
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2572
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2605
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2633
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2634
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 414:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2684
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = &From{}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2732
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2844
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.str = astFullJoin
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.str = astLeftJoin
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.str = astRightJoin
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.str = astInnerJoin
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2878
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2879
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2935
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2939
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2969
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2973
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2974
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2975
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2983
		{
			return unimplemented(sqllex)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2985
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3039
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = nil
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3088
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3160
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3192
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3231
		{
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3241
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3245
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3249
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 531:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3253
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
			return unimplemented(sqllex)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			return unimplemented(sqllex)
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			return unimplemented(sqllex)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3266
		{
			return unimplemented(sqllex)
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
			return unimplemented(sqllex)
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3268
		{
			return unimplemented(sqllex)
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3269
		{
			return unimplemented(sqllex)
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3270
		{
			return unimplemented(sqllex)
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3271
		{
			return unimplemented(sqllex)
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			return unimplemented(sqllex)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3273
		{
			return unimplemented(sqllex)
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3276
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3279
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3280
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3315
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3412
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3424
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3440
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			return unimplemented(sqllex)
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3493
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3726
		{
			return unimplemented(sqllex)
		}
	case 653:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3727
		{
			return unimplemented(sqllex)
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3750
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3765
		{
			return unimplemented(sqllex)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3766
		{
			return unimplemented(sqllex)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3770
		{
			return unimplemented(sqllex)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			return unimplemented(sqllex)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			return unimplemented(sqllex)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3789
		{
			return unimplemented(sqllex)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			return unimplemented(sqllex)
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3819
		{
			return unimplemented(sqllex)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3841
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3849
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3853
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3863
		{
			return unimplemented(sqllex)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3864
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3867
		{
			return unimplemented(sqllex)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3868
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3873
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3877
		{
			sqlVAL.union.val = Window(nil)
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.str = ""
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3956
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3957
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
			return unimplemented(sqllex)
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3961
		{
			return unimplemented(sqllex)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3967
		{
			return unimplemented(sqllex)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3969
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3970
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3971
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4133
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4193
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4308
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4468
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4504
		{
			return unimplemented(sqllex)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = DNull
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.str = ""
		}
	case 826:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
