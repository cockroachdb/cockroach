// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const HAS_SOME_KEY = 57700
const HAS_ALL_KEYS = 57701
const POSTFIXOP = 57702
const UMINUS = 57703
const HELPTOKEN = 57704

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6881

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	382, 54,
	-2, 712,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	153, 562,
	-2, 0,
	-1, 60,
	96, 712,
	157, 712,
	330, 712,
	331, 712,
	-2, 0,
	-1, 70,
	1, 674,
	216, 674,
	261, 674,
	377, 674,
	379, 674,
	381, 674,
	382, 674,
	-2, 687,
	-1, 103,
	4, 714,
	20, 714,
	21, 714,
	23, 714,
	28, 714,
	33, 714,
	34, 714,
	35, 714,
	36, 714,
	37, 714,
	38, 714,
	39, 714,
	40, 714,
	41, 714,
	42, 714,
	44, 714,
	45, 714,
	46, 714,
	47, 714,
	48, 714,
	51, 714,
	52, 714,
	53, 714,
	55, 714,
	56, 714,
	60, 714,
	61, 714,
	62, 714,
	64, 714,
	65, 714,
	66, 714,
	67, 714,
	69, 714,
	71, 714,
	72, 714,
	75, 714,
	76, 714,
	77, 714,
	85, 714,
	86, 714,
	87, 714,
	88, 714,
	89, 714,
	90, 714,
	91, 714,
	92, 714,
	94, 714,
	96, 714,
	98, 714,
	101, 714,
	102, 714,
	104, 714,
	108, 714,
	109, 714,
	110, 714,
	111, 714,
	112, 714,
	113, 714,
	114, 714,
	122, 714,
	123, 714,
	124, 714,
	125, 714,
	126, 714,
	128, 714,
	130, 714,
	135, 714,
	136, 714,
	138, 714,
	141, 714,
	142, 714,
	145, 714,
	146, 714,
	147, 714,
	148, 714,
	151, 714,
	152, 714,
	154, 714,
	157, 714,
	158, 714,
	159, 714,
	160, 714,
	161, 714,
	162, 714,
	163, 714,
	164, 714,
	166, 714,
	169, 714,
	170, 714,
	171, 714,
	173, 714,
	174, 714,
	175, 714,
	176, 714,
	177, 714,
	179, 714,
	180, 714,
	182, 714,
	184, 714,
	185, 714,
	188, 714,
	189, 714,
	192, 714,
	194, 714,
	196, 714,
	197, 714,
	198, 714,
	199, 714,
	200, 714,
	202, 714,
	203, 714,
	204, 714,
	205, 714,
	209, 714,
	210, 714,
	211, 714,
	212, 714,
	213, 714,
	215, 714,
	217, 714,
	218, 714,
	221, 714,
	222, 714,
	224, 714,
	226, 714,
	227, 714,
	228, 714,
	229, 714,
	230, 714,
	231, 714,
	233, 714,
	234, 714,
	235, 714,
	236, 714,
	237, 714,
	239, 714,
	240, 714,
	241, 714,
	242, 714,
	243, 714,
	244, 714,
	245, 714,
	246, 714,
	248, 714,
	249, 714,
	250, 714,
	251, 714,
	252, 714,
	254, 714,
	255, 714,
	256, 714,
	257, 714,
	258, 714,
	259, 714,
	260, 714,
	262, 714,
	264, 714,
	265, 714,
	266, 714,
	267, 714,
	269, 714,
	270, 714,
	271, 714,
	272, 714,
	273, 714,
	275, 714,
	276, 714,
	277, 714,
	278, 714,
	279, 714,
	281, 714,
	282, 714,
	283, 714,
	284, 714,
	286, 714,
	287, 714,
	288, 714,
	289, 714,
	291, 714,
	292, 714,
	293, 714,
	294, 714,
	295, 714,
	296, 714,
	297, 714,
	298, 714,
	299, 714,
	300, 714,
	302, 714,
	304, 714,
	305, 714,
	306, 714,
	307, 714,
	308, 714,
	309, 714,
	310, 714,
	311, 714,
	313, 714,
	314, 714,
	315, 714,
	318, 714,
	319, 714,
	320, 714,
	321, 714,
	323, 714,
	324, 714,
	325, 714,
	326, 714,
	329, 714,
	330, 714,
	331, 714,
	332, 714,
	334, 714,
	336, 714,
	337, 714,
	338, 714,
	339, 714,
	340, 714,
	341, 714,
	344, 714,
	349, 714,
	350, 714,
	351, 714,
	352, 714,
	353, 714,
	-2, 0,
	-1, 125,
	1, 677,
	216, 677,
	261, 677,
	377, 677,
	379, 677,
	381, 677,
	382, 677,
	-2, 686,
	-1, 130,
	1, 611,
	169, 611,
	239, 611,
	243, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 132,
	1, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 133,
	1, 611,
	381, 611,
	382, 611,
	-2, 0,
	-1, 134,
	1, 615,
	381, 615,
	382, 615,
	-2, 0,
	-1, 141,
	4, 720,
	5, 720,
	6, 720,
	7, 720,
	8, 720,
	9, 720,
	20, 720,
	21, 720,
	23, 720,
	28, 720,
	29, 720,
	33, 720,
	34, 720,
	35, 720,
	36, 720,
	37, 720,
	38, 720,
	39, 720,
	40, 720,
	41, 720,
	42, 720,
	44, 720,
	45, 720,
	46, 720,
	47, 720,
	48, 720,
	49, 720,
	50, 720,
	51, 720,
	52, 720,
	53, 720,
	55, 720,
	56, 720,
	58, 720,
	60, 720,
	61, 720,
	62, 720,
	64, 720,
	65, 720,
	66, 720,
	67, 720,
	69, 720,
	71, 720,
	72, 720,
	74, 720,
	75, 720,
	76, 720,
	77, 720,
	79, 720,
	80, 720,
	81, 720,
	83, 720,
	84, 720,
	85, 720,
	86, 720,
	87, 720,
	88, 720,
	89, 720,
	90, 720,
	91, 720,
	92, 720,
	94, 720,
	96, 720,
	98, 720,
	101, 720,
	102, 720,
	104, 720,
	108, 720,
	109, 720,
	110, 720,
	111, 720,
	112, 720,
	113, 720,
	114, 720,
	115, 720,
	116, 720,
	122, 720,
	123, 720,
	124, 720,
	125, 720,
	126, 720,
	128, 720,
	130, 720,
	133, 720,
	135, 720,
	136, 720,
	138, 720,
	141, 720,
	142, 720,
	145, 720,
	146, 720,
	147, 720,
	148, 720,
	149, 720,
	151, 720,
	152, 720,
	154, 720,
	156, 720,
	157, 720,
	158, 720,
	159, 720,
	160, 720,
	161, 720,
	162, 720,
	163, 720,
	164, 720,
	166, 720,
	168, 720,
	169, 720,
	170, 720,
	171, 720,
	172, 720,
	173, 720,
	174, 720,
	175, 720,
	176, 720,
	177, 720,
	179, 720,
	180, 720,
	182, 720,
	183, 720,
	184, 720,
	185, 720,
	186, 720,
	188, 720,
	189, 720,
	192, 720,
	194, 720,
	195, 720,
	196, 720,
	197, 720,
	198, 720,
	199, 720,
	200, 720,
	201, 720,
	202, 720,
	203, 720,
	204, 720,
	205, 720,
	206, 720,
	208, 720,
	209, 720,
	210, 720,
	211, 720,
	212, 720,
	213, 720,
	215, 720,
	218, 720,
	221, 720,
	222, 720,
	223, 720,
	224, 720,
	225, 720,
	226, 720,
	227, 720,
	228, 720,
	229, 720,
	230, 720,
	231, 720,
	233, 720,
	234, 720,
	235, 720,
	236, 720,
	237, 720,
	239, 720,
	240, 720,
	241, 720,
	242, 720,
	243, 720,
	244, 720,
	245, 720,
	246, 720,
	248, 720,
	249, 720,
	250, 720,
	251, 720,
	252, 720,
	254, 720,
	255, 720,
	256, 720,
	257, 720,
	258, 720,
	259, 720,
	260, 720,
	262, 720,
	263, 720,
	264, 720,
	265, 720,
	266, 720,
	267, 720,
	269, 720,
	270, 720,
	271, 720,
	272, 720,
	273, 720,
	275, 720,
	276, 720,
	277, 720,
	278, 720,
	279, 720,
	280, 720,
	281, 720,
	282, 720,
	283, 720,
	284, 720,
	285, 720,
	286, 720,
	287, 720,
	288, 720,
	289, 720,
	291, 720,
	292, 720,
	293, 720,
	294, 720,
	295, 720,
	296, 720,
	297, 720,
	298, 720,
	299, 720,
	300, 720,
	302, 720,
	304, 720,
	305, 720,
	306, 720,
	307, 720,
	308, 720,
	309, 720,
	310, 720,
	311, 720,
	313, 720,
	314, 720,
	315, 720,
	318, 720,
	319, 720,
	320, 720,
	321, 720,
	322, 720,
	323, 720,
	324, 720,
	325, 720,
	326, 720,
	329, 720,
	330, 720,
	331, 720,
	332, 720,
	333, 720,
	334, 720,
	336, 720,
	337, 720,
	338, 720,
	339, 720,
	340, 720,
	341, 720,
	344, 720,
	349, 720,
	350, 720,
	351, 720,
	352, 720,
	353, 720,
	354, 720,
	364, 720,
	369, 720,
	370, 720,
	371, 720,
	378, 720,
	384, 720,
	-2, 0,
	-1, 144,
	1, 54,
	382, 54,
	-2, 712,
	-1, 513,
	132, 1334,
	316, 1334,
	359, 1334,
	380, 1334,
	-2, 0,
	-1, 514,
	132, 1281,
	316, 1281,
	359, 1281,
	380, 1281,
	-2, 0,
	-1, 516,
	132, 1393,
	316, 1393,
	359, 1393,
	380, 1393,
	-2, 0,
	-1, 518,
	132, 1416,
	316, 1416,
	359, 1416,
	380, 1416,
	-2, 0,
	-1, 525,
	132, 1339,
	316, 1339,
	359, 1339,
	380, 1339,
	-2, 330,
	-1, 551,
	1, 408,
	377, 408,
	379, 408,
	381, 408,
	382, 408,
	-2, 0,
	-1, 552,
	1, 460,
	129, 460,
	377, 460,
	379, 460,
	381, 460,
	382, 460,
	-2, 0,
	-1, 558,
	1, 422,
	377, 422,
	379, 422,
	381, 422,
	382, 422,
	-2, 0,
	-1, 560,
	1, 426,
	377, 426,
	379, 426,
	381, 426,
	382, 426,
	-2, 0,
	-1, 563,
	1, 434,
	377, 434,
	379, 434,
	381, 434,
	382, 434,
	-2, 0,
	-1, 564,
	1, 439,
	377, 439,
	379, 439,
	381, 439,
	382, 439,
	-2, 0,
	-1, 567,
	1, 449,
	377, 449,
	379, 449,
	381, 449,
	382, 449,
	-2, 0,
	-1, 588,
	117, 722,
	129, 722,
	187, 722,
	214, 722,
	-2, 681,
	-1, 591,
	117, 721,
	129, 721,
	187, 721,
	214, 721,
	-2, 678,
	-1, 648,
	378, 1259,
	-2, 1252,
	-1, 649,
	378, 1260,
	-2, 1253,
	-1, 655,
	5, 906,
	378, 906,
	-2, 1468,
	-1, 680,
	5, 865,
	-2, 1437,
	-1, 681,
	5, 900,
	378, 900,
	-2, 1439,
	-1, 682,
	5, 875,
	-2, 1440,
	-1, 683,
	5, 874,
	-2, 1441,
	-1, 684,
	5, 900,
	378, 900,
	-2, 1444,
	-1, 685,
	5, 900,
	378, 900,
	-2, 1445,
	-1, 686,
	5, 901,
	-2, 1448,
	-1, 687,
	5, 857,
	-2, 1449,
	-1, 688,
	5, 857,
	-2, 1450,
	-1, 689,
	5, 882,
	-2, 1454,
	-1, 690,
	5, 867,
	-2, 1455,
	-1, 691,
	5, 868,
	-2, 1456,
	-1, 692,
	5, 858,
	-2, 1462,
	-1, 693,
	5, 859,
	-2, 1463,
	-1, 694,
	5, 860,
	-2, 1464,
	-1, 695,
	5, 861,
	-2, 1465,
	-1, 696,
	5, 862,
	-2, 1466,
	-1, 697,
	5, 863,
	-2, 1467,
	-1, 698,
	5, 857,
	-2, 1474,
	-1, 699,
	5, 866,
	-2, 1479,
	-1, 700,
	5, 864,
	-2, 1482,
	-1, 701,
	5, 898,
	378, 898,
	-2, 1484,
	-1, 702,
	5, 902,
	-2, 1487,
	-1, 703,
	5, 904,
	-2, 1488,
	-1, 704,
	5, 897,
	378, 897,
	-2, 1493,
	-1, 889,
	230, 710,
	-2, 555,
	-1, 902,
	216, 1256,
	-2, 0,
	-1, 937,
	1, 217,
	377, 217,
	379, 217,
	381, 217,
	382, 217,
	-2, 685,
	-1, 940,
	4, 1492,
	10, 1492,
	11, 1492,
	13, 1492,
	14, 1492,
	15, 1492,
	16, 1492,
	17, 1492,
	18, 1492,
	20, 1492,
	21, 1492,
	23, 1492,
	26, 1492,
	28, 1492,
	30, 1492,
	33, 1492,
	34, 1492,
	35, 1492,
	36, 1492,
	37, 1492,
	38, 1492,
	39, 1492,
	40, 1492,
	41, 1492,
	42, 1492,
	44, 1492,
	45, 1492,
	46, 1492,
	47, 1492,
	48, 1492,
	51, 1492,
	52, 1492,
	53, 1492,
	55, 1492,
	56, 1492,
	57, 1492,
	60, 1492,
	61, 1492,
	62, 1492,
	63, 1492,
	64, 1492,
	65, 1492,
	66, 1492,
	67, 1492,
	69, 1492,
	70, 1492,
	71, 1492,
	72, 1492,
	74, 1492,
	75, 1492,
	76, 1492,
	77, 1492,
	85, 1492,
	86, 1492,
	87, 1492,
	88, 1492,
	89, 1492,
	90, 1492,
	91, 1492,
	92, 1492,
	94, 1492,
	96, 1492,
	98, 1492,
	101, 1492,
	102, 1492,
	104, 1492,
	108, 1492,
	109, 1492,
	110, 1492,
	111, 1492,
	112, 1492,
	113, 1492,
	114, 1492,
	118, 1492,
	119, 1492,
	120, 1492,
	121, 1492,
	122, 1492,
	123, 1492,
	124, 1492,
	125, 1492,
	126, 1492,
	127, 1492,
	128, 1492,
	130, 1492,
	133, 1492,
	135, 1492,
	136, 1492,
	138, 1492,
	141, 1492,
	142, 1492,
	145, 1492,
	146, 1492,
	147, 1492,
	148, 1492,
	149, 1492,
	150, 1492,
	151, 1492,
	152, 1492,
	154, 1492,
	156, 1492,
	157, 1492,
	158, 1492,
	159, 1492,
	160, 1492,
	161, 1492,
	162, 1492,
	163, 1492,
	164, 1492,
	166, 1492,
	168, 1492,
	169, 1492,
	170, 1492,
	171, 1492,
	172, 1492,
	173, 1492,
	174, 1492,
	175, 1492,
	176, 1492,
	177, 1492,
	179, 1492,
	180, 1492,
	182, 1492,
	183, 1492,
	184, 1492,
	185, 1492,
	186, 1492,
	188, 1492,
	189, 1492,
	192, 1492,
	193, 1492,
	194, 1492,
	196, 1492,
	197, 1492,
	198, 1492,
	199, 1492,
	200, 1492,
	201, 1492,
	202, 1492,
	203, 1492,
	204, 1492,
	205, 1492,
	209, 1492,
	210, 1492,
	211, 1492,
	212, 1492,
	213, 1492,
	215, 1492,
	218, 1492,
	219, 1492,
	221, 1492,
	222, 1492,
	224, 1492,
	226, 1492,
	227, 1492,
	228, 1492,
	229, 1492,
	230, 1492,
	231, 1492,
	233, 1492,
	234, 1492,
	235, 1492,
	236, 1492,
	237, 1492,
	239, 1492,
	240, 1492,
	241, 1492,
	242, 1492,
	243, 1492,
	244, 1492,
	245, 1492,
	246, 1492,
	248, 1492,
	249, 1492,
	250, 1492,
	251, 1492,
	252, 1492,
	253, 1492,
	254, 1492,
	255, 1492,
	256, 1492,
	257, 1492,
	258, 1492,
	259, 1492,
	260, 1492,
	262, 1492,
	263, 1492,
	264, 1492,
	265, 1492,
	266, 1492,
	267, 1492,
	268, 1492,
	269, 1492,
	270, 1492,
	271, 1492,
	272, 1492,
	273, 1492,
	275, 1492,
	276, 1492,
	277, 1492,
	278, 1492,
	279, 1492,
	281, 1492,
	282, 1492,
	283, 1492,
	284, 1492,
	285, 1492,
	286, 1492,
	287, 1492,
	288, 1492,
	289, 1492,
	291, 1492,
	292, 1492,
	293, 1492,
	294, 1492,
	295, 1492,
	296, 1492,
	297, 1492,
	298, 1492,
	299, 1492,
	300, 1492,
	302, 1492,
	304, 1492,
	305, 1492,
	306, 1492,
	307, 1492,
	308, 1492,
	309, 1492,
	310, 1492,
	311, 1492,
	313, 1492,
	314, 1492,
	315, 1492,
	318, 1492,
	319, 1492,
	320, 1492,
	321, 1492,
	323, 1492,
	324, 1492,
	325, 1492,
	326, 1492,
	329, 1492,
	330, 1492,
	331, 1492,
	332, 1492,
	334, 1492,
	336, 1492,
	337, 1492,
	338, 1492,
	339, 1492,
	340, 1492,
	341, 1492,
	344, 1492,
	349, 1492,
	350, 1492,
	351, 1492,
	352, 1492,
	353, 1492,
	354, 1492,
	355, 1492,
	357, 1492,
	358, 1492,
	359, 1492,
	360, 1492,
	361, 1492,
	362, 1492,
	363, 1492,
	364, 1492,
	366, 1492,
	367, 1492,
	368, 1492,
	369, 1492,
	370, 1492,
	371, 1492,
	372, 1492,
	373, 1492,
	374, 1492,
	376, 1492,
	379, 1492,
	380, 1492,
	383, 1492,
	384, 1492,
	-2, 0,
	-1, 954,
	132, 1393,
	316, 1393,
	359, 1393,
	380, 1393,
	-2, 0,
	-1, 971,
	132, 1416,
	316, 1416,
	359, 1416,
	380, 1416,
	-2, 0,
	-1, 972,
	169, 623,
	239, 623,
	243, 623,
	-2, 318,
	-1, 1040,
	117, 721,
	129, 721,
	187, 721,
	214, 721,
	-2, 682,
	-1, 1121,
	107, 687,
	117, 687,
	129, 687,
	165, 687,
	187, 687,
	214, 687,
	220, 687,
	327, 687,
	-2, 1035,
	-1, 1131,
	378, 1236,
	-2, 1224,
	-1, 1149,
	379, 1148,
	-2, 0,
	-1, 1173,
	169, 623,
	239, 623,
	243, 623,
	-2, 618,
	-1, 1201,
	379, 1148,
	-2, 0,
	-1, 1205,
	107, 687,
	117, 687,
	129, 687,
	165, 687,
	187, 687,
	214, 687,
	220, 687,
	327, 687,
	-2, 788,
	-1, 1348,
	169, 623,
	239, 623,
	243, 623,
	-2, 320,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 941,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 942,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 943,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 944,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 945,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 946,
	-1, 1462,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 947,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 948,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 957,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 958,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	-2, 959,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 964,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 966,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 970,
	-1, 1486,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 971,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 972,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 973,
	-1, 1557,
	132, 1159,
	378, 1259,
	-2, 1252,
	-1, 1558,
	132, 1160,
	-2, 1433,
	-1, 1559,
	132, 1161,
	-2, 1338,
	-1, 1560,
	132, 1162,
	-2, 1299,
	-1, 1561,
	132, 1163,
	-2, 1316,
	-1, 1562,
	132, 1164,
	-2, 1337,
	-1, 1563,
	132, 1165,
	-2, 1390,
	-1, 1639,
	1, 789,
	74, 789,
	107, 789,
	117, 789,
	129, 789,
	133, 789,
	137, 789,
	139, 789,
	156, 789,
	165, 789,
	172, 789,
	183, 789,
	187, 789,
	201, 789,
	214, 789,
	216, 789,
	220, 789,
	261, 789,
	263, 789,
	327, 789,
	335, 789,
	346, 789,
	347, 789,
	356, 789,
	377, 789,
	379, 789,
	381, 789,
	382, 789,
	383, 789,
	-2, 788,
	-1, 1788,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 965,
	-1, 1789,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 967,
	-1, 1794,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 968,
	-1, 1812,
	225, 1119,
	-2, 1121,
	-1, 1985,
	230, 710,
	-2, 555,
	-1, 2044,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 969,
	-1, 2049,
	168, 0,
	-2, 985,
	-1, 2058,
	225, 1120,
	-2, 1122,
	-1, 2100,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1012,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1013,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1014,
	-1, 2106,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1018,
	-1, 2107,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1019,
	-1, 2108,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1020,
	-1, 2241,
	168, 0,
	-2, 986,
	-1, 2244,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 989,
	-1, 2245,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 991,
	-1, 2365,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 990,
	-1, 2366,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 992,
	-1, 2373,
	168, 0,
	-2, 1021,
	-1, 2450,
	168, 0,
	-2, 1022,
	-1, 2531,
	36, 0,
	149, 0,
	186, 0,
	285, 0,
	354, 0,
	364, 0,
	-2, 1436,
	-1, 2617,
	378, 1504,
	-2, 495,
}

const sqlPrivate = 57344

const sqlLast = 44121

var sqlAct = [...]int{

	649, 2614, 2599, 2530, 2336, 2580, 2335, 1714, 2193, 1514,
	2539, 2077, 2529, 2455, 1245, 2346, 2204, 608, 2613, 2399,
	1782, 1342, 892, 2309, 1685, 2295, 2226, 69, 1253, 642,
	2597, 2228, 753, 1706, 1634, 639, 2503, 1991, 2160, 1989,
	592, 1689, 183, 1343, 1703, 883, 2540, 183, 2541, 2379,
	1288, 183, 707, 2159, 1684, 1208, 1926, 1203, 1199, 2275,
	183, 1997, 1715, 1878, 706, 183, 183, 2220, 1182, 183,
	1688, 1905, 183, 469, 26, 1247, 1652, 2023, 654, 1248,
	183, 709, 1643, 1635, 1913, 1512, 2130, 625, 600, 124,
	1430, 453, 1127, 1537, 1678, 1435, 1778, 1762, 1513, 1877,
	1823, 1373, 975, 1241, 1045, 647, 1213, 646, 1211, 1289,
	1521, 1183, 619, 1500, 450, 780, 1369, 1497, 524, 759,
	927, 1413, 974, 1411, 1159, 1163, 1531, 1686, 894, 938,
	924, 1692, 762, 1621, 1708, 1608, 183, 183, 1190, 741,
	618, 1553, 917, 1116, 183, 504, 174, 1414, 1046, 124,
	1266, 1372, 1173, 1412, 641, 597, 482, 517, 125, 914,
	1260, 179, 1172, 739, 2310, 1586, 545, 1050, 1811, 126,
	183, 183, 183, 183, 782, 1268, 1707, 2144, 183, 183,
	2145, 596, 2337, 2630, 1268, 1268, 2629, 2623, 2622, 2337,
	2623, 2576, 2623, 2575, 2574, 1236, 2556, 1236, 1236, 756,
	2308, 2551, 2550, 871, 2547, 1729, 1729, 2527, 1236, 596,
	41, 1745, 496, 2006, 2635, 2526, 2498, 2493, 26, 1745,
	1738, 2360, 2489, 44, 2481, 2452, 1236, 591, 2308, 1738,
	2430, 606, 2427, 124, 2308, 2425, 1236, 2410, 2409, 2308,
	2387, 1236, 2308, 2384, 1236, 2621, 2367, 1236, 2331, 1736,
	1738, 2329, 1729, 2307, 2288, 1729, 1729, 2308, 1236, 2243,
	40, 1200, 2219, 1738, 2214, 2140, 1683, 2499, 1683, 2141,
	1679, 41, 130, 2053, 2042, 2017, 1977, 1729, 2007, 1978,
	1236, 1902, 1895, 589, 44, 1236, 1896, 477, 40, 767,
	771, 1679, 1893, 777, 588, 601, 1729, 2133, 132, 41,
	743, 1892, 1891, 1815, 1610, 1729, 1729, 1749, 46, 1816,
	49, 1729, 44, 1737, 1232, 1728, 1682, 1738, 1745, 1729,
	1683, 62, 1615, 1281, 184, 1745, 1614, 1282, 141, 2360,
	705, 50, 1061, 1062, 2133, 52, 2631, 1609, 475, 58,
	2034, 1641, 133, 2610, 1729, 745, 59, 746, 118, 60,
	2113, 2055, 1534, 1236, 1978, 1064, 1781, 143, 1760, 1351,
	1177, 1516, 869, 521, 956, 144, 953, 58, 1061, 1062,
	875, 61, 1822, 952, 59, 951, 477, 60, 2311, 1063,
	950, 949, 62, 948, 1711, 1370, 1269, 40, 141, 947,
	946, 1064, 945, 944, 142, 1269, 1269, 943, 41, 942,
	941, 747, 135, 744, 1535, 587, 586, 63, 585, 136,
	62, 44, 584, 583, 599, 1063, 577, 143, 183, 897,
	183, 576, 183, 575, 543, 183, 542, 541, 540, 539,
	538, 183, 127, 128, 65, 1550, 66, 475, 537, 536,
	535, 534, 1061, 1062, 183, 183, 183, 183, 183, 1069,
	141, 533, 532, 897, 142, 531, 530, 476, 1536, 1533,
	99, 529, 889, 528, 527, 1064, 58, 512, 63, 511,
	510, 509, 931, 59, 64, 477, 60, 183, 508, 143,
	597, 1848, 1849, 441, 440, 1069, 439, 708, 438, 1063,
	437, 183, 127, 71, 128, 65, 63, 66, 783, 67,
	415, 134, 408, 407, 784, 167, 68, 183, 1921, 62,
	1274, 141, 166, 165, 164, 1084, 142, 183, 79, 1267,
	1404, 99, 128, 65, 135, 66, 163, 1848, 1849, 2006,
	131, 136, 162, 161, 160, 1538, 887, 159, 900, 141,
	143, 158, 157, 1764, 156, 155, 476, 154, 897, 99,
	916, 1084, 153, 1548, 127, 1609, 152, 1546, 151, 1069,
	103, 150, 920, 920, 149, 141, 148, 147, 143, 129,
	146, 145, 1204, 1376, 987, 2603, 1544, 142, 882, 183,
	2601, 939, 2546, 1197, 2598, 135, 2528, 921, 1848, 1849,
	1085, 990, 136, 2513, 143, 63, 1057, 2508, 1854, 40,
	2447, 2428, 2274, 2273, 2353, 142, 2269, 2268, 2261, 957,
	41, 2260, 2259, 135, 1532, 127, 1285, 2255, 4, 2254,
	136, 128, 65, 44, 66, 1084, 1085, 985, 2253, 1041,
	2252, 142, 2246, 1123, 2225, 2127, 2122, 2121, 141, 135,
	1743, 1980, 1391, 127, 1854, 476, 136, 2120, 99, 475,
	2063, 597, 1976, 1933, 1929, 1848, 1849, 1900, 1897, 1885,
	1876, 1847, 1844, 1843, 1841, 1828, 1827, 143, 1812, 1710,
	1508, 972, 1639, 1057, 969, 1202, 1135, 754, 58, 1128,
	1056, 1119, 1201, 2624, 2608, 59, 141, 477, 60, 1040,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 880, 1036, 2021,
	1085, 875, 2588, 2587, 142, 1854, 1252, 2079, 2518, 2517,
	1864, 2516, 135, 988, 2484, 143, 2476, 2475, 2466, 136,
	2464, 62, 2442, 2441, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 2620, 40, 2440, 1848, 1849, 2396, 183,
	1042, 183, 127, 898, 2375, 41, 1043, 1371, 1777, 899,
	2361, 2340, 142, 2328, 2314, 2266, 1776, 2202, 44, 589,
	135, 2199, 1053, 1054, 183, 183, 2352, 136, 2198, 1058,
	588, 1864, 1854, 1188, 2196, 2168, 2167, 898, 2148, 1181,
	2136, 2048, 1509, 899, 475, 1865, 1966, 1960, 1946, 1945,
	127, 597, 1931, 1901, 1875, 1837, 1836, 1833, 1808, 1131,
	1803, 1065, 1066, 1067, 1068, 1070, 1071, 63, 1502, 1161,
	1162, 2458, 1549, 58, 1165, 1164, 1061, 1062, 1186, 1167,
	59, 1626, 477, 60, 1168, 1598, 1542, 1244, 755, 1180,
	1171, 1157, 1156, 128, 65, 1155, 66, 1154, 1153, 1064,
	1850, 1851, 1852, 1853, 1855, 1856, 1865, 124, 1152, 2359,
	141, 1151, 1150, 1854, 1149, 1148, 62, 476, 1147, 1146,
	99, 1145, 1144, 1063, 1143, 1142, 1946, 1141, 1140, 897,
	183, 1139, 898, 1198, 1132, 1120, 782, 1119, 899, 143,
	1919, 968, 183, 960, 1176, 1858, 1850, 1851, 1852, 1853,
	1855, 1856, 1174, 935, 1740, 2248, 1206, 2224, 2143, 2139,
	1814, 1627, 1128, 183, 1178, 2019, 1848, 1849, 1117, 183,
	1202, 183, 1234, 183, 1748, 1251, 142, 183, 1992, 1864,
	2363, 1286, 2362, 984, 135, 1221, 2356, 2146, 1243, 2008,
	1547, 136, 1169, 1679, 1545, 1204, 1039, 1170, 1034, 1969,
	1963, 1959, 63, 881, 1899, 1279, 1898, 1850, 1851, 1852,
	1853, 1855, 1856, 1543, 127, 183, 183, 1747, 1787, 1408,
	981, 1137, 897, 2024, 183, 1249, 2380, 183, 128, 65,
	1707, 66, 2080, 1522, 1357, 1160, 1819, 2606, 1346, 2605,
	1534, 2002, 1028, 1257, 1214, 141, 1215, 2155, 782, 2511,
	1295, 1237, 476, 183, 1865, 99, 1733, 418, 183, 2488,
	2572, 2031, 2571, 183, 183, 2322, 183, 1415, 183, 427,
	183, 1366, 183, 1330, 143, 734, 1852, 1853, 1855, 1856,
	1061, 1062, 1029, 183, 1750, 1329, 1020, 2334, 916, 183,
	183, 1235, 1535, 2421, 2420, 2418, 1645, 736, 897, 1294,
	732, 730, 1332, 1064, 2417, 2179, 727, 2187, 1214, 1134,
	1215, 142, 651, 755, 2184, 2152, 2151, 1061, 1062, 135,
	183, 1832, 1831, 1830, 782, 1216, 136, 1063, 1259, 2020,
	428, 1829, 1271, 1262, 1800, 1273, 1653, 1790, 1732, 1276,
	1064, 1405, 1674, 1670, 1222, 1667, 1536, 1533, 1484, 127,
	1798, 1295, 1295, 1857, 1858, 1850, 1851, 1852, 1853, 1855,
	1856, 1175, 1283, 1377, 1063, 1219, 124, 982, 1358, 868,
	1344, 1378, 969, 1284, 1330, 1330, 1602, 1601, 1445, 2618,
	1402, 612, 2487, 1220, 1348, 416, 1329, 1329, 1704, 1216,
	1645, 1037, 1392, 595, 1123, 1374, 1362, 1069, 579, 1644,
	1294, 1294, 1524, 1332, 1332, 442, 491, 597, 2191, 1385,
	983, 1417, 597, 1656, 2192, 1556, 1556, 1569, 1401, 1230,
	1381, 1589, 1499, 1538, 168, 1593, 1594, 1596, 582, 1973,
	1239, 1436, 1443, 1795, 1069, 1229, 183, 1243, 183, 1444,
	1071, 183, 2036, 1796, 1499, 1202, 1403, 1801, 1027, 1409,
	581, 594, 183, 898, 1416, 1410, 1227, 2401, 2524, 899,
	783, 782, 1263, 582, 183, 1607, 784, 1060, 183, 589,
	421, 183, 589, 589, 1228, 183, 1061, 1062, 1522, 183,
	1426, 1519, 993, 1427, 1428, 183, 1506, 1517, 1538, 421,
	446, 1504, 183, 782, 2571, 597, 967, 183, 1214, 1064,
	1215, 1741, 1532, 430, 429, 183, 596, 1618, 1581, 171,
	2563, 1014, 1999, 183, 2543, 1507, 1646, 1628, 2073, 1510,
	1655, 2170, 1968, 1063, 183, 2030, 183, 1038, 183, 1083,
	1856, 183, 1962, 183, 1223, 183, 183, 2590, 183, 183,
	2583, 1957, 483, 897, 2303, 2495, 898, 183, 1564, 1033,
	1015, 2477, 899, 2177, 1664, 1268, 445, 1797, 1657, 1659,
	1632, 1217, 1672, 1727, 1799, 488, 1225, 1571, 1400, 1158,
	2496, 484, 783, 2469, 2000, 172, 1629, 1605, 784, 1216,
	2032, 1604, 1613, 2304, 1086, 1087, 1088, 1089, 1623, 1624,
	1345, 1619, 728, 1069, 1709, 1538, 1709, 2035, 1662, 1698,
	1206, 2600, 1019, 485, 1668, 2478, 1649, 2562, 1676, 2544,
	1654, 738, 1675, 593, 737, 1024, 2598, 728, 729, 1999,
	570, 1382, 898, 728, 2371, 1217, 487, 1386, 899, 1387,
	124, 1388, 1114, 1389, 2337, 1390, 124, 782, 605, 1735,
	409, 1067, 1068, 1070, 1071, 183, 1721, 1642, 783, 920,
	1481, 920, 1396, 1398, 784, 1724, 1730, 1713, 2037, 1084,
	2424, 183, 183, 183, 173, 183, 1725, 2545, 1835, 1638,
	1622, 939, 1731, 1722, 1734, 1723, 1065, 1066, 1067, 1068,
	1070, 1071, 1742, 1434, 2402, 1025, 417, 1779, 1780, 1361,
	1360, 1792, 1370, 1367, 183, 2581, 2299, 1744, 2300, 580,
	2171, 1380, 1349, 571, 596, 417, 444, 490, 1331, 1226,
	1165, 422, 1168, 1498, 2561, 1753, 418, 2070, 2235, 1090,
	994, 2542, 2570, 1162, 1161, 169, 419, 1755, 2302, 2568,
	422, 1212, 978, 1751, 1085, 418, 447, 2305, 1280, 1001,
	1026, 2303, 124, 486, 2296, 419, 443, 1059, 2591, 1756,
	2345, 2582, 1761, 1495, 1505, 2294, 1701, 963, 955, 995,
	2298, 1754, 992, 1479, 1482, 170, 1269, 1049, 1765, 1493,
	2264, 2071, 1806, 2584, 1972, 2412, 966, 2411, 1364, 1809,
	2304, 2109, 1767, 2596, 1769, 783, 2394, 1048, 2321, 2461,
	597, 784, 1773, 1772, 436, 2320, 1825, 1826, 1775, 489,
	1478, 973, 979, 2297, 2318, 2154, 980, 1942, 410, 1331,
	1331, 1938, 1702, 1258, 431, 1217, 572, 783, 2301, 1250,
	2069, 1246, 2504, 784, 1395, 1821, 1352, 1422, 2609, 603,
	1048, 570, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 1048, 1044, 885, 2205, 2347, 1874, 2395, 1538, 605,
	1927, 1336, 1489, 1589, 1589, 1589, 1793, 1047, 1887, 1791,
	1490, 176, 1491, 884, 597, 1916, 1496, 898, 610, 978,
	1948, 183, 782, 899, 1365, 1617, 1807, 183, 183, 411,
	1947, 183, 604, 2265, 1049, 1785, 183, 1616, 2110, 183,
	1189, 1818, 1910, 2299, 2111, 2300, 573, 183, 2595, 1480,
	1047, 1356, 1903, 183, 183, 183, 1423, 1909, 2319, 183,
	499, 1047, 183, 978, 571, 594, 493, 2317, 183, 183,
	183, 183, 183, 1923, 1928, 2302, 1907, 1049, 183, 574,
	913, 183, 1911, 1912, 2305, 183, 1917, 911, 902, 979,
	1295, 2194, 3, 980, 183, 1922, 2338, 2392, 1971, 1193,
	1939, 1193, 1354, 1002, 183, 1023, 183, 1932, 183, 897,
	897, 783, 183, 1330, 2276, 1355, 183, 784, 978, 1918,
	2131, 183, 1196, 183, 1196, 1329, 1492, 1295, 2393, 1541,
	183, 1904, 1979, 1494, 1981, 1012, 726, 1908, 1191, 1294,
	1620, 1189, 1332, 183, 897, 2374, 2263, 1958, 597, 1194,
	1330, 1194, 1984, 1985, 2190, 1965, 897, 183, 1934, 1882,
	1883, 1884, 1329, 474, 34, 2301, 989, 1192, 570, 1879,
	1943, 473, 33, 2047, 873, 432, 1294, 572, 1295, 1332,
	1982, 1956, 1915, 1010, 1986, 2004, 605, 2016, 979, 870,
	1008, 1974, 980, 1842, 874, 1006, 183, 1802, 1746, 2025,
	1193, 1330, 472, 30, 1371, 1368, 1681, 1943, 471, 75,
	1880, 1673, 1666, 1329, 1032, 1031, 961, 433, 470, 74,
	1044, 1995, 1770, 1196, 2001, 1393, 1983, 1294, 498, 1195,
	1332, 1195, 1004, 2009, 492, 1022, 1384, 765, 1018, 1191,
	2015, 1138, 1540, 1295, 2538, 912, 183, 434, 998, 435,
	1194, 571, 910, 909, 2026, 602, 1233, 573, 2018, 2027,
	2028, 2501, 2292, 2029, 2050, 1011, 1330, 2175, 1192, 731,
	733, 2173, 2033, 2153, 1988, 2065, 2066, 2067, 1329, 1295,
	1295, 2038, 2040, 2010, 2011, 1705, 2012, 2013, 1295, 1295,
	574, 1699, 1294, 1697, 1278, 1332, 467, 22, 1277, 876,
	878, 1914, 1330, 1330, 1275, 1272, 2123, 2056, 34, 468,
	23, 1330, 1330, 1009, 1329, 1329, 33, 2054, 1270, 2059,
	1007, 1295, 1231, 1329, 1329, 1005, 1224, 183, 1294, 1294,
	1195, 1332, 1332, 183, 2072, 2074, 2075, 1294, 1294, 1218,
	1332, 1332, 183, 183, 1330, 2083, 783, 30, 2081, 466,
	28, 2115, 784, 75, 2088, 2086, 1329, 2060, 1990, 1436,
	2084, 2435, 1003, 74, 572, 1017, 2149, 2142, 1436, 2089,
	1294, 465, 20, 1332, 463, 19, 464, 18, 997, 1051,
	2183, 958, 2138, 908, 2114, 1783, 2186, 962, 2116, 183,
	2572, 183, 2166, 457, 15, 2358, 750, 2147, 2357, 183,
	124, 2119, 897, 2129, 1375, 2181, 2134, 2135, 2200, 2181,
	2132, 458, 16, 2221, 610, 2181, 751, 183, 183, 2197,
	456, 14, 2213, 1291, 2207, 1677, 2150, 462, 12, 461,
	47, 2157, 2437, 898, 898, 183, 2218, 1661, 2206, 899,
	899, 22, 455, 48, 573, 183, 782, 183, 183, 2215,
	2178, 1784, 478, 782, 23, 1669, 1052, 2180, 2189, 2195,
	1645, 2185, 2165, 1665, 2164, 1771, 2209, 2188, 898, 1660,
	2210, 2201, 2237, 1907, 899, 460, 7, 574, 2211, 2216,
	898, 459, 6, 2208, 1406, 1407, 899, 2471, 1295, 2217,
	183, 1645, 2311, 752, 28, 2222, 454, 5, 1061, 1062,
	1658, 996, 1109, 1110, 1111, 1112, 1113, 1061, 1062, 2242,
	2449, 1330, 1122, 2174, 2423, 2176, 20, 2277, 1055, 19,
	500, 18, 1130, 1329, 1291, 1291, 1671, 1663, 2500, 501,
	1064, 2343, 1712, 1700, 1696, 1606, 1347, 1294, 15, 1287,
	1332, 2579, 2594, 2386, 183, 1063, 2282, 183, 1331, 480,
	1848, 1849, 1061, 1062, 1063, 2223, 16, 782, 183, 183,
	2262, 2232, 183, 183, 183, 14, 1758, 1757, 2238, 2128,
	2076, 2280, 12, 1758, 47, 2022, 1924, 1894, 1759, 183,
	1603, 1425, 1600, 2287, 183, 1331, 183, 48, 183, 183,
	183, 1599, 2286, 1530, 1125, 183, 2312, 2250, 183, 2278,
	483, 897, 2068, 2316, 2279, 2291, 1135, 1133, 2281, 183,
	183, 2283, 1030, 2166, 1021, 1016, 1013, 897, 999, 965,
	7, 1350, 2333, 488, 578, 2400, 6, 481, 1383, 484,
	1000, 2315, 1920, 2341, 1625, 2494, 1331, 1184, 1184, 2349,
	2256, 5, 2166, 1834, 610, 2454, 2370, 1539, 2166, 1136,
	51, 2162, 628, 2348, 2293, 2156, 1691, 1690, 785, 1359,
	2339, 485, 650, 2350, 2342, 1555, 2344, 1437, 725, 2364,
	652, 1292, 2284, 653, 1293, 1166, 640, 1290, 936, 1716,
	1572, 1363, 1503, 2165, 487, 2164, 1520, 2355, 1817, 1129,
	620, 632, 631, 1518, 959, 1925, 1998, 2382, 2354, 2351,
	1421, 1331, 2369, 183, 1774, 183, 1295, 782, 183, 1418,
	1994, 2172, 2165, 420, 2164, 1845, 183, 934, 2165, 1578,
	2164, 1570, 782, 1566, 1035, 1187, 898, 2376, 1115, 1330,
	1717, 986, 899, 2005, 2408, 1739, 1179, 1331, 1331, 2383,
	2404, 1329, 1429, 2406, 2388, 749, 1331, 1331, 2419, 2385,
	748, 2607, 1353, 1752, 2166, 1294, 183, 2403, 1332, 897,
	1108, 1107, 1295, 183, 735, 2463, 1243, 977, 976, 1941,
	783, 183, 183, 897, 897, 2589, 784, 783, 2470, 1331,
	2181, 2433, 2169, 784, 2510, 1330, 2166, 2436, 140, 137,
	139, 183, 138, 1970, 78, 2432, 183, 1329, 2444, 2438,
	2434, 486, 2443, 183, 2426, 32, 31, 98, 97, 96,
	95, 1294, 94, 93, 1332, 1295, 2445, 2446, 2465, 92,
	91, 2448, 2390, 90, 2165, 2459, 2164, 2429, 183, 183,
	2457, 2460, 2422, 89, 88, 183, 2451, 2405, 1330, 87,
	86, 2467, 2414, 897, 85, 84, 83, 2482, 183, 82,
	1329, 81, 897, 897, 80, 2480, 2165, 489, 2164, 2468,
	2483, 2486, 522, 519, 1294, 2485, 77, 1332, 1188, 2497,
	2474, 610, 610, 2491, 2492, 183, 76, 183, 597, 29,
	183, 783, 782, 25, 2415, 2416, 102, 784, 24, 73,
	72, 27, 17, 1061, 1062, 2514, 2515, 11, 2507, 2519,
	21, 2506, 2521, 56, 57, 55, 54, 53, 13, 123,
	183, 2520, 2523, 122, 121, 120, 1064, 119, 10, 2535,
	9, 101, 2537, 2536, 45, 898, 8, 183, 183, 183,
	2166, 899, 43, 2525, 2548, 183, 1419, 42, 1424, 2555,
	1063, 898, 2557, 100, 1431, 2560, 1331, 899, 2522, 183,
	114, 2552, 2553, 2554, 1446, 1447, 1448, 1449, 1450, 1451,
	1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461,
	1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470, 1471,
	1472, 1473, 1474, 1475, 1476, 1477, 2577, 1483, 2585, 1485,
	1486, 1487, 1488, 2593, 2586, 2573, 2592, 2512, 2569, 2567,
	2165, 2578, 2164, 111, 113, 110, 1511, 112, 634, 782,
	1069, 782, 116, 1122, 2558, 2559, 115, 108, 106, 107,
	109, 105, 2611, 104, 2612, 117, 39, 38, 37, 1572,
	1572, 783, 1551, 1552, 36, 2627, 1568, 784, 1580, 1582,
	1587, 1590, 1591, 1592, 2634, 2632, 783, 2633, 2636, 2625,
	180, 2619, 784, 2628, 35, 413, 2, 1, 0, 423,
	0, 0, 2626, 0, 0, 0, 0, 0, 448, 0,
	0, 0, 0, 494, 180, 479, 1084, 502, 0, 0,
	507, 0, 0, 898, 0, 0, 0, 0, 526, 899,
	0, 0, 0, 0, 0, 480, 0, 898, 898, 0,
	0, 0, 0, 899, 899, 1572, 1572, 1572, 0, 0,
	0, 0, 0, 1291, 0, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 2602, 0, 2604, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 742, 742, 483, 0, 0, 0,
	1291, 1085, 413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 412, 0, 1331, 0, 0, 898, 0, 488,
	0, 0, 0, 899, 0, 484, 898, 898, 413, 413,
	775, 413, 899, 899, 0, 0, 180, 872, 0, 451,
	0, 1848, 1849, 0, 0, 0, 0, 0, 0, 0,
	0, 1291, 0, 0, 0, 0, 783, 485, 0, 0,
	40, 0, 784, 0, 0, 1804, 1805, 0, 0, 0,
	1331, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	487, 0, 0, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 1848, 1849, 1863, 1866, 1867, 1868, 0, 0,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 760,
	475, 0, 0, 0, 0, 0, 1291, 0, 0, 0,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 769, 773, 0, 779, 58,
	0, 1871, 1872, 1873, 0, 1863, 59, 0, 477, 60,
	1848, 1849, 1291, 1291, 0, 0, 0, 0, 1854, 0,
	0, 1291, 1291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1572, 1572, 0, 0, 0, 0, 0,
	0, 0, 62, 783, 0, 783, 0, 0, 0, 784,
	0, 784, 0, 0, 1291, 0, 0, 486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1854,
	0, 0, 0, 0, 0, 0, 0, 1788, 1789, 0,
	0, 0, 0, 1794, 1864, 0, 0, 0, 0, 0,
	0, 0, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
	1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
	1572, 0, 1572, 489, 0, 1813, 0, 0, 0, 0,
	0, 1820, 0, 0, 1824, 0, 0, 1854, 63, 0,
	0, 0, 0, 0, 0, 1864, 526, 0, 526, 0,
	903, 1838, 0, 906, 0, 0, 0, 0, 0, 413,
	0, 0, 0, 0, 128, 65, 0, 66, 0, 1865,
	0, 0, 526, 526, 413, 928, 872, 0, 0, 0,
	0, 141, 0, 0, 0, 1122, 0, 0, 476, 0,
	0, 99, 1587, 1587, 1587, 0, 0, 0, 0, 0,
	0, 0, 0, 1864, 0, 526, 0, 0, 0, 0,
	143, 0, 0, 0, 0, 0, 0, 0, 1184, 526,
	1865, 0, 0, 610, 0, 0, 0, 0, 0, 2045,
	2046, 1291, 0, 1061, 1062, 964, 0, 0, 0, 1101,
	1102, 1103, 0, 0, 0, 526, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 135, 1064, 0, 0, 1105,
	0, 0, 136, 0, 0, 0, 773, 1859, 1857, 1858,
	1850, 1851, 1852, 1853, 1855, 1856, 0, 0, 1865, 0,
	1063, 779, 0, 0, 0, 452, 1083, 0, 2090, 2091,
	2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100, 2101,
	2102, 2103, 2104, 2105, 2106, 2107, 2108, 413, 2112, 1860,
	1861, 1862, 0, 0, 0, 0, 1996, 0, 1859, 1857,
	1858, 1850, 1851, 1852, 1853, 1855, 1856, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2014, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 610, 610, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 610,
	0, 0, 1098, 1106, 0, 0, 1859, 1857, 1858, 1850,
	1851, 1852, 1853, 1855, 1856, 2039, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 2043, 0, 0, 2044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 2049, 0, 0, 773, 0, 1084, 0, 1848, 1849,
	2057, 1866, 1867, 1868, 0, 0, 0, 0, 2061, 0,
	0, 2014, 0, 0, 2240, 0, 0, 0, 0, 0,
	0, 629, 70, 0, 0, 0, 0, 0, 0, 1291,
	0, 2085, 0, 0, 0, 2087, 0, 1848, 1849, 0,
	1866, 1867, 1868, 0, 0, 0, 0, 507, 0, 742,
	0, 1863, 0, 2239, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2117, 2118,
	0, 1085, 413, 413, 0, 0, 0, 2124, 2125, 2126,
	0, 0, 70, 0, 0, 1291, 0, 0, 1099, 0,
	1863, 0, 0, 0, 0, 1572, 0, 0, 0, 0,
	0, 0, 0, 0, 2137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2158, 0, 1572, 0, 1291, 0,
	0, 0, 0, 0, 0, 0, 590, 0, 0, 598,
	0, 0, 0, 0, 1854, 0, 1869, 1097, 0, 0,
	0, 0, 0, 0, 0, 761, 70, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 180, 760,
	1209, 1864, 0, 0, 0, 0, 0, 0, 1184, 0,
	413, 0, 0, 0, 0, 1869, 0, 610, 0, 0,
	0, 0, 0, 0, 0, 0, 1572, 0, 0, 0,
	0, 1256, 0, 0, 0, 0, 0, 413, 0, 413,
	1864, 413, 0, 0, 0, 1264, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2241, 0, 0, 0,
	2244, 2245, 0, 0, 2247, 0, 0, 0, 0, 0,
	0, 2249, 0, 2251, 0, 0, 1865, 1848, 1849, 0,
	1866, 1867, 1868, 526, 180, 0, 0, 0, 0, 2258,
	0, 0, 180, 2052, 0, 526, 0, 0, 0, 0,
	0, 2373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1865, 0, 1242, 0, 0,
	0, 526, 2267, 0, 0, 0, 526, 0, 0, 0,
	1863, 180, 526, 0, 526, 0, 526, 0, 526, 0,
	526, 0, 2397, 0, 773, 0, 1261, 0, 1261, 0,
	0, 1394, 0, 0, 0, 0, 0, 526, 526, 0,
	0, 0, 0, 0, 0, 1860, 1861, 1862, 0, 0,
	0, 0, 2313, 0, 1859, 1857, 1858, 1850, 1851, 1852,
	1853, 1855, 1856, 0, 0, 0, 0, 0, 526, 0,
	0, 0, 0, 0, 1854, 0, 0, 1848, 1849, 0,
	1866, 1867, 1868, 0, 1860, 1861, 1862, 0, 0, 0,
	0, 0, 2450, 1859, 1857, 1858, 1850, 1851, 1852, 1853,
	1855, 1856, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1848, 1849, 1869, 1866, 1867, 1868, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2365, 2366,
	1863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1864, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2378,
	0, 0, 0, 0, 0, 2381, 1863, 0, 0, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 507, 0, 742, 0, 0, 872,
	0, 0, 0, 0, 1854, 0, 0, 0, 0, 0,
	413, 0, 0, 0, 0, 0, 0, 0, 0, 2413,
	0, 0, 1637, 0, 0, 1865, 413, 1870, 0, 413,
	0, 0, 0, 1650, 0, 0, 0, 413, 0, 0,
	1854, 0, 0, 413, 0, 1869, 0, 0, 1848, 1849,
	413, 1866, 1867, 1868, 0, 1680, 0, 0, 0, 0,
	0, 0, 0, 1687, 2051, 0, 0, 0, 0, 0,
	1864, 872, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1869, 413, 0, 1720, 0, 526, 0, 0, 526,
	0, 526, 0, 413, 413, 2462, 1726, 872, 0, 0,
	0, 1863, 0, 0, 0, 1650, 1864, 0, 0, 0,
	0, 0, 0, 0, 1860, 1861, 1862, 760, 0, 0,
	0, 0, 0, 1859, 1857, 1858, 1850, 1851, 1852, 1853,
	1855, 1856, 590, 760, 0, 0, 1640, 0, 0, 610,
	0, 0, 0, 0, 773, 1865, 0, 0, 0, 0,
	773, 0, 0, 1118, 0, 1121, 0, 779, 0, 0,
	0, 0, 1126, 0, 0, 1854, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1865, 0, 0, 0, 0, 0, 0, 0, 1718,
	0, 0, 0, 0, 2534, 2534, 0, 0, 0, 0,
	779, 779, 0, 1763, 0, 0, 1869, 0, 0, 0,
	2549, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	413, 413, 0, 413, 0, 0, 0, 0, 0, 0,
	2534, 1864, 0, 0, 1860, 1861, 1862, 0, 0, 0,
	0, 0, 0, 1859, 1857, 1858, 1850, 1851, 1852, 1853,
	1855, 1856, 413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1860, 1861, 1862, 0, 0, 0, 0, 0, 2534, 1859,
	1857, 1858, 1850, 1851, 1852, 1853, 1855, 1856, 0, 0,
	70, 0, 0, 0, 0, 1205, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1865, 2615, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2615,
	0, 0, 2615, 2615, 0, 0, 1766, 779, 1768, 0,
	773, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1105, 1786,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 1860, 1861, 1862, 0, 0,
	0, 0, 0, 0, 1859, 1857, 1858, 1850, 1851, 1852,
	1853, 1855, 1856, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 413,
	0, 0, 0, 0, 0, 413, 413, 0, 0, 413,
	1086, 1087, 1088, 1089, 1637, 0, 0, 1637, 0, 1069,
	0, 0, 0, 0, 0, 1930, 0, 0, 0, 0,
	0, 413, 1936, 1937, 0, 0, 0, 1650, 0, 0,
	1944, 1098, 1106, 0, 0, 0, 1949, 1950, 1952, 1954,
	1955, 0, 0, 0, 0, 0, 413, 0, 0, 1964,
	1104, 0, 0, 1967, 0, 0, 0, 0, 0, 0,
	0, 0, 413, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 1256, 0, 1256, 1084, 526, 0, 0, 0,
	413, 0, 0, 0, 1993, 0, 0, 0, 0, 413,
	0, 2003, 0, 0, 0, 0, 760, 0, 413, 0,
	0, 1095, 760, 760, 0, 0, 760, 0, 0, 70,
	0, 1763, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1763, 0, 0, 1935, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 590, 0, 0, 590, 590, 0, 0, 0,
	1085, 0, 0, 1961, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 0, 0, 1099, 0, 1975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1987, 0, 0,
	0, 0, 0, 0, 0, 0, 1242, 0, 1501, 0,
	0, 0, 0, 0, 0, 1242, 0, 0, 0, 0,
	0, 598, 0, 0, 2078, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 2270, 0, 0, 0, 0,
	0, 2041, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 761, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 413, 0, 0, 0, 1205,
	0, 1637, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 1637, 70, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 0, 0, 2161, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2182, 0,
	0, 0, 2182, 0, 0, 0, 0, 0, 2182, 0,
	0, 0, 70, 0, 70, 0, 0, 1650, 0, 1256,
	0, 0, 0, 0, 0, 0, 0, 2203, 0, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 0, 70,
	0, 0, 0, 0, 0, 413, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 760, 2229, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2231, 0, 2233, 413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 0, 570, 0, 0, 0, 0, 2257, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 549, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 547, 0, 70, 0, 0, 0, 0,
	0, 0, 1718, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 548, 0, 0, 0, 0, 550,
	0, 0, 413, 0, 0, 872, 0, 556, 557, 0,
	0, 0, 566, 2234, 0, 0, 1637, 872, 0, 0,
	2289, 2290, 1650, 0, 0, 0, 571, 551, 0, 0,
	0, 0, 0, 0, 0, 0, 2161, 872, 0, 0,
	0, 0, 2323, 0, 2324, 0, 413, 2326, 2327, 569,
	0, 0, 0, 413, 0, 0, 2332, 0, 0, 0,
	0, 0, 0, 0, 1501, 2161, 0, 872, 1687, 0,
	0, 2161, 1061, 1062, 552, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 553, 554, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 760,
	560, 0, 0, 0, 0, 555, 562, 0, 0, 1063,
	0, 0, 0, 0, 0, 1083, 0, 0, 559, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 572,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2325, 0, 0, 0, 0, 1121, 0,
	2330, 1650, 0, 2389, 0, 0, 2391, 0, 0, 0,
	0, 0, 0, 0, 413, 0, 0, 2161, 0, 558,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	0, 0, 761, 0, 0, 0, 0, 0, 761, 761,
	0, 0, 761, 2182, 0, 0, 0, 0, 0, 2161,
	0, 1098, 1106, 0, 413, 0, 0, 546, 563, 573,
	0, 872, 0, 0, 0, 0, 0, 0, 0, 2229,
	2229, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 564, 0, 70, 0, 568, 1096, 2456,
	0, 0, 574, 70, 1637, 1084, 0, 561, 565, 0,
	0, 1256, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 567, 0, 0, 0, 0, 70, 0,
	0, 2398, 70, 0, 0, 0, 2472, 2473, 0, 0,
	0, 0, 598, 413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2490, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 2431, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 2505, 0, 872, 0, 0, 413, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 2161, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 872, 872, 872, 0, 0,
	0, 0, 0, 413, 0, 0, 0, 0, 0, 0,
	2479, 0, 0, 0, 0, 0, 0, 2566, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 2509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1529, 0, 648, 637, 638, 635, 636, 627, 0, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 185, 186,
	1526, 187, 0, 0, 0, 0, 665, 630, 761, 0,
	1718, 188, 189, 190, 349, 680, 351, 681, 191, 682,
	683, 0, 192, 355, 356, 193, 194, 633, 664, 684,
	685, 359, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 414, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 1527, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 761,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 374,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 385, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 761, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 662, 308,
	296, 297, 309, 724, 310, 700, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 701, 315, 316, 670, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 702, 703, 0, 0, 328, 329, 671, 672,
	643, 330, 331, 332, 333, 0, 70, 334, 335, 336,
	337, 663, 338, 0, 404, 339, 340, 341, 405, 704,
	1525, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 617, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 615, 0, 0, 0, 0, 613, 614, 1528,
	0, 0, 0, 0, 0, 0, 623, 1523, 0, 0,
	0, 0, 626, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2439, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 781, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 787, 187, 788, 789, 790, 791,
	348, 792, 793, 794, 795, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 796, 192, 355, 356, 193,
	194, 797, 798, 357, 358, 359, 799, 195, 360, 800,
	786, 801, 196, 197, 198, 0, 200, 201, 202, 199,
	802, 203, 1121, 204, 205, 803, 710, 206, 207, 208,
	804, 805, 807, 806, 808, 809, 810, 209, 210, 414,
	211, 361, 212, 362, 363, 811, 213, 812, 214, 813,
	215, 814, 815, 216, 217, 816, 218, 817, 0, 818,
	364, 219, 221, 220, 222, 365, 366, 819, 711, 820,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 821, 226, 822, 823, 712, 824, 227, 370, 825,
	371, 826, 0, 228, 229, 0, 0, 230, 231, 372,
	373, 714, 827, 374, 235, 828, 232, 829, 713, 233,
	375, 234, 376, 377, 378, 379, 380, 830, 381, 831,
	715, 236, 237, 238, 716, 382, 383, 239, 240, 241,
	832, 243, 242, 833, 384, 717, 244, 245, 718, 834,
	246, 247, 835, 836, 248, 0, 249, 719, 250, 251,
	253, 385, 252, 720, 254, 255, 257, 256, 837, 838,
	839, 386, 258, 387, 259, 260, 840, 261, 841, 842,
	262, 843, 844, 263, 388, 721, 264, 722, 389, 265,
	266, 267, 268, 269, 845, 270, 390, 271, 391, 272,
	846, 273, 274, 275, 276, 277, 392, 278, 279, 847,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 848, 292, 723, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 849, 305, 394, 304,
	306, 307, 850, 308, 296, 297, 309, 724, 310, 395,
	396, 311, 851, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 852, 319, 853, 320, 321, 322, 323,
	324, 325, 326, 327, 854, 399, 400, 401, 855, 856,
	328, 329, 402, 403, 857, 330, 331, 332, 333, 858,
	859, 334, 335, 336, 337, 860, 338, 861, 404, 339,
	340, 341, 405, 406, 862, 863, 342, 864, 865, 866,
	867, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 781, 0, 0, 0, 0, 0, 1630, 0,
	0, 0, 0, 0, 0, 0, 0, 1631, 185, 186,
	787, 187, 788, 789, 790, 791, 348, 792, 793, 794,
	795, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 796, 192, 355, 356, 193, 194, 797, 798, 357,
	358, 359, 799, 195, 360, 800, 786, 801, 196, 197,
	198, 0, 200, 201, 202, 199, 802, 203, 0, 204,
	205, 803, 710, 206, 207, 208, 804, 805, 807, 806,
	808, 809, 810, 209, 210, 414, 211, 361, 212, 362,
	363, 811, 213, 812, 214, 813, 215, 814, 815, 216,
	217, 816, 218, 817, 0, 818, 364, 219, 221, 220,
	222, 365, 366, 819, 711, 820, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 821, 226, 822,
	823, 712, 824, 227, 370, 825, 371, 826, 0, 228,
	229, 0, 0, 230, 231, 372, 373, 714, 827, 374,
	235, 828, 232, 829, 713, 233, 375, 234, 376, 377,
	378, 379, 380, 830, 381, 831, 715, 236, 237, 238,
	716, 382, 383, 239, 240, 241, 832, 243, 242, 833,
	384, 717, 244, 245, 718, 834, 246, 247, 835, 836,
	248, 0, 249, 719, 250, 251, 253, 385, 252, 720,
	254, 255, 257, 256, 837, 838, 839, 386, 258, 387,
	259, 260, 840, 261, 841, 842, 262, 843, 844, 263,
	388, 721, 264, 722, 389, 265, 266, 267, 268, 269,
	845, 270, 390, 271, 391, 272, 846, 273, 274, 275,
	276, 277, 392, 278, 279, 847, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 848,
	292, 723, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 849, 305, 394, 304, 306, 307, 850, 308,
	296, 297, 309, 724, 310, 395, 396, 311, 851, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 852,
	319, 853, 320, 321, 322, 323, 324, 325, 326, 327,
	854, 399, 400, 401, 855, 856, 328, 329, 402, 403,
	857, 330, 331, 332, 333, 858, 859, 334, 335, 336,
	337, 860, 338, 861, 404, 339, 340, 341, 405, 406,
	862, 863, 342, 864, 865, 866, 867, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 781,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2285, 185, 186, 787, 187, 788,
	789, 790, 791, 348, 792, 793, 794, 795, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 796, 192,
	355, 356, 193, 194, 797, 798, 357, 358, 359, 799,
	195, 360, 800, 786, 801, 196, 197, 198, 0, 200,
	201, 202, 199, 802, 203, 0, 204, 205, 803, 710,
	206, 207, 208, 804, 805, 807, 806, 808, 809, 810,
	209, 210, 414, 211, 361, 212, 362, 363, 811, 213,
	812, 214, 813, 215, 814, 815, 216, 217, 816, 218,
	817, 0, 818, 364, 219, 221, 220, 222, 365, 366,
	819, 711, 820, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 821, 226, 822, 823, 712, 824,
	227, 370, 825, 371, 826, 0, 228, 229, 0, 0,
	230, 231, 372, 373, 714, 827, 374, 235, 828, 232,
	829, 713, 233, 375, 234, 376, 377, 378, 379, 380,
	830, 381, 831, 715, 236, 237, 238, 716, 382, 383,
	239, 240, 241, 832, 243, 242, 833, 384, 717, 244,
	245, 718, 834, 246, 247, 835, 836, 248, 0, 249,
	719, 250, 251, 253, 385, 252, 720, 254, 255, 257,
	256, 837, 838, 839, 386, 258, 387, 259, 260, 840,
	261, 841, 842, 262, 843, 844, 263, 388, 721, 264,
	722, 389, 265, 266, 267, 268, 269, 845, 270, 390,
	271, 391, 272, 846, 273, 274, 275, 276, 277, 392,
	278, 279, 847, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 848, 292, 723, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 849,
	305, 394, 304, 306, 307, 850, 308, 296, 297, 309,
	724, 310, 395, 396, 311, 851, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 852, 319, 853, 320,
	321, 322, 323, 324, 325, 326, 327, 854, 399, 400,
	401, 855, 856, 328, 329, 402, 403, 857, 330, 331,
	332, 333, 858, 859, 334, 335, 336, 337, 860, 338,
	861, 404, 339, 340, 341, 405, 406, 862, 863, 342,
	864, 865, 866, 867, 343, 344, 345, 346, 347, 0,
	0, 781, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1238, 185, 186, 787,
	187, 788, 789, 790, 791, 348, 792, 793, 794, 795,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	796, 192, 355, 356, 193, 194, 797, 798, 357, 358,
	359, 799, 195, 360, 800, 786, 801, 196, 197, 198,
	0, 200, 201, 202, 199, 802, 203, 0, 204, 205,
	803, 710, 206, 207, 208, 804, 805, 807, 806, 808,
	809, 810, 209, 210, 414, 211, 361, 212, 362, 363,
	811, 213, 812, 214, 813, 215, 814, 815, 216, 217,
	816, 218, 817, 0, 818, 364, 219, 221, 220, 222,
	365, 366, 819, 711, 820, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 821, 226, 822, 823,
	712, 824, 227, 370, 825, 371, 826, 0, 228, 229,
	0, 0, 230, 231, 372, 373, 714, 827, 374, 235,
	828, 232, 829, 713, 233, 375, 234, 376, 377, 378,
	379, 380, 830, 381, 831, 715, 236, 237, 238, 716,
	382, 383, 239, 240, 241, 832, 243, 242, 833, 384,
	717, 244, 245, 718, 834, 246, 247, 835, 836, 248,
	0, 249, 719, 250, 251, 253, 385, 252, 720, 254,
	255, 257, 256, 837, 838, 839, 386, 258, 387, 259,
	260, 840, 261, 841, 842, 262, 843, 844, 263, 388,
	721, 264, 722, 389, 265, 266, 267, 268, 269, 845,
	270, 390, 271, 391, 272, 846, 273, 274, 275, 276,
	277, 392, 278, 279, 847, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 848, 292,
	723, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 849, 305, 394, 304, 306, 307, 850, 308, 296,
	297, 309, 724, 310, 395, 396, 311, 851, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 852, 319,
	853, 320, 321, 322, 323, 324, 325, 326, 327, 854,
	399, 400, 401, 855, 856, 328, 329, 402, 403, 857,
	330, 331, 332, 333, 858, 859, 334, 335, 336, 337,
	860, 338, 861, 404, 339, 340, 341, 405, 406, 862,
	863, 342, 864, 865, 866, 867, 343, 344, 345, 346,
	347, 648, 637, 638, 635, 636, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 665, 630, 0, 0, 0,
	188, 189, 190, 349, 680, 351, 681, 191, 682, 683,
	0, 192, 355, 356, 193, 194, 633, 664, 684, 685,
	359, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 414, 211, 686, 212, 687, 688,
	611, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 374, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 385, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 394, 304, 306, 307, 662, 308, 296,
	297, 309, 724, 310, 700, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 701, 315, 316, 670, 0, 319,
	143, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 702, 703, 0, 0, 328, 329, 671, 672, 643,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	663, 338, 0, 404, 339, 340, 341, 940, 704, 0,
	0, 342, 0, 0, 0, 135, 343, 344, 345, 346,
	347, 617, 136, 599, 0, 648, 637, 638, 635, 636,
	627, 615, 0, 0, 0, 0, 613, 614, 0, 0,
	0, 185, 186, 0, 187, 1124, 0, 0, 0, 665,
	630, 626, 0, 0, 188, 189, 190, 349, 680, 351,
	681, 191, 682, 683, 0, 192, 355, 356, 193, 194,
	633, 664, 684, 685, 359, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 414, 211,
	686, 212, 687, 688, 0, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 621,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 374, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	385, 252, 720, 254, 255, 257, 256, 616, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 622, 295, 0,
	299, 300, 301, 302, 303, 141, 305, 394, 304, 306,
	307, 662, 308, 296, 297, 309, 724, 310, 700, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 701, 315,
	316, 670, 0, 319, 143, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 702, 703, 0, 0, 328,
	329, 671, 672, 643, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 663, 338, 0, 404, 339, 340,
	341, 940, 704, 0, 0, 342, 0, 0, 0, 135,
	343, 344, 345, 346, 347, 617, 136, 648, 637, 638,
	635, 636, 627, 0, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 185, 186, 0, 187, 0, 0, 1124,
	0, 665, 630, 0, 0, 626, 188, 189, 190, 349,
	680, 351, 681, 191, 682, 683, 0, 192, 355, 356,
	193, 194, 633, 664, 684, 685, 359, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	414, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 374, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 385, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 141, 305, 394,
	304, 306, 307, 662, 308, 296, 297, 309, 724, 310,
	700, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	701, 315, 316, 670, 0, 319, 143, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 702, 703, 0,
	0, 328, 329, 671, 672, 643, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 663, 338, 0, 404,
	339, 340, 341, 940, 704, 0, 0, 342, 0, 0,
	0, 135, 343, 344, 345, 346, 347, 617, 136, 648,
	637, 638, 635, 636, 627, 0, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 185, 186, 0, 187, 0,
	0, 1124, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 349, 680, 351, 681, 191, 682, 683, 1583, 192,
	355, 356, 193, 194, 633, 664, 684, 685, 359, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 414, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 1588, 712, 0,
	227, 677, 0, 371, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 374, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 382, 383,
	239, 240, 241, 0, 243, 242, 1584, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 385, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 662, 308, 296, 297, 309,
	724, 310, 700, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 701, 315, 316, 670, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 702,
	703, 0, 1585, 328, 329, 671, 672, 643, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 663, 338,
	0, 404, 339, 340, 341, 405, 704, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 617,
	607, 0, 648, 637, 638, 635, 636, 627, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 0, 185, 186,
	0, 187, 0, 623, 0, 0, 665, 630, 0, 626,
	0, 188, 189, 190, 349, 680, 351, 681, 191, 682,
	683, 0, 192, 355, 356, 193, 194, 633, 664, 684,
	685, 359, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 414, 211, 686, 212, 687,
	688, 611, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 374,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 385, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 609, 0, 262, 0, 0, 263,
	388, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 662, 308,
	296, 297, 309, 724, 310, 700, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 701, 315, 316, 670, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 702, 703, 0, 0, 328, 329, 671, 672,
	643, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 663, 338, 0, 404, 339, 340, 341, 405, 704,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 617, 0, 648, 637, 638, 635, 636, 627,
	0, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	185, 186, 0, 187, 0, 0, 623, 0, 665, 630,
	0, 0, 626, 188, 189, 190, 349, 680, 351, 681,
	191, 682, 683, 0, 192, 355, 356, 193, 194, 633,
	664, 684, 685, 359, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 414, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 371, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 374, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 385,
	252, 720, 254, 255, 257, 256, 616, 2212, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	662, 308, 296, 297, 309, 724, 310, 700, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 701, 315, 316,
	670, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 702, 703, 0, 0, 328, 329,
	671, 672, 643, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 663, 338, 0, 404, 339, 340, 341,
	405, 704, 0, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 617, 0, 648, 637, 638, 635,
	636, 627, 0, 0, 615, 0, 0, 0, 0, 613,
	614, 1185, 185, 186, 0, 187, 0, 0, 623, 0,
	665, 630, 0, 0, 626, 188, 189, 190, 349, 680,
	351, 681, 191, 682, 683, 0, 192, 355, 356, 193,
	194, 633, 664, 684, 685, 359, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 414,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 374, 235, 1433, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 385, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 391, 272,
	1432, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 662, 308, 296, 297, 309, 724, 310, 700,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 701,
	315, 316, 670, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 702, 703, 0, 0,
	328, 329, 671, 672, 643, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 663, 338, 0, 404, 339,
	340, 341, 405, 704, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 617, 0, 648, 637,
	638, 635, 636, 627, 0, 0, 615, 0, 0, 0,
	0, 613, 614, 0, 185, 186, 0, 187, 0, 0,
	623, 0, 665, 630, 0, 0, 626, 188, 189, 190,
	349, 680, 351, 681, 191, 682, 683, 0, 192, 355,
	356, 193, 194, 633, 664, 684, 685, 359, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 414, 211, 686, 212, 687, 688, 611, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 371, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 374, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 385, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	609, 0, 262, 0, 0, 263, 388, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 662, 308, 296, 297, 309, 724,
	310, 700, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 701, 315, 316, 670, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 702, 703,
	0, 0, 328, 329, 671, 672, 643, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 663, 338, 0,
	404, 339, 340, 341, 405, 704, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 617, 0,
	648, 637, 638, 635, 636, 627, 0, 0, 615, 0,
	0, 0, 0, 613, 614, 0, 185, 186, 0, 187,
	0, 0, 623, 0, 665, 630, 0, 0, 626, 188,
	189, 190, 349, 680, 351, 681, 191, 682, 683, 0,
	192, 355, 356, 193, 194, 633, 664, 684, 685, 359,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 414, 211, 686, 212, 687, 688, 2616,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 371, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 374, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 2617, 250, 251, 253, 385, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 662, 308, 296, 297,
	309, 724, 310, 700, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 701, 315, 316, 670, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	702, 703, 0, 0, 328, 329, 671, 672, 643, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 663,
	338, 0, 404, 339, 340, 341, 405, 704, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	617, 0, 648, 637, 638, 635, 636, 627, 0, 0,
	615, 0, 0, 0, 0, 613, 614, 0, 185, 186,
	0, 187, 0, 0, 623, 0, 665, 630, 0, 0,
	626, 188, 189, 190, 349, 680, 351, 681, 191, 682,
	683, 0, 192, 355, 356, 193, 194, 633, 664, 684,
	685, 359, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 414, 211, 686, 212, 687,
	688, 611, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 374,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 385, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 662, 308,
	296, 297, 309, 724, 310, 700, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 701, 315, 316, 670, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 702, 703, 0, 0, 328, 329, 671, 672,
	643, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 663, 338, 0, 404, 339, 340, 341, 405, 704,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 617, 0, 648, 637, 638, 635, 636, 627,
	0, 0, 615, 0, 0, 0, 0, 613, 614, 0,
	185, 186, 0, 187, 0, 0, 623, 0, 665, 630,
	0, 0, 626, 188, 189, 190, 349, 680, 351, 681,
	191, 682, 683, 0, 192, 355, 356, 193, 194, 633,
	664, 684, 685, 359, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 414, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 371, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 374, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 385,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	662, 308, 296, 297, 309, 724, 310, 700, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 701, 315, 316,
	670, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 702, 703, 0, 0, 328, 329,
	671, 672, 643, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 663, 338, 0, 404, 339, 340, 341,
	405, 704, 2064, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 617, 0, 648, 637, 638, 635,
	636, 627, 0, 0, 615, 0, 0, 0, 0, 613,
	614, 0, 185, 186, 0, 187, 0, 0, 623, 0,
	665, 630, 0, 0, 626, 188, 189, 190, 349, 680,
	351, 681, 191, 682, 683, 0, 192, 355, 356, 193,
	194, 633, 664, 684, 685, 359, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 414,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 374, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 385, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 662, 308, 296, 297, 309, 724, 310, 700,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 701,
	315, 316, 670, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 702, 703, 0, 0,
	328, 329, 671, 672, 643, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 663, 338, 0, 404, 339,
	340, 341, 405, 704, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 617, 0, 648, 637,
	638, 635, 636, 627, 0, 0, 615, 0, 0, 0,
	0, 613, 614, 1185, 185, 186, 0, 187, 0, 0,
	623, 0, 665, 630, 0, 0, 626, 188, 189, 190,
	349, 680, 351, 681, 191, 682, 683, 0, 192, 355,
	356, 193, 194, 633, 664, 684, 685, 359, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 414, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 1588, 712, 0, 227,
	677, 0, 371, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 374, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 385, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 662, 308, 296, 297, 309, 724,
	310, 700, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 701, 315, 316, 670, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 702, 703,
	0, 0, 328, 329, 671, 672, 643, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 663, 338, 0,
	404, 339, 340, 341, 405, 704, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 617, 1633,
	0, 648, 637, 638, 635, 636, 627, 0, 615, 0,
	0, 0, 0, 613, 614, 0, 0, 185, 186, 0,
	187, 0, 623, 0, 0, 665, 630, 0, 626, 0,
	188, 189, 190, 349, 680, 351, 681, 191, 682, 683,
	0, 192, 355, 356, 193, 194, 633, 664, 684, 685,
	359, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 414, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 374, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 385, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 662, 308, 296,
	297, 309, 724, 310, 700, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 701, 315, 316, 670, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 702, 703, 0, 0, 328, 329, 671, 672, 643,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	663, 338, 0, 404, 339, 340, 341, 405, 704, 0,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 617, 1597, 0, 648, 637, 638, 635, 636, 627,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 0,
	185, 186, 0, 187, 0, 623, 0, 0, 665, 630,
	0, 626, 0, 188, 189, 190, 349, 680, 351, 681,
	191, 682, 683, 0, 192, 355, 356, 193, 194, 633,
	664, 684, 685, 359, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 414, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 371, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 374, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 385,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	662, 308, 296, 297, 309, 724, 310, 700, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 701, 315, 316,
	670, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 702, 703, 0, 0, 328, 329,
	671, 672, 643, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 663, 338, 0, 404, 339, 340, 341,
	405, 704, 0, 0, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 617, 1595, 0, 648, 637, 638,
	635, 636, 627, 0, 615, 0, 0, 0, 0, 613,
	614, 0, 0, 185, 186, 0, 187, 0, 623, 0,
	0, 665, 630, 0, 626, 0, 188, 189, 190, 349,
	680, 351, 681, 191, 682, 683, 0, 192, 355, 356,
	193, 194, 633, 664, 684, 685, 359, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	414, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 374, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 385, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 662, 308, 296, 297, 309, 724, 310,
	700, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	701, 315, 316, 670, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 702, 703, 0,
	0, 328, 329, 671, 672, 643, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 663, 338, 0, 404,
	339, 340, 341, 405, 704, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 617, 1579, 0,
	648, 637, 638, 635, 636, 627, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 0, 185, 186, 0, 187,
	0, 623, 0, 0, 665, 630, 0, 626, 0, 188,
	189, 190, 349, 680, 351, 681, 191, 682, 683, 0,
	192, 355, 356, 193, 194, 633, 664, 684, 685, 359,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 414, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 371, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 374, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 385, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 662, 308, 296, 297,
	309, 724, 310, 700, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 701, 315, 316, 670, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	702, 703, 0, 0, 328, 329, 671, 672, 643, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 663,
	338, 0, 404, 339, 340, 341, 405, 704, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	617, 1567, 0, 648, 637, 638, 635, 636, 627, 0,
	615, 0, 0, 0, 0, 613, 614, 0, 0, 185,
	186, 0, 187, 0, 623, 0, 0, 665, 630, 0,
	626, 0, 188, 189, 190, 349, 680, 351, 681, 191,
	682, 683, 0, 192, 355, 356, 193, 194, 633, 664,
	684, 685, 359, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 414, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	374, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 385, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 662,
	308, 296, 297, 309, 724, 310, 700, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 701, 315, 316, 670,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 702, 703, 0, 0, 328, 329, 671,
	672, 643, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 663, 338, 0, 404, 339, 340, 341, 405,
	704, 0, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 617, 1565, 0, 1557, 637, 638, 635,
	636, 627, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 0, 185, 186, 0, 187, 0, 623, 0, 0,
	665, 630, 0, 626, 0, 188, 189, 190, 349, 680,
	351, 681, 191, 682, 683, 0, 192, 355, 356, 193,
	194, 633, 664, 684, 685, 359, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 414,
	211, 686, 1560, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	371, 0, 0, 228, 1561, 0, 0, 230, 231, 673,
	675, 714, 0, 374, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 1562, 1559,
	253, 385, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 1563, 0, 305, 394, 304,
	306, 307, 662, 308, 296, 297, 309, 724, 310, 700,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 701,
	315, 316, 670, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 702, 703, 0, 0,
	328, 329, 671, 672, 643, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 663, 338, 0, 404, 339,
	340, 341, 405, 704, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 1558, 347, 617, 1554, 0, 1557,
	637, 638, 635, 636, 627, 0, 615, 0, 0, 0,
	0, 613, 614, 0, 0, 185, 186, 0, 187, 0,
	623, 0, 0, 665, 630, 0, 626, 0, 188, 189,
	190, 349, 680, 351, 681, 191, 682, 683, 0, 192,
	355, 356, 193, 194, 633, 664, 684, 685, 359, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 414, 211, 686, 1560, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 371, 0, 0, 228, 1561, 0, 0,
	230, 231, 673, 675, 714, 0, 374, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 1562, 1559, 253, 385, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 1563, 0,
	305, 394, 304, 306, 307, 662, 308, 296, 297, 309,
	724, 310, 700, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 701, 315, 316, 670, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 702,
	703, 0, 0, 328, 329, 671, 672, 643, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 663, 338,
	0, 404, 339, 340, 341, 405, 704, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 1558, 347, 617,
	0, 648, 637, 638, 635, 636, 627, 0, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 185, 186, 0,
	187, 0, 0, 623, 0, 665, 630, 0, 0, 626,
	188, 189, 190, 349, 680, 351, 681, 191, 682, 683,
	0, 192, 355, 356, 193, 194, 633, 664, 684, 685,
	359, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 414, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 374, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 385, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 662, 308, 296,
	297, 309, 724, 310, 700, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 701, 315, 316, 670, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 702, 703, 0, 0, 328, 329, 671, 672, 643,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	663, 338, 0, 404, 339, 340, 341, 405, 704, 0,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 617, 0, 648, 637, 638, 635, 636, 627, 0,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 1420, 187, 1128, 0, 623, 0, 665, 630, 0,
	0, 626, 188, 189, 190, 349, 680, 351, 681, 191,
	682, 683, 0, 192, 355, 356, 193, 194, 633, 664,
	684, 685, 359, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 414, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	374, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 385, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 662,
	308, 296, 297, 309, 724, 310, 700, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 701, 315, 316, 670,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 702, 703, 0, 0, 328, 329, 671,
	672, 643, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 663, 338, 0, 404, 339, 340, 341, 405,
	704, 0, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 617, 879, 0, 648, 637, 638, 635,
	636, 627, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 0, 185, 186, 0, 187, 0, 623, 0, 0,
	665, 630, 0, 626, 0, 188, 189, 190, 349, 680,
	351, 681, 191, 682, 683, 0, 192, 355, 356, 193,
	194, 633, 664, 684, 685, 359, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 414,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 374, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 385, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 662, 308, 296, 297, 309, 724, 310, 700,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 701,
	315, 316, 670, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 702, 703, 0, 0,
	328, 329, 671, 672, 643, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 663, 338, 0, 404, 339,
	340, 341, 405, 704, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 617, 877, 0, 648,
	637, 638, 635, 636, 627, 0, 615, 0, 0, 0,
	0, 613, 614, 0, 0, 185, 186, 0, 187, 0,
	623, 0, 0, 665, 630, 0, 626, 0, 188, 189,
	190, 349, 680, 351, 681, 191, 682, 683, 0, 192,
	355, 356, 193, 194, 633, 664, 684, 685, 359, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 414, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 371, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 374, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 385, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 662, 308, 296, 297, 309,
	724, 310, 700, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 701, 315, 316, 670, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 702,
	703, 0, 0, 328, 329, 671, 672, 643, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 663, 338,
	0, 404, 339, 340, 341, 405, 704, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 617,
	0, 648, 637, 638, 635, 636, 627, 0, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 185, 186, 0,
	187, 0, 0, 623, 0, 665, 630, 0, 0, 626,
	188, 189, 190, 349, 680, 351, 681, 191, 682, 683,
	0, 192, 355, 356, 193, 194, 633, 664, 684, 685,
	359, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 2533, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 414, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 374, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 715, 236, 237, 238, 716,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 385, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 662, 308, 296,
	297, 309, 724, 310, 700, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 701, 315, 316, 670, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 702, 703, 0, 0, 328, 329, 671, 672, 643,
	330, 331, 2532, 333, 0, 0, 334, 335, 336, 337,
	663, 338, 0, 404, 339, 340, 341, 405, 704, 0,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 617, 0, 648, 637, 638, 635, 636, 627, 0,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 0, 187, 0, 0, 623, 0, 665, 630, 0,
	0, 626, 188, 189, 190, 349, 680, 351, 681, 191,
	682, 683, 0, 192, 355, 356, 193, 194, 633, 664,
	684, 685, 359, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 414, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	374, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 385, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 662,
	308, 296, 297, 309, 724, 310, 700, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 701, 315, 316, 670,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 702, 703, 0, 0, 328, 329, 671,
	672, 643, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 663, 338, 0, 404, 339, 340, 341, 405,
	704, 0, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 617, 0, 648, 637, 638, 635, 636,
	627, 0, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 185, 186, 0, 187, 0, 0, 623, 0, 665,
	630, 0, 0, 626, 188, 189, 190, 2531, 680, 351,
	681, 191, 682, 683, 0, 192, 355, 356, 193, 194,
	633, 664, 684, 685, 359, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 2533, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 414, 211,
	686, 212, 687, 688, 0, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 621,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 374, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	385, 252, 720, 254, 255, 257, 256, 616, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 622, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 662, 308, 296, 297, 309, 724, 310, 700, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 701, 315,
	316, 670, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 702, 703, 0, 0, 328,
	329, 671, 672, 643, 330, 331, 2532, 333, 0, 0,
	334, 335, 336, 337, 663, 338, 0, 404, 339, 340,
	341, 405, 704, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 617, 0, 648, 637, 638,
	635, 636, 627, 0, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 185, 186, 0, 187, 0, 0, 623,
	0, 665, 630, 0, 0, 626, 188, 189, 190, 349,
	680, 351, 681, 191, 682, 683, 0, 192, 355, 356,
	193, 194, 633, 664, 684, 685, 359, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	414, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 374, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 385, 252, 720, 254, 255, 257, 256, 0,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 1577,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 662, 308, 296, 297, 309, 724, 310,
	700, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	701, 315, 316, 670, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 702, 703, 0,
	0, 328, 329, 671, 672, 643, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 663, 338, 0, 404,
	339, 340, 341, 405, 704, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 648,
	637, 638, 635, 636, 627, 0, 0, 1575, 0, 0,
	0, 0, 1573, 1574, 0, 185, 186, 0, 187, 0,
	0, 1576, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 349, 680, 351, 681, 191, 682, 683, 0, 192,
	355, 356, 193, 194, 0, 664, 684, 685, 359, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 414, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 371, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 374, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 385, 252, 720, 254, 255, 257,
	256, 0, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 1577, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 662, 308, 296, 297, 309,
	724, 310, 700, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 701, 315, 316, 670, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 702,
	703, 0, 0, 328, 329, 671, 672, 643, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 663, 338,
	0, 404, 339, 340, 341, 405, 704, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 648, 637, 638, 635, 636, 627, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 1576, 0, 665, 630, 0, 0, 626,
	188, 189, 190, 0, 680, 351, 681, 191, 682, 683,
	0, 192, 355, 356, 193, 194, 633, 664, 684, 685,
	359, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 2533, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 414, 211, 686, 212, 687, 688,
	0, 213, 0, 214, 0, 215, 0, 0, 679, 217,
	0, 218, 0, 0, 0, 621, 219, 221, 220, 222,
	666, 667, 644, 711, 0, 0, 0, 0, 0, 223,
	224, 689, 690, 691, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 0, 0, 374, 235,
	0, 232, 0, 713, 233, 692, 234, 693, 694, 695,
	696, 697, 0, 655, 0, 0, 236, 237, 238, 716,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 385, 252, 720, 254,
	255, 257, 256, 616, 0, 645, 674, 258, 698, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 699, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 622, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 662, 308, 296,
	297, 309, 0, 310, 700, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 701, 315, 316, 670, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 702, 703, 0, 0, 328, 329, 671, 672, 643,
	330, 331, 2532, 333, 0, 0, 334, 335, 336, 337,
	663, 338, 0, 404, 339, 340, 341, 405, 704, 0,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 648, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 0, 187, 0, 0, 623, 0, 665, 0, 0,
	0, 626, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 664,
	357, 358, 359, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 666, 667, 0, 711, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	374, 235, 0, 232, 0, 713, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 715, 236, 237,
	238, 716, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 385, 252,
	720, 254, 255, 257, 256, 0, 0, 0, 674, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 662,
	308, 296, 297, 309, 724, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 670,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 671,
	672, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 663, 338, 0, 404, 339, 340, 341, 405,
	406, 0, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 937, 0, 896, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 2163, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 786,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 711, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 372, 373,
	714, 0, 374, 235, 0, 232, 0, 713, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 715,
	236, 237, 238, 716, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	385, 252, 720, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 721, 264, 722, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 141, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 724, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 143, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 940, 406, 0, 0, 342, 0, 0, 0, 135,
	343, 344, 345, 346, 347, 599, 136, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 127,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	764, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 141, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 143, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 940, 406, 0, 0, 342, 0, 0,
	0, 135, 343, 344, 345, 346, 347, 0, 136, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 758,
	0, 1207, 0, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 0, 0,
	230, 231, 372, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 764, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 141,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 143, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 940, 406, 0, 0, 342,
	0, 0, 0, 135, 343, 344, 345, 346, 347, 599,
	136, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 758, 0, 1207, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 141, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	143, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 940, 406, 0,
	0, 342, 0, 0, 0, 135, 343, 344, 345, 346,
	347, 1906, 136, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 127, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 195, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 372, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 764, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 0, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 757, 0, 182, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 758, 0, 763, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 372, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 764, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 758, 0, 763,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 372,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 764,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 758, 0,
	763, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 348, 1240, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 1719, 348, 0, 0, 0, 0, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 0, 0, 230,
	231, 372, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 2079, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 0, 0,
	230, 231, 372, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	648, 637, 638, 635, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 1210, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 680, 351, 681, 191, 682, 683, 0,
	192, 355, 356, 193, 194, 0, 0, 684, 685, 359,
	0, 195, 360, 0, 786, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 0,
	0, 230, 231, 372, 373, 714, 0, 374, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 385, 252, 720, 254, 255,
	257, 256, 0, 0, 645, 386, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 721,
	264, 722, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 724, 310, 700, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 701, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	702, 703, 0, 0, 328, 329, 402, 403, 643, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 704, 0, 497,
	342, 182, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 178, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	177, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	175, 342, 182, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 348, 0, 181, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 178, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 372, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 177, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 182, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 181,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 178, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	177, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	182, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 181, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 0,
	0, 230, 231, 372, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	991, 0, 896, 895, 0, 0, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 181, 185, 186,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 786, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 711, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 372, 373, 714, 0, 374,
	235, 0, 232, 0, 713, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 715, 236, 237, 238,
	716, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 385, 252, 720,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 721, 264, 722, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 724, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 891, 0, 896, 895, 0, 0, 0, 893,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 195, 360, 0, 786, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 711, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 0, 0, 230, 231, 890, 373, 714,
	0, 374, 235, 0, 232, 0, 713, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 715, 236,
	237, 238, 716, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 385,
	252, 720, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 721, 264, 722, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 724, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 896, 895, 342, 0, 0, 893, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 786, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 711, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 372, 373, 714, 0, 374,
	235, 0, 232, 0, 713, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 715, 236, 237, 238,
	716, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 385, 252, 720,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 721, 264, 722, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 724, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	896, 895, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 786, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 711, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 0,
	0, 230, 231, 372, 373, 714, 0, 374, 235, 0,
	232, 0, 713, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 715, 236, 237, 238, 716, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 385, 252, 720, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 721,
	264, 722, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 724, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 896, 0,
	342, 0, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 786, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	711, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 0, 0, 230,
	231, 372, 373, 714, 0, 374, 235, 0, 232, 0,
	713, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 715, 236, 237, 238, 716, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 385, 252, 720, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 721, 264, 722,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 724,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 182, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 1653, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	1651, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 1695, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 1656, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 372,
	373, 0, 0, 374, 235, 1693, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	1655, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	1694, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 182, 0, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 1653, 195, 360, 0, 0, 1648,
	196, 197, 198, 0, 200, 201, 202, 199, 1651, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 1656, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 0, 0, 230, 231, 1647, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 1655, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 1654, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 915, 342, 182, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 372, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 764, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 770, 342, 182, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 772,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 764,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 766, 342, 182, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	768, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	764, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 426, 342, 182, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 425, 187, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 0, 0, 230,
	231, 372, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 424, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 182, 0, 342, 0,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	348, 0, 1636, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 372,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 182, 2230, 342, 0, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 195, 360, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 0, 0, 230, 231, 372, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 182, 2230, 342, 0, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 372, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 2227, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	182, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 0,
	0, 230, 231, 372, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 764, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 1399,
	342, 182, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	1397, 342, 182, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 372, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	182, 0, 342, 0, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 185, 186, 1379, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 0,
	0, 230, 231, 372, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 523,
	342, 182, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	970, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 525, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	520, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	1255, 342, 182, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 1254, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 523, 342, 182, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 970, 0, 195, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 372, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 525,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 520, 400, 401, 0, 0, 328, 971, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 0, 523, 342, 182, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 514, 360, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 0, 0, 230, 231, 372, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	525, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 394, 304, 954, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 520, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 933, 342, 182, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 932, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 930, 342, 182, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 929,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 926, 342, 182, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	925, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 923, 342, 182, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 0, 0, 230,
	231, 922, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 919, 342, 182,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 0, 0,
	230, 231, 918, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 182, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 185, 186, 907, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 0, 905, 342, 182, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 348, 0, 0, 0, 0, 188, 189, 190,
	349, 350, 351, 352, 191, 353, 354, 0, 192, 355,
	356, 193, 194, 0, 0, 357, 358, 359, 0, 195,
	360, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 414, 211, 361, 212, 362, 363, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 364, 219, 221, 220, 222, 365, 366, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 367, 368,
	369, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	370, 0, 371, 0, 0, 228, 229, 0, 0, 230,
	231, 904, 373, 0, 0, 374, 235, 0, 232, 0,
	0, 233, 375, 234, 376, 377, 378, 379, 380, 0,
	381, 0, 0, 236, 237, 238, 0, 382, 383, 239,
	240, 241, 0, 243, 242, 0, 384, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 385, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 386, 258, 387, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 388, 0, 264, 0,
	389, 265, 266, 267, 268, 269, 0, 270, 390, 271,
	391, 272, 0, 273, 274, 275, 276, 277, 392, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	393, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	394, 304, 306, 307, 0, 308, 296, 297, 309, 0,
	310, 395, 396, 311, 0, 318, 312, 313, 298, 314,
	317, 397, 315, 316, 398, 0, 319, 0, 320, 321,
	322, 323, 324, 325, 326, 327, 0, 399, 400, 401,
	0, 0, 328, 329, 402, 403, 0, 330, 331, 332,
	333, 0, 0, 334, 335, 336, 337, 0, 338, 0,
	404, 339, 340, 341, 405, 406, 0, 901, 342, 182,
	0, 0, 0, 343, 344, 345, 346, 347, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 0, 0,
	230, 231, 372, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 0, 886, 342,
	182, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 348, 0, 0, 0, 0, 188,
	189, 190, 349, 350, 351, 352, 191, 353, 354, 0,
	192, 355, 356, 193, 194, 0, 0, 357, 358, 359,
	0, 195, 360, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 414, 211, 361, 212, 362, 363, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 364, 219, 221, 220, 222, 365,
	366, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	367, 368, 369, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 370, 0, 371, 0, 0, 228, 229, 0,
	0, 230, 231, 888, 373, 0, 0, 374, 235, 0,
	232, 0, 0, 233, 375, 234, 376, 377, 378, 379,
	380, 0, 381, 0, 0, 236, 237, 238, 0, 382,
	383, 239, 240, 241, 0, 243, 242, 0, 384, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 385, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 386, 258, 387, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 388, 0,
	264, 0, 389, 265, 266, 267, 268, 269, 0, 270,
	390, 271, 391, 272, 0, 273, 274, 275, 276, 277,
	392, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 393, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 394, 304, 306, 307, 0, 308, 296, 297,
	309, 0, 310, 395, 396, 311, 0, 318, 312, 313,
	298, 314, 317, 397, 315, 316, 398, 0, 319, 0,
	320, 321, 322, 323, 324, 325, 326, 327, 0, 399,
	400, 401, 0, 0, 328, 329, 402, 403, 0, 330,
	331, 332, 333, 0, 0, 334, 335, 336, 337, 0,
	338, 0, 404, 339, 340, 341, 405, 406, 0, 776,
	342, 182, 0, 0, 0, 343, 344, 345, 346, 347,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 778, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	774, 342, 182, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 348, 0, 0, 0,
	0, 188, 189, 190, 349, 350, 351, 352, 191, 353,
	354, 0, 192, 355, 356, 193, 194, 0, 0, 357,
	358, 359, 0, 195, 360, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 414, 211, 361, 212, 362,
	363, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 364, 219, 221, 220,
	222, 365, 366, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 367, 368, 369, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 370, 0, 371, 0, 0, 228,
	229, 0, 0, 230, 231, 372, 373, 0, 0, 374,
	235, 0, 232, 0, 0, 233, 375, 234, 376, 377,
	378, 379, 380, 0, 381, 0, 0, 236, 237, 238,
	0, 382, 383, 239, 240, 241, 0, 243, 242, 0,
	384, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 385, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 386, 258, 387,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	388, 0, 264, 0, 389, 265, 266, 267, 268, 269,
	0, 270, 390, 271, 391, 272, 0, 273, 274, 275,
	276, 277, 392, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 393, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 394, 304, 306, 307, 0, 308,
	296, 297, 309, 0, 310, 395, 396, 311, 0, 318,
	312, 313, 298, 314, 317, 397, 315, 316, 398, 0,
	319, 0, 320, 321, 322, 323, 324, 325, 326, 327,
	0, 399, 400, 401, 0, 0, 328, 329, 402, 403,
	0, 330, 331, 332, 333, 0, 0, 334, 335, 336,
	337, 0, 338, 0, 404, 339, 340, 341, 405, 406,
	0, 523, 342, 182, 0, 0, 0, 343, 344, 345,
	346, 347, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 514, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 372, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 513, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 525,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 515, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 516, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 520, 400, 401, 0, 0, 328, 518, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 0, 505, 342, 182, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 348, 0,
	0, 0, 0, 188, 189, 190, 349, 350, 351, 352,
	191, 353, 354, 0, 192, 355, 356, 193, 194, 0,
	0, 357, 358, 359, 0, 195, 360, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 414, 211, 361,
	212, 362, 363, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 364, 219,
	221, 220, 222, 365, 366, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 367, 368, 369, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 370, 0, 371, 0,
	0, 228, 229, 0, 0, 230, 231, 372, 373, 0,
	0, 374, 235, 0, 232, 0, 0, 233, 375, 234,
	376, 377, 378, 379, 380, 0, 381, 0, 0, 236,
	237, 238, 0, 382, 383, 239, 240, 241, 0, 243,
	242, 0, 384, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 385,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 386,
	258, 387, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 388, 0, 264, 0, 389, 265, 266, 267,
	268, 269, 0, 270, 390, 271, 391, 272, 0, 273,
	274, 275, 276, 277, 392, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 393, 295, 0, 506,
	300, 301, 302, 303, 0, 305, 394, 304, 306, 307,
	0, 308, 296, 297, 309, 0, 310, 395, 396, 311,
	0, 318, 312, 313, 298, 314, 317, 397, 315, 316,
	398, 0, 319, 0, 320, 321, 322, 323, 324, 325,
	326, 327, 0, 399, 400, 401, 0, 0, 328, 329,
	402, 403, 0, 330, 331, 332, 333, 0, 0, 334,
	335, 336, 337, 0, 338, 0, 404, 339, 340, 341,
	405, 406, 0, 503, 342, 182, 0, 0, 0, 343,
	344, 345, 346, 347, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 372, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 0, 495, 342, 182, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	348, 0, 0, 0, 0, 188, 189, 190, 349, 350,
	351, 352, 191, 353, 354, 0, 192, 355, 356, 193,
	194, 0, 0, 357, 358, 359, 0, 195, 360, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 414,
	211, 361, 212, 362, 363, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	364, 219, 221, 220, 222, 365, 366, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 367, 368, 369, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 370, 0,
	371, 0, 0, 228, 229, 0, 0, 230, 231, 372,
	373, 0, 0, 374, 235, 0, 232, 0, 0, 233,
	375, 234, 376, 377, 378, 379, 380, 0, 381, 0,
	0, 236, 237, 238, 0, 382, 383, 239, 240, 241,
	0, 243, 242, 0, 384, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 385, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 386, 258, 387, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 388, 0, 264, 0, 389, 265,
	266, 267, 268, 269, 0, 270, 390, 271, 391, 272,
	0, 273, 274, 275, 276, 277, 392, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 393, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 394, 304,
	306, 307, 0, 308, 296, 297, 309, 0, 310, 395,
	396, 311, 0, 318, 312, 313, 298, 314, 317, 397,
	315, 316, 398, 0, 319, 0, 320, 321, 322, 323,
	324, 325, 326, 327, 0, 399, 400, 401, 0, 0,
	328, 329, 402, 403, 0, 330, 331, 332, 333, 0,
	0, 334, 335, 336, 337, 0, 338, 0, 404, 339,
	340, 341, 405, 406, 0, 449, 342, 182, 0, 0,
	0, 343, 344, 345, 346, 347, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 182, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 348,
	0, 0, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 372, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 308, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 182, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 195, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 1953, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 182, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 1951, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 267, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 276,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 182,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 348, 0, 0, 0, 0, 188, 189,
	190, 349, 350, 351, 352, 191, 353, 354, 0, 192,
	355, 356, 193, 194, 0, 0, 357, 358, 359, 0,
	195, 360, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 414, 211, 361, 212, 362, 363, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 364, 219, 221, 220, 222, 365, 366,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 367,
	368, 369, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 370, 0, 371, 0, 0, 228, 229, 0, 0,
	230, 231, 1940, 373, 0, 0, 374, 235, 0, 232,
	0, 0, 233, 375, 234, 376, 377, 378, 379, 380,
	0, 381, 0, 0, 236, 237, 238, 0, 382, 383,
	239, 240, 241, 0, 243, 242, 0, 384, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 385, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 386, 258, 387, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 388, 0, 264,
	0, 389, 265, 266, 267, 268, 269, 0, 270, 390,
	271, 391, 272, 0, 273, 274, 275, 276, 277, 392,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 393, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 394, 304, 306, 307, 0, 308, 296, 297, 309,
	0, 310, 395, 396, 311, 0, 318, 312, 313, 298,
	314, 317, 397, 315, 316, 398, 0, 319, 0, 320,
	321, 322, 323, 324, 325, 326, 327, 0, 399, 400,
	401, 0, 0, 328, 329, 402, 403, 0, 330, 331,
	332, 333, 0, 0, 334, 335, 336, 337, 0, 338,
	0, 404, 339, 340, 341, 405, 406, 182, 0, 342,
	0, 0, 0, 0, 343, 344, 345, 346, 347, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 348, 0, 0, 0, 0, 188, 189, 190, 349,
	350, 351, 352, 191, 353, 354, 0, 192, 355, 356,
	193, 194, 0, 0, 357, 358, 359, 0, 195, 360,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	414, 211, 361, 212, 362, 363, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 364, 219, 221, 220, 222, 365, 366, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 367, 368, 369,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 370,
	0, 371, 0, 0, 228, 229, 0, 0, 230, 231,
	372, 373, 0, 0, 374, 235, 0, 232, 0, 0,
	233, 375, 234, 376, 377, 378, 379, 380, 0, 381,
	0, 0, 236, 237, 238, 0, 382, 383, 239, 240,
	241, 0, 243, 242, 0, 384, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 385, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 386, 258, 387, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 388, 0, 264, 0, 389,
	265, 266, 267, 268, 269, 0, 270, 390, 271, 391,
	272, 0, 273, 274, 275, 276, 277, 392, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 393,
	295, 0, 506, 300, 301, 302, 303, 0, 305, 394,
	304, 306, 307, 0, 308, 296, 297, 309, 0, 310,
	395, 396, 311, 0, 318, 312, 313, 298, 314, 317,
	397, 315, 316, 398, 0, 319, 0, 320, 321, 322,
	323, 324, 325, 326, 327, 0, 399, 400, 401, 0,
	0, 328, 329, 402, 403, 0, 330, 331, 332, 333,
	0, 0, 334, 335, 336, 337, 0, 338, 0, 404,
	339, 340, 341, 405, 406, 182, 0, 342, 0, 0,
	0, 0, 343, 344, 345, 346, 347, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 348,
	0, 1265, 0, 0, 188, 189, 190, 349, 350, 351,
	352, 191, 353, 354, 0, 192, 355, 356, 193, 194,
	0, 0, 357, 358, 359, 0, 195, 360, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 414, 211,
	361, 212, 362, 363, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 364,
	219, 221, 220, 222, 365, 366, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 367, 368, 369, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 370, 0, 371,
	0, 0, 228, 229, 0, 0, 230, 231, 372, 373,
	0, 0, 374, 235, 0, 232, 0, 0, 233, 375,
	234, 376, 377, 378, 379, 380, 0, 381, 0, 0,
	236, 237, 238, 0, 382, 383, 239, 240, 241, 0,
	243, 242, 0, 384, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	385, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	386, 258, 387, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 388, 0, 264, 0, 389, 265, 266,
	267, 268, 269, 0, 270, 390, 271, 391, 272, 0,
	273, 274, 275, 276, 277, 392, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 393, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 394, 304, 306,
	307, 0, 0, 296, 297, 309, 0, 310, 395, 396,
	311, 0, 318, 312, 313, 298, 314, 317, 397, 315,
	316, 398, 0, 319, 0, 320, 321, 322, 323, 324,
	325, 326, 327, 0, 399, 400, 401, 0, 0, 328,
	329, 402, 403, 0, 330, 331, 332, 333, 0, 0,
	334, 335, 336, 337, 0, 338, 0, 404, 339, 340,
	341, 405, 406, 182, 0, 342, 0, 0, 0, 0,
	343, 344, 345, 346, 347, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 348, 0, 0,
	0, 0, 188, 189, 190, 349, 350, 351, 352, 191,
	353, 354, 0, 192, 355, 356, 193, 194, 0, 0,
	357, 358, 359, 0, 195, 360, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 414, 211, 361, 212,
	362, 363, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 364, 219, 221,
	220, 222, 365, 366, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 367, 368, 369, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 370, 0, 371, 0, 0,
	228, 229, 0, 0, 230, 231, 372, 373, 0, 0,
	374, 235, 0, 232, 0, 0, 233, 375, 234, 376,
	377, 378, 379, 380, 0, 381, 0, 0, 236, 237,
	238, 0, 382, 383, 239, 240, 241, 0, 243, 242,
	0, 384, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 385, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 386, 258,
	387, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 388, 0, 264, 0, 389, 265, 266, 267, 268,
	269, 0, 270, 390, 271, 391, 272, 0, 273, 274,
	275, 276, 277, 392, 740, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 393, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 394, 304, 306, 307, 0,
	308, 296, 297, 309, 0, 310, 395, 396, 311, 0,
	318, 312, 313, 298, 314, 317, 397, 315, 316, 398,
	0, 319, 0, 320, 321, 322, 323, 324, 325, 326,
	327, 0, 399, 400, 401, 0, 0, 328, 329, 402,
	403, 0, 330, 331, 332, 333, 0, 0, 334, 335,
	336, 337, 0, 338, 0, 404, 339, 340, 341, 405,
	406, 182, 0, 342, 0, 0, 0, 0, 343, 344,
	345, 346, 347, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 348, 0, 0, 0, 0,
	188, 189, 190, 349, 350, 351, 352, 191, 353, 354,
	0, 192, 355, 356, 193, 194, 0, 0, 357, 358,
	359, 0, 195, 360, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 414, 211, 361, 212, 362, 363,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 364, 219, 221, 220, 222,
	365, 366, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 367, 368, 369, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 370, 0, 371, 0, 0, 228, 229,
	0, 0, 230, 231, 372, 373, 0, 0, 374, 235,
	0, 232, 0, 0, 233, 375, 234, 376, 377, 378,
	379, 380, 0, 381, 0, 0, 236, 237, 238, 0,
	382, 383, 239, 240, 241, 0, 243, 242, 0, 384,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 385, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 386, 258, 387, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 388,
	0, 264, 0, 389, 265, 266, 0, 268, 269, 0,
	270, 390, 271, 391, 272, 0, 273, 274, 275, 0,
	277, 392, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 393, 0, 0, 299, 300, 301, 302,
	303, 0, 305, 394, 304, 306, 307, 0, 308, 296,
	297, 309, 0, 310, 395, 396, 311, 0, 318, 312,
	313, 298, 314, 317, 397, 315, 316, 398, 0, 319,
	0, 320, 321, 322, 323, 324, 325, 326, 327, 0,
	399, 400, 401, 0, 0, 328, 329, 402, 403, 0,
	330, 331, 332, 333, 0, 0, 334, 335, 336, 337,
	0, 338, 0, 404, 339, 340, 341, 405, 406, 0,
	0, 342, 0, 0, 0, 0, 343, 344, 345, 346,
	347, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 1063, 0,
	0, 0, 1094, 0, 1083, 0, 0, 0, 0, 1064,
	0, 1080, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1098, 1106, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 1098, 1106, 1096, 0, 0,
	1094, 0, 0, 0, 1084, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 1063, 1096, 0, 0, 0, 0, 1083, 0, 1084,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 1099, 0, 0, 1090,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 1098, 1106, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 1097, 0, 1084, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	0, 0, 0, 1095, 1890, 0, 0, 0, 0, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 0, 0, 1090, 0, 1889,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 0, 0, 0, 1099,
	1094, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 1888, 0, 0,
	0, 1069, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	0, 0, 1094, 1098, 1106, 0, 0, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 1083,
	1096, 0, 0, 0, 0, 0, 1080, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 1098, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 1104, 1061, 1062, 0, 1091, 1092,
	1093, 1101, 1102, 1103, 0, 0, 0, 0, 0, 0,
	0, 1094, 1096, 0, 0, 0, 0, 0, 1064, 1084,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 1063, 0, 0, 1095, 0, 0, 1083, 1094,
	0, 0, 0, 0, 0, 1080, 1064, 0, 1097, 1105,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 1090,
	1063, 0, 0, 0, 0, 0, 1083, 1840, 0, 0,
	0, 0, 0, 1080, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 1087, 1088, 1089, 0, 0, 0,
	0, 1099, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1098, 1106, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 0,
	1069, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1096, 1098, 1106, 0, 0, 0, 0, 1084, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 1104, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 1095, 2502, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 1061,
	1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0,
	1099, 0, 0, 0, 0, 1094, 1090, 0, 0, 0,
	0, 0, 1064, 0, 0, 1105, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 0, 1099, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 2453, 0, 0, 1086, 1087, 1088,
	1089, 0, 0, 0, 0, 0, 1069, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 1098, 1106,
	0, 0, 2407, 0, 0, 1061, 1062, 0, 1091, 1092,
	1093, 1101, 1102, 1103, 0, 0, 0, 1104, 0, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 1105, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 1084, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 1087, 1088, 1089, 1085, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 1062, 1099, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 1098, 1106, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 1096, 0, 0, 0, 1083, 0, 0, 1084, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 1095, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 0, 0, 0, 2377, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 1090, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 1098, 1106, 0, 0, 0, 0, 0, 1061, 1062,
	1099, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	1104, 0, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1105, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 2372, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1087, 1088, 1089,
	1085, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1061, 1062, 1099, 1091, 1092,
	1093, 1101, 1102, 1103, 0, 0, 0, 1098, 1106, 0,
	0, 1094, 0, 0, 0, 0, 0, 0, 1064, 0,
	0, 1105, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 1096, 0, 0, 0, 1083, 0,
	0, 1084, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 1095, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0,
	0, 2368, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 1087, 1088, 1089, 0, 0, 0,
	0, 1090, 1069, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 1098, 1106, 0, 0, 0, 0,
	0, 1061, 1062, 1099, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 1104, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 1105, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 0, 0, 2306, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 1085, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1061, 1062,
	1099, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	1098, 1106, 0, 0, 1094, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1105, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 1096, 0, 0,
	0, 1083, 0, 0, 1084, 0, 0, 0, 1080, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	1095, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 2272, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1087, 1088, 1089,
	0, 0, 0, 0, 1090, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 1098, 1106, 0,
	0, 0, 0, 0, 1061, 1062, 1099, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 1104, 0, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	2271, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 1085, 0, 0, 0,
	0, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 1062, 1099, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 1098, 1106, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 1105, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 0,
	1096, 0, 0, 0, 1083, 0, 0, 1084, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 1095, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 0, 0, 2236, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 1090, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	1098, 1106, 0, 0, 0, 0, 0, 1061, 1062, 1099,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 1104,
	0, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 1105, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 0, 0, 2082, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 1085,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1061, 1062, 1099, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 1098, 1106, 0, 0,
	1094, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 1096, 0, 0, 0, 1083, 0, 0,
	1084, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 1095, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	2058, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 0, 0, 0,
	1090, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 1098, 1106, 0, 0, 0, 0, 0,
	1061, 1062, 1099, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 1104, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1105, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 0, 1084, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 0, 0, 1515, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 1085, 0, 0, 0, 0, 1069, 2565, 0,
	0, 0, 0, 0, 0, 0, 0, 1061, 1062, 1099,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 1098,
	1106, 0, 0, 1094, 0, 0, 0, 0, 0, 0,
	1064, 0, 0, 1105, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 1096, 0, 0, 0,
	1083, 0, 0, 1084, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 1095,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 1810, 0, 0, 0, 2564, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 0, 1090, 1069, 0, 1880, 0, 0, 1879,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 1098, 1106, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	0, 0, 1094, 1096, 0, 0, 0, 1783, 0, 1064,
	1084, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 1095, 0, 0, 1083,
	0, 0, 0, 0, 1097, 0, 1080, 1075, 1076, 1082,
	1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0, 0,
	1090, 0, 0, 1784, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 1099, 1069, 0, 0, 0, 1612, 0, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 1098, 1106, 0, 0, 1094,
	0, 0, 0, 1611, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 1096, 0, 0, 0, 1083, 0, 0, 1084,
	0, 1097, 0, 1080, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 1090,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 0, 1094, 1096,
	0, 0, 0, 0, 0, 1064, 1084, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 1095, 0, 0, 1083, 0, 0, 0, 0,
	1097, 0, 1080, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 1099, 1069,
	0, 0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 0, 0, 0, 0,
	1094, 1098, 1106, 0, 0, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 1083, 1096, 0,
	0, 0, 0, 0, 1080, 1084, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 1095, 596, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 0, 0, 0,
	0, 1069, 0, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 1098, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 1104, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 0, 0, 0, 0, 1094,
	1096, 0, 0, 0, 0, 0, 1064, 1084, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	1063, 0, 0, 1095, 0, 0, 1083, 1094, 0, 0,
	0, 1881, 0, 1080, 1064, 0, 1097, 1105, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 1090, 1063, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 1080, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 1099,
	1069, 0, 0, 0, 0, 1886, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 2062, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 0, 1069, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	1098, 1106, 0, 0, 0, 0, 1084, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 1104,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 0, 1095, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 1099, 0,
	0, 0, 0, 1094, 1090, 0, 0, 0, 0, 0,
	1064, 0, 0, 1105, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 0, 1099, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 0, 0, 1069, 1097, 0, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 1098, 1106, 0, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 1104, 0, 0, 0, 1094,
	0, 0, 0, 1839, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 1096, 0, 0, 0, 0, 0, 0,
	1084, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1846,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 1085, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1061, 1062, 1099, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 1098, 1106, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1105, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 1096,
	0, 0, 0, 1083, 0, 0, 1084, 0, 0, 0,
	1080, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 1095, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 0, 0, 0, 0, 1090, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 0, 0, 1098,
	1106, 0, 0, 0, 0, 0, 1061, 1062, 1099, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 1104, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 1084, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 1085, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 1062, 1099, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 1098, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 0, 1096, 0, 0, 0, 1083, 0, 0, 1084,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 1075, 1076, 1082,
	1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 1090,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1318, 1307, 1337, 1296,
	1328, 1327, 0, 0, 1298, 1297, 0, 0, 0, 0,
	1339, 1338, 0, 0, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 0, 1090, 0, 1333, 0,
	1325, 1324, 0, 0, 0, 0, 0, 0, 0, 0,
	1323, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 1322, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 0, 0, 0, 0, 0, 0, 1311, 1309, 1312,
	1313, 1314, 1315, 1316, 0, 1336, 0, 0, 0, 0,
	0, 0, 1300, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 1302, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	1326, 0, 0, 0, 1308, 0, 0, 0, 0, 0,
	0, 0, 0, 1310, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 1440, 1438, 1439,
	1442, 1441, 0, 0, 0, 0, 1318, 1307, 1337, 1296,
	1328, 1327, 0, 0, 1298, 1297, 0, 0, 0, 0,
	1339, 1338, 0, 0, 0, 1303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1333, 1301,
	1325, 1324, 0, 1334, 1335, 0, 0, 0, 0, 0,
	1323, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1305, 0, 0, 0, 0,
	1340, 0, 0, 1322, 1320, 1321, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1306, 0, 0, 0, 0, 0, 0, 1311, 1309, 1312,
	1313, 1314, 1315, 1316, 0, 1336, 0, 0, 0, 0,
	0, 0, 1300, 1299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1302, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1326, 0, 0, 0, 1308, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1303, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1317, 1304, 0, 0,
	0, 0, 0, 0, 0, 0, 1341, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1301,
	0, 0, 0, 1334, 1335, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1305, 0, 0, 0, 0,
	1340,
}
var sqlPact = [...]int{

	237, -1000, -17, -1000, -1000, -1000, 190, -1000, -1000, -1000,
	-1000, 189, 186, 185, -1000, 183, 180, 177, 175, 171,
	166, 164, 163, 161, 160, 156, -1000, 153, -1000, -1000,
	-1000, -1000, 152, 151, 145, 133, 132, 131, 124, -1000,
	1162, 22578, 122, 121, 1378, -1000, 36541, 119, -1000, 1123,
	27014, 913, 1532, 109, 107, 105, 103, 102, 1143, 36203,
	2777, 2663, 1144, 1654, 35862, 22237, 1648, 2117, 35521, -1000,
	-1000, 35180, 97, 90, 89, 88, 86, -1000, -1000, 34839,
	83, 82, 80, 75, 74, 71, 70, 60, 59, 58,
	57, 49, 48, 47, -1000, 46, 45, 43, -1000, 4669,
	42, 40, 35, 1136, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 919, 32,
	31, 27, 25, 24, 114, -1000, 1026, 412, 1567, 8518,
	1044, 1039, 1038, 1013, 1035, 38569, 36541, 22, -36, 20,
	-1000, 1984, 675, 19791, 237, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 26673,
	26332, 34498, 34157, 6757, 793, -1000, -21, 23256, 36541, -1000,
	-10, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15215, 14862, 565, -10, -1000, -1000, -1000, 33816, 23960, 33475,
	1525, 33134, -1000, -1000, 32793, -1000, -1000, 1841, 1675, 1668,
	25991, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 32455, 32114, 31773, 31432, 31091, 515, -1000,
	-1000, -1000, 18031, -1000, -1000, -1000, -1000, 19, -1000, 18,
	-1000, 16, 12, 11, 9, 8, -1000, 2, 0, -1000,
	-1, -6, -1000, -8, -15, 1142, 30750, 884, 1282, -1000,
	-1000, -19, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	36541, -1000, 15919, -1000, 505, -1000, 1674, -1000, 15919, -1000,
	1281, -1000, -1000, -1000, -1000, -1000, 36541, -1000, -1000, -1000,
	-1000, -1000, -1000, 2207, 1234, 503, 30409, -1000, 1539, -1000,
	607, 791, -1000, -1000, -1000, 9574, 194, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1754, 23608, 1220, 2036,
	1836, 2206, 1477, 1820, 1783, 1778, 1771, 1723, 2204, 1011,
	2203, 1826, 1024, 2202, 1693, 1186, 679, 2200, 1673, 1672,
	-1000, -1000, -1000, -1000, 936, -1000, -1000, -1000, 28366, -1000,
	-1000, 828, 914, -1000, -1000, -1000, -1000, -1000, 1026, -1000,
	-1000, -1000, 1453, 1947, 1947, 1947, 2064, 301, 294, -1000,
	114, -1000, 1356, -1000, 1205, -1000, -1000, -1000, -1000, -1000,
	43120, -1000, -1000, 15919, 15919, 15919, 15919, 15919, 1147, 532,
	-1000, 499, 497, 7813, -1000, -1000, 2177, -1000, -1000, -1000,
	303, -1000, -1000, 15919, -10, -1000, -1000, -1000, -1000, 496,
	2192, -1000, 671, -1000, -1000, -1000, 612, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1702, 493, 490, 489,
	-1000, 487, -1000, -1000, 486, 484, 483, 481, 480, 477,
	476, 474, 473, 470, 460, 459, 457, 454, 453, 1073,
	-1000, 631, -1000, -1000, 631, 631, -1000, 437, 437, 441,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 437, -1000,
	-1000, -1000, 582, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 452, 1303, -1000, -1000, 1303,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 785, 37893, -23,
	36541, -1000, 451, -23, -1000, -1000, 450, -1000, 10982, 10982,
	-1000, -1000, -1000, -1000, -1000, 10278, 1657, -1000, 576, -123,
	304, 580, -1000, 18735, 21545, -1000, -1000, 1217, 1821, 814,
	-1000, 1020, 1808, 539, -1000, 1195, -1000, 905, 1804, -70,
	1735, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 24298, 23256,
	-21, -30, -1000, -1000, -1000, 6405, 43120, -1000, 43120, -1000,
	875, 20493, -10, -1000, -1000, -1000, -1000, 449, 1355, 617,
	1353, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	328, -1000, 30068, 617, 1347, -1000, -1000, -1000, 28366, -1000,
	36541, -1000, 36541, -1000, 921, -1000, 38231, 136, 1800, -1000,
	-1000, 136, 1787, -1000, 127, 1786, -1000, -1000, 1247, 1780,
	-1000, -30, 1776, -1000, -1000, 15919, -56, -1000, -1000, -1000,
	675, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 29727, 22917, 1209, 543, 43120, 2099,
	43779, 24298, 43120, 22917, -1000, -1000, 36541, -1000, 15919, -1000,
	2096, 1440, -24, -1000, -1000, -1000, -1000, -1000, 1381, 1500,
	757, 1425, 9574, 9574, 1917, -1000, 193, 6757, -1000, -1000,
	-1000, -1000, 29386, -1000, -1000, -1000, 1158, 36541, -1000, -1000,
	1697, -1000, 22917, 36541, -1000, 36541, -1000, 36541, -1000, 36541,
	-1000, 36541, -1000, -1000, -1000, -1000, -1000, 364, -1000, 1686,
	-1000, -1000, 36541, -1000, 1379, -1000, -1000, -1000, 29048, 28707,
	-1000, 1005, 817, -1000, -1000, 137, -1000, 24298, 2010, 606,
	-1000, 1453, 1410, 1681, 677, 1293, 1464, 14509, 1444, 15919,
	114, -1000, -1000, 114, 114, 9222, -1000, -1000, -1000, 36541,
	-1000, 43559, 43779, 6757, 805, 15919, 15919, 15919, 15919, 15919,
	15919, 15919, 15919, 15919, 15919, 15919, 15919, 15919, 15919, 15919,
	15919, 15919, 15919, 15919, 15919, 15919, 15919, 15919, 15919, 15919,
	15919, 15919, 15919, 15919, 15919, 15919, 15919, 1354, 15919, 772,
	15919, 15919, 15919, 15919, 1394, 1152, 430, 1204, -1000, 2132,
	2132, 2132, 43393, 43393, 404, 532, -1000, 15919, -1000, 54,
	15919, 294, 41457, -22, 7461, -1000, -1000, -1000, 14157, 628,
	43120, -10, 5198, -1000, 2176, 890, 1710, 1582, 448, 574,
	555, 551, 433, 15919, 15919, 13805, 13452, 13099, 16623, 12746,
	15919, 8165, 15919, 15919, 15919, 15919, 12393, 12040, -1000, 447,
	-1000, -1000, -1000, -1000, 2174, -1000, -1000, 2165, -1000, 804,
	803, 2163, -1000, -24, -1000, 37893, -1000, 36541, -23, 2095,
	36541, -1000, 172, -1000, 42143, -1000, 172, -57, -1000, 1455,
	1443, 20142, 1558, 1187, 1187, 1187, -1000, 443, 524, 580,
	5682, 11687, -1000, 27352, 1188, 217, 293, 18383, 1657, -1000,
	36541, -42, 1071, -1000, 25650, 2022, 1991, 1959, 28366, 2084,
	54, 1987, 1670, 769, 28366, 1979, 767, 2083, 54, 1669,
	766, 36541, 6757, 1949, 577, -1000, 36541, -1000, -1000, -1000,
	1664, -63, -1000, -1000, 25312, 2094, 1775, -1000, 1109, -1000,
	1773, 2093, 36541, 1280, 1346, -1000, -1000, 822, 1767, 624,
	291, 2092, 291, 20843, -1000, 36541, -1000, 36541, -1000, -1000,
	36541, -1000, 36541, -1000, 36541, 36541, -1000, 36541, 36541, -64,
	43120, 711, 24974, 762, -1000, 661, 25312, 176, -66, -1000,
	865, -1000, -1000, -1000, -1000, 262, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 441, 1073, 437, 437, 437, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 582, -1000, -1000, 631, 631, 631,
	-1000, -1000, -65, -1000, 1656, 598, -72, 705, -24, -1000,
	1303, -1000, 1212, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2191, -1000, 2149, -1000,
	-1000, 2161, -25, -1000, -25, -1000, 6757, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36541, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 265, -1000, -1000, -1000, -1000, -1000, -1000,
	36541, 36541, 36541, -1000, 28366, -1000, 1683, -1000, 1990, 1410,
	1681, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43120,
	-1000, 378, -1000, -1000, 43120, 1161, 1490, -1000, 1490, -27,
	-1000, 42016, 1450, 36541, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 605, 1010, 1010, 806, 806,
	806, 806, 2087, 322, 432, 2473, 3093, 3093, 3093, 3093,
	3093, 3093, 3093, 3093, 358, 1047, 1047, 358, 358, 358,
	358, 358, 3093, 3093, 3093, 43393, 43266, 1206, 15919, 15919,
	761, 1130, 430, 1206, 15919, 1206, 1206, 1206, 1206, -1000,
	975, -1000, -1000, -1000, -1000, 1655, 422, 16623, 16623, -1000,
	-1000, -1000, 7813, 16975, -1000, -1000, -1000, -1000, 420, 15919,
	-1000, 41584, -219, 289, -127, -1000, 15919, 523, -74, -1000,
	873, -1000, 15919, -1000, -11, 15919, 15919, 15919, 287, -1000,
	286, -1000, 755, -1000, 747, 746, 745, -1000, 419, 1184,
	418, 417, 15919, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42993, 39674, 285, -1000, 1651, -127, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 284, -1000, 283, -1000, 42847, -127,
	282, 3657, -1000, 16623, 16623, 16623, 7813, 416, 281, -1000,
	41857, -1000, 42621, 11334, 11334, 11334, 280, 42583, 15919, -127,
	39414, 39286, 39251, -77, -78, -1000, -87, -1000, 2160, -97,
	279, 593, 591, 278, -1000, -1000, 415, -98, 624, 10982,
	19439, 6757, -1000, 624, 10278, -1000, 20142, 20142, 1556, 1433,
	20142, -1000, -1000, -1000, -1000, 27352, 501, 580, 27352, -1000,
	2159, 1460, 275, -1000, -1000, -1000, 36541, 414, -1000, 580,
	274, 963, 36541, 36541, 36541, -1000, -1000, 1345, 37555, 1341,
	43779, 36541, -1000, 411, 410, 1445, 1435, 36541, 36541, 37217,
	36879, 36541, 1027, 54, -1000, 588, 409, 36541, 1018, 587,
	36541, 54, -1000, 408, 36541, 1008, -1000, 586, 1542, 1302,
	-1000, 874, 1649, 36541, 273, -103, -29, 43779, -1000, -1000,
	-1000, -1000, -1000, 36541, 488, 36541, 54, 36541, 24298, 24298,
	54, 36541, 1756, 1844, 559, 36541, 1464, 15919, 1098, -1000,
	19087, 641, 36541, 991, 146, -1000, -1000, -1000, 570, 36541,
	-1000, -1000, 136, 136, -1000, 127, 1247, -30, -1000, 15919,
	-1000, -1000, 36541, 24298, -104, -1000, 664, -1000, 43779, -1000,
	529, 692, -1000, 2158, 615, 24298, 36541, 9574, 9574, -1000,
	1484, -1000, -1000, 939, -1000, 1077, -1000, -1000, -1000, -1000,
	9574, -1000, -43, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1095, -1000, -1000, -1000, 1161, -1000, 15919, 2156, -1000, -1000,
	-1000, 9222, -1000, -1000, -1000, 36541, -110, 15919, 1206, 1206,
	15919, 16623, 16623, -1000, 1206, -1000, -1000, -1000, -1000, -1000,
	1631, 403, 15919, 43779, 3818, 3537, -106, -1000, 15919, -32,
	-1000, 15919, -1000, 41311, -1000, -1000, 526, 1842, -1000, 15919,
	42424, 271, 10630, -1000, 42302, -39, -39, -1000, 2187, 1363,
	1315, 1062, 955, 2153, -1000, 21194, 626, 1224, 41184, 43559,
	43779, -1000, 15919, -1000, -1000, 1627, 15919, -1000, 43559, 43779,
	16623, 16623, 16623, 16623, 16623, 16623, 16623, 16623, 16623, 16623,
	16623, 16623, 16623, 16623, 16623, 16623, 16623, 16623, 16623, 1422,
	16623, 2130, 2130, 2130, -33, 15919, -1000, 1671, 1627, 15919,
	15919, 43779, 268, 258, 257, -1000, 15919, -127, 15919, 15919,
	15919, -1000, -1000, -1000, 256, -1000, 2152, -1000, -1000, -1000,
	-1000, 176, -1000, 1573, -1000, -86, -1000, 1657, -1000, 1573,
	-1000, -1000, 1556, -1000, 402, 15919, 20142, -1000, 522, -1000,
	-114, -1000, 27352, -1000, 521, -206, -1000, 568, -1000, 580,
	400, 36541, 27352, -1000, -1000, -1000, 740, 739, 1755, -1000,
	1339, -1000, 650, -1000, 1022, 15919, 17679, 398, 397, 1159,
	-1000, 1753, 1247, 1749, 1247, -1000, -42, 977, -1000, 21896,
	15919, -1000, 738, 21896, -1000, -1000, 15919, -1000, 731, 21896,
	615, 1612, 846, -1000, 859, -1000, 1529, -1000, 25312, 396,
	36541, 390, -1000, 383, -1000, 617, -1000, 379, 36541, 1404,
	559, 24636, -1000, 617, 991, -1000, 43120, -1000, 991, 8870,
	1945, -115, -1000, -1000, -1000, 624, 20843, 20142, 10278, -117,
	-1000, -1000, -1000, -1000, 43120, -43, 1928, 1928, -1000, 2138,
	-1000, 520, 255, -1000, 28028, -1000, -43, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36541, 6757, 36541, 36541, 1241, 41038,
	-1000, 1944, 6757, 2078, 1206, 3317, 3278, 15919, 43779, 4792,
	-120, 15919, 15919, -1000, 253, 15919, 518, 43120, -1000, -1000,
	-1000, 43120, 15919, 2182, 15919, 251, 249, 240, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 238, -1000, -1000, 38907,
	15919, 233, -1000, 232, 229, 43120, 1671, 43120, -1000, -1000,
	645, 645, 896, 896, 896, 896, 2130, 517, 578, 726,
	2771, 2771, 2771, 2880, 471, 471, 2771, 2771, 2771, 1604,
	1411, 377, 3693, 15919, 228, -1000, -1000, 43120, 43120, 227,
	-1000, -1000, -1000, -127, 4102, 40911, 40765, -1000, 224, 223,
	1565, 2063, -1000, 20142, 1565, -1000, 36541, 43120, -1000, -123,
	-1000, 2129, -1000, -1000, 1460, -1000, 6048, 27352, 36541, -125,
	-1000, 36541, 36541, 36541, 1744, -1000, 1427, -1000, 40638, -126,
	-1000, 321, 2025, 15919, -1000, -1000, 376, 17679, 36541, -1000,
	1451, 1442, 681, 36541, -1000, 36541, -1000, 36541, 36541, 36541,
	-1000, 375, -10, -128, 36541, -1000, -131, 36541, -1000, -1000,
	24298, 714, -1000, 1145, 1536, -1000, 17679, 373, 36541, 25312,
	2091, -1000, 17679, 1274, 1406, 559, 24636, -1000, 822, -1000,
	-1000, -46, -1000, 388, 54, 991, -1000, -49, -1000, 567,
	1902, -1000, 1899, 472, -1000, -1000, -54, 372, -1000, 563,
	561, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1944, 15919,
	15919, 4792, -133, -1000, 1206, 1206, -1000, 40492, -1000, 43120,
	-1000, 42302, -1000, -1000, -1000, -1000, 1135, -1000, 40365, -1000,
	-1000, -1000, -1000, 16623, 1603, 366, 43779, 40219, -1000, -1000,
	15919, -1000, -1000, -1000, -1000, 619, 15919, 15919, 1657, 619,
	-136, 580, -1000, -1000, -1000, 2126, -1000, -139, -1000, -1000,
	-1000, -1000, 36541, -1000, 36541, -1000, 6757, 36541, 1571, 1318,
	-1000, -1000, 1412, 360, 16623, 36541, -1000, 1125, 17679, 1944,
	-10, 6757, 1944, 39993, 5198, -141, -142, 1309, -1000, 1307,
	15919, -1000, 43779, 1247, 1247, -1000, 728, 719, 15919, 718,
	-1000, 717, -1000, -58, 21896, -1000, -1000, 2060, 1173, -144,
	17679, -147, 222, 54, -149, 36541, -1000, 559, 24636, -1000,
	1844, 1851, 36541, 1954, -1000, -1000, 357, 345, 344, -1000,
	27690, 27690, 24298, 24298, -1000, 1206, 1206, -1000, -1000, 221,
	1224, 2056, -1000, 2822, 16623, 43779, -154, -1000, 39955, -1000,
	36541, 43120, -127, -1000, -1000, 27352, 434, -1000, -1000, 1230,
	-1000, -1000, 36541, 1323, -1000, -1000, 15919, 3693, 342, 1529,
	340, -1000, -1000, -1000, -1000, -1000, -1000, 2025, -11, -1000,
	1066, -1000, -1000, 43120, 2020, -1000, -1000, 36541, 36541, -39,
	339, 338, -1000, 1103, 36541, 1125, -155, -1000, 1529, -1000,
	1125, 336, 24636, -1000, 1404, 792, -157, 36541, -1000, -1000,
	7107, 24298, 24298, -1000, -162, -1000, -1000, -1000, 1043, 15919,
	2822, -163, -1000, -1000, -116, -1000, 2088, -1000, -1000, -1000,
	-1000, 1743, 39796, 1368, 36541, -1000, 36541, 1944, 218, 36541,
	654, 6757, -1000, -1000, 214, 15919, 15919, 333, 331, 330,
	1529, 1125, -1000, 1529, 17679, -1000, 1406, 917, -1000, 624,
	-1000, -164, -172, -1000, 207, 16271, 16271, -127, -1000, 36541,
	329, 1718, -1000, 1245, 1121, 203, -175, -1000, -1000, 328,
	-1000, 15919, -1000, 2182, -177, -178, 36541, 36541, 36541, -1000,
	1529, -1000, -183, -1000, 20843, -1000, 615, 615, -1000, -1000,
	-1000, 17327, 1219, 984, 41730, -1000, -1000, -1000, 36541, -1000,
	1253, 1246, 904, -1000, -1000, -1000, -1000, -1000, 1368, 43120,
	-1000, -1000, -185, -186, -188, -1000, 1125, -170, -1000, -1000,
	2105, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1884, -1000,
	672, 1232, 1232, 1245, 325, 324, 1229, 1529, -1000, 15567,
	-1000, 2112, -1000, -1000, 1430, -1000, -1000, 1127, 1112, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 201, 6757, 196,
	6757, -1000, 639, -1000, 637, 306, 1384, -40, 9926, 808,
	355, -138, -1000, -191, -1000, 43120, -1000, -1000, 305, -1000,
	9926, 1127, -1000, 9926, 9926, -193, -1000, -1000, -196, -1000,
	-47, 1112, -169, -1000, -1000, 1112, -1000,
}
var sqlPgo = [...]int{

	0, 2647, 2646, 1682, 2086, 2644, 2624, 2618, 2617, 2616,
	2615, 2613, 2611, 2610, 2609, 2608, 2607, 2606, 2602, 2597,
	2595, 2594, 2593, 2540, 2071, 2533, 2065, 2527, 2522, 2516,
	2514, 2511, 2510, 2508, 2032, 2507, 2505, 2504, 2503, 2019,
	2499, 2017, 2498, 2010, 2497, 2496, 2495, 2494, 2493, 2001,
	2490, 91, 114, 1983, 2487, 2482, 1966, 1964, 1961, 2481,
	1939, 2480, 2479, 1899, 1886, 2478, 73, 2476, 2473, 2469,
	1808, 1798, 2466, 2456, 2453, 157, 2452, 1792, 2444, 2441,
	2439, 2436, 2435, 2434, 2430, 2429, 2424, 2423, 2413, 2410,
	2409, 2403, 2402, 2400, 2399, 2398, 2397, 166, 2396, 2395,
	1761, 1753, 2384, 2383, 31, 26, 77, 67, 27, 169,
	3311, 158, 2382, 2380, 2379, 2378, 2374, 2372, 20, 106,
	108, 2368, 150, 2365, 2359, 44, 39, 16, 15, 75,
	102, 2358, 2357, 2598, 28, 2355, 2354, 145, 2351, 35,
	23, 2705, 161, 160, 120, 130, 2350, 2343, 2342, 54,
	127, 8, 6, 4, 30, 2, 2341, 18, 1, 2340,
	2335, 14, 100, 40, 2332, 53, 24, 2326, 2325, 135,
	2323, 71, 103, 1601, 118, 142, 9, 98, 2321, 68,
	7, 62, 2320, 2318, 164, 45, 2315, 32, 86, 153,
	123, 2314, 61, 167, 133, 84, 138, 141, 2313, 2311,
	2309, 165, 2307, 126, 93, 2305, 2303, 82, 2301, 104,
	148, 2300, 147, 121, 2299, 2294, 96, 2290, 134, 2289,
	2286, 162, 152, 122, 19, 41, 70, 33, 1603, 1583,
	143, 85, 58, 56, 2285, 1478, 1307, 1121, 87, 112,
	99, 63, 113, 59, 92, 154, 50, 2284, 2283, 140,
	2282, 2281, 2280, 2279, 2278, 110, 2276, 2272, 17, 2271,
	83, 34, 57, 90, 38, 55, 132, 119, 159, 111,
	2269, 94, 129, 2268, 109, 2267, 2266, 1052, 125, 2265,
	2264, 2263, 487, 81, 78, 29, 2261, 2260, 64, 52,
	2258, 2257, 95, 2255, 124, 116, 101, 151, 363, 115,
	2252, 128, 22, 2249, 43, 21, 0, 330, 324, 2248,
	131, 76, 2247, 2246, 2245, 2244, 25, 36, 10, 5,
	48, 46, 107, 105, 2242, 2241, 139, 88, 79, 2240,
	163, 2239, 2237, 2236, 49, 2235, 13, 2233, 11, 2230,
	2225, 12, 3, 2224, 2222, 146, 2220, 97, 2218, 2042,
	2217, 156, 2215, 2214, 1726, 2211, 37, 117,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 120, 120, 119, 119,
	119, 119, 119, 119, 119, 119, 119, 119, 119, 119,
	119, 119, 119, 117, 117, 122, 122, 122, 124, 124,
	121, 121, 116, 116, 24, 24, 64, 64, 107, 57,
	57, 57, 304, 304, 305, 305, 103, 103, 104, 104,
	104, 104, 105, 105, 106, 106, 106, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 41, 41, 42, 42, 42, 42,
	42, 42, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 48, 48, 48, 46, 46, 46, 45,
	45, 45, 44, 44, 44, 47, 47, 47, 175, 175,
	174, 174, 178, 178, 49, 49, 49, 49, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 52, 52, 52, 52,
	52, 52, 52, 273, 273, 272, 50, 50, 247, 247,
	53, 53, 202, 202, 54, 54, 54, 54, 54, 55,
	55, 65, 65, 345, 345, 345, 349, 349, 350, 350,
	351, 351, 351, 351, 351, 351, 351, 347, 347, 60,
	60, 60, 60, 61, 61, 61, 62, 62, 102, 102,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 29,
	30, 71, 71, 71, 73, 70, 70, 70, 72, 72,
	72, 72, 74, 74, 75, 75, 75, 75, 75, 76,
	76, 298, 296, 296, 297, 297, 147, 147, 147, 147,
	147, 148, 148, 148, 303, 303, 303, 303, 303, 303,
	302, 302, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 89,
	89, 89, 97, 97, 97, 97, 97, 97, 97, 78,
	78, 83, 83, 83, 83, 83, 79, 79, 84, 84,
	85, 85, 86, 86, 86, 86, 86, 86, 80, 80,
	80, 80, 88, 88, 88, 88, 87, 87, 93, 93,
	93, 93, 93, 93, 90, 90, 90, 90, 91, 91,
	91, 94, 94, 94, 94, 81, 81, 82, 82, 95,
	95, 96, 96, 96, 96, 96, 92, 92, 92, 346,
	346, 348, 348, 58, 58, 37, 37, 38, 38, 149,
	149, 150, 150, 226, 226, 226, 226, 151, 151, 123,
	123, 123, 152, 152, 153, 153, 154, 154, 154, 156,
	156, 157, 157, 158, 158, 158, 155, 155, 155, 225,
	314, 314, 315, 315, 315, 315, 315, 315, 316, 316,
	316, 316, 316, 316, 316, 312, 312, 313, 310, 310,
	311, 311, 311, 311, 352, 352, 224, 224, 161, 161,
	317, 317, 317, 317, 318, 318, 318, 318, 318, 321,
	320, 319, 319, 319, 319, 319, 259, 259, 259, 99,
	99, 39, 39, 39, 129, 129, 40, 40, 36, 36,
	36, 206, 206, 165, 165, 264, 264, 264, 140, 140,
	118, 118, 118, 17, 13, 13, 13, 13, 13, 13,
	23, 23, 21, 21, 207, 207, 208, 208, 59, 59,
	63, 63, 68, 68, 98, 98, 98, 98, 98, 98,
	25, 25, 25, 25, 31, 31, 31, 31, 67, 67,
	354, 354, 136, 136, 136, 136, 137, 137, 221, 221,
	222, 222, 355, 355, 223, 223, 223, 131, 130, 132,
	132, 35, 35, 35, 125, 125, 126, 126, 127, 127,
	128, 128, 356, 356, 56, 56, 56, 101, 101, 143,
	143, 218, 218, 218, 220, 220, 219, 219, 219, 192,
	192, 192, 100, 100, 170, 170, 180, 180, 181, 181,
	270, 182, 182, 66, 66, 110, 110, 108, 108, 108,
	108, 108, 108, 108, 108, 109, 109, 109, 111, 111,
	111, 111, 111, 111, 111, 114, 114, 114, 115, 115,
	115, 113, 113, 327, 327, 327, 330, 330, 326, 328,
	328, 329, 329, 353, 353, 193, 193, 193, 160, 159,
	159, 163, 163, 162, 164, 164, 263, 263, 263, 190,
	190, 189, 189, 189, 189, 211, 211, 209, 209, 210,
	210, 214, 214, 215, 215, 215, 216, 216, 217, 217,
	188, 188, 243, 243, 213, 213, 212, 112, 112, 112,
	169, 169, 169, 171, 171, 233, 233, 233, 234, 234,
	232, 232, 232, 232, 265, 265, 265, 265, 265, 265,
	265, 265, 343, 343, 343, 344, 344, 262, 262, 266,
	266, 266, 266, 266, 266, 260, 260, 260, 260, 261,
	261, 271, 271, 196, 196, 196, 196, 194, 194, 195,
	195, 267, 267, 267, 267, 191, 191, 268, 268, 268,
	227, 227, 274, 274, 274, 292, 292, 168, 168, 168,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 275, 275, 275, 275, 275, 275, 275, 275, 275,
	275, 276, 276, 276, 276, 278, 278, 278, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 291, 291, 291, 291,
	291, 279, 279, 286, 286, 287, 287, 288, 289, 280,
	280, 281, 281, 282, 283, 290, 290, 290, 290, 294,
	294, 284, 284, 284, 284, 284, 285, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 204, 204, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 236, 236, 237, 237, 237, 237, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	322, 322, 322, 322, 322, 322, 322, 322, 324, 324,
	325, 325, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 331, 331, 332, 332, 334, 334, 335, 335,
	336, 337, 337, 337, 338, 339, 339, 333, 333, 340,
	340, 340, 341, 341, 342, 342, 342, 342, 342, 249,
	249, 250, 251, 257, 257, 257, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 138, 138, 138, 138, 138, 177, 177, 176,
	176, 246, 246, 244, 244, 248, 248, 197, 197, 293,
	293, 293, 293, 293, 293, 293, 198, 198, 198, 205,
	199, 199, 200, 200, 200, 200, 200, 240, 241, 201,
	201, 201, 242, 242, 252, 256, 256, 255, 254, 254,
	253, 253, 230, 230, 231, 231, 229, 228, 185, 185,
	184, 184, 183, 183, 357, 357, 258, 258, 186, 186,
	187, 179, 179, 269, 269, 269, 269, 172, 172, 145,
	145, 173, 173, 141, 141, 144, 144, 142, 142, 142,
	142, 166, 166, 167, 167, 139, 139, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 295, 295,
	295, 245, 133, 133, 133, 134, 134, 135, 135, 300,
	300, 300, 301, 301, 301, 301, 299, 299, 299, 299,
	299, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 3, 1, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	4, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 4, 3,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 2,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 2,
	3, 7, 7, 7, 4, 5, 5, 5, 5, 2,
	0, 2, 0, 3, 2, 8, 10, 6, 9, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 1,
	1, 0, 1, 0, 9, 9, 6, 7, 5, 3,
	5, 1, 3, 1, 1, 1, 10, 11, 9, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	2, 4, 7, 3, 3, 0, 6, 3, 11, 14,
	4, 1, 0, 1, 3, 3, 3, 5, 2, 0,
	1, 1, 0, 6, 6, 8, 8, 10, 8, 10,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 2, 2, 2, 2,
	1, 0, 1, 3, 2, 0, 2, 1, 1, 0,
	1, 3, 1, 0, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 3, 0, 3, 0, 3, 0,
	3, 0, 1, 0, 6, 7, 3, 6, 3, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	2, 0, 8, 3, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 4,
	4, 2, 3, 5, 5, 2, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 8, 8, 2, 4, 4,
	4, 2, 2, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 4, 5, 1,
	0, 2, 2, 1, 1, 1, 0, 2, 5, 2,
	3, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	3, 0, 2, 0, 1, 0, 2, 2, 2, 3,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 381, -4, -24, -26, -29, -32,
	-33, -54, -41, -42, -43, -53, -49, -55, -56, -57,
	-58, -50, -64, -63, -65, -68, -66, -59, -60, -69,
	-77, -98, -99, -100, -101, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -39, -34, 73,
	94, -329, 98, -44, -45, -46, -48, -47, 102, 109,
	112, 134, 145, 231, 237, 258, 260, 262, 269, -108,
	-110, 256, -61, -62, -70, -71, -72, -73, -102, 281,
	-78, -79, -80, -81, -82, -83, -84, -85, -86, -87,
	-88, -89, -90, -91, -92, -93, -94, -95, -96, 284,
	-25, -31, -67, 323, -11, -12, -15, -14, -16, -13,
	-20, -22, -19, -21, -23, -17, -18, -10, 111, -35,
	-36, -37, -38, -40, -327, -111, -109, 378, 257, 332,
	35, 293, 61, 105, 264, 348, 355, -114, -112, -113,
	-115, 274, 340, 303, 382, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 2, 303,
	343, 87, 153, 242, -345, 2, -173, 303, 87, -142,
	-133, 371, 4, -306, -308, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 67,
	64, 65, 66, 69, 71, 72, 75, 76, 77, 85,
	86, 88, 90, 94, 96, 98, 101, 102, 104, 109,
	111, 110, 112, 122, 123, 128, 130, 135, 141, 142,
	145, 146, 154, 157, 159, 152, 169, 170, 171, 175,
	176, 177, 180, 179, 184, 185, 188, 189, 192, 194,
	196, 197, 200, 198, 202, 203, 205, 204, 210, 212,
	213, 215, 218, 221, 224, 227, 228, 229, 230, 231,
	233, 235, 237, 239, 240, 241, 242, 243, 245, 246,
	248, 249, 250, 251, 252, 256, 254, 255, 257, 258,
	259, 260, 262, 264, 265, 267, 282, 283, 294, 269,
	270, 271, 272, 273, 277, 275, 278, 279, 281, 284,
	286, 289, 292, 293, 295, 298, 299, 296, 291, 302,
	304, 305, 306, 307, 308, 309, 310, 311, 318, 319,
	323, 324, 325, 326, 329, 330, 331, 332, 334, 337,
	338, 339, 344, 349, 350, 351, 352, 353, 28, 36,
	37, 38, 39, 41, 42, 45, 46, 51, 52, 53,
	56, 89, 91, 92, 108, 113, 114, 124, 125, 126,
	136, 138, 147, 148, 151, 158, 160, 161, 162, 163,
	164, 166, 173, 174, 182, 199, 209, 211, 222, 226,
	234, 236, 244, 266, 276, 287, 288, 297, 300, 313,
	314, 315, 320, 321, 336, 340, 341, 381, 381, 2,
	170, 241, -141, -133, 87, 381, 2, 303, 333, 343,
	-206, 87, 328, -133, 237, 22, 2, 96, 157, 331,
	330, 22, 233, 275, 305, 307, 2, 381, 381, 381,
	381, 381, 2, 343, 303, 153, 87, 333, -133, 2,
	-52, 2, 378, -51, -4, -34, -43, -53, -49, -24,
	-26, -39, -41, -57, -56, -58, -60, -64, -63, -66,
	-70, -71, -77, -100, -101, 73, 281, 111, -349, 2,
	22, -350, -351, 73, 102, 134, 274, 157, 96, 330,
	303, 2, 170, 2, -133, 2, -345, 2, 170, 2,
	-349, 2, -133, 2, -137, 2, 269, -133, 381, 381,
	381, 381, 381, 189, 55, 266, 278, -75, 319, -74,
	313, -298, -76, 2, -174, 200, -133, 381, 381, 381,
	381, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 2, -97, 278, 34, 55, 22,
	60, 88, 135, 153, 154, 176, 68, 69, 240, 189,
	171, 318, 177, 279, 304, 319, 73, 334, 308, 110,
	4, 87, 200, 280, 313, 381, 381, 381, -353, 2,
	303, 271, 284, 381, 381, 381, 381, 381, -109, -111,
	-110, -162, -163, 327, 165, 107, 220, -108, -110, 2,
	-327, -97, 278, 2, 55, 22, -296, 2, -258, 216,
	-235, 93, -237, 369, 370, 364, 206, 354, -249, -239,
	-252, 108, 266, 378, -141, -238, 384, 9, -324, -110,
	29, -250, -251, 49, -133, 7, 8, 5, 6, -139,
	-276, -245, -285, 322, 115, 208, -322, -323, 4, -306,
	-300, -277, -287, -281, -284, 166, 58, 79, 80, 83,
	81, 84, 280, 333, 50, 28, 113, 114, 226, 234,
	300, 320, 321, 147, 209, 148, 56, 136, 182, 101,
	37, 39, 41, 42, 51, 52, 89, 91, 92, 124,
	125, 126, 158, 160, 161, 162, 163, 164, 211, 244,
	287, 297, 314, 315, 341, -307, -288, -289, -282, -283,
	74, 116, 133, 156, 149, 168, 172, 183, 186, 195,
	201, 223, 225, 263, 285, -290, -354, 2, 319, 319,
	2, -354, 2, -354, 2, -136, 2, 319, 316, -330,
	245, -326, -133, -330, 381, 381, 383, 381, -159, -160,
	2, 22, 99, -187, 2, 378, -265, 2, 376, -267,
	-141, -110, -266, 378, 217, -3, 2, -267, 147, -141,
	2, -267, 147, -141, 2, -133, 2, -144, 147, -141,
	-299, 4, -306, -308, -307, -309, 58, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 68, 73, 78, 79, 81, 80, 82, 83,
	84, 93, 95, 97, 99, 100, 103, 105, 107, 115,
	117, 129, 131, 132, 134, 137, 139, 150, 153, 155,
	165, 167, 178, 181, 187, 190, 191, 206, 207, 208,
	214, 216, 217, 219, 220, 232, 238, 247, 261, 274,
	280, 290, 301, 303, 312, 316, 317, 322, 327, 328,
	333, 335, 342, 343, 345, 346, 347, 348, 316, 383,
	-173, -166, -133, -229, -228, 380, -235, 2, -235, 2,
	132, 378, -184, -185, -228, -229, 2, -174, 147, -304,
	147, 2, -302, 9, -301, 5, 4, -306, -308, -307,
	-174, 2, 153, -133, 147, 2, -133, 22, 132, 2,
	167, 2, 167, 2, -268, 2, -267, -175, 147, 2,
	-174, -175, 147, 2, -145, 147, 2, -144, -133, 147,
	2, -166, 147, 2, -202, 378, -273, 2, -272, -301,
	340, 381, 381, 381, 381, 381, 381, 381, 381, 381,
	381, 381, 381, 381, 278, 216, 383, -174, -235, -247,
	378, 132, -235, 216, -133, 2, 282, 2, 378, -75,
	53, 319, -222, 2, -223, -130, -131, -132, 169, 239,
	243, 353, 316, 359, 132, -296, -178, 380, -97, 2,
	-304, 2, 282, 2, 240, 279, 55, 132, 2, 2,
	-346, 2, 216, 132, 2, 132, 2, 132, 2, 132,
	2, 132, 2, 2, 240, 279, 2, 129, 2, 318,
	2, 2, 132, 2, 169, 239, 294, 2, 303, 343,
	2, 132, 132, 353, 2, -191, -267, 303, 353, 22,
	-162, -163, -212, -189, 129, -209, -210, 187, 117, 214,
	-193, 22, 99, -193, -193, 44, 379, 379, -97, 282,
	2, 10, 11, 57, 33, 369, 370, 371, 372, 127,
	373, 374, 367, 368, 366, 357, 358, 361, 362, 363,
	70, 360, 359, 63, 193, 268, 118, 119, 120, 121,
	253, 13, 14, 15, 26, 219, 186, 354, 149, 285,
	364, 16, 17, 18, 168, 36, 150, -138, -146, -235,
	-235, -235, -235, -235, 225, -183, -230, 376, -110, 378,
	378, -110, -235, -176, 378, 7, -110, -244, 376, -253,
	-235, -184, 378, 5, 378, 5, -331, 349, 129, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 378, 378,
	378, 378, 378, 378, 378, 378, 378, 378, 236, -294,
	344, -294, -294, -278, 378, -278, -279, 378, -278, 350,
	355, 378, -221, -222, -221, 316, -137, 383, -330, -167,
	378, -187, -179, -269, -235, 371, -179, -186, -258, 74,
	-196, 172, 201, 133, 183, 263, 156, 7, -52, -232,
	384, 378, 371, -262, 355, -110, -266, 378, -265, -141,
	378, -120, 254, -119, 21, 23, 102, 338, 108, 291,
	309, 111, 270, 254, 108, 111, 254, 291, 309, 270,
	254, 108, 384, 111, -304, -142, 383, -299, 371, 295,
	379, -172, -141, -185, 378, -161, 206, -129, -328, 348,
	206, -161, 378, -134, 147, 2, -133, -328, 206, -268,
	-143, -141, -143, 281, -133, 30, -122, 383, 48, 259,
	108, -122, 108, -122, 383, 108, -122, 108, 108, -176,
	-235, 379, 383, -345, -351, 73, 378, 30, -246, -274,
	-275, -277, -286, -280, -284, -285, 40, 46, 45, 174,
	173, 310, 199, 276, 288, 336, 151, 38, 215, 159,
	4, 158, 160, 161, 162, 163, 164, 287, 37, 244,
	125, 126, 124, 101, 92, 91, 211, 42, 41, -288,
	-289, -282, -283, 89, 314, 315, 166, 39, 52, 51,
	341, 297, -305, -304, -345, -298, -176, 30, -222, 2,
	-355, 383, 185, -148, 192, 205, 141, 217, 351, -303,
	5, 4, -245, -259, 93, 189, -285, 8, 370, -295,
	7, 369, -297, -296, -297, 77, 380, -299, -174, 22,
	283, 2, -298, -348, 129, -345, -298, -298, -298, -298,
	-298, 278, -52, 129, -133, 185, -298, 2, -298, 2,
	303, 153, 303, -122, 383, -304, 64, 65, 353, -212,
	-189, -190, -189, -213, -212, 330, -210, -209, -214, -235,
	22, -217, 123, 202, -235, -237, -109, -109, -109, -164,
	-263, -235, 238, 153, -298, -292, -274, -291, 249, 250,
	248, 252, 251, -274, -299, 313, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, -235, -235,
	-235, -235, -235, -235, -235, -235, -235, -235, 186, 149,
	285, 36, 150, -235, 316, -235, -235, -235, -235, 198,
	206, 208, 322, 115, 329, 99, 212, -357, 301, 32,
	-242, -110, 378, -257, 27, 290, 22, -249, 266, 378,
	-230, -235, -231, -177, -176, 379, 383, -177, -248, -244,
	-256, -255, 345, 379, -176, 342, 22, 99, 371, 2,
	7, -203, 352, 197, 90, 142, 196, -204, 273, -332,
	122, 137, 378, 379, 2, 379, 2, 379, 2, 379,
	2, -235, -235, -197, 2, -293, -176, 4, 352, 197,
	90, 142, 196, 273, -197, 2, -198, 2, -235, -176,
	-199, -236, -237, 369, 370, 364, 378, 266, -200, 2,
	-235, -177, -235, 43, 181, 317, -201, -235, 132, -176,
	-235, -235, -235, -176, -176, 2, -176, 2, 378, 7,
	7, 313, 313, 7, -137, -326, 30, -166, -169, 383,
	132, 30, 4, -169, 383, 379, 172, 172, -265, -196,
	172, -194, 223, -194, -194, -343, 378, 377, -262, -299,
	376, 385, -177, 2, -261, -260, 30, -133, 221, 379,
	-141, 383, 316, -207, 68, 59, -225, 147, 59, -310,
	-133, 68, -311, 54, 328, 238, 131, -207, 68, -207,
	68, 68, -267, 33, -66, 66, 132, 316, -267, 66,
	316, 33, -66, 132, 316, -144, -299, 66, -271, 356,
	-133, 132, 379, 383, -149, -166, -150, -133, -226, -225,
	-312, -313, -310, 153, 328, 116, 30, 108, 230, 108,
	30, 216, 206, -125, 306, 108, -227, 346, -218, -66,
	378, 93, 30, -218, -180, -181, -270, -182, -141, 378,
	-133, -174, -175, -175, -144, -145, -133, -166, 379, 383,
	-52, -272, 316, 335, -150, -51, 73, 379, 383, -168,
	29, 376, -203, 378, -271, 383, 132, 359, 316, 379,
	319, -223, -147, 243, 289, 255, 277, 8, 7, 7,
	383, -299, -347, -133, 278, -52, -141, -144, -141, -267,
	129, 65, -190, -213, -215, -295, 378, 370, -216, 266,
	267, 383, -118, 31, 97, 175, -141, 353, -235, -235,
	316, -357, 301, -242, -235, 198, 208, 322, 115, 329,
	99, 212, 132, 378, -236, -236, -176, -239, 378, -176,
	377, 387, 379, -235, 377, 377, 383, -254, -255, 103,
	-235, -163, 383, -162, -235, -176, -176, 379, 379, 316,
	316, 316, 316, 378, -337, 224, 378, 378, -235, 30,
	383, 379, 132, 379, 379, -205, 232, 379, 10, 11,
	369, 370, 371, 372, 127, 373, 374, 367, 368, 366,
	357, 358, 359, 63, 193, 268, 13, 14, 15, 168,
	150, -236, -236, -236, -176, 378, 379, -240, -241, 132,
	129, 30, -201, -201, -201, 379, 132, -176, 383, 383,
	383, 379, 379, 379, 7, 379, 383, 379, 353, 353,
	379, 378, 379, -227, -269, -171, 2, -265, -299, -227,
	-258, -265, -265, -195, 335, 216, 172, -265, -260, 379,
	-344, 7, -262, -261, 7, -234, -233, 130, 204, 379,
	-133, 378, -262, 379, -119, -141, -133, -133, 206, -225,
	147, -124, 206, -274, -133, 378, 378, 175, 175, -133,
	-133, 147, -133, 147, -133, -133, -120, 254, -66, 353,
	378, -141, 254, 353, -133, -66, 378, -133, 254, 353,
	-103, 146, 212, 295, 132, -141, 379, 379, 383, -134,
	153, -134, -66, -174, -304, -304, -66, -141, 108, -126,
	104, -356, 359, -133, -211, -209, -235, -192, -220, 261,
	216, -172, 340, -133, -192, -170, 383, 132, 359, -172,
	-122, -122, -122, -122, -235, -347, -304, 379, -274, 376,
	377, 7, 7, -106, 348, -304, -347, -296, -296, -130,
	326, 62, 243, -296, 383, 242, 87, 303, -216, -235,
	-263, -141, 384, -235, -235, -236, -236, 132, 378, -235,
	-246, 26, 26, 379, -177, 383, -231, -235, 379, -244,
	105, -235, 312, 379, 342, -163, -163, -163, 5, 197,
	142, 196, -204, 196, -204, -204, 7, -338, -133, 378,
	346, -162, 379, -292, -274, -235, -240, -235, -292, -274,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, -236,
	-236, -236, -236, -236, -236, -236, -236, -236, -236, 99,
	206, 212, -236, 383, -177, -241, -240, -235, -235, -274,
	379, 379, 379, -176, -235, -235, -235, 379, 7, -51,
	-188, 137, -271, 383, -188, -195, 378, -235, -265, 377,
	379, 383, -261, 377, 383, 386, 359, -262, 378, -166,
	-260, 316, 316, 108, 206, 337, -314, -311, -235, -165,
	-264, -133, -325, 378, -322, -323, -139, 378, 378, -117,
	102, 281, -208, 108, -122, 108, -122, 316, -207, 68,
	-238, -139, -133, -176, 316, -238, -176, 316, -238, -106,
	132, 302, 295, -151, 152, -226, 378, -134, 378, 378,
	-161, -129, 378, -133, -127, 180, -356, -302, -328, -192,
	-192, -179, 207, 67, 379, -227, -181, -171, -258, 379,
	-107, 75, -107, 7, 377, 379, -105, 218, -104, -133,
	5, -133, -299, -133, -141, 217, 379, -118, -299, 26,
	26, -235, -246, 379, -235, -235, 379, -235, 377, -235,
	5, -235, 379, 379, 379, 379, -339, -133, -235, 379,
	379, 379, -241, 132, 99, 212, 378, -235, 379, 379,
	383, 379, 379, 379, 379, -243, 139, 44, -265, -243,
	-166, -232, 7, -233, -299, 376, -261, -166, 379, -133,
	-133, -225, 108, -315, 68, -316, 57, 116, 73, 206,
	208, 328, 238, 54, 93, 247, 379, 379, 383, -140,
	-184, 57, -140, -235, 378, -165, -166, 206, 93, 206,
	93, 86, 324, -133, -133, -141, -133, -133, 378, 379,
	-141, 379, -133, -305, 313, -152, -153, 229, 150, -165,
	378, -166, -149, 30, -165, 216, -128, 179, -356, -302,
	-125, -219, 378, 216, -66, -192, 359, 86, 86, 377,
	383, 378, 359, 359, -118, -235, -235, 379, 379, -163,
	-333, 229, 379, -236, 132, 378, -246, 379, -235, -334,
	347, -235, -176, -334, 379, -262, 7, 379, -225, -133,
	-299, -133, 116, 147, 208, 175, 378, -236, -141, -224,
	-352, 72, 299, -264, -118, -299, -118, 379, -176, 379,
	379, 208, 208, -235, -274, -122, -122, 316, 316, -176,
	316, 316, -238, 44, 227, 379, -165, 379, 379, -66,
	379, -141, -356, -302, -126, 100, -166, 68, -187, -110,
	378, 378, 378, -104, -105, -304, -304, 379, -163, 44,
	-236, -246, 379, 379, -335, -336, -133, -261, 377, -316,
	-134, 206, -235, -135, 378, -151, 378, -140, -163, 247,
	-121, 57, -133, -133, -163, 378, 378, 188, 242, -141,
	-224, 379, -151, -224, 378, -302, -127, 330, 207, 379,
	-133, -305, -305, 379, -340, 242, 267, -176, 379, 383,
	30, 108, 379, -317, 194, -133, -166, -118, 379, -141,
	-116, 335, -299, 379, -176, -176, 378, 378, 378, -151,
	-224, -151, -165, -128, 281, -227, 379, 379, 379, -341,
	-342, 36, 325, 77, -235, -341, -336, -338, 116, -318,
	-321, -320, 216, 133, 228, 286, 379, 379, -161, -235,
	379, 379, -166, -166, -166, -151, 379, -180, -106, -106,
	-342, 235, 128, 266, 235, 128, -133, -320, 216, -321,
	216, 330, 96, -317, 379, 379, 379, -224, -227, 26,
	-319, 203, 259, 48, 281, -319, -318, 378, 378, -123,
	48, 259, -151, -342, 20, 208, 93, -154, 229, -155,
	229, 379, -299, 379, -299, 340, 340, -156, 378, 184,
	383, -153, -152, -157, -158, -235, 93, 195, 311, -154,
	378, 383, 379, 383, 378, -157, -154, -158, -157, 379,
	379, 383, -153, -152, -155, 383, -155,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 309, 0, 159, 161, -2,
	0, 0, 0, 182, 184, 186, 188, 190, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 673,
	-2, 0, 289, 291, 300, 302, 304, 306, 307, 0,
	352, 354, 356, 358, 360, 362, 364, 366, 368, 370,
	372, 374, 376, 378, 380, 381, 383, 385, 387, 0,
	594, 596, 598, -2, 65, 66, 67, 68, 69, 70,
	78, 79, 80, 81, 72, 74, 75, 77, 0, 163,
	165, 167, 169, 172, 711, -2, 722, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 688, 690, 692,
	694, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 273, 0, 1297, 1221,
	1227, 1228, 1252, 1253, 1254, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 151, 153, 154,
	0, 0, 0, 1223, 1297, 160, 162, 0, 0, 0,
	0, 0, 561, 264, 1359, 266, 268, 0, 0, 0,
	0, 176, 177, 178, 179, 180, 181, 183, 185, 187,
	189, 191, 192, 0, 0, 0, 0, 0, 263, 261,
	214, 215, 0, 246, 247, 248, 249, 250, 252, 218,
	220, 221, 223, 225, 227, 229, 231, 232, 234, 236,
	237, 239, 241, 242, 244, 562, 0, 0, 0, 270,
	276, 277, 278, 280, 281, 282, 283, 284, 285, 286,
	0, 131, 0, 464, 259, 257, 0, 127, 0, 591,
	0, 272, 592, 593, 588, 589, 1386, 617, 290, 292,
	301, 303, 305, -2, -2, 1480, -2, 316, -2, 324,
	1486, 0, 327, 328, 331, -2, 210, 353, 355, 357,
	359, 361, 363, 365, 367, 369, 371, 373, 375, 377,
	379, 382, 384, 386, 388, 389, 0, 0, 0, 393,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	392, 394, 395, 396, 0, 595, 597, 599, 0, 550,
	713, 0, 0, 164, 166, 168, 170, 173, -2, 686,
	687, -2, 0, 717, 717, 717, 0, 0, 687, 685,
	0, 293, 0, 295, 0, 393, 298, 299, 332, 333,
	1206, 1207, 923, 0, 0, 0, 0, 0, 0, 1025,
	1027, 1451, 1480, 0, 1029, 1030, 0, 1032, 1034, 1035,
	0, 1038, 1039, 1191, 1223, 1237, 1238, 1239, 1240, 0,
	0, 1243, 0, 1245, 1246, 1247, 1093, 1049, -2, -2,
	1235, 851, 852, 853, 854, -2, 1494, 1053, 1056, 1059,
	1062, 1063, 1066, 1067, 0, 1435, 1452, 1453, 1476, 1477,
	1485, 1489, 1490, 1459, 1473, 1460, 1447, 1457, 1471, 1303,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1261, 885, 886, 891, 892,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 894, 619, 601, 610, 619,
	603, 604, 605, 606, 607, 608, 609, 612, 0, 703,
	1365, 706, 1234, 704, 689, 691, 0, 693, 0, 0,
	697, 719, 718, 757, 758, 0, 701, 702, 712, 773,
	811, 788, 779, 0, 0, 2, 71, 0, 1459, 811,
	73, 0, 1459, 811, 76, 0, 82, 0, 1459, 1226,
	0, 1266, 1267, 1268, 1269, 1270, 1494, 1510, 1511, 1512,
	1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
	1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
	1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
	1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
	1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
	1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
	1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582,
	1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 0, 0,
	274, 275, 1231, 1229, 1230, 0, 155, 156, 157, 158,
	0, 0, 1224, 1200, 1198, 1199, 171, 529, 1459, -2,
	1459, 553, 132, 133, 350, 351, 1262, 1263, 1264, 1265,
	529, 557, -2, 710, 1459, 633, 265, 267, 0, 175,
	0, 646, 0, 648, 0, 663, 817, 117, 1459, 195,
	208, 117, 1459, 198, 117, 1459, 201, 1219, 117, 1459,
	204, 205, 1459, 207, 260, 0, 0, -2, 253, 255,
	-2, 251, 219, 222, 224, 226, 228, 230, 233, 235,
	238, 240, 243, 245, -2, 0, 0, 0, 463, 0,
	0, 0, 590, 0, 616, 308, 0, 313, 0, 315,
	1446, -2, -2, 319, 620, 624, 625, 626, 0, 0,
	0, 0, 0, 0, 0, 329, 211, 0, 390, 391,
	399, 400, 0, 403, 424, 436, 0, 0, 407, 409,
	462, 411, 0, 0, 413, 0, 415, 0, 417, 0,
	419, 0, 421, 423, 425, 437, 427, 712, 429, 0,
	431, 435, 0, 440, 0, 442, 443, 444, 0, 0,
	450, 0, 0, 397, 398, 117, 815, 0, 0, 0,
	-2, 0, 730, 755, 0, 733, 734, 0, 0, 0,
	0, 715, 716, 0, 0, 0, 675, 676, 294, 0,
	297, 0, 0, 0, 0, 1126, 1127, 1128, 1129, 1130,
	1131, 1134, 1135, 1132, 1133, 1136, 1137, 0, 0, 0,
	0, 0, 1138, 0, 0, 0, 0, 0, 0, 0,
	0, 1139, 1140, 1141, 0, 0, 1143, 0, 1145, 0,
	0, 0, 0, 0, 0, 1205, 0, 0, 1142, 928,
	929, 930, 962, 963, 0, 1026, 1202, 1195, 1028, 0,
	1148, -2, 1149, 0, 0, 1031, 1036, 1037, 1148, 0,
	1190, -2, 0, 1242, 0, 920, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1171, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 888,
	899, 896, 895, 872, 0, 871, 869, 0, 873, 0,
	0, 0, 600, -2, 602, 0, 614, 0, 705, 0,
	0, 759, 762, 1211, 1215, 1216, 762, 0, 1208, 0,
	0, 0, 0, 808, 808, 808, 806, 782, 0, 788,
	0, -2, 812, 800, 0, -2, 779, 0, 0, 813,
	0, 83, 585, 96, 0, 585, 585, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 802, 1222, 0, 1196, 1197, 147,
	0, 0, 1217, 1201, 470, 0, 0, 551, 0, 709,
	0, 0, 0, 0, 1459, 560, 1255, 635, 0, 821,
	0, 649, 0, 0, 818, 0, 193, 0, 115, 116,
	0, 196, 0, 199, 0, 0, 202, 0, 0, 0,
	1149, 712, 0, 0, 279, 0, 0, 712, 0, 1151,
	829, 830, 831, 832, 833, 920, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 858, 859, 860, 861, 862, 863, 864, 865, 866,
	867, 868, 882, 0, 857, 857, 857, 874, 875, 883,
	884, 889, 890, 901, 902, 904, 906, 900, 900, 900,
	897, 898, 802, 134, 0, 0, 0, 0, -2, 321,
	0, 622, 0, 627, 341, 342, 343, 629, 630, 325,
	344, 345, 346, 347, 348, 349, 0, 546, 0, 548,
	1248, 0, 322, 334, 323, 326, 0, 212, 401, 402,
	404, 405, 406, 410, 0, 459, 412, 414, 416, 418,
	420, 428, 432, 712, 438, 441, 445, 446, 447, 448,
	0, 0, 0, 549, 0, 310, 0, 454, 0, 730,
	755, 679, 729, 680, 754, 756, 731, 732, 737, 741,
	742, 745, 748, 749, 739, 923, 698, 699, 700, 723,
	724, 572, 0, 0, 296, 924, 825, 826, 876, 877,
	878, 879, 880, 925, 926, 0, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, -2, -2, -2, -2,
	-2, -2, -2, -2, 949, 950, 951, 952, 953, 954,
	955, 956, -2, -2, -2, 960, 961, -2, 1144, 1146,
	0, 1205, 0, -2, 0, -2, -2, -2, -2, 974,
	0, 976, 979, 981, 983, 0, 0, 0, 0, 1204,
	993, 1182, 0, 0, 1123, 1124, 1125, 978, 0, 0,
	1203, 1194, 0, 0, 1147, 1033, 0, 0, 0, 1155,
	1189, 1185, 0, 1040, 722, 0, 0, 0, 0, 1047,
	0, 1251, 907, 908, 909, 910, 911, 912, 921, 1103,
	0, 0, 0, 1054, 1055, 1057, 1058, 1060, 1061, 1064,
	1065, 0, 0, 0, 1071, 0, 1158, -2, -2, -2,
	-2, -2, -2, -2, 0, 1073, 0, 1075, 1149, 1168,
	0, 0, 996, 0, 0, 0, 0, 1480, 0, 1078,
	1149, 1176, 0, 0, 0, 0, 0, 1149, 0, 1181,
	0, 0, 0, 0, 0, 1089, 0, 1091, 0, 0,
	0, 0, 0, 0, 613, 707, 0, 0, 821, 0,
	0, 0, 1214, 821, 0, 1210, 0, 0, 0, 0,
	0, 803, 807, 804, 805, 0, 0, 788, 800, 770,
	0, 0, 0, 777, 778, 799, 0, 798, 787, -2,
	0, 0, 0, 0, 0, 584, 98, 1459, 0, 119,
	0, 0, 519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 1225, 0, 137, 0,
	1232, 0, 0, 0, 0, 0, 469, 1231, 471, 473,
	474, 475, 476, 1256, 0, 1256, 0, 0, 0, 0,
	0, 0, 0, 637, 643, 0, 736, 0, 661, 651,
	0, 0, 0, 661, 665, 666, 668, 669, 0, 0,
	819, 209, 117, 117, 1220, 117, 117, 206, 262, 0,
	216, 254, 0, 0, 0, 256, 0, 258, 0, 822,
	824, 0, 834, 0, 146, 0, 0, 0, 0, 314,
	0, 621, 628, 0, 338, 0, 340, 547, 1250, 1249,
	0, 213, 461, 287, 430, 433, 456, 457, 458, 816,
	0, 455, 683, 684, 0, 743, 0, 0, 740, 746,
	747, 0, 726, 570, 571, 0, 0, 0, -2, -2,
	0, 0, 0, 994, -2, 975, 977, 980, 982, 984,
	0, 0, 0, 0, 0, 0, 0, 995, 1148, 0,
	1192, 1195, -2, 1150, 1153, 1154, 0, 0, 1186, 0,
	0, 0, 0, 721, 722, 722, 722, 1046, 0, 0,
	0, 0, 0, 0, 1048, 0, 0, 0, 0, 0,
	0, 1070, 0, 1072, 1074, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 1000, 1001, 0, 1148, 1077, 1174, 1175, 0,
	0, 0, 0, 0, 0, 1083, 0, 1180, 0, 0,
	0, 1087, 1088, 1090, 0, 855, 0, 881, 903, 905,
	893, 712, 1233, 751, 1212, 802, 761, 763, 1213, 751,
	1209, 790, 0, 792, 0, 0, 0, 794, 0, 783,
	0, 785, 800, 775, 0, 0, 768, 0, 767, 788,
	796, 0, 0, 814, 97, 574, 0, 0, 0, 100,
	1459, 108, 0, 501, 0, 0, 0, 0, 0, 587,
	109, 1459, 117, 1459, 117, 110, 84, 585, 85, 0,
	0, 580, 0, 0, 573, 86, 0, 582, 0, 0,
	146, 0, 0, 148, 0, 1218, 478, 528, 0, 0,
	1256, 0, 467, 529, 554, -2, 556, 0, 0, 639,
	643, 0, 642, 710, 661, 735, 820, 644, 661, 0,
	0, 0, 653, 650, 647, 821, 0, 0, 0, 0,
	194, 197, 200, 203, 1150, 269, 0, 0, 1152, 0,
	827, 0, 0, 126, 0, 135, 271, 311, 312, 317,
	336, 337, 339, 335, 0, 0, 0, 0, 0, 0,
	725, 572, 0, 927, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 1183, 0, 0, 0, 1194, -2, 1156,
	1184, 1188, 0, 1041, 0, 0, 0, 0, 1244, 913,
	914, 915, 916, 917, 918, 919, 0, 1101, 1102, 1106,
	0, 0, 1052, 0, 0, 1157, 1167, 1169, 997, 998,
	1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011,
	-2, -2, -2, 1015, 1016, 1017, -2, -2, -2, 0,
	0, 0, 1170, 0, 0, 1172, 1173, 1177, 1178, 0,
	1080, 1081, 1082, 1179, 0, 0, 0, 887, 0, 0,
	753, 0, 760, 0, 753, 791, 0, 810, 793, 773,
	784, 0, 781, 771, 0, 772, 0, 800, 0, 0,
	780, 0, 0, 0, 0, 118, 499, 518, 0, 0,
	563, 569, 569, 0, 1050, 1051, 0, 0, 0, 102,
	0, 0, 0, 0, 106, 0, 112, 0, 0, 0,
	91, 0, 0, 0, 0, 90, 0, 0, 89, 124,
	0, 0, 149, 483, 0, 472, 0, 0, 0, 470,
	0, 552, 0, 0, 641, 643, 0, 634, 635, 174,
	645, 659, 660, 658, 0, 661, 667, 664, 670, 0,
	0, 128, 0, 0, 828, 835, 144, 1349, 142, 139,
	141, 288, 451, 452, 453, 738, 744, 727, 572, 0,
	0, -2, 0, 987, -2, -2, 1119, 1150, 1193, 1187,
	1241, 722, 1042, 1044, 1045, 922, 1108, 1105, 0, 1092,
	1068, 1069, 1166, 0, 0, 0, 0, 1150, 1121, 1079,
	0, 1085, 1086, 856, 708, 1097, 0, 0, 764, 1097,
	0, 788, 786, 769, 765, 0, 776, 0, 797, 576,
	578, 99, 0, 500, 0, 503, 0, 0, 0, 0,
	509, 510, 0, 0, 0, 0, 520, 527, 0, 572,
	1236, 0, 572, 0, 0, 0, 0, 0, 114, 0,
	0, 586, 0, 117, 117, 575, 0, 0, 0, 0,
	581, 0, 583, 136, 0, 465, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 631, 643, 0, 636,
	637, 0, 0, 0, 652, 662, 0, 0, 0, 823,
	0, 0, 0, 0, 728, -2, -2, 988, 1120, 0,
	722, 0, 1094, -2, 0, 0, 0, 1122, 0, 695,
	0, 752, 750, 696, 809, 800, 0, 795, 101, 0,
	504, 505, 1256, 0, 508, 511, 0, 513, 1258, 478,
	0, 524, 525, 564, 565, 568, 566, 569, 722, 522,
	0, 103, 104, 113, 121, 105, 111, 0, 0, 722,
	0, 0, 801, 0, 0, 527, 0, 517, 478, 468,
	527, 0, 0, 638, 639, 0, 0, 0, 671, 672,
	0, 0, 0, 143, 0, 138, 140, 1043, 1111, 0,
	-2, 0, 1023, 1084, 1096, 1098, 0, 774, 766, 502,
	506, 0, 0, 533, 0, 521, 0, 572, 0, 0,
	123, 0, 577, 579, 0, 0, 0, 0, 0, 0,
	478, 527, 466, 478, 0, 640, 641, 0, 655, 821,
	657, 0, 0, 145, 0, 0, 0, 1107, 1024, 0,
	0, 0, 512, 538, 0, 0, 0, 567, 1041, 529,
	107, 0, 120, 0, 0, 0, 0, 0, 0, 515,
	478, 558, 0, 632, 0, 656, 146, 146, 1104, 1109,
	1112, -2, 1419, 1294, 0, 1110, 1099, 1100, 0, 514,
	534, 535, 0, 530, 531, 532, 1257, 526, 533, 122,
	93, 95, 0, 0, 0, 516, 527, 821, 129, 130,
	0, 1114, 1115, 1116, 1117, 1118, 507, 536, 0, 537,
	0, 0, 0, 538, 0, 0, 481, 478, 654, 0,
	539, 0, 542, 543, 0, 540, 523, 0, 0, 477,
	479, 480, 559, 1113, 541, 544, 545, 0, 0, 0,
	0, 484, 0, 485, 0, 0, 0, 483, 0, 0,
	0, 482, 488, 0, 491, 493, 494, -2, 0, 486,
	0, 0, 489, 0, 0, 0, 487, 492, 0, 490,
	483, 0, 482, 498, 496, 0, 497,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 367, 3, 373, 368, 3,
	378, 379, 371, 369, 383, 370, 380, 372, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 387, 382,
	357, 359, 358, 361, 384, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 376, 3, 377, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 385, 366, 386, 364,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 362, 57701, 363, 57702, 365, 57703, 375, 57704, 381,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:898
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:904
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:910
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:921
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:940
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1014
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1026
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1049
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1069
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1075
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1081
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1087
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1096
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1105
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1155
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1174
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1197
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1254
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1269
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1270
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1274
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1365
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1434
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1446
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CREATE")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1496
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			return helpWith(sqllex, "DELETE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1541
		{
			return helpWith(sqllex, "DROP")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1556
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1571
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1617
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1629
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1683
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			return helpWith(sqllex, "DELETE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1699
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1700
		{
			return helpWith(sqllex, "INSERT")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1704
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1712
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1721
		{ /* SKIP DOC */
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1783
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1828
		{
			return helpWith(sqllex, "GRANT")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1870
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1889
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1926
		{
			return helpWith(sqllex, "RESET")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1942
		{
			return helpWith(sqllex, "RESET")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1961
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{ /* SKIP DOC */
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1969
		{ /* SKIP DOC */
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1970
		{
			return unimplemented(sqllex, "set local")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2002
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2051
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2071
		{
			return unimplemented(sqllex, "set from current")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2103
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = Low
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = Normal
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = High
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2189
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2195
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2198
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			return helpWith(sqllex, "SHOW")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.str = "client_encoding"
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2236
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2246
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2258
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2307
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2325
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2368
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2376
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2378
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2414
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2417
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2425
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2433
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2447
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2458
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2473
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2477
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2481
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2485
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2489
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2495
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2499
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2503
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2537
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2572
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2648
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = DropDefault
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2696
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2762
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2837
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2855
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2969
		{
			return unimplemented(sqllex, "match full")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2970
		{
			return unimplemented(sqllex, "match partial")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2971
		{
			return unimplemented(sqllex, "match simple")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2972
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3015
		{
			sqlVAL.union.val = NoAction
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = Restrict
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = Cascade
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = SetNull
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = SetDefault
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3058
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 551:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3073
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = nil
		}
	case 556:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3138
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.union.val = true
		}
	case 562:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.union.val = false
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3168
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3169
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 569:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3173
		{
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = Ascending
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = Descending
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3201
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3205
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3213
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3215
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = true
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = false
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3249
		{
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3260
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3271
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3282
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3286
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3288
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3306
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3311
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3337
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3347
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3348
		{
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.str = ""
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.str = ""
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 617:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3394
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3407
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3409
		{
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = ReadOnly
		}
	case 630:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = ReadWrite
		}
	case 631:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3473
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3481
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3497
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3501
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3516
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3517
		{
		}
	case 644:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3529
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3541
		{
			return helpWith(sqllex, "INSERT")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3552
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3600
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3604
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3612
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 662:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3639
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3640
		{
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3777
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3812
		{
			return helpWith(sqllex, "SELECT")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3813
		{
			return helpWith(sqllex, "VALUES")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3814
		{
			return helpWith(sqllex, "TABLE")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			return helpWith(sqllex, "SELECT")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3865
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3905
		{
			return helpWith(sqllex, "TABLE")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3925
		{
			return unimplemented(sqllex, "cte")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3928
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3929
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3932
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3933
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3936
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3937
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = true
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = false
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = false
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = true
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3960
		{
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3961
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4015
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4039
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4091
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4092
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4095
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4096
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = false
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = true
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4167
		{
			return helpWith(sqllex, "VALUES")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4169
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4184
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &From{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4206
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4224
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4251
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4288
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4313
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = nil
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4360
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = true
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = false
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.str = astFullJoin
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.str = astLeftJoin
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.str = astRightJoin
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.str = astInnerJoin
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
		}
	case 808:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4472
		{
		}
	case 809:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 814:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4558
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4572
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4580
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4604
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 835:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4615
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = jsonbColType
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = jsonColType
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4704
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4713
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = nil
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4774
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4810
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 881:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4874
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4906
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4945
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4946
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 903:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4959
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 905:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = year
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = month
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = day
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = hour
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = minute
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = month
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = hour
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = minute
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = minute
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = nil
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = second
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5041
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5076
		{
			return unimplemented(sqllex, "at tz")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5310
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5314
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5318
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5326
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5330
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5334
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5350
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5507
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5523
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5561
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5569
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5573
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5576
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5577
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5590
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5601
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5622
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5631
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5640
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5646
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5649
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			return unimplemented(sqllex, "current role")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5659
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5680
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5685
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5687
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5690
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5699
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5700
		{
			return unimplemented(sqllex, "treat")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5706
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5710
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5737
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5746
		{
			return unimplemented(sqllex, "within group")
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5747
		{
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5782
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5805
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.str = ""
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5844
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5845
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5846
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5849
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5850
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5856
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5857
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5858
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5859
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5860
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = Any
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5897
		{
			sqlVAL.union.val = Some
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = All
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = Plus
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = Minus
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = Mult
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5909
		{
			sqlVAL.union.val = Div
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5911
		{
			sqlVAL.union.val = Mod
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = Bitand
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5913
		{
			sqlVAL.union.val = Bitor
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = Pow
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5915
		{
			sqlVAL.union.val = Bitxor
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = LT
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = GT
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = EQ
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5919
		{
			sqlVAL.union.val = LE
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = GE
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = NE
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5925
		{
			sqlVAL.union.val = Like
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = NotLike
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = ILike
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = NotILike
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5970
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5990
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6020
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6037
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6082
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6144
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6157
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6161
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6200
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6215
		{
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6216
		{
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6225
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6231
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6260
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6273
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6285
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6289
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6295
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6305
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6324
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6330
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6334
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6375
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6378
		{
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6392
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6414
		{
			return unimplemented(sqllex, "func const")
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6416
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6420
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6423
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6429
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6433
		{
			sqlVAL.union.val = DNull
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6440
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6444
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6450
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.str = ""
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6491
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6495
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
