// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAME = 57509
const NAMES = 57510
const NATURAL = 57511
const NEXT = 57512
const NO = 57513
const NO_INDEX_JOIN = 57514
const NORMAL = 57515
const NOT = 57516
const NOTHING = 57517
const NULL = 57518
const NULLIF = 57519
const NULLS = 57520
const NUMERIC = 57521
const OF = 57522
const OFF = 57523
const OFFSET = 57524
const OID = 57525
const ON = 57526
const ONLY = 57527
const OPTIONS = 57528
const OR = 57529
const ORDER = 57530
const ORDINALITY = 57531
const OUT = 57532
const OUTER = 57533
const OVER = 57534
const OVERLAPS = 57535
const OVERLAY = 57536
const PARENT = 57537
const PARTIAL = 57538
const PARTITION = 57539
const PASSWORD = 57540
const PLACING = 57541
const POSITION = 57542
const PRECEDING = 57543
const PRECISION = 57544
const PREPARE = 57545
const PRIMARY = 57546
const PRIORITY = 57547
const RANGE = 57548
const READ = 57549
const REAL = 57550
const RECURSIVE = 57551
const REF = 57552
const REFERENCES = 57553
const REGCLASS = 57554
const REGPROC = 57555
const REGPROCEDURE = 57556
const REGNAMESPACE = 57557
const REGTYPE = 57558
const RENAME = 57559
const REPEATABLE = 57560
const RELEASE = 57561
const RESET = 57562
const RESTORE = 57563
const RESTRICT = 57564
const RETURNING = 57565
const REVOKE = 57566
const RIGHT = 57567
const ROLLBACK = 57568
const ROLLUP = 57569
const ROW = 57570
const ROWS = 57571
const RSHIFT = 57572
const STATUS = 57573
const SAVEPOINT = 57574
const SEARCH = 57575
const SECOND = 57576
const SELECT = 57577
const SERIAL = 57578
const SERIALIZABLE = 57579
const SESSION = 57580
const SESSION_USER = 57581
const SET = 57582
const SHOW = 57583
const SIMILAR = 57584
const SIMPLE = 57585
const SMALLINT = 57586
const SMALLSERIAL = 57587
const SNAPSHOT = 57588
const SOME = 57589
const SPLIT = 57590
const SQL = 57591
const START = 57592
const STDIN = 57593
const STRICT = 57594
const STRING = 57595
const STORING = 57596
const SUBSTRING = 57597
const SYMMETRIC = 57598
const SYSTEM = 57599
const TABLE = 57600
const TABLES = 57601
const TEMPLATE = 57602
const TEXT = 57603
const THEN = 57604
const TIME = 57605
const TIMESTAMP = 57606
const TIMESTAMPTZ = 57607
const TO = 57608
const TRAILING = 57609
const TRANSACTION = 57610
const TREAT = 57611
const TRIM = 57612
const TRUE = 57613
const TRUNCATE = 57614
const TYPE = 57615
const UNBOUNDED = 57616
const UNCOMMITTED = 57617
const UNION = 57618
const UNIQUE = 57619
const UNKNOWN = 57620
const UPDATE = 57621
const UPSERT = 57622
const USER = 57623
const USERS = 57624
const USING = 57625
const VALID = 57626
const VALIDATE = 57627
const VALUE = 57628
const VALUES = 57629
const VARCHAR = 57630
const VARIADIC = 57631
const VIEW = 57632
const VARYING = 57633
const WHEN = 57634
const WHERE = 57635
const WINDOW = 57636
const WITH = 57637
const WITHIN = 57638
const WITHOUT = 57639
const YEAR = 57640
const ZONE = 57641
const NOT_LA = 57642
const WITH_LA = 57643
const AS_LA = 57644
const POSTFIXOP = 57645
const UMINUS = 57646

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5390

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 29,
	323, 29,
	-2, 413,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	98, 396,
	142, 396,
	158, 396,
	182, 396,
	188, 396,
	276, 396,
	-2, 386,
	-1, 64,
	98, 395,
	142, 395,
	158, 395,
	182, 395,
	188, 395,
	276, 395,
	-2, 389,
	-1, 73,
	1, 29,
	323, 29,
	-2, 413,
	-1, 423,
	1, 193,
	323, 193,
	-2, 976,
	-1, 460,
	158, 423,
	182, 423,
	-2, 392,
	-1, 463,
	158, 422,
	182, 422,
	-2, 390,
	-1, 595,
	158, 422,
	182, 422,
	-2, 393,
	-1, 654,
	320, 910,
	-2, 903,
	-1, 655,
	320, 911,
	-2, 904,
	-1, 661,
	5, 581,
	320, 581,
	-2, 1079,
	-1, 685,
	5, 542,
	-2, 1053,
	-1, 686,
	5, 575,
	320, 575,
	-2, 1055,
	-1, 687,
	5, 550,
	-2, 1056,
	-1, 688,
	5, 549,
	-2, 1057,
	-1, 689,
	5, 575,
	320, 575,
	-2, 1060,
	-1, 690,
	5, 575,
	320, 575,
	-2, 1061,
	-1, 691,
	5, 576,
	-2, 1064,
	-1, 692,
	5, 536,
	-2, 1065,
	-1, 693,
	5, 536,
	-2, 1066,
	-1, 694,
	5, 557,
	-2, 1070,
	-1, 695,
	5, 537,
	-2, 1075,
	-1, 696,
	5, 538,
	-2, 1076,
	-1, 697,
	5, 539,
	-2, 1077,
	-1, 698,
	5, 540,
	-2, 1078,
	-1, 699,
	5, 536,
	-2, 1083,
	-1, 700,
	5, 543,
	-2, 1088,
	-1, 701,
	5, 541,
	-2, 1091,
	-1, 702,
	5, 573,
	320, 573,
	-2, 1093,
	-1, 703,
	5, 577,
	-2, 1096,
	-1, 704,
	5, 579,
	-2, 1097,
	-1, 705,
	5, 572,
	320, 572,
	-2, 1101,
	-1, 963,
	98, 396,
	142, 396,
	158, 396,
	182, 396,
	188, 396,
	276, 396,
	-2, 698,
	-1, 972,
	320, 887,
	-2, 875,
	-1, 1180,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 616,
	-1, 1181,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 617,
	-1, 1182,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 618,
	-1, 1186,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 622,
	-1, 1187,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 623,
	-1, 1188,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 624,
	-1, 1191,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 629,
	-1, 1197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 631,
	-1, 1200,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 636,
	-1, 1201,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 637,
	-1, 1202,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 638,
	-1, 1228,
	193, 769,
	-2, 772,
	-1, 1257,
	115, 809,
	320, 910,
	-2, 903,
	-1, 1258,
	115, 810,
	-2, 1049,
	-1, 1259,
	115, 811,
	-2, 975,
	-1, 1260,
	115, 812,
	-2, 944,
	-1, 1261,
	115, 813,
	-2, 959,
	-1, 1262,
	115, 814,
	-2, 974,
	-1, 1263,
	115, 815,
	-2, 1017,
	-1, 1417,
	98, 396,
	142, 396,
	158, 396,
	182, 396,
	188, 396,
	276, 396,
	-2, 472,
	-1, 1421,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 630,
	-1, 1422,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 632,
	-1, 1427,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 633,
	-1, 1444,
	193, 768,
	-2, 771,
	-1, 1634,
	1, 473,
	68, 473,
	98, 473,
	116, 473,
	120, 473,
	122, 473,
	135, 473,
	142, 473,
	147, 473,
	155, 473,
	158, 473,
	169, 473,
	182, 473,
	184, 473,
	188, 473,
	223, 473,
	225, 473,
	276, 473,
	283, 473,
	293, 473,
	294, 473,
	302, 473,
	319, 473,
	321, 473,
	323, 473,
	324, 473,
	-2, 472,
	-1, 1636,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 634,
	-1, 1641,
	145, 0,
	-2, 648,
	-1, 1651,
	193, 770,
	-2, 773,
	-1, 1685,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 675,
	-1, 1686,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 676,
	-1, 1687,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 677,
	-1, 1691,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 681,
	-1, 1692,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 682,
	-1, 1693,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 683,
	-1, 1814,
	145, 0,
	-2, 649,
	-1, 1817,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 652,
	-1, 1818,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 654,
	-1, 1921,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 653,
	-1, 1922,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 655,
	-1, 1929,
	145, 0,
	-2, 684,
	-1, 1983,
	145, 0,
	-2, 685,
	-1, 2044,
	36, 0,
	129, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 1052,
}

const sqlNprod = 1197
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 27735

var sqlAct = [...]int{

	655, 2043, 2023, 1053, 2068, 1591, 2024, 2042, 1629, 1989,
	2025, 1858, 881, 1415, 1061, 464, 1630, 1902, 293, 775,
	1601, 1662, 424, 1882, 1805, 1780, 1722, 279, 1736, 1412,
	1791, 86, 86, 86, 49, 1144, 485, 887, 1785, 509,
	1391, 1537, 1538, 295, 86, 86, 86, 471, 63, 86,
	1123, 527, 86, 843, 653, 1152, 631, 776, 1505, 1119,
	86, 86, 1607, 1393, 738, 1118, 1137, 744, 86, 86,
	1342, 1504, 86, 281, 20, 86, 86, 86, 86, 1159,
	1455, 86, 86, 1226, 883, 1616, 1122, 721, 718, 63,
	1403, 968, 1062, 1017, 1151, 1026, 645, 1093, 1398, 614,
	1286, 469, 759, 1336, 1236, 625, 1283, 652, 1210, 1157,
	286, 28, 1045, 1213, 836, 581, 904, 648, 285, 16,
	1113, 63, 287, 8, 1077, 748, 1254, 723, 1086, 959,
	615, 582, 624, 1154, 998, 528, 1002, 519, 521, 1055,
	909, 500, 1737, 708, 1126, 64, 463, 20, 599, 474,
	522, 78, 597, 598, 838, 411, 647, 834, 402, 752,
	82, 472, 602, 515, 580, 414, 1443, 65, 1475, 1476,
	1058, 1493, 1494, 1495, 1914, 761, 2059, 1915, 468, 741,
	468, 761, 1054, 267, 28, 2038, 1413, 761, 1735, 912,
	913, 2031, 16, 1354, 741, 2021, 8, 2016, 1083, 1090,
	741, 2012, 1046, 1985, 741, 482, 1083, 1979, 488, 461,
	741, 495, 915, 1353, 491, 450, 911, 1961, 1957, 1490,
	1735, 741, 1952, 1447, 1401, 1951, 912, 913, 1448, 421,
	476, 460, 1923, 1912, 914, 1083, 770, 1096, 1909, 69,
	929, 1910, 1091, 1896, 1893, 1891, 1735, 741, 1735, 915,
	1869, 1868, 1840, 741, 1735, 1096, 1819, 1816, 1808, 1096,
	1083, 1096, 71, 1756, 1755, 733, 1096, 1096, 1481, 1734,
	1645, 914, 1735, 1096, 1967, 86, 86, 86, 86, 86,
	1446, 531, 1092, 1089, 1577, 1096, 910, 1052, 1497, 920,
	451, 72, 1571, 1049, 1401, 1052, 912, 913, 1698, 67,
	524, 524, 1648, 1496, 1522, 68, 1378, 1523, 1520, 87,
	1519, 1096, 1015, 1096, 1096, 469, 1454, 1046, 1381, 915,
	69, 1491, 1518, 1230, 66, 1096, 920, 1444, 1380, 1148,
	1096, 741, 741, 1100, 1095, 1082, 1096, 1096, 1083, 1049,
	1143, 914, 930, 71, 1051, 529, 1014, 1052, 1108, 1013,
	762, 1094, 296, 610, 769, 876, 762, 770, 875, 828,
	827, 741, 762, 498, 544, 481, 1738, 73, 504, 1416,
	707, 860, 72, 564, 2057, 2041, 2030, 1799, 1994, 930,
	67, 1980, 1894, 912, 913, 1845, 68, 1841, 1492, 609,
	1833, 1832, 1831, 1827, 1826, 69, 920, 1825, 86, 1765,
	1771, 1713, 1353, 912, 913, 1057, 915, 1708, 516, 931,
	1707, 1706, 508, 86, 1656, 1088, 86, 86, 71, 1475,
	1476, 1634, 1383, 1606, 1581, 910, 915, 1527, 914, 525,
	1524, 1512, 1503, 1474, 1471, 1470, 1468, 1087, 714, 1460,
	1459, 1379, 1300, 1251, 1250, 1414, 931, 72, 914, 930,
	86, 609, 765, 86, 608, 86, 86, 86, 760, 86,
	1222, 1487, 1488, 1489, 879, 1486, 1483, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 86, 976, 596, 588, 2040, 591,
	66, 886, 969, 920, 66, 86, 925, 922, 923, 924,
	916, 917, 918, 919, 921, 506, 941, 1664, 531, 86,
	2004, 1964, 1950, 920, 1942, 295, 531, 1940, 86, 912,
	913, 1931, 1918, 86, 86, 86, 931, 86, 713, 1481,
	1905, 1889, 1855, 742, 922, 923, 924, 916, 917, 918,
	919, 921, 915, 941, 552, 1764, 86, 86, 1838, 1810,
	1774, 595, 912, 913, 86, 1761, 86, 1741, 750, 1640,
	553, 737, 1223, 1621, 914, 1599, 930, 531, 531, 745,
	1597, 1596, 1594, 1579, 1546, 295, 86, 1545, 86, 86,
	86, 86, 86, 86, 86, 1502, 1464, 1463, 712, 86,
	86, 547, 549, 861, 1440, 86, 587, 914, 1435, 1215,
	532, 1369, 1327, 86, 1326, 1314, 924, 916, 917, 918,
	919, 921, 1313, 941, 885, 585, 1416, 1293, 1249, 583,
	1314, 86, 1147, 1003, 86, 1006, 1010, 461, 996, 995,
	994, 993, 992, 931, 991, 764, 912, 913, 767, 605,
	606, 969, 990, 504, 989, 611, 988, 987, 986, 460,
	985, 820, 984, 1475, 1476, 983, 516, 982, 981, 915,
	980, 826, 973, 962, 66, 880, 782, 854, 853, 740,
	847, 844, 486, 613, 469, 550, 540, 538, 2014, 771,
	1913, 914, 1821, 908, 754, 773, 751, 859, 890, 1800,
	1475, 1476, 808, 1493, 1494, 1495, 918, 919, 921, 878,
	941, 1797, 729, 1796, 1770, 822, 1769, 824, 912, 913,
	507, 1363, 1362, 823, 916, 917, 918, 919, 921, 960,
	941, 714, 558, 1954, 856, 849, 855, 86, 1916, 865,
	1477, 1478, 1479, 1480, 1482, 86, 920, 1394, 1768, 86,
	965, 1490, 1355, 86, 86, 1008, 1046, 86, 857, 1009,
	877, 1526, 86, 1481, 1525, 1420, 574, 893, 461, 892,
	559, 461, 461, 894, 978, 884, 86, 714, 86, 86,
	906, 86, 1337, 1786, 86, 1054, 86, 86, 1665, 86,
	900, 531, 1237, 901, 902, 1020, 275, 999, 76, 930,
	1481, 578, 724, 972, 725, 1349, 1533, 1997, 1071, 524,
	975, 524, 1451, 2054, 1956, 862, 814, 1074, 866, 867,
	868, 869, 870, 2055, 724, 1375, 725, 532, 873, 874,
	271, 1749, 858, 579, 296, 532, 941, 63, 1432, 1031,
	1033, 449, 63, 448, 1000, 1001, 1056, 1099, 1056, 276,
	1004, 75, 1430, 1491, 443, 529, 1007, 444, 1019, 1877,
	1876, 1561, 1027, 1560, 1557, 1530, 931, 1529, 1078, 941,
	1423, 1368, 1367, 1011, 726, 1366, 1365, 1048, 272, 1198,
	1097, 295, 1036, 556, 1043, 86, 532, 532, 1042, 1023,
	1044, 1040, 1019, 1039, 296, 1578, 726, 1090, 1018, 1112,
	86, 86, 1138, 584, 497, 1080, 1760, 86, 292, 1297,
	1296, 1169, 453, 1079, 1060, 912, 913, 1081, 1955, 1069,
	1492, 1070, 557, 1030, 1428, 1564, 1075, 1566, 1433, 807,
	1212, 536, 86, 1149, 1339, 86, 618, 1072, 915, 1073,
	1091, 1212, 746, 925, 922, 923, 924, 916, 917, 918,
	919, 921, 62, 941, 1860, 458, 1548, 1168, 1269, 1004,
	914, 1007, 730, 2002, 1102, 2027, 1479, 1480, 1482, 1219,
	295, 1001, 1000, 755, 1217, 277, 1583, 74, 40, 1101,
	1092, 1089, 2065, 1094, 848, 845, 41, 724, 1220, 725,
	1160, 1167, 731, 1487, 1488, 1489, 630, 1486, 1483, 1484,
	1485, 1477, 1478, 1479, 1480, 1482, 1343, 278, 42, 77,
	1237, 2018, 1116, 1029, 2054, 920, 1584, 1141, 1142, 1429,
	1325, 274, 273, 730, 1332, 941, 1431, 1115, 1329, 268,
	1586, 467, 750, 1117, 2019, 1299, 2076, 86, 86, 86,
	1374, 1569, 1351, 86, 735, 2028, 86, 734, 761, 1094,
	782, 782, 86, 86, 86, 86, 86, 535, 1945, 726,
	86, 1150, 1376, 86, 86, 1208, 727, 1555, 483, 555,
	531, 490, 493, 86, 483, 466, 808, 808, 86, 1206,
	86, 1234, 997, 1227, 1133, 1094, 1028, 86, 727, 1927,
	1231, 1402, 2029, 1307, 1239, 1890, 1347, 86, 1462, 1094,
	532, 1016, 1311, 1549, 957, 1256, 1256, 1267, 1224, 1278,
	1221, 2064, 469, 1088, 554, 1290, 1291, 1292, 86, 86,
	69, 468, 1301, 1338, 1633, 1245, 53, 1617, 1406, 531,
	468, 1565, 1264, 1195, 454, 1343, 2026, 2053, 2051, 1406,
	1779, 2071, 1861, 71, 1324, 1135, 1345, 1409, 86, 1204,
	86, 1203, 86, 459, 1425, 1209, 86, 455, 1409, 1615,
	86, 1361, 782, 1302, 567, 1211, 456, 1407, 545, 543,
	1404, 1335, 72, 555, 1386, 601, 1937, 1836, 1407, 86,
	67, 575, 600, 722, 1871, 1382, 68, 1384, 808, 1870,
	296, 1853, 1405, 1357, 1218, 1358, 1359, 660, 2082, 1311,
	1730, 2063, 1723, 1348, 1745, 66, 601, 1793, 710, 465,
	1721, 2077, 1356, 469, 1725, 63, 916, 917, 918, 919,
	921, 782, 941, 762, 1385, 1104, 1193, 1196, 1388, 1730,
	1360, 1532, 1731, 1310, 1419, 1373, 1106, 1408, 1371, 1372,
	576, 1078, 400, 1377, 1306, 1136, 1205, 808, 1408, 891,
	640, 727, 1724, 1207, 1192, 1107, 1694, 882, 1806, 782,
	833, 1731, 1582, 1990, 1105, 2069, 577, 1837, 600, 1748,
	469, 483, 872, 493, 829, 1453, 1747, 1602, 1080, 296,
	1396, 83, 83, 269, 1400, 808, 1079, 403, 1418, 2081,
	1081, 1781, 1397, 1744, 394, 395, 396, 1854, 831, 413,
	1316, 1315, 425, 807, 807, 1794, 1792, 1612, 408, 832,
	413, 425, 1611, 404, 554, 514, 2070, 1807, 475, 475,
	466, 1726, 269, 1727, 1424, 269, 269, 494, 269, 469,
	1426, 83, 501, 513, 2072, 592, 1438, 405, 1592, 1194,
	1695, 1772, 1439, 1334, 1441, 1851, 1696, 403, 1608, 709,
	1726, 1729, 1727, 1399, 1248, 1507, 407, 1930, 1732, 1835,
	1450, 1506, 1457, 1458, 1639, 1746, 1563, 1852, 408, 1469,
	1434, 1340, 1098, 404, 86, 86, 1573, 1050, 573, 532,
	1729, 572, 571, 570, 569, 568, 565, 1732, 512, 1543,
	505, 979, 1247, 864, 2022, 1501, 1410, 405, 1987, 86,
	1719, 1553, 86, 1551, 86, 1531, 1514, 1509, 1510, 1511,
	1390, 86, 1139, 1131, 531, 807, 407, 1076, 1528, 1598,
	768, 766, 86, 763, 1728, 86, 758, 736, 1535, 732,
	728, 1544, 1653, 1392, 295, 1884, 86, 603, 532, 1556,
	479, 1595, 1542, 1552, 1145, 1554, 1624, 1558, 1559, 483,
	2055, 561, 1625, 1728, 851, 406, 511, 1562, 510, 1622,
	79, 1886, 3, 1567, 1576, 1570, 1574, 1604, 1324, 1575,
	1402, 1572, 290, 23, 807, 1642, 1603, 1610, 1947, 63,
	1613, 715, 1035, 86, 1585, 1587, 1588, 1738, 1593, 1982,
	1411, 1019, 1658, 1659, 1660, 288, 22, 1034, 1609, 409,
	1605, 607, 1146, 1038, 749, 604, 289, 11, 480, 483,
	753, 753, 807, 1618, 1619, 406, 1614, 1019, 1406, 291,
	10, 283, 9, 1032, 1037, 269, 517, 269, 425, 425,
	442, 562, 490, 493, 1968, 1628, 487, 1409, 899, 1777,
	502, 499, 503, 399, 1160, 1669, 23, 1649, 1134, 1404,
	86, 86, 86, 1160, 1674, 282, 7, 1407, 1130, 409,
	1652, 1646, 1059, 907, 1671, 1666, 1668, 86, 825, 22,
	774, 1405, 86, 782, 86, 1673, 86, 86, 86, 1085,
	11, 86, 86, 1701, 531, 2079, 1705, 445, 446, 1739,
	2080, 410, 2015, 10, 1971, 9, 821, 1702, 1803, 808,
	1475, 1476, 1718, 1714, 782, 782, 1589, 1742, 284, 4,
	1580, 1715, 1823, 782, 782, 912, 913, 86, 86, 1521,
	1543, 1110, 1109, 1699, 531, 1364, 1743, 1408, 1298, 7,
	808, 808, 86, 86, 1709, 1295, 86, 745, 1294, 808,
	808, 1244, 657, 1111, 531, 86, 782, 966, 541, 2001,
	1883, 1759, 86, 1802, 1661, 1387, 1773, 976, 974, 452,
	1859, 1778, 1544, 546, 1767, 1766, 425, 425, 1811, 1543,
	401, 863, 808, 1542, 1543, 566, 1775, 1783, 469, 1798,
	1815, 1620, 4, 1776, 2017, 86, 1782, 1789, 1790, 1762,
	1828, 1795, 1784, 1461, 1901, 1801, 1926, 1246, 977, 39,
	413, 1540, 634, 269, 1720, 425, 590, 425, 529, 593,
	1534, 1544, 1125, 1012, 1124, 298, 1544, 852, 656, 837,
	846, 1255, 1542, 532, 475, 483, 1161, 1542, 711, 493,
	1788, 658, 779, 483, 659, 269, 781, 780, 1005, 646,
	86, 777, 86, 296, 86, 86, 1063, 810, 1216, 83,
	1834, 1235, 1065, 86, 1449, 970, 626, 493, 269, 86,
	493, 638, 637, 269, 269, 269, 1849, 756, 1232, 537,
	1804, 52, 551, 419, 1846, 420, 1346, 1763, 782, 1140,
	895, 1864, 1550, 457, 1472, 86, 269, 269, 539, 1276,
	1847, 1268, 1863, 1265, 83, 1865, 83, 750, 1862, 586,
	86, 717, 958, 531, 808, 1064, 563, 86, 1352, 1084,
	1543, 612, 903, 478, 477, 86, 425, 1120, 83, 425,
	425, 425, 425, 425, 871, 1887, 807, 1873, 560, 425,
	425, 86, 86, 830, 1911, 413, 1892, 1878, 1103, 951,
	948, 1904, 1917, 889, 1885, 1900, 1908, 447, 1920, 1543,
	1939, 1132, 1544, 1309, 2075, 1946, 1899, 807, 807, 1547,
	1925, 475, 1867, 1542, 501, 1898, 807, 807, 1996, 70,
	1907, 1895, 86, 1874, 1875, 1953, 483, 1879, 1932, 1881,
	1333, 27, 24, 21, 1941, 19, 18, 782, 809, 26,
	1919, 1544, 17, 532, 25, 1935, 15, 86, 86, 807,
	14, 13, 1542, 1944, 12, 38, 37, 86, 1155, 1936,
	36, 86, 35, 808, 34, 1943, 33, 6, 5, 531,
	1962, 2, 1, 1960, 1270, 0, 86, 0, 1963, 0,
	0, 0, 86, 532, 0, 0, 0, 295, 86, 86,
	1972, 1966, 1970, 0, 469, 0, 1977, 0, 0, 0,
	0, 1475, 1476, 532, 0, 1975, 0, 0, 0, 1974,
	1973, 86, 1981, 86, 0, 0, 86, 269, 86, 0,
	0, 1984, 1965, 0, 0, 1024, 782, 0, 0, 269,
	63, 2003, 0, 269, 1041, 1969, 2005, 269, 86, 2007,
	1998, 86, 1047, 2006, 0, 2000, 0, 0, 1978, 1993,
	0, 0, 808, 0, 0, 2010, 269, 2013, 1067, 1068,
	2011, 269, 2009, 1303, 269, 0, 425, 425, 0, 425,
	0, 0, 1992, 86, 0, 86, 2008, 0, 2032, 0,
	0, 807, 2037, 0, 0, 2034, 0, 2035, 0, 1543,
	1331, 0, 0, 86, 0, 0, 0, 2048, 2039, 1341,
	0, 1481, 2052, 0, 749, 2050, 0, 0, 0, 2058,
	86, 0, 2056, 749, 0, 0, 2062, 0, 2061, 782,
	2060, 1999, 0, 483, 616, 616, 0, 0, 0, 2074,
	2073, 1544, 0, 719, 2036, 0, 2078, 0, 0, 0,
	0, 0, 1542, 0, 0, 808, 0, 0, 0, 0,
	0, 2083, 0, 2020, 1491, 0, 0, 0, 0, 0,
	781, 781, 532, 0, 0, 1114, 0, 0, 0, 0,
	0, 810, 810, 0, 0, 0, 0, 0, 0, 0,
	269, 1121, 1389, 0, 0, 0, 0, 501, 0, 0,
	807, 0, 0, 0, 0, 0, 0, 1270, 1270, 0,
	0, 0, 0, 0, 0, 1155, 0, 0, 0, 1475,
	1476, 0, 269, 0, 0, 425, 0, 0, 0, 1436,
	1437, 1492, 0, 0, 0, 1475, 1476, 0, 0, 0,
	0, 778, 0, 0, 0, 0, 0, 0, 1475, 1476,
	0, 1493, 1494, 1495, 706, 0, 0, 896, 898, 0,
	0, 0, 0, 0, 905, 0, 0, 0, 1270, 1270,
	1270, 0, 0, 0, 0, 0, 952, 953, 954, 955,
	956, 0, 781, 0, 0, 0, 964, 0, 532, 807,
	1498, 1499, 1500, 810, 0, 0, 971, 297, 0, 1490,
	0, 0, 0, 0, 0, 0, 296, 0, 1486, 1483,
	1484, 1485, 1477, 1478, 1479, 1480, 1482, 0, 0, 1481,
	0, 0, 809, 809, 0, 0, 0, 269, 1304, 1305,
	0, 0, 0, 1024, 0, 1481, 1312, 0, 0, 0,
	0, 781, 1317, 1318, 1320, 1322, 1323, 0, 1481, 0,
	1328, 0, 810, 1330, 269, 0, 0, 0, 0, 0,
	0, 635, 50, 269, 0, 0, 0, 0, 269, 0,
	1350, 0, 1491, 0, 0, 0, 0, 269, 0, 781,
	0, 0, 807, 1496, 0, 0, 0, 269, 1491, 0,
	810, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1491, 0, 50, 0, 0, 0, 0, 1114, 1114,
	1065, 1155, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1270, 1270, 0, 0, 462, 0, 0, 470, 0,
	0, 0, 0, 0, 809, 50, 0, 0, 889, 1492,
	889, 0, 425, 1637, 1638, 0, 269, 0, 0, 0,
	1395, 0, 0, 0, 0, 1492, 0, 0, 1155, 0,
	0, 1155, 0, 0, 0, 0, 0, 0, 1492, 269,
	0, 0, 0, 0, 1270, 1270, 1270, 1270, 1270, 1270,
	1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
	1270, 1270, 1270, 809, 1270, 0, 1675, 1676, 1677, 1678,
	1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
	1689, 1690, 1691, 1692, 1693, 0, 1697, 1483, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 0, 0, 0, 0, 0,
	0, 809, 0, 0, 0, 533, 1477, 1478, 1479, 1480,
	1482, 1487, 1488, 1489, 0, 1486, 1483, 1484, 1485, 1477,
	1478, 1479, 1480, 1482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 616, 0, 0,
	0, 0, 0, 1170, 1171, 1172, 1173, 1174, 1175, 1176,
	1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186,
	1187, 1188, 1189, 1190, 1191, 0, 1197, 0, 1199, 1200,
	1201, 1202, 0, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 1752, 0, 0, 778, 778, 1225, 1758, 0,
	0, 0, 0, 0, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 1252,
	1253, 0, 470, 1266, 41, 1277, 1279, 1284, 1287, 1288,
	1289, 0, 0, 0, 1475, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 269, 269, 42, 0, 1155, 1155,
	719, 0, 1155, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1590,
	0, 0, 1024, 781, 889, 0, 0, 0, 0, 0,
	0, 1600, 0, 0, 810, 0, 0, 0, 0, 0,
	0, 1344, 269, 0, 0, 269, 0, 0, 292, 0,
	0, 0, 0, 0, 781, 781, 1632, 778, 1270, 0,
	0, 0, 0, 781, 781, 810, 810, 0, 0, 0,
	0, 0, 0, 0, 810, 810, 0, 0, 0, 0,
	1856, 0, 533, 1370, 1481, 0, 0, 0, 0, 297,
	533, 0, 62, 0, 0, 0, 781, 0, 0, 0,
	0, 0, 0, 1663, 0, 0, 0, 810, 69, 0,
	0, 0, 0, 0, 53, 0, 778, 0, 40, 1857,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	905, 71, 0, 0, 0, 0, 0, 1491, 0, 0,
	0, 533, 533, 0, 0, 0, 0, 0, 42, 297,
	0, 0, 0, 0, 778, 0, 0, 0, 0, 0,
	72, 0, 1270, 462, 0, 0, 1897, 0, 67, 0,
	1716, 1717, 1024, 0, 68, 809, 0, 0, 0, 1421,
	1422, 1155, 1475, 1476, 1929, 1427, 1539, 501, 0, 0,
	0, 0, 1750, 1623, 1751, 426, 269, 1753, 1754, 0,
	0, 1757, 269, 0, 1492, 0, 809, 809, 0, 0,
	0, 0, 0, 427, 0, 809, 809, 1445, 0, 0,
	0, 0, 0, 0, 1452, 0, 0, 1456, 781, 0,
	0, 0, 0, 1490, 0, 1539, 1465, 501, 1121, 810,
	1539, 0, 0, 0, 0, 0, 0, 0, 809, 429,
	0, 0, 269, 269, 434, 435, 269, 1270, 440, 0,
	69, 964, 0, 0, 0, 1632, 53, 1284, 1284, 1284,
	428, 430, 1809, 0, 0, 0, 0, 0, 0, 1983,
	0, 0, 1481, 71, 1485, 1477, 1478, 1479, 1480, 1482,
	0, 0, 0, 0, 462, 0, 0, 462, 462, 0,
	1536, 0, 0, 0, 0, 1829, 0, 0, 0, 431,
	0, 0, 72, 0, 0, 0, 0, 0, 0, 961,
	67, 963, 0, 432, 433, 0, 68, 0, 967, 0,
	616, 0, 1995, 0, 0, 1491, 0, 781, 616, 0,
	436, 0, 719, 0, 0, 280, 0, 0, 810, 0,
	0, 0, 0, 0, 0, 533, 0, 0, 0, 0,
	1024, 0, 1848, 0, 425, 1850, 0, 0, 0, 0,
	0, 0, 0, 269, 0, 0, 1539, 0, 0, 425,
	809, 0, 0, 0, 0, 0, 0, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1880, 1492, 0, 0, 501, 0, 1635, 0, 0,
	1636, 0, 0, 0, 0, 1539, 0, 0, 0, 0,
	269, 1641, 0, 0, 0, 0, 781, 1903, 0, 0,
	1650, 0, 0, 0, 0, 269, 0, 810, 1654, 0,
	0, 1370, 0, 0, 50, 297, 50, 0, 0, 0,
	437, 501, 1632, 0, 438, 0, 1670, 0, 0, 439,
	1672, 50, 0, 0, 0, 0, 50, 0, 778, 0,
	0, 0, 0, 441, 0, 0, 0, 0, 0, 1486,
	1483, 1484, 1485, 1477, 1478, 1479, 1480, 1482, 0, 809,
	0, 0, 889, 1703, 1704, 0, 0, 0, 0, 778,
	778, 0, 1710, 1711, 1712, 0, 0, 0, 778, 778,
	0, 0, 0, 0, 0, 0, 0, 1948, 1949, 781,
	0, 0, 0, 0, 0, 0, 0, 1958, 1740, 0,
	810, 1959, 0, 0, 297, 0, 0, 0, 0, 0,
	0, 778, 0, 0, 0, 0, 501, 0, 0, 0,
	0, 0, 1632, 0, 0, 0, 616, 0, 1632, 501,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 809, 0,
	0, 1991, 0, 501, 0, 0, 269, 0, 425, 0,
	0, 0, 0, 0, 0, 1787, 0, 0, 0, 0,
	0, 0, 0, 1156, 0, 1539, 0, 0, 1903, 0,
	0, 1632, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1814, 0, 0, 0,
	1817, 1818, 0, 0, 533, 1820, 0, 0, 0, 1214,
	0, 0, 1822, 269, 1824, 501, 0, 0, 0, 0,
	0, 0, 1830, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2049, 0, 0, 0, 0, 0, 0,
	0, 809, 0, 778, 0, 0, 0, 0, 0, 0,
	1632, 0, 0, 0, 0, 1839, 0, 0, 0, 0,
	0, 0, 0, 533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 913, 0, 932, 933, 934,
	942, 943, 944, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 0, 1872, 0, 0, 915, 0, 0,
	946, 0, 0, 0, 0, 0, 0, 0, 0, 470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 914,
	0, 0, 0, 0, 0, 929, 0, 0, 0, 0,
	912, 913, 0, 932, 933, 934, 942, 943, 944, 0,
	1906, 0, 778, 0, 0, 0, 935, 0, 0, 0,
	0, 0, 0, 915, 0, 0, 946, 0, 0, 1921,
	1922, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 914, 0, 0, 0, 0,
	0, 929, 50, 0, 0, 0, 50, 0, 0, 1934,
	0, 0, 0, 939, 947, 0, 0, 0, 0, 50,
	0, 0, 1938, 0, 0, 0, 0, 0, 0, 945,
	1417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 0, 930, 0, 0,
	920, 778, 0, 0, 0, 0, 719, 912, 913, 0,
	0, 0, 0, 942, 943, 944, 0, 0, 1214, 939,
	947, 936, 0, 0, 0, 0, 0, 0, 0, 0,
	915, 0, 0, 946, 0, 945, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 914, 930, 0, 0, 0, 0, 929, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 936, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 778, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 920, 533, 0,
	0, 0, 0, 0, 2033, 0, 0, 0, 0, 0,
	931, 0, 0, 0, 0, 0, 939, 947, 297, 0,
	0, 0, 940, 0, 938, 2047, 2047, 926, 927, 928,
	0, 925, 922, 923, 924, 916, 917, 918, 919, 921,
	0, 941, 0, 0, 937, 0, 0, 0, 1842, 0,
	930, 2047, 0, 0, 0, 0, 912, 913, 0, 932,
	933, 934, 942, 943, 944, 0, 1156, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 915,
	938, 0, 946, 926, 927, 928, 2047, 925, 922, 923,
	924, 916, 917, 918, 919, 921, 0, 941, 0, 0,
	0, 914, 0, 0, 1517, 0, 0, 929, 0, 0,
	0, 0, 0, 1156, 0, 0, 1156, 931, 0, 0,
	0, 0, 0, 50, 0, 0, 0, 0, 0, 940,
	0, 0, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 915, 920, 0, 946, 0,
	0, 0, 0, 0, 0, 0, 1475, 1476, 533, 1493,
	1494, 1495, 0, 0, 0, 939, 947, 914, 0, 0,
	0, 0, 1813, 929, 0, 0, 0, 938, 0, 0,
	0, 945, 0, 0, 925, 922, 923, 924, 916, 917,
	918, 919, 921, 937, 941, 0, 0, 0, 533, 930,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 533, 0,
	0, 0, 920, 936, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1481, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 937,
	0, 0, 0, 50, 0, 930, 0, 0, 940, 0,
	0, 912, 913, 0, 932, 933, 934, 942, 943, 944,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 915, 0, 0, 946, 0, 1491,
	0, 0, 0, 1156, 1156, 0, 0, 1156, 0, 0,
	0, 0, 0, 0, 0, 470, 914, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 938, 0, 0, 926,
	927, 928, 931, 925, 922, 923, 924, 916, 917, 918,
	919, 921, 0, 941, 940, 0, 0, 0, 0, 0,
	1516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 533, 0, 0,
	0, 920, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 947, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 926, 927, 928, 0, 925,
	922, 923, 924, 916, 917, 918, 919, 921, 937, 941,
	0, 0, 0, 0, 930, 0, 1515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1487,
	1488, 1489, 0, 1486, 1483, 1484, 1485, 1477, 1478, 1479,
	1480, 1482, 0, 0, 0, 0, 0, 0, 0, 0,
	1888, 0, 0, 0, 0, 0, 0, 0, 0, 50,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 533, 0, 0, 1156, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 926, 927, 928, 0, 925, 922,
	923, 924, 916, 917, 918, 919, 921, 0, 941, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 88, 89, 313, 90, 314,
	315, 316, 317, 216, 318, 319, 320, 321, 91, 92,
	93, 217, 218, 219, 220, 94, 221, 222, 322, 95,
	223, 224, 96, 323, 324, 225, 226, 227, 325, 228,
	326, 299, 327, 97, 98, 99, 0, 100, 328, 101,
	102, 103, 329, 300, 104, 105, 330, 331, 332, 333,
	334, 335, 106, 107, 270, 108, 229, 109, 230, 231,
	336, 110, 337, 111, 338, 339, 340, 112, 113, 341,
	114, 342, 0, 343, 232, 115, 116, 233, 234, 344,
	345, 346, 117, 118, 235, 0, 119, 347, 120, 348,
	349, 301, 350, 121, 236, 351, 237, 352, 122, 123,
	124, 125, 238, 239, 303, 353, 129, 354, 126, 355,
	302, 127, 240, 128, 241, 242, 243, 356, 244, 357,
	304, 130, 305, 131, 132, 358, 134, 133, 359, 245,
	306, 135, 307, 360, 136, 361, 362, 137, 0, 138,
	139, 140, 246, 141, 308, 142, 143, 145, 144, 363,
	364, 365, 247, 146, 248, 147, 148, 366, 149, 367,
	368, 150, 369, 370, 151, 249, 309, 152, 310, 250,
	153, 154, 155, 156, 371, 251, 157, 252, 158, 372,
	159, 160, 161, 253, 162, 163, 373, 164, 165, 166,
	167, 168, 170, 171, 169, 172, 173, 174, 374, 175,
	311, 176, 177, 254, 178, 0, 179, 180, 181, 182,
	375, 255, 183, 184, 376, 185, 186, 312, 187, 256,
	257, 188, 377, 194, 189, 190, 191, 193, 258, 192,
	259, 378, 195, 379, 196, 197, 198, 380, 260, 261,
	262, 381, 382, 199, 263, 264, 383, 200, 201, 202,
	203, 384, 385, 204, 205, 206, 386, 207, 387, 208,
	209, 210, 265, 266, 388, 389, 211, 390, 391, 392,
	393, 212, 213, 214, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 0, 0, 1626, 0, 0, 0, 0, 0, 0,
	0, 1627, 88, 89, 313, 90, 314, 315, 316, 317,
	216, 318, 319, 320, 321, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 322, 95, 223, 224, 96,
	323, 324, 225, 226, 227, 325, 228, 326, 299, 327,
	97, 98, 99, 0, 100, 328, 101, 102, 103, 329,
	300, 104, 105, 330, 331, 332, 333, 334, 335, 106,
	107, 270, 108, 229, 109, 230, 231, 336, 110, 337,
	111, 338, 339, 340, 112, 113, 341, 114, 342, 0,
	343, 232, 115, 116, 233, 234, 344, 345, 346, 117,
	118, 235, 0, 119, 347, 120, 348, 349, 301, 350,
	121, 236, 351, 237, 352, 122, 123, 124, 125, 238,
	239, 303, 353, 129, 354, 126, 355, 302, 127, 240,
	128, 241, 242, 243, 356, 244, 357, 304, 130, 305,
	131, 132, 358, 134, 133, 359, 245, 306, 135, 307,
	360, 136, 361, 362, 137, 0, 138, 139, 140, 246,
	141, 308, 142, 143, 145, 144, 363, 364, 365, 247,
	146, 248, 147, 148, 366, 149, 367, 368, 150, 369,
	370, 151, 249, 309, 152, 310, 250, 153, 154, 155,
	156, 371, 251, 157, 252, 158, 372, 159, 160, 161,
	253, 162, 163, 373, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 374, 175, 311, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 375, 255, 183,
	184, 376, 185, 186, 312, 187, 256, 257, 188, 377,
	194, 189, 190, 191, 193, 258, 192, 259, 378, 195,
	379, 196, 197, 198, 380, 260, 261, 262, 381, 382,
	199, 263, 264, 383, 200, 201, 202, 203, 384, 385,
	204, 205, 206, 386, 207, 387, 208, 209, 210, 265,
	266, 388, 389, 211, 390, 391, 392, 393, 212, 213,
	214, 215, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1976, 88, 89, 313, 90, 314, 315, 316, 317, 216,
	318, 319, 320, 321, 91, 92, 93, 217, 218, 219,
	220, 94, 221, 222, 322, 95, 223, 224, 96, 323,
	324, 225, 226, 227, 325, 228, 326, 299, 327, 97,
	98, 99, 0, 100, 328, 101, 102, 103, 329, 300,
	104, 105, 330, 331, 332, 333, 334, 335, 106, 107,
	270, 108, 229, 109, 230, 231, 336, 110, 337, 111,
	338, 339, 340, 112, 113, 341, 114, 342, 0, 343,
	232, 115, 116, 233, 234, 344, 345, 346, 117, 118,
	235, 0, 119, 347, 120, 348, 349, 301, 350, 121,
	236, 351, 237, 352, 122, 123, 124, 125, 238, 239,
	303, 353, 129, 354, 126, 355, 302, 127, 240, 128,
	241, 242, 243, 356, 244, 357, 304, 130, 305, 131,
	132, 358, 134, 133, 359, 245, 306, 135, 307, 360,
	136, 361, 362, 137, 0, 138, 139, 140, 246, 141,
	308, 142, 143, 145, 144, 363, 364, 365, 247, 146,
	248, 147, 148, 366, 149, 367, 368, 150, 369, 370,
	151, 249, 309, 152, 310, 250, 153, 154, 155, 156,
	371, 251, 157, 252, 158, 372, 159, 160, 161, 253,
	162, 163, 373, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 174, 374, 175, 311, 176, 177, 254,
	178, 0, 179, 180, 181, 182, 375, 255, 183, 184,
	376, 185, 186, 312, 187, 256, 257, 188, 377, 194,
	189, 190, 191, 193, 258, 192, 259, 378, 195, 379,
	196, 197, 198, 380, 260, 261, 262, 381, 382, 199,
	263, 264, 383, 200, 201, 202, 203, 384, 385, 204,
	205, 206, 386, 207, 387, 208, 209, 210, 265, 266,
	388, 389, 211, 390, 391, 392, 393, 212, 213, 214,
	215, 294, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 743, 0, 0, 88, 89, 313,
	90, 314, 315, 316, 317, 216, 318, 319, 320, 321,
	91, 92, 93, 217, 218, 219, 220, 94, 221, 222,
	322, 95, 223, 224, 96, 323, 324, 225, 226, 227,
	325, 228, 326, 299, 327, 97, 98, 99, 0, 100,
	328, 101, 102, 103, 329, 300, 104, 105, 330, 331,
	332, 333, 334, 335, 106, 107, 270, 108, 229, 109,
	230, 231, 336, 110, 337, 111, 338, 339, 340, 112,
	113, 341, 114, 342, 0, 343, 232, 115, 116, 233,
	234, 344, 345, 346, 117, 118, 235, 0, 119, 347,
	120, 348, 349, 301, 350, 121, 236, 351, 237, 352,
	122, 123, 124, 125, 238, 239, 303, 353, 129, 354,
	126, 355, 302, 127, 240, 128, 241, 242, 243, 356,
	244, 357, 304, 130, 305, 131, 132, 358, 134, 133,
	359, 245, 306, 135, 307, 360, 136, 361, 362, 137,
	0, 138, 139, 140, 246, 141, 308, 142, 143, 145,
	144, 363, 364, 365, 247, 146, 248, 147, 148, 366,
	149, 367, 368, 150, 369, 370, 151, 249, 309, 152,
	310, 250, 153, 154, 155, 156, 371, 251, 157, 252,
	158, 372, 159, 160, 161, 253, 162, 163, 373, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 174,
	374, 175, 311, 176, 177, 254, 178, 0, 179, 180,
	181, 182, 375, 255, 183, 184, 376, 185, 186, 312,
	187, 256, 257, 188, 377, 194, 189, 190, 191, 193,
	258, 192, 259, 378, 195, 379, 196, 197, 198, 380,
	260, 261, 262, 381, 382, 199, 263, 264, 383, 200,
	201, 202, 203, 384, 385, 204, 205, 206, 386, 207,
	387, 208, 209, 210, 265, 266, 388, 389, 211, 390,
	391, 392, 393, 212, 213, 214, 215, 654, 643, 644,
	641, 642, 633, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 0, 0, 0,
	0, 670, 636, 0, 0, 0, 91, 92, 93, 217,
	685, 219, 686, 94, 687, 688, 0, 95, 223, 224,
	96, 639, 669, 689, 690, 227, 0, 681, 0, 662,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 300, 104, 105, 0, 663, 665, 0, 664, 666,
	106, 107, 270, 108, 691, 109, 692, 693, 720, 110,
	0, 111, 0, 0, 0, 684, 113, 0, 114, 0,
	0, 0, 627, 115, 116, 671, 672, 650, 0, 0,
	117, 118, 694, 0, 119, 0, 120, 0, 0, 301,
	0, 121, 682, 0, 237, 0, 122, 123, 124, 125,
	678, 680, 303, 0, 129, 0, 126, 0, 302, 127,
	695, 128, 696, 697, 698, 0, 661, 0, 304, 130,
	305, 131, 132, 0, 134, 133, 0, 683, 306, 135,
	307, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	246, 141, 308, 142, 143, 145, 144, 622, 0, 651,
	679, 146, 699, 147, 148, 0, 149, 0, 0, 150,
	0, 0, 151, 249, 309, 152, 310, 673, 153, 154,
	155, 156, 0, 674, 157, 252, 158, 0, 159, 160,
	161, 700, 162, 163, 0, 164, 165, 166, 167, 168,
	170, 171, 169, 172, 173, 174, 0, 175, 311, 176,
	177, 628, 178, 0, 179, 180, 181, 182, 69, 255,
	183, 184, 667, 185, 186, 312, 187, 701, 257, 188,
	0, 194, 189, 190, 191, 193, 702, 192, 675, 0,
	195, 71, 196, 197, 198, 0, 260, 703, 704, 0,
	0, 199, 676, 677, 649, 200, 201, 202, 203, 0,
	0, 204, 205, 206, 668, 207, 0, 208, 209, 210,
	534, 705, 0, 0, 211, 0, 0, 0, 67, 212,
	213, 214, 215, 623, 68, 0, 0, 0, 654, 643,
	644, 641, 642, 633, 619, 620, 0, 0, 0, 0,
	621, 0, 0, 629, 88, 89, 1241, 90, 632, 0,
	0, 0, 670, 636, 0, 0, 0, 91, 92, 93,
	217, 685, 219, 686, 94, 687, 688, 0, 95, 223,
	224, 96, 639, 669, 689, 690, 227, 0, 681, 0,
	662, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 300, 104, 105, 0, 663, 665, 0, 664,
	666, 106, 107, 270, 108, 691, 109, 692, 693, 0,
	110, 0, 111, 0, 1242, 0, 684, 113, 0, 114,
	0, 0, 0, 627, 115, 116, 671, 672, 650, 0,
	0, 117, 118, 694, 0, 119, 0, 120, 0, 0,
	301, 0, 121, 682, 0, 237, 0, 122, 123, 124,
	125, 678, 680, 303, 0, 129, 0, 126, 0, 302,
	127, 695, 128, 696, 697, 698, 0, 661, 0, 304,
	130, 305, 131, 132, 0, 134, 133, 0, 683, 306,
	135, 307, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 246, 141, 308, 142, 143, 145, 144, 622, 0,
	651, 679, 146, 699, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 249, 309, 152, 310, 673, 153,
	154, 155, 156, 0, 674, 157, 252, 158, 0, 159,
	160, 161, 700, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 174, 0, 175, 311,
	176, 177, 628, 178, 0, 179, 180, 181, 182, 0,
	255, 183, 184, 667, 185, 186, 312, 187, 701, 257,
	188, 0, 194, 189, 190, 191, 193, 702, 192, 675,
	0, 195, 0, 196, 197, 198, 0, 260, 703, 704,
	0, 0, 199, 676, 677, 649, 200, 201, 202, 203,
	0, 0, 204, 205, 206, 668, 207, 0, 208, 209,
	210, 265, 705, 1240, 0, 211, 0, 0, 0, 0,
	212, 213, 214, 215, 623, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 620, 1243, 0, 0,
	0, 621, 0, 0, 629, 1238, 0, 0, 0, 632,
	654, 643, 644, 641, 642, 633, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 670, 636, 0, 0, 0, 91,
	92, 93, 217, 685, 219, 686, 94, 687, 688, 0,
	95, 223, 224, 96, 639, 669, 689, 690, 227, 0,
	681, 0, 662, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 300, 104, 105, 0, 663, 665,
	0, 664, 666, 106, 107, 270, 108, 691, 109, 692,
	693, 0, 110, 0, 111, 0, 0, 0, 684, 113,
	0, 114, 0, 0, 0, 627, 115, 116, 671, 672,
	650, 0, 0, 117, 118, 694, 0, 119, 0, 120,
	0, 0, 301, 0, 121, 682, 0, 237, 0, 122,
	123, 124, 125, 678, 680, 303, 0, 129, 0, 126,
	0, 302, 127, 695, 128, 696, 697, 698, 0, 661,
	0, 304, 130, 305, 131, 132, 0, 134, 133, 0,
	683, 306, 135, 307, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 246, 141, 308, 142, 143, 145, 144,
	622, 0, 651, 679, 146, 699, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 249, 309, 152, 310,
	673, 153, 154, 155, 156, 0, 674, 157, 252, 158,
	0, 159, 160, 161, 700, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 174, 0,
	175, 311, 176, 177, 628, 178, 0, 179, 180, 181,
	182, 69, 255, 183, 184, 667, 185, 186, 312, 187,
	701, 257, 188, 0, 194, 189, 190, 191, 193, 702,
	192, 675, 0, 195, 71, 196, 197, 198, 0, 260,
	703, 704, 0, 0, 199, 676, 677, 649, 200, 201,
	202, 203, 0, 0, 204, 205, 206, 668, 207, 0,
	208, 209, 210, 534, 705, 0, 0, 211, 0, 0,
	0, 67, 212, 213, 214, 215, 623, 68, 654, 643,
	644, 641, 642, 633, 0, 0, 0, 619, 620, 0,
	0, 0, 0, 621, 88, 89, 629, 90, 0, 0,
	0, 632, 670, 636, 0, 0, 0, 91, 92, 93,
	217, 685, 219, 686, 94, 687, 688, 1280, 95, 223,
	224, 96, 639, 669, 689, 690, 227, 0, 681, 0,
	662, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 300, 104, 105, 0, 663, 665, 0, 664,
	666, 106, 107, 270, 108, 691, 109, 692, 693, 0,
	110, 0, 111, 0, 0, 0, 684, 113, 0, 114,
	0, 0, 0, 627, 115, 116, 671, 672, 650, 0,
	0, 117, 118, 694, 0, 119, 0, 120, 0, 1285,
	301, 0, 121, 682, 0, 237, 0, 122, 123, 124,
	125, 678, 680, 303, 0, 129, 0, 126, 0, 302,
	127, 695, 128, 696, 697, 698, 0, 661, 0, 304,
	130, 305, 131, 132, 0, 134, 133, 1281, 683, 306,
	135, 307, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 246, 141, 308, 142, 143, 145, 144, 622, 0,
	651, 679, 146, 699, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 249, 309, 152, 310, 673, 153,
	154, 155, 156, 0, 674, 157, 252, 158, 0, 159,
	160, 161, 700, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 174, 0, 175, 311,
	176, 177, 628, 178, 0, 179, 180, 181, 182, 0,
	255, 183, 184, 667, 185, 186, 312, 187, 701, 257,
	188, 0, 194, 189, 190, 191, 193, 702, 192, 675,
	0, 195, 0, 196, 197, 198, 0, 260, 703, 704,
	0, 1282, 199, 676, 677, 649, 200, 201, 202, 203,
	0, 0, 204, 205, 206, 668, 207, 0, 208, 209,
	210, 265, 705, 0, 0, 211, 0, 0, 0, 0,
	212, 213, 214, 215, 623, 0, 654, 643, 644, 641,
	642, 633, 0, 0, 0, 619, 620, 0, 0, 0,
	0, 621, 88, 89, 629, 90, 0, 0, 0, 632,
	670, 636, 0, 0, 0, 91, 92, 93, 217, 685,
	219, 686, 94, 687, 688, 0, 95, 223, 224, 96,
	639, 669, 689, 690, 227, 0, 681, 0, 662, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	300, 104, 105, 0, 663, 665, 0, 664, 666, 106,
	107, 270, 108, 691, 109, 692, 693, 0, 110, 0,
	111, 0, 0, 0, 684, 113, 0, 114, 0, 0,
	0, 627, 115, 116, 671, 672, 650, 0, 0, 117,
	118, 694, 0, 119, 0, 120, 0, 0, 301, 0,
	121, 682, 0, 237, 0, 122, 123, 124, 125, 678,
	680, 303, 0, 129, 0, 126, 0, 302, 127, 695,
	128, 696, 697, 698, 0, 661, 0, 304, 130, 305,
	131, 132, 0, 134, 133, 0, 683, 306, 135, 307,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 308, 142, 143, 145, 144, 622, 1568, 651, 679,
	146, 699, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 249, 309, 152, 310, 673, 153, 154, 155,
	156, 0, 674, 157, 252, 158, 0, 159, 160, 161,
	700, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 311, 176, 177,
	628, 178, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 667, 185, 186, 312, 187, 701, 257, 188, 0,
	194, 189, 190, 191, 193, 702, 192, 675, 0, 195,
	0, 196, 197, 198, 0, 260, 703, 704, 0, 0,
	199, 676, 677, 649, 200, 201, 202, 203, 0, 0,
	204, 205, 206, 668, 207, 0, 208, 209, 210, 265,
	705, 0, 0, 211, 0, 0, 0, 0, 212, 213,
	214, 215, 623, 0, 654, 643, 644, 641, 642, 633,
	0, 0, 0, 619, 620, 617, 0, 0, 0, 621,
	88, 89, 629, 90, 0, 0, 0, 632, 670, 636,
	0, 0, 0, 91, 92, 93, 217, 685, 219, 686,
	94, 687, 688, 0, 95, 223, 224, 96, 639, 669,
	689, 690, 227, 0, 681, 0, 662, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 300, 104,
	105, 0, 663, 665, 0, 664, 666, 106, 107, 270,
	108, 691, 109, 692, 693, 0, 110, 0, 111, 0,
	0, 0, 684, 113, 0, 114, 0, 0, 0, 627,
	115, 116, 671, 672, 650, 0, 0, 117, 118, 694,
	0, 119, 0, 120, 0, 0, 301, 0, 121, 682,
	0, 237, 0, 122, 123, 124, 125, 678, 680, 303,
	0, 129, 0, 126, 0, 302, 127, 695, 128, 696,
	697, 698, 0, 661, 0, 304, 130, 305, 131, 132,
	0, 134, 133, 0, 683, 306, 135, 307, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 308,
	142, 143, 145, 144, 622, 0, 651, 679, 146, 699,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 309, 152, 310, 673, 153, 154, 155, 156, 0,
	674, 157, 252, 158, 0, 159, 160, 161, 700, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 311, 176, 177, 628, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 667,
	185, 186, 312, 187, 701, 257, 188, 0, 194, 189,
	190, 191, 193, 702, 192, 675, 0, 195, 0, 196,
	197, 198, 0, 260, 703, 704, 0, 0, 199, 676,
	677, 649, 200, 201, 202, 203, 0, 0, 204, 205,
	206, 668, 207, 0, 208, 209, 210, 265, 705, 0,
	0, 211, 0, 0, 0, 0, 212, 213, 214, 215,
	623, 0, 0, 0, 0, 654, 643, 644, 641, 642,
	633, 619, 620, 0, 0, 0, 0, 621, 969, 1233,
	629, 88, 89, 0, 90, 632, 0, 0, 0, 670,
	636, 0, 0, 0, 91, 92, 93, 217, 685, 219,
	686, 94, 687, 688, 0, 95, 223, 224, 96, 639,
	669, 689, 690, 227, 0, 681, 0, 662, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 300,
	104, 105, 0, 663, 665, 0, 664, 666, 106, 107,
	270, 108, 691, 109, 692, 693, 0, 110, 0, 111,
	0, 0, 0, 684, 113, 0, 114, 0, 0, 0,
	627, 115, 116, 671, 672, 650, 0, 0, 117, 118,
	694, 0, 119, 0, 120, 0, 0, 301, 0, 121,
	682, 0, 237, 0, 122, 123, 124, 125, 678, 680,
	303, 0, 129, 0, 126, 0, 302, 127, 695, 128,
	696, 697, 698, 0, 661, 0, 304, 130, 305, 131,
	132, 0, 134, 133, 0, 683, 306, 135, 307, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 246, 141,
	308, 142, 143, 145, 144, 622, 0, 651, 679, 146,
	699, 147, 148, 0, 149, 0, 0, 150, 0, 0,
	151, 249, 309, 152, 310, 673, 153, 154, 155, 156,
	0, 674, 157, 252, 158, 0, 159, 160, 161, 700,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 174, 0, 175, 311, 176, 177, 628,
	178, 0, 179, 180, 181, 182, 0, 255, 183, 184,
	667, 185, 186, 312, 187, 701, 257, 188, 0, 194,
	189, 190, 191, 193, 702, 192, 675, 0, 195, 0,
	196, 197, 198, 0, 260, 703, 704, 0, 0, 199,
	676, 677, 649, 200, 201, 202, 203, 0, 0, 204,
	205, 206, 668, 207, 0, 208, 209, 210, 265, 705,
	0, 0, 211, 0, 0, 0, 0, 212, 213, 214,
	215, 623, 0, 654, 643, 644, 641, 642, 633, 0,
	0, 0, 619, 620, 617, 0, 0, 0, 621, 88,
	89, 629, 90, 0, 0, 0, 632, 670, 636, 0,
	0, 0, 91, 92, 93, 217, 685, 219, 686, 94,
	687, 688, 0, 95, 223, 224, 96, 639, 669, 689,
	690, 227, 0, 681, 0, 662, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 300, 104, 105,
	0, 663, 665, 0, 664, 666, 106, 107, 270, 108,
	691, 109, 692, 693, 0, 110, 0, 111, 0, 0,
	0, 684, 113, 0, 114, 0, 0, 0, 627, 115,
	116, 671, 672, 650, 0, 0, 117, 118, 694, 0,
	119, 0, 120, 0, 0, 301, 0, 121, 682, 0,
	237, 0, 122, 123, 124, 125, 678, 680, 303, 0,
	129, 0, 126, 0, 302, 127, 695, 128, 696, 697,
	698, 0, 661, 0, 304, 130, 305, 131, 132, 0,
	134, 133, 0, 683, 306, 135, 307, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 246, 141, 308, 142,
	143, 145, 144, 622, 0, 651, 679, 146, 699, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 249,
	309, 152, 310, 673, 153, 154, 155, 156, 0, 674,
	157, 252, 158, 0, 159, 160, 161, 700, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 174, 0, 175, 311, 176, 177, 628, 178, 0,
	179, 180, 181, 182, 0, 255, 183, 184, 667, 185,
	186, 312, 187, 701, 257, 188, 0, 194, 189, 190,
	191, 193, 702, 192, 675, 0, 195, 0, 196, 197,
	198, 0, 260, 703, 704, 0, 0, 199, 676, 677,
	649, 200, 201, 202, 203, 0, 0, 204, 205, 206,
	668, 207, 0, 208, 209, 210, 265, 705, 0, 0,
	211, 0, 0, 0, 0, 212, 213, 214, 215, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	619, 620, 0, 0, 0, 0, 621, 0, 0, 629,
	1700, 0, 0, 0, 632, 654, 643, 644, 641, 642,
	633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 670,
	636, 0, 0, 0, 91, 92, 93, 217, 685, 219,
	686, 94, 687, 688, 0, 95, 223, 224, 96, 639,
	669, 689, 690, 227, 0, 681, 0, 662, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 300,
	104, 105, 0, 663, 665, 0, 664, 666, 106, 107,
	270, 108, 691, 109, 692, 693, 0, 110, 0, 111,
	0, 0, 0, 684, 113, 0, 114, 0, 0, 0,
	627, 115, 116, 671, 672, 650, 0, 0, 117, 118,
	694, 0, 119, 0, 120, 0, 0, 301, 0, 121,
	682, 0, 237, 0, 122, 123, 124, 125, 678, 680,
	303, 0, 129, 0, 126, 0, 302, 127, 695, 128,
	696, 697, 698, 0, 661, 0, 304, 130, 305, 131,
	132, 0, 134, 133, 0, 683, 306, 135, 307, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 246, 141,
	308, 142, 143, 145, 144, 622, 0, 651, 679, 146,
	699, 147, 148, 0, 149, 0, 0, 150, 0, 0,
	151, 249, 309, 152, 310, 673, 153, 154, 155, 156,
	0, 674, 157, 252, 158, 0, 159, 160, 161, 700,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 174, 0, 175, 311, 176, 177, 628,
	178, 0, 179, 180, 181, 182, 0, 255, 183, 184,
	667, 185, 186, 312, 187, 701, 257, 188, 0, 194,
	189, 190, 191, 193, 702, 192, 675, 0, 195, 0,
	196, 197, 198, 0, 260, 703, 704, 0, 0, 199,
	676, 677, 649, 200, 201, 202, 203, 0, 0, 204,
	205, 206, 668, 207, 0, 208, 209, 210, 265, 705,
	1657, 0, 211, 0, 0, 0, 0, 212, 213, 214,
	215, 623, 0, 654, 643, 644, 641, 642, 633, 0,
	0, 0, 619, 620, 0, 0, 0, 0, 621, 88,
	89, 629, 90, 0, 0, 0, 632, 670, 636, 0,
	0, 0, 91, 92, 93, 217, 685, 219, 686, 94,
	687, 688, 0, 95, 223, 224, 96, 639, 669, 689,
	690, 227, 0, 681, 0, 662, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 300, 104, 105,
	0, 663, 665, 0, 664, 666, 106, 107, 270, 108,
	691, 109, 692, 693, 0, 110, 0, 111, 0, 0,
	0, 684, 113, 0, 114, 0, 0, 0, 627, 115,
	116, 671, 672, 650, 0, 0, 117, 118, 694, 0,
	119, 0, 120, 0, 0, 301, 0, 121, 682, 0,
	237, 0, 122, 123, 124, 125, 678, 680, 303, 0,
	129, 0, 126, 0, 302, 127, 695, 128, 696, 697,
	698, 0, 661, 0, 304, 130, 305, 131, 132, 0,
	134, 133, 0, 683, 306, 135, 307, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 246, 141, 308, 142,
	143, 145, 144, 622, 0, 651, 679, 146, 699, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 249,
	309, 152, 310, 673, 153, 154, 155, 156, 0, 674,
	157, 252, 158, 0, 159, 160, 161, 700, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 174, 0, 175, 311, 176, 177, 628, 178, 0,
	179, 180, 181, 182, 0, 255, 183, 184, 667, 185,
	186, 312, 187, 701, 257, 188, 0, 194, 189, 190,
	191, 193, 702, 192, 675, 0, 195, 0, 196, 197,
	198, 0, 260, 703, 704, 0, 0, 199, 676, 677,
	649, 200, 201, 202, 203, 0, 0, 204, 205, 206,
	668, 207, 0, 208, 209, 210, 265, 705, 0, 0,
	211, 0, 0, 0, 0, 212, 213, 214, 215, 623,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	619, 620, 0, 0, 0, 0, 621, 0, 0, 629,
	1647, 0, 0, 0, 632, 654, 643, 644, 641, 642,
	633, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 0, 0, 0, 0, 670,
	636, 0, 0, 0, 91, 92, 93, 217, 685, 219,
	686, 94, 687, 688, 0, 95, 223, 224, 96, 639,
	669, 689, 690, 227, 0, 681, 0, 662, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 300,
	104, 105, 0, 663, 665, 0, 664, 666, 106, 107,
	270, 108, 691, 109, 692, 693, 720, 110, 0, 111,
	0, 0, 0, 684, 113, 0, 114, 0, 0, 0,
	627, 115, 116, 671, 672, 650, 0, 0, 117, 118,
	694, 0, 119, 0, 120, 0, 0, 301, 0, 121,
	682, 0, 237, 0, 122, 123, 124, 125, 678, 680,
	303, 0, 129, 0, 126, 0, 302, 127, 695, 128,
	696, 697, 698, 0, 661, 0, 304, 130, 305, 131,
	132, 0, 134, 133, 0, 683, 306, 135, 307, 0,
	136, 0, 0, 137, 0, 138, 139, 140, 246, 141,
	308, 142, 143, 145, 144, 622, 0, 651, 679, 146,
	699, 147, 148, 0, 149, 0, 0, 150, 0, 0,
	151, 249, 309, 152, 310, 673, 153, 154, 155, 156,
	0, 674, 157, 252, 158, 0, 159, 160, 161, 700,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 174, 0, 175, 311, 176, 177, 628,
	178, 0, 179, 180, 181, 182, 0, 255, 183, 184,
	667, 185, 186, 312, 187, 701, 257, 188, 0, 194,
	189, 190, 191, 193, 702, 192, 675, 0, 195, 0,
	196, 197, 198, 0, 260, 703, 704, 0, 0, 199,
	676, 677, 649, 200, 201, 202, 203, 0, 0, 204,
	205, 206, 668, 207, 0, 208, 209, 210, 265, 705,
	0, 0, 211, 0, 0, 0, 0, 212, 213, 214,
	215, 623, 0, 654, 643, 644, 641, 642, 633, 0,
	0, 0, 619, 620, 0, 0, 0, 0, 621, 88,
	89, 629, 90, 0, 0, 0, 632, 670, 636, 0,
	0, 0, 91, 92, 93, 217, 685, 219, 686, 94,
	687, 688, 0, 95, 223, 224, 96, 639, 669, 689,
	690, 227, 0, 681, 0, 662, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 300, 104, 105,
	0, 663, 665, 0, 664, 666, 106, 107, 270, 108,
	691, 109, 692, 693, 0, 110, 0, 111, 0, 0,
	0, 684, 113, 0, 114, 0, 0, 0, 627, 115,
	116, 671, 672, 650, 0, 0, 117, 118, 694, 0,
	119, 0, 120, 0, 1285, 301, 0, 121, 682, 0,
	237, 0, 122, 123, 124, 125, 678, 680, 303, 0,
	129, 0, 126, 0, 302, 127, 695, 128, 696, 697,
	698, 0, 661, 0, 304, 130, 305, 131, 132, 0,
	134, 133, 0, 683, 306, 135, 307, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 246, 141, 308, 142,
	143, 145, 144, 622, 0, 651, 679, 146, 699, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 249,
	309, 152, 310, 673, 153, 154, 155, 156, 0, 674,
	157, 252, 158, 0, 159, 160, 161, 700, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 174, 0, 175, 311, 176, 177, 628, 178, 0,
	179, 180, 181, 182, 0, 255, 183, 184, 667, 185,
	186, 312, 187, 701, 257, 188, 0, 194, 189, 190,
	191, 193, 702, 192, 675, 0, 195, 0, 196, 197,
	198, 0, 260, 703, 704, 0, 0, 199, 676, 677,
	649, 200, 201, 202, 203, 0, 0, 204, 205, 206,
	668, 207, 0, 208, 209, 210, 265, 705, 0, 0,
	211, 0, 0, 0, 0, 212, 213, 214, 215, 623,
	0, 654, 643, 644, 641, 642, 633, 0, 0, 0,
	619, 620, 0, 0, 0, 0, 621, 88, 89, 629,
	90, 0, 0, 0, 632, 670, 636, 0, 0, 0,
	91, 92, 93, 217, 685, 219, 686, 94, 687, 688,
	0, 95, 223, 224, 96, 639, 669, 689, 690, 227,
	0, 681, 0, 662, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 300, 104, 105, 0, 663,
	665, 0, 664, 666, 106, 107, 270, 108, 691, 109,
	692, 693, 0, 110, 0, 111, 0, 0, 0, 684,
	113, 0, 114, 0, 0, 0, 627, 115, 116, 671,
	672, 650, 0, 0, 117, 118, 694, 0, 119, 0,
	120, 0, 0, 301, 0, 121, 682, 0, 237, 0,
	122, 123, 124, 125, 678, 680, 303, 0, 129, 0,
	126, 0, 302, 127, 695, 128, 696, 697, 698, 0,
	661, 0, 304, 130, 305, 131, 132, 0, 134, 133,
	0, 683, 306, 135, 307, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 246, 141, 308, 142, 143, 145,
	144, 622, 0, 651, 679, 146, 699, 147, 148, 0,
	149, 0, 0, 150, 0, 0, 151, 249, 309, 152,
	310, 673, 153, 154, 155, 156, 0, 674, 157, 252,
	158, 0, 159, 160, 161, 700, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 174,
	0, 175, 311, 176, 177, 628, 178, 0, 179, 180,
	181, 182, 0, 255, 183, 184, 667, 185, 186, 312,
	187, 701, 257, 188, 0, 194, 189, 190, 191, 193,
	702, 192, 675, 0, 195, 0, 196, 197, 198, 0,
	260, 703, 704, 0, 0, 199, 676, 677, 649, 200,
	201, 202, 203, 0, 0, 204, 205, 206, 668, 207,
	0, 208, 209, 210, 265, 705, 0, 0, 211, 0,
	0, 0, 0, 212, 213, 214, 215, 623, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 619, 620,
	0, 0, 0, 0, 621, 0, 0, 629, 1228, 0,
	0, 0, 632, 654, 643, 644, 641, 642, 633, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 897, 90, 0, 0, 0, 0, 670, 636, 0,
	0, 0, 91, 92, 93, 217, 685, 219, 686, 94,
	687, 688, 0, 95, 223, 224, 96, 639, 669, 689,
	690, 227, 0, 681, 0, 662, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 300, 104, 105,
	0, 663, 665, 0, 664, 666, 106, 107, 270, 108,
	691, 109, 692, 693, 0, 110, 0, 111, 0, 0,
	0, 684, 113, 0, 114, 0, 0, 0, 627, 115,
	116, 671, 672, 650, 0, 0, 117, 118, 694, 0,
	119, 0, 120, 0, 0, 301, 0, 121, 682, 0,
	237, 0, 122, 123, 124, 125, 678, 680, 303, 0,
	129, 0, 126, 0, 302, 127, 695, 128, 696, 697,
	698, 0, 661, 0, 304, 130, 305, 131, 132, 0,
	134, 133, 0, 683, 306, 135, 307, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 246, 141, 308, 142,
	143, 145, 144, 622, 0, 651, 679, 146, 699, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 249,
	309, 152, 310, 673, 153, 154, 155, 156, 0, 674,
	157, 252, 158, 0, 159, 160, 161, 700, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 174, 0, 175, 311, 176, 177, 628, 178, 0,
	179, 180, 181, 182, 0, 255, 183, 184, 667, 185,
	186, 312, 187, 701, 257, 188, 0, 194, 189, 190,
	191, 193, 702, 192, 675, 0, 195, 0, 196, 197,
	198, 0, 260, 703, 704, 0, 0, 199, 676, 677,
	649, 200, 201, 202, 203, 0, 0, 204, 205, 206,
	668, 207, 0, 208, 209, 210, 265, 705, 0, 0,
	211, 0, 0, 0, 0, 212, 213, 214, 215, 623,
	0, 654, 643, 644, 641, 642, 633, 0, 0, 0,
	619, 620, 0, 0, 0, 0, 621, 88, 89, 629,
	90, 0, 0, 0, 632, 670, 636, 0, 0, 0,
	91, 92, 93, 217, 685, 219, 686, 94, 687, 688,
	0, 95, 223, 224, 96, 639, 669, 689, 690, 227,
	0, 681, 0, 662, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 300, 104, 2046, 0, 663,
	665, 0, 664, 666, 106, 107, 270, 108, 691, 109,
	692, 693, 0, 110, 0, 111, 0, 0, 0, 684,
	113, 0, 114, 0, 0, 0, 627, 115, 116, 671,
	672, 650, 0, 0, 117, 118, 694, 0, 119, 0,
	120, 0, 0, 301, 0, 121, 682, 0, 237, 0,
	122, 123, 124, 125, 678, 680, 303, 0, 129, 0,
	126, 0, 302, 127, 695, 128, 696, 697, 698, 0,
	661, 0, 304, 130, 305, 131, 132, 0, 134, 133,
	0, 683, 306, 135, 307, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 246, 141, 308, 142, 143, 145,
	144, 622, 0, 651, 679, 146, 699, 147, 148, 0,
	149, 0, 0, 150, 0, 0, 151, 249, 309, 152,
	310, 673, 153, 154, 155, 156, 0, 674, 157, 252,
	158, 0, 159, 160, 161, 700, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 174,
	0, 175, 311, 176, 177, 628, 178, 0, 179, 180,
	181, 182, 0, 255, 183, 184, 667, 185, 186, 312,
	187, 701, 257, 188, 0, 194, 189, 190, 191, 193,
	702, 192, 675, 0, 195, 0, 196, 197, 198, 0,
	260, 703, 704, 0, 0, 199, 676, 677, 649, 200,
	201, 2045, 203, 0, 0, 204, 205, 206, 668, 207,
	0, 208, 209, 210, 265, 705, 0, 0, 211, 0,
	0, 0, 0, 212, 213, 214, 215, 623, 0, 654,
	643, 644, 641, 642, 633, 0, 0, 0, 619, 620,
	0, 0, 0, 0, 621, 88, 89, 629, 90, 0,
	0, 0, 632, 670, 636, 0, 0, 0, 91, 92,
	93, 2044, 685, 219, 686, 94, 687, 688, 0, 95,
	223, 224, 96, 639, 669, 689, 690, 227, 0, 681,
	0, 662, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 300, 104, 2046, 0, 663, 665, 0,
	664, 666, 106, 107, 270, 108, 691, 109, 692, 693,
	0, 110, 0, 111, 0, 0, 0, 684, 113, 0,
	114, 0, 0, 0, 627, 115, 116, 671, 672, 650,
	0, 0, 117, 118, 694, 0, 119, 0, 120, 0,
	0, 301, 0, 121, 682, 0, 237, 0, 122, 123,
	124, 125, 678, 680, 303, 0, 129, 0, 126, 0,
	302, 127, 695, 128, 696, 697, 698, 0, 661, 0,
	304, 130, 305, 131, 132, 0, 134, 133, 0, 683,
	306, 135, 307, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 246, 141, 308, 142, 143, 145, 144, 622,
	0, 651, 679, 146, 699, 147, 148, 0, 149, 0,
	0, 150, 0, 0, 151, 249, 309, 152, 310, 673,
	153, 154, 155, 156, 0, 674, 157, 252, 158, 0,
	159, 160, 161, 700, 162, 163, 0, 164, 165, 166,
	167, 168, 170, 171, 169, 172, 173, 174, 0, 175,
	311, 176, 177, 628, 178, 0, 179, 180, 181, 182,
	0, 255, 183, 184, 667, 185, 186, 312, 187, 701,
	257, 188, 0, 194, 189, 190, 191, 193, 702, 192,
	675, 0, 195, 0, 196, 197, 198, 0, 260, 703,
	704, 0, 0, 199, 676, 677, 649, 200, 201, 2045,
	203, 0, 0, 204, 205, 206, 668, 207, 0, 208,
	209, 210, 265, 705, 0, 0, 211, 0, 0, 0,
	0, 212, 213, 214, 215, 623, 0, 654, 643, 644,
	641, 642, 633, 0, 0, 0, 619, 620, 0, 0,
	0, 0, 621, 88, 89, 629, 90, 0, 0, 0,
	632, 670, 636, 0, 0, 0, 91, 92, 93, 217,
	685, 219, 686, 94, 687, 688, 0, 95, 223, 224,
	96, 639, 669, 689, 690, 227, 0, 681, 0, 662,
	0, 97, 98, 99, 0, 100, 0, 101, 102, 103,
	0, 300, 104, 105, 0, 663, 665, 0, 664, 666,
	106, 107, 270, 108, 691, 109, 692, 693, 0, 110,
	0, 111, 0, 0, 0, 684, 113, 0, 114, 0,
	0, 0, 627, 115, 116, 671, 672, 650, 0, 0,
	117, 118, 694, 0, 119, 0, 120, 0, 0, 301,
	0, 121, 682, 0, 237, 0, 122, 123, 124, 125,
	678, 680, 303, 0, 129, 0, 126, 0, 302, 127,
	695, 128, 696, 697, 698, 0, 661, 0, 304, 130,
	305, 131, 132, 0, 134, 133, 0, 683, 306, 135,
	307, 0, 136, 0, 0, 137, 0, 138, 139, 140,
	246, 141, 308, 142, 143, 145, 144, 622, 0, 651,
	679, 146, 699, 147, 148, 0, 149, 0, 0, 150,
	0, 0, 151, 249, 309, 152, 310, 673, 153, 154,
	155, 156, 0, 674, 157, 252, 158, 0, 159, 160,
	161, 700, 162, 163, 0, 164, 165, 166, 167, 168,
	170, 171, 169, 172, 173, 174, 0, 175, 311, 176,
	177, 628, 178, 0, 179, 180, 181, 182, 0, 255,
	183, 184, 667, 185, 186, 312, 187, 701, 257, 188,
	0, 194, 189, 190, 191, 193, 702, 192, 675, 0,
	195, 0, 196, 197, 198, 0, 260, 703, 704, 0,
	0, 199, 676, 677, 649, 200, 201, 202, 203, 0,
	0, 204, 205, 206, 668, 207, 0, 208, 209, 210,
	265, 705, 0, 0, 211, 0, 0, 0, 0, 212,
	213, 214, 215, 623, 0, 1257, 643, 644, 641, 642,
	633, 0, 0, 0, 619, 620, 0, 0, 0, 0,
	621, 88, 89, 629, 90, 0, 0, 0, 632, 670,
	636, 0, 0, 0, 91, 92, 93, 217, 685, 219,
	686, 94, 687, 688, 0, 95, 223, 224, 96, 639,
	669, 689, 690, 227, 0, 681, 0, 662, 0, 97,
	98, 99, 0, 100, 0, 101, 102, 103, 0, 300,
	104, 105, 0, 663, 665, 0, 664, 666, 106, 107,
	270, 108, 691, 1260, 692, 693, 0, 110, 0, 111,
	0, 0, 0, 684, 113, 0, 114, 0, 0, 0,
	627, 115, 116, 671, 672, 650, 0, 0, 117, 118,
	694, 0, 119, 0, 120, 0, 0, 301, 0, 121,
	682, 0, 237, 0, 122, 123, 1261, 125, 678, 680,
	303, 0, 129, 0, 126, 0, 302, 127, 695, 128,
	696, 697, 698, 0, 661, 0, 304, 130, 305, 131,
	132, 0, 134, 133, 0, 683, 306, 135, 307, 0,
	136, 0, 0, 137, 0, 138, 1262, 1259, 246, 141,
	308, 142, 143, 145, 144, 622, 0, 651, 679, 146,
	699, 147, 148, 0, 149, 0, 0, 150, 0, 0,
	151, 249, 309, 152, 310, 673, 153, 154, 155, 156,
	0, 674, 157, 252, 158, 0, 159, 160, 161, 700,
	162, 163, 0, 164, 165, 166, 167, 168, 170, 171,
	169, 172, 173, 174, 0, 175, 311, 176, 177, 628,
	178, 0, 179, 180, 181, 1263, 0, 255, 183, 184,
	667, 185, 186, 312, 187, 701, 257, 188, 0, 194,
	189, 190, 191, 193, 702, 192, 675, 0, 195, 0,
	196, 197, 198, 0, 260, 703, 704, 0, 0, 199,
	676, 677, 649, 200, 201, 202, 203, 0, 0, 204,
	205, 206, 668, 207, 0, 208, 209, 210, 265, 705,
	0, 0, 211, 0, 0, 0, 0, 212, 213, 1258,
	215, 623, 0, 654, 643, 644, 641, 642, 633, 0,
	0, 0, 619, 620, 0, 0, 0, 0, 621, 88,
	89, 629, 90, 0, 0, 0, 632, 670, 636, 0,
	0, 0, 91, 92, 93, 217, 685, 219, 686, 94,
	687, 688, 0, 95, 223, 224, 96, 639, 669, 689,
	690, 227, 0, 681, 0, 662, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 300, 104, 105,
	0, 663, 665, 0, 664, 666, 106, 107, 270, 108,
	691, 109, 692, 693, 0, 110, 0, 111, 0, 0,
	0, 684, 113, 0, 114, 0, 0, 0, 627, 115,
	116, 671, 672, 650, 0, 0, 117, 118, 694, 0,
	119, 0, 120, 0, 0, 301, 0, 121, 682, 0,
	237, 0, 122, 123, 124, 125, 678, 680, 303, 0,
	129, 0, 126, 0, 302, 127, 695, 128, 696, 697,
	698, 0, 661, 0, 304, 130, 305, 131, 132, 0,
	134, 133, 0, 683, 306, 135, 307, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 246, 141, 308, 142,
	143, 145, 144, 0, 0, 651, 679, 146, 699, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 249,
	309, 152, 310, 673, 153, 154, 155, 156, 0, 674,
	157, 252, 158, 0, 159, 160, 161, 700, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 174, 0, 175, 311, 176, 177, 1275, 178, 0,
	179, 180, 181, 182, 0, 255, 183, 184, 667, 185,
	186, 312, 187, 701, 257, 188, 0, 194, 189, 190,
	191, 193, 702, 192, 675, 0, 195, 0, 196, 197,
	198, 0, 260, 703, 704, 0, 0, 199, 676, 677,
	649, 200, 201, 202, 203, 0, 0, 204, 205, 206,
	668, 207, 0, 208, 209, 210, 265, 705, 0, 0,
	211, 0, 0, 0, 0, 212, 213, 214, 215, 0,
	0, 654, 643, 644, 641, 642, 633, 0, 0, 0,
	1271, 1272, 0, 0, 0, 0, 1273, 88, 89, 1274,
	90, 0, 0, 0, 632, 670, 636, 0, 0, 0,
	91, 92, 93, 0, 685, 219, 686, 94, 687, 688,
	0, 95, 223, 224, 96, 639, 669, 689, 690, 227,
	0, 681, 0, 662, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 300, 104, 2046, 0, 663,
	665, 0, 664, 666, 106, 107, 270, 108, 691, 109,
	692, 693, 0, 110, 0, 111, 0, 0, 0, 684,
	113, 0, 114, 0, 0, 0, 627, 115, 116, 671,
	672, 650, 0, 0, 117, 118, 694, 0, 119, 0,
	120, 0, 0, 301, 0, 121, 682, 0, 237, 0,
	122, 123, 124, 125, 678, 680, 0, 0, 129, 0,
	126, 0, 302, 127, 695, 128, 696, 697, 698, 0,
	661, 0, 0, 130, 305, 131, 132, 0, 134, 133,
	0, 683, 306, 135, 0, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 246, 141, 308, 142, 143, 145,
	144, 622, 0, 651, 679, 146, 699, 147, 148, 0,
	149, 0, 0, 150, 0, 0, 151, 249, 309, 152,
	310, 673, 153, 154, 155, 156, 0, 674, 157, 252,
	158, 0, 159, 160, 161, 700, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 174,
	0, 175, 311, 176, 177, 628, 178, 0, 179, 180,
	181, 182, 0, 255, 183, 184, 667, 185, 186, 0,
	187, 701, 257, 188, 0, 194, 189, 190, 191, 193,
	702, 192, 675, 0, 195, 0, 196, 197, 198, 0,
	260, 703, 704, 0, 0, 199, 676, 677, 649, 200,
	201, 2045, 203, 0, 0, 204, 205, 206, 668, 207,
	0, 208, 209, 210, 265, 705, 0, 0, 211, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 0, 654,
	643, 644, 641, 642, 633, 0, 0, 0, 619, 620,
	0, 0, 0, 0, 621, 88, 89, 629, 90, 0,
	0, 0, 632, 670, 636, 0, 0, 0, 91, 92,
	93, 217, 685, 219, 686, 94, 687, 688, 0, 95,
	223, 224, 96, 0, 669, 689, 690, 227, 0, 681,
	0, 662, 0, 97, 98, 99, 0, 100, 0, 101,
	102, 103, 0, 300, 104, 105, 0, 663, 665, 0,
	664, 666, 106, 107, 270, 108, 691, 109, 692, 693,
	0, 110, 0, 111, 0, 0, 0, 684, 113, 0,
	114, 0, 0, 0, 232, 115, 116, 671, 672, 650,
	0, 0, 117, 118, 694, 0, 119, 0, 120, 0,
	0, 301, 0, 121, 682, 0, 237, 0, 122, 123,
	124, 125, 678, 680, 303, 0, 129, 0, 126, 0,
	302, 127, 695, 128, 696, 697, 698, 0, 661, 0,
	304, 130, 305, 131, 132, 0, 134, 133, 0, 683,
	306, 135, 307, 0, 136, 0, 0, 137, 0, 138,
	139, 140, 246, 141, 308, 142, 143, 145, 144, 0,
	0, 651, 679, 146, 699, 147, 148, 0, 149, 0,
	0, 150, 0, 0, 151, 249, 309, 152, 310, 673,
	153, 154, 155, 156, 0, 674, 157, 252, 158, 0,
	159, 160, 161, 700, 162, 163, 0, 164, 165, 166,
	167, 168, 170, 171, 169, 172, 173, 174, 0, 175,
	311, 176, 177, 1275, 178, 0, 179, 180, 181, 182,
	0, 255, 183, 184, 667, 185, 186, 312, 187, 701,
	257, 188, 0, 194, 189, 190, 191, 193, 702, 192,
	675, 0, 195, 0, 196, 197, 198, 0, 260, 703,
	704, 0, 0, 199, 676, 677, 649, 200, 201, 202,
	203, 654, 0, 204, 205, 206, 668, 207, 0, 208,
	209, 210, 265, 705, 0, 0, 211, 88, 89, 0,
	90, 212, 213, 214, 215, 670, 0, 0, 0, 0,
	91, 92, 93, 217, 218, 219, 220, 94, 221, 222,
	0, 95, 223, 224, 96, 1274, 669, 225, 226, 227,
	632, 681, 0, 662, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 300, 104, 105, 0, 663,
	665, 0, 664, 666, 106, 107, 270, 108, 229, 109,
	230, 231, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 232, 115, 116, 671,
	672, 0, 0, 0, 117, 118, 235, 0, 119, 0,
	120, 0, 0, 301, 0, 121, 682, 0, 237, 0,
	122, 123, 124, 125, 678, 680, 303, 0, 129, 0,
	126, 0, 302, 127, 240, 128, 241, 242, 243, 0,
	244, 0, 304, 130, 305, 131, 132, 0, 134, 133,
	0, 683, 306, 135, 307, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 246, 141, 308, 142, 143, 145,
	144, 0, 0, 0, 679, 146, 248, 147, 148, 0,
	149, 0, 0, 150, 0, 0, 151, 249, 309, 152,
	310, 673, 153, 154, 155, 156, 0, 674, 157, 252,
	158, 0, 159, 160, 161, 253, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 174,
	0, 175, 311, 176, 177, 254, 178, 0, 179, 180,
	181, 182, 0, 255, 183, 184, 667, 185, 186, 312,
	187, 256, 257, 188, 0, 194, 189, 190, 191, 193,
	258, 192, 675, 0, 195, 0, 196, 197, 198, 0,
	260, 261, 262, 0, 0, 199, 676, 677, 0, 200,
	201, 202, 203, 530, 0, 204, 205, 206, 668, 207,
	0, 208, 209, 210, 265, 266, 0, 0, 211, 88,
	89, 0, 90, 212, 213, 214, 215, 216, 0, 0,
	0, 0, 91, 92, 93, 217, 218, 219, 220, 94,
	221, 222, 0, 95, 223, 224, 96, 1541, 0, 225,
	226, 227, 0, 228, 0, 299, 0, 97, 98, 99,
	0, 100, 0, 101, 102, 103, 0, 300, 104, 105,
	0, 0, 0, 0, 0, 0, 106, 107, 270, 108,
	229, 109, 230, 231, 0, 110, 0, 111, 0, 0,
	0, 112, 113, 0, 114, 0, 0, 0, 232, 115,
	116, 233, 234, 0, 0, 0, 117, 118, 235, 0,
	119, 0, 120, 0, 0, 301, 0, 121, 236, 0,
	237, 0, 122, 123, 124, 125, 238, 239, 303, 0,
	129, 0, 126, 0, 302, 127, 240, 128, 241, 242,
	243, 0, 244, 0, 304, 130, 305, 131, 132, 0,
	134, 133, 0, 245, 306, 135, 307, 0, 136, 0,
	0, 137, 0, 138, 139, 140, 246, 141, 308, 142,
	143, 145, 144, 0, 0, 0, 247, 146, 248, 147,
	148, 0, 149, 0, 0, 150, 0, 0, 151, 249,
	309, 152, 310, 250, 153, 154, 155, 156, 0, 251,
	157, 252, 158, 0, 159, 160, 161, 253, 162, 163,
	0, 164, 165, 166, 167, 168, 170, 171, 169, 172,
	173, 174, 0, 175, 311, 176, 177, 254, 178, 0,
	179, 180, 181, 182, 69, 255, 183, 184, 0, 185,
	186, 312, 187, 256, 257, 188, 0, 194, 189, 190,
	191, 193, 258, 192, 259, 0, 195, 71, 196, 197,
	198, 0, 260, 261, 262, 0, 0, 199, 263, 264,
	0, 200, 201, 202, 203, 0, 0, 204, 205, 206,
	0, 207, 0, 208, 209, 210, 534, 266, 0, 0,
	211, 0, 0, 0, 67, 212, 213, 214, 215, 0,
	68, 530, 739, 0, 847, 844, 839, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 89, 66,
	90, 0, 0, 0, 0, 216, 0, 0, 0, 0,
	91, 92, 93, 217, 218, 219, 220, 94, 221, 222,
	0, 95, 223, 224, 96, 0, 0, 225, 226, 227,
	0, 228, 0, 299, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 300, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 270, 108, 229, 109,
	230, 231, 850, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 232, 115, 116, 233,
	234, 841, 0, 0, 117, 118, 235, 0, 119, 0,
	120, 0, 0, 301, 0, 121, 236, 0, 237, 0,
	122, 123, 124, 125, 238, 239, 303, 0, 129, 0,
	126, 0, 302, 127, 240, 128, 241, 242, 243, 0,
	244, 0, 304, 130, 305, 131, 132, 0, 134, 133,
	0, 245, 306, 135, 307, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 246, 141, 308, 142, 143, 145,
	144, 0, 0, 0, 247, 146, 248, 147, 148, 0,
	149, 842, 0, 150, 0, 0, 151, 249, 309, 152,
	310, 250, 153, 154, 155, 156, 0, 251, 157, 252,
	158, 0, 159, 160, 161, 253, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 174,
	0, 175, 311, 176, 177, 254, 178, 0, 179, 180,
	181, 182, 0, 255, 183, 184, 0, 185, 186, 312,
	187, 256, 257, 188, 0, 194, 189, 190, 191, 193,
	258, 192, 259, 0, 195, 0, 196, 197, 198, 0,
	260, 261, 262, 0, 0, 199, 263, 264, 840, 200,
	201, 202, 203, 0, 0, 204, 205, 206, 0, 207,
	0, 208, 209, 210, 265, 266, 530, 739, 211, 847,
	844, 839, 0, 212, 213, 214, 215, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 848, 845,
	216, 0, 0, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	0, 0, 225, 226, 227, 0, 228, 0, 299, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	300, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 835, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 841, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 301, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 238,
	239, 303, 0, 129, 0, 126, 0, 302, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 304, 130, 305,
	131, 132, 0, 134, 133, 0, 245, 306, 135, 307,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 308, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 842, 0, 150, 0,
	0, 151, 249, 309, 152, 310, 250, 153, 154, 155,
	156, 0, 251, 157, 252, 158, 0, 159, 160, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 311, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 0, 185, 186, 312, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	0, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 840, 200, 201, 202, 203, 0, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 265,
	266, 530, 739, 211, 847, 844, 839, 0, 212, 213,
	214, 215, 0, 0, 0, 0, 0, 88, 89, 0,
	90, 0, 0, 848, 845, 216, 0, 0, 0, 0,
	91, 92, 93, 217, 218, 219, 220, 94, 221, 222,
	0, 95, 223, 224, 96, 0, 0, 225, 226, 227,
	0, 228, 0, 299, 0, 97, 98, 99, 0, 100,
	0, 101, 102, 103, 0, 300, 104, 105, 0, 0,
	0, 0, 0, 0, 106, 107, 270, 108, 229, 109,
	230, 231, 0, 110, 0, 111, 0, 0, 0, 112,
	113, 0, 114, 0, 0, 0, 232, 115, 116, 233,
	234, 841, 0, 0, 117, 118, 235, 0, 119, 0,
	120, 0, 0, 301, 0, 121, 236, 0, 237, 0,
	122, 123, 124, 125, 238, 239, 303, 0, 129, 0,
	126, 0, 302, 127, 240, 128, 241, 242, 243, 0,
	244, 0, 304, 130, 305, 131, 132, 0, 134, 133,
	0, 245, 306, 135, 307, 0, 136, 0, 0, 137,
	0, 138, 139, 140, 246, 141, 308, 142, 143, 145,
	144, 0, 0, 0, 247, 146, 248, 147, 148, 0,
	149, 842, 0, 150, 0, 0, 151, 249, 309, 152,
	310, 250, 153, 154, 155, 156, 0, 251, 157, 252,
	158, 0, 159, 160, 161, 253, 162, 163, 0, 164,
	165, 166, 167, 168, 170, 171, 169, 172, 173, 174,
	0, 175, 311, 176, 177, 254, 178, 0, 179, 180,
	181, 182, 0, 255, 183, 184, 0, 185, 186, 312,
	187, 256, 257, 188, 0, 194, 189, 190, 191, 193,
	258, 192, 259, 0, 195, 0, 196, 197, 198, 0,
	260, 261, 262, 0, 0, 199, 263, 264, 840, 200,
	201, 202, 203, 0, 0, 204, 205, 206, 0, 207,
	0, 208, 209, 210, 265, 266, 85, 0, 211, 0,
	0, 0, 0, 212, 213, 214, 215, 0, 0, 0,
	0, 0, 88, 89, 0, 90, 0, 0, 848, 845,
	216, 0, 0, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	0, 0, 225, 226, 227, 0, 228, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 0, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 238,
	239, 0, 0, 129, 0, 126, 0, 0, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 245, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 0, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 0, 484, 150, 0,
	0, 151, 249, 0, 152, 0, 250, 153, 154, 155,
	156, 0, 251, 157, 252, 158, 0, 159, 160, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 0, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 69, 255, 183,
	184, 0, 185, 186, 0, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	71, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 0, 200, 201, 202, 203, 0, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 534,
	266, 0, 0, 211, 85, 0, 0, 67, 212, 213,
	214, 215, 0, 68, 0, 0, 0, 0, 0, 0,
	88, 89, 0, 90, 0, 0, 0, 0, 216, 0,
	1153, 0, 1158, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 238, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 69, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 71, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 0, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 534, 266, 0,
	0, 211, 85, 0, 0, 67, 212, 213, 214, 215,
	0, 68, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 0, 0, 0, 216, 0, 0, 0,
	66, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 0, 225, 226,
	227, 0, 228, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 0, 0, 117, 118, 235, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 238, 239, 0, 0, 129,
	0, 126, 0, 0, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 245, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 0, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 484, 150, 0, 0, 151, 249, 0,
	152, 0, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 253, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 0, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	0, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 0, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	85, 0, 0, 0, 212, 213, 214, 215, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 0, 216, 0, 1153, 0, 1158, 91,
	92, 93, 217, 218, 219, 220, 94, 221, 222, 0,
	95, 223, 224, 96, 0, 0, 225, 226, 227, 0,
	228, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 270, 108, 229, 109, 230,
	231, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 232, 115, 116, 233, 234,
	0, 0, 0, 117, 118, 235, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 236, 0, 237, 0, 122,
	123, 124, 125, 238, 239, 0, 0, 129, 0, 126,
	0, 0, 127, 240, 128, 241, 242, 243, 0, 244,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	245, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 246, 141, 0, 142, 143, 145, 144,
	0, 0, 0, 247, 146, 248, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 249, 0, 152, 0,
	250, 153, 154, 155, 156, 0, 251, 157, 252, 158,
	0, 159, 160, 161, 253, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 174, 0,
	175, 0, 176, 177, 254, 178, 0, 179, 180, 181,
	182, 0, 255, 183, 184, 0, 185, 186, 0, 187,
	256, 257, 188, 0, 194, 189, 190, 191, 193, 258,
	192, 259, 0, 195, 0, 196, 197, 198, 0, 260,
	261, 262, 0, 0, 199, 263, 264, 0, 200, 201,
	202, 203, 85, 0, 204, 205, 206, 0, 207, 0,
	208, 209, 210, 265, 266, 0, 0, 211, 88, 89,
	0, 90, 212, 213, 214, 215, 216, 0, 0, 0,
	0, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 747, 225, 226,
	227, 0, 228, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 0, 0, 117, 118, 235, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 238, 239, 0, 0, 129,
	0, 126, 0, 0, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 245, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 0, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 0,
	152, 0, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 253, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 0, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	0, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 85, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 1066, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 238, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 0, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 85, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	0, 211, 88, 89, 0, 90, 212, 213, 214, 215,
	216, 0, 0, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	1664, 0, 225, 226, 227, 0, 228, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 0, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 238,
	239, 0, 0, 129, 0, 126, 0, 0, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 245, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 0, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 249, 0, 152, 0, 250, 153, 154, 155,
	156, 0, 251, 157, 252, 158, 0, 159, 160, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 0, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 0, 185, 186, 0, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	0, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 0, 200, 201, 202, 203, 0, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 265,
	266, 0, 0, 211, 0, 0, 0, 0, 212, 213,
	214, 215, 654, 643, 644, 641, 642, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 716, 0, 0, 0, 216, 0, 0, 0,
	0, 91, 92, 93, 217, 685, 219, 686, 94, 687,
	688, 0, 95, 223, 224, 96, 0, 0, 689, 690,
	227, 0, 228, 0, 299, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 300, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 691,
	109, 692, 693, 0, 110, 0, 111, 0, 0, 0,
	684, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 650, 0, 0, 117, 118, 694, 0, 119,
	0, 120, 0, 0, 301, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 238, 239, 303, 0, 129,
	0, 126, 0, 302, 127, 695, 128, 696, 697, 698,
	0, 661, 0, 304, 130, 305, 131, 132, 0, 134,
	133, 0, 245, 306, 135, 307, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 308, 142, 143,
	145, 144, 0, 0, 651, 247, 146, 699, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 309,
	152, 310, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 700, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 311, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	312, 187, 701, 257, 188, 0, 194, 189, 190, 191,
	193, 702, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 703, 704, 0, 0, 199, 263, 264, 649,
	200, 201, 202, 203, 85, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 705, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 81,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 238, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 80, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 0, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	0, 211, 530, 739, 0, 0, 212, 213, 214, 215,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 0, 84, 0, 0, 216, 0, 0, 0,
	0, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 0, 225, 226,
	227, 0, 228, 0, 299, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 300, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 0, 0, 117, 118, 235, 0, 119,
	0, 120, 0, 0, 301, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 238, 239, 303, 0, 129,
	0, 126, 0, 302, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 304, 130, 305, 131, 132, 0, 134,
	133, 0, 245, 306, 135, 307, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 308, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 309,
	152, 310, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 253, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 311, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	312, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 85, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 238, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 0, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 0, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	530, 211, 0, 0, 0, 0, 212, 213, 214, 215,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	0, 0, 0, 84, 216, 0, 0, 0, 0, 91,
	92, 93, 217, 218, 219, 220, 94, 221, 222, 0,
	95, 223, 224, 96, 0, 0, 225, 226, 227, 0,
	228, 0, 299, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 300, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 270, 108, 229, 109, 230,
	231, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 232, 115, 116, 233, 234,
	0, 0, 0, 117, 118, 235, 0, 119, 0, 120,
	0, 0, 301, 0, 121, 236, 0, 237, 0, 122,
	123, 124, 125, 238, 239, 303, 0, 129, 0, 126,
	0, 302, 127, 240, 128, 241, 242, 243, 0, 244,
	0, 304, 130, 305, 131, 132, 0, 134, 133, 0,
	245, 306, 135, 307, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 246, 141, 308, 142, 143, 145, 144,
	0, 0, 0, 247, 146, 248, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 249, 309, 152, 310,
	250, 153, 154, 155, 156, 0, 251, 157, 252, 158,
	0, 159, 160, 161, 253, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 174, 0,
	175, 311, 176, 177, 254, 178, 0, 179, 180, 181,
	182, 0, 255, 183, 184, 0, 185, 186, 312, 187,
	256, 257, 188, 0, 194, 189, 190, 191, 193, 258,
	192, 259, 0, 195, 0, 196, 197, 198, 0, 260,
	261, 262, 0, 0, 199, 263, 264, 0, 200, 201,
	202, 203, 85, 0, 204, 205, 206, 0, 207, 0,
	208, 209, 210, 265, 266, 0, 0, 211, 88, 89,
	0, 90, 212, 213, 214, 215, 216, 0, 0, 0,
	0, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 0, 225, 226,
	227, 1027, 228, 0, 0, 0, 97, 98, 99, 0,
	100, 1025, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 1129, 0, 117, 118, 235, 0, 119,
	0, 120, 1030, 0, 0, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 238, 239, 0, 0, 129,
	1127, 126, 0, 0, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 245, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 0, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 0,
	152, 0, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 1029, 159, 160, 161, 253, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 0, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	0, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 85, 1128, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 1027, 228, 0, 0, 1022, 97, 98,
	99, 0, 100, 1025, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 1030, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 1021, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 1029, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 0, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 85, 1028, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	0, 211, 88, 89, 0, 90, 212, 213, 214, 215,
	216, 0, 1631, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	0, 0, 225, 226, 227, 0, 228, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 0, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 238,
	239, 0, 0, 129, 0, 126, 0, 0, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 245, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 0, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 249, 0, 152, 0, 250, 153, 154, 155,
	156, 0, 251, 157, 252, 158, 0, 159, 160, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 0, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 0, 185, 186, 0, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	0, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 0, 200, 201, 202, 203, 85, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 265,
	266, 0, 0, 211, 88, 89, 0, 90, 212, 213,
	214, 215, 216, 0, 0, 0, 0, 91, 92, 93,
	217, 218, 219, 220, 94, 221, 222, 0, 95, 223,
	224, 96, 0, 0, 225, 226, 227, 0, 228, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 270, 108, 229, 109, 230, 231, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 232, 115, 116, 233, 234, 0, 0,
	0, 117, 118, 235, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 236, 0, 237, 0, 122, 123, 124,
	125, 238, 239, 0, 0, 129, 0, 126, 0, 0,
	127, 240, 128, 241, 242, 243, 0, 244, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 245, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 246, 141, 0, 142, 143, 145, 144, 0, 0,
	0, 247, 146, 248, 147, 148, 0, 149, 0, 484,
	150, 0, 0, 151, 249, 0, 152, 0, 250, 153,
	154, 155, 156, 0, 251, 157, 252, 158, 0, 159,
	160, 161, 253, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 174, 0, 175, 0,
	176, 177, 254, 178, 0, 179, 180, 181, 182, 0,
	255, 183, 184, 0, 185, 186, 0, 187, 256, 257,
	188, 0, 194, 189, 190, 191, 193, 258, 192, 259,
	0, 195, 0, 196, 197, 198, 0, 260, 261, 262,
	0, 0, 199, 263, 264, 0, 200, 201, 202, 203,
	85, 0, 204, 205, 206, 0, 207, 0, 208, 209,
	210, 265, 266, 0, 0, 211, 88, 89, 0, 90,
	212, 213, 214, 215, 216, 0, 0, 0, 0, 91,
	92, 93, 217, 218, 219, 220, 94, 221, 222, 0,
	95, 223, 224, 96, 0, 0, 225, 226, 227, 0,
	228, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 270, 108, 229, 109, 230,
	231, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 232, 115, 116, 233, 234,
	0, 0, 0, 117, 118, 235, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 236, 0, 237, 0, 122,
	123, 124, 125, 772, 239, 0, 0, 129, 0, 126,
	0, 0, 127, 240, 128, 241, 242, 243, 0, 244,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	245, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 246, 141, 0, 142, 143, 145, 144,
	0, 0, 0, 247, 146, 248, 147, 148, 0, 149,
	0, 484, 150, 0, 0, 151, 249, 0, 152, 0,
	250, 153, 154, 155, 156, 0, 251, 157, 252, 158,
	0, 159, 160, 161, 253, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 174, 0,
	175, 0, 176, 177, 254, 178, 0, 179, 180, 181,
	182, 0, 255, 183, 184, 0, 185, 186, 0, 187,
	256, 257, 188, 0, 194, 189, 190, 191, 193, 258,
	192, 259, 0, 195, 0, 196, 197, 198, 0, 260,
	261, 262, 0, 0, 199, 263, 264, 0, 200, 201,
	202, 203, 85, 0, 204, 205, 206, 0, 207, 0,
	208, 209, 210, 265, 266, 0, 0, 211, 88, 89,
	542, 90, 212, 213, 214, 215, 216, 0, 0, 0,
	0, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 0, 225, 226,
	227, 0, 228, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 0, 0, 117, 118, 235, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 238, 239, 0, 0, 129,
	0, 126, 0, 0, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 245, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 0, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 0,
	152, 0, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 253, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 0, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	0, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 85, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 496, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 484, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 0, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 85, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	0, 211, 88, 89, 0, 90, 212, 213, 214, 215,
	216, 0, 0, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	0, 0, 225, 226, 227, 0, 228, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 0, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 489,
	239, 0, 0, 129, 0, 126, 0, 0, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 245, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 0, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 0, 484, 150, 0,
	0, 151, 249, 0, 152, 0, 250, 153, 154, 155,
	156, 0, 251, 157, 252, 158, 0, 159, 160, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 0, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 0, 185, 186, 0, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	0, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 0, 200, 201, 202, 203, 85, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 265,
	266, 0, 0, 211, 88, 89, 398, 90, 212, 213,
	214, 215, 216, 0, 0, 0, 0, 91, 92, 93,
	217, 218, 219, 220, 94, 221, 222, 0, 95, 223,
	224, 96, 0, 0, 225, 226, 227, 0, 228, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 270, 108, 229, 109, 230, 231, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 232, 115, 116, 233, 234, 0, 0,
	0, 117, 118, 235, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 236, 0, 237, 0, 122, 123, 124,
	125, 238, 239, 0, 0, 129, 0, 126, 0, 0,
	127, 240, 128, 241, 242, 243, 0, 244, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 245, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 246, 141, 0, 142, 143, 145, 144, 0, 0,
	0, 247, 146, 248, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 249, 0, 152, 0, 250, 153,
	154, 155, 156, 0, 251, 157, 252, 397, 0, 159,
	160, 161, 253, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 174, 0, 175, 0,
	176, 177, 254, 178, 0, 179, 180, 181, 182, 0,
	255, 183, 184, 0, 185, 186, 0, 187, 256, 257,
	188, 0, 194, 189, 190, 191, 193, 258, 192, 259,
	0, 195, 0, 196, 197, 198, 0, 260, 261, 262,
	0, 0, 199, 263, 264, 0, 200, 201, 202, 203,
	85, 0, 204, 205, 206, 0, 207, 0, 208, 209,
	210, 265, 266, 0, 0, 211, 88, 89, 0, 90,
	212, 213, 214, 215, 216, 0, 0, 0, 0, 91,
	92, 93, 217, 218, 219, 220, 94, 221, 222, 0,
	95, 223, 224, 96, 0, 0, 225, 226, 227, 0,
	228, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 270, 108, 229, 109, 230,
	231, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 232, 115, 116, 233, 234,
	0, 0, 0, 117, 118, 235, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 236, 0, 237, 0, 122,
	123, 124, 125, 238, 239, 0, 0, 129, 0, 126,
	0, 0, 127, 240, 128, 241, 242, 243, 0, 244,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	245, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 246, 141, 0, 142, 143, 145, 144,
	0, 0, 0, 247, 146, 248, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 249, 0, 152, 0,
	250, 153, 154, 155, 156, 0, 251, 157, 252, 158,
	0, 159, 160, 161, 253, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 174, 0,
	175, 0, 176, 177, 254, 178, 0, 179, 180, 181,
	182, 0, 255, 183, 184, 0, 185, 186, 0, 187,
	256, 257, 188, 0, 194, 189, 190, 191, 193, 258,
	192, 259, 0, 195, 0, 196, 197, 198, 0, 260,
	261, 262, 0, 0, 199, 263, 264, 0, 200, 201,
	202, 203, 85, 0, 204, 205, 206, 0, 207, 0,
	208, 209, 210, 265, 266, 0, 0, 211, 88, 89,
	0, 90, 212, 213, 214, 215, 216, 0, 0, 0,
	0, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 0, 225, 226,
	227, 0, 228, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 0, 0, 117, 118, 235, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 1321, 239, 0, 0, 129,
	0, 126, 0, 0, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 245, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 0, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 0,
	152, 0, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 253, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 0, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	0, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 85, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 1319, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 0, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 85, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	0, 211, 88, 89, 0, 90, 212, 213, 214, 215,
	216, 0, 0, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	0, 0, 225, 226, 227, 0, 228, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 0, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 1308,
	239, 0, 0, 129, 0, 126, 0, 0, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 245, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 0, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 249, 0, 152, 0, 250, 153, 154, 155,
	156, 0, 251, 157, 252, 158, 0, 159, 160, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 0, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 0, 185, 186, 0, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	0, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 0, 200, 201, 202, 203, 85, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 265,
	266, 0, 0, 211, 88, 89, 0, 90, 212, 213,
	214, 215, 216, 0, 0, 0, 0, 91, 92, 93,
	217, 218, 219, 220, 94, 221, 222, 0, 95, 223,
	224, 96, 0, 0, 225, 226, 227, 0, 228, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 270, 108, 229, 109, 230, 231, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 232, 115, 116, 233, 234, 0, 0,
	0, 117, 118, 235, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 236, 0, 237, 0, 122, 123, 124,
	125, 888, 239, 0, 0, 129, 0, 126, 0, 0,
	127, 240, 128, 241, 242, 243, 0, 244, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 245, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 246, 141, 0, 142, 143, 145, 144, 0, 0,
	0, 247, 146, 248, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 249, 0, 152, 0, 250, 153,
	154, 155, 156, 0, 251, 157, 252, 158, 0, 159,
	160, 161, 253, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 174, 0, 175, 0,
	176, 177, 254, 178, 0, 179, 180, 181, 182, 0,
	255, 183, 184, 0, 185, 186, 0, 187, 256, 257,
	188, 0, 194, 189, 190, 191, 193, 258, 192, 259,
	0, 195, 0, 196, 197, 198, 0, 260, 261, 262,
	0, 0, 199, 263, 264, 0, 200, 201, 202, 203,
	85, 0, 204, 205, 206, 0, 207, 0, 208, 209,
	210, 265, 266, 0, 0, 211, 88, 89, 0, 90,
	212, 213, 214, 215, 216, 0, 0, 0, 0, 91,
	92, 93, 217, 218, 219, 220, 94, 221, 222, 0,
	95, 223, 224, 96, 0, 0, 225, 226, 227, 0,
	228, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 270, 108, 229, 109, 230,
	231, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 232, 115, 116, 233, 234,
	0, 0, 0, 117, 118, 235, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 236, 0, 237, 0, 122,
	123, 124, 125, 238, 239, 0, 0, 129, 0, 126,
	0, 0, 127, 240, 128, 241, 242, 243, 0, 244,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	245, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 246, 141, 0, 142, 143, 145, 144,
	0, 0, 0, 247, 146, 248, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 249, 0, 152, 0,
	250, 153, 154, 155, 156, 0, 251, 157, 252, 158,
	0, 159, 160, 161, 253, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 174, 0,
	175, 0, 176, 177, 254, 178, 0, 179, 412, 181,
	182, 0, 255, 183, 184, 0, 185, 186, 0, 187,
	256, 257, 188, 0, 194, 189, 190, 191, 193, 258,
	192, 259, 0, 195, 0, 196, 197, 198, 0, 260,
	261, 262, 0, 0, 199, 263, 264, 0, 200, 201,
	202, 203, 85, 0, 204, 205, 206, 0, 207, 0,
	208, 209, 210, 265, 266, 0, 0, 211, 88, 89,
	0, 90, 212, 213, 214, 215, 216, 0, 757, 0,
	0, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 0, 225, 226,
	227, 0, 228, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 0, 0, 117, 118, 235, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 238, 239, 0, 0, 129,
	0, 126, 0, 0, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 245, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 0, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 0,
	152, 0, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 253, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 0, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 0, 186,
	0, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 85, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 594, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 0, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 85, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	0, 211, 88, 89, 0, 90, 212, 213, 214, 215,
	216, 0, 0, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	0, 0, 225, 226, 227, 0, 228, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 0, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 589,
	239, 0, 0, 129, 0, 126, 0, 0, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 245, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 0, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 249, 0, 152, 0, 250, 153, 154, 155,
	156, 0, 251, 157, 252, 158, 0, 159, 160, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 0, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 0, 185, 186, 0, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	0, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 0, 200, 201, 202, 203, 85, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 265,
	266, 0, 0, 211, 88, 89, 0, 90, 212, 213,
	214, 215, 216, 0, 0, 0, 0, 91, 92, 93,
	217, 218, 219, 220, 94, 221, 222, 0, 95, 223,
	224, 96, 0, 0, 225, 226, 548, 0, 228, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 270, 108, 229, 109, 230, 231, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 232, 115, 116, 233, 234, 0, 0,
	0, 117, 118, 235, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 236, 0, 237, 0, 122, 123, 124,
	125, 238, 239, 0, 0, 129, 0, 126, 0, 0,
	127, 240, 128, 241, 242, 243, 0, 244, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 245, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 246, 423, 0, 142, 143, 145, 144, 0, 0,
	0, 247, 146, 248, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 249, 0, 152, 0, 250, 153,
	154, 155, 156, 0, 251, 157, 252, 158, 0, 159,
	160, 161, 253, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 174, 0, 175, 0,
	176, 177, 254, 178, 0, 179, 180, 181, 182, 0,
	255, 183, 184, 0, 185, 186, 0, 187, 256, 257,
	188, 0, 194, 189, 190, 191, 193, 258, 192, 259,
	0, 195, 0, 196, 197, 198, 0, 422, 261, 262,
	0, 0, 418, 263, 264, 0, 200, 201, 202, 203,
	85, 0, 204, 205, 206, 0, 207, 0, 208, 209,
	210, 265, 266, 0, 0, 211, 88, 89, 0, 90,
	212, 213, 214, 215, 216, 0, 0, 0, 0, 91,
	92, 93, 217, 218, 219, 220, 94, 221, 222, 0,
	95, 223, 224, 96, 0, 0, 225, 226, 227, 0,
	228, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 270, 108, 229, 109, 230,
	231, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 232, 115, 116, 233, 234,
	0, 0, 0, 117, 118, 235, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 236, 0, 237, 0, 122,
	123, 124, 125, 238, 239, 0, 0, 129, 0, 126,
	0, 0, 127, 240, 128, 241, 242, 243, 0, 244,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	245, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 246, 423, 0, 142, 143, 145, 144,
	0, 0, 0, 247, 146, 248, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 249, 0, 152, 0,
	250, 153, 154, 155, 156, 0, 251, 157, 252, 158,
	0, 159, 160, 161, 253, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 174, 0,
	175, 0, 176, 177, 254, 178, 0, 179, 180, 181,
	182, 0, 255, 183, 184, 0, 185, 186, 0, 187,
	256, 257, 188, 0, 194, 189, 190, 191, 193, 258,
	192, 259, 0, 195, 0, 196, 197, 198, 0, 422,
	261, 262, 0, 0, 418, 263, 264, 0, 200, 201,
	202, 203, 85, 0, 204, 205, 206, 0, 207, 0,
	208, 209, 210, 265, 266, 0, 0, 211, 88, 89,
	0, 90, 212, 213, 214, 215, 216, 0, 0, 0,
	0, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 0, 225, 226,
	227, 0, 228, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 0, 0, 117, 118, 235, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 526, 239, 0, 0, 129,
	0, 126, 0, 0, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 245, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 0, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 0,
	152, 0, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 253, 162, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 0, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	0, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 85, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 523, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 136,
	0, 0, 137, 0, 138, 139, 140, 246, 141, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 254, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 184, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 0, 196,
	197, 198, 0, 260, 261, 262, 0, 0, 199, 263,
	264, 0, 200, 201, 202, 203, 85, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	0, 211, 88, 89, 0, 90, 212, 213, 214, 215,
	216, 0, 0, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	0, 0, 225, 226, 227, 0, 228, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 0, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 520,
	239, 0, 0, 129, 0, 126, 0, 0, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 245, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 0, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 249, 0, 152, 0, 250, 153, 154, 155,
	156, 0, 251, 157, 252, 158, 0, 159, 160, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 0, 176, 177,
	254, 178, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 0, 185, 186, 0, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	0, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 0, 200, 201, 202, 203, 85, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 265,
	266, 0, 0, 211, 88, 89, 0, 90, 212, 213,
	214, 215, 216, 0, 0, 0, 0, 91, 92, 93,
	217, 218, 219, 220, 94, 221, 222, 0, 95, 223,
	224, 96, 0, 0, 225, 226, 227, 0, 228, 0,
	0, 0, 97, 98, 99, 0, 100, 0, 101, 102,
	103, 0, 0, 104, 105, 0, 0, 0, 0, 0,
	0, 106, 107, 270, 108, 229, 109, 230, 231, 0,
	110, 0, 111, 0, 0, 0, 112, 113, 0, 114,
	0, 0, 0, 232, 115, 116, 233, 234, 0, 0,
	0, 117, 118, 235, 0, 119, 0, 120, 0, 0,
	0, 0, 121, 236, 0, 237, 0, 122, 123, 124,
	125, 518, 239, 0, 0, 129, 0, 126, 0, 0,
	127, 240, 128, 241, 242, 243, 0, 244, 0, 0,
	130, 0, 131, 132, 0, 134, 133, 0, 245, 0,
	135, 0, 0, 136, 0, 0, 137, 0, 138, 139,
	140, 246, 141, 0, 142, 143, 145, 144, 0, 0,
	0, 247, 146, 248, 147, 148, 0, 149, 0, 0,
	150, 0, 0, 151, 249, 0, 152, 0, 250, 153,
	154, 155, 156, 0, 251, 157, 252, 158, 0, 159,
	160, 161, 253, 162, 163, 0, 164, 165, 166, 167,
	168, 170, 171, 169, 172, 173, 174, 0, 175, 0,
	176, 177, 254, 178, 0, 179, 180, 181, 182, 0,
	255, 183, 184, 0, 185, 186, 0, 187, 256, 257,
	188, 0, 194, 189, 190, 191, 193, 258, 192, 259,
	0, 195, 0, 196, 197, 198, 0, 260, 261, 262,
	0, 0, 199, 263, 264, 0, 200, 201, 202, 203,
	85, 0, 204, 205, 206, 0, 207, 0, 208, 209,
	210, 265, 266, 0, 0, 211, 88, 89, 0, 90,
	212, 213, 214, 215, 216, 0, 0, 0, 0, 91,
	92, 93, 217, 218, 219, 220, 94, 221, 222, 0,
	95, 223, 224, 96, 0, 0, 225, 226, 227, 0,
	228, 0, 0, 0, 97, 98, 99, 0, 100, 0,
	101, 102, 103, 0, 0, 104, 105, 0, 0, 0,
	0, 0, 0, 106, 107, 270, 108, 229, 109, 230,
	231, 0, 110, 0, 111, 0, 0, 0, 112, 113,
	0, 114, 0, 0, 0, 232, 115, 116, 233, 234,
	0, 0, 0, 117, 118, 235, 0, 119, 0, 120,
	0, 0, 0, 0, 121, 236, 0, 237, 0, 122,
	123, 124, 125, 492, 239, 0, 0, 129, 0, 126,
	0, 0, 127, 240, 128, 241, 242, 243, 0, 244,
	0, 0, 130, 0, 131, 132, 0, 134, 133, 0,
	245, 0, 135, 0, 0, 136, 0, 0, 137, 0,
	138, 139, 140, 246, 141, 0, 142, 143, 145, 144,
	0, 0, 0, 247, 146, 248, 147, 148, 0, 149,
	0, 0, 150, 0, 0, 151, 249, 0, 152, 0,
	250, 153, 154, 155, 156, 0, 251, 157, 252, 158,
	0, 159, 160, 161, 253, 162, 163, 0, 164, 165,
	166, 167, 168, 170, 171, 169, 172, 173, 174, 0,
	175, 0, 176, 177, 254, 178, 0, 179, 180, 181,
	182, 0, 255, 183, 184, 0, 185, 186, 0, 187,
	256, 257, 188, 0, 194, 189, 190, 191, 193, 258,
	192, 259, 0, 195, 0, 196, 197, 198, 0, 260,
	261, 262, 0, 0, 199, 263, 264, 0, 200, 201,
	202, 203, 85, 0, 204, 205, 206, 0, 207, 0,
	208, 209, 210, 265, 266, 0, 0, 211, 88, 89,
	0, 90, 212, 213, 214, 215, 216, 0, 0, 0,
	0, 91, 92, 93, 217, 218, 219, 220, 94, 221,
	222, 0, 95, 223, 224, 96, 0, 0, 225, 226,
	227, 0, 228, 0, 0, 0, 97, 98, 99, 0,
	100, 0, 101, 102, 103, 0, 0, 104, 105, 0,
	0, 0, 0, 0, 0, 106, 107, 270, 108, 229,
	109, 230, 231, 0, 110, 0, 111, 0, 0, 0,
	112, 113, 0, 114, 0, 0, 0, 232, 115, 116,
	233, 234, 0, 0, 0, 117, 118, 235, 0, 119,
	0, 120, 0, 0, 0, 0, 121, 236, 0, 237,
	0, 122, 123, 124, 125, 238, 239, 0, 0, 129,
	0, 126, 0, 0, 127, 240, 128, 241, 242, 243,
	0, 244, 0, 0, 130, 0, 131, 132, 0, 134,
	133, 0, 245, 0, 135, 0, 0, 136, 0, 0,
	137, 0, 138, 139, 140, 246, 141, 0, 142, 143,
	145, 144, 0, 0, 0, 247, 146, 248, 147, 148,
	0, 149, 0, 0, 150, 0, 0, 151, 249, 0,
	152, 0, 250, 153, 154, 155, 156, 0, 251, 157,
	252, 158, 0, 159, 160, 161, 253, 473, 163, 0,
	164, 165, 166, 167, 168, 170, 171, 169, 172, 173,
	174, 0, 175, 0, 176, 177, 254, 178, 0, 179,
	180, 181, 182, 0, 255, 183, 184, 0, 185, 186,
	0, 187, 256, 257, 188, 0, 194, 189, 190, 191,
	193, 258, 192, 259, 0, 195, 0, 196, 197, 198,
	0, 260, 261, 262, 0, 0, 199, 263, 264, 0,
	200, 201, 202, 203, 85, 0, 204, 205, 206, 0,
	207, 0, 208, 209, 210, 265, 266, 0, 0, 211,
	88, 89, 0, 90, 212, 213, 214, 215, 216, 0,
	0, 0, 0, 91, 92, 93, 217, 218, 219, 220,
	94, 221, 222, 0, 95, 223, 224, 96, 0, 0,
	225, 226, 227, 0, 228, 0, 0, 0, 97, 98,
	99, 0, 100, 0, 101, 102, 103, 0, 0, 104,
	105, 0, 0, 0, 0, 0, 0, 106, 107, 270,
	108, 229, 109, 230, 231, 0, 110, 0, 111, 0,
	0, 0, 112, 113, 0, 114, 0, 0, 0, 232,
	115, 116, 233, 234, 0, 0, 0, 117, 118, 235,
	0, 119, 0, 120, 0, 0, 0, 0, 121, 236,
	0, 237, 0, 122, 123, 124, 125, 238, 239, 0,
	0, 129, 0, 126, 0, 0, 127, 240, 128, 241,
	242, 243, 0, 244, 0, 0, 130, 0, 131, 132,
	0, 134, 133, 0, 245, 0, 135, 0, 0, 415,
	0, 0, 137, 0, 138, 139, 140, 246, 423, 0,
	142, 143, 145, 144, 0, 0, 0, 247, 146, 248,
	147, 148, 0, 149, 0, 0, 150, 0, 0, 151,
	249, 0, 152, 0, 250, 153, 154, 155, 156, 0,
	251, 157, 252, 158, 0, 159, 160, 161, 253, 162,
	163, 0, 164, 165, 166, 167, 168, 170, 171, 169,
	172, 173, 174, 0, 175, 0, 176, 177, 417, 178,
	0, 179, 180, 181, 182, 0, 255, 183, 416, 0,
	185, 186, 0, 187, 256, 257, 188, 0, 194, 189,
	190, 191, 193, 258, 192, 259, 0, 195, 0, 196,
	197, 198, 0, 422, 261, 262, 0, 0, 418, 263,
	264, 0, 200, 201, 202, 203, 85, 0, 204, 205,
	206, 0, 207, 0, 208, 209, 210, 265, 266, 0,
	0, 211, 88, 89, 0, 90, 212, 213, 214, 215,
	216, 0, 0, 0, 0, 91, 92, 93, 217, 218,
	219, 220, 94, 221, 222, 0, 95, 223, 224, 96,
	0, 0, 225, 226, 227, 0, 228, 0, 0, 0,
	97, 98, 99, 0, 100, 0, 101, 102, 103, 0,
	0, 104, 105, 0, 0, 0, 0, 0, 0, 106,
	107, 270, 108, 229, 109, 230, 231, 0, 110, 0,
	111, 0, 0, 0, 112, 113, 0, 114, 0, 0,
	0, 232, 115, 116, 233, 234, 0, 0, 0, 117,
	118, 235, 0, 119, 0, 120, 0, 0, 0, 0,
	121, 236, 0, 237, 0, 122, 123, 124, 125, 238,
	239, 0, 0, 129, 0, 126, 0, 0, 127, 240,
	128, 241, 242, 243, 0, 244, 0, 0, 130, 0,
	131, 132, 0, 134, 133, 0, 245, 0, 135, 0,
	0, 136, 0, 0, 137, 0, 138, 139, 140, 246,
	141, 0, 142, 143, 145, 144, 0, 0, 0, 247,
	146, 248, 147, 148, 0, 149, 0, 0, 150, 0,
	0, 151, 249, 0, 152, 0, 250, 153, 154, 0,
	156, 0, 251, 157, 252, 158, 0, 159, 0, 161,
	253, 162, 163, 0, 164, 165, 166, 167, 168, 170,
	171, 169, 172, 173, 174, 0, 175, 0, 176, 177,
	254, 0, 0, 179, 180, 181, 182, 0, 255, 183,
	184, 0, 185, 186, 0, 187, 256, 257, 188, 0,
	194, 189, 190, 191, 193, 258, 192, 259, 0, 195,
	0, 196, 197, 198, 0, 260, 261, 262, 0, 0,
	199, 263, 264, 0, 200, 201, 202, 203, 0, 0,
	204, 205, 206, 0, 207, 0, 208, 209, 210, 265,
	266, 0, 0, 211, 0, 0, 0, 0, 212, 213,
	214, 215, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 0, 0, 0, 915, 0, 0, 946, 0,
	0, 0, 0, 912, 913, 0, 932, 933, 934, 942,
	943, 944, 0, 0, 0, 0, 0, 914, 0, 935,
	0, 0, 0, 929, 0, 0, 915, 0, 0, 946,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 914, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 913, 0, 932, 933, 934, 942,
	943, 944, 920, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 0, 0, 0, 0, 915, 0, 0, 946,
	0, 939, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 920, 0, 0, 0, 945, 914, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 0, 937,
	0, 0, 939, 947, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	937, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	936, 0, 939, 947, 0, 1475, 1476, 0, 1493, 1494,
	1495, 0, 931, 0, 0, 0, 0, 0, 945, 0,
	0, 1812, 0, 0, 940, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 940, 1490, 0, 0, 0,
	936, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 926, 927, 928, 0, 925,
	922, 923, 924, 916, 917, 918, 919, 921, 0, 941,
	0, 0, 0, 931, 0, 1481, 1467, 0, 0, 0,
	0, 0, 0, 938, 0, 940, 926, 927, 928, 0,
	925, 922, 923, 924, 916, 917, 918, 919, 921, 0,
	941, 0, 0, 0, 1988, 0, 0, 0, 0, 0,
	1496, 0, 0, 0, 912, 913, 0, 932, 933, 934,
	942, 943, 944, 0, 0, 0, 0, 0, 1491, 0,
	935, 0, 0, 0, 0, 0, 0, 915, 0, 0,
	946, 0, 0, 938, 0, 0, 926, 927, 928, 0,
	925, 922, 923, 924, 916, 917, 918, 919, 921, 914,
	941, 0, 0, 0, 1986, 929, 912, 913, 0, 932,
	933, 934, 942, 943, 944, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 0, 0, 0, 0, 915,
	0, 0, 946, 0, 0, 1492, 0, 0, 0, 0,
	0, 0, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 914, 0, 0, 920, 0, 0, 929, 935, 0,
	0, 0, 0, 0, 0, 915, 0, 0, 946, 0,
	0, 0, 0, 939, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 914, 0, 945,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 0, 0, 0, 920, 930, 1487, 1488,
	1489, 0, 1486, 1483, 1484, 1485, 1477, 1478, 1479, 1480,
	1482, 0, 0, 0, 0, 939, 947, 0, 0, 0,
	0, 936, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 945, 920, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 930,
	0, 939, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 945, 0, 0,
	0, 0, 0, 936, 0, 0, 940, 0, 0, 937,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 931, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 938, 0, 0, 926, 927, 928,
	0, 925, 922, 923, 924, 916, 917, 918, 919, 921,
	0, 941, 931, 0, 0, 1933, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 938, 0, 0, 926,
	927, 928, 0, 925, 922, 923, 924, 916, 917, 918,
	919, 921, 0, 941, 0, 0, 0, 1928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 926, 927, 928, 0, 925,
	922, 923, 924, 916, 917, 918, 919, 921, 0, 941,
	0, 912, 913, 1924, 932, 933, 934, 942, 943, 944,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 946, 0, 0,
	0, 0, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 0, 0, 0, 0, 0, 914, 0, 935, 0,
	0, 0, 929, 0, 0, 915, 0, 0, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 1475, 1476, 0,
	1493, 1494, 1495, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 0, 1644, 0, 0, 0, 0, 912, 913,
	0, 932, 933, 934, 942, 943, 944, 0, 0, 0,
	939, 947, 0, 0, 935, 0, 0, 0, 0, 0,
	0, 915, 920, 0, 946, 0, 945, 0, 1490, 912,
	913, 0, 932, 933, 934, 942, 943, 944, 937, 0,
	0, 939, 947, 914, 930, 935, 0, 0, 0, 929,
	0, 0, 915, 0, 0, 946, 0, 945, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 936, 937,
	0, 0, 0, 0, 914, 930, 0, 1481, 0, 0,
	929, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 920, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 1496, 0, 0, 0, 0, 939, 947, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 920,
	1491, 0, 0, 945, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 937, 0, 0, 939, 947,
	0, 930, 0, 0, 940, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 945, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 936, 937, 0, 0, 0,
	0, 938, 930, 0, 926, 927, 928, 0, 925, 922,
	923, 924, 916, 917, 918, 919, 921, 1492, 941, 0,
	0, 0, 1866, 0, 0, 0, 936, 0, 0, 0,
	0, 0, 938, 0, 0, 926, 927, 928, 931, 925,
	922, 923, 924, 916, 917, 918, 919, 921, 0, 941,
	940, 0, 0, 1844, 0, 0, 0, 0, 0, 912,
	913, 0, 932, 933, 934, 942, 943, 944, 0, 931,
	0, 0, 0, 0, 0, 935, 0, 0, 0, 0,
	0, 940, 915, 0, 0, 946, 0, 0, 0, 0,
	1487, 1488, 1489, 0, 1486, 1483, 1484, 1485, 1477, 1478,
	1479, 1480, 1482, 0, 914, 0, 0, 0, 938, 0,
	929, 926, 927, 928, 0, 925, 922, 923, 924, 916,
	917, 918, 919, 921, 0, 941, 0, 0, 0, 1843,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 938,
	0, 0, 926, 927, 928, 0, 925, 922, 923, 924,
	916, 917, 918, 919, 921, 0, 941, 0, 0, 920,
	1733, 0, 0, 0, 912, 913, 0, 932, 933, 934,
	942, 943, 944, 0, 0, 0, 0, 0, 939, 947,
	935, 0, 0, 0, 0, 0, 0, 915, 0, 0,
	946, 0, 0, 0, 945, 912, 913, 0, 932, 933,
	934, 942, 943, 944, 0, 0, 937, 0, 0, 914,
	0, 935, 930, 0, 0, 929, 0, 0, 915, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 936, 0, 0, 0,
	914, 0, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 920, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 931,
	0, 0, 0, 939, 947, 0, 0, 0, 0, 0,
	0, 940, 0, 0, 0, 920, 0, 0, 0, 945,
	912, 913, 0, 932, 933, 934, 942, 943, 944, 0,
	0, 937, 0, 0, 939, 947, 935, 930, 0, 0,
	0, 0, 0, 915, 0, 0, 946, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 936, 937, 0, 0, 914, 0, 0, 930, 938,
	0, 929, 926, 927, 928, 0, 925, 922, 923, 924,
	916, 917, 918, 919, 921, 0, 941, 0, 0, 0,
	1667, 0, 936, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 931, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 940, 0, 0, 0,
	920, 0, 0, 0, 0, 912, 913, 0, 932, 933,
	934, 942, 943, 944, 0, 931, 0, 0, 0, 939,
	947, 935, 0, 0, 0, 0, 1145, 940, 915, 0,
	0, 946, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	914, 0, 0, 930, 938, 0, 929, 926, 927, 928,
	0, 925, 922, 923, 924, 916, 917, 918, 919, 921,
	0, 941, 0, 0, 0, 1651, 0, 936, 0, 0,
	0, 0, 0, 0, 1146, 938, 0, 0, 926, 927,
	928, 0, 925, 922, 923, 924, 916, 917, 918, 919,
	921, 0, 941, 0, 0, 920, 1229, 0, 0, 0,
	912, 913, 0, 932, 933, 934, 942, 943, 944, 0,
	931, 0, 0, 0, 939, 947, 935, 0, 0, 0,
	0, 0, 940, 915, 0, 0, 946, 0, 0, 0,
	945, 912, 913, 0, 932, 933, 934, 942, 943, 944,
	0, 0, 937, 0, 0, 914, 0, 935, 930, 0,
	0, 929, 0, 0, 915, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 936, 0, 0, 0, 914, 0, 0, 0,
	938, 0, 929, 926, 927, 928, 0, 925, 922, 923,
	924, 916, 917, 918, 919, 921, 0, 941, 0, 1442,
	920, 2067, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 939,
	947, 0, 0, 0, 0, 0, 0, 940, 0, 0,
	0, 920, 0, 1507, 0, 945, 1506, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	939, 947, 0, 930, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 936, 937, 0,
	0, 0, 0, 0, 930, 938, 0, 0, 926, 927,
	928, 2066, 925, 922, 923, 924, 916, 917, 918, 919,
	921, 0, 941, 0, 0, 0, 0, 0, 936, 0,
	0, 0, 0, 0, 0, 0, 950, 0, 0, 0,
	931, 0, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 0, 940, 0, 0, 0, 0, 0, 935, 0,
	0, 0, 949, 0, 0, 915, 0, 0, 946, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 0, 0, 926, 927, 928, 0, 925, 922, 923,
	924, 916, 917, 918, 919, 921, 0, 941, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 920, 0, 926, 927, 928, 0, 925, 922,
	923, 924, 916, 917, 918, 919, 921, 0, 941, 0,
	0, 939, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 912, 913, 945, 932, 933,
	934, 942, 943, 944, 0, 0, 0, 0, 0, 937,
	0, 935, 0, 0, 0, 930, 0, 0, 915, 0,
	0, 946, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	914, 0, 0, 0, 0, 0, 929, 0, 0, 0,
	0, 912, 913, 0, 932, 933, 934, 942, 943, 944,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 946, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 940, 920, 914, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 939, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	945, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 0, 0, 0, 0, 930, 0,
	0, 920, 938, 0, 0, 926, 927, 928, 0, 925,
	922, 923, 924, 916, 917, 918, 919, 921, 0, 941,
	939, 947, 936, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 0, 0, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 931, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 940, 936, 1475,
	1476, 0, 1493, 1494, 1495, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1643, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 912, 913, 0, 932, 933, 934, 942, 943, 944,
	0, 931, 0, 0, 0, 0, 0, 935, 0, 0,
	1490, 0, 0, 940, 915, 938, 0, 946, 926, 927,
	928, 0, 925, 922, 923, 924, 916, 917, 918, 919,
	921, 0, 941, 1655, 0, 0, 914, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 912, 913, 0,
	932, 933, 934, 942, 943, 944, 0, 0, 0, 1481,
	0, 0, 0, 935, 0, 0, 0, 1508, 0, 0,
	915, 938, 0, 946, 926, 927, 928, 0, 925, 922,
	923, 924, 916, 917, 918, 919, 921, 0, 941, 0,
	0, 920, 914, 0, 1496, 0, 1513, 0, 929, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	939, 947, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 0, 0, 0, 930, 0, 0, 920, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 939, 947, 936, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	912, 913, 945, 932, 933, 934, 942, 943, 944, 0,
	0, 0, 0, 0, 937, 0, 935, 0, 0, 0,
	930, 0, 0, 915, 0, 0, 946, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 936, 914, 0, 0, 0, 0,
	0, 929, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1487, 1488, 1489, 0, 1486, 1483, 1484, 1485,
	1477, 1478, 1479, 1480, 1482, 0, 0, 931, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 940,
	920, 938, 0, 0, 926, 927, 928, 0, 925, 922,
	923, 924, 916, 917, 918, 919, 921, 0, 941, 939,
	947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 945, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 937, 0, 0,
	0, 0, 0, 930, 0, 0, 0, 938, 0, 0,
	926, 927, 928, 0, 925, 922, 923, 924, 916, 917,
	918, 919, 921, 0, 941, 0, 0, 936, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 912, 913, 0, 932, 933, 934, 942, 943, 944,
	0, 0, 0, 0, 0, 0, 0, 935, 0, 0,
	0, 1466, 0, 0, 915, 0, 0, 946, 0, 0,
	931, 0, 912, 913, 0, 932, 933, 934, 942, 943,
	944, 0, 940, 0, 0, 0, 914, 0, 935, 0,
	0, 0, 929, 0, 0, 915, 0, 0, 946, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 914, 0, 0,
	0, 0, 0, 929, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	938, 920, 0, 926, 927, 928, 0, 925, 922, 923,
	924, 916, 917, 918, 919, 921, 0, 941, 0, 0,
	939, 947, 0, 912, 913, 0, 932, 933, 934, 942,
	943, 944, 920, 0, 0, 0, 945, 0, 0, 935,
	0, 0, 0, 0, 0, 0, 915, 0, 937, 946,
	0, 939, 947, 0, 930, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 945, 914, 0,
	0, 0, 0, 0, 929, 0, 0, 0, 936, 937,
	0, 0, 0, 0, 0, 930, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 936,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 920, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 939, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 931, 0, 0, 0, 0, 0, 945, 0,
	0, 0, 0, 0, 940, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 0, 0, 930, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 0, 926, 927, 928, 0, 925, 922,
	923, 924, 916, 917, 918, 919, 921, 0, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 938, 0, 0, 926, 927, 928, 0, 925,
	922, 923, 924, 916, 917, 918, 919, 921, 0, 941,
	0, 912, 913, 931, 932, 933, 934, 942, 943, 944,
	0, 0, 0, 0, 0, 940, 0, 0, 0, 0,
	0, 0, 0, 0, 915, 0, 0, 946, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 914, 0, 0, 0,
	0, 0, 929, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 938, 0, 0, 926, 927, 928, 0,
	925, 922, 923, 924, 916, 917, 918, 919, 921, 0,
	941, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 920, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 29, 0, 0, 0, 0, 0, 0,
	939, 947, 0, 0, 30, 54, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 945, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 56,
	0, 0, 0, 0, 930, 32, 0, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 57, 0, 0, 0,
	44, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	0, 0, 0, 42, 0, 0, 0, 0, 0, 0,
	0, 931, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 938, 0, 43, 926, 927, 928, 0, 925, 922,
	923, 924, 916, 917, 918, 919, 921, 0, 941, 59,
	60, 31, 0, 0, 47, 0, 58, 0, 0, 0,
	0, 0, 48, 0, 0, 69, 0, 0, 0, 0,
	51, 53, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 798, 790, 815, 783, 806, 805, 71, 0,
	785, 784, 0, 0, 0, 817, 816, 0, 0, 0,
	0, 0, 61, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 0, 0, 0, 67, 811, 0, 803, 802,
	0, 68, 0, 0, 0, 0, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 0, 800, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 793, 792, 794, 795, 796, 0, 814, 0,
	0, 0, 0, 798, 790, 815, 783, 806, 805, 0,
	0, 785, 784, 0, 0, 0, 817, 816, 0, 0,
	0, 0, 787, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 804, 0, 0, 0, 791, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 803,
	802, 0, 0, 0, 0, 0, 0, 0, 801, 0,
	0, 0, 0, 799, 0, 0, 0, 1164, 1162, 1163,
	1166, 1165, 0, 0, 0, 800, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 788, 0, 0, 0, 0, 0, 0, 0, 797,
	789, 0, 0, 793, 792, 794, 795, 796, 819, 814,
	0, 0, 0, 0, 0, 0, 786, 0, 0, 812,
	813, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 787, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 818, 0, 804, 0, 0, 0, 791,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 799, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 788, 0, 0, 0, 0, 0, 0, 0,
	797, 789, 0, 0, 0, 0, 0, 0, 0, 819,
	0, 0, 0, 0, 0, 0, 0, 786, 0, 0,
	812, 813, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 818,
}
var sqlPact = [...]int{

	27120, -1000, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 699,
	15380, 15380, 18946, -1000, -1000, -1000, -1000, -1000, -1000, 722,
	697, 2615, 5077, 18946, 18946, 18674, 1200, 1200, 20306, -1000,
	-1000, 23570, -1000, 2781, 566, 569, 566, 566, 555, 20306,
	18946, 634, 856, 160, -1000, 913, 4, 23298, 18946, 1398,
	41, 17314, 342, 27120, 18402, 23026, 18946, 18130, 618, 39,
	15940, 18946, -1000, 46, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1255, 380, 46,
	-1000, 1253, 1169, 1151, 17314, 22754, 22482, 22210, 21938, -1000,
	11979, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 779, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 347, 346, -1000, 17858, -1000, 965,
	-1000, 40, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	964, -1000, 18946, -1000, -1000, 21666, 21394, 345, 948, -1000,
	-1000, 597, 451, 1426, -1000, 51, -1000, -1000, -1000, 1251,
	-1000, 960, 1250, 1249, 1248, 1247, 1246, 1243, 447, 1015,
	523, -1000, 948, -1000, 948, -1000, -1000, -1000, 617, 20306,
	-1000, -1000, 17314, -1000, 21122, 18946, 18946, 1183, 20850, -1000,
	913, -1000, -1000, -1000, 1004, 1395, 1395, 1395, 1437, 133,
	130, 160, 29, 18946, -1000, 343, 29, 7191, 7191, -1000,
	-1000, 342, -1000, 398, 14812, -1000, 8431, -1000, 946, 1311,
	444, 755, 1310, -60, 810, 807, 1308, 15668, 15940, 39,
	37, -1000, -1000, -1000, 4781, 15668, 671, 13996, 46, -1000,
	-1000, -1000, 17314, 18946, 18946, 713, 20578, -1000, 1307, 134,
	1304, -1000, 128, 1302, -1000, 128, 1301, 33, -1000, -1000,
	-1000, -1000, -1000, -1000, 342, 17586, 18946, 1520, 27446, -1000,
	10243, -1000, -1000, 15380, 1260, 15380, -1000, -1000, 1518, -1000,
	10243, -1000, 36, 35, 1098, 1116, 12562, 12277, 1364, 653,
	-1000, -1000, -1000, 49, 5077, 18946, 1261, 15380, 18946, 18946,
	18946, 18946, 18946, 18946, -1000, 1096, -1000, -1000, 18946, 18946,
	-1000, 34, 31, -1000, 20306, -1000, 140, -1000, 335, 1063,
	460, 161, 20034, 460, 1055, -1000, 1004, -1000, 973, 1090,
	9349, 10243, 160, -1000, -1000, 160, 160, 10243, -1000, -1000,
	18946, 29, 1513, 18946, 101, -1000, 25902, -1000, -1000, 10243,
	10243, 10243, 10243, 10243, 891, 391, -1000, 334, 333, 5996,
	-1000, -1000, 1620, -1000, -1000, -1000, 164, -1000, -1000, 10243,
	46, -1000, -1000, -1000, -1000, 332, 1633, -1000, 470, -1000,
	-1000, -1000, 458, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1259, 330, 328, -1000, -1000, -1000, -1000, 327,
	325, 322, 320, 318, 317, 316, 314, 312, 304, 302,
	301, 300, 299, 298, 860, -1000, 486, -1000, -1000, 486,
	486, -1000, 293, 293, 295, -1000, -1000, -1000, -1000, 293,
	-1000, -1000, -1000, 438, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 296, 101, -1000, -1000, -1000, 18946, 25, -1000, 26712,
	-1000, -12, 815, -1000, 16770, 1440, 1414, 1399, 17314, 1471,
	1450, 607, 18946, 18946, 602, 598, 17314, 434, -1000, -1000,
	-1000, 18946, -1000, -1000, 15, -1000, -1000, 1242, 23, -1000,
	-1000, 472, 85, 1512, 85, 14268, -1000, 18946, 18946, -1000,
	18946, -1000, -1000, 18946, -1000, 18946, 18946, -1000, 18946, 865,
	16226, 761, 1298, 694, 4, 14, -1000, 1530, -1000, -1000,
	-1000, -1000, 117, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	295, 860, 293, 293, 293, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 438, -1000, -1000, 486, 486, 486, -1000, -1000,
	13, 26712, 594, -1000, 1237, 559, 12, 844, 1148, 998,
	-1000, -1000, -1000, -1000, 24, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1594, -1000, -1000, 1616, 24,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1632,
	5077, -1000, -1000, -1000, 18946, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 844, 1148, -1000, -1000, 17314,
	16498, 1508, 1294, 866, -1000, 1498, 18946, 941, 1051, -1000,
	622, 1293, -1000, -1000, -1000, -1000, 26712, -1000, 26712, 769,
	1158, -1000, 1158, 16, -1000, 25575, -1000, 292, 8, 472,
	7191, 13708, 27335, 27446, 18946, 628, 10243, 10243, 10243, 10243,
	10243, 10243, 10243, 10243, 10243, 10243, 10243, 10243, 10243, 10243,
	10243, 10243, 10243, 10243, 10243, 10243, 10243, 10243, 1077, 10243,
	593, 10243, 10243, 10243, 10243, 955, 889, 269, 927, 5077,
	-1000, -1000, 688, 688, 688, 27021, 27021, 232, 391, -1000,
	10243, -1000, 9027, 130, 25365, -1, -1000, -1000, -1000, 6890,
	480, 26712, 46, 5674, -1000, 1614, 795, 1265, 1214, 288,
	123, 122, 10243, 10243, 10541, 10541, 10243, 10839, 10243, 10243,
	6294, 10243, 10243, 10243, 10243, 10243, 10243, -1000, 287, -1000,
	-1000, -1000, -1000, 1611, -1000, -1000, 1608, -1000, 627, 626,
	1601, 472, 121, 8431, -1000, 761, 18946, 18946, 18946, -1000,
	-1000, 1050, 19762, 1039, 27446, 18946, -1000, 282, 275, 1133,
	1132, 18946, 18946, 19490, 19218, 18946, 783, 274, 272, 18946,
	791, -1000, 18946, 18946, 787, 1197, 971, -1000, 467, 15668,
	663, 1236, 18946, 763, 10243, 892, -1000, 13420, 498, 18946,
	799, 78, -1000, -1000, -1000, 427, 18946, -1000, -1000, -1000,
	134, -1000, 128, 128, -1000, -1000, 17314, -1000, -1000, -1000,
	-1000, -1000, -1000, 27446, 384, 383, -1000, 1598, 590, -1000,
	589, 586, 585, -1000, 271, -1000, 10243, 18946, 18946, 1148,
	-1000, -1000, -1000, -1000, 745, -1000, 835, -1000, 12847, -1000,
	-1000, -1000, -1000, -18, -1000, -1000, -1000, -1000, 120, 7,
	-6, 27446, -1000, -1000, -1000, -1000, -1000, 18946, 290, 18946,
	4, 18946, -1000, 1630, 4, 18946, 1291, 1318, 422, 18946,
	-1000, -1000, -1000, 10243, -1000, -1000, -1000, 4, -1000, 1213,
	-1000, -100, 1382, 1369, -139, 125, 305, -1000, 13132, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 446,
	373, 373, 499, 499, 499, 499, 286, 286, 393, 216,
	3457, 3457, 3457, 616, 885, 885, 3457, 3457, 3457, 27021,
	26803, 179, 10243, 10243, 584, 878, 269, 179, 10243, 1585,
	179, 179, 179, -1000, 728, -1000, -1000, -1000, 1235, 268,
	10839, 10839, -1000, -1000, -1000, 5996, 11435, -1000, -1000, -1000,
	-1000, -1000, 264, 10243, -1000, 25470, -162, 6, -1000, -1000,
	10243, -39, -96, -1000, -1000, 698, -1000, 10243, -1000, -8,
	10243, 10243, 10243, 119, 118, -1000, 886, 257, 256, 10243,
	-1000, -1000, 26681, 24132, 115, 1234, -87, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 114, 113, 26490, -87, 112, 158,
	-1000, 10839, 10839, 10839, 5996, 255, 111, 25711, -87, 26357,
	8729, 8729, 8729, 110, 26301, 10243, -87, 3692, 3616, 3350,
	1, -11, -13, 1592, -17, 109, 445, 442, 106, 1213,
	-1000, -1000, -1000, -1000, 581, 579, 1286, -1000, 1037, -1000,
	502, -1000, 789, 10243, 11707, 247, 244, 843, -1000, 1284,
	981, 1282, 981, -1000, -12, 781, 10243, 10243, -1000, 577,
	-1000, -1000, 575, 467, 1231, 648, -1000, 925, -1000, -1000,
	656, -1000, -1000, 6592, 26712, -1000, 798, 1383, -29, -1000,
	-1000, 7191, 472, 14268, 13708, 8431, -37, -1000, -1000, -1000,
	761, -1000, 556, 1583, 103, 1076, 831, 845, 729, 1579,
	26712, -18, -18, -1000, -1000, -1000, -1000, -1000, 18946, 1187,
	-1000, 16498, 242, 18946, 241, -1000, 240, -1000, -1000, 235,
	18946, 1105, 422, 15668, -1000, 460, -1000, 102, 1206, 1434,
	-1000, 13708, 1145, 1140, 13708, 992, 916, 916, 916, -1000,
	233, 2463, 305, 4175, 10243, 17042, 915, 68, 100, 1382,
	10243, 179, 179, 10243, 10839, 10839, -1000, 179, -1000, -1000,
	-1000, -1000, 1229, 229, 10243, 27446, 26269, 24967, -51, -1000,
	8109, -22, -1000, 10243, -1000, 25334, -1000, -1000, 313, 1316,
	-1000, 10243, 26091, 93, 7811, -1000, 26035, -10, -10, -1000,
	1629, -1000, 14540, 475, 922, 25229, 27335, 27446, -1000, 10243,
	-1000, -1000, 1226, 10243, -1000, 27335, 27446, 10839, 10839, 10839,
	10839, 10839, 10839, 10839, 10839, 10839, 10839, 10839, 10839, 10839,
	10839, 10839, 10839, 10839, 10839, 10839, 1146, 10839, 1570, 1570,
	1570, -26, 7489, -1000, 1223, 1226, 10243, 10243, 27446, 90,
	89, 86, -1000, 10243, -87, 10243, 10243, 10243, -1000, -1000,
	-1000, 80, -1000, 1576, -1000, -1000, -1000, -1000, 1206, 18946,
	18946, 18946, 1281, -1000, 1127, -1000, 25019, -52, -1000, 311,
	1412, 10243, -1000, -1000, 227, 11707, 18946, -1000, 1099, 1171,
	538, 18946, -1000, 18946, -1000, 18946, 18946, 18946, -57, -58,
	18946, 18946, -1000, 15668, 623, 225, -1000, -38, -1000, 7191,
	215, 4, -38, 763, -1000, -30, -1000, 423, -1000, 377,
	375, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 79,
	-1000, -1000, 1191, -1000, 11707, 220, 18946, 16498, 1489, 11707,
	936, 1120, 422, 15668, -1000, 622, -1000, 469, 10243, 10243,
	1382, 13708, 13708, 1003, 1138, 13708, -1000, -1000, -1000, -1000,
	374, 370, 360, 11979, 17042, -1000, 1571, 1125, -63, -1000,
	-1000, 18946, 219, -1000, 305, 532, 179, 24345, 3726, 10243,
	27446, 3851, -64, 10243, 10243, -1000, -65, -1000, 10243, 353,
	26712, -1000, -1000, -1000, 26712, 10243, 1587, 10243, 76, 73,
	72, -1000, -1000, -1000, 23842, 10243, 71, -1000, 70, 69,
	26712, 1223, 26712, -1000, -1000, 633, 633, 1570, 1570, 1570,
	1570, 2564, 2564, 2145, 2129, 2762, 2762, 2762, 1921, 409,
	409, 2762, 2762, 2762, 1224, 1067, 218, 2158, 10243, -69,
	-1000, -1000, -1000, 26712, 26712, 66, -1000, -1000, -1000, -87,
	3294, 24988, 24912, -1000, 64, 469, -1000, -1000, -1000, 18946,
	-1000, 18946, -1000, 18946, 18946, 1220, 995, -1000, -1000, 1129,
	202, 10839, 18946, -1000, 868, 11707, 1393, 46, 18946, 1393,
	24881, 5674, -70, -71, 993, -1000, 988, 10243, -1000, 27446,
	981, 981, -1000, 574, 573, -1000, -1000, -1000, -1000, -31,
	15108, 1625, -38, 1324, 18946, 1378, -1000, -1000, 201, -1000,
	-1000, -1000, 880, -76, 11707, -77, 61, 4, -78, 18946,
	-1000, 422, 15668, -1000, 1318, -1000, 18946, 26712, -87, -1000,
	1003, -1000, 200, 10243, 13708, -1000, -139, -1000, -83, -1000,
	305, -88, -1000, 351, -150, -1000, 413, -1000, 305, 192,
	18946, 17042, 10243, 10243, 3851, -89, -1000, 179, 179, -1000,
	24572, -1000, 26712, -1000, 26035, -1000, -1000, -1000, 872, -1000,
	24536, -1000, -1000, -1000, -1000, 10839, 1222, 191, 27446, 24484,
	-1000, -1000, 10243, -1000, -1000, -1000, -1000, -1000, 1156, -1000,
	-1000, 18946, 982, -1000, -1000, 10243, 2158, 187, 1187, 184,
	-1000, -1000, -1000, -1000, -1000, -1000, 1412, -8, -1000, 827,
	-1000, -1000, 26712, 1403, -1000, -1000, 18946, 18946, -1000, 182,
	46, -99, -1000, 408, 619, -103, 18946, -1000, -1000, 5373,
	18946, 868, -104, -1000, 1187, -1000, 868, 181, 15668, -1000,
	1105, -50, -1000, 1484, -1000, 18946, 26712, -1000, 305, -1000,
	1567, 17042, 865, -1000, 1125, -1000, 4482, 17042, 18946, -114,
	-1000, 179, 179, -1000, -1000, 60, 922, 1425, -1000, 670,
	10839, 27446, -118, -1000, 24223, -1000, -1000, 1279, 24163, 1079,
	18946, -1000, 18946, 1393, 57, 18946, 504, 18946, -1000, -1000,
	10243, 1625, -1000, -1000, 1624, 703, -1000, 472, -1000, 180,
	1187, 868, -1000, 1187, 11707, -1000, 1120, 18946, 177, -120,
	17042, -1000, -1000, 349, -1000, -1000, 1565, -1000, -124, -1000,
	-1000, 785, 10243, 670, -126, -1000, -1000, 1269, -1000, 932,
	829, 55, -130, -1000, -1000, 161, -1000, 10243, -1000, -10,
	-1000, -1000, 14268, -1000, 18946, -1000, 1187, -1000, -136, -1000,
	-1000, -1000, -1000, -1000, 305, 159, -1000, 54, 9945, 9945,
	-87, -1000, 18946, -1000, 934, 933, 715, -1000, -1000, -1000,
	-1000, -1000, 1079, 26712, 53, -111, -145, -1000, 868, 17042,
	-1000, -1000, -1000, -1000, 11137, 980, 734, 25680, -1000, -1000,
	-1000, 1342, -1000, 514, 1074, 1074, 932, 1587, -1000, 969,
	1187, -1000, 1539, -1000, -1000, -1000, -1000, -1000, -1000, 1550,
	-1000, -1000, 1093, -1000, -1000, -1000, -1000, -1000, -1000, 9647,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1902, 1901, 1442, 1588, 1898, 1897, 1535, 1896, 1894,
	1892, 1890, 1886, 1885, 122, 1501, 1499, 27, 1486, 1884,
	124, 1881, 1880, 1876, 118, 1874, 1872, 1869, 1866, 73,
	1865, 1863, 1475, 1452, 1862, 1861, 110, 1860, 23, 1859,
	103, 1855, 34, 167, 2281, 145, 1849, 1848, 1839, 35,
	127, 87, 1835, 102, 1834, 1833, 66, 40, 20, 25,
	1831, 115, 131, 1230, 37, 1830, 1827, 155, 1820, 96,
	28, 976, 160, 159, 138, 137, 1819, 1818, 1813, 1808,
	65, 1797, 5, 1794, 1793, 12, 80, 15, 1792, 41,
	59, 1791, 1789, 140, 1788, 94, 125, 1440, 22, 150,
	100, 1786, 99, 14, 92, 1785, 1782, 142, 39, 1781,
	36, 98, 152, 1779, 70, 162, 85, 30, 90, 126,
	1773, 1771, 1769, 106, 1768, 128, 97, 1764, 1763, 93,
	1762, 153, 148, 1760, 1759, 139, 1757, 1756, 1755, 165,
	1753, 1752, 164, 1751, 11, 50, 86, 3, 1438, 1436,
	129, 83, 29, 24, 1750, 1576, 938, 916, 56, 105,
	71, 58, 113, 62, 91, 156, 19, 1749, 1748, 132,
	1742, 1741, 1736, 1735, 1734, 104, 1731, 1728, 88, 154,
	16, 8, 13, 116, 42, 55, 109, 133, 163, 130,
	1726, 112, 135, 51, 57, 1721, 1719, 1622, 136, 1718,
	1717, 1714, 1329, 1188, 1177, 117, 1712, 1711, 370, 143,
	1708, 1706, 79, 1701, 134, 1700, 1699, 157, 229, 18,
	1698, 64, 53, 114, 1697, 67, 0, 2174, 309, 1695,
	144, 95, 1694, 1692, 1690, 1684, 26, 2, 10, 9,
	6, 4, 107, 54, 1682, 1681, 149, 47, 84, 1679,
	161, 1678, 1677, 1676, 38, 1674, 17, 1673, 21, 1670,
	1664, 7, 1, 1661, 1659, 151, 1655, 120, 1651, 1523,
	1650, 158, 1640, 1639, 1510, 63, 108,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 51, 51, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 48,
	48, 53, 53, 53, 55, 55, 52, 52, 47, 47,
	5, 5, 225, 225, 37, 37, 41, 41, 38, 39,
	39, 40, 40, 6, 6, 6, 7, 7, 7, 7,
	7, 7, 14, 15, 15, 15, 15, 15, 15, 15,
	15, 99, 99, 98, 98, 101, 101, 16, 16, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	193, 193, 192, 19, 167, 167, 20, 20, 20, 20,
	21, 124, 124, 22, 22, 22, 22, 23, 28, 265,
	265, 265, 269, 269, 270, 270, 271, 271, 271, 271,
	271, 271, 271, 267, 267, 27, 31, 31, 31, 31,
	31, 143, 139, 139, 141, 141, 141, 141, 62, 138,
	138, 138, 138, 140, 140, 140, 140, 218, 217, 217,
	223, 223, 223, 77, 77, 77, 77, 77, 78, 78,
	78, 216, 216, 216, 216, 224, 224, 224, 224, 224,
	224, 79, 79, 79, 222, 222, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 18, 266, 266, 268,
	268, 33, 33, 10, 10, 11, 11, 80, 80, 81,
	81, 146, 146, 146, 146, 82, 82, 54, 54, 54,
	145, 234, 234, 235, 235, 235, 235, 235, 235, 236,
	236, 236, 236, 236, 236, 236, 232, 232, 233, 230,
	230, 231, 231, 231, 231, 272, 272, 144, 144, 85,
	85, 239, 239, 239, 239, 237, 237, 237, 237, 237,
	240, 238, 241, 241, 241, 241, 241, 179, 179, 179,
	35, 12, 60, 60, 13, 9, 9, 128, 128, 89,
	89, 184, 184, 184, 70, 70, 49, 49, 49, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	129, 129, 130, 130, 25, 30, 34, 34, 34, 34,
	34, 274, 274, 66, 66, 66, 66, 67, 67, 142,
	142, 142, 142, 142, 61, 8, 8, 56, 56, 57,
	57, 58, 58, 59, 59, 275, 275, 24, 24, 24,
	24, 24, 73, 73, 135, 135, 135, 137, 137, 136,
	136, 136, 114, 114, 114, 36, 94, 94, 103, 103,
	104, 104, 190, 105, 105, 29, 29, 44, 44, 42,
	42, 42, 42, 42, 42, 43, 43, 45, 45, 45,
	45, 45, 45, 45, 247, 247, 247, 250, 250, 246,
	248, 248, 249, 249, 273, 273, 115, 115, 115, 84,
	83, 83, 87, 87, 86, 88, 88, 183, 112, 112,
	112, 112, 131, 132, 132, 133, 133, 134, 134, 111,
	111, 163, 163, 46, 46, 93, 93, 95, 95, 153,
	153, 153, 154, 154, 152, 152, 152, 152, 185, 185,
	185, 185, 185, 185, 185, 185, 263, 263, 263, 264,
	264, 182, 182, 186, 186, 186, 186, 186, 186, 180,
	180, 180, 180, 181, 181, 191, 191, 118, 118, 118,
	118, 116, 116, 117, 117, 187, 187, 187, 187, 113,
	113, 188, 188, 188, 147, 147, 194, 194, 194, 212,
	212, 92, 92, 92, 195, 195, 195, 195, 195, 195,
	195, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	196, 196, 196, 196, 198, 198, 198, 197, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 211, 211, 211, 211, 211, 199, 199, 206, 206,
	207, 207, 208, 209, 200, 200, 201, 201, 202, 203,
	210, 210, 210, 210, 214, 214, 204, 204, 204, 204,
	204, 205, 125, 125, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 125, 125, 126, 126, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 156, 156,
	156, 156, 156, 156, 156, 156, 156, 156, 157, 157,
	157, 157, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 242, 242, 242, 242, 242, 242, 242,
	244, 244, 245, 245, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 251, 251, 252, 252, 254, 254, 255, 255, 256,
	257, 257, 257, 258, 259, 259, 253, 253, 260, 260,
	260, 261, 261, 262, 262, 262, 262, 262, 169, 169,
	169, 170, 170, 171, 177, 177, 177, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 68, 68, 68, 68, 68, 100, 100,
	166, 166, 164, 164, 164, 168, 168, 119, 119, 213,
	213, 213, 213, 213, 213, 213, 120, 120, 120, 127,
	121, 121, 122, 122, 122, 122, 122, 122, 160, 161,
	123, 123, 123, 162, 162, 172, 176, 176, 175, 174,
	174, 173, 173, 150, 150, 151, 151, 149, 148, 108,
	108, 107, 107, 106, 106, 276, 276, 178, 178, 109,
	109, 110, 102, 102, 189, 189, 189, 189, 96, 96,
	75, 75, 97, 97, 71, 71, 74, 74, 72, 72,
	72, 72, 90, 90, 91, 91, 69, 69, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 215,
	215, 215, 165, 63, 63, 63, 64, 64, 65, 65,
	220, 220, 220, 221, 221, 221, 221, 219, 219, 219,
	219, 219, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	4, 6, 1, 3, 2, 5, 3, 6, 4, 6,
	6, 6, 4, 8, 3, 3, 3, 6, 4, 3,
	2, 1, 1, 0, 2, 0, 2, 0, 2, 0,
	7, 6, 1, 3, 3, 0, 2, 0, 2, 1,
	3, 5, 0, 4, 6, 7, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 5, 3, 0, 1, 1, 1, 1,
	3, 3, 0, 2, 3, 2, 3, 6, 6, 1,
	2, 2, 1, 1, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 2, 2, 3, 6, 3,
	1, 5, 2, 1, 1, 1, 3, 3, 2, 3,
	3, 3, 3, 1, 3, 3, 2, 1, 1, 3,
	1, 1, 1, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 2, 2, 2, 4,
	2, 4, 4, 4, 4, 4, 4, 4, 2, 3,
	4, 3, 3, 4, 4, 2, 2, 2, 0, 2,
	0, 8, 8, 7, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	3, 2, 0, 3, 1, 2, 2, 3, 6, 2,
	1, 1, 2, 4, 2, 5, 7, 8, 5, 3,
	1, 4, 6, 5, 10, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	4, 5, 2, 0, 6, 11, 14, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 6, 8, 8, 10, 8, 10,
	1, 0, 2, 0, 2, 2, 3, 3, 2, 2,
	2, 1, 0, 1, 3, 2, 0, 2, 1, 1,
	1, 3, 3, 0, 3, 8, 11, 3, 0, 3,
	0, 3, 0, 3, 0, 1, 0, 6, 6, 8,
	5, 7, 1, 3, 1, 4, 2, 8, 5, 4,
	3, 0, 2, 2, 0, 8, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 1, 1, 8, 8, 1,
	2, 4, 4, 4, 2, 2, 3, 1, 3, 6,
	1, 0, 1, 0, 1, 0, 1, 1, 0, 1,
	1, 0, 1, 0, 3, 1, 3, 2, 2, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 7, 4,
	6, 3, 1, 5, 6, 9, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 5, 2, 1, 1, 1, 1, 4, 1,
	2, 2, 1, 1, 1, 0, 1, 1, 4, 1,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 4, 1, 3,
	3, 3, 5, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	4, 3, 4, 4, 5, 3, 3, 3, 3, 3,
	4, 3, 3, 4, 3, 4, 3, 4, 5, 6,
	6, 7, 6, 7, 6, 7, 3, 4, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 2,
	1, 2, 1, 1, 2, 1, 3, 1, 1, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 2, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 3, 5, 1, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 1, 1,
	3, 3, 1, 3, 3, 2, 1, 1, 1, 3,
	1, 3, 1, 3, 1, 2, 3, 1, 1, 1,
	2, 2, 1, 3, 3, 0, 1, 2, 1, 1,
	1, 1, 6, 2, 1, 5, 1, 1, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -25, -27, -35, -36, 23,
	34, 221, 65, -8, -9, -10, -11, -12, -13, -249,
	93, 101, 123, 203, 100, 86, 117, 224, 232, -42,
	-44, 240, -143, 241, 35, 250, 59, 96, 226, 219,
	220, 272, 67, -247, -45, -43, 320, 295, 301, 235,
	-46, 258, 287, 323, 258, 132, 79, 290, -265, -97,
	258, 79, -72, -63, 313, 4, -226, -228, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 58, 59, 60,
	62, 64, 65, 66, 69, 70, 77, 78, 80, 82,
	86, 88, 92, 93, 95, 100, 101, 107, 108, 111,
	113, 118, 123, 124, 125, 126, 133, 136, 138, 131,
	146, 148, 149, 152, 151, 156, 159, 162, 164, 165,
	166, 168, 170, 171, 173, 172, 178, 180, 181, 183,
	186, 189, 192, 195, 196, 197, 198, 201, 203, 205,
	206, 207, 209, 210, 212, 213, 214, 215, 216, 219,
	217, 218, 220, 221, 222, 224, 226, 227, 229, 231,
	232, 233, 234, 237, 238, 240, 241, 243, 246, 249,
	250, 251, 254, 252, 248, 257, 259, 260, 261, 268,
	272, 273, 274, 275, 278, 279, 280, 282, 284, 285,
	286, 291, 296, 297, 298, 299, 28, 36, 37, 38,
	39, 41, 42, 45, 46, 50, 51, 52, 54, 81,
	83, 84, 99, 102, 103, 109, 119, 121, 127, 128,
	137, 139, 140, 141, 143, 154, 167, 177, 179, 190,
	194, 200, 202, 208, 228, 236, 244, 245, 253, 255,
	263, 264, 265, 269, 270, 287, 288, -265, -71, -63,
	79, 88, 136, 280, 279, 79, 132, 258, 290, -17,
	320, -29, -7, -15, -4, -24, -36, -14, -32, -18,
	-33, -16, 23, -219, 4, -226, -228, -227, -229, 56,
	68, 116, 135, 129, 145, 147, 155, 157, 169, 191,
	193, 225, 242, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 55, 57, 63, 67,
	71, 72, 73, 74, 75, 76, 85, 87, 89, 90,
	91, 94, 96, 98, 104, 105, 106, 112, 114, 115,
	117, 120, 122, 130, 132, 134, 142, 144, 150, 153,
	158, 160, 161, 174, 175, 176, 182, 184, 185, 187,
	188, 199, 204, 211, 223, 235, 239, 247, 256, 258,
	262, 266, 267, 271, 276, 277, 281, 283, 289, 290,
	292, 293, 294, 295, -63, -63, -63, 203, 22, -269,
	22, -270, -271, 67, 93, 117, 235, 136, 88, 279,
	-269, -67, 232, -63, -139, 159, 238, 228, 268, -140,
	-138, -218, 263, 168, -98, -63, 4, 22, 79, 58,
	80, 118, 132, 133, 63, 64, 149, 259, 263, 268,
	67, 282, -274, 268, 268, -274, -274, -66, 268, 266,
	-67, -218, -273, 258, 258, 281, 290, -128, 79, 277,
	-43, -45, -44, -86, -87, 276, 142, 98, 188, -42,
	-44, -247, -250, 209, -246, -63, -250, -83, -84, 22,
	90, 324, -187, -71, 185, -110, 320, -3, -187, 127,
	-71, -74, 127, -71, -63, -187, 127, 266, 324, -97,
	-90, -63, -149, -148, 322, 115, 115, 320, -107, -108,
	-148, -149, 115, 144, 144, -188, -187, -63, 127, -75,
	127, -74, -99, 127, -98, -99, 127, -193, -192, -221,
	4, -226, -228, -227, 287, 258, 132, -167, 320, -124,
	320, -63, 22, 184, 324, 184, -63, -139, 52, -139,
	320, -141, -61, -62, 146, 205, 266, 305, 115, 299,
	-79, 5, 85, -101, 322, 115, -266, 184, 115, 115,
	115, 115, 115, 115, 299, 146, 205, 231, 258, 290,
	-142, -61, -62, -142, 266, -67, -113, -187, -98, 127,
	-63, -98, 132, -63, 127, -86, -87, -112, -131, -132,
	158, 182, -115, 22, 90, -115, -115, 44, 321, 321,
	324, -250, -91, 320, -102, -189, -155, 313, -157, 311,
	312, 317, 174, 300, -169, -159, -172, 99, 228, 320,
	-71, -158, 325, 9, -244, -44, 29, -170, -171, 48,
	-63, 7, 8, 5, 6, -69, -196, -165, -205, 271,
	104, 176, -242, -243, 4, -226, -220, -197, -207, -201,
	-204, 143, 56, 72, 75, 73, 76, 239, 281, 49,
	28, 102, 103, 194, 200, 255, 269, 270, 127, 177,
	128, 54, 119, 154, 92, 37, 39, 41, 42, 50,
	51, 81, 83, 84, 109, 137, 139, 140, 141, 179,
	208, 244, 253, 264, 265, 288, -227, -208, -209, -202,
	-203, -210, -102, -110, 313, -71, 320, -109, -178, -155,
	85, -51, 217, -50, 21, 23, 93, 285, 99, 248,
	248, 217, 99, 325, 217, 217, 99, -222, -221, 5,
	-72, 324, -219, 313, -225, -222, 251, 321, -96, -71,
	-108, -188, -73, -71, -73, 240, -63, 30, 99, -53,
	324, 47, 222, 99, -53, 324, 99, -53, 99, 321,
	324, -187, 127, -74, 30, -166, -194, -195, -197, -206,
	-200, -204, -205, 40, 46, 45, 261, 167, 236, 245,
	38, 183, 138, 137, 139, 140, 141, 244, 37, 208,
	109, 92, 84, 83, 179, 42, 41, -208, -209, -202,
	-203, 81, 264, 265, 143, 39, 51, 50, 288, 253,
	-100, -155, -265, -271, -265, 30, -100, 324, 324, 156,
	-78, 162, 173, 124, -217, 85, -223, -216, -179, 9,
	271, 104, 184, -222, 8, 312, -215, 7, 311, -217,
	85, 70, -224, 5, 4, -165, -179, 85, 159, -205,
	322, -219, -218, -268, 112, -265, -218, -218, -218, -218,
	-218, -63, 156, -218, -218, 324, 324, -67, -53, 324,
	320, -85, 174, -248, 295, -85, 320, -64, 127, -63,
	-248, 174, -112, -132, -131, -133, -155, 22, -155, -157,
	-43, -43, -43, -88, -183, -155, -246, 30, -90, -93,
	324, 115, 10, 11, 55, 33, 311, 312, 313, 314,
	110, 315, 308, 309, 310, 307, 303, 304, 305, 61,
	163, 230, 13, 14, 15, 26, 187, 157, 300, 129,
	242, 317, 16, 17, 18, 145, 36, 130, -68, 30,
	4, -76, -155, -155, -155, -155, -155, 193, -106, -150,
	318, -44, 320, -44, -155, -100, 7, -44, -164, 318,
	-173, -155, -107, 320, 5, 320, 5, -251, 296, 112,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 202, -214, 291,
	-214, -214, -198, 320, -198, -199, 320, -198, 297, 301,
	320, -93, -71, 324, 321, 324, 266, -129, 63, 57,
	-145, 127, 57, -230, -63, 63, -231, 53, 277, 204,
	114, -129, 63, -129, 63, 63, -187, 33, 33, 266,
	-74, -63, 266, 266, -187, -191, 302, -63, -191, 324,
	115, 321, 324, -147, 293, -135, -29, 320, 85, 30,
	-135, -103, -104, -190, -105, -71, 320, -63, -63, -74,
	-75, -98, -99, -99, -17, -192, 99, -20, -29, -24,
	-36, -14, 321, 324, -92, 29, -125, 320, 298, 166,
	82, 125, 165, -126, 234, 321, 324, 266, 115, 268,
	321, -62, -61, -77, 207, 246, 218, 237, 324, 8,
	7, 7, -219, -267, -63, -62, -61, -187, -80, -90,
	-81, -63, -146, -145, -232, -233, -230, 132, 277, 105,
	30, 99, -60, 198, 30, 184, 174, -56, 260, 99,
	-134, 228, 229, 324, -49, 31, 89, 320, 321, -147,
	-189, -95, -185, 318, -187, -71, -44, -186, 320, -212,
	-194, -211, 213, 214, 212, 216, 215, -194, -98, 263,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, 157, 129, 242, 36, 130, -155, 266, -155,
	-155, -155, -155, 176, 174, 271, 104, 278, 90, 180,
	-276, 256, 32, -162, -44, 320, -177, 27, 247, 22,
	-219, -169, 228, 320, -150, -155, -151, -100, 321, 321,
	324, -100, -168, 319, -164, -176, -175, 292, 321, -100,
	289, 22, 90, 313, 7, -125, -252, 107, 120, 320,
	321, 321, -155, -155, -119, -213, -100, 4, 298, 166,
	82, 125, 165, 234, -119, -120, -155, -100, -121, -156,
	-157, 311, 312, 317, 320, 228, -122, -155, -100, -155,
	43, 153, 267, -123, -155, 115, -100, -155, -155, -155,
	-100, -100, -100, 320, 7, 7, 263, 263, 7, -147,
	321, -178, -50, -71, -63, -63, 174, -145, 127, -55,
	174, -194, -63, 320, 320, 148, 148, -63, -63, 127,
	-63, 127, -63, -63, -51, 217, 320, 320, -63, 217,
	-63, -71, 217, -37, 126, 180, -40, 295, -222, 251,
	115, -71, -114, 223, -155, -114, -137, 184, -96, 287,
	-63, 223, -94, 324, 115, 305, -96, -53, -53, -53,
	-187, -194, 318, 318, 7, 266, 266, 266, 266, 320,
	-155, -267, -267, -61, 275, 60, 207, -223, 324, 321,
	321, 324, -64, 132, -64, -29, -98, 5, -29, -71,
	99, -57, 95, -275, 305, -63, -183, -20, -111, 120,
	-191, 324, 68, -118, 147, 169, 116, 155, 225, 135,
	7, 101, -152, 325, 320, -182, 301, -44, -186, -185,
	299, -155, -155, 266, -276, 256, -162, -155, 176, 271,
	104, 278, 90, 180, 115, 320, -156, -156, -100, -159,
	320, -100, 319, 328, 321, -155, 319, 319, 324, -174,
	-175, 94, -155, -87, 324, -86, -155, -100, -100, 321,
	321, -257, 192, 320, 320, -155, 30, 324, 321, 115,
	321, 321, -127, 199, 321, 10, 11, 311, 312, 313,
	314, 110, 315, 308, 309, 310, 307, 303, 304, 305,
	61, 163, 230, 13, 14, 15, 145, 130, -156, -156,
	-156, -100, 320, 321, -160, -161, 115, 112, 30, -123,
	-123, -123, 321, 115, -100, 324, 324, 324, 321, 321,
	321, 7, 321, 324, 321, 299, 299, 321, -111, 266,
	266, 99, 174, 284, -234, -231, -155, -89, -184, -63,
	-245, 320, -242, -243, -69, 320, 320, -48, 93, 240,
	-130, 99, -53, 99, -53, 266, -129, 63, -100, -100,
	266, 266, -40, 115, 257, 186, 251, -102, 175, 223,
	62, 321, -102, -147, -104, -95, -178, 321, 319, 7,
	7, 321, 166, 125, 165, -126, 165, -126, -126, 7,
	-63, -82, 131, -146, 320, -64, 320, 320, -85, 320,
	-63, -58, 152, -275, -222, -248, 321, -163, 122, 44,
	-185, 147, 147, -185, -118, 147, -116, 191, -116, -116,
	-263, 320, -17, 320, -182, -219, 318, 326, -100, -181,
	-180, 30, -63, 189, 321, -155, -155, -156, -156, 115,
	320, -155, -166, 26, 26, 321, -100, 321, 324, -151,
	-155, 321, -164, 96, -155, 262, 321, 289, -87, -87,
	-87, 5, -258, -63, 320, 293, -86, 321, -212, -194,
	-155, -160, -155, -212, -194, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
	-156, -156, -156, -156, 90, 174, 180, -156, 324, -100,
	321, -161, -160, -155, -155, -194, 321, 321, 321, -100,
	-155, -155, -155, 321, 7, -163, -63, -63, -145, 99,
	-235, 63, -236, 55, 105, 67, 174, 176, 277, 204,
	53, 85, 211, 321, 321, 324, -70, -107, 55, -70,
	-155, 320, -89, -90, 174, 85, 174, 85, 78, 273,
	-63, -63, -71, -63, -63, 321, 321, -63, -71, -225,
	263, 320, -102, -136, 320, 184, -29, -114, 305, 319,
	319, 321, 130, -89, 320, -90, -80, 30, -89, 184,
	-59, 151, -275, -222, -56, -254, 294, -155, -100, -185,
	-185, -117, 283, 184, 147, -185, 319, 321, -264, 7,
	319, -193, -181, 7, -154, -153, 113, 172, 321, -63,
	320, -182, 26, 26, -155, -166, 321, -155, -155, 321,
	-155, 319, -155, 5, -155, 321, 321, 321, -259, -63,
	-155, 321, 321, 321, -161, 115, 90, 180, 320, -155,
	321, 321, 324, 321, 321, 321, -254, -145, -63, -98,
	-63, 105, 127, 176, 148, 320, -156, -71, -144, -272,
	66, 254, -184, -49, -98, -49, 321, -100, 321, 321,
	176, 176, -155, -194, -53, -53, 266, 266, -158, -69,
	-63, -39, -38, 5, 91, -90, 63, -110, -44, 320,
	195, 321, -89, 321, 321, -29, 321, -71, -275, -222,
	-57, -255, -256, -63, -117, 320, -155, -185, -152, 321,
	324, -182, 321, 319, 324, 327, 305, -182, 320, -90,
	-180, -155, -155, 321, 321, -87, -253, 197, 321, -156,
	115, 320, -166, 321, -155, -236, -64, 174, -155, -65,
	320, -82, 320, -70, -87, 211, -52, 55, -63, -63,
	320, 324, 321, -41, 305, 279, 175, 321, -63, -63,
	-144, 321, -82, -144, 320, -222, -58, 324, 30, -90,
	-182, 7, -181, -17, -153, -219, 318, -181, -90, 321,
	321, -87, 44, -156, -166, 321, 321, 99, 321, -239,
	164, -63, -90, -49, 321, -71, -47, 283, -98, -100,
	-38, 5, 240, -147, 320, -82, -144, -82, -89, -59,
	-256, -258, 321, -180, 319, 7, 321, -260, 206, 229,
	-100, 321, 105, -237, -240, -238, 184, 116, 196, 243,
	321, 321, -85, -155, -87, -103, -90, -82, 321, -182,
	319, 321, -261, -262, 36, 274, 70, -155, -261, -63,
	-238, 184, -240, 184, 279, 88, -239, 321, -147, 321,
	-144, -181, -262, 201, 111, 228, 201, 111, -241, 171,
	222, 47, 240, -241, -237, -54, 47, 222, -82, 26,
	20, 176, 85, -262,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 0,
	0, 0, 0, 76, 77, 78, 79, 80, 81, 0,
	0, 413, 0, 0, 0, 0, 0, 0, 0, 385,
	-2, 0, 150, 0, 332, 0, 332, 332, 336, 0,
	0, 415, 298, 412, -2, 423, 0, 0, 0, 421,
	399, 0, 0, -2, 0, 0, 0, 0, 0, 129,
	0, 942, 872, 878, 879, 903, 904, 905, 922, 923,
	924, 925, 926, 927, 928, 929, 930, 931, 932, 933,
	934, 935, 936, 937, 938, 939, 940, 941, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 0, 0, 874,
	942, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 99, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 109, 0, 216, 917, 918, 919, 920, 921, 1102,
	1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112,
	1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122,
	1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152,
	1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162,
	1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172,
	1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
	1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
	1193, 1194, 1195, 1196, 115, 122, 123, 993, 125, 0,
	132, 133, 134, 136, 137, 138, 139, 140, 141, 142,
	0, 325, 1015, 338, 146, 971, 1019, 1089, 1034, 153,
	163, 0, 1095, -2, 167, 93, 196, 197, 198, 0,
	200, 218, 0, 0, 0, 0, 0, 208, 0, 0,
	0, 215, 343, 331, 343, 328, 329, 330, 333, 0,
	324, 145, 0, 414, 0, 0, 0, 0, 0, 297,
	-2, 395, 396, -2, 0, 418, 418, 418, 0, 0,
	396, 0, 404, 997, 407, 885, 405, 0, 0, 420,
	419, 0, 400, 495, 0, 443, 0, 2, 0, 1073,
	495, 0, 1073, 877, 0, 0, 1073, 0, 0, 130,
	131, 882, 880, 881, 0, 0, 0, 0, 875, 851,
	849, 850, 0, 0, 0, 0, 501, 83, 1073, 53,
	1073, 870, 53, 1073, 91, 53, 1073, 0, 110, 112,
	913, 914, 915, 916, 1100, 0, 0, 0, 0, 120,
	0, 124, 126, 0, 0, 0, 337, 147, 1062, 149,
	0, 152, 154, 155, 0, 0, 0, 0, 0, 0,
	166, 191, 192, 94, 0, 0, 220, 0, 0, 0,
	0, 0, 0, 0, 209, 0, 211, 212, 0, 0,
	326, 339, 340, 327, 0, 335, 53, 499, 270, 1073,
	411, 270, 907, 411, 1073, -2, 0, 391, 430, 431,
	0, 0, 0, 416, 417, 0, 0, 0, 387, 388,
	0, 406, 0, 0, 446, 862, 866, 867, 598, 0,
	0, 0, 0, 0, 0, 688, 690, 1067, 1089, 0,
	692, 693, 0, 695, 697, 698, 0, 701, 702, 842,
	874, 888, 889, 890, 891, 0, 0, 894, 0, 896,
	897, 898, 742, 711, -2, -2, 886, 530, 531, 532,
	533, -2, 1102, 715, 717, 719, 720, 721, 722, 0,
	1051, 1068, 1069, 1085, 1086, 1094, 1098, 1099, 1073, 1082,
	1074, 1063, 1071, 1080, 947, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 912, 560, 561, 566,
	567, 569, 446, 444, 496, 497, 0, 0, 859, 857,
	858, 30, 321, 32, 0, 321, 321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 486, 194, 195,
	873, 0, 847, 848, 486, 62, 73, 0, 0, 868,
	852, 505, 0, 362, 0, 0, 502, 0, 0, 85,
	0, 51, 52, 0, 87, 0, 0, 89, 0, 413,
	0, 0, 1073, 0, 413, 0, 800, 513, 514, 515,
	516, 517, 595, 520, 521, 522, 523, 524, 525, 526,
	527, 528, 529, 537, 538, 539, 540, 541, 542, 543,
	557, 0, 536, 536, 536, 549, 550, 558, 559, 564,
	565, 576, 577, 579, 581, 575, 575, 575, 572, 573,
	0, 798, 0, 135, 0, 0, 0, 0, 0, 0,
	158, 178, 179, 180, 159, 161, 168, 170, 171, 172,
	181, 182, 183, 184, 287, 0, 289, 899, 0, 160,
	162, 164, 165, 185, 186, 187, 188, 189, 190, 0,
	0, 95, 199, 201, 0, 217, 202, 203, 204, 205,
	206, 207, 210, 213, 214, 0, 0, 334, 290, 0,
	228, 0, 0, 293, 410, 0, 0, 0, 1073, 906,
	348, 0, 394, 428, 429, 432, 435, 436, 433, 598,
	401, 402, 403, 424, 425, 308, 408, 0, 0, 505,
	0, 0, 0, 0, 0, 0, 777, 778, 779, 780,
	781, 782, 785, 786, 783, 784, 787, 788, 789, 0,
	0, 0, 790, 791, 792, 0, 0, 794, 0, 796,
	0, 0, 0, 0, 0, 0, 856, 0, 0, 0,
	865, 793, 603, 604, 605, 627, 628, 0, 689, 853,
	846, 691, 0, -2, 798, 0, 694, 699, 700, 0,
	0, 841, -2, 0, 893, 0, 595, 744, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 821, 827, 0,
	0, 0, 0, 0, 0, 0, 0, 545, 563, 574,
	571, 570, 547, 0, 546, 544, 0, 548, 0, 0,
	0, 505, 0, 0, 861, 0, 0, 0, 0, 320,
	34, 1073, 0, 55, 0, 0, 260, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 876, 0, 0, 0, 65, 0, 883, 72, 0,
	0, 0, 0, 374, 0, 374, 364, 0, 0, 0,
	360, 377, 378, 380, 381, 0, 0, 503, 84, 871,
	53, 92, 53, 53, 98, 111, 0, 113, 116, 117,
	118, 119, 114, 0, 506, 508, 518, 0, 582, 583,
	584, 585, 586, 587, 596, 121, 0, 0, 0, 0,
	151, 156, 157, 344, 0, 175, 0, 177, 0, 288,
	901, 900, 96, 219, 143, 341, 342, 500, 0, 0,
	227, 882, 229, 231, 232, 233, 234, 907, 0, 907,
	0, 0, 291, 0, 0, 0, 0, 350, 356, 0,
	434, 437, 438, 0, 427, 306, 307, 413, 884, 440,
	863, 486, 447, 0, 457, 495, 472, 462, 0, 599,
	509, 510, 551, 552, 553, 554, 555, 600, 601, 0,
	606, 607, 608, 609, 610, 611, 612, 613, 614, 615,
	-2, -2, -2, 619, 620, 621, -2, -2, -2, 625,
	626, -2, 795, 797, 0, 856, 0, -2, 0, 635,
	-2, -2, -2, 639, 0, 642, 644, 646, 0, 0,
	0, 0, 855, 656, 833, 0, 0, 774, 775, 776,
	864, 641, 0, 0, 854, 845, 0, 0, -2, 696,
	0, 0, 0, 804, 805, 840, 836, 0, 703, 423,
	0, 0, 0, 0, 0, 902, 752, 0, 0, 0,
	716, 718, 0, 0, 0, 0, 808, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 798, 818, 0, 0,
	659, 0, 0, 0, 0, 1089, 0, 798, 826, 0,
	0, 0, 0, 0, 798, 0, 832, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 440,
	498, 860, 33, 310, 0, 0, 0, 36, 1073, 44,
	0, 242, 0, 0, 0, 0, 0, 323, 45, 1073,
	53, 1073, 53, 46, 31, 321, 0, 0, 314, 0,
	309, 312, 0, 72, 0, 0, 61, 0, 63, 74,
	0, 869, 82, 0, 504, 357, 358, 0, 0, 366,
	363, 0, 505, 0, 0, 0, 0, 86, 88, 90,
	0, 801, 0, 0, 0, 0, 0, 0, 0, 0,
	799, 127, 128, 148, 173, 174, 176, 169, 0, 236,
	269, 0, 0, 907, 0, 225, 270, 292, 294, 0,
	0, 352, 356, 0, 355, 411, 426, 0, 442, 0,
	445, 0, 0, 0, 0, 0, 492, 492, 492, 490,
	466, 413, 472, 0, 0, 484, 0, -2, 462, 0,
	0, -2, -2, 0, 0, 0, 657, -2, 640, 643,
	645, 647, 0, 0, 0, 0, 0, 0, 0, 658,
	0, 0, 843, 846, -2, 799, 802, 803, 0, 0,
	837, 0, 0, 0, 0, 422, 423, 423, 423, 709,
	0, 710, 0, 0, 0, 0, 0, 0, 725, 0,
	726, 727, 0, 0, 728, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 662, 663,
	664, 0, 0, 729, 824, 825, 0, 0, 0, 0,
	0, 0, 734, 0, 831, 0, 0, 0, 738, 739,
	740, 0, 534, 0, 556, 578, 580, 568, 442, 0,
	0, 0, 0, 54, 240, 259, 0, 0, 299, 305,
	305, 0, 712, 713, 0, 0, 0, 38, 0, 0,
	0, 0, 42, 0, 48, 0, 0, 0, 0, 0,
	0, 0, 60, 0, 0, 0, 75, 372, 373, 0,
	371, 0, 361, 374, 379, 376, 382, 0, 511, 0,
	0, 519, 588, 589, 590, 591, 592, 593, 594, 0,
	144, 223, 0, 230, 0, 0, 0, 228, 0, 0,
	0, 354, 356, 0, 347, 348, 409, 746, 0, 0,
	448, 0, 0, 0, 0, 0, 487, 491, 488, 489,
	0, 0, 0, 0, 484, 454, 0, 0, 0, 461,
	483, 0, 482, 471, -2, 602, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 834, 0, 769, 0, 0,
	845, -2, 806, 835, 839, 0, 704, 0, 0, 0,
	0, 895, 750, 751, 755, 0, 0, 714, 0, 0,
	807, 817, 819, 660, 661, 665, 666, 667, 668, 669,
	670, 671, 672, 673, 674, -2, -2, -2, 678, 679,
	680, -2, -2, -2, 0, 0, 0, 820, 0, 0,
	772, 822, 823, 828, 829, 0, 731, 732, 733, 830,
	0, 0, 0, 562, 0, 746, 316, 318, 35, 0,
	241, 0, 244, 0, 0, 0, 0, 250, 251, 0,
	0, 0, 0, 261, 268, 0, 308, 887, 0, 308,
	0, 0, 0, 0, 0, 50, 0, 0, 322, 0,
	53, 53, 311, 0, 0, 221, 222, 315, 313, 64,
	0, 0, 359, 0, 0, 0, 365, 375, 0, 512,
	507, 597, 0, 0, 0, 0, 0, 0, 0, 0,
	345, 356, 0, 349, 350, 397, 0, 441, 439, 474,
	0, 476, 0, 0, 0, 478, 457, 467, 0, 469,
	472, 0, 459, 0, 0, 452, 0, 451, 472, 480,
	0, 0, 0, 0, -2, 0, 650, -2, -2, 768,
	799, 844, 838, 892, 423, 705, 707, 708, 757, 754,
	0, 741, 723, 724, 816, 0, 0, 0, 0, 799,
	771, 730, 0, 736, 737, 535, 398, 37, 0, 245,
	246, 907, 0, 249, 252, 0, 254, 909, 236, 0,
	265, 266, 300, 301, 304, 302, 305, 423, 263, 0,
	39, 40, 49, 57, 41, 47, 0, 0, 485, 0,
	0, 0, 69, 67, 0, 0, 0, 383, 384, 0,
	0, 268, 0, 258, 236, 226, 268, 0, 0, 351,
	352, 745, 747, 0, 475, 0, 494, 477, 472, 468,
	0, 484, 413, 455, 0, 456, 0, 484, 0, 0,
	463, -2, -2, 651, 770, 0, 423, 0, 743, -2,
	0, 0, 0, 773, 0, 243, 247, 0, 0, 274,
	0, 262, 0, 308, 0, 0, 59, 0, 317, 319,
	0, 0, 71, 68, 0, 0, 368, 505, 370, 0,
	236, 268, 224, 236, 0, 353, 354, 0, 0, 0,
	0, 470, 464, 0, 453, 449, 0, 460, 0, 481,
	706, 760, 0, -2, 0, 686, 735, 0, 253, 279,
	0, 0, 0, 303, 704, 270, 43, 0, 56, 423,
	70, 66, 0, 369, 0, 256, 236, 295, 0, 346,
	748, 749, 493, 458, 472, 0, 479, 0, 0, 0,
	756, 687, 0, 255, 275, 276, 0, 271, 272, 273,
	908, 267, 274, 58, 0, 505, 0, 257, 268, 484,
	450, 753, 758, 761, -2, 1037, 939, 0, 759, 248,
	277, 0, 278, 0, 0, 0, 279, 0, 367, 239,
	236, 465, 0, 763, 764, 765, 766, 767, 280, 0,
	283, 284, 0, 281, 264, 235, 237, 238, 296, 0,
	282, 285, 286, 762,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 309, 3, 315, 310, 3,
	320, 321, 313, 311, 324, 312, 322, 314, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 328, 323,
	303, 305, 304, 3, 325, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 318, 3, 319, 308, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 326, 307, 327, 317,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 306, 57646, 316, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:782
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:788
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:794
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 29:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:838
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:888
		{
			return unimplemented(sqllex)
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:911
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:921
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:931
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			sqlVAL.union.val = nil
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = DropCascade
		}
	case 52:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = DropRestrict
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = DropDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:978
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:984
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return unimplemented(sqllex)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:988
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:992
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].str, IncrementalFrom: sqlDollar[6].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1002
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = []string(nil)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1022
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 67:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.str = ""
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1032
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1038
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 71:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1051
		{
		}
	case 73:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1059
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 97:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{ /* SKIP DOC */
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1213
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1333
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1337
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1341
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &Reset{Name: sqlDollar[2].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1375
		{
			return unimplemented(sqllex)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{ /* SKIP DOC */
		}
	case 151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1396
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1407
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1447
		{
			return unimplemented(sqllex)
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return unimplemented(sqllex)
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = Low
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = Normal
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = High
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			return unimplemented(sqllex)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			return unimplemented(sqllex)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1564
		{
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1660
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 220:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1741
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = DropDefault
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1770
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1901
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1976
		{
			return unimplemented(sqllex)
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1978
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1985
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return unimplemented(sqllex)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1989
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1995
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1999
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2000
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2001
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2002
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2034
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = true
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = false
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2093
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2109
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2110
		{
			return unimplemented(sqllex)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return unimplemented(sqllex)
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2114
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = Ascending
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2122
		{
			sqlVAL.union.val = Descending
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 317:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2168
		{
			return unimplemented(sqllex)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2169
		{
			return unimplemented(sqllex)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = true
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = false
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
		}
	case 323:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2183
		{
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2216
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2225
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2226
		{
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.str = ""
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.str = ""
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2252
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.str = ""
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2348
		{
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2349
		{
		}
	case 357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2363
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 359:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2369
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 361:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2377
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2399
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2423
		{
			return unimplemented(sqllex)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2431
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 374:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 375:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2453
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2454
		{
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2458
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2532
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2561
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2681
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2682
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2683
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2686
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2687
		{
			return unimplemented(sqllex)
		}
	case 409:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2690
		{
			return unimplemented(sqllex)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2694
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			return unimplemented(sqllex)
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2698
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
		}
	case 415:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2702
		{
		}
	case 416:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = true
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = false
		}
	case 418:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = false
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = true
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2725
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2726
		{
		}
	case 422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2826
		{
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2884
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = &From{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2920
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2933
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2938
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2965
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2982
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2993
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3001
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 463:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = nil
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3043
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = true
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = false
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3132
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3142
		{
			sqlVAL.str = astFullJoin
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3146
		{
			sqlVAL.str = astLeftJoin
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.str = astRightJoin
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.str = astInnerJoin
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3161
		{
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3221
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3247
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3260
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3261
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3284
		{
			return unimplemented(sqllex)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3306
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3318
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3322
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3343
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3352
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = nil
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3460
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3496
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3512
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3528
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3568
		{
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3577
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = year
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = month
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = day
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = hour
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = minute
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = month
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = hour
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = minute
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = minute
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = nil
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3660
		{
			sqlVAL.union.val = second
		}
	case 597:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3663
		{
			return unimplemented(sqllex)
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3698
		{
			return unimplemented(sqllex)
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3823
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3827
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3835
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3839
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			return unimplemented(sqllex)
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3924
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3984
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4016
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4032
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4036
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4040
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4044
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4048
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4150
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4151
		{
			return unimplemented(sqllex)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4174
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4191
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4195
		{
			return unimplemented(sqllex)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4197
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4201
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4214
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4244
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4288
		{
			return unimplemented(sqllex)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4289
		{
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4304
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = Window(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4324
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.str = ""
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4376
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4386
		{
			return unimplemented(sqllex)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4387
		{
			return unimplemented(sqllex)
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4388
		{
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4392
		{
			return unimplemented(sqllex)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4398
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4399
		{
			return unimplemented(sqllex)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4400
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4401
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4402
		{
			return unimplemented(sqllex)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = Any
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = Some
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = All
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = Plus
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = Minus
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = Mult
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = Div
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = FloorDiv
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = Mod
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = Bitand
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = Bitor
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = Bitxor
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = Bitxor
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = LT
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = GT
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = EQ
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = LE
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = GE
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = NE
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = Like
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = NotLike
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4477
		{
			sqlVAL.union.val = ILike
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = NotILike
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4559
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4766
		{
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4767
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4795
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4904
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4908
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4927
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4963
		{
			return unimplemented(sqllex)
		}
	case 893:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = DNull
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 907:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.str = ""
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
