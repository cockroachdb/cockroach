// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:47

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:495
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ACTION = lex.ACTION
const ADD = lex.ADD
const ALL = lex.ALL
const ALL_EXISTENCE = lex.ALL_EXISTENCE
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HELP = lex.HELP
const HIGH = lex.HIGH
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const IS = lex.IS
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const ON = lex.ON
const ONLY = lex.ONLY
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SOME_EXISTENCE = lex.SOME_EXISTENCE
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7001

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 739,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 48,
	152, 588,
	-2, 0,
	-1, 56,
	97, 739,
	156, 739,
	331, 739,
	332, 739,
	-2, 0,
	-1, 66,
	1, 701,
	215, 701,
	261, 701,
	376, 701,
	378, 701,
	380, 701,
	381, 701,
	-2, 714,
	-1, 99,
	4, 741,
	20, 741,
	21, 741,
	24, 741,
	29, 741,
	34, 741,
	35, 741,
	36, 741,
	37, 741,
	38, 741,
	39, 741,
	40, 741,
	41, 741,
	42, 741,
	43, 741,
	45, 741,
	46, 741,
	47, 741,
	48, 741,
	49, 741,
	52, 741,
	53, 741,
	54, 741,
	56, 741,
	57, 741,
	61, 741,
	62, 741,
	63, 741,
	65, 741,
	66, 741,
	67, 741,
	68, 741,
	70, 741,
	72, 741,
	73, 741,
	76, 741,
	77, 741,
	78, 741,
	86, 741,
	87, 741,
	88, 741,
	89, 741,
	90, 741,
	91, 741,
	92, 741,
	93, 741,
	95, 741,
	97, 741,
	99, 741,
	102, 741,
	103, 741,
	105, 741,
	109, 741,
	110, 741,
	111, 741,
	112, 741,
	113, 741,
	114, 741,
	115, 741,
	123, 741,
	124, 741,
	125, 741,
	126, 741,
	127, 741,
	129, 741,
	131, 741,
	136, 741,
	137, 741,
	139, 741,
	142, 741,
	143, 741,
	144, 741,
	145, 741,
	146, 741,
	147, 741,
	150, 741,
	151, 741,
	153, 741,
	156, 741,
	157, 741,
	158, 741,
	159, 741,
	160, 741,
	161, 741,
	162, 741,
	163, 741,
	165, 741,
	168, 741,
	169, 741,
	170, 741,
	172, 741,
	173, 741,
	174, 741,
	175, 741,
	176, 741,
	178, 741,
	179, 741,
	181, 741,
	183, 741,
	184, 741,
	187, 741,
	188, 741,
	191, 741,
	193, 741,
	195, 741,
	196, 741,
	197, 741,
	198, 741,
	199, 741,
	201, 741,
	202, 741,
	203, 741,
	204, 741,
	208, 741,
	209, 741,
	210, 741,
	211, 741,
	212, 741,
	214, 741,
	216, 741,
	217, 741,
	220, 741,
	221, 741,
	223, 741,
	225, 741,
	226, 741,
	227, 741,
	228, 741,
	229, 741,
	230, 741,
	231, 741,
	233, 741,
	234, 741,
	235, 741,
	236, 741,
	237, 741,
	239, 741,
	240, 741,
	241, 741,
	242, 741,
	243, 741,
	244, 741,
	245, 741,
	246, 741,
	248, 741,
	249, 741,
	250, 741,
	251, 741,
	252, 741,
	254, 741,
	255, 741,
	256, 741,
	257, 741,
	258, 741,
	259, 741,
	260, 741,
	262, 741,
	264, 741,
	265, 741,
	266, 741,
	267, 741,
	269, 741,
	270, 741,
	271, 741,
	272, 741,
	273, 741,
	275, 741,
	276, 741,
	277, 741,
	278, 741,
	279, 741,
	281, 741,
	282, 741,
	283, 741,
	284, 741,
	286, 741,
	287, 741,
	288, 741,
	289, 741,
	292, 741,
	293, 741,
	294, 741,
	295, 741,
	296, 741,
	297, 741,
	298, 741,
	299, 741,
	300, 741,
	301, 741,
	303, 741,
	305, 741,
	306, 741,
	307, 741,
	308, 741,
	309, 741,
	310, 741,
	311, 741,
	312, 741,
	314, 741,
	315, 741,
	316, 741,
	319, 741,
	320, 741,
	321, 741,
	322, 741,
	324, 741,
	325, 741,
	326, 741,
	327, 741,
	330, 741,
	331, 741,
	332, 741,
	333, 741,
	335, 741,
	337, 741,
	338, 741,
	339, 741,
	340, 741,
	341, 741,
	342, 741,
	345, 741,
	350, 741,
	351, 741,
	352, 741,
	353, 741,
	354, 741,
	-2, 0,
	-1, 116,
	1, 704,
	215, 704,
	261, 704,
	376, 704,
	378, 704,
	380, 704,
	381, 704,
	-2, 713,
	-1, 121,
	1, 639,
	168, 639,
	239, 639,
	243, 639,
	380, 639,
	381, 639,
	-2, 0,
	-1, 123,
	1, 639,
	380, 639,
	381, 639,
	-2, 0,
	-1, 124,
	1, 639,
	380, 639,
	381, 639,
	-2, 0,
	-1, 125,
	1, 643,
	380, 643,
	381, 643,
	-2, 0,
	-1, 147,
	4, 747,
	5, 747,
	6, 747,
	7, 747,
	8, 747,
	9, 747,
	20, 747,
	21, 747,
	24, 747,
	29, 747,
	30, 747,
	34, 747,
	35, 747,
	36, 747,
	37, 747,
	38, 747,
	39, 747,
	40, 747,
	41, 747,
	42, 747,
	43, 747,
	45, 747,
	46, 747,
	47, 747,
	48, 747,
	49, 747,
	50, 747,
	51, 747,
	52, 747,
	53, 747,
	54, 747,
	56, 747,
	57, 747,
	59, 747,
	61, 747,
	62, 747,
	63, 747,
	65, 747,
	66, 747,
	67, 747,
	68, 747,
	70, 747,
	72, 747,
	73, 747,
	75, 747,
	76, 747,
	77, 747,
	78, 747,
	80, 747,
	81, 747,
	82, 747,
	84, 747,
	85, 747,
	86, 747,
	87, 747,
	88, 747,
	89, 747,
	90, 747,
	91, 747,
	92, 747,
	93, 747,
	94, 747,
	95, 747,
	97, 747,
	99, 747,
	102, 747,
	103, 747,
	105, 747,
	109, 747,
	110, 747,
	111, 747,
	112, 747,
	113, 747,
	114, 747,
	115, 747,
	116, 747,
	117, 747,
	123, 747,
	124, 747,
	125, 747,
	126, 747,
	127, 747,
	129, 747,
	131, 747,
	134, 747,
	136, 747,
	137, 747,
	139, 747,
	142, 747,
	143, 747,
	144, 747,
	145, 747,
	146, 747,
	147, 747,
	148, 747,
	150, 747,
	151, 747,
	153, 747,
	155, 747,
	156, 747,
	157, 747,
	158, 747,
	159, 747,
	160, 747,
	161, 747,
	162, 747,
	163, 747,
	165, 747,
	167, 747,
	168, 747,
	169, 747,
	170, 747,
	171, 747,
	172, 747,
	173, 747,
	174, 747,
	175, 747,
	176, 747,
	178, 747,
	179, 747,
	181, 747,
	182, 747,
	183, 747,
	184, 747,
	185, 747,
	187, 747,
	188, 747,
	191, 747,
	193, 747,
	194, 747,
	195, 747,
	196, 747,
	197, 747,
	198, 747,
	199, 747,
	200, 747,
	201, 747,
	202, 747,
	203, 747,
	204, 747,
	205, 747,
	207, 747,
	208, 747,
	209, 747,
	210, 747,
	211, 747,
	212, 747,
	214, 747,
	217, 747,
	220, 747,
	221, 747,
	222, 747,
	223, 747,
	224, 747,
	225, 747,
	226, 747,
	227, 747,
	228, 747,
	229, 747,
	230, 747,
	231, 747,
	233, 747,
	234, 747,
	235, 747,
	236, 747,
	237, 747,
	239, 747,
	240, 747,
	241, 747,
	242, 747,
	243, 747,
	244, 747,
	245, 747,
	246, 747,
	248, 747,
	249, 747,
	250, 747,
	251, 747,
	252, 747,
	254, 747,
	255, 747,
	256, 747,
	257, 747,
	258, 747,
	259, 747,
	260, 747,
	262, 747,
	263, 747,
	264, 747,
	265, 747,
	266, 747,
	267, 747,
	269, 747,
	270, 747,
	271, 747,
	272, 747,
	273, 747,
	275, 747,
	276, 747,
	277, 747,
	278, 747,
	279, 747,
	280, 747,
	281, 747,
	282, 747,
	283, 747,
	284, 747,
	285, 747,
	286, 747,
	287, 747,
	288, 747,
	289, 747,
	292, 747,
	293, 747,
	294, 747,
	295, 747,
	296, 747,
	297, 747,
	298, 747,
	299, 747,
	300, 747,
	301, 747,
	303, 747,
	305, 747,
	306, 747,
	307, 747,
	308, 747,
	309, 747,
	310, 747,
	311, 747,
	312, 747,
	314, 747,
	315, 747,
	316, 747,
	319, 747,
	320, 747,
	321, 747,
	322, 747,
	323, 747,
	324, 747,
	325, 747,
	326, 747,
	327, 747,
	330, 747,
	331, 747,
	332, 747,
	333, 747,
	334, 747,
	335, 747,
	337, 747,
	338, 747,
	339, 747,
	340, 747,
	341, 747,
	342, 747,
	345, 747,
	350, 747,
	351, 747,
	352, 747,
	353, 747,
	354, 747,
	355, 747,
	363, 747,
	368, 747,
	369, 747,
	370, 747,
	377, 747,
	383, 747,
	-2, 0,
	-1, 150,
	1, 54,
	381, 54,
	-2, 739,
	-1, 520,
	133, 1357,
	317, 1357,
	360, 1357,
	379, 1357,
	-2, 0,
	-1, 521,
	133, 1304,
	317, 1304,
	360, 1304,
	379, 1304,
	-2, 0,
	-1, 523,
	133, 1417,
	317, 1417,
	360, 1417,
	379, 1417,
	-2, 0,
	-1, 525,
	133, 1440,
	317, 1440,
	360, 1440,
	379, 1440,
	-2, 0,
	-1, 532,
	133, 1362,
	317, 1362,
	360, 1362,
	379, 1362,
	-2, 353,
	-1, 558,
	1, 431,
	376, 431,
	378, 431,
	380, 431,
	381, 431,
	-2, 0,
	-1, 559,
	1, 484,
	130, 484,
	376, 484,
	378, 484,
	380, 484,
	381, 484,
	-2, 0,
	-1, 565,
	1, 445,
	376, 445,
	378, 445,
	380, 445,
	381, 445,
	-2, 0,
	-1, 567,
	1, 449,
	376, 449,
	378, 449,
	380, 449,
	381, 449,
	-2, 0,
	-1, 570,
	1, 457,
	376, 457,
	378, 457,
	380, 457,
	381, 457,
	-2, 0,
	-1, 571,
	1, 462,
	376, 462,
	378, 462,
	380, 462,
	381, 462,
	-2, 0,
	-1, 574,
	1, 472,
	376, 472,
	378, 472,
	380, 472,
	381, 472,
	-2, 0,
	-1, 597,
	118, 749,
	130, 749,
	186, 749,
	213, 749,
	-2, 708,
	-1, 604,
	118, 748,
	130, 748,
	186, 748,
	213, 748,
	-2, 705,
	-1, 660,
	377, 1282,
	-2, 1275,
	-1, 661,
	377, 1283,
	-2, 1276,
	-1, 667,
	5, 933,
	377, 933,
	-2, 1492,
	-1, 692,
	5, 892,
	-2, 1461,
	-1, 693,
	5, 927,
	377, 927,
	-2, 1463,
	-1, 694,
	5, 902,
	-2, 1464,
	-1, 695,
	5, 901,
	-2, 1465,
	-1, 696,
	5, 927,
	377, 927,
	-2, 1468,
	-1, 697,
	5, 927,
	377, 927,
	-2, 1469,
	-1, 698,
	5, 928,
	-2, 1472,
	-1, 699,
	5, 884,
	-2, 1473,
	-1, 700,
	5, 884,
	-2, 1474,
	-1, 701,
	5, 909,
	-2, 1478,
	-1, 702,
	5, 894,
	-2, 1479,
	-1, 703,
	5, 895,
	-2, 1480,
	-1, 704,
	5, 885,
	-2, 1486,
	-1, 705,
	5, 886,
	-2, 1487,
	-1, 706,
	5, 887,
	-2, 1488,
	-1, 707,
	5, 888,
	-2, 1489,
	-1, 708,
	5, 889,
	-2, 1490,
	-1, 709,
	5, 890,
	-2, 1491,
	-1, 710,
	5, 884,
	-2, 1498,
	-1, 711,
	5, 893,
	-2, 1503,
	-1, 712,
	5, 891,
	-2, 1506,
	-1, 713,
	5, 925,
	377, 925,
	-2, 1508,
	-1, 714,
	5, 929,
	-2, 1511,
	-1, 715,
	5, 931,
	-2, 1512,
	-1, 716,
	5, 924,
	377, 924,
	-2, 1517,
	-1, 780,
	112, 508,
	-2, 838,
	-1, 916,
	229, 737,
	-2, 581,
	-1, 921,
	215, 1279,
	-2, 0,
	-1, 957,
	1, 225,
	376, 225,
	378, 225,
	380, 225,
	381, 225,
	-2, 712,
	-1, 960,
	4, 1516,
	10, 1516,
	11, 1516,
	13, 1516,
	14, 1516,
	15, 1516,
	16, 1516,
	17, 1516,
	18, 1516,
	20, 1516,
	21, 1516,
	23, 1516,
	24, 1516,
	27, 1516,
	29, 1516,
	31, 1516,
	34, 1516,
	35, 1516,
	36, 1516,
	37, 1516,
	38, 1516,
	39, 1516,
	40, 1516,
	41, 1516,
	42, 1516,
	43, 1516,
	45, 1516,
	46, 1516,
	47, 1516,
	48, 1516,
	49, 1516,
	52, 1516,
	53, 1516,
	54, 1516,
	56, 1516,
	57, 1516,
	58, 1516,
	61, 1516,
	62, 1516,
	63, 1516,
	64, 1516,
	65, 1516,
	66, 1516,
	67, 1516,
	68, 1516,
	70, 1516,
	71, 1516,
	72, 1516,
	73, 1516,
	75, 1516,
	76, 1516,
	77, 1516,
	78, 1516,
	86, 1516,
	87, 1516,
	88, 1516,
	89, 1516,
	90, 1516,
	91, 1516,
	92, 1516,
	93, 1516,
	95, 1516,
	97, 1516,
	99, 1516,
	102, 1516,
	103, 1516,
	105, 1516,
	109, 1516,
	110, 1516,
	111, 1516,
	112, 1516,
	113, 1516,
	114, 1516,
	115, 1516,
	119, 1516,
	120, 1516,
	121, 1516,
	122, 1516,
	123, 1516,
	124, 1516,
	125, 1516,
	126, 1516,
	127, 1516,
	128, 1516,
	129, 1516,
	131, 1516,
	134, 1516,
	136, 1516,
	137, 1516,
	139, 1516,
	142, 1516,
	143, 1516,
	144, 1516,
	145, 1516,
	146, 1516,
	147, 1516,
	148, 1516,
	149, 1516,
	150, 1516,
	151, 1516,
	153, 1516,
	155, 1516,
	156, 1516,
	157, 1516,
	158, 1516,
	159, 1516,
	160, 1516,
	161, 1516,
	162, 1516,
	163, 1516,
	165, 1516,
	167, 1516,
	168, 1516,
	169, 1516,
	170, 1516,
	171, 1516,
	172, 1516,
	173, 1516,
	174, 1516,
	175, 1516,
	176, 1516,
	178, 1516,
	179, 1516,
	181, 1516,
	182, 1516,
	183, 1516,
	184, 1516,
	185, 1516,
	187, 1516,
	188, 1516,
	191, 1516,
	192, 1516,
	193, 1516,
	195, 1516,
	196, 1516,
	197, 1516,
	198, 1516,
	199, 1516,
	200, 1516,
	201, 1516,
	202, 1516,
	203, 1516,
	204, 1516,
	208, 1516,
	209, 1516,
	210, 1516,
	211, 1516,
	212, 1516,
	214, 1516,
	217, 1516,
	218, 1516,
	220, 1516,
	221, 1516,
	223, 1516,
	225, 1516,
	226, 1516,
	227, 1516,
	228, 1516,
	229, 1516,
	230, 1516,
	231, 1516,
	233, 1516,
	234, 1516,
	235, 1516,
	236, 1516,
	237, 1516,
	239, 1516,
	240, 1516,
	241, 1516,
	242, 1516,
	243, 1516,
	244, 1516,
	245, 1516,
	246, 1516,
	248, 1516,
	249, 1516,
	250, 1516,
	251, 1516,
	252, 1516,
	253, 1516,
	254, 1516,
	255, 1516,
	256, 1516,
	257, 1516,
	258, 1516,
	259, 1516,
	260, 1516,
	262, 1516,
	263, 1516,
	264, 1516,
	265, 1516,
	266, 1516,
	267, 1516,
	268, 1516,
	269, 1516,
	270, 1516,
	271, 1516,
	272, 1516,
	273, 1516,
	275, 1516,
	276, 1516,
	277, 1516,
	278, 1516,
	279, 1516,
	281, 1516,
	282, 1516,
	283, 1516,
	284, 1516,
	285, 1516,
	286, 1516,
	287, 1516,
	288, 1516,
	289, 1516,
	291, 1516,
	292, 1516,
	293, 1516,
	294, 1516,
	295, 1516,
	296, 1516,
	297, 1516,
	298, 1516,
	299, 1516,
	300, 1516,
	301, 1516,
	303, 1516,
	305, 1516,
	306, 1516,
	307, 1516,
	308, 1516,
	309, 1516,
	310, 1516,
	311, 1516,
	312, 1516,
	314, 1516,
	315, 1516,
	316, 1516,
	319, 1516,
	320, 1516,
	321, 1516,
	322, 1516,
	324, 1516,
	325, 1516,
	326, 1516,
	327, 1516,
	330, 1516,
	331, 1516,
	332, 1516,
	333, 1516,
	335, 1516,
	337, 1516,
	338, 1516,
	339, 1516,
	340, 1516,
	341, 1516,
	342, 1516,
	345, 1516,
	350, 1516,
	351, 1516,
	352, 1516,
	353, 1516,
	354, 1516,
	355, 1516,
	356, 1516,
	358, 1516,
	359, 1516,
	360, 1516,
	361, 1516,
	362, 1516,
	363, 1516,
	365, 1516,
	366, 1516,
	367, 1516,
	368, 1516,
	369, 1516,
	370, 1516,
	371, 1516,
	372, 1516,
	373, 1516,
	375, 1516,
	378, 1516,
	379, 1516,
	382, 1516,
	383, 1516,
	-2, 0,
	-1, 976,
	133, 1417,
	317, 1417,
	360, 1417,
	379, 1417,
	-2, 0,
	-1, 993,
	133, 1440,
	317, 1440,
	360, 1440,
	379, 1440,
	-2, 0,
	-1, 994,
	168, 651,
	239, 651,
	243, 651,
	-2, 341,
	-1, 1059,
	118, 748,
	130, 748,
	186, 748,
	213, 748,
	-2, 709,
	-1, 1140,
	108, 714,
	118, 714,
	130, 714,
	164, 714,
	186, 714,
	213, 714,
	219, 714,
	328, 714,
	-2, 1063,
	-1, 1150,
	377, 1259,
	-2, 1247,
	-1, 1168,
	378, 1176,
	-2, 0,
	-1, 1192,
	168, 651,
	239, 651,
	243, 651,
	-2, 646,
	-1, 1220,
	378, 1176,
	-2, 0,
	-1, 1224,
	108, 714,
	118, 714,
	130, 714,
	164, 714,
	186, 714,
	213, 714,
	219, 714,
	328, 714,
	-2, 815,
	-1, 1378,
	168, 651,
	239, 651,
	243, 651,
	-2, 343,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 968,
	-1, 1483,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 969,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 970,
	-1, 1485,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 971,
	-1, 1486,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 972,
	-1, 1487,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 973,
	-1, 1488,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 974,
	-1, 1489,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 975,
	-1, 1498,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 984,
	-1, 1499,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 985,
	-1, 1500,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 986,
	-1, 1503,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 991,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 993,
	-1, 1511,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 997,
	-1, 1512,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 998,
	-1, 1513,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 999,
	-1, 1514,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1000,
	-1, 1583,
	133, 1187,
	377, 1282,
	-2, 1275,
	-1, 1584,
	133, 1188,
	-2, 1457,
	-1, 1585,
	133, 1189,
	-2, 1361,
	-1, 1586,
	133, 1190,
	-2, 1322,
	-1, 1587,
	133, 1191,
	-2, 1339,
	-1, 1588,
	133, 1192,
	-2, 1360,
	-1, 1589,
	133, 1193,
	-2, 1414,
	-1, 1666,
	1, 816,
	75, 816,
	108, 816,
	118, 816,
	130, 816,
	134, 816,
	138, 816,
	140, 816,
	155, 816,
	164, 816,
	171, 816,
	182, 816,
	186, 816,
	200, 816,
	213, 816,
	215, 816,
	219, 816,
	261, 816,
	263, 816,
	328, 816,
	336, 816,
	347, 816,
	348, 816,
	357, 816,
	376, 816,
	378, 816,
	380, 816,
	381, 816,
	382, 816,
	-2, 815,
	-1, 1821,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 992,
	-1, 1822,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 994,
	-1, 1827,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 995,
	-1, 1845,
	224, 1147,
	-2, 1149,
	-1, 2027,
	229, 737,
	-2, 581,
	-1, 2081,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 996,
	-1, 2086,
	167, 0,
	-2, 1012,
	-1, 2095,
	224, 1148,
	-2, 1150,
	-1, 2137,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1040,
	-1, 2138,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1041,
	-1, 2139,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1042,
	-1, 2143,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1046,
	-1, 2144,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1047,
	-1, 2145,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1048,
	-1, 2285,
	167, 0,
	-2, 1013,
	-1, 2288,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1016,
	-1, 2289,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1018,
	-1, 2417,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1017,
	-1, 2418,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1019,
	-1, 2425,
	167, 0,
	-2, 1049,
	-1, 2502,
	167, 0,
	-2, 1050,
	-1, 2584,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1460,
	-1, 2667,
	377, 1528,
	-2, 521,
}

const sqlPrivate = 57344

const sqlLast = 44646

var sqlAct = [...]int{

	661, 2388, 2387, 2652, 2583, 2664, 1242, 2665, 2240, 2592,
	2594, 1740, 2650, 2451, 2556, 2633, 2593, 2064, 1748, 2582,
	2114, 1276, 2398, 2507, 2251, 2353, 651, 2196, 659, 1284,
	658, 788, 1815, 950, 2339, 1319, 2273, 1661, 2275, 187,
	1526, 2031, 2232, 2033, 2197, 1737, 187, 910, 1240, 1218,
	187, 2319, 1718, 2431, 1719, 1960, 187, 2039, 1222, 1723,
	1939, 187, 187, 1911, 2267, 187, 1749, 1201, 187, 1278,
	637, 803, 1279, 953, 1722, 946, 187, 1670, 1662, 1679,
	1947, 1856, 1563, 1456, 2167, 1910, 1461, 1811, 1320, 1709,
	997, 1538, 1272, 1146, 1403, 1064, 531, 456, 1297, 1797,
	613, 111, 1547, 1232, 1230, 1202, 1523, 474, 26, 1612,
	1399, 1439, 770, 453, 1437, 996, 1178, 1182, 1720, 936,
	790, 943, 1557, 1742, 958, 1648, 1726, 1635, 511, 1209,
	753, 1135, 1579, 629, 1539, 773, 1065, 1402, 1440, 178,
	653, 1438, 187, 187, 116, 1192, 524, 489, 1291, 933,
	187, 117, 1227, 528, 751, 183, 2354, 111, 605, 1191,
	1069, 552, 2181, 1844, 1299, 2182, 2389, 1299, 1299, 2389,
	1741, 1219, 1710, 187, 187, 793, 187, 187, 805, 609,
	2680, 2679, 187, 187, 2673, 2673, 2672, 2629, 2628, 2627,
	2673, 1260, 1260, 1260, 2609, 2079, 2604, 2170, 2352, 604,
	1642, 503, 2603, 2600, 2580, 2048, 1642, 1260, 1309, 2579,
	65, 2049, 2551, 1309, 2546, 619, 1774, 2542, 2412, 2534,
	2529, 1260, 609, 2352, 1260, 2504, 2484, 2481, 2479, 1774,
	2352, 1260, 2352, 612, 2462, 2461, 2439, 893, 1260, 2352,
	1260, 2436, 2419, 2378, 1256, 1260, 1774, 1642, 786, 2373,
	2351, 111, 800, 1642, 2352, 2332, 598, 2287, 26, 1260,
	2266, 1774, 2261, 597, 1717, 2177, 1717, 2090, 2058, 2178,
	2019, 1642, 2020, 1936, 1260, 1935, 1928, 1642, 1926, 1260,
	1929, 614, 1642, 1925, 1924, 778, 782, 1642, 1642, 1848,
	1784, 1710, 1773, 1637, 1642, 1849, 1774, 755, 2685, 1763,
	1716, 1641, 767, 1642, 1717, 1642, 1312, 757, 2671, 758,
	1313, 1642, 2552, 1309, 2412, 2170, 1309, 147, 1636, 2382,
	2681, 2074, 1668, 2661, 2150, 37, 2092, 2020, 1814, 610,
	1795, 1381, 1196, 1542, 1080, 1081, 38, 121, 1260, 891,
	978, 2355, 1642, 150, 1881, 1882, 975, 149, 974, 41,
	1560, 973, 972, 971, 970, 969, 968, 967, 1083, 966,
	636, 965, 964, 123, 1080, 1081, 963, 1400, 962, 961,
	1120, 1121, 1122, 45, 1300, 48, 759, 1300, 1300, 756,
	603, 602, 1082, 897, 148, 1855, 147, 601, 1083, 600,
	596, 1124, 141, 1745, 595, 594, 49, 593, 1896, 142,
	51, 592, 1561, 591, 54, 590, 419, 124, 589, 588,
	584, 55, 1082, 44, 56, 583, 149, 582, 1102, 550,
	118, 549, 1080, 1081, 548, 187, 793, 187, 547, 187,
	546, 545, 187, 1080, 1081, 544, 57, 543, 187, 542,
	541, 540, 539, 538, 537, 58, 1083, 187, 187, 187,
	187, 793, 1088, 148, 1562, 1559, 793, 1083, 2656, 536,
	2048, 535, 1887, 534, 519, 518, 517, 516, 515, 444,
	1082, 422, 413, 1105, 1106, 1107, 1108, 412, 1881, 1882,
	170, 1082, 1088, 169, 187, 168, 167, 166, 165, 118,
	164, 163, 1881, 1882, 162, 1576, 161, 1305, 187, 916,
	1298, 1434, 1117, 1125, 160, 147, 1080, 1081, 159, 158,
	771, 157, 156, 155, 187, 154, 1103, 153, 152, 151,
	1574, 914, 1955, 919, 187, 1223, 1897, 1572, 1406, 1009,
	1083, 59, 1564, 780, 784, 149, 1570, 802, 60, 1115,
	1088, 2654, 1636, 939, 939, 2599, 1103, 1076, 2581, 2567,
	935, 1088, 2561, 2499, 1082, 793, 2482, 67, 119, 61,
	1102, 62, 2383, 63, 2318, 125, 2317, 940, 2313, 2312,
	64, 2405, 148, 147, 2305, 147, 959, 909, 2304, 2303,
	141, 1243, 75, 2299, 2298, 95, 187, 142, 2297, 2296,
	1080, 1081, 1104, 2290, 979, 122, 1887, 2272, 2164, 2159,
	1881, 1882, 1898, 149, 1103, 149, 2158, 1109, 118, 1154,
	1887, 2157, 1558, 2100, 1083, 1105, 1106, 1107, 1108, 2022,
	2018, 1967, 1104, 1963, 1088, 99, 1933, 1007, 1012, 1930,
	1881, 1882, 1918, 1909, 120, 1880, 1779, 907, 1082, 1118,
	148, 1877, 148, 1876, 1881, 1882, 1874, 1861, 141, 1860,
	141, 1845, 1666, 1076, 766, 142, 1534, 142, 1221, 1147,
	1897, 1138, 897, 1316, 1075, 1220, 610, 2674, 2659, 2641,
	991, 994, 2640, 1283, 1897, 2116, 1744, 2571, 118, 1059,
	1104, 4, 2570, 2569, 2537, 2528, 2526, 2518, 1103, 1093,
	1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 1058, 1892,
	1890, 1891, 1883, 1884, 1885, 1886, 1888, 1889, 1088, 1116,
	2516, 2510, 1881, 1882, 2494, 1010, 2493, 1119, 1887, 1093,
	1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 1401, 1810,
	2670, 1776, 1528, 2404, 2448, 2427, 1898, 1809, 1881, 1882,
	2413, 1899, 1900, 1901, 1061, 2392, 2376, 1062, 1887, 1109,
	1898, 187, 2358, 187, 2310, 2284, 1060, 2249, 598, 2246,
	2245, 2243, 1887, 2205, 1104, 597, 2204, 1535, 1072, 1073,
	2185, 2173, 1103, 2085, 2003, 187, 187, 1077, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 2062, 1994, 1980, 1221,
	1979, 1965, 1896, 1086, 1087, 1089, 1090, 1934, 784, 1908,
	1056, 1870, 1869, 1150, 1866, 1841, 1836, 1183, 1186, 802,
	1653, 1624, 1568, 1180, 1181, 1275, 1200, 1199, 1184, 1207,
	1190, 1176, 1175, 1174, 1173, 1172, 1897, 1171, 1187, 1205,
	1887, 1170, 1169, 1892, 1890, 1891, 1883, 1884, 1885, 1886,
	1888, 1889, 1168, 1167, 1980, 2411, 610, 1166, 1104, 1252,
	1883, 1884, 1885, 1886, 1888, 1889, 1887, 1165, 1164, 1147,
	1163, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090,
	111, 1575, 1162, 1710, 1161, 1160, 1080, 1081, 1159, 1195,
	1158, 908, 1151, 1217, 1139, 1138, 990, 982, 955, 2292,
	2271, 793, 187, 1953, 1897, 1902, 1573, 2180, 805, 2176,
	1083, 1193, 1898, 1571, 187, 187, 1847, 1197, 1654, 187,
	1225, 2060, 1569, 1136, 2034, 1881, 1882, 2384, 2415, 2414,
	1897, 2408, 187, 1006, 1082, 1783, 2183, 2050, 187, 1188,
	187, 1223, 187, 2224, 1189, 2217, 187, 2006, 1999, 1932,
	621, 1282, 1931, 1156, 2065, 1820, 784, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 1269, 1003, 1387, 1274, 1883, 1884,
	1885, 1886, 1888, 1889, 1258, 1280, 1317, 1243, 1782, 1261,
	1898, 1998, 1712, 906, 1246, 2432, 1741, 187, 187, 2117,
	1852, 1153, 1548, 1179, 793, 610, 187, 1050, 2657, 187,
	1885, 1886, 1888, 1889, 2655, 1288, 1898, 175, 2044, 449,
	1890, 1891, 1883, 1884, 1885, 1886, 1888, 1889, 2192, 1241,
	805, 2564, 1080, 1081, 1767, 187, 450, 1373, 425, 174,
	187, 2624, 2541, 1441, 171, 187, 187, 1051, 187, 765,
	187, 1238, 187, 2366, 187, 746, 1083, 1785, 2625, 1302,
	935, 2473, 1304, 1680, 2071, 187, 1307, 1259, 608, 1239,
	748, 187, 187, 654, 2471, 423, 2381, 1628, 744, 719,
	1082, 176, 188, 448, 2470, 2469, 742, 1560, 739, 1891,
	1883, 1884, 1885, 1886, 1888, 1889, 1777, 1290, 2226, 187,
	1293, 1407, 2219, 805, 2189, 1042, 1893, 1894, 1895, 2188,
	1865, 1864, 1388, 1892, 1890, 1891, 1883, 1884, 1885, 1886,
	1888, 1889, 1391, 1390, 607, 1400, 1397, 1004, 445, 1221,
	175, 1408, 1863, 1862, 1823, 2668, 718, 1314, 1766, 1561,
	1683, 1233, 1705, 991, 1234, 1374, 1315, 1700, 1695, 1510,
	1088, 1194, 890, 1627, 1471, 771, 1228, 1540, 1738, 1378,
	111, 428, 1375, 1404, 1392, 1432, 1233, 2540, 428, 1234,
	1005, 177, 1055, 1422, 1470, 2061, 1433, 2230, 2453, 609,
	586, 1443, 417, 2239, 1415, 2015, 1270, 1672, 1672, 1462,
	1469, 1562, 1559, 1412, 176, 418, 2216, 1671, 1431, 1416,
	1411, 1417, 498, 1418, 1525, 1419, 418, 1420, 2577, 2207,
	1079, 1597, 1394, 1294, 449, 187, 2596, 187, 1274, 1435,
	187, 1442, 1436, 1235, 1426, 1428, 1564, 2110, 1036, 989,
	2616, 187, 2521, 172, 598, 447, 1525, 598, 598, 2041,
	805, 1452, 1548, 187, 1453, 1454, 1682, 187, 1235, 2005,
	187, 2643, 1460, 1996, 187, 898, 900, 794, 187, 1090,
	806, 1545, 434, 174, 805, 450, 187, 1037, 793, 1564,
	2042, 902, 1244, 173, 1633, 446, 187, 805, 448, 1812,
	1813, 187, 2072, 1367, 177, 1265, 1536, 1533, 606, 1273,
	1881, 1882, 2624, 1899, 1900, 1901, 187, 1655, 1889, 666,
	1299, 1507, 1543, 2530, 187, 1564, 1395, 2283, 784, 2597,
	1292, 1656, 1292, 1673, 1177, 187, 2041, 187, 1590, 187,
	2615, 435, 187, 1607, 187, 905, 187, 187, 2070, 187,
	793, 793, 1684, 1686, 793, 1694, 2220, 1681, 187, 980,
	1732, 1698, 623, 1630, 1896, 984, 172, 1631, 1707, 1558,
	1430, 1706, 1233, 1640, 1697, 1234, 1379, 903, 2531, 1650,
	1651, 1646, 1243, 2423, 1762, 1532, 2389, 1691, 2598, 610,
	1689, 1530, 621, 740, 610, 1659, 174, 424, 1696, 1702,
	1676, 1833, 1225, 1645, 424, 750, 173, 2208, 749, 2347,
	1084, 1085, 1086, 1087, 1089, 1090, 740, 1831, 2107, 1991,
	2478, 1758, 429, 1761, 741, 2454, 740, 425, 1887, 429,
	2636, 1133, 1505, 1508, 425, 1755, 1868, 426, 939, 1743,
	939, 1743, 1041, 1649, 426, 2012, 2614, 805, 2348, 1248,
	447, 1665, 609, 111, 1235, 187, 1769, 1747, 2548, 111,
	1208, 1756, 508, 1757, 2214, 1669, 1764, 1902, 1759, 1504,
	2108, 187, 187, 187, 959, 187, 1768, 610, 1765, 1236,
	450, 2644, 487, 2549, 1128, 1129, 1130, 1131, 1132, 1778,
	446, 490, 1897, 1825, 2010, 1141, 1243, 721, 1828, 720,
	187, 1410, 587, 1780, 1236, 1149, 1401, 1398, 1829, 2014,
	1078, 2279, 1834, 1184, 495, 1187, 437, 436, 1796, 1212,
	491, 1521, 1254, 2595, 497, 1524, 1181, 1180, 794, 988,
	1300, 1080, 1081, 2623, 490, 1000, 1786, 1519, 1253, 1023,
	1215, 2621, 1000, 2397, 1735, 985, 2233, 1802, 1564, 977,
	443, 414, 492, 794, 1068, 1083, 1210, 495, 794, 2343,
	1250, 2344, 1788, 491, 111, 1049, 663, 1213, 1898, 1506,
	438, 1015, 2009, 494, 1790, 2146, 2464, 1800, 1251, 1082,
	2463, 2649, 2446, 2634, 2513, 1211, 1212, 1804, 1806, 1826,
	1805, 1249, 2346, 904, 2308, 492, 1791, 577, 1808, 2011,
	1949, 2349, 486, 2362, 2191, 1231, 1001, 1215, 1789, 1976,
	1002, 771, 2365, 1001, 1067, 618, 494, 1002, 1515, 2364,
	1203, 1203, 487, 1647, 1830, 2234, 1516, 771, 1517, 1972,
	1667, 1832, 1522, 1736, 1213, 1289, 2347, 1281, 784, 2340,
	2635, 1277, 2106, 2557, 2660, 1961, 784, 1448, 1214, 1088,
	2338, 1425, 1067, 1531, 1824, 2342, 802, 794, 1893, 1894,
	1895, 2013, 2637, 995, 1063, 1892, 1890, 1891, 1883, 1884,
	1885, 1886, 1888, 1889, 490, 2348, 912, 911, 187, 805,
	2147, 578, 1066, 2345, 187, 187, 2148, 1937, 187, 1851,
	1236, 493, 1943, 187, 2648, 1752, 187, 495, 2341, 1382,
	2399, 1067, 180, 491, 187, 2309, 802, 802, 2252, 1068,
	187, 187, 187, 1103, 2361, 1214, 187, 1962, 415, 187,
	1066, 1948, 1950, 1644, 1449, 187, 187, 187, 187, 187,
	2363, 1046, 2447, 1957, 493, 492, 187, 932, 793, 1982,
	1981, 187, 1818, 1643, 1518, 1208, 805, 1068, 496, 1854,
	1942, 1520, 1024, 1956, 1000, 506, 494, 500, 187, 1915,
	1916, 1917, 607, 930, 921, 1966, 2241, 2390, 187, 1066,
	187, 1952, 187, 793, 793, 1973, 187, 1386, 3, 610,
	187, 439, 1938, 2008, 2320, 187, 2343, 187, 2344, 1104,
	416, 496, 579, 2168, 187, 2444, 1567, 2021, 2426, 2023,
	2307, 616, 1047, 577, 1212, 1045, 1977, 187, 793, 1016,
	1034, 1997, 1968, 1142, 2229, 1912, 2084, 2004, 2016, 2346,
	1875, 618, 187, 440, 2445, 1215, 1384, 1835, 2349, 1000,
	1941, 1801, 802, 1803, 1990, 784, 1945, 1946, 1992, 1385,
	1951, 1210, 1781, 479, 34, 2046, 2026, 2027, 1017, 2001,
	1977, 1014, 1213, 610, 441, 617, 442, 1715, 1048, 187,
	1819, 895, 896, 1704, 621, 621, 478, 33, 2025, 1693,
	1211, 1054, 1053, 580, 493, 983, 2037, 2043, 2024, 1913,
	1063, 2057, 2028, 1566, 892, 2591, 2051, 578, 1713, 1084,
	1085, 1086, 1087, 1089, 1090, 2052, 2053, 1423, 2054, 2055,
	1001, 931, 1414, 2059, 1002, 1157, 2056, 581, 1703, 187,
	2345, 2554, 2087, 477, 30, 1032, 2069, 2067, 2068, 1030,
	2097, 2066, 505, 1692, 499, 1257, 1445, 929, 1450, 776,
	2073, 496, 2336, 1214, 1457, 2075, 1044, 2212, 2077, 2210,
	2190, 1033, 2030, 1206, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 2093, 1509, 1739, 1511,
	1512, 1513, 1514, 2096, 717, 1733, 2109, 2111, 2112, 476,
	71, 187, 2118, 794, 34, 610, 1537, 187, 579, 2120,
	806, 1462, 2121, 1141, 2123, 1731, 187, 187, 2125, 1310,
	1462, 2126, 1308, 1028, 2152, 1306, 2091, 33, 475, 70,
	472, 22, 1577, 1578, 1040, 1026, 1594, 1020, 1606, 1608,
	1613, 1616, 1617, 1618, 2179, 473, 23, 2153, 771, 471,
	28, 470, 20, 2156, 771, 771, 1031, 2203, 771, 2202,
	1029, 2201, 805, 187, 187, 187, 2102, 2103, 2104, 1303,
	2186, 187, 2184, 187, 30, 2228, 2222, 2172, 2171, 2169,
	1969, 187, 2166, 2222, 793, 111, 1326, 615, 928, 580,
	738, 1301, 1361, 2151, 1255, 2187, 794, 2247, 1247, 187,
	187, 1011, 2244, 577, 468, 19, 1995, 1396, 2194, 2262,
	1245, 469, 18, 460, 15, 2254, 187, 461, 16, 2215,
	2221, 618, 806, 581, 1237, 187, 2253, 2227, 2017, 2032,
	805, 2489, 1070, 2235, 2625, 2211, 2410, 2213, 467, 53,
	2238, 459, 52, 1311, 2256, 2242, 2029, 2248, 2257, 1360,
	71, 466, 12, 2175, 1027, 1273, 465, 46, 2255, 2258,
	2264, 2281, 1039, 2409, 1273, 2263, 1025, 187, 1019, 795,
	1405, 2286, 807, 2269, 458, 47, 1816, 2268, 1376, 70,
	1672, 22, 464, 7, 1326, 1326, 2491, 578, 762, 1687,
	1361, 1361, 463, 6, 1672, 806, 23, 1688, 2260, 2002,
	28, 2282, 20, 1685, 462, 36, 457, 35, 763, 1993,
	1071, 2523, 1708, 1699, 743, 745, 1267, 1268, 1714, 927,
	485, 187, 2355, 1018, 187, 2501, 1080, 1081, 2477, 2078,
	2321, 1080, 1081, 1074, 805, 187, 187, 2306, 1701, 187,
	187, 187, 1817, 1690, 2553, 2395, 1746, 1360, 1360, 1734,
	1083, 1730, 1941, 1632, 1377, 19, 187, 1318, 2632, 2647,
	2438, 187, 18, 187, 15, 187, 187, 187, 16, 2326,
	187, 793, 2330, 2323, 1082, 2356, 2325, 805, 2324, 1082,
	793, 2203, 2359, 2202, 507, 2201, 764, 2327, 2270, 53,
	2331, 2165, 52, 2113, 2222, 1793, 187, 187, 579, 2063,
	2335, 2222, 12, 1958, 793, 2328, 1927, 46, 1881, 1882,
	2360, 2294, 1325, 2380, 1080, 1081, 1793, 1792, 1794, 1629,
	2203, 2391, 2202, 1626, 2201, 47, 2203, 2396, 2202, 1625,
	2201, 1142, 806, 7, 1556, 2401, 2385, 2386, 2372, 1550,
	1144, 2105, 1154, 6, 2375, 2377, 2400, 1152, 2379, 2394,
	2393, 2402, 1582, 1582, 1595, 36, 806, 35, 1615, 1052,
	794, 771, 1619, 1620, 1622, 2416, 1043, 1038, 1035, 806,
	2407, 1021, 987, 2322, 1821, 1822, 1380, 585, 2452, 580,
	1827, 488, 1413, 1022, 1954, 1652, 2547, 187, 1634, 187,
	2300, 805, 187, 1867, 2506, 2422, 2428, 1565, 1155, 1840,
	187, 50, 2199, 640, 2337, 2193, 805, 1725, 1724, 808,
	1325, 1325, 1846, 581, 1389, 662, 1581, 1463, 1853, 2406,
	795, 1857, 794, 794, 2237, 802, 794, 2435, 737, 2203,
	664, 2202, 1323, 2201, 2437, 187, 2456, 665, 1871, 2458,
	1324, 1451, 1185, 652, 1321, 795, 2440, 2455, 187, 956,
	795, 793, 1274, 1750, 1393, 187, 1529, 1546, 2222, 1752,
	771, 1850, 2442, 187, 187, 793, 793, 1148, 632, 2203,
	2480, 2202, 1141, 2201, 644, 2475, 643, 2457, 1544, 1613,
	1613, 1613, 2487, 187, 981, 631, 1959, 2040, 187, 2476,
	1363, 2403, 1362, 2486, 2488, 187, 1447, 1807, 1444, 2492,
	2496, 2495, 2474, 2036, 2421, 2466, 1203, 2209, 427, 2490,
	2517, 1878, 1944, 2503, 954, 1604, 2467, 2468, 1596, 806,
	187, 187, 1592, 1057, 2512, 2509, 2511, 1134, 1751, 187,
	1008, 2047, 1775, 1198, 1455, 2519, 761, 793, 2497, 2498,
	1598, 2535, 187, 2533, 793, 793, 760, 2658, 2536, 795,
	1383, 1787, 1127, 2483, 1126, 747, 2515, 999, 998, 1322,
	1975, 2642, 2522, 2539, 2206, 2563, 146, 187, 2538, 187,
	143, 145, 187, 144, 805, 2007, 74, 2544, 2545, 32,
	31, 771, 94, 93, 92, 91, 90, 89, 1363, 1363,
	1362, 1362, 2572, 88, 646, 2574, 87, 86, 2573, 85,
	84, 83, 2560, 187, 2578, 82, 81, 80, 79, 78,
	77, 2038, 2576, 76, 2203, 2575, 2202, 529, 2201, 2588,
	187, 187, 187, 2559, 2590, 2369, 2589, 526, 187, 73,
	2374, 2500, 2608, 184, 2601, 72, 29, 25, 98, 2613,
	420, 24, 187, 69, 430, 2565, 2610, 2611, 2612, 68,
	451, 27, 621, 621, 2620, 501, 184, 1322, 1322, 509,
	17, 2622, 514, 11, 21, 621, 2626, 115, 114, 2520,
	533, 113, 2631, 2630, 2605, 2606, 2607, 112, 14, 2076,
	13, 2527, 110, 109, 1457, 108, 2639, 2646, 107, 2645,
	2080, 2638, 106, 2081, 10, 9, 97, 2651, 2653, 2231,
	42, 43, 8, 40, 39, 2086, 96, 137, 136, 133,
	2662, 2663, 135, 132, 2094, 134, 1839, 105, 2651, 139,
	138, 130, 2098, 1842, 2669, 1944, 2675, 128, 2651, 129,
	2678, 2677, 2682, 2683, 2676, 2684, 754, 754, 2653, 2686,
	1858, 1859, 2653, 131, 420, 2122, 127, 126, 140, 2124,
	104, 806, 103, 102, 101, 100, 5, 2, 1, 0,
	2450, 0, 0, 0, 0, 1837, 1838, 420, 420, 0,
	798, 420, 0, 0, 0, 0, 184, 894, 0, 0,
	0, 1326, 2154, 2155, 0, 0, 0, 1361, 0, 0,
	1907, 2161, 2162, 2163, 0, 0, 0, 1615, 1615, 1615,
	0, 0, 1920, 0, 0, 0, 0, 0, 2485, 0,
	794, 0, 0, 0, 0, 0, 0, 0, 806, 2174,
	0, 0, 0, 1216, 0, 1326, 0, 0, 0, 0,
	0, 1361, 0, 0, 0, 0, 0, 0, 0, 0,
	481, 1904, 1905, 1906, 1360, 794, 794, 0, 0, 2195,
	0, 38, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	794, 0, 0, 0, 1361, 795, 0, 0, 1360, 2532,
	480, 0, 807, 0, 0, 0, 1598, 1598, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1203, 0, 0, 0, 0, 0, 0, 0, 482,
	2265, 0, 0, 0, 0, 0, 55, 0, 484, 56,
	0, 0, 2562, 0, 0, 0, 0, 0, 0, 0,
	1326, 1360, 0, 641, 66, 0, 1361, 0, 0, 0,
	0, 0, 0, 0, 2285, 0, 0, 0, 2288, 2289,
	58, 0, 2291, 0, 0, 0, 0, 0, 0, 2293,
	0, 2295, 1598, 1598, 1598, 0, 1326, 1326, 795, 0,
	0, 0, 1361, 1361, 0, 1326, 1326, 2302, 1752, 0,
	0, 1361, 1361, 0, 0, 0, 0, 0, 0, 0,
	66, 0, 0, 1360, 807, 0, 0, 1325, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 533,
	2311, 533, 0, 922, 1361, 0, 925, 0, 0, 0,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 1360,
	1360, 533, 533, 420, 947, 0, 59, 0, 1360, 1360,
	0, 1325, 0, 0, 0, 599, 0, 0, 0, 0,
	0, 0, 611, 0, 0, 0, 2082, 2083, 0, 0,
	2357, 0, 0, 119, 61, 0, 62, 807, 533, 0,
	0, 1360, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 0, 533, 772, 66, 0, 0, 483, 0, 0,
	95, 0, 0, 0, 1325, 0, 0, 2160, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 533, 0,
	149, 0, 0, 0, 806, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
	2142, 2143, 2144, 2145, 0, 2149, 794, 0, 0, 0,
	0, 0, 0, 2417, 2418, 0, 0, 148, 0, 0,
	0, 0, 0, 0, 0, 141, 1325, 0, 0, 0,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	420, 0, 2218, 0, 2430, 1363, 0, 1362, 0, 1326,
	2433, 2225, 806, 118, 0, 1361, 0, 1598, 1598, 0,
	0, 0, 1325, 1325, 0, 0, 0, 0, 0, 0,
	0, 1325, 1325, 0, 807, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1363,
	0, 1362, 0, 0, 2465, 0, 0, 0, 807, 0,
	0, 0, 795, 0, 1325, 0, 0, 0, 0, 0,
	0, 807, 1360, 0, 1322, 0, 1598, 1598, 1598, 1598,
	1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
	1598, 1598, 1598, 1598, 1598, 0, 1598, 0, 0, 0,
	0, 0, 1363, 0, 1362, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 1322, 0,
	0, 0, 0, 0, 795, 795, 0, 0, 795, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2514, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 794, 0, 0, 0, 0, 0, 806,
	0, 0, 794, 0, 1363, 514, 1362, 754, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 794, 0, 0, 420,
	420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1363, 1363, 1362, 1362, 0, 0, 0, 0, 0, 1363,
	1363, 1362, 1362, 0, 0, 0, 0, 0, 0, 611,
	0, 807, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1322, 1326, 1325, 0, 0, 2587, 2587,
	1361, 0, 1363, 0, 1362, 0, 0, 0, 0, 0,
	0, 481, 0, 0, 2602, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 1322,
	1322, 0, 0, 806, 2587, 41, 0, 0, 1322, 1322,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	1326, 0, 0, 0, 0, 0, 1361, 1360, 0, 0,
	0, 480, 0, 0, 0, 0, 184, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 1263, 420,
	0, 0, 2587, 420, 0, 0, 0, 0, 0, 2434,
	482, 0, 0, 794, 0, 0, 1287, 55, 0, 484,
	56, 0, 420, 0, 420, 0, 420, 794, 794, 2666,
	1295, 1326, 0, 1360, 0, 0, 0, 1361, 0, 0,
	2666, 0, 0, 2666, 2666, 0, 2460, 0, 0, 2425,
	0, 58, 0, 0, 0, 0, 0, 599, 0, 0,
	0, 0, 0, 0, 2472, 0, 0, 0, 0, 0,
	0, 533, 184, 0, 0, 0, 0, 1137, 0, 1140,
	184, 0, 0, 533, 0, 0, 1145, 0, 0, 0,
	2449, 0, 0, 1363, 1360, 1362, 0, 0, 0, 794,
	0, 0, 0, 0, 0, 0, 794, 794, 0, 533,
	0, 0, 0, 0, 533, 0, 0, 0, 0, 184,
	533, 0, 533, 0, 533, 454, 533, 0, 533, 0,
	0, 0, 0, 807, 0, 0, 806, 59, 0, 1424,
	1325, 0, 0, 0, 0, 533, 533, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	0, 0, 1322, 0, 119, 61, 0, 62, 2502, 0,
	0, 41, 0, 533, 0, 0, 0, 0, 0, 0,
	1598, 147, 481, 0, 0, 1799, 0, 0, 483, 2550,
	0, 95, 795, 38, 0, 0, 1325, 480, 0, 0,
	807, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 149, 0, 66, 2566, 0, 2568, 0, 1224, 0,
	0, 1598, 0, 0, 0, 0, 482, 795, 795, 0,
	0, 0, 480, 55, 0, 484, 56, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 141, 1325, 0, 0,
	0, 482, 795, 142, 0, 0, 0, 58, 55, 0,
	484, 56, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 514,
	0, 754, 0, 0, 894, 0, 0, 0, 0, 1598,
	0, 0, 58, 0, 0, 420, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1664, 1363, 0,
	1362, 420, 0, 0, 420, 0, 0, 0, 1677, 0,
	0, 0, 420, 0, 481, 0, 0, 0, 0, 0,
	420, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	420, 0, 0, 59, 0, 1711, 0, 0, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1721, 0, 0, 0, 1363, 0, 1362, 0, 894, 0,
	119, 61, 0, 62, 480, 0, 0, 1322, 59, 420,
	0, 1754, 0, 533, 0, 0, 533, 147, 533, 0,
	420, 420, 0, 1760, 483, 0, 0, 95, 0, 0,
	0, 0, 1677, 482, 0, 119, 61, 0, 62, 0,
	55, 0, 484, 56, 0, 0, 0, 149, 0, 0,
	0, 0, 147, 0, 0, 1363, 1421, 1362, 0, 483,
	0, 0, 95, 1322, 1881, 1882, 0, 1899, 1900, 1901,
	0, 0, 0, 0, 58, 0, 0, 0, 0, 0,
	0, 2089, 149, 0, 148, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 142,
	0, 0, 0, 66, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1896, 148,
	455, 0, 0, 0, 1322, 0, 807, 141, 0, 1798,
	0, 0, 0, 599, 142, 0, 599, 599, 0, 0,
	0, 0, 0, 0, 0, 420, 420, 420, 795, 420,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 0, 0, 0,
	0, 0, 1887, 0, 0, 0, 0, 119, 61, 1527,
	62, 0, 0, 0, 807, 0, 0, 0, 0, 0,
	0, 0, 611, 0, 147, 0, 0, 1140, 0, 0,
	0, 483, 0, 0, 95, 0, 0, 0, 0, 0,
	0, 1902, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1770, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 1897, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 148, 0, 0, 772, 0, 0, 0, 0, 141,
	0, 0, 0, 1771, 0, 0, 142, 0, 0, 0,
	1224, 0, 0, 0, 0, 0, 0, 0, 807, 0,
	0, 0, 0, 66, 0, 0, 0, 118, 0, 0,
	0, 0, 1772, 0, 0, 66, 0, 0, 0, 0,
	0, 484, 1898, 0, 0, 0, 0, 0, 0, 1881,
	1882, 0, 1899, 1900, 1901, 795, 0, 0, 0, 0,
	0, 807, 0, 0, 795, 0, 2088, 0, 0, 0,
	0, 0, 420, 58, 0, 66, 0, 66, 420, 420,
	0, 0, 420, 0, 0, 0, 0, 1664, 795, 0,
	1664, 0, 0, 0, 0, 0, 66, 0, 1964, 0,
	0, 0, 66, 1896, 420, 1970, 1971, 0, 0, 0,
	1677, 0, 0, 1978, 0, 0, 0, 0, 0, 1983,
	1984, 1986, 1988, 1989, 0, 0, 0, 0, 0, 0,
	420, 0, 1893, 1894, 1895, 2000, 0, 0, 0, 1892,
	1890, 1891, 1883, 1884, 1885, 1886, 1888, 1889, 0, 0,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 1287, 0, 1287, 0, 533, 1887, 0, 0,
	420, 0, 0, 0, 2035, 807, 0, 0, 0, 420,
	0, 2045, 0, 0, 0, 0, 119, 61, 420, 62,
	807, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1798, 0, 147, 0, 0, 1902, 66, 0, 0,
	483, 0, 0, 95, 0, 0, 1798, 0, 0, 0,
	0, 1080, 1081, 0, 1110, 1111, 1112, 1120, 1121, 1122,
	0, 1897, 0, 149, 1098, 795, 0, 0, 1113, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 1124, 795,
	795, 0, 0, 420, 1881, 1882, 0, 1899, 1900, 1901,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	148, 0, 0, 0, 0, 1102, 0, 0, 141, 0,
	0, 0, 1099, 0, 0, 142, 0, 0, 0, 0,
	0, 0, 1527, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2115, 0, 0, 118, 1898, 1896, 0,
	0, 0, 1140, 0, 0, 0, 0, 0, 0, 0,
	0, 795, 0, 0, 0, 0, 0, 0, 795, 795,
	1105, 1106, 1107, 1108, 0, 0, 0, 0, 0, 1088,
	0, 1881, 1882, 0, 1899, 1900, 1901, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 807, 1117,
	1125, 0, 0, 0, 1881, 1882, 0, 1899, 1900, 1901,
	0, 0, 1887, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 420, 1140, 0, 0, 0,
	0, 1664, 0, 0, 0, 1896, 1115, 1893, 1894, 1895,
	894, 1664, 0, 1103, 1892, 1890, 1891, 1883, 1884, 1885,
	1886, 1888, 1889, 0, 0, 2198, 0, 0, 1896, 0,
	0, 772, 0, 0, 0, 0, 0, 772, 772, 1114,
	0, 772, 0, 0, 2223, 0, 1897, 0, 0, 0,
	0, 2223, 0, 0, 0, 0, 0, 2236, 420, 420,
	0, 0, 0, 0, 0, 1677, 0, 1287, 0, 1887,
	0, 0, 0, 0, 1109, 2250, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 0, 0, 0, 0, 1104,
	1903, 0, 1887, 420, 420, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 0, 1902, 0,
	2276, 0, 1097, 0, 0, 0, 0, 0, 0, 2278,
	0, 0, 1898, 0, 66, 0, 0, 0, 66, 0,
	0, 1902, 0, 1897, 0, 0, 0, 0, 611, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1897, 0, 0, 0,
	0, 2301, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 1094,
	1095, 1101, 1100, 1096, 1119, 0, 1093, 1091, 1092, 1084,
	1085, 1086, 1087, 1089, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 2314, 0, 0, 0, 0, 0, 1898,
	0, 0, 1893, 1894, 1895, 420, 0, 0, 894, 1892,
	1890, 1891, 1883, 1884, 1885, 1886, 1888, 1889, 0, 1664,
	894, 0, 1898, 2333, 2334, 1677, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2198,
	894, 0, 0, 0, 0, 2367, 0, 2368, 0, 420,
	2370, 2371, 2223, 0, 420, 0, 0, 0, 0, 2223,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2198, 0,
	894, 1721, 0, 0, 2198, 0, 0, 0, 0, 1893,
	1894, 1895, 0, 0, 0, 0, 1892, 1890, 1891, 1883,
	1884, 1885, 1886, 1888, 1889, 0, 0, 0, 0, 0,
	0, 0, 1893, 1894, 1895, 0, 0, 0, 66, 1892,
	1890, 1891, 1883, 1884, 1885, 1886, 1888, 1889, 0, 0,
	0, 0, 0, 0, 772, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1677, 0, 2441, 0, 0, 2443, 0, 0, 0,
	0, 0, 0, 0, 420, 0, 0, 2198, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2223, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 0, 2198, 0, 0,
	0, 0, 420, 772, 0, 0, 0, 0, 0, 894,
	0, 0, 0, 0, 0, 0, 0, 2276, 2276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2508, 0, 0,
	0, 0, 1664, 0, 0, 0, 0, 0, 0, 1287,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2524, 2525, 0, 0, 0, 0,
	0, 0, 0, 420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2543, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2558, 0, 894, 772, 0, 420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2198, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2508, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 894, 894, 894, 0, 0, 0,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 804, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 809, 0, 191, 810, 811, 812, 813,
	353, 814, 815, 816, 817, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 818, 196, 360, 361, 197,
	198, 819, 820, 362, 363, 364, 821, 199, 365, 822,
	796, 823, 200, 201, 202, 0, 204, 205, 206, 203,
	824, 207, 0, 208, 209, 825, 722, 210, 211, 212,
	826, 827, 829, 828, 830, 831, 832, 213, 214, 421,
	215, 366, 216, 367, 368, 833, 217, 834, 218, 835,
	219, 836, 837, 220, 221, 838, 222, 839, 0, 840,
	369, 223, 225, 224, 226, 370, 371, 841, 723, 842,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 66,
	229, 843, 230, 844, 845, 724, 846, 231, 375, 847,
	376, 848, 1527, 232, 233, 234, 235, 377, 378, 726,
	849, 379, 239, 850, 236, 851, 725, 237, 380, 238,
	381, 382, 383, 384, 385, 852, 386, 853, 727, 240,
	241, 242, 728, 387, 388, 243, 244, 245, 854, 247,
	246, 855, 389, 729, 248, 249, 730, 856, 250, 251,
	857, 858, 252, 0, 253, 731, 254, 255, 257, 390,
	256, 732, 258, 259, 261, 260, 859, 860, 861, 391,
	262, 392, 263, 264, 862, 265, 863, 864, 266, 865,
	866, 267, 393, 733, 268, 734, 394, 269, 270, 271,
	272, 273, 274, 867, 275, 395, 276, 396, 277, 868,
	278, 279, 280, 281, 282, 397, 283, 284, 869, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 870, 297, 735, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 871, 310, 399, 309, 311,
	312, 872, 313, 301, 302, 314, 736, 315, 400, 401,
	316, 873, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 874, 324, 875, 325, 326, 327, 328,
	329, 330, 331, 332, 876, 404, 405, 406, 877, 878,
	333, 334, 407, 408, 879, 335, 336, 337, 338, 880,
	881, 339, 340, 341, 342, 882, 343, 883, 409, 344,
	345, 346, 410, 411, 884, 885, 347, 886, 887, 888,
	889, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 804, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1657, 0, 0, 0,
	0, 0, 189, 190, 809, 1658, 191, 810, 811, 812,
	813, 353, 814, 815, 816, 817, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 818, 196, 360, 361,
	197, 198, 819, 820, 362, 363, 364, 821, 199, 365,
	822, 796, 823, 200, 201, 202, 0, 204, 205, 206,
	203, 824, 207, 0, 208, 209, 825, 722, 210, 211,
	212, 826, 827, 829, 828, 830, 831, 832, 213, 214,
	421, 215, 366, 216, 367, 368, 833, 217, 834, 218,
	835, 219, 836, 837, 220, 221, 838, 222, 839, 0,
	840, 369, 223, 225, 224, 226, 370, 371, 841, 723,
	842, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 843, 230, 844, 845, 724, 846, 231, 375,
	847, 376, 848, 0, 232, 233, 234, 235, 377, 378,
	726, 849, 379, 239, 850, 236, 851, 725, 237, 380,
	238, 381, 382, 383, 384, 385, 852, 386, 853, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 854,
	247, 246, 855, 389, 729, 248, 249, 730, 856, 250,
	251, 857, 858, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 859, 860, 861,
	391, 262, 392, 263, 264, 862, 265, 863, 864, 266,
	865, 866, 267, 393, 733, 268, 734, 394, 269, 270,
	271, 272, 273, 274, 867, 275, 395, 276, 396, 277,
	868, 278, 279, 280, 281, 282, 397, 283, 284, 869,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 870, 297, 735, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 871, 310, 399, 309,
	311, 312, 872, 313, 301, 302, 314, 736, 315, 400,
	401, 316, 873, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 874, 324, 875, 325, 326, 327,
	328, 329, 330, 331, 332, 876, 404, 405, 406, 877,
	878, 333, 334, 407, 408, 879, 335, 336, 337, 338,
	880, 881, 339, 340, 341, 342, 882, 343, 883, 409,
	344, 345, 346, 410, 411, 884, 885, 347, 886, 887,
	888, 889, 348, 349, 350, 351, 352, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 809, 2329, 191, 810,
	811, 812, 813, 353, 814, 815, 816, 817, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 818, 196,
	360, 361, 197, 198, 819, 820, 362, 363, 364, 821,
	199, 365, 822, 796, 823, 200, 201, 202, 0, 204,
	205, 206, 203, 824, 207, 0, 208, 209, 825, 722,
	210, 211, 212, 826, 827, 829, 828, 830, 831, 832,
	213, 214, 421, 215, 366, 216, 367, 368, 833, 217,
	834, 218, 835, 219, 836, 837, 220, 221, 838, 222,
	839, 0, 840, 369, 223, 225, 224, 226, 370, 371,
	841, 723, 842, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 843, 230, 844, 845, 724, 846,
	231, 375, 847, 376, 848, 0, 232, 233, 234, 235,
	377, 378, 726, 849, 379, 239, 850, 236, 851, 725,
	237, 380, 238, 381, 382, 383, 384, 385, 852, 386,
	853, 727, 240, 241, 242, 728, 387, 388, 243, 244,
	245, 854, 247, 246, 855, 389, 729, 248, 249, 730,
	856, 250, 251, 857, 858, 252, 0, 253, 731, 254,
	255, 257, 390, 256, 732, 258, 259, 261, 260, 859,
	860, 861, 391, 262, 392, 263, 264, 862, 265, 863,
	864, 266, 865, 866, 267, 393, 733, 268, 734, 394,
	269, 270, 271, 272, 273, 274, 867, 275, 395, 276,
	396, 277, 868, 278, 279, 280, 281, 282, 397, 283,
	284, 869, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 870, 297, 735, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 871, 310,
	399, 309, 311, 312, 872, 313, 301, 302, 314, 736,
	315, 400, 401, 316, 873, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 874, 324, 875, 325,
	326, 327, 328, 329, 330, 331, 332, 876, 404, 405,
	406, 877, 878, 333, 334, 407, 408, 879, 335, 336,
	337, 338, 880, 881, 339, 340, 341, 342, 882, 343,
	883, 409, 344, 345, 346, 410, 411, 884, 885, 347,
	886, 887, 888, 889, 348, 349, 350, 351, 352, 804,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1262, 189, 190, 809, 0, 191,
	810, 811, 812, 813, 353, 814, 815, 816, 817, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 818,
	196, 360, 361, 197, 198, 819, 820, 362, 363, 364,
	821, 199, 365, 822, 796, 823, 200, 201, 202, 0,
	204, 205, 206, 203, 824, 207, 0, 208, 209, 825,
	722, 210, 211, 212, 826, 827, 829, 828, 830, 831,
	832, 213, 214, 421, 215, 366, 216, 367, 368, 833,
	217, 834, 218, 835, 219, 836, 837, 220, 221, 838,
	222, 839, 0, 840, 369, 223, 225, 224, 226, 370,
	371, 841, 723, 842, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 843, 230, 844, 845, 724,
	846, 231, 375, 847, 376, 848, 0, 232, 233, 234,
	235, 377, 378, 726, 849, 379, 239, 850, 236, 851,
	725, 237, 380, 238, 381, 382, 383, 384, 385, 852,
	386, 853, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 854, 247, 246, 855, 389, 729, 248, 249,
	730, 856, 250, 251, 857, 858, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	859, 860, 861, 391, 262, 392, 263, 264, 862, 265,
	863, 864, 266, 865, 866, 267, 393, 733, 268, 734,
	394, 269, 270, 271, 272, 273, 274, 867, 275, 395,
	276, 396, 277, 868, 278, 279, 280, 281, 282, 397,
	283, 284, 869, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 870, 297, 735, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 871,
	310, 399, 309, 311, 312, 872, 313, 301, 302, 314,
	736, 315, 400, 401, 316, 873, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 874, 324, 875,
	325, 326, 327, 328, 329, 330, 331, 332, 876, 404,
	405, 406, 877, 878, 333, 334, 407, 408, 879, 335,
	336, 337, 338, 880, 881, 339, 340, 341, 342, 882,
	343, 883, 409, 344, 345, 346, 410, 411, 884, 885,
	347, 886, 887, 888, 889, 348, 349, 350, 351, 352,
	1555, 0, 660, 649, 650, 647, 648, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	1552, 0, 191, 0, 0, 0, 0, 677, 642, 0,
	0, 0, 192, 193, 194, 354, 692, 356, 693, 195,
	694, 695, 0, 196, 360, 361, 197, 198, 645, 676,
	696, 697, 364, 0, 199, 688, 0, 668, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 722, 210, 211, 212, 0, 669, 670,
	672, 0, 671, 673, 213, 214, 421, 215, 698, 216,
	699, 700, 630, 217, 0, 218, 0, 219, 1553, 0,
	691, 221, 0, 222, 0, 0, 0, 633, 223, 225,
	224, 226, 678, 679, 656, 723, 0, 0, 0, 0,
	0, 227, 228, 701, 702, 703, 0, 229, 0, 230,
	0, 0, 724, 0, 231, 689, 0, 376, 0, 0,
	232, 233, 234, 235, 685, 687, 726, 0, 379, 239,
	0, 236, 0, 725, 237, 704, 238, 705, 706, 707,
	708, 709, 0, 667, 0, 727, 240, 241, 242, 728,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 690,
	729, 248, 249, 730, 0, 250, 251, 0, 0, 252,
	0, 253, 731, 254, 255, 257, 390, 256, 732, 258,
	259, 261, 260, 627, 0, 657, 686, 262, 710, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	733, 268, 734, 680, 269, 270, 271, 272, 273, 274,
	0, 275, 681, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 711, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 735, 298, 299, 634, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 674, 313,
	301, 302, 314, 736, 315, 712, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 713, 320, 321, 682,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 714, 715, 0, 0, 333, 334, 683,
	684, 655, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 675, 343, 0, 409, 344, 345, 346, 410,
	716, 1551, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 628, 0, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 624, 625, 1554, 0,
	0, 0, 0, 0, 0, 635, 1549, 0, 0, 0,
	612, 638, 660, 649, 650, 647, 648, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 677, 642, 0,
	0, 0, 192, 193, 194, 354, 692, 356, 693, 195,
	694, 695, 0, 196, 360, 361, 197, 198, 645, 676,
	696, 697, 364, 0, 199, 688, 0, 668, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 722, 210, 211, 212, 0, 669, 670,
	672, 0, 671, 673, 213, 214, 421, 215, 698, 216,
	699, 700, 630, 217, 0, 218, 0, 219, 0, 0,
	691, 221, 0, 222, 0, 0, 0, 633, 223, 225,
	224, 226, 678, 679, 656, 723, 0, 0, 0, 0,
	0, 227, 228, 701, 702, 703, 0, 229, 0, 230,
	0, 0, 724, 0, 231, 689, 0, 376, 0, 0,
	232, 233, 234, 235, 685, 687, 726, 0, 379, 239,
	0, 236, 0, 725, 237, 704, 238, 705, 706, 707,
	708, 709, 0, 667, 0, 727, 240, 241, 242, 728,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 690,
	729, 248, 249, 730, 0, 250, 251, 0, 0, 252,
	0, 253, 731, 254, 255, 257, 390, 256, 732, 258,
	259, 261, 260, 627, 0, 657, 686, 262, 710, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	733, 268, 734, 680, 269, 270, 271, 272, 273, 274,
	0, 275, 681, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 711, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 735, 298, 299, 634, 300, 0, 304, 305, 306,
	307, 308, 147, 310, 399, 309, 311, 312, 674, 313,
	301, 302, 314, 736, 315, 712, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 713, 320, 321, 682,
	0, 324, 149, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 714, 715, 0, 0, 333, 334, 683,
	684, 655, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 675, 343, 0, 409, 344, 345, 346, 960,
	716, 0, 0, 347, 0, 0, 0, 141, 348, 349,
	350, 351, 352, 628, 142, 0, 0, 0, 0, 0,
	0, 626, 0, 0, 0, 0, 624, 625, 660, 649,
	650, 647, 648, 639, 0, 1143, 0, 0, 0, 0,
	0, 638, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 192, 193,
	194, 354, 692, 356, 693, 195, 694, 695, 0, 196,
	360, 361, 197, 198, 645, 676, 696, 697, 364, 0,
	199, 688, 0, 668, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 722,
	210, 211, 212, 0, 669, 670, 672, 0, 671, 673,
	213, 214, 421, 215, 698, 216, 699, 700, 630, 217,
	0, 218, 0, 219, 0, 0, 691, 221, 0, 222,
	0, 0, 0, 633, 223, 225, 224, 226, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 227, 228, 701,
	702, 703, 0, 229, 0, 230, 0, 0, 724, 0,
	231, 689, 0, 376, 0, 0, 232, 233, 234, 235,
	685, 687, 726, 0, 379, 239, 0, 236, 0, 725,
	237, 704, 238, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 240, 241, 242, 728, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 690, 729, 248, 249, 730,
	0, 250, 251, 0, 0, 252, 0, 253, 731, 254,
	255, 257, 390, 256, 732, 258, 259, 261, 260, 627,
	0, 657, 686, 262, 710, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 733, 268, 734, 680,
	269, 270, 271, 272, 273, 274, 0, 275, 681, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 711, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 735, 298, 299,
	634, 300, 0, 304, 305, 306, 307, 308, 147, 310,
	399, 309, 311, 312, 674, 313, 301, 302, 314, 736,
	315, 712, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 713, 320, 321, 682, 0, 324, 149, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 714,
	715, 0, 0, 333, 334, 683, 684, 655, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 675, 343,
	0, 409, 344, 345, 346, 960, 716, 0, 0, 347,
	0, 0, 0, 141, 348, 349, 350, 351, 352, 628,
	142, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 624, 625, 660, 649, 650, 647, 648, 639,
	0, 1143, 0, 0, 0, 0, 0, 638, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 677,
	642, 0, 0, 0, 192, 193, 194, 354, 692, 356,
	693, 195, 694, 695, 1609, 196, 360, 361, 197, 198,
	645, 676, 696, 697, 364, 0, 199, 688, 0, 668,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 722, 210, 211, 212, 0,
	669, 670, 672, 0, 671, 673, 213, 214, 421, 215,
	698, 216, 699, 700, 630, 217, 0, 218, 0, 219,
	0, 0, 691, 221, 0, 222, 0, 0, 0, 633,
	223, 225, 224, 226, 678, 679, 656, 723, 0, 0,
	0, 0, 0, 227, 228, 701, 702, 703, 0, 229,
	0, 230, 0, 1614, 724, 0, 231, 689, 0, 376,
	0, 0, 232, 233, 234, 235, 685, 687, 726, 0,
	379, 239, 0, 236, 0, 725, 237, 704, 238, 705,
	706, 707, 708, 709, 0, 667, 0, 727, 240, 241,
	242, 728, 387, 388, 243, 244, 245, 0, 247, 246,
	1610, 690, 729, 248, 249, 730, 0, 250, 251, 0,
	0, 252, 0, 253, 731, 254, 255, 257, 390, 256,
	732, 258, 259, 261, 260, 627, 0, 657, 686, 262,
	710, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 733, 268, 734, 680, 269, 270, 271, 272,
	273, 274, 0, 275, 681, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 711, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 735, 298, 299, 634, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	674, 313, 301, 302, 314, 736, 315, 712, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 713, 320,
	321, 682, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 714, 715, 0, 1611, 333,
	334, 683, 684, 655, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 675, 343, 0, 409, 344, 345,
	346, 410, 716, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 628, 660, 649, 650, 647,
	648, 639, 0, 626, 0, 0, 0, 0, 624, 625,
	0, 0, 189, 190, 0, 0, 191, 635, 0, 0,
	0, 677, 642, 638, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 216, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 233, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 2259, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 628, 660, 649,
	650, 647, 648, 639, 0, 626, 0, 0, 0, 0,
	624, 625, 1204, 0, 189, 190, 0, 0, 191, 635,
	0, 0, 0, 677, 642, 638, 0, 0, 192, 193,
	194, 354, 692, 356, 693, 195, 694, 695, 0, 196,
	360, 361, 197, 198, 645, 676, 696, 697, 364, 0,
	199, 688, 0, 668, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 722,
	210, 211, 212, 0, 669, 670, 672, 0, 671, 673,
	213, 214, 421, 215, 698, 216, 699, 700, 630, 217,
	0, 218, 0, 219, 0, 0, 691, 221, 0, 222,
	0, 0, 0, 633, 223, 225, 224, 226, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 227, 228, 701,
	702, 703, 0, 229, 0, 230, 0, 0, 724, 0,
	231, 689, 0, 376, 0, 0, 232, 233, 234, 235,
	685, 687, 726, 0, 379, 239, 1459, 236, 0, 725,
	237, 704, 238, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 240, 241, 242, 728, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 690, 729, 248, 249, 730,
	0, 250, 251, 0, 0, 252, 0, 253, 731, 254,
	255, 257, 390, 256, 732, 258, 259, 261, 260, 627,
	0, 657, 686, 262, 710, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 733, 268, 734, 680,
	269, 270, 271, 272, 273, 274, 0, 275, 681, 276,
	396, 277, 1458, 278, 279, 280, 281, 282, 711, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 735, 298, 299,
	634, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 674, 313, 301, 302, 314, 736,
	315, 712, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 713, 320, 321, 682, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 714,
	715, 0, 0, 333, 334, 683, 684, 655, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 675, 343,
	0, 409, 344, 345, 346, 410, 716, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 628,
	0, 0, 0, 0, 0, 0, 0, 626, 0, 0,
	0, 0, 624, 625, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 620, 638, 660, 649,
	650, 647, 648, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 192, 193,
	194, 354, 692, 356, 693, 195, 694, 695, 0, 196,
	360, 361, 197, 198, 645, 676, 696, 697, 364, 0,
	199, 688, 0, 668, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 722,
	210, 211, 212, 0, 669, 670, 672, 0, 671, 673,
	213, 214, 421, 215, 698, 216, 699, 700, 630, 217,
	0, 218, 0, 219, 0, 0, 691, 221, 0, 222,
	0, 0, 0, 633, 223, 225, 224, 226, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 227, 228, 701,
	702, 703, 0, 229, 0, 230, 0, 0, 724, 0,
	231, 689, 0, 376, 0, 0, 232, 233, 234, 235,
	685, 687, 726, 0, 379, 239, 0, 236, 0, 725,
	237, 704, 238, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 240, 241, 242, 728, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 690, 729, 248, 249, 730,
	0, 250, 251, 0, 0, 252, 0, 253, 731, 254,
	255, 257, 390, 256, 732, 258, 259, 261, 260, 627,
	0, 657, 686, 262, 710, 263, 264, 0, 265, 622,
	0, 266, 0, 0, 267, 393, 733, 268, 734, 680,
	269, 270, 271, 272, 273, 274, 0, 275, 681, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 711, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 735, 298, 299,
	634, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 674, 313, 301, 302, 314, 736,
	315, 712, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 713, 320, 321, 682, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 714,
	715, 0, 0, 333, 334, 683, 684, 655, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 675, 343,
	0, 409, 344, 345, 346, 410, 716, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 628,
	660, 649, 650, 647, 648, 639, 0, 626, 0, 0,
	0, 0, 624, 625, 0, 0, 189, 190, 0, 0,
	191, 635, 0, 0, 0, 677, 642, 638, 0, 0,
	192, 193, 194, 354, 692, 356, 693, 195, 694, 695,
	0, 196, 360, 361, 197, 198, 645, 676, 696, 697,
	364, 0, 199, 688, 0, 668, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 722, 210, 211, 212, 0, 669, 670, 672, 0,
	671, 673, 213, 214, 421, 215, 698, 216, 699, 700,
	630, 217, 0, 218, 0, 219, 0, 0, 691, 221,
	0, 222, 0, 0, 0, 633, 223, 225, 224, 226,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 227,
	228, 701, 702, 703, 0, 229, 0, 230, 0, 0,
	724, 0, 231, 689, 0, 376, 0, 0, 232, 233,
	234, 235, 685, 687, 726, 0, 379, 239, 0, 236,
	0, 725, 237, 704, 238, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 240, 241, 242, 728, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 690, 729, 248,
	249, 730, 0, 250, 251, 0, 0, 252, 0, 253,
	731, 254, 255, 257, 390, 256, 732, 258, 259, 261,
	260, 627, 0, 657, 686, 262, 710, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 733, 268,
	734, 680, 269, 270, 271, 272, 273, 274, 0, 275,
	681, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	711, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 735,
	298, 299, 634, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 674, 313, 301, 302,
	314, 736, 315, 712, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 713, 320, 321, 682, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 714, 715, 0, 0, 333, 334, 683, 684, 655,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	675, 343, 0, 409, 344, 345, 346, 410, 716, 2101,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 628, 660, 649, 650, 647, 648, 639, 0, 626,
	0, 0, 0, 0, 624, 625, 0, 0, 189, 190,
	0, 0, 191, 635, 0, 0, 0, 677, 642, 638,
	0, 0, 192, 193, 194, 354, 692, 356, 693, 195,
	694, 695, 0, 196, 360, 361, 197, 198, 645, 676,
	696, 697, 364, 0, 199, 688, 0, 668, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 722, 210, 211, 212, 0, 669, 670,
	672, 0, 671, 673, 213, 214, 421, 215, 698, 216,
	699, 700, 630, 217, 0, 218, 0, 219, 0, 0,
	691, 221, 0, 222, 0, 0, 0, 633, 223, 225,
	224, 226, 678, 679, 656, 723, 0, 0, 0, 0,
	0, 227, 228, 701, 702, 703, 0, 229, 0, 230,
	0, 0, 724, 0, 231, 689, 0, 376, 0, 0,
	232, 233, 234, 235, 685, 687, 726, 0, 379, 239,
	0, 236, 0, 725, 237, 704, 238, 705, 706, 707,
	708, 709, 0, 667, 0, 727, 240, 241, 242, 728,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 690,
	729, 248, 249, 730, 0, 250, 251, 0, 0, 252,
	0, 253, 731, 254, 255, 257, 390, 256, 732, 258,
	259, 261, 260, 627, 0, 657, 686, 262, 710, 263,
	264, 0, 265, 622, 0, 266, 0, 0, 267, 393,
	733, 268, 734, 680, 269, 270, 271, 272, 273, 274,
	0, 275, 681, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 711, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 735, 298, 299, 634, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 674, 313,
	301, 302, 314, 736, 315, 712, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 713, 320, 321, 682,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 714, 715, 0, 0, 333, 334, 683,
	684, 655, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 675, 343, 0, 409, 344, 345, 346, 410,
	716, 0, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 628, 660, 649, 650, 647, 648, 639,
	0, 626, 0, 0, 0, 0, 624, 625, 0, 0,
	189, 190, 0, 0, 191, 635, 0, 0, 0, 677,
	642, 638, 0, 0, 192, 193, 194, 354, 692, 356,
	693, 195, 694, 695, 0, 196, 360, 361, 197, 198,
	645, 676, 696, 697, 364, 0, 199, 688, 0, 668,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 722, 210, 211, 212, 0,
	669, 670, 672, 0, 671, 673, 213, 214, 421, 215,
	698, 216, 699, 700, 630, 217, 0, 218, 0, 219,
	0, 0, 691, 221, 0, 222, 0, 0, 0, 633,
	223, 225, 224, 226, 678, 679, 656, 723, 0, 0,
	0, 0, 0, 227, 228, 701, 702, 703, 0, 229,
	0, 230, 0, 0, 724, 0, 231, 689, 0, 376,
	0, 0, 232, 233, 234, 235, 685, 687, 726, 0,
	379, 239, 0, 236, 0, 725, 237, 704, 238, 705,
	706, 707, 708, 709, 0, 667, 0, 727, 240, 241,
	242, 728, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 690, 729, 248, 249, 730, 0, 250, 251, 0,
	0, 252, 0, 253, 731, 254, 255, 257, 390, 256,
	732, 258, 259, 261, 260, 627, 0, 657, 686, 262,
	710, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 733, 268, 734, 680, 269, 270, 271, 272,
	273, 274, 0, 275, 681, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 711, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 735, 298, 299, 634, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	674, 313, 301, 302, 314, 736, 315, 712, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 713, 320,
	321, 682, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 714, 715, 0, 0, 333,
	334, 683, 684, 655, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 675, 343, 0, 409, 344, 345,
	346, 410, 716, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 628, 660, 649, 650, 647,
	648, 639, 0, 626, 0, 0, 0, 0, 624, 625,
	1204, 0, 189, 190, 0, 0, 191, 635, 0, 0,
	0, 677, 642, 638, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 216, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 1614, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 233, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 628, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 0, 0, 0, 0, 0, 635,
	0, 0, 0, 0, 1660, 638, 660, 649, 650, 647,
	648, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 677, 642, 0, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 216, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 233, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 628, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 0, 0, 0, 0, 0, 635,
	0, 0, 0, 0, 1623, 638, 660, 649, 650, 647,
	648, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 677, 642, 0, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 216, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 233, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 628, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 0, 0, 0, 0, 0, 635,
	0, 0, 0, 0, 1621, 638, 660, 649, 650, 647,
	648, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 677, 642, 0, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 216, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 233, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 628, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 0, 0, 0, 0, 0, 635,
	0, 0, 0, 0, 1605, 638, 660, 649, 650, 647,
	648, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 677, 642, 0, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 216, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 233, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 628, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 0, 0, 0, 0, 0, 635,
	0, 0, 0, 0, 1593, 638, 660, 649, 650, 647,
	648, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 677, 642, 0, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 216, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 233, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 628, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 0, 0, 0, 0, 0, 635,
	0, 0, 0, 0, 1591, 638, 1583, 649, 650, 647,
	648, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 677, 642, 0, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 1586, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 1587, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 1588, 1585, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 1589, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 1584, 352, 628, 0, 0,
	0, 0, 0, 0, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 0, 0, 0, 0, 0, 635,
	0, 0, 0, 0, 1580, 638, 1583, 649, 650, 647,
	648, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 677, 642, 0, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 1586, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 1587, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 1588, 1585, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 1589, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 1584, 352, 628, 660, 649,
	650, 647, 648, 639, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 189, 190, 0, 0, 191, 635,
	0, 0, 0, 677, 642, 638, 0, 0, 192, 193,
	194, 354, 692, 356, 693, 195, 694, 695, 0, 196,
	360, 361, 197, 198, 645, 676, 696, 697, 364, 0,
	199, 688, 0, 668, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 722,
	210, 211, 212, 0, 669, 670, 672, 0, 671, 673,
	213, 214, 421, 215, 698, 216, 699, 700, 630, 217,
	0, 218, 0, 219, 0, 0, 691, 221, 0, 222,
	0, 0, 0, 633, 223, 225, 224, 226, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 227, 228, 701,
	702, 703, 0, 229, 0, 230, 0, 0, 724, 0,
	231, 689, 0, 376, 0, 0, 232, 233, 234, 235,
	685, 687, 726, 0, 379, 239, 0, 236, 0, 725,
	237, 704, 238, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 240, 241, 242, 728, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 690, 729, 248, 249, 730,
	0, 250, 251, 0, 0, 252, 0, 253, 731, 254,
	255, 257, 390, 256, 732, 258, 259, 261, 260, 627,
	0, 657, 686, 262, 710, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 733, 268, 734, 680,
	269, 270, 271, 272, 273, 274, 0, 275, 681, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 711, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 735, 298, 299,
	634, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 674, 313, 301, 302, 314, 736,
	315, 712, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 713, 320, 321, 682, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 714,
	715, 0, 0, 333, 334, 683, 684, 655, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 675, 343,
	0, 409, 344, 345, 346, 410, 716, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 628,
	660, 649, 650, 647, 648, 639, 0, 626, 0, 0,
	0, 0, 624, 625, 0, 0, 189, 190, 1446, 1147,
	191, 635, 0, 0, 0, 677, 642, 638, 0, 0,
	192, 193, 194, 354, 692, 356, 693, 195, 694, 695,
	0, 196, 360, 361, 197, 198, 645, 676, 696, 697,
	364, 0, 199, 688, 0, 668, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 722, 210, 211, 212, 0, 669, 670, 672, 0,
	671, 673, 213, 214, 421, 215, 698, 216, 699, 700,
	630, 217, 0, 218, 0, 219, 0, 0, 691, 221,
	0, 222, 0, 0, 0, 633, 223, 225, 224, 226,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 227,
	228, 701, 702, 703, 0, 229, 0, 230, 0, 0,
	724, 0, 231, 689, 0, 376, 0, 0, 232, 233,
	234, 235, 685, 687, 726, 0, 379, 239, 0, 236,
	0, 725, 237, 704, 238, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 240, 241, 242, 728, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 690, 729, 248,
	249, 730, 0, 250, 251, 0, 0, 252, 0, 253,
	731, 254, 255, 257, 390, 256, 732, 258, 259, 261,
	260, 627, 0, 657, 686, 262, 710, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 733, 268,
	734, 680, 269, 270, 271, 272, 273, 274, 0, 275,
	681, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	711, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 735,
	298, 299, 634, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 674, 313, 301, 302,
	314, 736, 315, 712, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 713, 320, 321, 682, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 714, 715, 0, 0, 333, 334, 683, 684, 655,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	675, 343, 0, 409, 344, 345, 346, 410, 716, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 628, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 0, 0, 624, 625, 0, 0, 0, 0,
	0, 0, 0, 635, 0, 0, 0, 0, 901, 638,
	660, 649, 650, 647, 648, 639, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 677, 642, 0, 0, 0,
	192, 193, 194, 354, 692, 356, 693, 195, 694, 695,
	0, 196, 360, 361, 197, 198, 645, 676, 696, 697,
	364, 0, 199, 688, 0, 668, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 722, 210, 211, 212, 0, 669, 670, 672, 0,
	671, 673, 213, 214, 421, 215, 698, 216, 699, 700,
	630, 217, 0, 218, 0, 219, 0, 0, 691, 221,
	0, 222, 0, 0, 0, 633, 223, 225, 224, 226,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 227,
	228, 701, 702, 703, 0, 229, 0, 230, 0, 0,
	724, 0, 231, 689, 0, 376, 0, 0, 232, 233,
	234, 235, 685, 687, 726, 0, 379, 239, 0, 236,
	0, 725, 237, 704, 238, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 240, 241, 242, 728, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 690, 729, 248,
	249, 730, 0, 250, 251, 0, 0, 252, 0, 253,
	731, 254, 255, 257, 390, 256, 732, 258, 259, 261,
	260, 627, 0, 657, 686, 262, 710, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 733, 268,
	734, 680, 269, 270, 271, 272, 273, 274, 0, 275,
	681, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	711, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 735,
	298, 299, 634, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 674, 313, 301, 302,
	314, 736, 315, 712, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 713, 320, 321, 682, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 714, 715, 0, 0, 333, 334, 683, 684, 655,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	675, 343, 0, 409, 344, 345, 346, 410, 716, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 628, 0, 0, 0, 0, 0, 0, 0, 626,
	0, 0, 0, 0, 624, 625, 0, 0, 0, 0,
	0, 0, 0, 635, 0, 0, 0, 0, 899, 638,
	660, 649, 650, 647, 648, 639, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 677, 642, 0, 0, 0,
	192, 193, 194, 354, 692, 356, 693, 195, 694, 695,
	0, 196, 360, 361, 197, 198, 645, 676, 696, 697,
	364, 0, 199, 688, 0, 668, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 722, 210, 211, 212, 0, 669, 670, 672, 0,
	671, 673, 213, 214, 421, 215, 698, 216, 699, 700,
	630, 217, 0, 218, 0, 219, 0, 0, 691, 221,
	0, 222, 0, 0, 0, 633, 223, 225, 224, 226,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 227,
	228, 701, 702, 703, 0, 229, 0, 230, 0, 0,
	724, 0, 231, 689, 0, 376, 0, 0, 232, 233,
	234, 235, 685, 687, 726, 0, 379, 239, 0, 236,
	0, 725, 237, 704, 238, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 240, 241, 242, 728, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 690, 729, 248,
	249, 730, 0, 250, 251, 0, 0, 252, 0, 253,
	731, 254, 255, 257, 390, 256, 732, 258, 259, 261,
	260, 627, 0, 657, 686, 262, 710, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 733, 268,
	734, 680, 269, 270, 271, 272, 273, 274, 0, 275,
	681, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	711, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 735,
	298, 299, 634, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 674, 313, 301, 302,
	314, 736, 315, 712, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 713, 320, 321, 682, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 714, 715, 0, 0, 333, 334, 683, 684, 655,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	675, 343, 0, 409, 344, 345, 346, 410, 716, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 628, 660, 649, 650, 647, 648, 639, 0, 626,
	0, 0, 0, 0, 624, 625, 0, 0, 189, 190,
	0, 0, 191, 635, 0, 0, 0, 677, 642, 638,
	0, 0, 192, 193, 194, 354, 692, 356, 693, 195,
	694, 695, 0, 196, 360, 361, 197, 198, 645, 676,
	696, 697, 364, 0, 199, 688, 0, 668, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 722, 210, 211, 212, 0, 669, 670,
	672, 0, 671, 673, 213, 214, 421, 215, 698, 216,
	699, 700, 630, 217, 0, 218, 0, 219, 0, 0,
	691, 221, 0, 222, 0, 0, 0, 633, 223, 225,
	224, 226, 678, 679, 656, 723, 0, 0, 0, 0,
	0, 227, 228, 701, 702, 703, 0, 229, 0, 230,
	0, 0, 724, 0, 231, 689, 0, 376, 0, 0,
	232, 233, 234, 235, 685, 687, 726, 0, 379, 239,
	0, 236, 0, 725, 237, 704, 238, 705, 706, 707,
	708, 709, 0, 667, 0, 727, 240, 241, 242, 728,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 690,
	729, 248, 249, 730, 0, 250, 251, 0, 0, 252,
	0, 253, 2667, 254, 255, 257, 390, 256, 732, 258,
	259, 261, 260, 627, 0, 657, 686, 262, 710, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	733, 268, 734, 680, 269, 270, 271, 272, 273, 274,
	0, 275, 681, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 711, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 735, 298, 299, 634, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 674, 313,
	301, 302, 314, 736, 315, 712, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 713, 320, 321, 682,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 714, 715, 0, 0, 333, 334, 683,
	684, 655, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 675, 343, 0, 409, 344, 345, 346, 410,
	716, 0, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 628, 660, 649, 650, 647, 648, 639,
	0, 626, 0, 0, 0, 0, 624, 625, 0, 0,
	189, 190, 0, 0, 191, 635, 0, 0, 0, 677,
	642, 638, 0, 0, 192, 193, 194, 354, 692, 356,
	693, 195, 694, 695, 0, 196, 360, 361, 197, 198,
	645, 676, 696, 697, 364, 0, 199, 688, 0, 668,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 722, 210, 211, 2586, 0,
	669, 670, 672, 0, 671, 673, 213, 214, 421, 215,
	698, 216, 699, 700, 630, 217, 0, 218, 0, 219,
	0, 0, 691, 221, 0, 222, 0, 0, 0, 633,
	223, 225, 224, 226, 678, 679, 656, 723, 0, 0,
	0, 0, 0, 227, 228, 701, 702, 703, 0, 229,
	0, 230, 0, 0, 724, 0, 231, 689, 0, 376,
	0, 0, 232, 233, 234, 235, 685, 687, 726, 0,
	379, 239, 0, 236, 0, 725, 237, 704, 238, 705,
	706, 707, 708, 709, 0, 667, 0, 727, 240, 241,
	242, 728, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 690, 729, 248, 249, 730, 0, 250, 251, 0,
	0, 252, 0, 253, 731, 254, 255, 257, 390, 256,
	732, 258, 259, 261, 260, 627, 0, 657, 686, 262,
	710, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 733, 268, 734, 680, 269, 270, 271, 272,
	273, 274, 0, 275, 681, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 711, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 735, 298, 299, 634, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	674, 313, 301, 302, 314, 736, 315, 712, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 713, 320,
	321, 682, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 714, 715, 0, 0, 333,
	334, 683, 684, 655, 335, 336, 2585, 338, 0, 0,
	339, 340, 341, 342, 675, 343, 0, 409, 344, 345,
	346, 410, 716, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 628, 660, 649, 650, 647,
	648, 639, 0, 626, 0, 0, 0, 0, 624, 625,
	0, 0, 189, 190, 0, 0, 191, 635, 0, 0,
	0, 677, 642, 638, 0, 0, 192, 193, 194, 354,
	692, 356, 693, 195, 694, 695, 0, 196, 360, 361,
	197, 198, 645, 676, 696, 697, 364, 0, 199, 688,
	0, 668, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 669, 670, 672, 0, 671, 673, 213, 214,
	421, 215, 698, 216, 699, 700, 630, 217, 0, 218,
	0, 219, 0, 0, 691, 221, 0, 222, 0, 0,
	0, 633, 223, 225, 224, 226, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 227, 228, 701, 702, 703,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 689,
	0, 376, 0, 0, 232, 233, 234, 235, 685, 687,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 704,
	238, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 690, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 627, 0, 657,
	686, 262, 710, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 680, 269, 270,
	271, 272, 273, 274, 0, 275, 681, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 711, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 634, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 674, 313, 301, 302, 314, 736, 315, 712,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	713, 320, 321, 682, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 714, 715, 0,
	0, 333, 334, 683, 684, 655, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 675, 343, 0, 409,
	344, 345, 346, 410, 716, 0, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 628, 660, 649,
	650, 647, 648, 639, 0, 626, 0, 0, 0, 0,
	624, 625, 0, 0, 189, 190, 0, 0, 191, 635,
	0, 0, 0, 677, 642, 638, 0, 0, 192, 193,
	194, 2584, 692, 356, 693, 195, 694, 695, 0, 196,
	360, 361, 197, 198, 645, 676, 696, 697, 364, 0,
	199, 688, 0, 668, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 722,
	210, 211, 2586, 0, 669, 670, 672, 0, 671, 673,
	213, 214, 421, 215, 698, 216, 699, 700, 630, 217,
	0, 218, 0, 219, 0, 0, 691, 221, 0, 222,
	0, 0, 0, 633, 223, 225, 224, 226, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 227, 228, 701,
	702, 703, 0, 229, 0, 230, 0, 0, 724, 0,
	231, 689, 0, 376, 0, 0, 232, 233, 234, 235,
	685, 687, 726, 0, 379, 239, 0, 236, 0, 725,
	237, 704, 238, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 240, 241, 242, 728, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 690, 729, 248, 249, 730,
	0, 250, 251, 0, 0, 252, 0, 253, 731, 254,
	255, 257, 390, 256, 732, 258, 259, 261, 260, 627,
	0, 657, 686, 262, 710, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 733, 268, 734, 680,
	269, 270, 271, 272, 273, 274, 0, 275, 681, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 711, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 735, 298, 299,
	634, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 674, 313, 301, 302, 314, 736,
	315, 712, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 713, 320, 321, 682, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 714,
	715, 0, 0, 333, 334, 683, 684, 655, 335, 336,
	2585, 338, 0, 0, 339, 340, 341, 342, 675, 343,
	0, 409, 344, 345, 346, 410, 716, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 628,
	660, 649, 650, 647, 648, 639, 0, 626, 0, 0,
	0, 0, 624, 625, 0, 0, 189, 190, 0, 0,
	191, 635, 0, 0, 0, 677, 642, 638, 0, 0,
	192, 193, 194, 354, 692, 356, 693, 195, 694, 695,
	0, 196, 360, 361, 197, 198, 645, 676, 696, 697,
	364, 0, 199, 688, 0, 668, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 722, 210, 211, 212, 0, 669, 670, 672, 0,
	671, 673, 213, 214, 421, 215, 698, 216, 699, 700,
	0, 217, 0, 218, 0, 219, 0, 0, 691, 221,
	0, 222, 0, 0, 0, 633, 223, 225, 224, 226,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 227,
	228, 701, 702, 703, 0, 229, 0, 230, 0, 0,
	724, 0, 231, 689, 0, 376, 0, 0, 232, 233,
	234, 235, 685, 687, 726, 0, 379, 239, 0, 236,
	0, 725, 237, 704, 238, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 240, 241, 242, 728, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 690, 729, 248,
	249, 730, 0, 250, 251, 0, 0, 252, 0, 253,
	731, 254, 255, 257, 390, 256, 732, 258, 259, 261,
	260, 0, 0, 657, 686, 262, 710, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 733, 268,
	734, 680, 269, 270, 271, 272, 273, 274, 0, 275,
	681, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	711, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 735,
	298, 299, 1603, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 674, 313, 301, 302,
	314, 736, 315, 712, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 713, 320, 321, 682, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 714, 715, 0, 0, 333, 334, 683, 684, 655,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	675, 343, 0, 409, 344, 345, 346, 410, 716, 0,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 660, 649, 650, 647, 648, 639, 0, 0, 1601,
	0, 0, 0, 0, 1599, 1600, 0, 189, 190, 0,
	0, 191, 0, 1602, 0, 0, 677, 642, 0, 638,
	0, 192, 193, 194, 0, 692, 356, 693, 195, 694,
	695, 0, 196, 360, 361, 197, 198, 645, 676, 696,
	697, 364, 0, 199, 688, 0, 668, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 2586, 0, 669, 670, 672,
	0, 671, 673, 213, 214, 421, 215, 698, 216, 699,
	700, 630, 217, 0, 218, 0, 219, 0, 0, 691,
	221, 0, 222, 0, 0, 0, 633, 223, 225, 224,
	226, 678, 679, 656, 723, 0, 0, 0, 0, 0,
	227, 228, 701, 702, 703, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 689, 0, 376, 0, 0, 232,
	233, 234, 235, 685, 687, 0, 0, 379, 239, 0,
	236, 0, 725, 237, 704, 238, 705, 706, 707, 708,
	709, 0, 667, 0, 0, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 690, 729,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 627, 0, 657, 686, 262, 710, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 680, 269, 270, 271, 272, 273, 274, 0,
	275, 681, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 711, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 634, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 674, 313, 301,
	302, 314, 0, 315, 712, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 713, 320, 321, 682, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 714, 715, 0, 0, 333, 334, 683, 684,
	655, 335, 336, 2585, 338, 0, 0, 339, 340, 341,
	342, 675, 343, 0, 409, 344, 345, 346, 410, 716,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 624, 625, 0, 189, 190,
	0, 0, 191, 0, 635, 0, 0, 677, 0, 0,
	638, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 676,
	362, 363, 364, 0, 199, 688, 0, 668, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 722, 210, 211, 212, 0, 669, 670,
	672, 0, 671, 673, 213, 214, 421, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 678, 679, 0, 723, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 724, 0, 231, 689, 0, 376, 0, 0,
	232, 233, 234, 235, 685, 687, 726, 0, 379, 239,
	0, 236, 0, 725, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 727, 240, 241, 242, 728,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 690,
	729, 248, 249, 730, 0, 250, 251, 0, 0, 252,
	0, 253, 731, 254, 255, 257, 390, 256, 732, 258,
	259, 261, 260, 0, 0, 0, 686, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	733, 268, 734, 680, 269, 270, 271, 272, 273, 274,
	0, 275, 681, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 735, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 674, 313,
	301, 302, 314, 736, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 682,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 683,
	684, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 675, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 0, 347, 957, 0, 792, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 2200, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 796, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 722, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	421, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 723,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 724, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	726, 0, 379, 239, 0, 236, 0, 725, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 727,
	240, 241, 242, 728, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 729, 248, 249, 730, 0, 250,
	251, 0, 0, 252, 0, 253, 731, 254, 255, 257,
	390, 256, 732, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 733, 268, 734, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 735, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 147, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 736, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 149, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 960, 411, 0, 0, 347, 612, 0,
	186, 141, 348, 349, 350, 351, 352, 0, 142, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 118,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 421, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 377, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 775, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	147, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	149, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 960, 411, 0,
	0, 347, 0, 0, 186, 141, 348, 349, 350, 351,
	352, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 769, 0, 1226, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 421, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 775, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 147, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 149, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 960, 411, 0, 0, 347, 612, 0, 186, 141,
	348, 349, 350, 351, 352, 0, 142, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 769, 0, 1226, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 421, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	377, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 147, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 149, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 960, 411, 0, 0, 347,
	1940, 0, 186, 141, 348, 349, 350, 351, 352, 0,
	142, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 118, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 421, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 775, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 0, 347, 768, 0, 186, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 769, 0, 774, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	421, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 775, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 0, 347, 0, 0,
	186, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 769, 0, 774,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 421, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 377, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 775, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	0, 347, 0, 0, 186, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 769, 0, 774, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 421, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 0, 347, 0, 0, 0, 186,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 1271, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 421, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 377, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 256, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 0,
	347, 0, 0, 186, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 1753, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 421, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 0, 347, 0, 0, 186, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 2116, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 421, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 660, 649,
	650, 647, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	1229, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 692, 356, 693, 195, 694, 695, 0, 196,
	360, 361, 197, 198, 0, 0, 696, 697, 364, 0,
	199, 365, 0, 796, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 722,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 421, 215, 698, 216, 699, 700, 0, 217,
	0, 218, 0, 219, 0, 0, 691, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	656, 723, 0, 0, 0, 0, 0, 227, 228, 701,
	702, 703, 0, 229, 0, 230, 0, 0, 724, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	377, 378, 726, 0, 379, 239, 0, 236, 0, 725,
	237, 704, 238, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 240, 241, 242, 728, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 729, 248, 249, 730,
	0, 250, 251, 0, 0, 252, 0, 253, 731, 254,
	255, 257, 390, 256, 732, 258, 259, 261, 260, 0,
	0, 657, 391, 262, 710, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 733, 268, 734, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 711, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 735, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 736,
	315, 712, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 713, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 714,
	715, 0, 0, 333, 334, 407, 408, 655, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 716, 0, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 1013,
	0, 792, 791, 0, 0, 0, 789, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 796, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 421, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 723, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 377, 378, 726, 0, 379, 239, 0,
	236, 0, 725, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 729,
	248, 249, 730, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 736, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 952, 0, 792, 791, 0, 0, 0, 789,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 796,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 722, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 421, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 723, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 724, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 951, 378, 726, 0,
	379, 239, 0, 236, 0, 725, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 727, 240, 241,
	242, 728, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 729, 248, 249, 730, 0, 250, 251, 0,
	0, 252, 0, 253, 731, 254, 255, 257, 390, 256,
	732, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 733, 268, 734, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 735, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 736, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 918, 0, 792, 791, 0,
	0, 0, 789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 796, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 722, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 421, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	723, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 724, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 917,
	378, 726, 0, 379, 239, 0, 236, 0, 725, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	727, 240, 241, 242, 728, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 729, 248, 249, 730, 0,
	250, 251, 0, 0, 252, 0, 253, 731, 254, 255,
	257, 390, 256, 732, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 733, 268, 734, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 735, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 736, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 785, 0,
	792, 791, 0, 0, 0, 789, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 796, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 722, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 421, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 723, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	724, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 787, 378, 726, 0, 379, 239, 0, 236,
	0, 725, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 727, 240, 241, 242, 728, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 729, 248,
	249, 730, 0, 250, 251, 0, 0, 252, 0, 253,
	731, 254, 255, 257, 390, 256, 732, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 733, 268,
	734, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 735,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 736, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	504, 347, 186, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 182, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 181, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 179, 347, 186, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 185, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 182, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 181, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 792, 791, 347, 0, 0, 789, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	185, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 796, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 722, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 421, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 723, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 724, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 726, 0, 379,
	239, 0, 236, 0, 725, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 727, 240, 241, 242,
	728, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 729, 248, 249, 730, 0, 250, 251, 0, 0,
	252, 0, 253, 731, 254, 255, 257, 390, 256, 732,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 733, 268, 734, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 735, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 736, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 186, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 182, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 181, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 792, 791, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 185, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 796, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 722, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 421, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 723, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 724, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 377, 378, 726, 0, 379, 239, 0,
	236, 0, 725, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 727, 240, 241, 242, 728, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 729,
	248, 249, 730, 0, 250, 251, 0, 0, 252, 0,
	253, 731, 254, 255, 257, 390, 256, 732, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 733,
	268, 734, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	735, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 736, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	186, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 421, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 377, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 792,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 185, 0, 0, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 796, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	722, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 421, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 723, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 724,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 377, 378, 726, 0, 379, 239, 0, 236, 0,
	725, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 727, 240, 241, 242, 728, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 729, 248, 249,
	730, 0, 250, 251, 0, 0, 252, 0, 253, 731,
	254, 255, 257, 390, 256, 732, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 733, 268, 734,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 735, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	736, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 186, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 1680,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 1678, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 421, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 1729, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 1683, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	377, 378, 0, 0, 379, 239, 1727, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 1682, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 1728, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 186, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 1680, 199,
	365, 0, 0, 1675, 200, 201, 202, 0, 204, 205,
	206, 203, 1678, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 421, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 1683, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 1674,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 1682, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 1681, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 934, 347, 186,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 421, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 377, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 256, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 775, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 781,
	347, 186, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 421, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 783, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 775, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 777, 347, 186, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 421, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 779, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 775, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 433, 347, 186, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 432, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 421,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 431, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 186, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 1663, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 421, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 186, 2277, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 421, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 186, 2277, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 421, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 2274, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 186, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 421, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 377, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 775, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 1429, 347, 186, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 421, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 1427, 347, 186, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 421,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 186, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	189, 190, 1409, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 421, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 530, 347, 186, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 992, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	421, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 532, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 527, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 1286, 347, 186, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 421, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	1285, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 1266, 347,
	186, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 421, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 377, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	1264, 347, 186, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 421, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 530, 347, 186, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 992, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 421, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 377, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 532,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 527, 405, 406, 0, 0, 333,
	993, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 0, 530, 347, 186, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 521, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	421, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 532, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 283, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	976, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 527, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 0, 949, 347, 186, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 421, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	948, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 304, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 0, 945, 347,
	186, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 421, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 944, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 0,
	942, 347, 186, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 421, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 941, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 0, 938, 347, 186, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 353,
	0, 0, 0, 0, 192, 193, 194, 354, 355, 356,
	357, 195, 358, 359, 0, 196, 360, 361, 197, 198,
	0, 0, 362, 363, 364, 0, 199, 365, 0, 0,
	0, 200, 201, 202, 0, 204, 205, 206, 203, 0,
	207, 0, 208, 209, 0, 0, 210, 211, 212, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 421, 215,
	366, 216, 367, 368, 0, 217, 0, 218, 0, 219,
	0, 0, 220, 221, 0, 222, 0, 0, 0, 369,
	223, 225, 224, 226, 370, 371, 0, 0, 0, 0,
	0, 0, 0, 227, 228, 372, 373, 374, 0, 229,
	0, 230, 0, 0, 0, 0, 231, 375, 0, 376,
	0, 0, 232, 233, 234, 235, 937, 378, 0, 0,
	379, 239, 0, 236, 0, 0, 237, 380, 238, 381,
	382, 383, 384, 385, 0, 386, 0, 0, 240, 241,
	242, 0, 387, 388, 243, 244, 245, 0, 247, 246,
	0, 389, 0, 248, 249, 0, 0, 250, 251, 0,
	0, 252, 0, 253, 0, 254, 255, 257, 390, 256,
	0, 258, 259, 261, 260, 0, 0, 0, 391, 262,
	392, 263, 264, 0, 265, 0, 0, 266, 0, 0,
	267, 393, 0, 268, 0, 394, 269, 270, 271, 272,
	273, 274, 0, 275, 395, 276, 396, 277, 0, 278,
	279, 280, 281, 282, 397, 283, 284, 0, 285, 286,
	287, 288, 289, 0, 291, 292, 290, 293, 294, 295,
	296, 0, 297, 0, 298, 299, 398, 300, 0, 304,
	305, 306, 307, 308, 0, 310, 399, 309, 311, 312,
	0, 313, 301, 302, 314, 0, 315, 400, 401, 316,
	0, 0, 323, 317, 318, 303, 319, 322, 402, 320,
	321, 403, 0, 324, 0, 325, 326, 327, 328, 329,
	330, 331, 332, 0, 404, 405, 406, 0, 0, 333,
	334, 407, 408, 0, 335, 336, 337, 338, 0, 0,
	339, 340, 341, 342, 0, 343, 0, 409, 344, 345,
	346, 410, 411, 186, 0, 347, 0, 0, 0, 0,
	348, 349, 350, 351, 352, 0, 0, 0, 0, 189,
	190, 926, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 421, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 924, 347, 186, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 421,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 923, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 920, 347, 186, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 421, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 913, 347, 186,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 421, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 915, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 256, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 799,
	347, 186, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 421, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 801, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 797, 347, 186, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 421, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 0, 530, 347, 186, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 521, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 421,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 520,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	532, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 271,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 281, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 522, 300, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 523,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 527, 405, 406, 0, 0,
	333, 525, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 512, 347, 186, 0, 0,
	0, 348, 349, 350, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 0, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 421, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 513, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 313, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 0, 510, 347, 186,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 421, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 377, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 256, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 0, 502,
	347, 186, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 421, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 377, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	0, 452, 347, 186, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 192, 193, 194, 354, 355, 356, 357,
	195, 358, 359, 0, 196, 360, 361, 197, 198, 0,
	0, 362, 363, 364, 0, 199, 365, 0, 0, 0,
	200, 201, 202, 0, 204, 205, 206, 203, 0, 207,
	0, 208, 209, 0, 0, 210, 211, 212, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 421, 215, 366,
	216, 367, 368, 0, 217, 0, 218, 0, 219, 0,
	0, 220, 221, 0, 222, 0, 0, 0, 369, 223,
	225, 224, 226, 370, 371, 0, 0, 0, 0, 0,
	0, 0, 227, 228, 372, 373, 374, 0, 229, 0,
	230, 0, 0, 0, 0, 231, 375, 0, 376, 0,
	0, 232, 233, 234, 235, 377, 378, 0, 0, 379,
	239, 0, 236, 0, 0, 237, 380, 238, 381, 382,
	383, 384, 385, 0, 386, 0, 0, 240, 241, 242,
	0, 387, 388, 243, 244, 245, 0, 247, 246, 0,
	389, 0, 248, 249, 0, 0, 250, 251, 0, 0,
	252, 0, 253, 0, 254, 255, 257, 390, 256, 0,
	258, 259, 261, 260, 0, 0, 0, 391, 262, 392,
	263, 264, 0, 265, 0, 0, 266, 0, 0, 267,
	393, 0, 268, 0, 394, 269, 270, 271, 272, 273,
	274, 0, 275, 395, 276, 396, 277, 0, 278, 279,
	280, 281, 282, 397, 283, 284, 0, 285, 286, 287,
	288, 289, 0, 291, 292, 290, 293, 294, 295, 296,
	0, 297, 0, 298, 299, 398, 300, 0, 304, 305,
	306, 307, 308, 0, 310, 399, 309, 311, 312, 0,
	313, 301, 302, 314, 0, 315, 400, 401, 316, 0,
	0, 323, 317, 318, 303, 319, 322, 402, 320, 321,
	403, 0, 324, 0, 325, 326, 327, 328, 329, 330,
	331, 332, 0, 404, 405, 406, 0, 0, 333, 334,
	407, 408, 0, 335, 336, 337, 338, 0, 0, 339,
	340, 341, 342, 0, 343, 0, 409, 344, 345, 346,
	410, 411, 186, 0, 347, 0, 0, 0, 0, 348,
	349, 350, 351, 352, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 353, 0, 0,
	0, 0, 192, 193, 194, 354, 355, 356, 357, 195,
	358, 359, 0, 196, 360, 361, 197, 198, 0, 0,
	362, 363, 364, 0, 199, 365, 0, 0, 0, 200,
	201, 202, 0, 204, 205, 206, 203, 0, 207, 0,
	208, 209, 0, 0, 210, 211, 212, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 421, 215, 366, 216,
	367, 368, 0, 217, 0, 218, 0, 219, 0, 0,
	220, 221, 0, 222, 0, 0, 0, 369, 223, 225,
	224, 226, 370, 371, 0, 0, 0, 0, 0, 0,
	0, 227, 228, 372, 373, 374, 0, 229, 0, 230,
	0, 0, 0, 0, 231, 375, 0, 376, 0, 0,
	232, 233, 234, 235, 377, 378, 0, 0, 379, 239,
	0, 236, 0, 0, 237, 380, 238, 381, 382, 383,
	384, 385, 0, 386, 0, 0, 240, 241, 242, 0,
	387, 388, 243, 244, 245, 0, 247, 246, 0, 389,
	0, 248, 249, 0, 0, 250, 251, 0, 0, 252,
	0, 253, 0, 254, 255, 257, 390, 256, 0, 258,
	259, 261, 260, 0, 0, 0, 391, 262, 392, 263,
	264, 0, 265, 0, 0, 266, 0, 0, 267, 393,
	0, 268, 0, 394, 269, 270, 271, 272, 273, 274,
	0, 275, 395, 276, 396, 277, 0, 278, 279, 280,
	281, 282, 397, 283, 284, 0, 285, 286, 287, 288,
	289, 0, 291, 292, 290, 293, 294, 295, 296, 0,
	297, 0, 298, 299, 398, 300, 0, 304, 305, 306,
	307, 308, 0, 310, 399, 309, 311, 312, 0, 313,
	301, 302, 314, 0, 315, 400, 401, 316, 0, 0,
	323, 317, 318, 303, 319, 322, 402, 320, 321, 403,
	0, 324, 0, 325, 326, 327, 328, 329, 330, 331,
	332, 0, 404, 405, 406, 0, 0, 333, 334, 407,
	408, 0, 335, 336, 337, 338, 0, 0, 339, 340,
	341, 342, 0, 343, 0, 409, 344, 345, 346, 410,
	411, 186, 0, 347, 0, 0, 0, 0, 348, 349,
	350, 351, 352, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 353, 0, 0, 0,
	0, 192, 193, 194, 354, 355, 356, 357, 195, 358,
	359, 0, 196, 360, 361, 197, 198, 0, 0, 362,
	363, 364, 0, 199, 365, 0, 0, 0, 200, 201,
	202, 0, 204, 205, 206, 203, 0, 207, 0, 208,
	209, 0, 0, 210, 211, 212, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 421, 215, 366, 216, 367,
	368, 0, 217, 0, 218, 0, 219, 0, 0, 220,
	221, 0, 222, 0, 0, 0, 369, 223, 225, 224,
	226, 370, 371, 0, 0, 0, 0, 0, 0, 0,
	227, 228, 372, 373, 374, 0, 229, 0, 230, 0,
	0, 0, 0, 231, 375, 0, 376, 0, 0, 232,
	233, 234, 235, 1987, 378, 0, 0, 379, 239, 0,
	236, 0, 0, 237, 380, 238, 381, 382, 383, 384,
	385, 0, 386, 0, 0, 240, 241, 242, 0, 387,
	388, 243, 244, 245, 0, 247, 246, 0, 389, 0,
	248, 249, 0, 0, 250, 251, 0, 0, 252, 0,
	253, 0, 254, 255, 257, 390, 256, 0, 258, 259,
	261, 260, 0, 0, 0, 391, 262, 392, 263, 264,
	0, 265, 0, 0, 266, 0, 0, 267, 393, 0,
	268, 0, 394, 269, 270, 271, 272, 273, 274, 0,
	275, 395, 276, 396, 277, 0, 278, 279, 280, 281,
	282, 397, 283, 284, 0, 285, 286, 287, 288, 289,
	0, 291, 292, 290, 293, 294, 295, 296, 0, 297,
	0, 298, 299, 398, 300, 0, 304, 305, 306, 307,
	308, 0, 310, 399, 309, 311, 312, 0, 313, 301,
	302, 314, 0, 315, 400, 401, 316, 0, 0, 323,
	317, 318, 303, 319, 322, 402, 320, 321, 403, 0,
	324, 0, 325, 326, 327, 328, 329, 330, 331, 332,
	0, 404, 405, 406, 0, 0, 333, 334, 407, 408,
	0, 335, 336, 337, 338, 0, 0, 339, 340, 341,
	342, 0, 343, 0, 409, 344, 345, 346, 410, 411,
	186, 0, 347, 0, 0, 0, 0, 348, 349, 350,
	351, 352, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 353, 0, 0, 0, 0,
	192, 193, 194, 354, 355, 356, 357, 195, 358, 359,
	0, 196, 360, 361, 197, 198, 0, 0, 362, 363,
	364, 0, 199, 365, 0, 0, 0, 200, 201, 202,
	0, 204, 205, 206, 203, 0, 207, 0, 208, 209,
	0, 0, 210, 211, 212, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 421, 215, 366, 216, 367, 368,
	0, 217, 0, 218, 0, 219, 0, 0, 220, 221,
	0, 222, 0, 0, 0, 369, 223, 225, 224, 226,
	370, 371, 0, 0, 0, 0, 0, 0, 0, 227,
	228, 372, 373, 374, 0, 229, 0, 230, 0, 0,
	0, 0, 231, 375, 0, 376, 0, 0, 232, 233,
	234, 235, 1985, 378, 0, 0, 379, 239, 0, 236,
	0, 0, 237, 380, 238, 381, 382, 383, 384, 385,
	0, 386, 0, 0, 240, 241, 242, 0, 387, 388,
	243, 244, 245, 0, 247, 246, 0, 389, 0, 248,
	249, 0, 0, 250, 251, 0, 0, 252, 0, 253,
	0, 254, 255, 257, 390, 256, 0, 258, 259, 261,
	260, 0, 0, 0, 391, 262, 392, 263, 264, 0,
	265, 0, 0, 266, 0, 0, 267, 393, 0, 268,
	0, 394, 269, 270, 271, 272, 273, 274, 0, 275,
	395, 276, 396, 277, 0, 278, 279, 280, 281, 282,
	397, 283, 284, 0, 285, 286, 287, 288, 289, 0,
	291, 292, 290, 293, 294, 295, 296, 0, 297, 0,
	298, 299, 398, 300, 0, 304, 305, 306, 307, 308,
	0, 310, 399, 309, 311, 312, 0, 313, 301, 302,
	314, 0, 315, 400, 401, 316, 0, 0, 323, 317,
	318, 303, 319, 322, 402, 320, 321, 403, 0, 324,
	0, 325, 326, 327, 328, 329, 330, 331, 332, 0,
	404, 405, 406, 0, 0, 333, 334, 407, 408, 0,
	335, 336, 337, 338, 0, 0, 339, 340, 341, 342,
	0, 343, 0, 409, 344, 345, 346, 410, 411, 186,
	0, 347, 0, 0, 0, 0, 348, 349, 350, 351,
	352, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 353, 0, 0, 0, 0, 192,
	193, 194, 354, 355, 356, 357, 195, 358, 359, 0,
	196, 360, 361, 197, 198, 0, 0, 362, 363, 364,
	0, 199, 365, 0, 0, 0, 200, 201, 202, 0,
	204, 205, 206, 203, 0, 207, 0, 208, 209, 0,
	0, 210, 211, 212, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 421, 215, 366, 216, 367, 368, 0,
	217, 0, 218, 0, 219, 0, 0, 220, 221, 0,
	222, 0, 0, 0, 369, 223, 225, 224, 226, 370,
	371, 0, 0, 0, 0, 0, 0, 0, 227, 228,
	372, 373, 374, 0, 229, 0, 230, 0, 0, 0,
	0, 231, 375, 0, 376, 0, 0, 232, 233, 234,
	235, 1974, 378, 0, 0, 379, 239, 0, 236, 0,
	0, 237, 380, 238, 381, 382, 383, 384, 385, 0,
	386, 0, 0, 240, 241, 242, 0, 387, 388, 243,
	244, 245, 0, 247, 246, 0, 389, 0, 248, 249,
	0, 0, 250, 251, 0, 0, 252, 0, 253, 0,
	254, 255, 257, 390, 256, 0, 258, 259, 261, 260,
	0, 0, 0, 391, 262, 392, 263, 264, 0, 265,
	0, 0, 266, 0, 0, 267, 393, 0, 268, 0,
	394, 269, 270, 271, 272, 273, 274, 0, 275, 395,
	276, 396, 277, 0, 278, 279, 280, 281, 282, 397,
	283, 284, 0, 285, 286, 287, 288, 289, 0, 291,
	292, 290, 293, 294, 295, 296, 0, 297, 0, 298,
	299, 398, 300, 0, 304, 305, 306, 307, 308, 0,
	310, 399, 309, 311, 312, 0, 313, 301, 302, 314,
	0, 315, 400, 401, 316, 0, 0, 323, 317, 318,
	303, 319, 322, 402, 320, 321, 403, 0, 324, 0,
	325, 326, 327, 328, 329, 330, 331, 332, 0, 404,
	405, 406, 0, 0, 333, 334, 407, 408, 0, 335,
	336, 337, 338, 0, 0, 339, 340, 341, 342, 0,
	343, 0, 409, 344, 345, 346, 410, 411, 186, 0,
	347, 0, 0, 0, 0, 348, 349, 350, 351, 352,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 353, 0, 0, 0, 0, 192, 193,
	194, 354, 355, 356, 357, 195, 358, 359, 0, 196,
	360, 361, 197, 198, 0, 0, 362, 363, 364, 0,
	199, 365, 0, 0, 0, 200, 201, 202, 0, 204,
	205, 206, 203, 0, 207, 0, 208, 209, 0, 0,
	210, 211, 212, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 421, 215, 366, 216, 367, 368, 0, 217,
	0, 218, 0, 219, 0, 0, 220, 221, 0, 222,
	0, 0, 0, 369, 223, 225, 224, 226, 370, 371,
	0, 0, 0, 0, 0, 0, 0, 227, 228, 372,
	373, 374, 0, 229, 0, 230, 0, 0, 0, 0,
	231, 375, 0, 376, 0, 0, 232, 233, 234, 235,
	377, 378, 0, 0, 379, 239, 0, 236, 0, 0,
	237, 380, 238, 381, 382, 383, 384, 385, 0, 386,
	0, 0, 240, 241, 242, 0, 387, 388, 243, 244,
	245, 0, 247, 246, 0, 389, 0, 248, 249, 0,
	0, 250, 251, 0, 0, 252, 0, 253, 0, 254,
	255, 257, 390, 256, 0, 258, 259, 261, 260, 0,
	0, 0, 391, 262, 392, 263, 264, 0, 265, 0,
	0, 266, 0, 0, 267, 393, 0, 268, 0, 394,
	269, 270, 271, 272, 273, 274, 0, 275, 395, 276,
	396, 277, 0, 278, 279, 280, 281, 282, 397, 283,
	284, 0, 285, 286, 287, 288, 289, 0, 291, 292,
	290, 293, 294, 295, 296, 0, 297, 0, 298, 299,
	398, 300, 0, 513, 305, 306, 307, 308, 0, 310,
	399, 309, 311, 312, 0, 313, 301, 302, 314, 0,
	315, 400, 401, 316, 0, 0, 323, 317, 318, 303,
	319, 322, 402, 320, 321, 403, 0, 324, 0, 325,
	326, 327, 328, 329, 330, 331, 332, 0, 404, 405,
	406, 0, 0, 333, 334, 407, 408, 0, 335, 336,
	337, 338, 0, 0, 339, 340, 341, 342, 0, 343,
	0, 409, 344, 345, 346, 410, 411, 186, 0, 347,
	0, 0, 0, 0, 348, 349, 350, 351, 352, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 353, 0, 1296, 0, 0, 192, 193, 194,
	354, 355, 356, 357, 195, 358, 359, 0, 196, 360,
	361, 197, 198, 0, 0, 362, 363, 364, 0, 199,
	365, 0, 0, 0, 200, 201, 202, 0, 204, 205,
	206, 203, 0, 207, 0, 208, 209, 0, 0, 210,
	211, 212, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 421, 215, 366, 216, 367, 368, 0, 217, 0,
	218, 0, 219, 0, 0, 220, 221, 0, 222, 0,
	0, 0, 369, 223, 225, 224, 226, 370, 371, 0,
	0, 0, 0, 0, 0, 0, 227, 228, 372, 373,
	374, 0, 229, 0, 230, 0, 0, 0, 0, 231,
	375, 0, 376, 0, 0, 232, 233, 234, 235, 377,
	378, 0, 0, 379, 239, 0, 236, 0, 0, 237,
	380, 238, 381, 382, 383, 384, 385, 0, 386, 0,
	0, 240, 241, 242, 0, 387, 388, 243, 244, 245,
	0, 247, 246, 0, 389, 0, 248, 249, 0, 0,
	250, 251, 0, 0, 252, 0, 253, 0, 254, 255,
	257, 390, 256, 0, 258, 259, 261, 260, 0, 0,
	0, 391, 262, 392, 263, 264, 0, 265, 0, 0,
	266, 0, 0, 267, 393, 0, 268, 0, 394, 269,
	270, 271, 272, 273, 274, 0, 275, 395, 276, 396,
	277, 0, 278, 279, 280, 281, 282, 397, 283, 284,
	0, 285, 286, 287, 288, 289, 0, 291, 292, 290,
	293, 294, 295, 296, 0, 297, 0, 298, 299, 398,
	300, 0, 304, 305, 306, 307, 308, 0, 310, 399,
	309, 311, 312, 0, 0, 301, 302, 314, 0, 315,
	400, 401, 316, 0, 0, 323, 317, 318, 303, 319,
	322, 402, 320, 321, 403, 0, 324, 0, 325, 326,
	327, 328, 329, 330, 331, 332, 0, 404, 405, 406,
	0, 0, 333, 334, 407, 408, 0, 335, 336, 337,
	338, 0, 0, 339, 340, 341, 342, 0, 343, 0,
	409, 344, 345, 346, 410, 411, 186, 0, 347, 0,
	0, 0, 0, 348, 349, 350, 351, 352, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 353, 0, 0, 0, 0, 192, 193, 194, 354,
	355, 356, 357, 195, 358, 359, 0, 196, 360, 361,
	197, 198, 0, 0, 362, 363, 364, 0, 199, 365,
	0, 0, 0, 200, 201, 202, 0, 204, 205, 206,
	203, 0, 207, 0, 208, 209, 0, 0, 210, 211,
	212, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	421, 215, 366, 216, 367, 368, 0, 217, 0, 218,
	0, 219, 0, 0, 220, 221, 0, 222, 0, 0,
	0, 369, 223, 225, 224, 226, 370, 371, 0, 0,
	0, 0, 0, 0, 0, 227, 228, 372, 373, 374,
	0, 229, 0, 230, 0, 0, 0, 0, 231, 375,
	0, 376, 0, 0, 232, 233, 234, 235, 377, 378,
	0, 0, 379, 239, 0, 236, 0, 0, 237, 380,
	238, 381, 382, 383, 384, 385, 0, 386, 0, 0,
	240, 241, 242, 0, 387, 388, 243, 244, 245, 0,
	247, 246, 0, 389, 0, 248, 249, 0, 0, 250,
	251, 0, 0, 252, 0, 253, 0, 254, 255, 257,
	390, 256, 0, 258, 259, 261, 260, 0, 0, 0,
	391, 262, 392, 263, 264, 0, 265, 0, 0, 266,
	0, 0, 267, 393, 0, 268, 0, 394, 269, 270,
	271, 272, 273, 274, 0, 275, 395, 276, 396, 277,
	0, 278, 279, 280, 281, 282, 397, 752, 284, 0,
	285, 286, 287, 288, 289, 0, 291, 292, 290, 293,
	294, 295, 296, 0, 297, 0, 298, 299, 398, 300,
	0, 304, 305, 306, 307, 308, 0, 310, 399, 309,
	311, 312, 0, 313, 301, 302, 314, 0, 315, 400,
	401, 316, 0, 0, 323, 317, 318, 303, 319, 322,
	402, 320, 321, 403, 0, 324, 0, 325, 326, 327,
	328, 329, 330, 331, 332, 0, 404, 405, 406, 0,
	0, 333, 334, 407, 408, 0, 335, 336, 337, 338,
	0, 0, 339, 340, 341, 342, 0, 343, 0, 409,
	344, 345, 346, 410, 411, 186, 0, 347, 0, 0,
	0, 0, 348, 349, 350, 351, 352, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	353, 0, 0, 0, 0, 192, 193, 194, 354, 355,
	356, 357, 195, 358, 359, 0, 196, 360, 361, 197,
	198, 0, 0, 362, 363, 364, 0, 199, 365, 0,
	0, 0, 200, 201, 202, 0, 204, 205, 206, 203,
	0, 207, 0, 208, 209, 0, 0, 210, 211, 212,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 421,
	215, 366, 216, 367, 368, 0, 217, 0, 218, 0,
	219, 0, 0, 220, 221, 0, 222, 0, 0, 0,
	369, 223, 225, 224, 226, 370, 371, 0, 0, 0,
	0, 0, 0, 0, 227, 228, 372, 373, 374, 0,
	229, 0, 230, 0, 0, 0, 0, 231, 375, 0,
	376, 0, 0, 232, 233, 234, 235, 377, 378, 0,
	0, 379, 239, 0, 236, 0, 0, 237, 380, 238,
	381, 382, 383, 384, 385, 0, 386, 0, 0, 240,
	241, 242, 0, 387, 388, 243, 244, 245, 0, 247,
	246, 0, 389, 0, 248, 249, 0, 0, 250, 251,
	0, 0, 252, 0, 253, 0, 254, 255, 257, 390,
	256, 0, 258, 259, 261, 260, 0, 0, 0, 391,
	262, 392, 263, 264, 0, 265, 0, 0, 266, 0,
	0, 267, 393, 0, 268, 0, 394, 269, 270, 0,
	272, 273, 274, 0, 275, 395, 276, 396, 277, 0,
	278, 279, 280, 0, 282, 397, 283, 284, 0, 285,
	286, 287, 288, 289, 0, 291, 292, 290, 293, 294,
	295, 296, 0, 297, 0, 298, 299, 398, 0, 0,
	304, 305, 306, 307, 308, 0, 310, 399, 309, 311,
	312, 0, 313, 301, 302, 314, 0, 315, 400, 401,
	316, 0, 0, 323, 317, 318, 303, 319, 322, 402,
	320, 321, 403, 0, 324, 0, 325, 326, 327, 328,
	329, 330, 331, 332, 0, 404, 405, 406, 0, 0,
	333, 334, 407, 408, 0, 335, 336, 337, 338, 0,
	0, 339, 340, 341, 342, 0, 343, 0, 409, 344,
	345, 346, 410, 411, 0, 0, 347, 0, 0, 0,
	0, 348, 349, 350, 351, 352, 1080, 1081, 0, 1110,
	1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0, 1098,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 1124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 1080, 1081,
	1102, 1110, 1111, 1112, 1120, 1121, 1122, 1099, 0, 0,
	0, 1098, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 0, 1102, 0, 0, 1105, 1106, 1107, 1108, 1099,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1117, 1125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 1105, 1106, 1107,
	1108, 0, 0, 0, 0, 0, 1088, 0, 0, 0,
	0, 1115, 0, 0, 0, 0, 0, 0, 1103, 0,
	0, 0, 0, 0, 0, 0, 1117, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 1109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 1114, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1118, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 1080, 1081, 0, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 1118, 0, 0, 1098, 0, 0, 1097,
	1113, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	1124, 1116, 0, 0, 1094, 1095, 1101, 1100, 1096, 1119,
	0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090,
	0, 1082, 0, 0, 0, 0, 0, 1102, 1923, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 1094, 1095, 1101, 1100,
	1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	1922, 0, 1105, 1106, 1107, 1108, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 1080, 1081, 0, 1110,
	1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0, 1098,
	0, 1117, 1125, 1113, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 1124, 0, 0, 0, 0, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 1115, 0,
	1102, 0, 0, 0, 0, 1103, 0, 1099, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1114, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 1106, 1107, 1108, 0,
	0, 0, 0, 0, 1088, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 1117, 1125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 1123, 1097, 1080, 1081, 0, 1110, 1111,
	1112, 1120, 1121, 1122, 0, 0, 0, 0, 1098, 0,
	0, 1115, 1113, 0, 0, 0, 0, 0, 1103, 1083,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 1114, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 1099, 0, 1116, 0,
	0, 1094, 1095, 1101, 1100, 1096, 1119, 0, 1093, 1091,
	1092, 1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 1109,
	0, 0, 0, 0, 0, 1921, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 1106, 1107, 1108, 0, 0,
	0, 1118, 0, 1088, 0, 0, 0, 1097, 1080, 1081,
	0, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0,
	0, 1098, 0, 1117, 1125, 1113, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	1115, 0, 1102, 0, 0, 0, 0, 1103, 0, 1099,
	0, 1116, 0, 0, 1094, 1095, 1101, 1100, 1096, 1119,
	0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090,
	0, 0, 0, 1114, 0, 0, 0, 0, 1873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 1106, 1107,
	1108, 0, 0, 0, 0, 0, 1088, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 1117, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 1123, 1097, 1080, 1081, 0,
	1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0,
	1098, 0, 0, 1115, 1113, 0, 0, 0, 0, 0,
	1103, 1083, 0, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1114, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 1099, 0,
	1116, 0, 0, 1094, 1095, 1101, 1100, 1096, 1119, 0,
	1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 0,
	0, 1109, 0, 2555, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 1106, 1107, 1108,
	0, 0, 0, 1118, 0, 1088, 0, 0, 0, 1097,
	1080, 1081, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0,
	0, 0, 0, 1098, 0, 1117, 1125, 1113, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 1124, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 1115, 0, 1102, 0, 0, 0, 0, 1103,
	0, 1099, 0, 1116, 0, 0, 1094, 1095, 1101, 1100,
	1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 0, 0, 0, 1114, 2505, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	1106, 1107, 1108, 0, 0, 0, 0, 0, 1088, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 1117, 1125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 1123, 1097, 1080,
	1081, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0,
	0, 0, 1098, 0, 0, 1115, 1113, 0, 0, 0,
	0, 0, 1103, 1083, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 1114, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1099, 0, 1116, 0, 0, 1094, 1095, 1101, 1100, 1096,
	1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089,
	1090, 0, 0, 1109, 0, 2459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1105, 1106,
	1107, 1108, 0, 0, 0, 1118, 0, 1088, 0, 0,
	0, 1097, 1080, 1081, 0, 1110, 1111, 1112, 1120, 1121,
	1122, 0, 0, 0, 0, 1098, 0, 1117, 1125, 1113,
	0, 0, 0, 0, 0, 0, 1083, 0, 0, 1124,
	0, 0, 0, 0, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 0, 0, 0, 1115, 0, 1102, 0, 0, 0,
	0, 1103, 0, 1099, 0, 1116, 0, 0, 1094, 1095,
	1101, 1100, 1096, 1119, 0, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 0, 0, 0, 1114, 2429, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 1106, 1107, 1108, 0, 0, 0, 0, 0,
	1088, 0, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	1117, 1125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1118, 0, 0, 0, 0, 1123,
	1097, 1080, 1081, 0, 1110, 1111, 1112, 1120, 1121, 1122,
	0, 0, 0, 0, 1098, 0, 0, 1115, 1113, 0,
	0, 0, 0, 0, 1103, 1083, 0, 0, 1124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1082,
	1114, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 1099, 0, 1116, 0, 0, 1094, 1095, 1101,
	1100, 1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 0, 0, 1109, 0, 2424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1105, 1106, 1107, 1108, 0, 0, 0, 1118, 0, 1088,
	0, 0, 0, 1097, 1080, 1081, 0, 1110, 1111, 1112,
	1120, 1121, 1122, 0, 0, 0, 0, 1098, 0, 1117,
	1125, 1113, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 1124, 0, 0, 0, 0, 0, 0, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1082, 0, 0, 0, 1115, 0, 1102, 0,
	0, 0, 0, 1103, 0, 1099, 0, 1116, 0, 0,
	1094, 1095, 1101, 1100, 1096, 1119, 0, 1093, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 0, 1114,
	2420, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 1106, 1107, 1108, 0, 0, 0,
	0, 0, 1088, 0, 1109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 1117, 1125, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1118, 0, 0, 0,
	0, 1123, 1097, 1080, 1081, 0, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 0, 0, 0, 1098, 0, 0, 1115,
	1113, 0, 0, 0, 0, 0, 1103, 1083, 0, 0,
	1124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 1114, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 1099, 0, 1116, 0, 0, 1094,
	1095, 1101, 1100, 1096, 1119, 0, 1093, 1091, 1092, 1084,
	1085, 1086, 1087, 1089, 1090, 0, 0, 1109, 0, 2350,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 1106, 1107, 1108, 0, 0, 0, 1118,
	0, 1088, 0, 0, 0, 1097, 1080, 1081, 0, 1110,
	1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0, 1098,
	0, 1117, 1125, 1113, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 1124, 0, 0, 0, 0, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1082, 0, 0, 0, 1115, 0,
	1102, 0, 0, 0, 0, 1103, 0, 1099, 0, 1116,
	0, 0, 1094, 1095, 1101, 1100, 1096, 1119, 0, 1093,
	1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 0, 0,
	0, 1114, 2316, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1105, 1106, 1107, 1108, 0,
	0, 0, 0, 0, 1088, 0, 1109, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 1117, 1125, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1118, 0,
	0, 0, 0, 1123, 1097, 1080, 1081, 0, 1110, 1111,
	1112, 1120, 1121, 1122, 0, 0, 0, 0, 1098, 0,
	0, 1115, 1113, 0, 0, 0, 0, 0, 1103, 1083,
	0, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 1114, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 1099, 0, 1116, 0,
	0, 1094, 1095, 1101, 1100, 1096, 1119, 0, 1093, 1091,
	1092, 1084, 1085, 1086, 1087, 1089, 1090, 0, 0, 1109,
	0, 2315, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1105, 1106, 1107, 1108, 0, 0,
	0, 1118, 0, 1088, 0, 0, 0, 1097, 1080, 1081,
	0, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0,
	0, 1098, 0, 1117, 1125, 1113, 0, 0, 0, 0,
	0, 0, 1083, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	1115, 0, 1102, 0, 0, 0, 0, 1103, 0, 1099,
	0, 1116, 0, 0, 1094, 1095, 1101, 1100, 1096, 1119,
	0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090,
	0, 0, 0, 1114, 2280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 1106, 1107,
	1108, 0, 0, 0, 0, 0, 1088, 0, 1109, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 1117, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 1123, 1097, 1080, 1081, 0,
	1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0,
	1098, 0, 0, 1115, 1113, 0, 0, 0, 0, 0,
	1103, 1083, 0, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1114, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 1099, 0,
	1116, 0, 0, 1094, 1095, 1101, 1100, 1096, 1119, 0,
	1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 0,
	0, 1109, 0, 2119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 1106, 1107, 1108,
	0, 0, 0, 1118, 0, 1088, 0, 0, 0, 1097,
	1080, 1081, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0,
	0, 0, 0, 1098, 0, 1117, 1125, 1113, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 1124, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1082, 0,
	0, 0, 1115, 0, 1102, 0, 0, 0, 0, 1103,
	0, 1099, 0, 1116, 0, 0, 1094, 1095, 1101, 1100,
	1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 0, 0, 0, 1114, 2095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1105,
	1106, 1107, 1108, 0, 0, 0, 0, 0, 1088, 0,
	1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 1117, 1125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 1123, 1097, 1080,
	1081, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0,
	0, 0, 1098, 0, 0, 1115, 1113, 0, 0, 0,
	0, 0, 1103, 1083, 0, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 1114, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1099, 0, 1116, 0, 0, 1094, 1095, 1101, 1100, 1096,
	1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089,
	1090, 0, 0, 1109, 0, 1541, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1105, 1106,
	1107, 1108, 0, 0, 0, 1118, 0, 1088, 2618, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 1125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 1116, 0, 0, 1094, 1095,
	1101, 1100, 1096, 1119, 0, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 0, 0, 1843, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 1081, 1104, 1110, 1111,
	1112, 1120, 1121, 1122, 0, 0, 0, 0, 1098, 0,
	0, 0, 1113, 0, 1118, 0, 0, 0, 0, 1083,
	1097, 0, 1124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1082, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 1094, 1095, 1101,
	1100, 1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 0, 1105, 1106, 1107, 1108, 0, 0,
	0, 0, 0, 1088, 0, 1913, 0, 0, 1912, 0,
	0, 0, 0, 0, 1080, 1081, 0, 1110, 1111, 1112,
	1120, 1121, 1122, 1117, 1125, 0, 0, 1098, 0, 0,
	0, 1113, 0, 0, 0, 0, 1816, 0, 1083, 0,
	0, 1124, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 0, 1082, 0, 0, 0, 0, 1103, 1102, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 0, 0, 0, 0, 0, 0,
	0, 0, 1817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1105, 1106, 1107, 1108, 0, 1109, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 1117, 1125, 0, 0, 0, 0, 0, 0,
	1118, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	0, 0, 0, 0, 0, 0, 1103, 0, 1639, 0,
	0, 0, 0, 0, 1080, 1081, 0, 1110, 1111, 1112,
	1120, 1121, 1122, 0, 0, 0, 0, 1098, 0, 0,
	0, 1113, 1114, 0, 0, 1638, 0, 0, 1083, 0,
	1116, 1124, 0, 1094, 1095, 1101, 1100, 1096, 1119, 0,
	1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 0,
	0, 0, 1082, 0, 0, 0, 0, 1109, 1102, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1118,
	0, 0, 0, 1080, 1081, 1097, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 0, 0, 0, 1098, 0, 0, 0,
	1113, 0, 0, 1105, 1106, 1107, 1108, 1083, 0, 0,
	1124, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 1117, 1125, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 1116,
	0, 1123, 1094, 1095, 1101, 1100, 1096, 1119, 0, 1093,
	1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 0, 1115,
	0, 0, 0, 0, 0, 0, 1103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1105, 1106, 1107, 1108, 0, 0, 0, 0,
	0, 1088, 1114, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1117, 1125, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1109, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 1115, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 1118,
	0, 0, 0, 1080, 1081, 1097, 1110, 1111, 1112, 1120,
	1121, 1122, 0, 0, 0, 0, 1098, 0, 0, 0,
	1113, 1114, 609, 0, 0, 0, 0, 1083, 0, 0,
	1124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1082, 0, 0, 0, 0, 1109, 1102, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 1116,
	0, 1104, 1094, 1095, 1101, 1100, 1096, 1119, 0, 1093,
	1091, 1092, 1084, 1085, 1086, 1087, 1089, 1090, 1118, 0,
	0, 0, 1080, 1081, 1097, 1110, 1111, 1112, 1120, 1121,
	1122, 0, 0, 0, 0, 1098, 0, 0, 0, 1113,
	0, 0, 1105, 1106, 1107, 1108, 1083, 0, 0, 1124,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1082, 1117, 1125, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 1116, 0,
	1123, 1094, 1095, 1101, 1100, 1096, 1119, 0, 1093, 1091,
	1092, 1084, 1085, 1086, 1087, 1089, 1090, 0, 1115, 0,
	0, 0, 0, 0, 0, 1103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1105, 1106, 1107, 1108, 0, 0, 0, 0, 0,
	1088, 1114, 0, 0, 0, 1919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1117, 1125, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1109, 0, 0, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 1115, 0, 0,
	0, 0, 0, 0, 1103, 0, 0, 0, 1118, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 0, 0, 0, 2099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 1081, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0,
	0, 0, 0, 1098, 0, 1109, 0, 1113, 0, 0,
	0, 1914, 0, 0, 1083, 0, 0, 1124, 1116, 0,
	1104, 1094, 1095, 1101, 1100, 1096, 1119, 0, 1093, 1091,
	1092, 1084, 1085, 1086, 1087, 1089, 1090, 1118, 1082, 0,
	0, 0, 0, 1097, 1102, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	1081, 0, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0,
	0, 0, 1098, 0, 0, 0, 1113, 0, 0, 1105,
	1106, 1107, 1108, 1083, 0, 0, 1124, 1116, 1088, 0,
	1094, 1095, 1101, 1100, 1096, 1119, 0, 1093, 1091, 1092,
	1084, 1085, 1086, 1087, 1089, 1090, 0, 1082, 1117, 1125,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 0, 0, 0, 0,
	0, 0, 1103, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1105, 1106,
	1107, 1108, 0, 0, 0, 0, 0, 1088, 1114, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 1125, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 0, 1115, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 1118, 0, 0, 0, 1080,
	1081, 1097, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0,
	0, 0, 1098, 0, 0, 0, 1113, 1114, 0, 0,
	1872, 0, 0, 1083, 0, 0, 1124, 0, 0, 0,
	0, 1879, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1082, 0, 0,
	0, 0, 1109, 1102, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 1116, 0, 1104, 1094, 1095,
	1101, 1100, 1096, 1119, 0, 1093, 1091, 1092, 1084, 1085,
	1086, 1087, 1089, 1090, 1118, 0, 0, 0, 1080, 1081,
	1097, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0,
	0, 1098, 0, 0, 0, 1113, 0, 0, 1105, 1106,
	1107, 1108, 1083, 0, 0, 1124, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 1117, 1125, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 1116, 0, 1123, 1094, 1095, 1101,
	1100, 1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 0, 1115, 0, 0, 0, 0, 0,
	0, 1103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1105, 1106, 1107,
	1108, 0, 0, 0, 0, 0, 1088, 1114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1117, 1125, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1109, 0, 0, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 1115, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 1118, 0, 0, 0, 1080, 1081,
	1097, 1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0,
	0, 1098, 0, 0, 0, 1113, 1114, 0, 0, 0,
	0, 0, 1083, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1082, 0, 0, 0,
	0, 1109, 1102, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 1116, 0, 1104, 1094, 1095, 1101,
	1100, 1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086,
	1087, 1089, 1090, 1118, 0, 0, 0, 1080, 1081, 1097,
	1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 1105, 1106, 1107,
	1108, 1083, 0, 0, 1124, 0, 1088, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 1117, 1125, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 1116, 0, 1123, 1094, 1095, 1101, 1100,
	1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 0, 1115, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 1106, 1107, 1108,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1117, 1125, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1109, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 0,
	0, 0, 1115, 0, 0, 0, 0, 0, 0, 1103,
	0, 0, 0, 1118, 0, 0, 0, 1080, 1081, 1097,
	1110, 1111, 1112, 1120, 1121, 1122, 0, 0, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 1124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1082, 0, 0, 0, 0,
	1109, 1102, 0, 0, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 1116, 0, 1104, 1094, 1095, 1101, 1100,
	1096, 1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087,
	1089, 1090, 1118, 0, 0, 0, 0, 0, 1097, 1341,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1105, 1106, 1107, 1108,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 0, 1349, 1338, 1368, 1327, 1359, 1358, 0,
	0, 1329, 1328, 0, 0, 1117, 1125, 1370, 1369, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 1094, 1095, 1101, 1100, 1096,
	1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089,
	1090, 0, 1115, 0, 0, 1364, 0, 1356, 1355, 1103,
	0, 0, 0, 0, 0, 0, 0, 1354, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1353, 1351, 1352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1337, 0, 0, 0, 0,
	1109, 0, 1342, 1340, 1343, 1344, 1345, 1346, 1347, 0,
	1367, 0, 0, 0, 0, 1104, 0, 1331, 1330, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1118, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 1341, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1357, 0, 0, 0, 1339,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1349, 1338, 1368, 1327,
	1359, 1358, 0, 0, 1329, 1328, 0, 0, 0, 1350,
	1370, 1369, 0, 1466, 1464, 1465, 1468, 1467, 0, 0,
	0, 0, 1116, 0, 0, 1094, 1095, 1101, 1100, 1096,
	1119, 0, 1093, 1091, 1092, 1084, 1085, 1086, 1087, 1089,
	1090, 1334, 551, 0, 577, 0, 0, 0, 1364, 0,
	1356, 1355, 1348, 1335, 0, 0, 0, 0, 0, 0,
	1354, 0, 556, 1372, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 554, 1332, 0, 0, 0,
	1365, 1366, 0, 1353, 1351, 1352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 0, 0,
	0, 557, 1336, 0, 0, 0, 0, 1371, 1337, 563,
	564, 0, 0, 0, 573, 1342, 1340, 1343, 1344, 1345,
	1346, 1347, 0, 1367, 0, 0, 0, 0, 578, 558,
	1331, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 576, 0, 0, 0, 0, 1333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1357, 0,
	0, 0, 1339, 0, 0, 0, 559, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 560, 561, 0, 0, 0, 0, 0, 0,
	0, 0, 1350, 0, 0, 0, 0, 0, 0, 0,
	567, 0, 0, 0, 0, 562, 569, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 566, 0,
	0, 0, 0, 0, 1334, 0, 0, 0, 0, 579,
	0, 0, 0, 0, 0, 1348, 1335, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1372, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 1365, 1366, 0, 0, 0, 0, 0,
	565, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 0, 0, 0,
	1371, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 553, 570,
	580, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571, 0, 0, 0, 575,
	0, 0, 0, 0, 581, 0, 0, 0, 0, 568,
	572, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 574,
}
var sqlPact = [...]int{

	301, -1000, -38, -1000, -1000, -1000, 139, -1000, -1000, -1000,
	-1000, 138, 137, 135, -1000, 133, 132, 131, 129, 128,
	124, 116, 114, 111, 110, 108, -1000, 107, -1000, -1000,
	-1000, -1000, 106, 105, 103, -1000, 100, 1022, 23000, 97,
	92, 1509, -1000, -1000, 891, 36638, 91, -1000, 1053, 26741,
	1145, 1508, -1000, 89, 1106, 36299, 3573, 1560, 1180, 1715,
	35957, 22658, 1713, 1420, 35615, -1000, -1000, 35273, 88, 87,
	86, 85, 84, -1000, -1000, 34931, 83, 81, 79, 64,
	63, 62, 61, 60, 59, 57, 55, 51, 50, 48,
	-1000, 44, 41, 39, -1000, 44310, 37, 35, 30, 1158,
	29, 28, 25, 23, -1000, -1000, 21, 17, 15, 14,
	10, 112, 9, 7, 1, 0, -1000, 940, 231, 1759,
	8774, 1066, 1064, 1056, 1033, 1048, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 38672, 36638, -1, -73, -4, -1000, 2136, 652, 18832,
	301, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26399, 26057, 22316, 34589, 34247, 6225, 815, -1000,
	-43, 24356, 36638, -1000, 4, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 14306, 13926, 1249, 951, 504,
	4, -1000, -1000, -1000, 33905, 21963, 33563, 1572, 33221, -1000,
	-1000, 32879, -1000, -1000, 2036, 1721, 1695, 25715, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 32540, 32198, 31856, 31514,
	21610, 511, -1000, -1000, -1000, 17112, -1000, -1000, -1000, -1000,
	-11, -1000, -12, -14, -1000, -18, -19, -21, -23, -24,
	-25, -1000, -26, -27, -1000, -28, -29, -1000, -32, -34,
	1060, 909, 911, 31172, 902, 1294, -1000, -1000, -42, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36638, -1000, 15362,
	-1000, 510, -1000, 1702, -1000, 15362, -1000, 1290, -1000, -1000,
	-1000, -1000, -1000, 36638, -1000, -1000, -1000, -1000, -1000, -1000,
	2320, 1207, 509, 30830, -1000, 1621, -1000, 601, 790, -1000,
	-1000, -1000, 9478, 150, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2049, 21257, 1529, 2117, 1985, 2319, 1497,
	1983, 1971, 1877, 1873, 1768, 2316, 968, 2315, 1982, 1083,
	2314, 1763, 1523, 683, 2307, 1699, 1698, -1000, -1000, -1000,
	-1000, 798, -1000, -1000, -1000, 28097, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 940, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1494, 2060, 2060, 2060, 2138,
	286, 275, -1000, 112, -1000, 1553, -1000, 1188, -1000, -1000,
	-1000, 43468, -1000, -1000, 15362, 15362, 15362, 15362, 15362, 1167,
	-1000, 538, -1000, 508, 507, 7324, -1000, -1000, 2283, -1000,
	-1000, -1000, 284, -1000, -1000, 15362, 4, -1000, -1000, -1000,
	-1000, 505, 2292, -1000, 604, -1000, -1000, -1000, 593, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1735, 503,
	501, 498, -1000, 497, -1000, -1000, 495, 483, 481, 480,
	470, 466, 465, 455, 454, 450, 448, 447, 446, 445,
	444, 1058, -1000, 638, -1000, -1000, 638, 638, -1000, 430,
	430, 431, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	430, -1000, -1000, -1000, 578, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 443, 1327, -1000,
	-1000, 1327, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 814,
	37994, -50, 36638, -1000, 440, -50, -1000, -1000, 439, -1000,
	9830, 9830, -1000, -1000, -1000, 15362, -1000, 1630, -1000, 2766,
	-212, 288, 575, -1000, 17800, 20553, -1000, -1000, 1311, 1965,
	739, -1000, 998, 1951, 419, -1000, 625, 1939, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1297, -1000,
	1228, 1935, -139, 1773, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	23339, 24356, -43, -44, -1000, -1000, -1000, 5874, 43468, -1000,
	43468, -1000, -1000, 30488, 30146, 2101, 600, 870, 19520, 4,
	-1000, -1000, -1000, -1000, 438, 1396, 616, 1392, -1000, 296,
	-1000, 29804, 616, 1390, -1000, -1000, -1000, 28097, -1000, 36638,
	-1000, 36638, -1000, 912, -1000, 38333, 118, 1932, -1000, -1000,
	118, 1910, -1000, 115, 1866, -1000, -1000, 1231, 1863, -1000,
	-69, 1860, -1000, -1000, -1000, 15362, -72, -1000, -1000, -1000,
	652, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 29462, 23678, 1377, 589,
	43468, 2176, 44228, 23339, 43468, 23678, -1000, -1000, 36638, -1000,
	15362, -1000, 2173, 1334, -51, -1000, -1000, -1000, -1000, -1000,
	1475, 1595, 740, 1098, 9478, 9478, 2042, -1000, 149, 6225,
	-1000, -1000, -1000, -1000, 29120, -1000, -1000, -1000, 1178, 36638,
	-1000, -1000, 1732, -1000, 23678, 36638, -1000, 36638, -1000, 36638,
	-1000, 36638, -1000, 36638, -1000, -1000, -1000, -1000, -1000, 3608,
	-1000, 1727, -1000, -1000, 36638, -1000, 1427, -1000, -1000, -1000,
	28781, 28439, -1000, 1026, 841, -1000, -1000, 119, -1000, -1000,
	1494, 1456, 1710, 692, 1301, 1543, 13546, 1483, 15362, 112,
	-1000, -1000, 112, 112, 8394, -1000, -1000, -1000, 36638, -1000,
	44035, 44228, 6225, 820, 15362, 15362, 15362, 15362, 15362, 15362,
	15362, 15362, 15362, 15362, 15362, 15362, 15362, 15362, 15362, 15362,
	15362, 15362, 15362, 15362, 15362, 15362, 15362, 15362, 15362, 15362,
	15362, 15362, 15362, 15362, 15362, 15362, 1244, 15362, 812, 15362,
	15362, 15362, 15362, 1381, 1183, 355, 1323, -1000, 2254, 2254,
	2254, 43747, 43747, 390, 538, -1000, 15362, -1000, 43, 15362,
	275, 41647, -49, 6958, -1000, -1000, -1000, 13194, 636, 43468,
	4, 6578, -1000, 2277, 976, 1720, 1618, 435, 534, 525,
	518, 493, 15362, 15362, 12842, 12462, 12082, 16066, 11702, 15362,
	7690, 15362, 15362, 15362, 15362, 11322, 10942, -1000, 434, -1000,
	-1000, -1000, -1000, 2272, -1000, -1000, 2266, -1000, 819, 743,
	2262, -1000, -51, -1000, 37994, -1000, 36638, -50, 2172, 36638,
	15362, 160, -1000, 42504, -1000, 160, -77, 43468, 1532, 1512,
	19176, 1412, 1181, 1181, 1181, -1000, 433, 532, 575, 5161,
	10562, -1000, 27080, 1191, 169, 274, 17456, 1630, -1000, 36638,
	-60, 1108, -1000, 25373, 2084, 2070, 2078, 28097, 2159, 43,
	1771, 1696, -1000, 6225, 811, 28097, 1105, 23339, 2096, 810,
	2154, 43, 1756, 1690, 805, 36638, 6225, 2095, 516, -1000,
	36638, -1000, -1000, -1000, -1000, 623, -1000, 1718, -1000, 2102,
	-1000, 1684, -78, -1000, -1000, 25034, 2170, 1856, -1000, 1091,
	-1000, 1836, 2168, 36638, 1289, 1388, -1000, -1000, 831, 1829,
	629, 299, 2165, 299, 19865, -1000, 36638, -1000, 36638, -1000,
	-1000, 36638, -1000, 36638, -1000, 36638, 36638, -1000, 36638, 23339,
	23339, -79, 3760, 24695, 801, -1000, 678, 25034, 4039, -86,
	-1000, 701, -1000, -1000, -1000, -1000, 259, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 431, 1058, 430, 430, 430, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 578, -1000, -1000, 638, 638,
	638, -1000, -1000, -66, 1669, 608, -88, 717, -51, -1000,
	1327, -1000, 1279, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2287, -1000, 2259, -1000,
	-1000, 2261, -52, -1000, -52, -1000, 6225, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36638, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 3357, -1000, -1000, -1000, -1000, -1000, -1000,
	36638, 36638, 36638, -1000, 28097, 1456, 1710, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 43468, -1000, 360, -1000, -1000,
	43468, 993, 1558, -1000, 1558, -54, -1000, 42314, 1528, 36638,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 591, 423, 423, 866, 866, 866, 866, 2166, 580,
	1481, 412, 354, 354, 354, 354, 354, 354, 354, 354,
	324, 1002, 1002, 324, 324, 324, 324, 324, 354, 354,
	354, 43747, 43658, 496, 15362, 15362, 797, 1151, 355, 496,
	15362, 496, 496, 496, 496, -1000, 1261, -1000, -1000, -1000,
	-1000, 1654, 429, 16066, 16066, -1000, -1000, -1000, 7324, 15362,
	-1000, -1000, -1000, -1000, 428, 15362, -1000, 41770, -223, 273,
	-71, -1000, 15362, 530, -87, -1000, 876, -1000, 15362, -1000,
	3, 15362, 15362, 15362, 271, -1000, 269, -1000, 796, -1000,
	795, 774, 773, -1000, 427, 1173, 425, 424, 15362, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 43379, 39796, 268,
	-1000, 1647, -71, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	265, -1000, 263, -1000, 43189, -71, 257, 4441, -1000, 16066,
	16066, 16066, 7324, 422, 255, -1000, 42185, -1000, 43100, 10182,
	10182, 10182, 254, 42872, 15362, -71, 39673, 39408, 39356, -94,
	-95, -1000, -100, -1000, 2249, -102, 251, 588, 585, 248,
	-1000, -1000, 420, -103, -105, 629, 9830, 18488, 6225, -1000,
	629, -1000, 15362, 19176, 19176, 1345, 1511, 19176, -1000, -1000,
	-1000, -1000, 27080, 515, 575, 27080, -1000, 2246, 1474, 245,
	-1000, -1000, -1000, 36638, 414, -1000, 575, 243, 1100, 36638,
	36638, 36638, -1000, -1000, 1384, 37655, 1364, 44228, 36638, -1000,
	413, 411, 1526, 1525, 36638, 36638, 37316, 36977, 36638, 1125,
	43, -1000, 2092, 410, -1000, 36638, 979, 23339, 622, 584,
	36638, 43, -1000, 2082, 397, 6225, 975, -1000, 583, 1598,
	1321, -1000, 1237, 1317, -1000, 869, 1645, 36638, 242, -108,
	-55, 44228, -1000, -1000, -1000, -1000, -1000, 36638, 467, 36638,
	43, 36638, 23339, 23339, 43, 36638, 1793, 1974, 554, 36638,
	1543, 15362, 1035, -1000, 18144, 657, 36638, 958, 78, -1000,
	-1000, -1000, 567, 36638, -1000, -1000, 118, 118, -1000, 115,
	1231, -1000, -69, -1000, -1000, -1000, 36638, 23339, -110, -1000,
	685, 684, 682, -1000, 44228, -1000, 536, 779, -1000, 2242,
	595, 36638, 9478, 9478, -1000, 1546, -1000, -1000, 981, -1000,
	1019, -1000, -1000, -1000, -1000, 9478, -1000, -61, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 993, -1000, 15362,
	2238, -1000, -1000, -1000, 8394, -1000, -1000, -1000, 36638, -188,
	15362, 496, 496, 15362, 16066, 16066, -1000, 496, -1000, -1000,
	-1000, -1000, -1000, 1643, 396, 15362, 44228, 4149, 3884, -111,
	324, 15362, -56, -1000, 15362, -1000, 41488, -1000, -1000, 484,
	1774, -1000, 15362, 42783, 235, 9126, -1000, 42593, -40, -40,
	-1000, 2286, 1406, 1235, 1012, 933, 2236, -1000, 20209, 632,
	1193, 41365, 44035, 44228, -1000, 15362, -1000, -1000, 1642, 15362,
	-1000, 44035, 44228, 16066, 16066, 16066, 16066, 16066, 16066, 16066,
	16066, 16066, 16066, 16066, 16066, 16066, 16066, 16066, 16066, 16066,
	16066, 16066, 1435, 16066, 2248, 2248, 2248, -58, 15362, -1000,
	1709, 1642, 15362, 15362, 44228, 233, 228, 221, -1000, 15362,
	-71, 15362, 15362, 15362, -1000, -1000, -1000, 220, -1000, 2234,
	-1000, -1000, -1000, -1000, 4039, -1000, -1000, 1615, -1000, -185,
	-1000, 1630, -1000, 1615, 43468, -1000, 1345, -1000, 394, 15362,
	19176, -1000, 523, -1000, -113, -1000, 27080, -1000, 521, -220,
	-1000, 566, -1000, 575, 393, 36638, 27080, -1000, -1000, -1000,
	772, 767, 1791, -1000, 1359, -1000, 670, -1000, 988, 15362,
	16768, 389, 386, 1086, -1000, 1790, 1231, 1788, 1231, -1000,
	-60, 1107, -1000, 581, 15362, -1000, 765, -1000, 1087, 20904,
	-1000, -1000, 579, 15362, -1000, 761, 20904, 595, 1641, 854,
	1354, 6225, 36638, 36638, 36638, -1000, 867, -1000, 1575, -1000,
	25034, 384, 36638, 383, -1000, 382, -1000, 616, -1000, 380,
	36638, 1489, 554, 24017, -1000, 616, 958, -1000, 43468, -1000,
	958, 8042, 2080, -116, -1000, -1000, -1000, 629, 19865, 19176,
	15362, -118, -1000, -1000, -1000, -1000, -61, 2051, 2051, -1000,
	2231, -1000, 514, 219, -1000, 27758, -61, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36638, 1255, 41206, -1000, 2094, 6225,
	2171, 496, 1260, 728, 15362, 44228, 43937, -121, 15362, 15362,
	-1000, 215, 15362, 513, 43468, -1000, -1000, -1000, 43468, 15362,
	2256, 15362, 211, 210, 206, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 205, -1000, -1000, 39011, 15362, 201, -1000,
	200, 196, 43468, 1709, 43468, -1000, -1000, 620, 620, 905,
	905, 905, 905, 2248, 702, 482, 634, 334, 334, 334,
	468, 590, 590, 334, 334, 334, 1627, 1454, 377, 4464,
	15362, 191, -1000, -1000, 43468, 43468, 190, -1000, -1000, -1000,
	-71, 4321, 41083, 40924, -1000, 188, 186, 1604, 2135, -1000,
	19176, 1604, -1000, 36638, 43468, -1000, -212, -1000, 2212, -1000,
	-1000, 1474, -1000, 5522, 27080, 36638, -123, -1000, 36638, 36638,
	36638, 1783, -1000, 1541, -1000, 40801, -128, -1000, 283, 2114,
	15362, -1000, -1000, 375, 16768, 36638, -1000, 1469, 1485, 708,
	36638, -1000, 36638, -1000, 36638, 36638, 36638, 20904, -129, 36638,
	23339, -1000, 369, 4, 20904, -135, 6225, -1000, -1000, 23339,
	742, -63, -1000, 540, -1000, -1000, -1000, 1114, 1114, -1000,
	1118, 1578, -1000, 16768, 368, 36638, 25034, 2164, -1000, 16768,
	1288, 1482, 554, 24017, -1000, 831, -1000, -1000, -64, -1000,
	356, 43, 958, -1000, -67, 43468, 561, 2026, -1000, 1999,
	469, -1000, -1000, -68, 363, -1000, 559, 558, -1000, -1000,
	-1000, -1000, 2094, 15362, 15362, 43937, -136, -1000, 496, 496,
	-1000, 40642, -1000, 43468, -1000, 42593, -1000, -1000, -1000, -1000,
	1115, -1000, 40519, -1000, -1000, -1000, -1000, 16066, 1625, 358,
	44228, 40360, -1000, -1000, 15362, -1000, -1000, -1000, -1000, 627,
	15362, 15362, 1630, 627, -137, 575, -1000, -1000, -1000, 2203,
	-1000, -142, -1000, -1000, -1000, -1000, 36638, -1000, 36638, -1000,
	6225, 36638, 1638, 1335, -1000, -1000, 1518, 357, 16066, 36638,
	-1000, 1085, 16768, 2094, 4, 6225, 2094, 40237, 6578, -143,
	-144, 1333, -1000, 1329, 15362, -1000, 44228, 1231, 1231, -1000,
	748, 747, -1000, 737, -1000, -1000, 15362, -1000, 724, -1000,
	-69, 20904, 1354, -1000, 36638, -1000, -1000, -1000, -1000, 2133,
	1154, -150, 16768, -151, 178, 43, -152, 36638, -1000, 554,
	24017, -1000, 1974, 1980, 36638, 2067, -1000, -1000, 355, 339,
	337, -1000, 27419, 27419, 23339, 23339, -1000, 496, 496, -1000,
	-1000, 175, 1193, 2130, -1000, 4354, 16066, 44228, -153, -1000,
	40078, -1000, 36638, 43468, -71, -1000, -1000, 27080, 335, -1000,
	-1000, 1314, -1000, -1000, 36638, 1339, -1000, -1000, 15362, 4464,
	333, 1575, 310, -1000, -1000, -1000, -1000, -1000, -1000, 2114,
	3, -1000, 965, -1000, -1000, 43468, 2103, -1000, -1000, 36638,
	36638, 309, -40, 308, -1000, -1000, -158, 1096, 36638, 1085,
	-159, -1000, 1575, -1000, 1085, 307, 24017, -1000, 1489, 816,
	-161, 36638, -1000, 23339, 23339, -1000, -164, -1000, -1000, -1000,
	1176, 15362, 4354, -166, -1000, -1000, -70, -1000, 2163, -1000,
	-1000, -1000, -1000, 1762, 39955, 1410, 36638, -1000, 36638, 2094,
	174, 36638, 675, 6225, -1000, -1000, 15362, 171, 15362, -1000,
	306, 305, 300, 1575, 1085, -1000, 1575, 16768, -1000, 1482,
	907, -1000, 629, -1000, -169, -174, -1000, 170, 15714, 15714,
	-71, -1000, 36638, 298, 1728, -1000, 1268, 1062, 167, -175,
	-1000, -1000, 296, -1000, 15362, -1000, -176, 2256, -182, 36638,
	36638, 36638, -1000, 1575, -1000, -184, -1000, 19865, -1000, 595,
	595, -1000, -1000, -1000, 16417, 1171, 944, 41929, -1000, -1000,
	-1000, 36638, -1000, 1286, 1278, 941, -1000, -1000, -1000, -1000,
	-1000, 1410, 43468, -1000, -1000, -189, -190, -191, -1000, 1085,
	-177, -1000, -1000, 2181, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1987, -1000, 690, 1341, 1341, 1268, 295, 292, 1182,
	1575, -1000, 15010, -1000, 2189, -1000, -1000, 1447, -1000, -1000,
	1114, 1114, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	163, 653, 80, 647, -1000, 291, -1000, 1421, -59, 14658,
	803, 353, -74, -1000, -192, -1000, 43468, -1000, 290, -1000,
	14658, 1114, -1000, 14658, 14658, -197, -1000, -1000, -198, -1000,
	-62, 1114, -84, -1000, -1000, 1114, -1000,
}
var sqlPgo = [...]int{

	0, 2708, 2707, 1738, 2706, 2156, 2705, 2704, 2703, 2702,
	2154, 2700, 2698, 2697, 2696, 2693, 2679, 2677, 2671, 2670,
	2669, 2667, 2665, 2663, 2662, 2659, 2658, 2657, 2142, 2656,
	2132, 2654, 2653, 2652, 2651, 2650, 2649, 42, 2646, 2645,
	2644, 2124, 2642, 2638, 2635, 2633, 2106, 2632, 2101, 2630,
	2628, 2091, 2627, 2621, 2618, 2088, 2617, 2067, 2614, 97,
	113, 2063, 2613, 2610, 2061, 2054, 2001, 2601, 1999, 2599,
	2593, 1995, 1980, 2591, 107, 2588, 2587, 2586, 1978, 1949,
	2585, 2579, 2577, 146, 2567, 1873, 2563, 2560, 2559, 2558,
	2557, 2556, 2555, 2551, 2550, 2549, 2547, 2546, 2543, 2537,
	2536, 2535, 2534, 2533, 2532, 161, 2530, 2529, 1826, 1803,
	2526, 2525, 38, 36, 17, 64, 210, 151, 2893, 144,
	2523, 2521, 2520, 2516, 2515, 2514, 32, 103, 104, 2512,
	98, 2511, 2510, 45, 41, 24, 22, 69, 90, 2508,
	2507, 2544, 29, 2506, 2505, 128, 2504, 26, 25, 360,
	155, 148, 75, 121, 2502, 2501, 2500, 52, 118, 8,
	2, 1, 6, 48, 12, 3, 2497, 5, 7, 2496,
	2486, 21, 81, 158, 2484, 27, 54, 2483, 2482, 127,
	2481, 60, 92, 1662, 96, 119, 1137, 134, 2480, 67,
	18, 66, 2478, 2477, 156, 47, 84, 141, 114, 2473,
	57, 160, 125, 80, 129, 132, 2472, 2468, 2465, 109,
	2464, 122, 82, 2461, 2458, 77, 2457, 95, 136, 2453,
	138, 111, 2448, 2447, 87, 2446, 123, 2441, 2437, 159,
	145, 115, 13, 59, 74, 11, 1637, 1636, 131, 91,
	49, 55, 2436, 819, 1191, 1322, 70, 2435, 85, 63,
	40, 51, 93, 140, 35, 2434, 2428, 133, 2426, 2424,
	2418, 2417, 2411, 102, 2407, 2406, 2404, 78, 37, 58,
	83, 44, 152, 135, 112, 149, 105, 2403, 89, 124,
	2399, 88, 2394, 2393, 1526, 117, 2392, 2390, 2387, 1459,
	1457, 1279, 1053, 2382, 2380, 1116, 1059, 2378, 2367, 86,
	2366, 116, 110, 94, 137, 153, 71, 2365, 120, 31,
	2364, 73, 33, 0, 1944, 1062, 2359, 126, 79, 2358,
	2357, 2355, 2354, 34, 14, 9, 15, 10, 16, 30,
	28, 2353, 2352, 130, 100, 72, 2351, 154, 2348, 2347,
	2345, 53, 2344, 23, 2343, 20, 2340, 2336, 19, 4,
	2335, 2334, 139, 2333, 99, 2332, 2170, 2331, 147, 2328,
	2327, 2040, 2326, 43, 106,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 128, 128, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	125, 125, 130, 130, 130, 132, 132, 129, 129, 124,
	124, 28, 28, 72, 72, 115, 65, 65, 65, 311,
	311, 312, 312, 111, 111, 112, 112, 112, 112, 113,
	113, 114, 114, 114, 39, 39, 39, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 40, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 48, 48, 49, 49, 49, 49, 49, 49, 50,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 51,
	51, 56, 56, 56, 54, 54, 54, 53, 53, 53,
	52, 52, 52, 55, 55, 55, 185, 185, 184, 184,
	188, 188, 57, 57, 57, 57, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 60, 60,
	60, 60, 60, 60, 60, 280, 280, 279, 58, 58,
	255, 255, 61, 61, 210, 210, 62, 62, 62, 62,
	62, 63, 63, 73, 73, 352, 352, 352, 356, 356,
	357, 357, 358, 358, 358, 358, 358, 358, 358, 354,
	354, 68, 68, 68, 68, 69, 69, 69, 70, 70,
	110, 110, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 33, 33, 33, 34, 34, 35, 35, 35, 36,
	36, 37, 37, 37, 79, 79, 79, 81, 78, 78,
	78, 80, 80, 80, 80, 82, 82, 83, 83, 83,
	83, 83, 84, 84, 305, 303, 303, 304, 304, 155,
	155, 155, 155, 155, 156, 156, 156, 310, 310, 310,
	310, 310, 310, 309, 309, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 97, 97, 97, 105, 105, 105, 105, 105,
	105, 105, 86, 86, 91, 91, 91, 91, 91, 87,
	87, 92, 92, 93, 93, 94, 94, 94, 94, 94,
	94, 88, 88, 88, 88, 96, 96, 96, 96, 95,
	95, 101, 101, 101, 101, 101, 101, 98, 98, 98,
	98, 99, 99, 99, 102, 102, 102, 102, 89, 89,
	90, 90, 103, 103, 104, 104, 104, 104, 104, 104,
	100, 100, 100, 353, 353, 355, 355, 66, 66, 44,
	44, 45, 45, 157, 157, 158, 158, 234, 234, 234,
	234, 159, 159, 131, 131, 131, 162, 163, 163, 160,
	160, 161, 161, 164, 164, 164, 166, 166, 167, 167,
	168, 168, 165, 165, 165, 233, 321, 321, 322, 322,
	322, 322, 322, 322, 323, 323, 323, 323, 323, 323,
	323, 319, 319, 320, 317, 317, 318, 318, 318, 318,
	359, 359, 232, 232, 171, 171, 324, 324, 324, 324,
	325, 325, 325, 325, 325, 328, 327, 326, 326, 326,
	326, 326, 266, 266, 266, 107, 107, 46, 46, 46,
	137, 137, 47, 47, 43, 43, 43, 214, 214, 175,
	175, 271, 271, 271, 148, 148, 126, 126, 126, 19,
	21, 21, 15, 15, 15, 15, 15, 15, 27, 27,
	24, 24, 215, 215, 216, 216, 67, 67, 71, 71,
	76, 76, 106, 106, 106, 106, 106, 106, 29, 29,
	29, 29, 38, 38, 38, 38, 75, 75, 361, 361,
	144, 144, 144, 144, 145, 145, 229, 229, 230, 230,
	362, 362, 231, 231, 231, 139, 138, 140, 140, 42,
	42, 42, 133, 133, 134, 134, 135, 135, 136, 136,
	363, 363, 64, 64, 64, 109, 109, 151, 151, 226,
	226, 226, 228, 228, 227, 227, 227, 200, 200, 200,
	108, 108, 180, 180, 190, 190, 191, 191, 277, 192,
	74, 74, 118, 118, 116, 116, 116, 116, 116, 116,
	116, 116, 117, 117, 117, 119, 119, 119, 119, 119,
	119, 119, 122, 122, 122, 123, 123, 123, 121, 121,
	334, 334, 334, 337, 337, 333, 335, 335, 336, 336,
	360, 360, 201, 201, 201, 170, 169, 169, 173, 173,
	172, 174, 174, 270, 270, 270, 198, 198, 197, 197,
	197, 197, 219, 219, 217, 217, 218, 218, 222, 222,
	223, 223, 223, 224, 224, 225, 225, 196, 196, 251,
	251, 221, 221, 220, 120, 120, 120, 179, 179, 179,
	181, 181, 241, 241, 241, 242, 242, 240, 240, 240,
	240, 272, 272, 272, 272, 272, 272, 272, 272, 350,
	350, 350, 351, 351, 269, 269, 273, 273, 273, 273,
	273, 273, 267, 267, 267, 267, 268, 268, 278, 278,
	204, 204, 204, 204, 202, 202, 203, 203, 274, 274,
	274, 274, 199, 199, 275, 275, 275, 235, 235, 281,
	281, 281, 299, 299, 178, 178, 178, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 283, 283,
	283, 283, 285, 285, 285, 284, 284, 284, 284, 284,
	284, 284, 284, 284, 284, 284, 284, 284, 284, 284,
	284, 284, 284, 298, 298, 298, 298, 298, 286, 286,
	293, 293, 294, 294, 295, 296, 287, 287, 288, 288,
	289, 290, 297, 297, 297, 297, 301, 301, 291, 291,
	291, 291, 291, 292, 211, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 212, 212,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 243, 243, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 244, 244, 245, 245, 245, 245, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 329, 329,
	329, 329, 329, 329, 329, 329, 331, 331, 332, 332,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	330, 330, 330, 330, 330, 330, 330, 330, 330, 330,
	338, 338, 339, 339, 341, 341, 342, 342, 343, 344,
	344, 344, 345, 346, 346, 340, 340, 347, 347, 347,
	348, 348, 349, 349, 349, 349, 349, 257, 257, 258,
	259, 265, 265, 265, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	146, 146, 146, 146, 146, 187, 187, 186, 186, 254,
	254, 252, 252, 256, 256, 205, 205, 300, 300, 300,
	300, 300, 300, 300, 206, 206, 206, 213, 207, 207,
	208, 208, 208, 208, 208, 248, 249, 209, 209, 209,
	250, 250, 260, 264, 264, 263, 262, 262, 261, 261,
	238, 238, 239, 239, 237, 236, 195, 195, 194, 194,
	193, 193, 364, 364, 189, 189, 276, 276, 276, 276,
	182, 182, 153, 153, 183, 183, 149, 149, 152, 152,
	150, 150, 150, 150, 176, 176, 177, 177, 147, 147,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 302, 302, 302, 253, 141, 141, 141, 142, 142,
	143, 143, 307, 307, 307, 308, 308, 308, 308, 306,
	306, 306, 306, 306, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 315, 315,
	315, 315, 315, 315, 315, 315, 315, 315, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316, 316, 316, 316, 316, 316,
	316, 316, 316, 316, 316,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 1, 1, 3, 4, 4, 4, 7, 4, 1,
	3, 2, 4, 1, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 4, 3, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 2, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 2, 3, 7, 7, 8, 8, 4, 5,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 8,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 2, 1, 0, 1,
	0, 9, 9, 5, 6, 4, 3, 5, 1, 3,
	1, 1, 9, 10, 8, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 2, 4, 7, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 6, 8, 8, 10, 8, 10, 6, 8,
	6, 8, 1, 0, 2, 0, 2, 2, 3, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 2, 2, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 2, 3, 2, 2, 8,
	11, 3, 3, 0, 3, 0, 3, 0, 3, 0,
	1, 0, 6, 7, 3, 6, 3, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 2, 0,
	8, 3, 2, 0, 1, 3, 1, 1, 3, 5,
	1, 1, 3, 3, 1, 2, 4, 4, 2, 3,
	5, 5, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 1, 0, 2, 2,
	1, 1, 1, 0, 2, 5, 2, 3, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 3, 0, 2,
	0, 1, 0, 2, 4, 2, 5, 3, 2, 0,
	1, 3, 3, 5, 1, 1, 3, 2, 4, 4,
	0, 8, 4, 6, 3, 3, 1, 5, 5, 0,
	2, 3, 1, 3, 2, 0, 3, 4, 5, 4,
	5, 4, 5, 2, 4, 1, 1, 0, 5, 0,
	2, 2, 2, 1, 1, 0, 4, 2, 1, 2,
	2, 4, 1, 3, 1, 2, 3, 2, 0, 2,
	5, 2, 1, 1, 2, 3, 0, 1, 1, 1,
	1, 2, 4, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 5, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	1, 1, 3, 3, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 5, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -28, -30, -33, -39,
	-40, -62, -48, -49, -50, -61, -57, -63, -64, -65,
	-66, -58, -72, -71, -73, -76, -74, -67, -68, -77,
	-85, -106, -107, -108, -109, -5, -10, 24, 35, -31,
	-32, 48, -35, -34, 112, 72, -46, -41, 74, 95,
	-336, 99, -51, -55, 103, 110, 113, 135, 144, 230,
	237, 258, 260, 262, 269, -116, -118, 256, -69, -70,
	-78, -79, -80, -81, -110, 281, -86, -87, -88, -89,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, -103, -104, 284, -29, -38, -75, 324,
	-6, -7, -8, -9, -11, -21, -42, -43, -44, -45,
	-47, -334, -52, -53, -54, -56, -119, -117, 377, 257,
	333, 36, 294, 62, 106, 264, -13, -14, -17, -16,
	-18, -15, -23, -25, -22, -24, -26, -27, -19, -20,
	-12, 349, 356, -122, -120, -121, -123, 274, 341, 304,
	381, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 2, 304, 344, 334, 88, 152, 242, -352, 2,
	-183, 304, 88, -150, -141, 370, 4, -313, -315, 20,
	21, 24, 34, 35, 36, 41, 45, 48, 49, 56,
	61, 62, 63, 68, 65, 66, 67, 70, 72, 73,
	76, 77, 78, 86, 87, 89, 91, 95, 97, 99,
	102, 103, 105, 110, 112, 111, 113, 123, 124, 129,
	131, 136, 142, 143, 144, 145, 153, 156, 158, 151,
	168, 169, 170, 174, 175, 176, 179, 178, 183, 184,
	187, 188, 191, 193, 195, 196, 199, 197, 201, 202,
	204, 203, 209, 211, 212, 214, 217, 220, 223, 226,
	227, 228, 229, 230, 231, 233, 235, 237, 239, 240,
	241, 242, 243, 245, 246, 248, 249, 250, 251, 252,
	256, 254, 255, 257, 258, 259, 260, 262, 264, 265,
	267, 282, 283, 295, 269, 270, 271, 272, 273, 277,
	275, 278, 279, 281, 284, 286, 289, 293, 294, 296,
	299, 300, 297, 292, 303, 305, 306, 307, 308, 309,
	310, 311, 312, 319, 320, 324, 325, 326, 327, 330,
	331, 332, 333, 335, 338, 339, 340, 345, 350, 351,
	352, 353, 354, 29, 37, 38, 39, 40, 42, 43,
	46, 47, 52, 53, 54, 57, 90, 92, 93, 109,
	114, 115, 125, 126, 127, 137, 139, 146, 147, 150,
	157, 159, 160, 161, 162, 163, 165, 172, 173, 181,
	198, 208, 210, 221, 225, 234, 236, 244, 266, 276,
	287, 288, 298, 301, 314, 315, 316, 321, 322, 337,
	341, 342, 380, 380, 2, 169, 241, 271, 284, -149,
	-141, 88, 380, 2, 304, 334, 344, -214, 88, 329,
	-141, 237, 22, 2, 97, 156, 332, 331, 22, 233,
	275, 306, 308, 2, 380, 2, 344, 304, 152, 88,
	334, -141, 2, -60, 2, 377, -59, -5, -41, -51,
	-61, -57, -10, -28, -30, -46, -48, -55, -65, -64,
	-66, -68, -72, -71, -74, -78, -79, -85, -108, -109,
	74, 24, 103, 281, 112, -356, 2, 22, -357, -358,
	74, 103, 135, 274, 156, 97, 331, 304, 2, 169,
	2, -141, 2, -352, 2, 169, 2, -356, 2, -141,
	2, -145, 2, 269, -141, 380, 380, 380, 380, 380,
	188, 56, 266, 278, -83, 320, -82, 314, -305, -84,
	2, -184, 199, -141, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 2, -105, 278, 35, 56, 22, 61, 89, 136,
	152, 153, 175, 69, 70, 240, 188, 170, 319, 176,
	279, 305, 320, 74, 335, 309, 111, 4, 88, 199,
	280, 314, 380, 380, 380, -360, 2, 304, 380, 380,
	380, 380, 380, 380, 380, 380, 380, -117, -119, -118,
	380, 380, 380, 380, -172, -173, 328, 164, 108, 219,
	-116, -118, 2, -334, -105, 278, 2, 56, 22, -303,
	2, -243, 215, -245, 368, 369, 363, 205, 355, -257,
	94, -247, -260, 109, 266, 377, -149, -246, 383, 9,
	-331, -118, 30, -258, -259, 50, -141, 7, 8, 5,
	6, -147, -283, -253, -292, 323, 116, 207, -329, -330,
	4, -313, -307, -284, -294, -288, -291, 165, 59, 80,
	81, 84, 82, 85, 280, 334, 51, 29, 114, 115,
	225, 234, 301, 321, 322, 146, 208, 147, 57, 137,
	181, 102, 38, 40, 42, 43, 52, 53, 90, 92,
	93, 125, 126, 127, 157, 159, 160, 161, 162, 163,
	210, 244, 287, 298, 315, 316, 342, -314, -295, -296,
	-289, -290, 75, 117, 134, 155, 148, 167, 171, 182,
	185, 194, 200, 222, 224, 263, 285, -297, -361, 2,
	320, 320, 2, -361, 2, -361, 2, -144, 2, 320,
	317, -337, 245, -333, -141, -337, 380, 380, 382, 380,
	-169, -170, 2, 22, 100, 377, 2, -272, 2, 375,
	-274, -149, -118, -273, 377, 216, -3, 2, -274, 146,
	-149, 2, -274, 146, -149, 2, -311, 146, -309, 9,
	-308, 5, 4, -313, -315, -314, 59, 2, -141, 2,
	-152, 146, -149, -306, 4, -313, -315, -314, -316, 22,
	25, 26, 27, 28, 30, 31, 32, 33, 44, 50,
	51, 55, 58, 60, 69, 74, 79, 80, 82, 81,
	83, 84, 85, 94, 96, 98, 100, 101, 104, 106,
	108, 116, 118, 130, 132, 133, 135, 138, 140, 149,
	152, 154, 164, 166, 177, 180, 186, 189, 190, 205,
	206, 207, 213, 215, 216, 218, 219, 232, 238, 247,
	261, 274, 280, 290, 302, 304, 313, 317, 318, 323,
	328, 329, 334, 336, 343, 344, 346, 347, 348, 349,
	317, 382, -183, -176, -141, -237, -236, 379, -243, 2,
	-243, 2, 2, 88, 304, 354, 22, 133, 377, -194,
	-195, -236, -237, 2, -184, 146, -311, 146, 2, -184,
	2, 152, -141, 146, 2, -141, 22, 133, 2, 166,
	2, 166, 2, -275, 2, -274, -185, 146, 2, -184,
	-185, 146, 2, -153, 146, 2, -152, -141, 146, 2,
	-312, 146, 2, -311, -210, 377, -280, 2, -279, -308,
	341, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 278, 215, 382, -184,
	-243, -255, 377, 133, -243, 215, -141, 2, 282, 2,
	377, -83, 54, 320, -230, 2, -231, -138, -139, -140,
	168, 239, 243, 354, 317, 360, 133, -303, -188, 379,
	-105, 2, -311, 2, 282, 2, 240, 279, 56, 133,
	2, 2, -353, 2, 215, 133, 2, 133, 2, 133,
	2, 133, 2, 133, 2, 2, 240, 279, 2, 130,
	2, 319, 2, 2, 133, 2, 168, 239, 295, 2,
	304, 344, 2, 133, 133, 354, 2, -199, -274, -172,
	-173, -220, -197, 130, -217, -218, 186, 118, 213, -201,
	22, 100, -201, -201, 45, 378, 378, -105, 282, 2,
	10, 11, 58, 34, 368, 369, 370, 371, 128, 372,
	373, 366, 367, 365, 358, 359, 362, 291, 23, 71,
	361, 360, 64, 192, 268, 119, 120, 121, 122, 253,
	13, 14, 15, 27, 218, 185, 355, 148, 285, 363,
	16, 17, 18, 167, 37, 149, -146, -154, -243, -243,
	-243, -243, -243, 224, -193, -238, 375, -118, 377, 377,
	-118, -243, -186, 377, 7, -118, -252, 375, -261, -243,
	-194, 377, 5, 377, 5, -338, 350, 130, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 236, -301, 345,
	-301, -301, -285, 377, -285, -286, 377, -285, 351, 356,
	377, -229, -230, -229, 317, -145, 382, -337, -177, 377,
	377, -189, -276, -243, 370, -189, -186, -243, 75, -204,
	171, 200, 134, 182, 263, 155, 7, -60, -240, 383,
	377, 370, -269, 356, -118, -273, 377, -272, -149, 377,
	-128, 254, -127, 21, 24, 103, 339, 109, 292, 310,
	-163, 270, -162, 228, 254, 109, 349, 109, 112, 254,
	292, 310, -163, 270, 254, 109, 383, 112, -311, -150,
	382, -306, 370, -141, 2, -149, 2, 65, 66, 354,
	296, 378, -182, -149, -195, 377, -171, 205, -137, -335,
	349, 205, -171, 377, -142, 146, 2, -141, -335, 205,
	-275, -151, -149, -151, 281, -141, 31, -130, 382, 49,
	259, 109, -130, 109, -130, 382, 109, -130, 109, 382,
	109, -186, 378, 382, -352, -358, 74, 377, 31, -254,
	-281, -282, -284, -293, -287, -291, -292, 41, 47, 46,
	173, 172, 311, 198, 276, 288, 337, 150, 39, 214,
	158, 4, 157, 159, 160, 161, 162, 163, 287, 38,
	244, 126, 127, 125, 102, 93, 92, 210, 43, 42,
	-295, -296, -289, -290, 90, 315, 316, 165, 40, 53,
	52, 342, 298, -312, -352, -305, -186, 31, -230, 2,
	-362, 382, 184, -156, 191, 204, 142, 216, 352, -310,
	5, 4, -253, -266, 94, 188, -292, 8, 369, -302,
	7, 368, -304, -303, -304, 78, 379, -306, -184, 22,
	283, 2, -305, -355, 130, -352, -305, -305, -305, -305,
	-305, 278, -60, 130, -141, 184, -305, 2, -305, 2,
	304, 152, 304, -130, 382, -220, -197, -198, -197, -221,
	-220, 331, -218, -217, -222, -243, 22, -225, 124, 201,
	-243, -245, -117, -117, -117, -174, -270, -243, 238, 152,
	-305, -299, -281, -298, 249, 250, 248, 252, 251, -281,
	-306, 314, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, -243, -243, -243, -243, -243, -243,
	-243, -243, -243, -243, 185, 148, 285, 37, 149, -243,
	317, -243, -243, -243, -243, 197, 205, 207, 323, 116,
	330, 100, 211, -364, 302, 33, -250, -118, 377, -265,
	28, 290, 22, -257, 266, 377, -238, -243, -239, -187,
	-186, 378, 382, -187, -256, -252, -264, -263, 346, 378,
	-186, 343, 22, 100, 370, 2, 7, -211, 353, 196,
	91, 143, 195, -212, 273, -339, 123, 138, 377, 378,
	2, 378, 2, 378, 2, 378, 2, -243, -243, -205,
	2, -300, -186, 4, 353, 196, 91, 143, 195, 273,
	-205, 2, -206, 2, -243, -186, -207, -244, -245, 368,
	369, 363, 377, 266, -208, 2, -243, -187, -243, 44,
	180, 318, -209, -243, 133, -186, -243, -243, -243, -186,
	-186, 2, -186, 2, 377, 7, 7, 314, 314, 7,
	-145, -333, 31, -176, -186, -179, 382, 133, 31, 4,
	-179, 378, 382, 171, 171, -272, -204, 171, -202, 222,
	-202, -202, -350, 377, 376, -269, -306, 375, 384, -187,
	2, -268, -267, 31, -141, 220, 378, -149, 382, 317,
	-215, 69, 60, -233, 146, 60, -317, -141, 69, -318,
	55, 329, 238, 132, -215, 69, -215, 69, 69, -274,
	34, -74, 112, 133, -306, 317, -274, 229, -311, 67,
	317, 34, -74, 112, 133, 317, -152, -306, 67, -278,
	357, -141, 349, 130, 66, 133, 378, 382, -157, -176,
	-158, -141, -234, -233, -319, -320, -317, 152, 329, 117,
	31, 109, 229, 109, 31, 215, 205, -133, 307, 109,
	-235, 347, -226, -74, 377, 94, 31, -226, -190, -191,
	-277, -192, -149, 377, -141, -184, -185, -185, -152, -153,
	-141, -311, -312, 378, -60, -279, 317, 336, -158, -59,
	24, 74, 103, 378, 382, -178, 30, 375, -211, 377,
	-278, 133, 360, 317, 378, 320, -231, -155, 243, 289,
	255, 277, 8, 7, 7, 382, -306, -354, -141, 278,
	-60, -149, -152, -149, -274, -198, -221, -223, -302, 377,
	369, -224, 266, 267, 382, -126, 32, 98, 174, -149,
	354, -243, -243, 317, -364, 302, -250, -243, 197, 207,
	323, 116, 330, 100, 211, 133, 377, -244, -244, -186,
	-243, 377, -186, 376, 386, 378, -243, 376, 376, 382,
	-262, -263, 104, -243, -173, 382, -172, -243, -186, -186,
	378, 378, 317, 317, 317, 317, 377, -344, 223, 377,
	377, -243, 31, 382, 378, 133, 378, 378, -213, 232,
	378, 10, 11, 368, 369, 370, 371, 128, 372, 373,
	366, 367, 365, 358, 359, 360, 64, 192, 268, 13,
	14, 15, 167, 149, -244, -244, -244, -186, 377, 378,
	-248, -249, 133, 130, 31, -209, -209, -209, 378, 133,
	-186, 382, 382, 382, 378, 378, 378, 7, 378, 382,
	378, 354, 354, 378, 377, 378, 378, -235, -276, -181,
	2, -272, -306, -235, -243, -272, -272, -203, 336, 215,
	171, -272, -267, 378, -351, 7, -269, -268, 7, -242,
	-241, 131, 203, 378, -141, 377, -269, 378, -127, -149,
	-141, -141, 205, -233, 146, -132, 205, -281, -141, 377,
	377, 174, 174, -141, -141, 146, -141, 146, -141, -141,
	-128, 254, -74, 67, 377, -149, 254, -311, 349, 354,
	-141, -74, 67, 377, -306, 254, 354, -111, 145, 211,
	217, 242, 88, 304, 152, 296, 133, -149, 378, 378,
	382, -142, 152, -142, -74, -184, -311, -311, -74, -149,
	109, -134, 105, -363, 360, -141, -219, -217, -243, -200,
	-228, 261, 215, -182, 341, -141, -200, -180, 382, 133,
	360, -182, -130, -130, -130, -130, -354, -311, 378, -281,
	375, 376, 7, 7, -114, 349, -354, -303, -303, -138,
	327, 63, 243, -303, 382, -224, -243, -270, -149, 383,
	-243, -243, -244, -244, 133, 377, -243, -254, 27, 27,
	378, -187, 382, -239, -243, 378, -252, 106, -243, 313,
	378, 343, -173, -173, -173, 5, 196, 143, 195, -212,
	195, -212, -212, 7, -345, -141, 377, 347, -172, 378,
	-299, -281, -243, -248, -243, -299, -281, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, -244, -244, -244, -244,
	-244, -244, -244, -244, -244, -244, 100, 205, 211, -244,
	382, -187, -249, -248, -243, -243, -281, 378, 378, 378,
	-186, -243, -243, -243, 378, 7, -59, -196, 138, -278,
	382, -196, -203, 377, -243, -272, 376, 378, 382, -268,
	376, 382, 385, 360, -269, 377, -176, -267, 317, 317,
	109, 205, 338, -321, -318, -243, -175, -271, -141, -332,
	377, -329, -330, -147, 377, 377, -125, 103, 281, -216,
	109, -130, 109, -130, 317, -215, 69, 354, -186, 317,
	229, -246, -147, -141, 354, -186, 317, -246, -114, 133,
	303, -36, -37, 152, 231, -306, -141, -149, -152, 296,
	-159, 151, -234, 377, -142, 377, 377, -171, -137, 377,
	-141, -135, 179, -363, -309, -335, -200, -200, -189, 206,
	68, 378, -235, -191, -181, -243, 378, -115, 76, -115,
	7, 376, 378, -113, 217, -112, -141, 5, -141, 216,
	378, -126, -306, 27, 27, -243, -254, 378, -243, -243,
	378, -243, 376, -243, 5, -243, 378, 378, 378, 378,
	-346, -141, -243, 378, 378, 378, -249, 133, 100, 211,
	377, -243, 378, 378, 382, 378, 378, 378, 378, -251,
	140, 45, -272, -251, -176, -240, 7, -241, -306, 375,
	-268, -176, 378, -141, -141, -233, 109, -322, 69, -323,
	58, 117, 74, 205, 207, 329, 238, 55, 94, 247,
	378, 378, 382, -148, -194, 58, -148, -243, 377, -175,
	-176, 205, 94, 205, 94, 87, 325, -141, -141, -149,
	-141, -141, -246, 378, -149, -311, 377, -246, 378, -306,
	-312, 314, 382, 22, 377, -163, -163, -160, -161, 228,
	149, -175, 377, -176, -157, 31, -175, 215, -136, 178,
	-363, -309, -133, -227, 377, 215, -74, -200, 360, 87,
	87, 376, 382, 377, 360, 360, -126, -243, -243, 378,
	378, -173, -340, 228, 378, -244, 133, 377, -254, 378,
	-243, -341, 348, -243, -186, -341, 378, -269, 7, 378,
	-233, -141, -306, -141, 117, 146, 207, 174, 377, -244,
	-149, -232, -359, 73, 300, -271, -126, -306, -126, 378,
	-186, 378, 378, 207, 207, -243, -281, -130, -130, 317,
	317, 317, -186, 317, -246, -37, -176, 45, 226, 378,
	-175, 378, 378, -74, 378, -149, -363, -309, -134, 101,
	-176, 69, -250, 377, 377, -112, -113, -311, -311, 378,
	-173, 45, -244, -254, 378, 378, -342, -343, -141, -268,
	376, -323, -142, 205, -243, -143, 377, -159, 377, -148,
	-173, 247, -129, 58, -141, -141, 377, -173, 377, 378,
	187, 242, -149, -232, 378, -159, -232, 377, -309, -135,
	331, 206, 378, -141, -312, -312, 378, -347, 242, 267,
	-186, 378, 382, 31, 109, 378, -324, 193, -141, -176,
	-126, 378, -149, -124, 336, -306, -186, 378, -186, 377,
	377, 377, -159, -232, -159, -175, -136, 281, -235, 378,
	378, 378, -348, -349, 37, 326, 78, -243, -348, -343,
	-345, 117, -325, -328, -327, 215, 134, 227, 286, 378,
	378, -171, -243, 378, 378, -176, -176, -176, -159, 378,
	-190, -114, -114, -349, 235, 129, 266, 235, 129, -141,
	-327, 215, -328, 215, 331, 97, -324, 378, 378, 378,
	-232, -235, 27, -326, 202, 259, 49, 281, -326, -325,
	377, 377, -131, 49, 259, -159, -349, 20, 207, 94,
	-164, -162, -165, -162, 378, 341, 378, 341, -166, 377,
	183, 382, -161, -160, -167, -168, -243, 194, 312, -164,
	377, 382, 378, 382, 377, -167, -164, -168, -167, 378,
	378, 382, -161, -160, -165, 382, -165,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 321, 322, 0, 0, 166, 168, -2, 0,
	0, 0, 189, 190, 0, 0, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 700, -2, 0, 301, 303,
	312, 314, 316, 318, 319, 0, 375, 377, 379, 381,
	383, 385, 387, 389, 391, 393, 395, 397, 399, 401,
	403, 404, 406, 408, 410, 0, 622, 624, 626, -2,
	59, 61, 63, 65, 67, 77, 170, 172, 174, 176,
	179, 738, 193, 195, 197, 199, -2, 749, 0, 0,
	0, -2, 0, -2, -2, -2, 68, 69, 70, 71,
	72, 73, 83, 84, 85, 86, 87, 75, 79, 80,
	82, 0, 0, 715, 717, 719, 721, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 43, 49, 51, 53,
	57, 58, 0, 0, 0, 0, 0, 0, 0, 132,
	285, 0, 1320, 1244, 1250, 1251, 1275, 1276, 1277, 1294,
	1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
	1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
	1315, 1316, 1317, 1318, 1319, 1321, 1322, 1323, 1324, 1325,
	1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
	1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,
	1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
	1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
	1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
	1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
	1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
	1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
	1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
	1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
	1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435,
	1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485,
	1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495,
	1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505,
	1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515,
	1516, 1517, 158, 160, 161, 0, 0, 0, 0, 0,
	1246, 1320, 167, 169, 0, 0, 0, 0, 0, 587,
	276, 1383, 278, 280, 0, 0, 0, 0, 183, 184,
	185, 186, 187, 188, 191, 192, 0, 0, 0, 0,
	0, 275, 273, 222, 223, 0, 258, 259, 260, 261,
	262, 264, 226, 228, 230, 231, 233, 235, 237, 239,
	241, 243, 244, 246, 248, 249, 251, 253, 254, 256,
	588, 0, 0, 0, 0, 0, 282, 288, 289, 290,
	292, 293, 294, 295, 296, 297, 298, 0, 138, 0,
	488, 271, 269, 0, 134, 0, 619, 0, 284, 620,
	621, 616, 617, 1410, 645, 302, 304, 313, 315, 317,
	-2, -2, 1504, -2, 339, -2, 347, 1510, 0, 350,
	351, 354, -2, 218, 376, 378, 380, 382, 384, 386,
	388, 390, 392, 394, 396, 398, 400, 402, 405, 407,
	409, 411, 412, 0, 0, 0, 416, 0, -2, -2,
	0, 0, 0, 0, 0, -2, 0, -2, 0, 0,
	-2, -2, 0, 0, -2, 0, 0, 415, 417, 418,
	419, 0, 623, 625, 627, 0, 576, 740, 60, 62,
	64, 66, 171, 173, 175, 177, 180, -2, 713, 714,
	194, 196, 198, 200, -2, 0, 744, 744, 744, 0,
	0, 714, 712, 0, 305, 0, 307, 0, 416, 310,
	311, 355, 356, 950, 0, 0, 0, 0, 0, 0,
	1023, 1053, 1055, 1475, 1504, 0, 1057, 1058, 0, 1060,
	1062, 1063, 0, 1066, 1067, 1219, 1246, 1260, 1261, 1262,
	1263, 0, 0, 1266, 0, 1268, 1269, 1270, 1121, 1077,
	-2, -2, 1258, 878, 879, 880, 881, -2, 1518, 1081,
	1084, 1087, 1090, 1091, 1094, 1095, 0, 1459, 1476, 1477,
	1500, 1501, 1509, 1513, 1514, 1483, 1497, 1484, 1471, 1481,
	1495, 1326, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1284, 912, 913,
	918, 919, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 921, 647, 629,
	638, 647, 631, 632, 633, 634, 635, 636, 637, 640,
	0, 730, 1389, 733, 1257, 731, 716, 718, 0, 720,
	0, 0, 724, 746, 745, 0, 785, 728, 729, 739,
	800, 838, 815, 806, 0, 0, 2, 74, 0, 1483,
	-2, 76, 0, 1483, 838, 78, 0, 1483, 139, 140,
	373, 374, 1285, 1286, 1287, 1288, 1518, 81, 0, 88,
	508, 1483, 1249, 0, 1289, 1290, 1291, 1292, 1293, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	0, 0, 286, 287, 1254, 1252, 1253, 0, 162, 163,
	164, 165, 323, 0, 0, 0, 0, 0, 0, 1247,
	1228, 1226, 1227, 178, 555, 1483, -2, 1483, 579, 555,
	583, -2, 737, 1483, 661, 277, 279, 0, 182, 0,
	674, 0, 676, 0, 691, 844, 124, 1483, 203, 216,
	124, 1483, 206, 124, 1483, 209, 1242, 124, 1483, 212,
	213, 1483, 215, 141, 272, 0, 0, -2, 265, 267,
	-2, 263, 227, 229, 232, 234, 236, 238, 240, 242,
	245, 247, 250, 252, 255, 257, -2, 0, 0, 0,
	487, 0, 0, 0, 618, 0, 644, 320, 0, 336,
	0, 338, 1470, -2, -2, 342, 648, 652, 653, 654,
	0, 0, 0, 0, 0, 0, 0, 352, 219, 0,
	413, 414, 422, 423, 0, 426, 447, 459, 0, 0,
	430, 432, 486, 434, 0, 0, 436, 0, 438, 0,
	440, 0, 442, 0, 444, 446, 448, 460, 450, 739,
	452, 0, 454, 458, 0, 463, 0, 465, 466, 467,
	0, 0, 473, 0, 0, 420, 421, 124, 842, -2,
	0, 757, 782, 0, 760, 761, 0, 0, 0, 0,
	742, 743, 0, 0, 0, 702, 703, 306, 0, 309,
	0, 0, 0, 0, 1154, 1155, 1156, 1157, 1158, 1159,
	1162, 1163, 1160, 1161, 1164, 1165, 0, 0, 0, 0,
	0, 1166, 0, 0, 0, 0, 0, 0, 0, 0,
	1167, 1168, 1169, 0, 0, 1171, 0, 1173, 0, 0,
	0, 0, 0, 0, 1233, 0, 0, 1170, 955, 956,
	957, 989, 990, 0, 1054, 1230, 1223, 1056, 0, 1176,
	-2, 1177, 0, 0, 1059, 1064, 1065, 1176, 0, 1218,
	-2, 0, 1265, 0, 947, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1199, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 897, 915, 926,
	923, 922, 899, 0, 898, 896, 0, 900, 0, 0,
	0, 628, -2, 630, 0, 642, 0, 732, 0, 0,
	0, 789, 1234, 1238, 1239, 789, 0, 1177, 0, 0,
	0, 0, 835, 835, 835, 833, 809, 0, 815, 0,
	-2, 839, 827, 0, -2, 806, 0, 0, 840, 0,
	89, 613, 103, 0, 613, 613, 0, 0, 0, 0,
	0, 99, 507, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 829, 1245,
	0, 1224, 1225, 324, 325, 326, 328, 0, 478, 0,
	154, 0, 0, 1240, 1229, 494, 0, 0, 577, 0,
	736, 0, 0, 0, 0, 1483, 586, 1278, 663, 0,
	848, 0, 677, 0, 0, 845, 0, 201, 0, 122,
	123, 0, 204, 0, 207, 0, 0, 210, 0, 0,
	0, 0, 739, 0, 0, 291, 0, 0, 739, 0,
	1179, 856, 857, 858, 859, 860, 947, 863, 864, 865,
	866, 867, 868, 869, 870, 871, 872, 873, 874, 875,
	876, 877, 885, 886, 887, 888, 889, 890, 891, 892,
	893, 894, 895, 909, 0, 884, 884, 884, 901, 902,
	910, 911, 916, 917, 928, 929, 931, 933, 927, 927,
	927, 924, 925, 829, 0, 0, 0, 0, -2, 344,
	0, 650, 0, 655, 364, 365, 366, 657, 658, 348,
	367, 368, 369, 370, 371, 372, 0, 572, 0, 574,
	1271, 0, 345, 357, 346, 349, 0, 220, 424, 425,
	427, 428, 429, 433, 0, 483, 435, 437, 439, 441,
	443, 451, 455, 739, 461, 464, 468, 469, 470, 471,
	0, 0, 0, 575, 0, 757, 782, 706, 756, 707,
	781, 783, 758, 759, 764, 768, 769, 772, 775, 776,
	766, 950, 725, 726, 727, 750, 751, 598, 0, 0,
	308, 951, 852, 853, 903, 904, 905, 906, 907, 952,
	953, 0, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, -2, -2, -2, -2, -2, -2, -2, -2,
	976, 977, 978, 979, 980, 981, 982, 983, -2, -2,
	-2, 987, 988, -2, 1172, 1174, 0, 1233, 0, -2,
	0, -2, -2, -2, -2, 1001, 0, 1003, 1006, 1008,
	1010, 0, 0, 0, 0, 1232, 1020, 1210, 0, 0,
	1151, 1152, 1153, 1005, 0, 0, 1231, 1222, 0, 0,
	1175, 1061, 0, 0, 0, 1183, 1217, 1213, 0, 1068,
	749, 0, 0, 0, 0, 1075, 0, 1274, 934, 935,
	936, 937, 938, 939, 948, 1131, 0, 0, 0, 1082,
	1083, 1085, 1086, 1088, 1089, 1092, 1093, 0, 0, 0,
	1099, 0, 1186, -2, -2, -2, -2, -2, -2, -2,
	0, 1101, 0, 1103, 1177, 1196, 0, 0, 1024, 0,
	0, 0, 0, 1504, 0, 1106, 1177, 1204, 0, 0,
	0, 0, 0, 1177, 0, 1209, 0, 0, 0, 0,
	0, 1117, 0, 1119, 0, 0, 0, 0, 0, 0,
	641, 734, 0, 0, 0, 848, 0, 0, 0, 1237,
	848, 784, 0, 0, 0, 0, 0, 0, 830, 834,
	831, 832, 0, 0, 815, 827, 797, 0, 0, 0,
	804, 805, 826, 0, 825, 814, -2, 0, 0, 0,
	0, 0, 612, 105, 1483, 0, 126, 0, 0, 545,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 0, 0, 506, 0, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 1248, 0, 144,
	0, 1255, 0, 0, 479, 0, 0, 0, 0, 0,
	493, 1254, 495, 497, 498, 499, 500, 1279, 0, 1279,
	0, 0, 0, 0, 0, 0, 0, 665, 671, 0,
	763, 0, 689, 679, 0, 0, 0, 689, 693, 694,
	696, 697, 0, 0, 846, 217, 124, 124, 1243, 124,
	124, 142, 214, 274, 224, 266, 0, 0, 0, 268,
	0, 0, 0, 270, 0, 849, 851, 0, 861, 0,
	153, 0, 0, 0, 337, 0, 649, 656, 0, 361,
	0, 363, 573, 1273, 1272, 0, 221, 485, 299, 453,
	456, 480, 481, 482, 843, 710, 711, 0, 770, 0,
	0, 767, 773, 774, 0, 753, 596, 597, 0, 0,
	0, -2, -2, 0, 0, 0, 1021, -2, 1002, 1004,
	1007, 1009, 1011, 0, 0, 0, 0, 0, 0, 0,
	1022, 1176, 0, 1220, 1223, -2, 1178, 1181, 1182, 0,
	0, 1214, 0, 0, 0, 0, 748, 749, 749, 749,
	1074, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	0, 0, 0, 0, 1098, 0, 1100, 1102, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1027, 1028, 1029, 0, 1176, 1105,
	1202, 1203, 0, 0, 0, 0, 0, 0, 1111, 0,
	1208, 0, 0, 0, 1115, 1116, 1118, 0, 882, 0,
	908, 930, 932, 920, 739, 1256, 786, 778, 1235, 829,
	788, 790, 1236, 778, 1178, 817, 0, 819, 0, 0,
	0, 821, 0, 810, 0, 812, 827, 802, 0, 0,
	795, 0, 794, 815, 823, 0, 0, 841, 104, 602,
	0, 0, 0, 107, 1483, 115, 0, 527, 0, 0,
	0, 0, 0, 615, 116, 1483, 124, 1483, 124, 117,
	90, 613, 91, 0, 0, 608, 0, 600, 0, 0,
	599, 92, 0, 0, 610, 0, 0, 153, 0, 0,
	0, 0, 0, 0, 0, 155, 0, 1241, 502, 554,
	0, 0, 1279, 0, 491, 555, 580, -2, 582, 0,
	0, 667, 671, 0, 670, 737, 689, 762, 847, 672,
	689, 0, 0, 0, 681, 678, 675, 848, 0, 0,
	0, 0, 202, 205, 208, 211, 281, 0, 0, 1180,
	0, 854, 0, 0, 133, 0, 283, 334, 335, 340,
	359, 360, 362, 358, 0, 0, 0, 752, 598, 0,
	954, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1211, 0, 0, 0, 1222, -2, 1184, 1212, 1216, 0,
	1069, 0, 0, 0, 0, 1267, 940, 941, 942, 943,
	944, 945, 946, 0, 1129, 1130, 1134, 0, 0, 1080,
	0, 0, 1185, 1195, 1197, 1025, 1026, 1030, 1031, 1032,
	1033, 1034, 1035, 1036, 1037, 1038, 1039, -2, -2, -2,
	1043, 1044, 1045, -2, -2, -2, 0, 0, 0, 1198,
	0, 0, 1200, 1201, 1205, 1206, 0, 1108, 1109, 1110,
	1207, 0, 0, 0, 914, 0, 0, 780, 0, 787,
	0, 780, 818, 0, 837, 820, 800, 811, 0, 808,
	798, 0, 799, 0, 827, 0, 0, 807, 0, 0,
	0, 0, 125, 525, 544, 0, 0, 589, 595, 595,
	0, 1078, 1079, 0, 0, 0, 109, 0, 0, 0,
	0, 113, 0, 119, 0, 0, 0, 0, 0, 0,
	0, 96, 0, 0, 0, 0, 0, 95, 131, 0,
	0, 327, 329, 0, 333, 474, 475, 508, 508, 156,
	510, 0, 496, 0, 0, 0, 494, 0, 578, 0,
	0, 669, 671, 0, 662, 663, 181, 673, 687, 688,
	686, 0, 689, 695, 692, 698, 0, 0, 135, 0,
	0, 855, 862, 151, 1372, 149, 146, 148, 300, 765,
	771, 754, 598, 0, 0, -2, 0, 1014, -2, -2,
	1147, 1178, 1221, 1215, 1264, 749, 1070, 1072, 1073, 949,
	1136, 1133, 0, 1120, 1096, 1097, 1194, 0, 0, 0,
	0, 1178, 1149, 1107, 0, 1113, 1114, 883, 735, 1125,
	0, 0, 791, 1125, 0, 815, 813, 796, 792, 0,
	803, 0, 824, 604, 606, 106, 0, 526, 0, 529,
	0, 0, 0, 0, 535, 536, 0, 0, 0, 0,
	546, 553, 0, 598, 1259, 0, 598, 0, 0, 0,
	0, 0, 121, 0, 0, 614, 0, 124, 124, 603,
	0, 0, 97, 0, 609, 601, 0, 98, 0, 611,
	143, 0, 0, 331, 0, 476, 477, 489, 509, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 659, 671,
	0, 664, 665, 0, 0, 0, 680, 690, 0, 0,
	0, 850, 0, 0, 0, 0, 755, -2, -2, 1015,
	1148, 0, 749, 0, 1122, -2, 0, 0, 0, 1150,
	0, 722, 0, 779, 777, 723, 836, 827, 0, 822,
	108, 0, 530, 531, 1279, 0, 534, 537, 0, 539,
	1281, 502, 0, 550, 551, 590, 591, 594, 592, 595,
	749, 548, 0, 110, 111, 120, 128, 112, 118, 0,
	0, 0, 749, 0, 828, 330, 0, 0, 0, 553,
	0, 543, 502, 492, 553, 0, 0, 666, 667, 0,
	0, 0, 699, 0, 0, 150, 0, 145, 147, 1071,
	1139, 0, -2, 0, 1051, 1112, 1124, 1126, 0, 801,
	793, 528, 532, 0, 0, 559, 0, 547, 0, 598,
	0, 0, 130, 0, 605, 607, 0, 0, 0, 332,
	0, 0, 0, 502, 553, 490, 502, 0, 668, 669,
	0, 683, 848, 685, 0, 0, 152, 0, 0, 0,
	1135, 1052, 0, 0, 0, 538, 564, 0, 0, 0,
	593, 1069, 555, 114, 0, 127, 0, 0, 0, 0,
	0, 0, 541, 502, 584, 0, 660, 0, 684, 153,
	153, 1132, 1137, 1140, -2, 1443, 1317, 0, 1138, 1127,
	1128, 0, 540, 560, 561, 0, 556, 557, 558, 1280,
	552, 559, 129, 100, 102, 0, 0, 0, 542, 553,
	848, 136, 137, 0, 1142, 1143, 1144, 1145, 1146, 533,
	562, 0, 563, 0, 0, 0, 564, 0, 0, 505,
	502, 682, 0, 565, 0, 568, 569, 0, 566, 549,
	0, 0, 501, 503, 504, 585, 1141, 567, 570, 571,
	0, 0, 0, 0, 511, 0, 512, 0, 510, 0,
	0, 0, 509, 515, 0, 518, 520, -2, 0, 513,
	0, 0, 516, 0, 0, 0, 514, 519, 0, 517,
	510, 0, 509, 524, 522, 0, 523,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:921
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:933
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:968
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1050
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1062
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1086
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1112
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1118
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1124
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1133
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1142
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1154
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1226
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1249
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1259
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1322
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1376
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1379
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1417
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1421
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1486
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1490
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1508
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1543
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			return helpWith(sqllex, "DELETE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1580
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1581
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1590
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1649
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1680
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "INSERT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1778
		{ /* SKIP DOC */
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1799
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1806
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1810
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1830
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1885
		{
			return helpWith(sqllex, "GRANT")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1905
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1974
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			return helpWith(sqllex, "RESET")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			return helpWith(sqllex, "RESET")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2007
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2015
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2018
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{ /* SKIP DOC */
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2026
		{ /* SKIP DOC */
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2027
		{
			return unimplemented(sqllex, "set local")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2043
		{
			return helpWith(sqllex, "EXPERIMENTAL SCRUB")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubDatabase, Database: Name(sqlDollar[4].str)}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2059
		{
			return helpWith(sqllex, "EXPERIMENTAL SCRUB DATABASE")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2080
		{
			return helpWith(sqllex, "EXPERIMENTAL SCRUB TABLE")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2120
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2192
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			return unimplemented(sqllex, "set from current")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = Low
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = Normal
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = High
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2291
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2309
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2313
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2315
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2318
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2319
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2325
		{
			return helpWith(sqllex, "SHOW")
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.str = "client_encoding"
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2349
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2357
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2360
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2374
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2379
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2382
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2404
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2431
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2447
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2452
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2482
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2500
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2502
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2518
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2538
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2541
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2549
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2553
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2557
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2560
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2571
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2582
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2593
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2597
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2601
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2605
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2619
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2623
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2629
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2633
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2637
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2643
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2671
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2763
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2778
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = DropDefault
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 508:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2799
		{
			sqlVAL.str = ""
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2863
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 524:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2905
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2998
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3032
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3069
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3103
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3112
		{
			return unimplemented(sqllex, "match full")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3113
		{
			return unimplemented(sqllex, "match partial")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			return unimplemented(sqllex, "match simple")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3115
		{
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3130
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3134
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3150
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = NoAction
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = Restrict
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = Cascade
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = SetNull
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = SetDefault
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3201
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3209
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = nil
		}
	case 582:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3241
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3270
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3281
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = true
		}
	case 588:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = false
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3311
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3312
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 595:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3316
		{
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = Ascending
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = Descending
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3367
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3369
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = true
		}
	case 613:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = false
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3402
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3403
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3440
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3441
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3442
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3460
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3465
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3483
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3498
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3501
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3502
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.str = ""
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.str = ""
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3528
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3544
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3561
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3563
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = ReadOnly
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = ReadWrite
		}
	case 659:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3627
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.str = ""
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.str = ""
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.str = ""
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.str = ""
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3671
		{
		}
	case 672:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			return helpWith(sqllex, "INSERT")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3754
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 690:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3789
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3793
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 693:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3794
		{
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3886
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3956
		{
			return helpWith(sqllex, "SELECT")
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3957
		{
			return helpWith(sqllex, "VALUES")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3958
		{
			return helpWith(sqllex, "TABLE")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4005
		{
			return helpWith(sqllex, "SELECT")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4049
		{
			return helpWith(sqllex, "TABLE")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4060
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4061
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4062
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4069
		{
			return unimplemented(sqllex, "cte")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4072
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4073
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4076
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4077
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4080
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4081
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = true
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = false
		}
	case 744:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = false
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = true
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4104
		{
		}
	case 747:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4105
		{
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4135
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4139
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4183
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4236
		{
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4239
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4240
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = false
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = true
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4311
		{
			return helpWith(sqllex, "VALUES")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4313
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &From{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4340
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4350
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4368
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4395
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 801:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4432
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4457
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = nil
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4504
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = true
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = false
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4556
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4566
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4570
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.str = astFullJoin
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.str = astLeftJoin
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.str = astRightJoin
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.str = astInnerJoin
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4615
		{
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4616
		{
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4702
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4716
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4724
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4748
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 862:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4759
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4765
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4769
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = jsonbColType
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = jsonColType
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4785
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4789
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4857
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = nil
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4878
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4890
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4906
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4922
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5018
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 920:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5050
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 922:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 923:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5089
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5090
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 930:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 932:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = year
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = month
		}
	case 936:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = day
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = hour
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = minute
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5148
		{
			sqlVAL.union.val = month
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5152
		{
			sqlVAL.union.val = hour
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = minute
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = minute
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 947:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = nil
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = second
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5185
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5220
		{
			return unimplemented(sqllex, "at tz")
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5494
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5511
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5671
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5693
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5717
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5724
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5725
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5738
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5749
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5765
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5766
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5770
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5779
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5788
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5797
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5798
		{
			return unimplemented(sqllex, "current role")
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5807
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5809
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5828
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5830
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5833
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5838
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5847
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5848
		{
			return unimplemented(sqllex, "treat")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5885
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5890
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5894
		{
			return unimplemented(sqllex, "within group")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5895
		{
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5899
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5930
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5938
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.str = ""
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5978
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5992
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5993
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5994
		{
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5998
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6004
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6005
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6006
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6007
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6008
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6019
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6035
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6041
		{
			sqlVAL.union.val = Any
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = Some
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = All
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = Plus
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = Minus
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = Mult
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6057
		{
			sqlVAL.union.val = Div
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = Mod
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = Bitand
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = Bitor
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = Pow
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = Bitxor
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = LT
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = GT
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = EQ
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = LE
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = GE
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = NE
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = Like
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = NotLike
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6075
		{
			sqlVAL.union.val = ILike
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = NotILike
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6181
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6202
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6224
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6240
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6250
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6272
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6282
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6299
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6305
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6309
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6316
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6322
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6328
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6334
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6338
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6344
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6348
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6354
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6363
		{
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6364
		{
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6368
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6378
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6387
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6403
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6423
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6452
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6477
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6483
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6493
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6496
		{
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6506
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6510
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6517
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6529
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6532
		{
			return unimplemented(sqllex, "func const")
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6534
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6538
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6541
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6543
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6547
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6551
		{
			sqlVAL.union.val = DNull
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6558
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6562
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6568
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6603
		{
			sqlVAL.str = ""
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6609
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6613
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
