// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}

//line sql.y:308
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const EXTRACT_DURATION = 57444
const FALSE = 57445
const FAMILY = 57446
const FETCH = 57447
const FILTER = 57448
const FIRST = 57449
const FLOAT = 57450
const FLOORDIV = 57451
const FOLLOWING = 57452
const FOR = 57453
const FORCE_INDEX = 57454
const FOREIGN = 57455
const FROM = 57456
const FULL = 57457
const GRANT = 57458
const GRANTS = 57459
const GREATEST = 57460
const GROUP = 57461
const GROUPING = 57462
const HAVING = 57463
const HELP = 57464
const HIGH = 57465
const HOUR = 57466
const IF = 57467
const IFNULL = 57468
const ILIKE = 57469
const IN = 57470
const INTERLEAVE = 57471
const INDEX = 57472
const INDEXES = 57473
const INITIALLY = 57474
const INNER = 57475
const INSERT = 57476
const INT = 57477
const INT8 = 57478
const INT64 = 57479
const INTEGER = 57480
const INTERSECT = 57481
const INTERVAL = 57482
const INTO = 57483
const IS = 57484
const ISOLATION = 57485
const JOIN = 57486
const KEY = 57487
const KEYS = 57488
const LATERAL = 57489
const LC_CTYPE = 57490
const LC_COLLATE = 57491
const LEADING = 57492
const LEAST = 57493
const LEFT = 57494
const LEVEL = 57495
const LIKE = 57496
const LIMIT = 57497
const LOCAL = 57498
const LOCALTIME = 57499
const LOCALTIMESTAMP = 57500
const LOW = 57501
const LSHIFT = 57502
const MATCH = 57503
const MINUTE = 57504
const MONTH = 57505
const NAME = 57506
const NAMES = 57507
const NATURAL = 57508
const NEXT = 57509
const NO = 57510
const NO_INDEX_JOIN = 57511
const NORMAL = 57512
const NOT = 57513
const NOTHING = 57514
const NULL = 57515
const NULLIF = 57516
const NULLS = 57517
const NUMERIC = 57518
const OF = 57519
const OFF = 57520
const OFFSET = 57521
const ON = 57522
const ONLY = 57523
const OR = 57524
const ORDER = 57525
const ORDINALITY = 57526
const OUT = 57527
const OUTER = 57528
const OVER = 57529
const OVERLAPS = 57530
const OVERLAY = 57531
const PARENT = 57532
const PARTIAL = 57533
const PARTITION = 57534
const PASSWORD = 57535
const PLACING = 57536
const POSITION = 57537
const PRECEDING = 57538
const PRECISION = 57539
const PREPARE = 57540
const PRIMARY = 57541
const PRIORITY = 57542
const RANGE = 57543
const READ = 57544
const REAL = 57545
const RECURSIVE = 57546
const REF = 57547
const REFERENCES = 57548
const RENAME = 57549
const REPEATABLE = 57550
const RELEASE = 57551
const RESTRICT = 57552
const RETURNING = 57553
const REVOKE = 57554
const RIGHT = 57555
const ROLLBACK = 57556
const ROLLUP = 57557
const ROW = 57558
const ROWS = 57559
const RSHIFT = 57560
const SAVEPOINT = 57561
const SEARCH = 57562
const SECOND = 57563
const SELECT = 57564
const SERIAL = 57565
const SERIALIZABLE = 57566
const SESSION = 57567
const SESSION_USER = 57568
const SET = 57569
const SHOW = 57570
const SIMILAR = 57571
const SIMPLE = 57572
const SMALLINT = 57573
const SMALLSERIAL = 57574
const SNAPSHOT = 57575
const SOME = 57576
const SPLIT = 57577
const SQL = 57578
const START = 57579
const STDIN = 57580
const STRICT = 57581
const STRING = 57582
const STORING = 57583
const SUBSTRING = 57584
const SYMMETRIC = 57585
const SYSTEM = 57586
const TABLE = 57587
const TABLES = 57588
const TEMPLATE = 57589
const TEXT = 57590
const THEN = 57591
const TIME = 57592
const TIMESTAMP = 57593
const TIMESTAMPTZ = 57594
const TO = 57595
const TRAILING = 57596
const TRANSACTION = 57597
const TREAT = 57598
const TRIM = 57599
const TRUE = 57600
const TRUNCATE = 57601
const TYPE = 57602
const UNBOUNDED = 57603
const UNCOMMITTED = 57604
const UNION = 57605
const UNIQUE = 57606
const UNKNOWN = 57607
const UPDATE = 57608
const UPSERT = 57609
const USER = 57610
const USERS = 57611
const USING = 57612
const VALID = 57613
const VALIDATE = 57614
const VALUE = 57615
const VALUES = 57616
const VARCHAR = 57617
const VARIADIC = 57618
const VIEW = 57619
const VARYING = 57620
const WHEN = 57621
const WHERE = 57622
const WINDOW = 57623
const WITH = 57624
const WITHIN = 57625
const WITHOUT = 57626
const YEAR = 57627
const ZONE = 57628
const NOT_LA = 57629
const WITH_LA = 57630
const AS_LA = 57631
const POSTFIXOP = 57632
const UMINUS = 57633

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5035

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	310, 27,
	-2, 395,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	1, 368,
	180, 368,
	211, 368,
	308, 368,
	310, 368,
	-2, 378,
	-1, 59,
	1, 371,
	180, 371,
	211, 371,
	308, 371,
	310, 371,
	-2, 377,
	-1, 68,
	1, 27,
	310, 27,
	-2, 395,
	-1, 397,
	1, 177,
	310, 177,
	-2, 909,
	-1, 433,
	155, 405,
	179, 405,
	-2, 374,
	-1, 436,
	155, 404,
	179, 404,
	-2, 372,
	-1, 560,
	155, 404,
	179, 404,
	-2, 375,
	-1, 617,
	307, 845,
	-2, 838,
	-1, 618,
	307, 846,
	-2, 839,
	-1, 624,
	5, 543,
	307, 543,
	-2, 1003,
	-1, 648,
	5, 509,
	-2, 977,
	-1, 649,
	5, 537,
	307, 537,
	-2, 979,
	-1, 650,
	5, 517,
	-2, 980,
	-1, 651,
	5, 516,
	-2, 981,
	-1, 652,
	5, 537,
	307, 537,
	-2, 984,
	-1, 653,
	5, 537,
	307, 537,
	-2, 985,
	-1, 654,
	5, 538,
	-2, 988,
	-1, 655,
	5, 503,
	-2, 989,
	-1, 656,
	5, 503,
	-2, 990,
	-1, 657,
	5, 519,
	-2, 994,
	-1, 658,
	5, 504,
	-2, 999,
	-1, 659,
	5, 505,
	-2, 1000,
	-1, 660,
	5, 506,
	-2, 1001,
	-1, 661,
	5, 507,
	-2, 1002,
	-1, 662,
	5, 503,
	-2, 1006,
	-1, 663,
	5, 510,
	-2, 1011,
	-1, 664,
	5, 508,
	-2, 1014,
	-1, 665,
	5, 535,
	307, 535,
	-2, 1016,
	-1, 666,
	5, 539,
	-2, 1019,
	-1, 667,
	5, 541,
	-2, 1020,
	-1, 668,
	5, 534,
	307, 534,
	-2, 1024,
	-1, 921,
	97, 378,
	139, 378,
	155, 378,
	179, 378,
	183, 378,
	263, 378,
	-2, 656,
	-1, 930,
	307, 823,
	-2, 811,
	-1, 1136,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 578,
	-1, 1137,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 579,
	-1, 1138,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 580,
	-1, 1142,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 584,
	-1, 1143,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 585,
	-1, 1144,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 586,
	-1, 1147,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 591,
	-1, 1153,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 593,
	-1, 1156,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 598,
	-1, 1157,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 599,
	-1, 1158,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 600,
	-1, 1184,
	188, 729,
	-2, 732,
	-1, 1207,
	114, 745,
	307, 845,
	-2, 838,
	-1, 1208,
	114, 746,
	-2, 973,
	-1, 1209,
	114, 747,
	-2, 907,
	-1, 1210,
	114, 748,
	-2, 878,
	-1, 1211,
	114, 749,
	-2, 893,
	-1, 1212,
	114, 750,
	-2, 906,
	-1, 1213,
	114, 751,
	-2, 941,
	-1, 1365,
	97, 378,
	139, 378,
	155, 378,
	179, 378,
	183, 378,
	263, 378,
	-2, 444,
	-1, 1369,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 592,
	-1, 1370,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 594,
	-1, 1375,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 595,
	-1, 1394,
	188, 728,
	-2, 731,
	-1, 1565,
	1, 445,
	67, 445,
	97, 445,
	115, 445,
	119, 445,
	121, 445,
	133, 445,
	139, 445,
	144, 445,
	152, 445,
	155, 445,
	166, 445,
	179, 445,
	180, 445,
	183, 445,
	211, 445,
	213, 445,
	263, 445,
	270, 445,
	280, 445,
	281, 445,
	289, 445,
	308, 445,
	310, 445,
	311, 445,
	-2, 444,
	-1, 1567,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 596,
	-1, 1572,
	142, 0,
	-2, 610,
	-1, 1580,
	188, 730,
	-2, 733,
	-1, 1614,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 636,
	-1, 1615,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 637,
	-1, 1616,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 638,
	-1, 1620,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 642,
	-1, 1621,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 643,
	-1, 1622,
	13, 0,
	14, 0,
	15, 0,
	290, 0,
	291, 0,
	292, 0,
	-2, 644,
	-1, 1734,
	142, 0,
	-2, 611,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 614,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 616,
	-1, 1830,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 615,
	-1, 1831,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	127, 0,
	128, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 617,
	-1, 1838,
	142, 0,
	-2, 645,
	-1, 1889,
	142, 0,
	-2, 646,
	-1, 1945,
	35, 0,
	127, 0,
	154, 0,
	229, 0,
	287, 0,
	-2, 976,
}

const sqlNprod = 1119
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 25109

var sqlAct = [...]int{

	618, 1944, 1924, 1895, 1968, 1925, 437, 1926, 1526, 1943,
	1018, 843, 1777, 924, 1107, 1591, 1706, 1451, 1816, 1560,
	1725, 591, 1800, 1536, 608, 616, 1010, 1692, 268, 76,
	1693, 473, 1651, 398, 615, 1561, 1363, 1339, 1718, 270,
	76, 76, 76, 19, 1086, 76, 1341, 1711, 76, 1100,
	458, 45, 1081, 1542, 1450, 681, 76, 1082, 1397, 1288,
	1116, 610, 733, 76, 76, 1552, 849, 76, 927, 1353,
	76, 76, 76, 76, 845, 1115, 684, 977, 1085, 1019,
	986, 256, 920, 1347, 1194, 1169, 1120, 1233, 472, 1166,
	1034, 444, 58, 866, 1043, 797, 579, 77, 671, 669,
	546, 26, 15, 706, 7, 702, 1076, 781, 686, 474,
	580, 475, 1204, 442, 589, 547, 778, 1050, 22, 436,
	21, 808, 485, 494, 1089, 958, 962, 1012, 488, 58,
	10, 9, 8, 6, 4, 254, 271, 487, 272, 261,
	260, 872, 262, 563, 447, 564, 799, 777, 562, 795,
	376, 710, 481, 445, 385, 545, 265, 567, 263, 1009,
	58, 1823, 267, 388, 1824, 1117, 1011, 59, 264, 266,
	258, 257, 259, 734, 60, 441, 1015, 719, 1236, 719,
	267, 441, 1959, 719, 1047, 1111, 1940, 1932, 1922, 1799,
	1111, 1040, 1917, 1916, 1361, 1111, 1111, 1299, 1891, 1885,
	1869, 1040, 1111, 1799, 1859, 57, 1832, 1111, 464, 1040,
	424, 1810, 1807, 1798, 1799, 1111, 1799, 449, 1782, 1781,
	1300, 1111, 1111, 57, 1351, 64, 434, 1048, 1421, 1422,
	696, 36, 455, 433, 1759, 461, 874, 1053, 468, 37,
	1739, 1736, 717, 1053, 1040, 1053, 1350, 1875, 66, 36,
	76, 76, 76, 76, 76, 1728, 497, 37, 1053, 1678,
	395, 38, 1053, 27, 1677, 1049, 1046, 1053, 1663, 1576,
	1512, 1111, 1053, 1007, 50, 1506, 873, 67, 1007, 38,
	1468, 1466, 1350, 1469, 1053, 62, 490, 490, 1627, 1465,
	1464, 63, 1053, 1053, 875, 876, 1394, 1392, 52, 1053,
	1391, 1579, 1393, 1053, 28, 1053, 57, 442, 1328, 1396,
	61, 1111, 1112, 1062, 64, 1111, 1053, 878, 1052, 875,
	876, 1053, 1326, 1039, 1051, 41, 1040, 1427, 1006, 975,
	974, 1007, 36, 973, 1329, 53, 1111, 66, 877, 40,
	37, 720, 878, 720, 1055, 727, 1178, 720, 728, 1106,
	1070, 575, 838, 498, 476, 499, 42, 574, 477, 837,
	68, 64, 38, 877, 789, 788, 67, 49, 510, 454,
	477, 476, 76, 822, 62, 477, 1364, 495, 1437, 64,
	63, 530, 491, 1979, 66, 49, 1802, 76, 1045, 64,
	76, 76, 1942, 883, 1938, 1931, 574, 1886, 1808, 1014,
	1174, 1764, 66, 1760, 1752, 1751, 1750, 1745, 1744, 1743,
	1044, 933, 66, 67, 1684, 482, 1690, 1299, 883, 1642,
	1637, 62, 1636, 1635, 76, 1582, 76, 63, 76, 76,
	76, 67, 76, 873, 1565, 1541, 1438, 1516, 39, 62,
	561, 67, 723, 1473, 718, 63, 61, 76, 841, 55,
	1470, 1458, 43, 1449, 54, 1420, 1417, 1416, 76, 44,
	1414, 553, 64, 556, 255, 470, 1402, 47, 49, 893,
	1401, 1331, 76, 1327, 61, 677, 1250, 51, 270, 76,
	76, 76, 1362, 76, 1201, 66, 1200, 928, 574, 61,
	848, 1175, 560, 518, 573, 1915, 1593, 1905, 1872, 56,
	1851, 1849, 76, 76, 704, 676, 707, 1840, 519, 1827,
	76, 1820, 76, 1805, 67, 1431, 1423, 1424, 1425, 1426,
	1428, 1796, 62, 497, 497, 928, 1774, 894, 63, 1757,
	1730, 270, 76, 1700, 76, 76, 76, 76, 76, 76,
	76, 1683, 1571, 1534, 76, 76, 1532, 61, 675, 1531,
	76, 1529, 670, 513, 515, 1514, 1485, 1484, 76, 823,
	1448, 1410, 1409, 1387, 1383, 1171, 740, 1315, 847, 1277,
	875, 876, 1276, 623, 548, 271, 76, 272, 550, 76,
	1421, 1422, 879, 880, 881, 882, 884, 818, 904, 673,
	1264, 552, 1263, 878, 1243, 590, 1199, 570, 571, 1110,
	576, 875, 876, 763, 885, 886, 887, 879, 880, 881,
	882, 884, 434, 904, 877, 963, 1689, 930, 966, 433,
	498, 498, 499, 499, 73, 970, 956, 955, 271, 954,
	272, 709, 712, 852, 875, 876, 870, 476, 953, 1688,
	731, 477, 1421, 1422, 482, 877, 442, 952, 1264, 951,
	950, 949, 948, 947, 1421, 1422, 946, 878, 471, 785,
	945, 784, 456, 944, 943, 463, 466, 729, 456, 942,
	941, 940, 819, 812, 931, 929, 61, 842, 877, 1427,
	76, 827, 459, 578, 516, 775, 506, 504, 76, 1502,
	1309, 1308, 76, 875, 876, 787, 76, 76, 692, 677,
	76, 1825, 524, 1342, 839, 1687, 1301, 968, 856, 855,
	854, 969, 1364, 934, 76, 1472, 76, 76, 1471, 76,
	868, 1368, 76, 540, 76, 76, 525, 76, 938, 497,
	1437, 722, 980, 883, 725, 434, 846, 1712, 434, 434,
	1011, 1427, 862, 1405, 672, 863, 864, 1594, 250, 71,
	1195, 959, 543, 1427, 1013, 1295, 1013, 1028, 490, 1479,
	490, 1901, 1956, 677, 1955, 1671, 991, 993, 431, 1322,
	1061, 256, 1858, 923, 417, 423, 1035, 422, 960, 961,
	76, 76, 418, 964, 544, 1790, 1789, 1500, 1438, 967,
	1499, 1476, 824, 1475, 840, 828, 829, 830, 831, 832,
	251, 70, 979, 1371, 835, 836, 1314, 1313, 1496, 979,
	1312, 687, 983, 688, 1311, 978, 1154, 971, 1054, 58,
	1003, 1002, 999, 270, 58, 549, 498, 76, 499, 261,
	260, 1818, 262, 1000, 1037, 1036, 1047, 1038, 1057, 1247,
	1017, 522, 76, 76, 1027, 456, 265, 466, 263, 76,
	495, 1075, 1032, 1029, 1513, 1030, 1026, 996, 264, 266,
	258, 257, 259, 1031, 904, 1004, 1857, 1164, 1423, 1424,
	1425, 1426, 1428, 1246, 1101, 76, 1125, 1715, 76, 1048,
	523, 1162, 689, 426, 964, 440, 967, 502, 1487, 246,
	1064, 1501, 1058, 1168, 1059, 904, 1056, 961, 960, 1113,
	1283, 1779, 817, 816, 1063, 810, 805, 1168, 693, 1903,
	700, 1124, 270, 713, 1521, 252, 69, 1049, 1046, 1051,
	271, 1518, 272, 1965, 881, 882, 884, 439, 904, 1195,
	1423, 1424, 1425, 1426, 1428, 427, 247, 740, 740, 1079,
	1172, 1955, 1421, 1422, 1425, 1426, 1428, 253, 72, 1160,
	1289, 1159, 1176, 1078, 432, 1165, 704, 694, 428, 1519,
	1104, 1105, 704, 1282, 987, 1919, 687, 429, 688, 1504,
	1297, 441, 1321, 1051, 763, 763, 1051, 76, 76, 76,
	1279, 1920, 820, 76, 1114, 693, 76, 904, 687, 1976,
	688, 698, 76, 76, 76, 76, 76, 1182, 1249, 1494,
	76, 1293, 501, 76, 76, 697, 976, 1080, 76, 271,
	1852, 272, 1380, 1066, 1971, 76, 719, 76, 1051, 1068,
	374, 456, 1323, 1488, 76, 990, 1378, 1257, 1191, 1251,
	583, 520, 1289, 1173, 76, 1069, 1161, 689, 769, 521,
	1045, 1427, 957, 1163, 1067, 1928, 740, 1096, 541, 1122,
	1123, 438, 1151, 678, 821, 76, 76, 762, 1214, 689,
	1836, 76, 690, 1964, 377, 918, 442, 703, 249, 248,
	1797, 497, 1291, 1274, 456, 711, 711, 1780, 739, 1408,
	1553, 1564, 441, 763, 1252, 382, 1927, 1954, 521, 1952,
	378, 76, 1437, 76, 765, 76, 1376, 463, 466, 76,
	1381, 1705, 740, 76, 1373, 542, 1098, 1179, 1183, 533,
	1186, 989, 76, 1286, 379, 511, 1219, 509, 1167, 565,
	1294, 1929, 76, 1206, 1206, 1217, 566, 1228, 1334, 1302,
	1755, 1546, 381, 1240, 1241, 1242, 1969, 1333, 1784, 763,
	1517, 1336, 1783, 566, 1149, 1152, 740, 1772, 1670, 1963,
	1438, 1983, 1275, 1977, 1035, 1669, 794, 1330, 1261, 1332,
	1930, 1317, 1320, 1318, 1667, 1623, 1324, 1319, 498, 1325,
	499, 1148, 1846, 442, 685, 1478, 988, 1260, 1970, 1256,
	720, 1377, 1367, 763, 1099, 620, 853, 844, 1379, 1896,
	565, 834, 792, 1395, 1537, 1972, 811, 806, 1726, 1306,
	1344, 1345, 58, 793, 790, 1659, 1356, 1707, 1366, 1773,
	1266, 1265, 1037, 1036, 1307, 1038, 1721, 690, 1756, 1548,
	380, 1547, 520, 442, 1359, 480, 1432, 1429, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1551, 1352, 1660, 1374, 690,
	1982, 1372, 1668, 1357, 479, 439, 1150, 1624, 377, 764,
	557, 1666, 1527, 1625, 1691, 1727, 1770, 1543, 1261, 1348,
	1389, 1198, 1839, 1754, 383, 76, 1453, 939, 1452, 382,
	1303, 1570, 1304, 1305, 378, 972, 442, 1771, 1404, 1415,
	1382, 1284, 1060, 1197, 1356, 1005, 539, 456, 538, 537,
	536, 466, 535, 534, 531, 456, 826, 478, 379, 1923,
	76, 76, 1359, 1893, 1358, 1648, 1492, 1490, 1477, 1022,
	1338, 1102, 1094, 1354, 466, 1033, 381, 466, 1455, 1456,
	1457, 1357, 1483, 726, 1655, 1508, 1656, 76, 724, 603,
	76, 721, 76, 1474, 716, 1355, 699, 695, 691, 76,
	1588, 1340, 1791, 1481, 1956, 568, 1533, 527, 814, 1720,
	1386, 76, 1658, 1495, 1388, 76, 1108, 1511, 74, 1661,
	452, 1793, 270, 995, 76, 3, 979, 1399, 1400, 368,
	369, 370, 994, 1505, 387, 979, 1510, 399, 1802, 1509,
	1854, 992, 1358, 1274, 1888, 387, 1503, 1538, 416, 373,
	1557, 1544, 448, 448, 1507, 572, 74, 1556, 1530, 74,
	74, 467, 74, 1447, 380, 1584, 1585, 1586, 1528, 76,
	998, 1545, 569, 1109, 1460, 1549, 997, 1657, 1540, 1876,
	1703, 1176, 1097, 1554, 1555, 1550, 528, 453, 762, 762,
	1520, 1522, 1523, 384, 460, 1093, 1016, 456, 869, 1719,
	786, 419, 420, 732, 1042, 740, 1573, 1980, 383, 739,
	739, 1981, 1421, 1422, 1741, 1497, 1498, 875, 876, 271,
	1643, 272, 1581, 1072, 1071, 765, 765, 1524, 1630, 1595,
	1118, 1515, 1467, 1600, 740, 740, 76, 76, 76, 1310,
	1248, 1245, 763, 740, 740, 76, 76, 1244, 1192, 1073,
	919, 76, 1873, 76, 1813, 76, 76, 76, 1709, 1587,
	76, 76, 1335, 425, 1074, 932, 1631, 1539, 1778, 375,
	825, 763, 763, 1491, 532, 1493, 740, 1918, 1747, 1407,
	763, 763, 1647, 1815, 1835, 1196, 937, 35, 1644, 1695,
	596, 1649, 76, 76, 1480, 1088, 1087, 762, 273, 815,
	804, 1559, 1664, 1665, 619, 798, 807, 1205, 76, 76,
	1685, 674, 76, 763, 1699, 1698, 621, 76, 739, 1699,
	1698, 737, 1704, 76, 1697, 1352, 1577, 622, 1686, 1697,
	738, 965, 1253, 609, 765, 735, 1723, 493, 1349, 74,
	483, 74, 399, 399, 1708, 1702, 1597, 1598, 1020, 1701,
	1710, 1193, 1403, 762, 76, 1602, 1603, 861, 935, 1281,
	595, 1681, 1731, 1285, 601, 600, 1180, 503, 1716, 1717,
	703, 1724, 1722, 1356, 739, 1360, 48, 517, 1753, 703,
	764, 764, 393, 776, 394, 1292, 1682, 1628, 1634, 456,
	765, 1359, 1103, 740, 1735, 857, 1489, 762, 1638, 430,
	1418, 505, 1354, 1226, 1218, 1659, 1215, 1652, 551, 76,
	1357, 76, 680, 76, 76, 1650, 1021, 529, 739, 1654,
	1298, 1041, 76, 577, 1355, 865, 451, 450, 1083, 526,
	763, 791, 1065, 421, 765, 1848, 1095, 1660, 1259, 1975,
	1853, 1486, 1900, 65, 76, 25, 1768, 23, 20, 18,
	736, 17, 1765, 1766, 1337, 16, 24, 1653, 14, 13,
	12, 507, 11, 34, 33, 32, 76, 31, 1801, 30,
	29, 1358, 5, 76, 2, 1, 512, 1118, 1803, 399,
	399, 0, 76, 1714, 0, 1699, 1698, 0, 1806, 764,
	0, 76, 76, 740, 0, 1697, 0, 0, 1794, 0,
	0, 1792, 0, 0, 0, 0, 0, 1809, 1814, 1834,
	0, 0, 0, 387, 1812, 74, 1819, 399, 555, 399,
	0, 558, 0, 0, 1655, 1826, 1656, 1829, 0, 0,
	763, 76, 0, 0, 0, 0, 448, 0, 0, 0,
	0, 0, 1822, 0, 0, 764, 1850, 74, 1828, 0,
	76, 76, 1658, 0, 76, 0, 0, 0, 76, 1661,
	1844, 74, 0, 76, 0, 0, 0, 0, 74, 74,
	74, 1862, 714, 0, 0, 1864, 0, 1870, 1866, 740,
	1841, 76, 0, 1871, 1699, 1698, 270, 76, 76, 764,
	1863, 74, 74, 704, 1697, 0, 1865, 1845, 1874, 782,
	1877, 782, 1887, 1878, 1881, 1786, 1883, 0, 442, 0,
	76, 0, 76, 76, 1882, 76, 763, 1657, 0, 0,
	0, 399, 0, 782, 399, 399, 399, 399, 399, 833,
	0, 1906, 0, 399, 399, 1908, 76, 0, 1880, 387,
	1910, 0, 1909, 0, 0, 1884, 1904, 851, 1902, 0,
	1907, 1912, 1914, 1801, 1913, 1022, 1118, 1699, 1698, 0,
	1911, 0, 740, 1890, 76, 448, 76, 1697, 871, 1898,
	0, 1933, 0, 0, 1935, 1787, 1788, 0, 1939, 0,
	0, 0, 1937, 271, 76, 272, 0, 0, 0, 0,
	1949, 0, 1953, 1951, 0, 0, 762, 1957, 0, 763,
	0, 875, 876, 0, 0, 0, 1118, 1962, 1961, 0,
	1118, 0, 0, 1960, 0, 0, 0, 739, 0, 0,
	1974, 1973, 1958, 1936, 878, 762, 762, 0, 0, 1978,
	0, 0, 0, 765, 762, 762, 0, 0, 1220, 0,
	0, 0, 1984, 0, 1868, 877, 739, 739, 0, 0,
	0, 0, 0, 0, 0, 739, 739, 0, 0, 0,
	0, 0, 765, 765, 0, 0, 0, 762, 0, 74,
	0, 765, 765, 0, 0, 0, 0, 984, 0, 0,
	0, 74, 0, 0, 0, 74, 1001, 0, 739, 74,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 74, 765, 1024, 1025, 0, 74, 0,
	0, 74, 0, 399, 399, 0, 399, 0, 0, 0,
	0, 736, 736, 0, 0, 0, 0, 1921, 0, 0,
	1421, 1422, 0, 0, 581, 581, 0, 0, 0, 0,
	0, 0, 0, 682, 1421, 1422, 0, 1439, 1440, 1441,
	1674, 893, 0, 0, 1941, 0, 1680, 0, 0, 0,
	705, 0, 0, 0, 0, 0, 875, 876, 0, 782,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 762, 0, 0, 0, 764, 878,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 1118, 1118, 739, 0, 1118, 0, 894,
	877, 0, 0, 0, 0, 0, 1077, 764, 764, 0,
	0, 765, 0, 0, 0, 0, 764, 764, 0, 1427,
	736, 74, 1084, 0, 0, 0, 0, 0, 871, 0,
	0, 0, 0, 1427, 0, 0, 0, 0, 0, 858,
	860, 0, 0, 0, 0, 0, 867, 1220, 1220, 764,
	0, 0, 1443, 0, 74, 883, 0, 399, 913, 914,
	915, 916, 917, 0, 0, 0, 1442, 0, 922, 0,
	1437, 0, 0, 0, 762, 0, 736, 0, 887, 879,
	880, 881, 882, 884, 1437, 904, 0, 0, 936, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 1220, 1220, 1220, 0, 893, 1776, 0, 0,
	0, 765, 0, 0, 0, 0, 0, 0, 0, 0,
	736, 0, 0, 0, 0, 0, 0, 0, 1438, 0,
	0, 0, 0, 1384, 1385, 0, 0, 0, 0, 0,
	0, 0, 1438, 0, 0, 0, 0, 0, 0, 0,
	0, 1811, 0, 0, 0, 0, 74, 1254, 1255, 0,
	762, 0, 984, 0, 894, 1262, 764, 1118, 0, 0,
	0, 1267, 1268, 1270, 1272, 1273, 0, 0, 0, 1278,
	0, 739, 1280, 74, 0, 0, 0, 74, 1444, 1445,
	1446, 0, 0, 0, 74, 0, 1296, 765, 0, 0,
	0, 0, 0, 74, 1432, 1429, 1430, 1431, 1423, 1424,
	1425, 1426, 1428, 74, 1433, 1434, 1435, 0, 1432, 1429,
	1430, 1431, 1423, 1424, 1425, 1426, 1428, 0, 0, 0,
	0, 0, 0, 0, 1077, 782, 0, 0, 0, 0,
	1077, 0, 0, 762, 879, 880, 881, 882, 884, 0,
	904, 0, 0, 1220, 1220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 739, 0, 764, 0, 0, 0,
	851, 0, 851, 0, 399, 0, 0, 0, 74, 0,
	765, 0, 1343, 1421, 1422, 0, 1439, 1440, 1441, 0,
	0, 1346, 0, 0, 0, 0, 0, 0, 1899, 1733,
	0, 74, 0, 0, 1220, 1220, 1220, 1220, 1220, 1220,
	1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220,
	1220, 1220, 1220, 0, 1220, 0, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 1568,
	1569, 0, 0, 0, 0, 0, 0, 581, 0, 1022,
	0, 0, 764, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
	1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142,
	1143, 1144, 1145, 1146, 1147, 0, 1153, 0, 1155, 1156,
	1157, 1158, 1427, 0, 0, 0, 0, 0, 0, 0,
	1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613,
	1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 0,
	1626, 0, 0, 0, 0, 1442, 1202, 1203, 0, 736,
	1216, 0, 1227, 1229, 1234, 1237, 1238, 1239, 0, 0,
	0, 0, 0, 1437, 0, 764, 0, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 682, 736, 736,
	0, 0, 0, 0, 0, 0, 0, 736, 736, 0,
	0, 0, 0, 875, 876, 0, 0, 597, 46, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	74, 0, 0, 1287, 0, 1290, 878, 0, 0, 0,
	736, 1438, 0, 875, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 46, 1525, 877, 0, 984,
	0, 851, 0, 892, 0, 0, 878, 0, 1535, 0,
	0, 0, 0, 0, 0, 0, 435, 1316, 0, 443,
	74, 1421, 1422, 0, 74, 0, 46, 877, 0, 0,
	0, 1220, 0, 1563, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 1433, 1434, 1435, 0, 1432, 1429, 1430,
	1431, 1423, 1424, 1425, 1426, 1428, 0, 0, 0, 0,
	867, 0, 0, 0, 0, 0, 0, 0, 1592, 0,
	0, 0, 883, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 736, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 1369, 1370, 0, 0, 0, 1775, 1375, 0,
	1427, 0, 0, 0, 0, 1220, 0, 0, 0, 0,
	0, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 0, 1390, 0, 0, 1645, 1646, 984, 0, 0,
	0, 1398, 0, 0, 871, 871, 0, 0, 0, 1406,
	1672, 894, 1673, 1411, 74, 1675, 1676, 0, 0, 1679,
	74, 1437, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 922, 0,
	0, 894, 0, 0, 1234, 1234, 1234, 736, 0, 1694,
	0, 871, 1084, 0, 1694, 0, 0, 0, 0, 0,
	1220, 1838, 0, 443, 0, 0, 0, 74, 74, 0,
	0, 74, 0, 0, 0, 0, 1563, 1482, 0, 1438,
	0, 0, 1729, 0, 0, 0, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	0, 0, 0, 581, 0, 0, 0, 0, 0, 0,
	0, 581, 0, 1748, 0, 682, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	0, 400, 0, 736, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1889, 0, 0, 401,
	0, 0, 0, 0, 0, 0, 1429, 1430, 1431, 1423,
	1424, 1425, 1426, 1428, 0, 0, 0, 0, 984, 0,
	1767, 0, 399, 1769, 0, 0, 0, 0, 0, 0,
	0, 74, 1566, 0, 403, 1567, 0, 0, 0, 408,
	409, 0, 0, 414, 0, 0, 1572, 0, 0, 0,
	0, 0, 0, 871, 0, 402, 404, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 736, 0, 0, 1589,
	1694, 0, 0, 0, 0, 74, 0, 0, 0, 1599,
	0, 0, 1817, 1601, 0, 0, 0, 0, 0, 0,
	0, 74, 0, 0, 405, 0, 0, 0, 0, 0,
	871, 1563, 435, 0, 0, 0, 0, 406, 407, 0,
	0, 0, 0, 0, 0, 0, 1632, 1633, 0, 0,
	0, 0, 0, 410, 0, 1639, 1640, 1641, 0, 0,
	0, 0, 1421, 1422, 0, 1439, 1440, 1441, 0, 0,
	851, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1855,
	1856, 0, 0, 1860, 0, 0, 0, 1861, 581, 1694,
	0, 0, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 1879, 0,
	871, 0, 0, 0, 0, 0, 1563, 871, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1713, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1897,
	0, 871, 74, 411, 399, 435, 0, 412, 435, 435,
	0, 1427, 413, 0, 1734, 0, 0, 0, 1737, 1738,
	0, 0, 1694, 1740, 0, 1817, 415, 1742, 0, 0,
	0, 0, 921, 0, 1746, 0, 925, 926, 1749, 0,
	875, 876, 0, 895, 896, 897, 905, 906, 907, 0,
	0, 0, 0, 74, 0, 871, 898, 0, 0, 0,
	0, 0, 1437, 878, 0, 909, 0, 0, 0, 0,
	0, 1758, 0, 1950, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 877, 0, 0, 0, 0, 0,
	892, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 0, 0, 898, 0,
	0, 0, 0, 1785, 0, 878, 0, 909, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 883,
	1804, 0, 892, 0, 0, 0, 0, 0, 46, 0,
	46, 0, 0, 0, 0, 0, 0, 902, 910, 0,
	0, 0, 0, 0, 1821, 46, 0, 0, 0, 0,
	46, 0, 908, 0, 0, 0, 1830, 1831, 0, 0,
	0, 0, 0, 0, 900, 0, 0, 0, 0, 0,
	893, 883, 1433, 1434, 1435, 0, 1432, 1429, 1430, 1431,
	1423, 1424, 1425, 1426, 1428, 1843, 0, 0, 0, 902,
	910, 0, 899, 0, 0, 0, 0, 0, 1847, 0,
	0, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	682, 0, 893, 0, 0, 0, 0, 0, 894, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 903,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 1119, 0, 0, 0, 0, 901, 0, 0,
	889, 890, 891, 0, 888, 885, 886, 887, 879, 880,
	881, 882, 884, 0, 904, 0, 0, 0, 0, 0,
	0, 1761, 0, 0, 0, 1934, 0, 0, 1170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1948, 1948, 0, 0, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 1948,
	0, 0, 0, 1463, 875, 876, 0, 895, 896, 897,
	905, 906, 907, 0, 0, 0, 0, 0, 0, 0,
	898, 0, 0, 0, 0, 0, 0, 878, 0, 909,
	0, 0, 0, 0, 1948, 875, 876, 0, 895, 896,
	897, 905, 906, 907, 0, 0, 0, 0, 877, 0,
	0, 898, 0, 0, 892, 0, 0, 0, 878, 0,
	909, 0, 443, 0, 0, 1421, 1422, 0, 1439, 1440,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 1732, 0, 0, 0, 892, 0, 0, 0, 1421,
	1422, 0, 1439, 1440, 1441, 0, 0, 0, 0, 0,
	0, 0, 0, 883, 0, 1575, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 902, 910, 0, 0, 0, 0, 1421, 1422, 0,
	1439, 1440, 1441, 0, 883, 0, 908, 0, 0, 1436,
	0, 46, 0, 1574, 0, 46, 0, 0, 900, 0,
	0, 0, 902, 910, 893, 0, 0, 0, 46, 0,
	0, 0, 0, 0, 1427, 0, 0, 908, 0, 1365,
	0, 0, 0, 0, 0, 0, 899, 1436, 0, 900,
	0, 0, 0, 0, 0, 893, 0, 0, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 1442, 0, 0,
	1170, 0, 0, 0, 0, 0, 0, 899, 0, 0,
	0, 0, 894, 0, 0, 1437, 0, 0, 0, 921,
	0, 1442, 0, 903, 0, 0, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1437,
	0, 0, 0, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 0, 0, 1442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 921, 1438, 0, 0, 0, 1437, 0, 0,
	0, 901, 0, 0, 889, 890, 891, 0, 888, 885,
	886, 887, 879, 880, 881, 882, 884, 1438, 904, 0,
	0, 0, 0, 0, 0, 1462, 0, 0, 0, 0,
	0, 0, 901, 0, 0, 889, 890, 891, 0, 888,
	885, 886, 887, 879, 880, 881, 882, 884, 0, 904,
	0, 0, 0, 0, 0, 1438, 1461, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 1434, 1435, 1119, 1432,
	1429, 1430, 1431, 1423, 1424, 1425, 1426, 1428, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	1434, 1435, 0, 1432, 1429, 1430, 1431, 1423, 1424, 1425,
	1426, 1428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1119, 0,
	0, 0, 1119, 0, 0, 0, 0, 1433, 1434, 1435,
	0, 1432, 1429, 1430, 1431, 1423, 1424, 1425, 1426, 1428,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 617, 606, 607, 604, 605,
	593, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 0, 633,
	599, 0, 0, 0, 81, 82, 0, 648, 199, 649,
	83, 650, 651, 0, 84, 203, 204, 85, 614, 632,
	652, 653, 207, 0, 644, 0, 625, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 275, 93,
	1947, 0, 626, 628, 0, 627, 629, 95, 96, 97,
	98, 654, 99, 655, 656, 0, 100, 0, 101, 0,
	0, 0, 647, 103, 0, 104, 0, 0, 0, 598,
	105, 106, 634, 635, 612, 0, 0, 107, 108, 657,
	0, 109, 0, 110, 46, 0, 276, 0, 111, 645,
	0, 217, 0, 112, 113, 114, 641, 643, 0, 0,
	117, 0, 115, 0, 277, 116, 658, 659, 660, 661,
	0, 624, 0, 0, 118, 280, 119, 120, 0, 122,
	121, 0, 646, 281, 123, 1119, 1119, 124, 0, 1119,
	125, 0, 126, 127, 128, 129, 130, 283, 131, 132,
	135, 133, 587, 134, 613, 642, 136, 662, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 284, 140, 285,
	636, 141, 142, 143, 144, 0, 637, 145, 231, 146,
	0, 147, 148, 149, 663, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 286, 157, 158, 602, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 630, 165, 166,
	0, 167, 664, 236, 168, 0, 174, 169, 170, 171,
	173, 665, 172, 638, 0, 175, 0, 176, 177, 178,
	0, 239, 666, 667, 0, 0, 179, 639, 640, 611,
	180, 181, 1946, 183, 0, 0, 184, 185, 186, 631,
	187, 0, 188, 189, 190, 244, 668, 0, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 0, 1795, 0, 0, 0, 584,
	585, 0, 0, 0, 0, 586, 0, 0, 594, 0,
	0, 46, 0, 592, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 269, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 288, 80, 289, 290,
	291, 292, 196, 293, 294, 295, 296, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 297, 84, 203, 204,
	85, 298, 299, 205, 206, 207, 300, 208, 301, 274,
	302, 86, 87, 88, 921, 89, 303, 90, 91, 92,
	304, 275, 93, 94, 305, 306, 307, 308, 309, 310,
	95, 96, 97, 98, 209, 99, 210, 211, 311, 100,
	312, 101, 313, 314, 315, 102, 103, 316, 104, 317,
	0, 318, 212, 105, 106, 213, 214, 319, 320, 321,
	107, 108, 215, 0, 109, 322, 110, 323, 324, 276,
	325, 111, 216, 326, 217, 327, 112, 113, 114, 218,
	219, 278, 328, 117, 329, 115, 330, 277, 116, 220,
	221, 222, 223, 331, 224, 332, 279, 118, 280, 119,
	120, 333, 122, 121, 334, 225, 281, 123, 282, 335,
	124, 336, 337, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 338, 134, 339, 226, 136,
	227, 137, 138, 340, 341, 342, 343, 344, 139, 228,
	284, 140, 285, 229, 141, 142, 143, 144, 345, 230,
	145, 231, 146, 346, 147, 148, 149, 232, 150, 151,
	347, 153, 154, 152, 155, 348, 156, 286, 157, 158,
	233, 159, 0, 160, 161, 162, 349, 234, 163, 164,
	350, 165, 166, 287, 167, 235, 236, 168, 351, 174,
	169, 170, 171, 173, 237, 172, 238, 352, 175, 353,
	176, 177, 178, 354, 239, 240, 241, 355, 356, 179,
	242, 243, 357, 180, 181, 182, 183, 358, 359, 184,
	185, 186, 360, 187, 361, 188, 189, 190, 244, 245,
	362, 363, 191, 364, 365, 366, 367, 192, 193, 194,
	195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1558, 78, 79,
	288, 80, 289, 290, 291, 292, 196, 293, 294, 295,
	296, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	297, 84, 203, 204, 85, 298, 299, 205, 206, 207,
	300, 208, 301, 274, 302, 86, 87, 88, 0, 89,
	303, 90, 91, 92, 304, 275, 93, 94, 305, 306,
	307, 308, 309, 310, 95, 96, 97, 98, 209, 99,
	210, 211, 311, 100, 312, 101, 313, 314, 315, 102,
	103, 316, 104, 317, 0, 318, 212, 105, 106, 213,
	214, 319, 320, 321, 107, 108, 215, 0, 109, 322,
	110, 323, 324, 276, 325, 111, 216, 326, 217, 327,
	112, 113, 114, 218, 219, 278, 328, 117, 329, 115,
	330, 277, 116, 220, 221, 222, 223, 331, 224, 332,
	279, 118, 280, 119, 120, 333, 122, 121, 334, 225,
	281, 123, 282, 335, 124, 336, 337, 125, 0, 126,
	127, 128, 129, 130, 283, 131, 132, 135, 133, 338,
	134, 339, 226, 136, 227, 137, 138, 340, 341, 342,
	343, 344, 139, 228, 284, 140, 285, 229, 141, 142,
	143, 144, 345, 230, 145, 231, 146, 346, 147, 148,
	149, 232, 150, 151, 347, 153, 154, 152, 155, 348,
	156, 286, 157, 158, 233, 159, 0, 160, 161, 162,
	349, 234, 163, 164, 350, 165, 166, 287, 167, 235,
	236, 168, 351, 174, 169, 170, 171, 173, 237, 172,
	238, 352, 175, 353, 176, 177, 178, 354, 239, 240,
	241, 355, 356, 179, 242, 243, 357, 180, 181, 182,
	183, 358, 359, 184, 185, 186, 360, 187, 361, 188,
	189, 190, 244, 245, 362, 363, 191, 364, 365, 366,
	367, 192, 193, 194, 195, 269, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 708, 0,
	0, 78, 79, 288, 80, 289, 290, 291, 292, 196,
	293, 294, 295, 296, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 297, 84, 203, 204, 85, 298, 299,
	205, 206, 207, 300, 208, 301, 274, 302, 86, 87,
	88, 0, 89, 303, 90, 91, 92, 304, 275, 93,
	94, 305, 306, 307, 308, 309, 310, 95, 96, 97,
	98, 209, 99, 210, 211, 311, 100, 312, 101, 313,
	314, 315, 102, 103, 316, 104, 317, 0, 318, 212,
	105, 106, 213, 214, 319, 320, 321, 107, 108, 215,
	0, 109, 322, 110, 323, 324, 276, 325, 111, 216,
	326, 217, 327, 112, 113, 114, 218, 219, 278, 328,
	117, 329, 115, 330, 277, 116, 220, 221, 222, 223,
	331, 224, 332, 279, 118, 280, 119, 120, 333, 122,
	121, 334, 225, 281, 123, 282, 335, 124, 336, 337,
	125, 0, 126, 127, 128, 129, 130, 283, 131, 132,
	135, 133, 338, 134, 339, 226, 136, 227, 137, 138,
	340, 341, 342, 343, 344, 139, 228, 284, 140, 285,
	229, 141, 142, 143, 144, 345, 230, 145, 231, 146,
	346, 147, 148, 149, 232, 150, 151, 347, 153, 154,
	152, 155, 348, 156, 286, 157, 158, 233, 159, 0,
	160, 161, 162, 349, 234, 163, 164, 350, 165, 166,
	287, 167, 235, 236, 168, 351, 174, 169, 170, 171,
	173, 237, 172, 238, 352, 175, 353, 176, 177, 178,
	354, 239, 240, 241, 355, 356, 179, 242, 243, 357,
	180, 181, 182, 183, 358, 359, 184, 185, 186, 360,
	187, 361, 188, 189, 190, 244, 245, 362, 363, 191,
	364, 365, 366, 367, 192, 193, 194, 195, 617, 606,
	607, 604, 605, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 1188, 80, 0, 0,
	0, 0, 633, 599, 0, 0, 0, 81, 82, 197,
	648, 199, 649, 83, 650, 651, 0, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 99, 655, 656, 0, 100,
	0, 101, 0, 1189, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	630, 165, 166, 287, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 666, 667, 0, 0, 179,
	639, 640, 611, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 668,
	1187, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 585, 1190, 0, 0, 0, 586, 0,
	0, 594, 1185, 0, 0, 0, 592, 617, 606, 607,
	604, 605, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 633, 599, 0, 0, 0, 81, 82, 197, 648,
	199, 649, 83, 650, 651, 0, 84, 203, 204, 85,
	614, 632, 652, 653, 207, 0, 644, 0, 625, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	275, 93, 94, 0, 626, 628, 0, 627, 629, 95,
	96, 97, 98, 654, 99, 655, 656, 683, 100, 0,
	101, 0, 0, 0, 647, 103, 0, 104, 0, 0,
	0, 598, 105, 106, 634, 635, 612, 0, 0, 107,
	108, 657, 0, 109, 0, 110, 0, 0, 276, 0,
	111, 645, 0, 217, 0, 112, 113, 114, 641, 643,
	278, 0, 117, 0, 115, 0, 277, 116, 658, 659,
	660, 661, 0, 624, 0, 279, 118, 280, 119, 120,
	0, 122, 121, 0, 646, 281, 123, 282, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 283,
	131, 132, 135, 133, 587, 134, 613, 642, 136, 662,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 284,
	140, 285, 636, 141, 142, 143, 144, 0, 637, 145,
	231, 146, 0, 147, 148, 149, 663, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 286, 157, 158, 602,
	159, 0, 160, 161, 162, 64, 234, 163, 164, 630,
	165, 166, 287, 167, 664, 236, 168, 0, 174, 169,
	170, 171, 173, 665, 172, 638, 0, 175, 66, 176,
	177, 178, 0, 239, 666, 667, 0, 0, 179, 639,
	640, 611, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 631, 187, 0, 188, 189, 190, 500, 668, 0,
	0, 191, 0, 0, 0, 62, 192, 193, 194, 195,
	588, 63, 617, 606, 607, 604, 605, 593, 0, 0,
	0, 584, 585, 0, 0, 0, 0, 586, 78, 79,
	594, 80, 0, 0, 0, 592, 633, 599, 0, 0,
	0, 81, 82, 197, 648, 199, 649, 83, 650, 651,
	0, 84, 203, 204, 85, 614, 632, 652, 653, 207,
	0, 644, 0, 625, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 275, 93, 94, 0, 626,
	628, 0, 627, 629, 95, 96, 97, 98, 654, 99,
	655, 656, 0, 100, 0, 101, 0, 0, 0, 647,
	103, 0, 104, 0, 0, 0, 598, 105, 106, 634,
	635, 612, 0, 0, 107, 108, 657, 0, 109, 0,
	110, 0, 0, 276, 0, 111, 645, 0, 217, 0,
	112, 113, 114, 641, 643, 278, 0, 117, 0, 115,
	0, 277, 116, 658, 659, 660, 661, 0, 624, 0,
	279, 118, 280, 119, 120, 0, 122, 121, 0, 646,
	281, 123, 282, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 283, 131, 132, 135, 133, 587,
	134, 613, 642, 136, 662, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 284, 140, 285, 636, 141, 142,
	143, 144, 0, 637, 145, 231, 146, 0, 147, 148,
	149, 663, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 286, 157, 158, 602, 159, 0, 160, 161, 162,
	64, 234, 163, 164, 630, 165, 166, 287, 167, 664,
	236, 168, 0, 174, 169, 170, 171, 173, 665, 172,
	638, 0, 175, 66, 176, 177, 178, 0, 239, 666,
	667, 0, 0, 179, 639, 640, 611, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 631, 187, 0, 188,
	189, 190, 500, 668, 0, 0, 191, 0, 0, 0,
	62, 192, 193, 194, 195, 588, 63, 617, 606, 607,
	604, 605, 593, 0, 0, 0, 584, 585, 0, 0,
	0, 0, 586, 78, 79, 594, 80, 0, 0, 0,
	592, 633, 599, 0, 0, 0, 81, 82, 197, 648,
	199, 649, 83, 650, 651, 1230, 84, 203, 204, 85,
	614, 632, 652, 653, 207, 0, 644, 0, 625, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	275, 93, 94, 0, 626, 628, 0, 627, 629, 95,
	96, 97, 98, 654, 99, 655, 656, 0, 100, 0,
	101, 0, 0, 0, 647, 103, 0, 104, 0, 0,
	0, 598, 105, 106, 634, 635, 612, 0, 0, 107,
	108, 657, 0, 109, 0, 110, 0, 1235, 276, 0,
	111, 645, 0, 217, 0, 112, 113, 114, 641, 643,
	278, 0, 117, 0, 115, 0, 277, 116, 658, 659,
	660, 661, 0, 624, 0, 279, 118, 280, 119, 120,
	0, 122, 121, 1231, 646, 281, 123, 282, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 283,
	131, 132, 135, 133, 587, 134, 613, 642, 136, 662,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 284,
	140, 285, 636, 141, 142, 143, 144, 0, 637, 145,
	231, 146, 0, 147, 148, 149, 663, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 286, 157, 158, 602,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 630,
	165, 166, 287, 167, 664, 236, 168, 0, 174, 169,
	170, 171, 173, 665, 172, 638, 0, 175, 0, 176,
	177, 178, 0, 239, 666, 667, 0, 1232, 179, 639,
	640, 611, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 631, 187, 0, 188, 189, 190, 244, 668, 0,
	0, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	588, 0, 617, 606, 607, 604, 605, 593, 0, 0,
	0, 584, 585, 0, 0, 0, 0, 586, 78, 79,
	594, 80, 0, 0, 0, 592, 633, 599, 0, 0,
	0, 81, 82, 197, 648, 199, 649, 83, 650, 651,
	0, 84, 203, 204, 85, 614, 632, 652, 653, 207,
	0, 644, 0, 625, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 275, 93, 94, 0, 626,
	628, 0, 627, 629, 95, 96, 97, 98, 654, 99,
	655, 656, 0, 100, 0, 101, 0, 0, 0, 647,
	103, 0, 104, 0, 0, 0, 598, 105, 106, 634,
	635, 612, 0, 0, 107, 108, 657, 0, 109, 0,
	110, 0, 0, 276, 0, 111, 645, 0, 217, 0,
	112, 113, 114, 641, 643, 278, 0, 117, 0, 115,
	0, 277, 116, 658, 659, 660, 661, 0, 624, 0,
	279, 118, 280, 119, 120, 0, 122, 121, 0, 646,
	281, 123, 282, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 283, 131, 132, 135, 133, 587,
	134, 613, 642, 136, 662, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 284, 140, 285, 636, 141, 142,
	143, 144, 0, 637, 145, 231, 146, 0, 147, 148,
	149, 663, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 286, 157, 158, 602, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 630, 165, 166, 287, 167, 664,
	236, 168, 0, 174, 169, 170, 171, 173, 665, 172,
	638, 0, 175, 0, 176, 177, 178, 0, 239, 666,
	667, 0, 0, 179, 639, 640, 611, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 631, 187, 0, 188,
	189, 190, 244, 668, 0, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 588, 0, 0, 0, 0,
	617, 606, 607, 604, 605, 593, 584, 585, 0, 0,
	0, 0, 586, 928, 1181, 594, 78, 79, 0, 80,
	592, 0, 0, 0, 633, 599, 0, 0, 0, 81,
	82, 197, 648, 199, 649, 83, 650, 651, 0, 84,
	203, 204, 85, 614, 632, 652, 653, 207, 0, 644,
	0, 625, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 275, 93, 94, 0, 626, 628, 0,
	627, 629, 95, 96, 97, 98, 654, 99, 655, 656,
	0, 100, 0, 101, 0, 0, 0, 647, 103, 0,
	104, 0, 0, 0, 598, 105, 106, 634, 635, 612,
	0, 0, 107, 108, 657, 0, 109, 0, 110, 0,
	0, 276, 0, 111, 645, 0, 217, 0, 112, 113,
	114, 641, 643, 278, 0, 117, 0, 115, 0, 277,
	116, 658, 659, 660, 661, 0, 624, 0, 279, 118,
	280, 119, 120, 0, 122, 121, 0, 646, 281, 123,
	282, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 283, 131, 132, 135, 133, 587, 134, 613,
	642, 136, 662, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 284, 140, 285, 636, 141, 142, 143, 144,
	0, 637, 145, 231, 146, 0, 147, 148, 149, 663,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 286,
	157, 158, 602, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 630, 165, 166, 287, 167, 664, 236, 168,
	0, 174, 169, 170, 171, 173, 665, 172, 638, 0,
	175, 0, 176, 177, 178, 0, 239, 666, 667, 0,
	0, 179, 639, 640, 611, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 631, 187, 0, 188, 189, 190,
	244, 668, 0, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 588, 0, 617, 606, 607, 604, 605,
	593, 0, 0, 0, 584, 585, 582, 0, 0, 0,
	586, 78, 79, 594, 80, 0, 0, 0, 592, 633,
	599, 0, 0, 0, 81, 82, 197, 648, 199, 649,
	83, 650, 651, 0, 84, 203, 204, 85, 614, 632,
	652, 653, 207, 0, 644, 0, 625, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 275, 93,
	94, 0, 626, 628, 0, 627, 629, 95, 96, 97,
	98, 654, 99, 655, 656, 0, 100, 0, 101, 0,
	0, 0, 647, 103, 0, 104, 0, 0, 0, 598,
	105, 106, 634, 635, 612, 0, 0, 107, 108, 657,
	0, 109, 0, 110, 0, 0, 276, 0, 111, 645,
	0, 217, 0, 112, 113, 114, 641, 643, 278, 0,
	117, 0, 115, 0, 277, 116, 658, 659, 660, 661,
	0, 624, 0, 279, 118, 280, 119, 120, 0, 122,
	121, 0, 646, 281, 123, 282, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 283, 131, 132,
	135, 133, 587, 134, 613, 642, 136, 662, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 284, 140, 285,
	636, 141, 142, 143, 144, 0, 637, 145, 231, 146,
	0, 147, 148, 149, 663, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 286, 157, 158, 602, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 630, 165, 166,
	287, 167, 664, 236, 168, 0, 174, 169, 170, 171,
	173, 665, 172, 638, 0, 175, 0, 176, 177, 178,
	0, 239, 666, 667, 0, 0, 179, 639, 640, 611,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 631,
	187, 0, 188, 189, 190, 244, 668, 0, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 588, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 584,
	585, 0, 0, 0, 0, 586, 0, 0, 594, 1629,
	0, 0, 0, 592, 617, 606, 607, 604, 605, 593,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 0, 80, 0, 0, 0, 0, 633, 599,
	0, 0, 0, 81, 82, 197, 648, 199, 649, 83,
	650, 651, 0, 84, 203, 204, 85, 614, 632, 652,
	653, 207, 0, 644, 0, 625, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 275, 93, 94,
	0, 626, 628, 0, 627, 629, 95, 96, 97, 98,
	654, 99, 655, 656, 0, 100, 0, 101, 0, 0,
	0, 647, 103, 0, 104, 0, 0, 0, 598, 105,
	106, 634, 635, 612, 0, 0, 107, 108, 657, 0,
	109, 0, 110, 0, 0, 276, 0, 111, 645, 0,
	217, 0, 112, 113, 114, 641, 643, 278, 0, 117,
	0, 115, 0, 277, 116, 658, 659, 660, 661, 0,
	624, 0, 279, 118, 280, 119, 120, 0, 122, 121,
	0, 646, 281, 123, 282, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 283, 131, 132, 135,
	133, 587, 134, 613, 642, 136, 662, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 284, 140, 285, 636,
	141, 142, 143, 144, 0, 637, 145, 231, 146, 0,
	147, 148, 149, 663, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 286, 157, 158, 602, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 630, 165, 166, 287,
	167, 664, 236, 168, 0, 174, 169, 170, 171, 173,
	665, 172, 638, 0, 175, 0, 176, 177, 178, 0,
	239, 666, 667, 0, 0, 179, 639, 640, 611, 180,
	181, 182, 183, 0, 0, 184, 185, 186, 631, 187,
	0, 188, 189, 190, 244, 668, 1583, 0, 191, 0,
	0, 0, 0, 192, 193, 194, 195, 588, 0, 617,
	606, 607, 604, 605, 593, 0, 0, 0, 584, 585,
	0, 0, 0, 0, 586, 78, 79, 594, 80, 0,
	0, 0, 592, 633, 599, 0, 0, 0, 81, 82,
	197, 648, 199, 649, 83, 650, 651, 0, 84, 203,
	204, 85, 614, 632, 652, 653, 207, 0, 644, 0,
	625, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 275, 93, 94, 0, 626, 628, 0, 627,
	629, 95, 96, 97, 98, 654, 99, 655, 656, 0,
	100, 0, 101, 0, 0, 0, 647, 103, 0, 104,
	0, 0, 0, 598, 105, 106, 634, 635, 612, 0,
	0, 107, 108, 657, 0, 109, 0, 110, 0, 0,
	276, 0, 111, 645, 0, 217, 0, 112, 113, 114,
	641, 643, 278, 0, 117, 0, 115, 0, 277, 116,
	658, 659, 660, 661, 0, 624, 0, 279, 118, 280,
	119, 120, 0, 122, 121, 0, 646, 281, 123, 282,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 283, 131, 132, 135, 133, 587, 134, 613, 642,
	136, 662, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 284, 140, 285, 636, 141, 142, 143, 144, 0,
	637, 145, 231, 146, 0, 147, 148, 149, 663, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 286, 157,
	158, 602, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 630, 165, 166, 287, 167, 664, 236, 168, 0,
	174, 169, 170, 171, 173, 665, 172, 638, 0, 175,
	0, 176, 177, 178, 0, 239, 666, 667, 0, 0,
	179, 639, 640, 611, 180, 181, 182, 183, 0, 0,
	184, 185, 186, 631, 187, 0, 188, 189, 190, 244,
	668, 0, 0, 191, 0, 0, 0, 0, 192, 193,
	194, 195, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 584, 585, 0, 0, 0, 0, 586,
	0, 0, 594, 1578, 0, 0, 0, 592, 617, 606,
	607, 604, 605, 593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 0, 633, 599, 0, 0, 0, 81, 82, 197,
	648, 199, 649, 83, 650, 651, 0, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 99, 655, 656, 683, 100,
	0, 101, 0, 0, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	630, 165, 166, 287, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 666, 667, 0, 0, 179,
	639, 640, 611, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 668,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 617, 606, 607, 604, 605, 593, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 78,
	79, 594, 80, 0, 0, 0, 592, 633, 599, 0,
	0, 0, 81, 82, 197, 648, 199, 649, 83, 650,
	651, 0, 84, 203, 204, 85, 614, 632, 652, 653,
	207, 0, 644, 0, 625, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	626, 628, 0, 627, 629, 95, 96, 97, 98, 654,
	99, 655, 656, 0, 100, 0, 101, 0, 0, 0,
	647, 103, 0, 104, 0, 0, 0, 598, 105, 106,
	634, 635, 612, 0, 0, 107, 108, 657, 0, 109,
	0, 110, 0, 1235, 276, 0, 111, 645, 0, 217,
	0, 112, 113, 114, 641, 643, 278, 0, 117, 0,
	115, 0, 277, 116, 658, 659, 660, 661, 0, 624,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	646, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	587, 134, 613, 642, 136, 662, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 636, 141,
	142, 143, 144, 0, 637, 145, 231, 146, 0, 147,
	148, 149, 663, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 602, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 630, 165, 166, 287, 167,
	664, 236, 168, 0, 174, 169, 170, 171, 173, 665,
	172, 638, 0, 175, 0, 176, 177, 178, 0, 239,
	666, 667, 0, 0, 179, 639, 640, 611, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 631, 187, 0,
	188, 189, 190, 244, 668, 0, 0, 191, 0, 0,
	0, 0, 192, 193, 194, 195, 588, 0, 617, 606,
	607, 604, 605, 593, 0, 0, 0, 584, 585, 0,
	0, 0, 0, 586, 78, 79, 594, 80, 0, 0,
	0, 592, 633, 599, 0, 0, 0, 81, 82, 197,
	648, 199, 649, 83, 650, 651, 0, 84, 203, 204,
	85, 614, 632, 652, 653, 207, 0, 644, 0, 625,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 626, 628, 0, 627, 629,
	95, 96, 97, 98, 654, 99, 655, 656, 0, 100,
	0, 101, 0, 0, 0, 647, 103, 0, 104, 0,
	0, 0, 598, 105, 106, 634, 635, 612, 0, 0,
	107, 108, 657, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 645, 0, 217, 0, 112, 113, 114, 641,
	643, 278, 0, 117, 0, 115, 0, 277, 116, 658,
	659, 660, 661, 0, 624, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 646, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 587, 134, 613, 642, 136,
	662, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 636, 141, 142, 143, 144, 0, 637,
	145, 231, 146, 0, 147, 148, 149, 663, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	602, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	630, 165, 166, 287, 167, 664, 236, 168, 0, 174,
	169, 170, 171, 173, 665, 172, 638, 0, 175, 0,
	176, 177, 178, 0, 239, 666, 667, 0, 0, 179,
	639, 640, 611, 180, 181, 182, 183, 0, 0, 184,
	185, 186, 631, 187, 0, 188, 189, 190, 244, 668,
	0, 0, 191, 0, 0, 0, 0, 192, 193, 194,
	195, 588, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 584, 585, 0, 0, 0, 0, 586, 0,
	0, 594, 1184, 0, 0, 0, 592, 617, 606, 607,
	604, 605, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 859, 80, 0, 0, 0,
	0, 633, 599, 0, 0, 0, 81, 82, 197, 648,
	199, 649, 83, 650, 651, 0, 84, 203, 204, 85,
	614, 632, 652, 653, 207, 0, 644, 0, 625, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	275, 93, 94, 0, 626, 628, 0, 627, 629, 95,
	96, 97, 98, 654, 99, 655, 656, 0, 100, 0,
	101, 0, 0, 0, 647, 103, 0, 104, 0, 0,
	0, 598, 105, 106, 634, 635, 612, 0, 0, 107,
	108, 657, 0, 109, 0, 110, 0, 0, 276, 0,
	111, 645, 0, 217, 0, 112, 113, 114, 641, 643,
	278, 0, 117, 0, 115, 0, 277, 116, 658, 659,
	660, 661, 0, 624, 0, 279, 118, 280, 119, 120,
	0, 122, 121, 0, 646, 281, 123, 282, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 283,
	131, 132, 135, 133, 587, 134, 613, 642, 136, 662,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 284,
	140, 285, 636, 141, 142, 143, 144, 0, 637, 145,
	231, 146, 0, 147, 148, 149, 663, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 286, 157, 158, 602,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 630,
	165, 166, 287, 167, 664, 236, 168, 0, 174, 169,
	170, 171, 173, 665, 172, 638, 0, 175, 0, 176,
	177, 178, 0, 239, 666, 667, 0, 0, 179, 639,
	640, 611, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 631, 187, 0, 188, 189, 190, 244, 668, 0,
	0, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	588, 0, 617, 606, 607, 604, 605, 593, 0, 0,
	0, 584, 585, 0, 0, 0, 0, 586, 78, 79,
	594, 80, 0, 0, 0, 592, 633, 599, 0, 0,
	0, 81, 82, 197, 648, 199, 649, 83, 650, 651,
	0, 84, 203, 204, 85, 614, 632, 652, 653, 207,
	0, 644, 0, 625, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 275, 93, 1947, 0, 626,
	628, 0, 627, 629, 95, 96, 97, 98, 654, 99,
	655, 656, 0, 100, 0, 101, 0, 0, 0, 647,
	103, 0, 104, 0, 0, 0, 598, 105, 106, 634,
	635, 612, 0, 0, 107, 108, 657, 0, 109, 0,
	110, 0, 0, 276, 0, 111, 645, 0, 217, 0,
	112, 113, 114, 641, 643, 278, 0, 117, 0, 115,
	0, 277, 116, 658, 659, 660, 661, 0, 624, 0,
	279, 118, 280, 119, 120, 0, 122, 121, 0, 646,
	281, 123, 282, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 283, 131, 132, 135, 133, 587,
	134, 613, 642, 136, 662, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 284, 140, 285, 636, 141, 142,
	143, 144, 0, 637, 145, 231, 146, 0, 147, 148,
	149, 663, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 286, 157, 158, 602, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 630, 165, 166, 287, 167, 664,
	236, 168, 0, 174, 169, 170, 171, 173, 665, 172,
	638, 0, 175, 0, 176, 177, 178, 0, 239, 666,
	667, 0, 0, 179, 639, 640, 611, 180, 181, 1946,
	183, 0, 0, 184, 185, 186, 631, 187, 0, 188,
	189, 190, 244, 668, 0, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 588, 0, 617, 606, 607,
	604, 605, 593, 0, 0, 0, 584, 585, 0, 0,
	0, 0, 586, 78, 79, 594, 80, 0, 0, 0,
	592, 633, 599, 0, 0, 0, 81, 82, 1945, 648,
	199, 649, 83, 650, 651, 0, 84, 203, 204, 85,
	614, 632, 652, 653, 207, 0, 644, 0, 625, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	275, 93, 1947, 0, 626, 628, 0, 627, 629, 95,
	96, 97, 98, 654, 99, 655, 656, 0, 100, 0,
	101, 0, 0, 0, 647, 103, 0, 104, 0, 0,
	0, 598, 105, 106, 634, 635, 612, 0, 0, 107,
	108, 657, 0, 109, 0, 110, 0, 0, 276, 0,
	111, 645, 0, 217, 0, 112, 113, 114, 641, 643,
	278, 0, 117, 0, 115, 0, 277, 116, 658, 659,
	660, 661, 0, 624, 0, 279, 118, 280, 119, 120,
	0, 122, 121, 0, 646, 281, 123, 282, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 283,
	131, 132, 135, 133, 587, 134, 613, 642, 136, 662,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 284,
	140, 285, 636, 141, 142, 143, 144, 0, 637, 145,
	231, 146, 0, 147, 148, 149, 663, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 286, 157, 158, 602,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 630,
	165, 166, 287, 167, 664, 236, 168, 0, 174, 169,
	170, 171, 173, 665, 172, 638, 0, 175, 0, 176,
	177, 178, 0, 239, 666, 667, 0, 0, 179, 639,
	640, 611, 180, 181, 1946, 183, 0, 0, 184, 185,
	186, 631, 187, 0, 188, 189, 190, 244, 668, 0,
	0, 191, 0, 0, 0, 0, 192, 193, 194, 195,
	588, 0, 617, 606, 607, 604, 605, 593, 0, 0,
	0, 584, 585, 0, 0, 0, 0, 586, 78, 79,
	594, 80, 0, 0, 0, 592, 633, 599, 0, 0,
	0, 81, 82, 197, 648, 199, 649, 83, 650, 651,
	0, 84, 203, 204, 85, 614, 632, 652, 653, 207,
	0, 644, 0, 625, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 275, 93, 94, 0, 626,
	628, 0, 627, 629, 95, 96, 97, 98, 654, 99,
	655, 656, 0, 100, 0, 101, 0, 0, 0, 647,
	103, 0, 104, 0, 0, 0, 598, 105, 106, 634,
	635, 612, 0, 0, 107, 108, 657, 0, 109, 0,
	110, 0, 0, 276, 0, 111, 645, 0, 217, 0,
	112, 113, 114, 641, 643, 278, 0, 117, 0, 115,
	0, 277, 116, 658, 659, 660, 661, 0, 624, 0,
	279, 118, 280, 119, 120, 0, 122, 121, 0, 646,
	281, 123, 282, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 283, 131, 132, 135, 133, 587,
	134, 613, 642, 136, 662, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 284, 140, 285, 636, 141, 142,
	143, 144, 0, 637, 145, 231, 146, 0, 147, 148,
	149, 663, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 286, 157, 158, 602, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 630, 165, 166, 287, 167, 664,
	236, 168, 0, 174, 169, 170, 171, 173, 665, 172,
	638, 0, 175, 0, 176, 177, 178, 0, 239, 666,
	667, 0, 0, 179, 639, 640, 611, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 631, 187, 0, 188,
	189, 190, 244, 668, 0, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 588, 0, 1207, 606, 607,
	604, 605, 593, 0, 0, 0, 584, 585, 0, 0,
	0, 0, 586, 78, 79, 594, 80, 0, 0, 0,
	592, 633, 599, 0, 0, 0, 81, 82, 197, 648,
	199, 649, 83, 650, 651, 0, 84, 203, 204, 85,
	614, 632, 652, 653, 207, 0, 644, 0, 625, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	275, 93, 94, 0, 626, 628, 0, 627, 629, 95,
	96, 97, 98, 654, 1210, 655, 656, 0, 100, 0,
	101, 0, 0, 0, 647, 103, 0, 104, 0, 0,
	0, 598, 105, 106, 634, 635, 612, 0, 0, 107,
	108, 657, 0, 109, 0, 110, 0, 0, 276, 0,
	111, 645, 0, 217, 0, 112, 113, 1211, 641, 643,
	278, 0, 117, 0, 115, 0, 277, 116, 658, 659,
	660, 661, 0, 624, 0, 279, 118, 280, 119, 120,
	0, 122, 121, 0, 646, 281, 123, 282, 0, 124,
	0, 0, 125, 0, 126, 1212, 1209, 129, 130, 283,
	131, 132, 135, 133, 587, 134, 613, 642, 136, 662,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 284,
	140, 285, 636, 141, 142, 143, 144, 0, 637, 145,
	231, 146, 0, 147, 148, 149, 663, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 286, 157, 158, 602,
	159, 0, 160, 161, 1213, 0, 234, 163, 164, 630,
	165, 166, 287, 167, 664, 236, 168, 0, 174, 169,
	170, 171, 173, 665, 172, 638, 0, 175, 0, 176,
	177, 178, 0, 239, 666, 667, 0, 0, 179, 639,
	640, 611, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 631, 187, 0, 188, 189, 190, 244, 668, 0,
	0, 191, 0, 0, 0, 0, 192, 193, 1208, 195,
	588, 0, 617, 606, 607, 604, 605, 593, 0, 0,
	0, 584, 585, 0, 0, 0, 0, 586, 78, 79,
	594, 80, 0, 0, 0, 592, 633, 599, 0, 0,
	0, 81, 82, 197, 648, 199, 649, 83, 650, 651,
	0, 84, 203, 204, 85, 614, 632, 652, 653, 207,
	0, 644, 0, 625, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 275, 93, 94, 0, 626,
	628, 0, 627, 629, 95, 96, 97, 98, 654, 99,
	655, 656, 0, 100, 0, 101, 0, 0, 0, 647,
	103, 0, 104, 0, 0, 0, 598, 105, 106, 634,
	635, 612, 0, 0, 107, 108, 657, 0, 109, 0,
	110, 0, 0, 276, 0, 111, 645, 0, 217, 0,
	112, 113, 114, 641, 643, 278, 0, 117, 0, 115,
	0, 277, 116, 658, 659, 660, 661, 0, 624, 0,
	279, 118, 280, 119, 120, 0, 122, 121, 0, 646,
	281, 123, 282, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 283, 131, 132, 135, 133, 0,
	134, 613, 642, 136, 662, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 284, 140, 285, 636, 141, 142,
	143, 144, 0, 637, 145, 231, 146, 0, 147, 148,
	149, 663, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 286, 157, 158, 1225, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 630, 165, 166, 287, 167, 664,
	236, 168, 0, 174, 169, 170, 171, 173, 665, 172,
	638, 0, 175, 0, 176, 177, 178, 0, 239, 666,
	667, 0, 0, 179, 639, 640, 611, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 631, 187, 0, 188,
	189, 190, 244, 668, 0, 0, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 1221, 1222, 0, 0,
	0, 0, 1223, 78, 79, 1224, 80, 0, 0, 0,
	592, 633, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 632, 205, 206, 207, 0, 644, 0, 625, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	275, 93, 94, 0, 626, 628, 0, 627, 629, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 634, 635, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 276, 0,
	111, 645, 0, 217, 0, 112, 113, 114, 641, 643,
	278, 0, 117, 0, 115, 0, 277, 116, 220, 221,
	222, 223, 0, 224, 0, 279, 118, 280, 119, 120,
	0, 122, 121, 0, 646, 281, 123, 282, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 283,
	131, 132, 135, 133, 0, 134, 0, 642, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 284,
	140, 285, 636, 141, 142, 143, 144, 0, 637, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 286, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 630,
	165, 166, 287, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 638, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 639,
	640, 0, 180, 181, 182, 183, 496, 0, 184, 185,
	186, 631, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	1696, 205, 206, 207, 0, 208, 0, 274, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 275,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 276, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 218, 219, 278,
	0, 117, 0, 115, 0, 277, 116, 220, 221, 222,
	223, 0, 224, 0, 279, 118, 280, 119, 120, 0,
	122, 121, 0, 225, 281, 123, 282, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 283, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 284, 140,
	285, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 286, 157, 158, 233, 159,
	0, 160, 161, 162, 64, 234, 163, 164, 0, 165,
	166, 287, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 66, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 500, 245, 0, 0,
	191, 0, 0, 0, 62, 192, 193, 194, 195, 0,
	63, 496, 809, 0, 810, 805, 800, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 61,
	80, 0, 0, 0, 0, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 274, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 275, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 813, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	802, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 276, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 218, 219, 278, 0, 117, 0, 115, 0,
	277, 116, 220, 221, 222, 223, 0, 224, 0, 279,
	118, 280, 119, 120, 0, 122, 121, 0, 225, 281,
	123, 282, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 283, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 803, 0, 0,
	0, 139, 228, 284, 140, 285, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	286, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 287, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 801, 180, 181, 182, 183,
	0, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 496, 809, 191, 810, 805, 800, 0,
	192, 193, 194, 195, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 0, 0, 811, 806, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 274, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 796, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 802, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 278, 0, 117, 0,
	115, 0, 277, 116, 220, 221, 222, 223, 0, 224,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	225, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 803,
	0, 0, 0, 139, 228, 284, 140, 285, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 287, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 801, 180, 181,
	182, 183, 0, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 496, 809, 191, 810, 805,
	800, 0, 192, 193, 194, 195, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 811, 806, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 274, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 275, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 802, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 276, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 278, 0,
	117, 0, 115, 0, 277, 116, 220, 221, 222, 223,
	0, 224, 0, 279, 118, 280, 119, 120, 0, 122,
	121, 0, 225, 281, 123, 282, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 283, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 803, 0, 0, 0, 139, 228, 284, 140, 285,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 286, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	287, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 801,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 75, 0, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 811,
	806, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 218, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 457, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 64, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 66, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 0, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 500, 245, 0,
	0, 191, 75, 0, 0, 62, 192, 193, 194, 195,
	0, 63, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 196, 0, 0, 0,
	1121, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	64, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 66, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 500, 245, 0, 0, 191, 75, 0, 0,
	62, 192, 193, 194, 195, 0, 63, 0, 0, 0,
	0, 0, 0, 78, 79, 0, 80, 0, 0, 0,
	0, 196, 0, 0, 0, 61, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 218, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 457, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	1121, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 218, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 0, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 0, 75, 0, 0, 192, 193, 194, 195, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	0, 80, 0, 0, 0, 0, 196, 0, 0, 0,
	701, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 1023, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 218, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 0, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 1593, 205, 206, 207, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 218, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 617, 606, 607, 604, 605, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 0, 80, 679, 0, 0, 0, 196, 0, 0,
	0, 0, 81, 82, 197, 648, 199, 649, 83, 650,
	651, 0, 84, 203, 204, 85, 0, 0, 652, 653,
	207, 0, 208, 0, 274, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 275, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 654,
	99, 655, 656, 0, 100, 0, 101, 0, 0, 0,
	647, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 612, 0, 0, 107, 108, 657, 0, 109,
	0, 110, 0, 0, 276, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 278, 0, 117, 0,
	115, 0, 277, 116, 658, 659, 660, 661, 0, 624,
	0, 279, 118, 280, 119, 120, 0, 122, 121, 0,
	225, 281, 123, 282, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 283, 131, 132, 135, 133,
	0, 134, 613, 226, 136, 662, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 284, 140, 285, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 663, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 286, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 287, 167,
	664, 236, 168, 0, 174, 169, 170, 171, 173, 665,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	666, 667, 0, 0, 179, 242, 243, 611, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 668, 0, 0, 191, 78, 79,
	0, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 780, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 779, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 0, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 75, 191, 0, 0, 0,
	0, 192, 193, 194, 195, 0, 0, 0, 0, 0,
	0, 78, 79, 0, 80, 0, 0, 0, 783, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 0, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 496, 191,
	0, 0, 0, 0, 192, 193, 194, 195, 0, 0,
	0, 0, 0, 0, 78, 79, 0, 80, 0, 0,
	0, 783, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 274,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 275, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 276,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 278, 0, 117, 0, 115, 0, 277, 116, 220,
	221, 222, 223, 0, 224, 0, 279, 118, 280, 119,
	120, 0, 122, 121, 0, 225, 281, 123, 282, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	283, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	284, 140, 285, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 286, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 287, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 987, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 985, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 1092, 0, 107,
	108, 215, 0, 109, 0, 110, 990, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 218, 219,
	0, 0, 117, 1090, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 989, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 1091, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 987, 208, 0, 0, 982, 86,
	87, 88, 0, 89, 985, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 990, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 981, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 989, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 988, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 1562, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 218, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 218, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 457, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 730, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	457, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	508, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 469, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 457, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 0, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 462, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 457, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 75,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 78, 79, 372, 80, 192,
	193, 194, 195, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 207, 0, 208, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	218, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	130, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 371, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 239, 240, 241, 0, 0,
	179, 242, 243, 0, 180, 181, 182, 183, 75, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 78, 79, 0, 80, 192, 193,
	194, 195, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 130,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 239, 240, 241, 0, 0, 179,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 1271, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 1269, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 1258, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 850, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 218, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 386, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	0, 80, 192, 193, 194, 195, 196, 0, 715, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 150, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 0, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 559, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 124, 0, 0, 125, 0, 126, 127,
	128, 129, 130, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 233, 159, 0, 160, 161, 162, 0,
	234, 163, 164, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 239, 240, 241,
	0, 0, 179, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 0, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 554, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 143, 144,
	0, 230, 145, 231, 146, 0, 147, 148, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 159, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 75,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 78, 79, 0, 80, 192,
	193, 194, 195, 196, 0, 0, 0, 0, 81, 82,
	197, 198, 199, 200, 83, 201, 202, 0, 84, 203,
	204, 85, 0, 0, 205, 206, 514, 0, 208, 0,
	0, 0, 86, 87, 88, 0, 89, 0, 90, 91,
	92, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	0, 95, 96, 97, 98, 209, 99, 210, 211, 0,
	100, 0, 101, 0, 0, 0, 102, 103, 0, 104,
	0, 0, 0, 212, 105, 106, 213, 214, 0, 0,
	0, 107, 108, 215, 0, 109, 0, 110, 0, 0,
	0, 0, 111, 216, 0, 217, 0, 112, 113, 114,
	218, 219, 0, 0, 117, 0, 115, 0, 0, 116,
	220, 221, 222, 223, 0, 224, 0, 0, 118, 0,
	119, 120, 0, 122, 121, 0, 225, 0, 123, 0,
	0, 124, 0, 0, 125, 0, 126, 127, 128, 129,
	397, 0, 131, 132, 135, 133, 0, 134, 0, 226,
	136, 227, 137, 138, 0, 0, 0, 0, 0, 139,
	228, 0, 140, 0, 229, 141, 142, 143, 144, 0,
	230, 145, 231, 146, 0, 147, 148, 149, 232, 150,
	151, 0, 153, 154, 152, 155, 0, 156, 0, 157,
	158, 233, 159, 0, 160, 161, 162, 0, 234, 163,
	164, 0, 165, 166, 0, 167, 235, 236, 168, 0,
	174, 169, 170, 171, 173, 237, 172, 238, 0, 175,
	0, 176, 177, 178, 0, 396, 240, 241, 0, 0,
	392, 242, 243, 0, 180, 181, 182, 183, 75, 0,
	184, 185, 186, 0, 187, 0, 188, 189, 190, 244,
	245, 0, 0, 191, 78, 79, 0, 80, 192, 193,
	194, 195, 196, 0, 0, 0, 0, 81, 82, 197,
	198, 199, 200, 83, 201, 202, 0, 84, 203, 204,
	85, 0, 0, 205, 206, 207, 0, 208, 0, 0,
	0, 86, 87, 88, 0, 89, 0, 90, 91, 92,
	0, 0, 93, 94, 0, 0, 0, 0, 0, 0,
	95, 96, 97, 98, 209, 99, 210, 211, 0, 100,
	0, 101, 0, 0, 0, 102, 103, 0, 104, 0,
	0, 0, 212, 105, 106, 213, 214, 0, 0, 0,
	107, 108, 215, 0, 109, 0, 110, 0, 0, 0,
	0, 111, 216, 0, 217, 0, 112, 113, 114, 218,
	219, 0, 0, 117, 0, 115, 0, 0, 116, 220,
	221, 222, 223, 0, 224, 0, 0, 118, 0, 119,
	120, 0, 122, 121, 0, 225, 0, 123, 0, 0,
	124, 0, 0, 125, 0, 126, 127, 128, 129, 397,
	0, 131, 132, 135, 133, 0, 134, 0, 226, 136,
	227, 137, 138, 0, 0, 0, 0, 0, 139, 228,
	0, 140, 0, 229, 141, 142, 143, 144, 0, 230,
	145, 231, 146, 0, 147, 148, 149, 232, 150, 151,
	0, 153, 154, 152, 155, 0, 156, 0, 157, 158,
	233, 159, 0, 160, 161, 162, 0, 234, 163, 164,
	0, 165, 166, 0, 167, 235, 236, 168, 0, 174,
	169, 170, 171, 173, 237, 172, 238, 0, 175, 0,
	176, 177, 178, 0, 396, 240, 241, 0, 0, 392,
	242, 243, 0, 180, 181, 182, 183, 75, 0, 184,
	185, 186, 0, 187, 0, 188, 189, 190, 244, 245,
	0, 0, 191, 78, 79, 0, 80, 192, 193, 194,
	195, 196, 0, 0, 0, 0, 81, 82, 197, 198,
	199, 200, 83, 201, 202, 0, 84, 203, 204, 85,
	0, 0, 205, 206, 207, 0, 208, 0, 0, 0,
	86, 87, 88, 0, 89, 0, 90, 91, 92, 0,
	0, 93, 94, 0, 0, 0, 0, 0, 0, 95,
	96, 97, 98, 209, 99, 210, 211, 0, 100, 0,
	101, 0, 0, 0, 102, 103, 0, 104, 0, 0,
	0, 212, 105, 106, 213, 214, 0, 0, 0, 107,
	108, 215, 0, 109, 0, 110, 0, 0, 0, 0,
	111, 216, 0, 217, 0, 112, 113, 114, 492, 219,
	0, 0, 117, 0, 115, 0, 0, 116, 220, 221,
	222, 223, 0, 224, 0, 0, 118, 0, 119, 120,
	0, 122, 121, 0, 225, 0, 123, 0, 0, 124,
	0, 0, 125, 0, 126, 127, 128, 129, 130, 0,
	131, 132, 135, 133, 0, 134, 0, 226, 136, 227,
	137, 138, 0, 0, 0, 0, 0, 139, 228, 0,
	140, 0, 229, 141, 142, 143, 144, 0, 230, 145,
	231, 146, 0, 147, 148, 149, 232, 150, 151, 0,
	153, 154, 152, 155, 0, 156, 0, 157, 158, 233,
	159, 0, 160, 161, 162, 0, 234, 163, 164, 0,
	165, 166, 0, 167, 235, 236, 168, 0, 174, 169,
	170, 171, 173, 237, 172, 238, 0, 175, 0, 176,
	177, 178, 0, 239, 240, 241, 0, 0, 179, 242,
	243, 0, 180, 181, 182, 183, 75, 0, 184, 185,
	186, 0, 187, 0, 188, 189, 190, 244, 245, 0,
	0, 191, 78, 79, 0, 80, 192, 193, 194, 195,
	196, 0, 0, 0, 0, 81, 82, 197, 198, 199,
	200, 83, 201, 202, 0, 84, 203, 204, 85, 0,
	0, 205, 206, 207, 0, 208, 0, 0, 0, 86,
	87, 88, 0, 89, 0, 90, 91, 92, 0, 0,
	93, 94, 0, 0, 0, 0, 0, 0, 95, 96,
	97, 98, 209, 99, 210, 211, 0, 100, 0, 101,
	0, 0, 0, 102, 103, 0, 104, 0, 0, 0,
	212, 105, 106, 213, 214, 0, 0, 0, 107, 108,
	215, 0, 109, 0, 110, 0, 0, 0, 0, 111,
	216, 0, 217, 0, 112, 113, 114, 489, 219, 0,
	0, 117, 0, 115, 0, 0, 116, 220, 221, 222,
	223, 0, 224, 0, 0, 118, 0, 119, 120, 0,
	122, 121, 0, 225, 0, 123, 0, 0, 124, 0,
	0, 125, 0, 126, 127, 128, 129, 130, 0, 131,
	132, 135, 133, 0, 134, 0, 226, 136, 227, 137,
	138, 0, 0, 0, 0, 0, 139, 228, 0, 140,
	0, 229, 141, 142, 143, 144, 0, 230, 145, 231,
	146, 0, 147, 148, 149, 232, 150, 151, 0, 153,
	154, 152, 155, 0, 156, 0, 157, 158, 233, 159,
	0, 160, 161, 162, 0, 234, 163, 164, 0, 165,
	166, 0, 167, 235, 236, 168, 0, 174, 169, 170,
	171, 173, 237, 172, 238, 0, 175, 0, 176, 177,
	178, 0, 239, 240, 241, 0, 0, 179, 242, 243,
	0, 180, 181, 182, 183, 75, 0, 184, 185, 186,
	0, 187, 0, 188, 189, 190, 244, 245, 0, 0,
	191, 78, 79, 0, 80, 192, 193, 194, 195, 196,
	0, 0, 0, 0, 81, 82, 197, 198, 199, 200,
	83, 201, 202, 0, 84, 203, 204, 85, 0, 0,
	205, 206, 207, 0, 208, 0, 0, 0, 86, 87,
	88, 0, 89, 0, 90, 91, 92, 0, 0, 93,
	94, 0, 0, 0, 0, 0, 0, 95, 96, 97,
	98, 209, 99, 210, 211, 0, 100, 0, 101, 0,
	0, 0, 102, 103, 0, 104, 0, 0, 0, 212,
	105, 106, 213, 214, 0, 0, 0, 107, 108, 215,
	0, 109, 0, 110, 0, 0, 0, 0, 111, 216,
	0, 217, 0, 112, 113, 114, 486, 219, 0, 0,
	117, 0, 115, 0, 0, 116, 220, 221, 222, 223,
	0, 224, 0, 0, 118, 0, 119, 120, 0, 122,
	121, 0, 225, 0, 123, 0, 0, 124, 0, 0,
	125, 0, 126, 127, 128, 129, 130, 0, 131, 132,
	135, 133, 0, 134, 0, 226, 136, 227, 137, 138,
	0, 0, 0, 0, 0, 139, 228, 0, 140, 0,
	229, 141, 142, 143, 144, 0, 230, 145, 231, 146,
	0, 147, 148, 149, 232, 150, 151, 0, 153, 154,
	152, 155, 0, 156, 0, 157, 158, 233, 159, 0,
	160, 161, 162, 0, 234, 163, 164, 0, 165, 166,
	0, 167, 235, 236, 168, 0, 174, 169, 170, 171,
	173, 237, 172, 238, 0, 175, 0, 176, 177, 178,
	0, 239, 240, 241, 0, 0, 179, 242, 243, 0,
	180, 181, 182, 183, 75, 0, 184, 185, 186, 0,
	187, 0, 188, 189, 190, 244, 245, 0, 0, 191,
	78, 79, 0, 80, 192, 193, 194, 195, 196, 0,
	0, 0, 0, 81, 82, 197, 198, 199, 200, 83,
	201, 202, 0, 84, 203, 204, 85, 0, 0, 205,
	206, 207, 0, 208, 0, 0, 0, 86, 87, 88,
	0, 89, 0, 90, 91, 92, 0, 0, 93, 94,
	0, 0, 0, 0, 0, 0, 95, 96, 97, 98,
	209, 99, 210, 211, 0, 100, 0, 101, 0, 0,
	0, 102, 103, 0, 104, 0, 0, 0, 212, 105,
	106, 213, 214, 0, 0, 0, 107, 108, 215, 0,
	109, 0, 110, 0, 0, 0, 0, 111, 216, 0,
	217, 0, 112, 113, 114, 484, 219, 0, 0, 117,
	0, 115, 0, 0, 116, 220, 221, 222, 223, 0,
	224, 0, 0, 118, 0, 119, 120, 0, 122, 121,
	0, 225, 0, 123, 0, 0, 124, 0, 0, 125,
	0, 126, 127, 128, 129, 130, 0, 131, 132, 135,
	133, 0, 134, 0, 226, 136, 227, 137, 138, 0,
	0, 0, 0, 0, 139, 228, 0, 140, 0, 229,
	141, 142, 143, 144, 0, 230, 145, 231, 146, 0,
	147, 148, 149, 232, 150, 151, 0, 153, 154, 152,
	155, 0, 156, 0, 157, 158, 233, 159, 0, 160,
	161, 162, 0, 234, 163, 164, 0, 165, 166, 0,
	167, 235, 236, 168, 0, 174, 169, 170, 171, 173,
	237, 172, 238, 0, 175, 0, 176, 177, 178, 0,
	239, 240, 241, 0, 0, 179, 242, 243, 0, 180,
	181, 182, 183, 75, 0, 184, 185, 186, 0, 187,
	0, 188, 189, 190, 244, 245, 0, 0, 191, 78,
	79, 0, 80, 192, 193, 194, 195, 196, 0, 0,
	0, 0, 81, 82, 197, 198, 199, 200, 83, 201,
	202, 0, 84, 203, 204, 85, 0, 0, 205, 206,
	207, 0, 208, 0, 0, 0, 86, 87, 88, 0,
	89, 0, 90, 91, 92, 0, 0, 93, 94, 0,
	0, 0, 0, 0, 0, 95, 96, 97, 98, 209,
	99, 210, 211, 0, 100, 0, 101, 0, 0, 0,
	102, 103, 0, 104, 0, 0, 0, 212, 105, 106,
	213, 214, 0, 0, 0, 107, 108, 215, 0, 109,
	0, 110, 0, 0, 0, 0, 111, 216, 0, 217,
	0, 112, 113, 114, 465, 219, 0, 0, 117, 0,
	115, 0, 0, 116, 220, 221, 222, 223, 0, 224,
	0, 0, 118, 0, 119, 120, 0, 122, 121, 0,
	225, 0, 123, 0, 0, 124, 0, 0, 125, 0,
	126, 127, 128, 129, 130, 0, 131, 132, 135, 133,
	0, 134, 0, 226, 136, 227, 137, 138, 0, 0,
	0, 0, 0, 139, 228, 0, 140, 0, 229, 141,
	142, 143, 144, 0, 230, 145, 231, 146, 0, 147,
	148, 149, 232, 150, 151, 0, 153, 154, 152, 155,
	0, 156, 0, 157, 158, 233, 159, 0, 160, 161,
	162, 0, 234, 163, 164, 0, 165, 166, 0, 167,
	235, 236, 168, 0, 174, 169, 170, 171, 173, 237,
	172, 238, 0, 175, 0, 176, 177, 178, 0, 239,
	240, 241, 0, 0, 179, 242, 243, 0, 180, 181,
	182, 183, 75, 0, 184, 185, 186, 0, 187, 0,
	188, 189, 190, 244, 245, 0, 0, 191, 78, 79,
	0, 80, 192, 193, 194, 195, 196, 0, 0, 0,
	0, 81, 82, 197, 198, 199, 200, 83, 201, 202,
	0, 84, 203, 204, 85, 0, 0, 205, 206, 207,
	0, 208, 0, 0, 0, 86, 87, 88, 0, 89,
	0, 90, 91, 92, 0, 0, 93, 94, 0, 0,
	0, 0, 0, 0, 95, 96, 97, 98, 209, 99,
	210, 211, 0, 100, 0, 101, 0, 0, 0, 102,
	103, 0, 104, 0, 0, 0, 212, 105, 106, 213,
	214, 0, 0, 0, 107, 108, 215, 0, 109, 0,
	110, 0, 0, 0, 0, 111, 216, 0, 217, 0,
	112, 113, 114, 218, 219, 0, 0, 117, 0, 115,
	0, 0, 116, 220, 221, 222, 223, 0, 224, 0,
	0, 118, 0, 119, 120, 0, 122, 121, 0, 225,
	0, 123, 0, 0, 124, 0, 0, 125, 0, 126,
	127, 128, 129, 130, 0, 131, 132, 135, 133, 0,
	134, 0, 226, 136, 227, 137, 138, 0, 0, 0,
	0, 0, 139, 228, 0, 140, 0, 229, 141, 142,
	143, 144, 0, 230, 145, 231, 146, 0, 147, 148,
	149, 232, 446, 151, 0, 153, 154, 152, 155, 0,
	156, 0, 157, 158, 233, 159, 0, 160, 161, 162,
	0, 234, 163, 164, 0, 165, 166, 0, 167, 235,
	236, 168, 0, 174, 169, 170, 171, 173, 237, 172,
	238, 0, 175, 0, 176, 177, 178, 0, 239, 240,
	241, 0, 0, 179, 242, 243, 0, 180, 181, 182,
	183, 75, 0, 184, 185, 186, 0, 187, 0, 188,
	189, 190, 244, 245, 0, 0, 191, 78, 79, 0,
	80, 192, 193, 194, 195, 196, 0, 0, 0, 0,
	81, 82, 197, 198, 199, 200, 83, 201, 202, 0,
	84, 203, 204, 85, 0, 0, 205, 206, 207, 0,
	208, 0, 0, 0, 86, 87, 88, 0, 89, 0,
	90, 91, 92, 0, 0, 93, 94, 0, 0, 0,
	0, 0, 0, 95, 96, 97, 98, 209, 99, 210,
	211, 0, 100, 0, 101, 0, 0, 0, 102, 103,
	0, 104, 0, 0, 0, 212, 105, 106, 213, 214,
	0, 0, 0, 107, 108, 215, 0, 109, 0, 110,
	0, 0, 0, 0, 111, 216, 0, 217, 0, 112,
	113, 114, 218, 219, 0, 0, 117, 0, 115, 0,
	0, 116, 220, 221, 222, 223, 0, 224, 0, 0,
	118, 0, 119, 120, 0, 122, 121, 0, 225, 0,
	123, 0, 0, 389, 0, 0, 125, 0, 126, 127,
	128, 129, 397, 0, 131, 132, 135, 133, 0, 134,
	0, 226, 136, 227, 137, 138, 0, 0, 0, 0,
	0, 139, 228, 0, 140, 0, 229, 141, 142, 143,
	144, 0, 230, 145, 231, 146, 0, 147, 148, 149,
	232, 150, 151, 0, 153, 154, 152, 155, 0, 156,
	0, 157, 158, 391, 159, 0, 160, 161, 162, 0,
	234, 163, 390, 0, 165, 166, 0, 167, 235, 236,
	168, 0, 174, 169, 170, 171, 173, 237, 172, 238,
	0, 175, 0, 176, 177, 178, 0, 396, 240, 241,
	0, 0, 392, 242, 243, 0, 180, 181, 182, 183,
	75, 0, 184, 185, 186, 0, 187, 0, 188, 189,
	190, 244, 245, 0, 0, 191, 78, 79, 0, 80,
	192, 193, 194, 195, 196, 0, 0, 0, 0, 81,
	82, 197, 198, 199, 200, 83, 201, 202, 0, 84,
	203, 204, 85, 0, 0, 205, 206, 207, 0, 208,
	0, 0, 0, 86, 87, 88, 0, 89, 0, 90,
	91, 92, 0, 0, 93, 94, 0, 0, 0, 0,
	0, 0, 95, 96, 97, 98, 209, 99, 210, 211,
	0, 100, 0, 101, 0, 0, 0, 102, 103, 0,
	104, 0, 0, 0, 212, 105, 106, 213, 214, 0,
	0, 0, 107, 108, 215, 0, 109, 0, 110, 0,
	0, 0, 0, 111, 216, 0, 217, 0, 112, 113,
	114, 218, 219, 0, 0, 117, 0, 115, 0, 0,
	116, 220, 221, 222, 223, 0, 224, 0, 0, 118,
	0, 119, 120, 0, 122, 121, 0, 225, 0, 123,
	0, 0, 124, 0, 0, 125, 0, 126, 127, 128,
	129, 130, 0, 131, 132, 135, 133, 0, 134, 0,
	226, 136, 227, 137, 138, 0, 0, 0, 0, 0,
	139, 228, 0, 140, 0, 229, 141, 142, 0, 144,
	0, 230, 145, 231, 146, 0, 147, 0, 149, 232,
	150, 151, 0, 153, 154, 152, 155, 0, 156, 0,
	157, 158, 233, 0, 0, 160, 161, 162, 0, 234,
	163, 164, 0, 165, 166, 0, 167, 235, 236, 168,
	0, 174, 169, 170, 171, 173, 237, 172, 238, 0,
	175, 0, 176, 177, 178, 0, 239, 240, 241, 0,
	0, 179, 242, 243, 0, 180, 181, 182, 183, 0,
	0, 184, 185, 186, 0, 187, 0, 188, 189, 190,
	244, 245, 0, 0, 191, 0, 0, 0, 0, 192,
	193, 194, 195, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 878, 0, 909, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 0, 877, 898, 0,
	0, 0, 0, 892, 0, 878, 0, 909, 0, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 877, 0, 898, 0,
	0, 0, 892, 0, 0, 878, 0, 909, 0, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 883, 0, 0, 0, 877, 0, 898, 0,
	0, 0, 892, 0, 0, 878, 0, 909, 0, 0,
	902, 910, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 908, 877, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 900, 0, 902,
	910, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 900, 0, 0, 902,
	910, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 900, 0, 0, 902,
	910, 894, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 900, 0, 0, 0,
	894, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 903, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	894, 0, 0, 0, 1413, 0, 0, 0, 0, 901,
	0, 903, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 0,
	1894, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 0,
	1892, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 875, 876,
	1867, 895, 896, 897, 905, 906, 907, 0, 0, 0,
	0, 0, 0, 0, 898, 0, 0, 0, 0, 0,
	0, 878, 0, 909, 0, 0, 0, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 0, 0, 0, 0,
	0, 0, 877, 898, 0, 0, 0, 0, 892, 0,
	878, 0, 909, 0, 0, 0, 0, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 0, 0, 0, 0,
	0, 877, 0, 898, 0, 0, 0, 892, 0, 0,
	878, 0, 909, 0, 0, 0, 0, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 0, 883, 0, 0,
	0, 877, 0, 898, 0, 0, 0, 892, 0, 0,
	878, 0, 909, 0, 0, 902, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 0,
	908, 877, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 900, 0, 902, 910, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 900, 0, 0, 902, 910, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 900, 0, 0, 902, 910, 894, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 900, 0, 0, 0, 894, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 903, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 0, 894, 1842, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 903, 889, 890, 891,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 0, 0, 0, 1837, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 889, 890, 891,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 0, 0, 0, 1833, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 889, 890, 891,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 0, 875, 876, 1763, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 0, 0, 878, 0, 909, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 0, 877, 898, 0,
	0, 0, 0, 892, 0, 878, 0, 909, 0, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 877, 0, 898, 0,
	0, 0, 892, 0, 0, 878, 0, 909, 0, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 883, 0, 0, 0, 877, 0, 898, 0,
	0, 0, 892, 0, 0, 878, 0, 909, 0, 0,
	902, 910, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 908, 877, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 900, 0, 902,
	910, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 900, 0, 0, 902,
	910, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 900, 0, 0, 902,
	910, 894, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 900, 0, 0, 0,
	894, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 903, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	894, 1762, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 903, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 0,
	1662, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 0,
	1596, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 875, 876,
	1580, 895, 896, 897, 905, 906, 907, 0, 0, 0,
	0, 0, 0, 0, 898, 0, 0, 0, 0, 0,
	0, 878, 0, 909, 0, 0, 0, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 0, 0, 0, 0,
	0, 0, 877, 898, 0, 0, 0, 0, 892, 0,
	878, 0, 909, 0, 0, 0, 0, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 0, 0, 0, 0,
	0, 877, 0, 898, 0, 0, 0, 892, 0, 0,
	878, 0, 909, 0, 0, 0, 0, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 0, 883, 0, 0,
	0, 877, 0, 898, 0, 0, 0, 892, 0, 0,
	878, 0, 909, 0, 0, 902, 910, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 0, 0,
	908, 877, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 900, 0, 902, 910, 0, 0, 893, 0,
	0, 0, 0, 0, 0, 0, 883, 1967, 0, 908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	899, 900, 0, 0, 902, 910, 0, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 883, 0, 1453, 908,
	0, 1452, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 900, 0, 0, 902, 910, 894, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 908,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 900, 0, 0, 0, 894, 0, 893, 0, 0,
	0, 0, 0, 1966, 0, 0, 903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	0, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 901, 903, 0, 889, 890,
	891, 0, 888, 885, 886, 887, 879, 880, 881, 882,
	884, 0, 904, 0, 0, 894, 1177, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 903, 889, 890, 891,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 0, 1008, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 889, 890, 891,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 0, 0, 0, 0, 0, 0, 1421, 1422,
	0, 1439, 1440, 1441, 901, 0, 0, 889, 890, 891,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 0, 0, 898, 0,
	0, 0, 0, 1108, 0, 878, 0, 909, 1436, 0,
	0, 912, 0, 0, 0, 0, 0, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 877, 0, 0, 0,
	0, 0, 892, 898, 0, 0, 0, 911, 0, 0,
	878, 0, 909, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 0, 0,
	1109, 877, 0, 0, 0, 0, 0, 892, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	1442, 0, 0, 0, 0, 0, 0, 0, 0, 902,
	910, 0, 0, 0, 0, 0, 0, 0, 1437, 0,
	0, 0, 0, 0, 908, 0, 883, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 893, 0, 902, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 908,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	0, 900, 0, 0, 0, 0, 1438, 893, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 899,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 1433, 1434,
	1435, 0, 1432, 1429, 1430, 1431, 1423, 1424, 1425, 1426,
	1428, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 901, 0, 0, 889, 890, 891,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	0, 904, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 0, 0, 898, 0,
	0, 0, 0, 0, 0, 878, 0, 909, 0, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 877, 0, 898, 0,
	0, 0, 892, 0, 0, 878, 0, 909, 0, 0,
	0, 875, 876, 0, 895, 896, 897, 905, 906, 907,
	0, 0, 0, 0, 0, 0, 877, 898, 0, 0,
	0, 0, 892, 0, 878, 0, 909, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 877, 0, 0, 0, 0,
	0, 892, 0, 0, 0, 0, 0, 0, 0, 902,
	910, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 902,
	910, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	883, 0, 0, 0, 908, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 441, 900, 0, 902, 910,
	0, 0, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 908, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 900, 0, 0, 0, 0,
	894, 893, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 903, 0, 0, 0, 0, 0, 0, 898, 0,
	0, 0, 1454, 899, 0, 878, 0, 909, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 894,
	0, 1590, 0, 0, 0, 0, 0, 0, 0, 901,
	903, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 883, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 902,
	910, 0, 0, 0, 0, 0, 0, 0, 901, 0,
	0, 889, 890, 891, 908, 888, 885, 886, 887, 879,
	880, 881, 882, 884, 0, 904, 900, 0, 0, 0,
	0, 0, 893, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 0, 0, 898,
	0, 0, 0, 0, 899, 0, 878, 0, 909, 0,
	0, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 0, 0, 0, 0, 0, 0, 877, 898, 0,
	0, 0, 1412, 892, 0, 878, 0, 909, 0, 0,
	894, 0, 875, 876, 0, 895, 896, 897, 905, 906,
	907, 903, 0, 0, 0, 0, 877, 0, 898, 0,
	0, 0, 892, 0, 0, 878, 0, 909, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 883, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	902, 910, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 883, 889, 890, 891, 908, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 900, 0, 902,
	910, 0, 0, 893, 0, 0, 0, 0, 0, 0,
	0, 883, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 899, 900, 0, 0, 902,
	910, 0, 893, 0, 0, 0, 0, 1419, 0, 0,
	0, 0, 0, 0, 908, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 900, 0, 0, 0,
	0, 894, 893, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 899, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 903, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	0, 0, 889, 890, 891, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 875, 876, 0,
	895, 896, 897, 905, 906, 907, 0, 0, 0, 0,
	0, 0, 0, 898, 0, 0, 0, 0, 0, 0,
	878, 0, 909, 0, 0, 875, 876, 0, 895, 896,
	897, 905, 906, 907, 0, 0, 0, 0, 0, 0,
	0, 877, 0, 0, 0, 0, 0, 892, 878, 0,
	909, 0, 0, 875, 876, 0, 895, 896, 897, 905,
	906, 907, 0, 0, 0, 0, 0, 0, 0, 877,
	0, 0, 0, 0, 0, 892, 878, 0, 909, 0,
	0, 0, 875, 876, 0, 0, 0, 0, 905, 906,
	907, 0, 0, 0, 0, 0, 883, 877, 0, 0,
	0, 0, 0, 892, 0, 878, 0, 909, 0, 0,
	0, 0, 0, 0, 902, 910, 0, 0, 0, 0,
	0, 0, 0, 0, 883, 0, 877, 0, 0, 908,
	0, 0, 892, 0, 0, 0, 0, 0, 0, 0,
	0, 900, 902, 910, 0, 0, 0, 893, 0, 0,
	0, 0, 883, 0, 0, 0, 0, 908, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 900,
	902, 910, 0, 0, 0, 893, 0, 0, 0, 0,
	0, 883, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 900, 0, 902,
	910, 0, 0, 893, 0, 894, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 903, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 900, 0, 0, 0,
	0, 0, 893, 894, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 903, 0, 0, 0, 0, 753,
	747, 770, 741, 761, 760, 0, 0, 743, 742, 0,
	0, 894, 772, 771, 0, 0, 0, 0, 0, 0,
	0, 0, 903, 0, 901, 0, 0, 889, 890, 891,
	0, 888, 885, 886, 887, 879, 880, 881, 882, 884,
	894, 904, 0, 766, 0, 758, 757, 0, 0, 0,
	0, 903, 901, 0, 756, 889, 890, 891, 0, 888,
	885, 886, 887, 879, 880, 881, 882, 884, 0, 904,
	0, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	901, 0, 0, 889, 890, 891, 0, 888, 885, 886,
	887, 879, 880, 881, 882, 884, 0, 904, 748, 749,
	750, 751, 0, 769, 0, 0, 0, 0, 0, 901,
	0, 0, 0, 0, 0, 0, 888, 885, 886, 887,
	879, 880, 881, 882, 884, 0, 904, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 759,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 754, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 745, 0, 0, 0,
	0, 0, 0, 0, 752, 746, 0, 0, 0, 0,
	0, 0, 0, 774, 0, 0, 0, 0, 0, 0,
	0, 744, 0, 0, 767, 768, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 773,
}
var sqlPact = [...]int{

	240, -1000, 50, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 671, 17084, -1000,
	-1000, -1000, -1000, -1000, -1000, 802, 670, 157, 4931, 17084,
	17084, 16825, 998, 998, 18379, -1000, -1000, 21487, -1000, 2937,
	519, 527, 519, 519, 522, 18379, 638, 690, 167, -1000,
	788, 3, 21228, 17084, 1338, 58, 15530, 375, 240, 16566,
	20969, 17084, 16307, 351, 66, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1183, 1103, 1084, 15530,
	20710, 20451, 20192, 19933, -1000, 10702, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 757, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 380, 379,
	-1000, 16048, -1000, 937, -1000, 57, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 935, -1000, 17084, -1000, -1000, 19674,
	19415, 377, 888, -1000, -1000, 588, 440, 1342, -1000, 72,
	-1000, -1000, -1000, 1180, -1000, 929, 1179, 1178, 1176, 1175,
	1174, 1172, 437, 905, 507, -1000, 888, -1000, 888, -1000,
	-1000, -1000, 572, 18379, -1000, 15530, -1000, 19156, 17084, 17084,
	1120, 18897, -1000, 788, -1000, -1000, -1000, 964, 1323, 1323,
	1323, 1352, 186, 180, 167, 40, 17084, -1000, 376, 40,
	6666, 6666, -1000, -1000, 375, -1000, 399, 13406, -1000, 7854,
	-1000, 967, 1240, 463, 750, 1239, -82, 798, 784, 1238,
	672, 12612, 66, -1000, -1000, -1000, 9588, 4648, 15530, 17084,
	17084, 686, 18638, -1000, 1236, 133, 1233, -1000, 131, 1230,
	-1000, 131, 1225, 37, -1000, -1000, -1000, -1000, -1000, -1000,
	375, 15789, 17084, 1413, 24833, -1000, 9588, -1000, -1000, 13948,
	1182, 13948, -1000, -1000, 1410, -1000, 9588, -1000, 54, 53,
	1051, 1033, 11259, 10987, 1279, 898, -1000, -1000, -1000, 64,
	4931, 17084, 1185, 13948, 17084, 17084, 17084, 17084, 17084, 17084,
	-1000, 1038, -1000, 17084, 17084, -1000, 48, 41, -1000, 18379,
	-1000, 137, -1000, 370, 1016, 454, 183, 18120, 454, 1015,
	-1000, 964, -1000, 947, 1035, 8733, 9588, 167, -1000, -1000,
	167, 167, 9588, -1000, -1000, 17084, 40, 1408, 17084, 122,
	-1000, 23597, -1000, -1000, 9588, 9588, 9588, 9588, 9588, 877,
	-1000, -1000, 1483, -1000, 5808, -1000, -1000, 66, 369, 182,
	-1000, -1000, 368, 66, -1000, -1000, -1000, -1000, 367, 1500,
	406, -1000, -1000, -1000, 9588, 445, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1156, 364, 363, -1000, -1000,
	-1000, -1000, 362, 357, 356, 353, 349, 346, 345, 344,
	343, 342, 340, 331, 322, 320, 319, 845, -1000, 473,
	-1000, -1000, 473, 473, -1000, 308, 308, 311, -1000, -1000,
	-1000, -1000, 308, -1000, -1000, -1000, 423, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 318, 122, -1000, -1000, -1000, 17084,
	22, -1000, 24312, -1000, 18, 753, -1000, 15012, 1319, 1310,
	1301, 15530, 1383, 1377, 569, 17084, 17084, 568, 567, 15530,
	-1000, 1171, 20, -1000, -1000, 23207, -156, -1000, -1000, 460,
	92, 1406, 92, 12888, -1000, 17084, 17084, -1000, 17084, -1000,
	-1000, 17084, -1000, 17084, 17084, -1000, 17084, 139, 14494, 790,
	1217, 673, 3, 15, -1000, 1415, -1000, -1000, -1000, -1000,
	103, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 311, 845, 308, 308, 308,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 423, -1000, -1000,
	473, 473, 473, -1000, -1000, 10, 24312, 565, 33, 14221,
	17084, -1000, 61, -1000, -1000, 1168, 515, 5, 839, 1079,
	811, -1000, -1000, -1000, -1000, 39, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1456, -1000, -1000, -1000,
	-1000, 1482, 39, -1000, -1000, -1000, -1000, -1000, 1499, -1000,
	-1000, -1000, 4931, -1000, -1000, -1000, 17084, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 839, 1079, -1000,
	-1000, 15530, 14753, 1405, 1214, 854, -1000, 1392, 17084, 926,
	1013, -1000, 627, 1213, -1000, -1000, -1000, -1000, 24312, -1000,
	24312, 744, 1106, -1000, 1106, 38, -1000, 23562, -1000, 292,
	4, -1000, 460, 6666, 12353, 24833, 24833, 17084, 626, 9588,
	9588, 9588, 9588, 9588, 9588, 9588, 9588, 9588, 9588, 9588,
	9588, 9588, 9588, 9588, 9588, 9588, 9588, 9588, 9588, 9588,
	9588, 1017, 9588, 563, 9588, 9588, 9588, 9588, 778, 875,
	258, 4931, -1000, 683, 683, 683, 24635, 24635, 184, -1000,
	66, 49, 23178, 35, 66, -1000, -1000, -1000, 6378, 8424,
	66, 5214, -1000, 755, 1481, 471, 24312, 1177, 1142, 289,
	178, 176, 9588, 9588, 9873, 9873, 9588, 10158, 9588, 9588,
	6093, 9588, 9588, 9588, 9588, 9588, 9588, -1000, 287, -1000,
	-1000, -1000, -1000, 1480, -1000, -1000, 1474, -1000, 623, 589,
	1473, 460, 168, 7854, -1000, 790, 17084, 17084, 17084, -1000,
	-1000, 1008, 17861, 1006, 24833, 17084, -1000, 285, 283, 1066,
	1065, 17084, 17084, 17602, 17343, 17084, 945, 265, 262, 17084,
	773, -1000, 17084, 17084, 756, 662, 1167, 17084, -1000, 9588,
	739, 9588, 821, -1000, 12078, 481, 17084, 759, 106, -1000,
	-1000, -1000, 414, 17084, -1000, -1000, -1000, 133, -1000, 131,
	131, -1000, -1000, 15530, -1000, -1000, -1000, -1000, -1000, -1000,
	24833, 386, 385, -1000, 1472, 561, -1000, 557, 554, 553,
	-1000, 260, -1000, 9588, 17084, 14221, 33, 25, -1000, -1000,
	17084, 1079, -1000, -1000, -1000, -1000, 710, -1000, 820, -1000,
	11531, -1000, -1000, -1000, 755, -1000, 11, -1000, -1000, -1000,
	-1000, 165, 0, 23, 24833, -1000, -1000, -1000, -1000, -1000,
	17084, 341, 17084, 3, 17084, -1000, 1497, 3, 17084, 1212,
	1247, 411, 17084, -1000, -1000, -1000, 9588, -1000, -1000, -1000,
	3, 17084, -1000, 1140, -1000, -65, 1498, -118, 175, 424,
	-1000, 11803, -1000, -1000, -1000, 435, 624, 624, 560, 560,
	560, 560, 1931, 1931, 2096, 309, 24692, 24692, 24692, 2633,
	284, 284, 24692, 24692, 24692, 24635, 24607, 2603, 9588, 9588,
	550, 861, 258, 2603, 9588, 1447, 2603, 2603, 2603, -1000,
	923, -1000, -1000, -1000, 1166, 257, 10158, 10158, -1000, -1000,
	-1000, 5808, -1000, -1000, 256, 9588, -1000, -1000, 9588, -6,
	-9, -1000, -1000, -12, -1000, -1000, -2, 9588, 9588, 9588,
	162, -1000, 158, 650, -1000, 9588, 892, 255, 254, 9588,
	-1000, -1000, 24282, 22023, 152, 1165, -66, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 149, 148, 24253, -66, 147, 2074,
	-1000, 10158, 10158, 10158, 5808, 253, 145, 23267, -66, 24102,
	8139, 8139, 8139, 143, 23951, 9588, -66, 3595, 3564, 3262,
	-18, -19, -27, 1465, -28, 142, 432, 429, 135, 1140,
	-1000, -1000, -1000, -1000, 540, 538, 1210, -1000, 1004, -1000,
	488, -1000, 912, 9588, 17084, 250, 249, 796, -1000, 1209,
	970, 1208, 970, -1000, 18, 746, 9588, 9588, -1000, 537,
	-1000, -1000, 534, -1000, 653, -1000, 383, 24312, -1000, 6666,
	24312, -1000, 758, 1312, -33, -1000, -1000, 6666, 460, 12888,
	12353, 7854, -38, -1000, -1000, -1000, 790, -1000, 548, 1464,
	129, 977, 797, 752, 698, 1460, 24312, 11, -1000, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, 17084, 1123, -1000, 14753,
	244, 17084, 242, -1000, 239, -1000, -1000, 236, 17084, 1045,
	411, 1503, -1000, 454, -1000, 127, -1000, 1136, 1348, -1000,
	12353, 954, 1077, 1075, 12353, 1091, 894, 894, 894, -1000,
	424, 4354, 9588, 15271, 897, 88, 126, 1498, 9588, 2603,
	2603, 9588, 10158, 10158, -1000, 2603, -1000, -1000, -1000, -1000,
	1157, 235, 9588, 24833, 3687, 3649, -39, 7545, -10, 66,
	22882, -1000, -1000, 220, -1000, 117, 7260, -1000, 23892, -8,
	-8, -1000, 1494, 1245, -1000, 9588, 23922, -1000, 13147, 467,
	899, 22852, 24833, 24833, -1000, 9588, -1000, -1000, 1154, 9588,
	-1000, 24833, 24833, 10158, 10158, 10158, 10158, 10158, 10158, 10158,
	10158, 10158, 10158, 10158, 10158, 10158, 10158, 10158, 10158, 10158,
	10158, 10158, 1076, 10158, 1442, 1442, 1442, -23, 6951, -1000,
	1155, 1154, 9588, 9588, 24833, 115, 114, 112, -1000, 9588,
	-66, 9588, 9588, 9588, -1000, -1000, -1000, 111, -1000, 1453,
	-1000, -1000, -1000, -1000, 1136, 17084, 17084, 17084, 1207, -1000,
	1593, -1000, 22822, -40, 17084, 17084, -1000, 1080, 1071, 505,
	17084, -1000, 17084, -1000, 17084, 17084, 17084, -44, -49, 17084,
	17084, -1000, -1000, -35, 6666, 234, 3, -35, 739, -1000,
	-29, -1000, 413, -1000, 333, 310, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 108, -1000, -1000, 1126, -1000, 10443,
	226, 17084, 14753, 1390, 10443, 921, 1059, 411, 1493, -1000,
	627, -1000, 456, 9588, 9588, 1498, 633, 12353, 12353, 1169,
	1072, 12353, -1000, -1000, -1000, -1000, 15271, -1000, 1086, -53,
	-1000, -1000, 17084, 223, -1000, 424, 591, 2603, 3625, 2423,
	9588, 24833, 24663, -67, 9588, 9588, -1000, -68, -1000, 9588,
	-1000, -1000, 1449, 9588, 101, 100, 99, -1000, -1000, 24312,
	9588, -1000, -1000, 21746, 9588, 98, -1000, 97, 96, 24312,
	1155, 24312, -1000, -1000, 644, 644, 1442, 1442, 1442, 1442,
	218, 218, 570, 2671, 2060, 2060, 2060, 932, 632, 632,
	2060, 2060, 2060, 1149, 1041, 222, 23538, 9588, -74, -1000,
	-1000, -1000, 24312, 24312, 95, -1000, -1000, -1000, -66, 3210,
	22793, 22497, -1000, 93, 456, -1000, -1000, -1000, 17084, -1000,
	17084, -1000, 17084, 17084, 1152, 974, -1000, -1000, 1064, 219,
	10158, 17084, -1000, 836, -89, -90, 969, -1000, 965, 9588,
	-1000, 24833, 970, 970, -1000, 533, 532, -1000, -1000, -1000,
	-1000, -35, 1252, 17084, 1299, -1000, -1000, 214, -1000, -1000,
	-1000, 880, -95, -1000, 332, 1324, 9588, -1000, -1000, 206,
	10443, -96, 90, 3, -97, 17084, -1000, 411, 1489, -1000,
	1247, -1000, 17084, 24312, -66, 581, -1000, 1169, -1000, 204,
	9588, 12353, -1000, -1000, -150, -1000, 409, -1000, 424, 202,
	17084, 15271, 9588, 9588, 24663, -102, -1000, 2603, 2603, -1000,
	22467, -1000, 23892, -1000, -1000, -1000, 24312, 868, -1000, 22437,
	-1000, -1000, -1000, -1000, 10158, 1148, 200, 24833, 22408, -1000,
	-1000, 9588, -1000, -1000, -1000, -1000, -1000, 1153, -1000, -1000,
	17084, 1001, -1000, -1000, 9588, 23538, 194, 1123, 193, -1000,
	-1000, -1000, 804, -1000, -1000, 24312, 1326, -1000, -1000, 17084,
	17084, 600, -104, 17084, -1000, -1000, 5523, 17084, 836, 10443,
	1325, 66, 17084, 1325, 22112, 5214, -108, -1000, 1123, -1000,
	836, 191, 1487, -1000, 1045, -64, -1000, 1389, 13689, -1000,
	17084, 24312, -1000, 1086, -1000, 4931, 15271, 17084, -109, -1000,
	2603, 2603, -1000, -1000, 89, 899, 1341, -1000, 3082, 10158,
	24833, -110, -1000, 22082, -1000, -1000, 1205, 22052, 1028, 17084,
	-1000, 17084, 17084, 491, 17084, -1000, -1000, 682, -1000, 460,
	-1000, 190, 1123, -1000, -1000, -1000, -1000, 1324, -2, 836,
	-1000, 1123, 10443, -1000, 1059, 17084, 189, -1000, 188, 66,
	-115, -1000, -1000, -1000, -116, -1000, -1000, 764, 9588, 3082,
	-120, -1000, -1000, 1195, -1000, 906, 930, 87, -121, 183,
	-1000, 9588, -1000, 12888, -1000, 17084, -1000, 1325, 86, 1123,
	-1000, -122, -1000, -1000, -1000, 9588, -1000, -1000, 84, 9303,
	9303, -66, -1000, 17084, -1000, 909, 907, 675, -1000, -1000,
	-1000, -1000, -1000, 1028, 24312, -114, -126, -1000, -1000, -1000,
	836, -8, -1000, -1000, -1000, 4011, 953, 707, 23237, -1000,
	-1000, -1000, 1257, -1000, 498, 968, 968, 906, -1000, 943,
	1123, 75, 1421, -1000, -1000, -1000, -1000, -1000, -1000, 1431,
	-1000, -1000, 1067, -1000, -1000, -1000, -1000, -1000, -1000, 1449,
	9018, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1715, 1714, 1365, 134, 1712, 133, 1710, 1709, 1707,
	1705, 1704, 1703, 104, 132, 131, 135, 130, 1702, 90,
	1700, 1699, 1698, 102, 1696, 1695, 1691, 43, 1689, 1688,
	120, 118, 1687, 1685, 101, 51, 174, 2617, 167, 1683,
	1682, 1681, 14, 108, 76, 1680, 242, 1679, 1678, 49,
	37, 23, 16, 1676, 100, 115, 1329, 66, 1675, 1673,
	154, 24, 22, 595, 107, 151, 137, 122, 1672, 1671,
	1669, 52, 1668, 8, 1667, 1666, 11, 58, 6, 1665,
	27, 57, 1663, 1661, 141, 1660, 75, 105, 116, 33,
	128, 178, 1657, 96, 10, 79, 1656, 13, 82, 1652,
	50, 83, 148, 1648, 59, 157, 65, 38, 69, 112,
	1646, 1644, 1643, 87, 1641, 94, 117, 1640, 1639, 77,
	1636, 143, 145, 1635, 1632, 127, 1626, 1625, 1624, 163,
	1622, 1617, 155, 1616, 12, 44, 78, 26, 111, 109,
	31, 103, 1615, 20, 1611, 1623, 1116, 1030, 21, 54,
	17, 85, 53, 68, 62, 1607, 1606, 114, 1605, 1604,
	1600, 1598, 1592, 84, 1591, 55, 146, 35, 19, 36,
	93, 30, 60, 86, 165, 152, 110, 1588, 1578, 123,
	1577, 173, 1575, 1573, 1185, 126, 1571, 1570, 1567, 744,
	589, 573, 61, 1561, 1556, 552, 98, 1551, 1547, 125,
	1546, 1545, 149, 260, 28, 1544, 121, 1540, 95, 1539,
	0, 99, 97, 1538, 124, 80, 1536, 1535, 1534, 1531,
	32, 2, 7, 3, 5, 4, 34, 25, 1530, 1529,
	144, 91, 74, 1527, 153, 1526, 1525, 1524, 47, 1523,
	18, 1519, 15, 1518, 1517, 9, 1, 147, 1514, 106,
	1510, 1389, 1509, 150, 1508, 1503, 1388, 46, 89,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 4, 4,
	44, 44, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 41, 41, 46,
	46, 46, 48, 48, 45, 45, 40, 40, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 13, 14, 14,
	14, 14, 14, 14, 14, 14, 90, 90, 89, 89,
	92, 92, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 180, 180, 179, 18, 155,
	155, 19, 19, 19, 19, 20, 114, 114, 21, 21,
	21, 21, 22, 26, 247, 247, 247, 251, 251, 252,
	252, 253, 253, 253, 253, 253, 253, 253, 249, 249,
	29, 29, 29, 29, 29, 133, 129, 129, 131, 131,
	131, 131, 55, 128, 128, 128, 128, 130, 130, 130,
	130, 203, 202, 202, 208, 208, 208, 68, 68, 68,
	68, 68, 69, 69, 69, 201, 201, 201, 201, 209,
	209, 209, 209, 209, 209, 70, 70, 70, 207, 207,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 17,
	248, 248, 250, 250, 31, 31, 9, 9, 10, 10,
	71, 71, 72, 72, 136, 136, 136, 136, 73, 73,
	47, 47, 47, 135, 218, 218, 219, 219, 219, 219,
	219, 219, 220, 220, 220, 220, 220, 220, 220, 216,
	216, 217, 214, 214, 215, 215, 215, 215, 254, 254,
	134, 134, 76, 76, 223, 223, 223, 223, 221, 221,
	221, 221, 221, 224, 222, 225, 225, 225, 225, 225,
	166, 166, 166, 33, 11, 53, 53, 12, 8, 8,
	118, 118, 80, 80, 171, 171, 171, 62, 62, 42,
	42, 42, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 119, 119, 120, 120, 24, 28, 32,
	32, 32, 32, 32, 256, 256, 59, 59, 59, 59,
	60, 60, 132, 132, 132, 132, 132, 54, 7, 7,
	49, 49, 50, 50, 51, 51, 52, 52, 257, 257,
	23, 23, 23, 23, 23, 65, 65, 125, 125, 125,
	127, 127, 126, 126, 126, 104, 104, 34, 85, 85,
	94, 94, 95, 95, 177, 96, 96, 27, 27, 37,
	37, 35, 35, 35, 35, 35, 35, 36, 36, 38,
	38, 38, 38, 38, 38, 38, 231, 231, 231, 234,
	234, 230, 232, 232, 233, 233, 255, 255, 105, 105,
	105, 75, 74, 74, 78, 78, 77, 79, 79, 170,
	102, 102, 102, 102, 121, 122, 122, 123, 123, 124,
	124, 101, 101, 152, 152, 39, 39, 84, 84, 86,
	86, 143, 143, 144, 144, 142, 142, 142, 172, 172,
	172, 172, 172, 169, 169, 173, 173, 173, 173, 173,
	173, 167, 167, 167, 167, 168, 168, 178, 178, 108,
	108, 108, 108, 106, 106, 107, 107, 174, 174, 174,
	174, 103, 103, 175, 175, 175, 137, 137, 181, 181,
	181, 83, 83, 83, 182, 182, 182, 182, 182, 182,
	182, 182, 182, 182, 182, 182, 182, 183, 183, 183,
	183, 185, 185, 185, 184, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 186, 186,
	193, 193, 194, 194, 195, 196, 187, 187, 188, 188,
	189, 190, 197, 197, 197, 197, 199, 199, 191, 191,
	191, 191, 191, 192, 115, 115, 115, 115, 115, 115,
	115, 115, 115, 115, 115, 115, 115, 115, 116, 116,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 146,
	146, 146, 146, 146, 146, 146, 146, 146, 146, 147,
	147, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 226, 226, 226, 226, 226, 226, 226,
	228, 228, 229, 229, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 235, 235, 236, 236, 238, 238, 239, 239, 240,
	241, 241, 241, 242, 243, 243, 237, 237, 244, 244,
	244, 245, 245, 246, 246, 246, 246, 246, 157, 157,
	157, 158, 158, 159, 91, 91, 154, 154, 153, 153,
	153, 156, 156, 109, 109, 198, 198, 198, 198, 198,
	198, 198, 110, 110, 110, 117, 111, 111, 112, 112,
	112, 112, 112, 112, 149, 150, 113, 113, 113, 151,
	151, 160, 164, 164, 163, 162, 162, 161, 161, 140,
	140, 140, 140, 141, 141, 139, 138, 97, 97, 98,
	98, 258, 258, 165, 165, 99, 99, 100, 93, 93,
	176, 176, 176, 176, 87, 87, 67, 67, 88, 88,
	63, 63, 66, 66, 64, 64, 64, 64, 81, 81,
	82, 82, 61, 61, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 200, 200, 200, 56, 56,
	56, 57, 57, 58, 58, 205, 205, 205, 206, 206,
	206, 206, 204, 204, 204, 204, 204, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 210, 210, 210, 210, 210,
	210, 210, 210, 210, 210, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 211, 211, 211, 211, 211,
	211, 211, 211, 211, 211, 211, 211, 211, 211, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 4, 6,
	1, 3, 2, 5, 3, 6, 4, 6, 6, 6,
	4, 8, 3, 3, 3, 6, 4, 3, 2, 1,
	1, 0, 2, 0, 2, 0, 2, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 1, 3, 1, 2,
	2, 3, 2, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 5, 3,
	0, 1, 1, 1, 1, 3, 3, 0, 2, 3,
	2, 3, 6, 6, 1, 2, 2, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	2, 3, 6, 3, 1, 5, 2, 1, 1, 1,
	3, 3, 2, 3, 3, 3, 3, 1, 3, 3,
	2, 1, 1, 3, 1, 1, 1, 2, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 0, 1, 1,
	2, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 4, 4, 2, 2,
	2, 0, 2, 0, 8, 8, 7, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 3, 2, 0, 3, 1, 2, 2,
	3, 6, 2, 1, 1, 2, 4, 2, 5, 7,
	8, 5, 3, 1, 4, 6, 5, 10, 1, 1,
	4, 0, 3, 0, 2, 2, 2, 0, 1, 1,
	2, 2, 0, 3, 3, 2, 1, 1, 2, 2,
	1, 2, 1, 4, 5, 2, 0, 6, 11, 14,
	1, 0, 1, 3, 3, 3, 5, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 8, 11,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 6, 8, 5, 7, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 0, 8, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 3, 2, 3, 4, 1, 1, 8,
	8, 1, 2, 4, 4, 4, 2, 2, 3, 1,
	3, 6, 1, 0, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 1, 1, 3, 2, 4, 0, 4, 6,
	3, 1, 5, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 3, 4, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 3, 4, 3, 4, 3, 4,
	5, 6, 6, 7, 6, 7, 6, 7, 3, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	1, 2, 2, 4, 1, 1, 1, 2, 2, 2,
	2, 1, 1, 3, 5, 6, 8, 6, 6, 4,
	4, 1, 1, 1, 5, 1, 3, 1, 3, 1,
	1, 1, 1, 6, 6, 4, 4, 4, 4, 4,
	6, 5, 5, 5, 4, 8, 6, 6, 4, 4,
	4, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 3,
	5, 4, 3, 5, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 1,
	1, 3, 5, 1, 0, 2, 2, 1, 2, 0,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	3, 5, 1, 1, 1, 1, 2, 2, 1, 1,
	1, 1, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -18, -20, -21, -22, -23, -25, -26, -28, -27,
	-29, -30, -31, -32, -24, -33, -34, 23, 64, -7,
	-8, -9, -10, -11, -12, -233, 92, 100, 122, 198,
	99, 85, 116, 212, 219, -35, -37, 227, -133, 228,
	34, 237, 58, 95, 214, 209, 259, 66, -231, -38,
	-36, 307, 282, 288, 222, -39, 245, 274, 310, 245,
	130, 78, 277, -63, -56, 4, -210, -212, 20, 21,
	23, 33, 34, 39, 43, 46, 57, 58, 59, 61,
	63, 64, 65, 68, 69, 76, 77, 78, 79, 81,
	85, 87, 91, 92, 94, 99, 100, 106, 107, 110,
	112, 117, 122, 123, 124, 131, 134, 129, 143, 145,
	146, 149, 148, 153, 156, 159, 161, 162, 163, 164,
	165, 167, 168, 170, 172, 169, 175, 177, 178, 184,
	187, 190, 191, 192, 193, 196, 198, 200, 201, 202,
	204, 205, 209, 207, 208, 210, 212, 214, 215, 217,
	219, 220, 221, 224, 225, 227, 228, 230, 233, 236,
	237, 238, 241, 239, 235, 244, 246, 247, 248, 255,
	259, 260, 261, 262, 265, 266, 267, 269, 271, 272,
	273, 278, 283, 284, 285, 286, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 102, 108, 118, 120, 125, 126,
	135, 136, 137, 138, 140, 151, 174, 176, 185, 189,
	195, 197, 203, 216, 223, 231, 232, 240, 242, 250,
	251, 252, 256, 257, 274, 275, 87, 134, 267, 266,
	78, 130, 245, 277, -16, 307, -27, -6, -14, -4,
	-23, -34, -13, -30, -17, -31, -15, 23, -204, 4,
	-210, -212, -211, -213, 55, 67, 115, 133, 127, 142,
	144, 152, 154, 166, 186, 188, 213, 229, 22, 24,
	25, 26, 27, 29, 30, 31, 32, 42, 47, 48,
	52, 54, 56, 62, 66, 70, 71, 72, 73, 74,
	75, 84, 86, 88, 89, 90, 93, 95, 97, 103,
	104, 105, 111, 113, 114, 116, 119, 121, 128, 130,
	132, 139, 141, 147, 150, 155, 157, 158, 171, 173,
	179, 180, 181, 182, 183, 194, 199, 206, 211, 222,
	226, 234, 243, 245, 249, 253, 254, 258, 263, 264,
	268, 270, 276, 277, 279, 280, 281, 282, -56, -56,
	-56, 198, 22, -251, 22, -252, -253, 66, 92, 116,
	222, 134, 87, 266, -251, -60, 219, -56, -129, 156,
	225, 216, 255, -130, -128, -203, 250, 165, -89, -56,
	4, 22, 78, 57, 79, 117, 130, 131, 62, 63,
	146, 246, 250, 255, 66, 269, -256, 255, 255, -256,
	-256, -59, 255, 253, -60, -255, 245, 245, 268, 277,
	-118, 78, 264, -36, -38, -37, -77, -78, 263, 139,
	97, 183, -35, -37, -231, -234, 204, -230, -56, -234,
	-74, -75, 22, 89, 311, -174, -63, 181, -100, 307,
	-3, -174, 125, -63, -66, 125, -63, -56, -174, 125,
	114, 307, -97, -140, -139, -138, 305, 309, 114, 141,
	141, -175, -174, -56, 125, -67, 125, -66, -90, 125,
	-89, -90, 125, -180, -179, -206, 4, -210, -212, -211,
	274, 245, 130, -155, 307, -114, 307, -56, 22, 180,
	311, 180, -56, -129, 51, -129, 307, -131, -54, -55,
	143, 200, 253, 292, 114, 286, -70, 5, 84, -92,
	309, 114, -248, 180, 114, 114, 114, 114, 114, 114,
	286, 143, 200, 245, 277, -132, -54, -55, -132, 253,
	-60, -103, -174, -89, 125, -56, -89, 130, -56, 125,
	-77, -78, -102, -121, -122, 155, 179, -105, 22, 89,
	-105, -105, 43, 308, 308, 311, -234, -82, 307, -93,
	-176, -145, 300, -147, 298, 299, 304, 171, 287, -157,
	-63, -148, 312, 9, 307, -160, -228, -37, 98, 29,
	-158, -159, 216, -56, 7, 8, 5, 6, -61, -183,
	-192, 258, 103, 173, 47, -226, -227, 4, -210, -205,
	-184, -194, -188, -191, 140, 55, 71, 74, 72, 75,
	226, 268, 48, 28, 101, 102, 189, 195, 242, 256,
	257, 125, 174, 126, 53, 118, 151, 91, 36, 38,
	40, 41, 49, 50, 80, 82, 83, 108, 135, 136,
	137, 138, 176, 203, 231, 240, 251, 252, 275, -211,
	-195, -196, -189, -190, -197, -93, -100, 300, -63, 307,
	-99, -165, -145, 84, -44, 207, -43, 21, 23, 92,
	272, 98, 235, 235, 207, 98, 312, 207, 207, 98,
	238, 308, -87, -63, -140, -145, -141, -204, 300, -175,
	-65, -63, -65, 227, -56, 30, 98, -46, 311, 46,
	210, 98, -46, 311, 98, -46, 98, 308, 311, -174,
	125, -66, 30, -154, -181, -182, -184, -193, -187, -191,
	-192, 39, 45, 44, 248, 223, 232, 37, 135, 136,
	137, 138, 231, 36, 203, 108, 91, 83, 82, 176,
	41, 40, -195, -196, -189, -190, 80, 251, 252, 140,
	38, 50, 49, 275, 240, -91, -145, -247, -88, 245,
	78, -64, -56, 300, -253, -247, 30, -91, 311, 311,
	153, -69, 159, 170, 123, -202, 84, -208, -201, -166,
	9, 258, 103, 180, -207, 8, 299, -200, -206, 5,
	7, 298, -202, 84, 69, -209, 5, 4, -192, -166,
	84, 156, 309, -204, -203, -250, 111, -247, -203, -203,
	-203, -203, -203, -56, 153, -203, -203, 311, 311, -60,
	-46, 311, 307, -76, 171, -232, 282, -76, 307, -57,
	125, -56, -232, 171, -102, -122, -121, -123, -145, 22,
	-145, -147, -36, -36, -36, -79, -170, -145, -230, 30,
	-81, -56, -84, 311, 114, 10, 11, 54, 33, 298,
	299, 300, 301, 109, 302, 295, 296, 297, 294, 290,
	291, 292, 60, 160, 218, 13, 14, 15, 26, 182,
	154, 287, 127, 229, 304, 16, 17, 18, 142, 35,
	128, 30, 4, -145, -145, -145, -145, -145, 188, 7,
	-98, -37, -145, -91, -97, -37, -37, -153, 305, 307,
	-97, 307, 5, 5, 307, -161, -145, -235, 283, 111,
	307, 307, 307, 307, 307, 307, 307, 307, 307, 307,
	307, 307, 307, 307, 307, 307, 307, 197, -199, 278,
	-199, -199, -185, 307, -185, -186, 307, -185, 284, 288,
	307, -84, -63, 311, 308, 311, 253, -119, 62, 56,
	-135, 125, 56, -214, -56, 62, -215, 52, 264, 199,
	113, -119, 62, -119, 62, 62, -174, 33, 33, 253,
	-66, -56, 253, 253, -174, 114, 308, 311, 306, 315,
	-137, 280, -125, -27, 307, 84, 30, -125, -94, -95,
	-177, -96, -63, 307, -56, -56, -66, -67, -89, -90,
	-90, -16, -179, 98, -19, -27, -23, -34, -13, 308,
	311, -83, 29, -115, 307, 285, 163, 81, 124, 162,
	-116, 221, 308, 311, 253, 311, -88, -81, -139, -138,
	114, 255, 308, -55, -54, -68, 202, 233, 208, 224,
	311, 8, 7, 7, 5, -204, -249, -56, -55, -54,
	-174, -71, -81, -72, -56, -136, -135, -216, -217, -214,
	130, 264, 104, 30, 98, -53, 193, 30, 180, 171,
	-49, 247, 98, -124, 216, 217, 311, -42, 31, 88,
	307, 311, 308, -137, -176, -86, -172, -174, -63, -37,
	-173, 307, -181, -181, -89, 250, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
	-145, -145, -145, -145, -145, -145, -145, -145, 154, 127,
	229, 35, 128, -145, 253, -145, -145, -145, -145, 173,
	171, 258, 103, 265, 89, 177, -258, 243, 32, -151,
	-37, 307, -204, -157, 216, 307, -140, 308, 311, -91,
	-156, 306, -153, -91, 308, 308, -91, 276, 22, 89,
	300, -115, 7, -164, -163, 279, -236, 106, 119, 307,
	308, 308, -145, -145, -109, -198, -91, 4, 285, 163,
	81, 124, 162, 221, -109, -110, -145, -91, -111, -146,
	-147, 298, 299, 304, 307, 216, -112, -145, -91, -145,
	42, 150, 254, -113, -145, 114, -91, -145, -145, -145,
	-91, -91, -91, 307, 7, 7, 250, 250, 7, -137,
	308, -165, -43, -63, -56, -56, 171, -135, 125, -48,
	171, -181, -56, 307, 307, 145, 145, -56, -56, 125,
	-56, 125, -56, -56, -44, 207, 307, 307, -56, 207,
	-56, -63, 207, 238, 114, -63, -141, -145, -104, 211,
	-145, -104, -127, 180, -87, 274, -56, 211, -85, 311,
	114, 292, -87, -46, -46, -46, -174, -181, 305, 305,
	7, 253, 253, 253, 253, 307, -145, -249, -64, -249,
	-54, 262, 59, 202, -208, -115, 311, 308, 308, 311,
	-57, 130, -57, -27, -89, 5, -27, -63, 98, -50,
	94, -257, 292, -56, -170, -19, -56, -101, 119, -178,
	311, 289, 67, -108, 144, 166, 115, 152, 213, 133,
	-142, 312, 307, -169, 288, -37, -173, -172, 286, -145,
	-145, 253, -258, 243, -151, -145, 173, 258, 103, 265,
	89, 177, 114, 307, -146, -146, -91, 307, -91, -98,
	-145, 306, 306, 311, 308, -78, 311, -77, -145, -91,
	-91, 308, 308, -162, -163, 93, -145, -241, 187, 307,
	307, -145, 30, 311, 308, 114, 308, 308, -117, 194,
	308, 10, 11, 298, 299, 300, 301, 109, 302, 295,
	296, 297, 294, 290, 291, 292, 60, 160, 218, 13,
	14, 15, 142, 128, -146, -146, -146, -91, 307, 308,
	-149, -150, 114, 111, 30, -113, -113, -113, 308, 114,
	-91, 311, 311, 311, 308, 308, 308, 7, 308, 311,
	308, 286, 286, 308, -101, 253, 253, 98, 171, 271,
	-218, -215, -145, -81, 307, 307, -41, 92, 227, -120,
	98, -46, 98, -46, 253, -119, 62, -91, -91, 253,
	253, 238, 306, -93, 211, 61, 308, -93, -137, -95,
	-86, -165, 308, 306, 7, 7, 308, 163, 124, 162,
	-116, 162, -116, -116, 7, -56, -73, 129, -136, 307,
	-57, 307, 307, -76, 307, -56, -51, 149, -257, 4,
	-232, 308, -152, 121, 43, -172, 177, 144, 144, -172,
	-108, 144, -106, 186, -106, -106, -169, -204, 313, -91,
	-168, -167, 30, -56, 184, 308, -145, -145, -146, -146,
	114, 307, -145, -154, 26, 26, 308, -91, 308, 311,
	308, -153, 308, 276, -78, -78, -78, 5, 95, -145,
	249, -242, -56, 307, 280, -77, 308, -181, -181, -145,
	-149, -145, -181, -181, -146, -146, -146, -146, -146, -146,
	-146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
	-146, -146, -146, 89, 171, 177, -146, 311, -91, 308,
	-150, -149, -145, -145, -181, 308, 308, 308, -91, -145,
	-145, -145, 308, 7, -152, -56, -56, -135, 98, -219,
	62, -220, 54, 104, 66, 171, 173, 264, 199, 52,
	84, 206, 308, 308, -81, -81, 171, 84, 171, 84,
	77, 260, -56, -56, -63, -56, -56, 308, 308, -56,
	-63, -93, -126, 307, 180, -27, -104, 292, 306, 306,
	308, 128, -80, -171, -56, -229, 307, -226, -227, -61,
	307, -81, -71, 30, -80, 180, -52, 148, -257, 5,
	-49, -238, 281, -145, -91, 244, -172, -172, -107, 270,
	180, 144, -172, -168, -144, -143, 112, 169, 308, -56,
	307, -169, 26, 26, -145, -154, 308, -145, -145, 308,
	-145, 5, -145, 308, 308, 308, -145, -243, -56, -145,
	308, 308, 308, -150, 114, 89, 177, 307, -145, 308,
	308, 311, 308, 308, 308, -238, -135, -56, -89, -56,
	104, 125, 173, 145, 307, -146, -63, -134, -254, 65,
	241, 308, 308, 173, 173, -145, -181, -46, -46, 253,
	253, 90, -81, 62, -100, -37, 307, 190, 308, 311,
	-62, -97, 54, -62, -145, 307, -80, 308, 308, -27,
	308, -63, -257, 5, -50, -239, -240, -56, 250, -107,
	307, -145, -172, 311, 314, 292, -169, 307, -81, -167,
	-145, -145, 308, 308, -78, -237, 192, 308, -146, 114,
	307, -154, 308, -145, -220, -57, 171, -145, -58, 307,
	-73, 307, 206, -45, 54, -56, -56, 266, 172, 308,
	-56, -56, -134, -171, -42, -89, -42, 308, -91, 308,
	-73, -134, 307, 5, -51, 311, 30, -148, -61, -56,
	-81, -143, -204, -168, -81, 308, 308, -78, 43, -146,
	-154, 308, 308, 98, 308, -223, 161, -56, -81, -63,
	-40, 270, -89, 227, -137, 307, -73, -62, -78, -134,
	-73, -80, -52, -240, -242, 307, 308, 308, -244, 201,
	217, -91, 308, 104, -221, -224, -222, 180, 115, 191,
	230, 308, 308, -76, -145, -94, -81, -42, 308, -73,
	308, -91, 308, -245, -246, 35, 261, 69, -145, -245,
	-56, -222, 180, -224, 180, 266, 87, -223, -137, 308,
	-134, -78, -246, 196, 110, 216, 196, 110, -225, 168,
	210, 46, 227, -225, -221, -47, 46, 210, -73, 308,
	26, 20, 173, 84, -246,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 0, 0, 61,
	62, 63, 64, 65, 66, 0, 0, 395, 0, 0,
	0, 0, 0, 0, 0, 367, -2, 0, 134, 0,
	315, 0, 315, 315, 319, 0, 397, 281, 394, -2,
	405, 0, 0, 0, 403, 381, 0, 0, -2, 0,
	0, 0, 0, 0, 810, 838, 839, 840, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 84, 85, 86, 87,
	88, 89, 90, 91, 92, 93, 94, 0, 199, 852,
	853, 854, 855, 856, 1025, 1026, 1027, 1028, 1029, 1030,
	1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040,
	1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050,
	1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060,
	1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
	1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
	1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
	1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
	1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
	1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 100, 107,
	108, 925, 110, 0, 117, 118, 119, 121, 122, 123,
	124, 125, 126, 127, 0, 308, 939, 321, 130, 903,
	943, 1012, 958, 137, 147, 0, 1018, -2, 151, 78,
	180, 181, 182, 0, 184, 201, 0, 0, 0, 0,
	0, 192, 0, 0, 0, 198, 326, 314, 326, 311,
	312, 313, 316, 0, 307, 0, 396, 0, 0, 0,
	0, 0, 280, -2, 377, 378, -2, 0, 400, 400,
	400, 0, 0, 378, 0, 386, 929, 389, 821, 387,
	0, 0, 402, 401, 0, 382, 467, 0, 425, 0,
	2, 0, 997, 467, 0, 997, 813, 0, 0, 997,
	0, 0, 811, 787, 779, 780, 784, 0, 0, 0,
	0, 0, 473, 68, 997, 51, 997, 806, 51, 997,
	76, 51, 997, 0, 95, 97, 848, 849, 850, 851,
	1023, 0, 0, 0, 0, 105, 0, 109, 111, 0,
	0, 0, 320, 131, 986, 133, 0, 136, 138, 139,
	0, 0, 0, 0, 0, 0, 150, 175, 176, 79,
	0, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	193, 0, 195, 0, 0, 309, 322, 323, 310, 0,
	318, 51, 471, 253, 997, 393, 253, 842, 393, 997,
	-2, 0, 373, 412, 413, 0, 0, 0, 398, 399,
	0, 0, 0, 369, 370, 0, 388, 0, 0, 428,
	798, 802, 803, 560, 0, 0, 0, 0, 0, 0,
	649, 650, 0, 789, 0, 654, 655, 656, 991, 0,
	661, 662, 1012, 810, 824, 825, 826, 827, 0, 0,
	0, 832, 833, 834, 778, 702, 671, -2, -2, 822,
	497, 498, 499, 500, -2, 1025, 675, 677, 679, 680,
	681, 682, 0, 975, 992, 993, 1008, 1009, 1017, 1021,
	1022, 997, 1005, 998, 987, 995, 1004, 881, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, 847,
	522, 523, 528, 529, 531, 428, 426, 468, 469, 0,
	0, 795, 793, 794, 28, 304, 30, 0, 304, 304,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	58, 0, 0, 804, 788, 783, 0, 785, 786, 477,
	0, 345, 0, 0, 474, 0, 0, 70, 0, 49,
	50, 0, 72, 0, 0, 74, 0, 395, 0, 0,
	997, 0, 395, 0, 736, 483, 484, 485, 486, 487,
	557, 490, 491, 492, 493, 494, 495, 496, 504, 505,
	506, 507, 508, 509, 510, 519, 0, 503, 503, 503,
	516, 517, 520, 521, 526, 527, 538, 539, 541, 543,
	537, 537, 537, 534, 535, 0, 734, 0, 114, 0,
	876, 808, 814, 815, 120, 0, 0, 0, 0, 0,
	0, 142, 162, 163, 164, 143, 145, 152, 154, 155,
	156, 165, 166, 167, 168, 270, 0, 272, 178, 179,
	835, 0, 144, 146, 148, 149, 169, 170, 0, 172,
	173, 174, 0, 80, 183, 185, 0, 200, 186, 187,
	188, 189, 190, 191, 194, 196, 197, 0, 0, 317,
	273, 0, 211, 0, 0, 276, 392, 0, 0, 0,
	997, 841, 331, 0, 376, 410, 411, 414, 417, 418,
	415, 560, 383, 384, 385, 406, 407, 291, 390, 0,
	0, 818, 477, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 792,
	0, 0, 801, 565, 566, 567, 589, 590, 0, 651,
	652, -2, 734, 0, 657, 658, 659, 660, 0, 0,
	-2, 0, 829, 557, 0, 0, 777, 704, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 757, 763, 0,
	0, 0, 0, 0, 0, 0, 0, 512, 525, 536,
	533, 532, 514, 0, 513, 511, 0, 515, 0, 0,
	0, 477, 0, 0, 797, 0, 0, 0, 0, 303,
	32, 997, 0, 53, 0, 0, 243, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 812, 0, 0, 0, 0, 0, 0, 781, 784,
	356, 0, 356, 347, 0, 0, 0, 343, 359, 360,
	362, 363, 0, 0, 475, 69, 807, 51, 77, 51,
	51, 83, 96, 0, 98, 101, 102, 103, 104, 99,
	0, 478, 480, 488, 0, 544, 545, 546, 547, 548,
	549, 558, 106, 0, 0, 0, 115, 116, 816, 817,
	0, 0, 135, 140, 141, 327, 0, 159, 0, 161,
	0, 271, 837, 836, 557, 81, 202, 128, 324, 325,
	472, 0, 0, 210, 818, 212, 214, 215, 216, 217,
	842, 0, 842, 0, 0, 274, 0, 0, 0, 0,
	333, 339, 0, 416, 419, 420, 0, 409, 289, 290,
	395, 0, 820, 422, 799, 458, 429, 437, 467, 444,
	441, 0, 561, 562, 563, 0, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, -2, -2, -2, 581,
	582, 583, -2, -2, -2, 587, 588, -2, 0, 0,
	0, 792, 0, -2, 0, 597, -2, -2, -2, 601,
	0, 604, 606, 608, 0, 0, 0, 0, 791, 618,
	769, 0, 800, 603, 0, 0, 790, 789, 0, 0,
	0, 740, 741, 0, -2, 663, 405, 0, 0, 0,
	0, 830, 0, 776, 772, 0, 712, 0, 0, 0,
	676, 678, 0, 0, 0, 0, 744, -2, -2, -2,
	-2, -2, -2, -2, 0, 0, 734, 754, 0, 0,
	620, 0, 0, 0, 0, 1012, 0, 734, 762, 0,
	0, 0, 0, 0, 734, 0, 768, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 422,
	470, 796, 31, 293, 0, 0, 0, 34, 997, 42,
	0, 225, 0, 0, 0, 0, 0, 306, 43, 997,
	51, 997, 51, 44, 29, 304, 0, 0, 297, 0,
	292, 295, 0, 59, 0, 805, 0, 783, 67, 0,
	476, 340, 341, 0, 0, 349, 346, 0, 477, 0,
	0, 0, 0, 71, 73, 75, 0, 737, 0, 0,
	0, 0, 0, 0, 0, 0, 735, 112, 809, 113,
	132, 157, 158, 160, 153, 171, 0, 219, 252, 0,
	0, 842, 0, 208, 253, 275, 277, 0, 0, 335,
	339, 0, 338, 393, 408, 0, 819, 424, 0, 427,
	0, 0, 0, 0, 0, 0, 464, 464, 464, 462,
	444, 0, 0, 456, 0, -2, 441, 0, 0, -2,
	-2, 0, 0, 0, 619, -2, 602, 605, 607, 609,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 653,
	735, 738, 739, 0, -2, 0, 0, 404, 405, 405,
	405, 669, 0, 0, 773, 0, 0, 670, 0, 0,
	0, 0, 0, 0, 685, 0, 686, 687, 0, 0,
	688, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 623, 624, 625, 0, 0, 689,
	760, 761, 0, 0, 0, 0, 0, 0, 694, 0,
	767, 0, 0, 0, 698, 699, 700, 0, 501, 0,
	518, 540, 542, 530, 424, 0, 0, 0, 0, 52,
	223, 242, 0, 0, 0, 0, 36, 0, 0, 0,
	0, 40, 0, 46, 0, 0, 0, 0, 0, 0,
	0, 60, 782, 355, 0, 354, 0, 344, 356, 361,
	358, 364, 0, 481, 0, 0, 489, 550, 551, 552,
	553, 554, 555, 556, 0, 129, 206, 0, 213, 0,
	0, 0, 211, 0, 0, 0, 337, 339, 0, 330,
	331, 391, 706, 0, 0, 430, 0, 0, 0, 0,
	0, 0, 459, 463, 460, 461, 456, 435, 0, 0,
	440, 455, 0, 454, 443, -2, 564, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 770, 0, 729, 0,
	-2, 742, 664, 0, 0, 0, 0, 831, 771, 775,
	0, 710, 711, 715, 0, 0, 674, 0, 0, 743,
	753, 755, 621, 622, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, -2, -2, -2, 639, 640, 641,
	-2, -2, -2, 0, 0, 0, 756, 0, 0, 732,
	758, 759, 764, 765, 0, 691, 692, 693, 766, 0,
	0, 0, 524, 0, 706, 299, 301, 33, 0, 224,
	0, 227, 0, 0, 0, 0, 233, 234, 0, 0,
	0, 0, 244, 251, 0, 0, 0, 48, 0, 0,
	305, 0, 51, 51, 294, 0, 0, 204, 205, 298,
	296, 342, 0, 0, 0, 348, 357, 0, 482, 479,
	559, 0, 0, 282, 288, 288, 0, 672, 673, 0,
	0, 0, 0, 0, 0, 0, 328, 339, 0, 332,
	333, 379, 0, 423, 421, 0, 446, 0, 448, 0,
	0, 0, 450, 438, 0, 433, 0, 432, 444, 452,
	0, 0, 0, 0, -2, 0, 612, -2, -2, 728,
	735, 828, 405, 665, 667, 668, 774, 717, 714, 0,
	701, 683, 684, 752, 0, 0, 0, 0, 735, 731,
	690, 0, 696, 697, 502, 380, 35, 0, 228, 229,
	842, 0, 232, 235, 0, 237, 844, 219, 0, 248,
	249, 246, 0, 37, 38, 47, 55, 39, 45, 0,
	0, 0, 0, 0, 365, 366, 0, 0, 251, 0,
	291, 823, 0, 291, 0, 0, 0, 241, 219, 209,
	251, 0, 0, 334, 335, 705, 707, 0, 0, 447,
	0, 466, 449, 0, 436, 0, 456, 0, 0, 442,
	-2, -2, 613, 730, 0, 405, 0, 703, -2, 0,
	0, 0, 733, 0, 226, 230, 0, 0, 257, 0,
	245, 0, 0, 57, 0, 300, 302, 0, 351, 477,
	353, 0, 219, 283, 284, 287, 285, 288, 405, 251,
	207, 219, 0, 336, 337, 0, 0, 457, 0, 0,
	0, 434, 431, 439, 0, 453, 666, 720, 0, -2,
	0, 647, 695, 0, 236, 262, 0, 0, 0, 253,
	41, 0, 54, 0, 352, 0, 239, 291, 0, 219,
	278, 0, 329, 708, 709, 0, 465, 451, 0, 0,
	0, 716, 648, 0, 238, 258, 259, 0, 254, 255,
	256, 843, 250, 257, 56, 477, 0, 286, 664, 240,
	251, 405, 713, 718, 721, -2, 961, 873, 0, 719,
	231, 260, 0, 261, 0, 0, 0, 262, 350, 222,
	219, 0, 0, 723, 724, 725, 726, 727, 263, 0,
	266, 267, 0, 264, 247, 218, 220, 221, 279, 0,
	0, 265, 268, 269, 722,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 296, 3, 302, 297, 3,
	307, 308, 300, 298, 311, 299, 309, 301, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 315, 310,
	290, 292, 291, 3, 312, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 305, 3, 306, 295, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 313, 294, 314, 304,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 293, 57633, 303, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:725
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:731
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:737
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:773
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:793
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:800
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:805
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:810
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:815
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:820
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:825
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:829
		{
			return unimplemented(sqllex)
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:842
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:852
		{
			return unimplemented(sqllex)
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:862
		{
			return unimplemented(sqllex)
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:891
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			sqlVAL.union.val = nil
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = DropCascade
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = DropRestrict
		}
	case 51:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = DropDefault
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:925
		{
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return unimplemented(sqllex)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:929
		{
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:988
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:992
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:996
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1006
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 80:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1026
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 82:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1059
		{ /* SKIP DOC */
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1087
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1091
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1118
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1152
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			return unimplemented(sqllex)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1255
		{ /* SKIP DOC */
		}
	case 135:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			return unimplemented(sqllex)
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			return unimplemented(sqllex)
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = Low
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = Normal
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = High
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1430
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			return unimplemented(sqllex)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			return unimplemented(sqllex)
		}
	case 177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1437
		{
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 201:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1577
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 222:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = DropDefault
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1645
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 225:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1673
		{
			return unimplemented(sqllex)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1717
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1779
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1847
		{
			return unimplemented(sqllex)
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1848
		{
			return unimplemented(sqllex)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			return unimplemented(sqllex)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1850
		{
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			return unimplemented(sqllex)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1858
		{
			return unimplemented(sqllex)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1859
		{
			return unimplemented(sqllex)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1860
		{
			return unimplemented(sqllex)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1861
		{
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1864
		{
			return unimplemented(sqllex)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1867
		{
			return unimplemented(sqllex)
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			return unimplemented(sqllex)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			return unimplemented(sqllex)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1872
		{
			return unimplemented(sqllex)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1873
		{
			return unimplemented(sqllex)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1874
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1893
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strVal()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[2].str}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1909
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1940
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = true
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = false
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			return unimplemented(sqllex)
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1981
		{
			return unimplemented(sqllex)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1985
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1989
		{
			sqlVAL.union.val = Ascending
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1993
		{
			sqlVAL.union.val = Descending
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2020
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2039
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2040
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.union.val = true
		}
	case 304:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = false
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2053
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2054
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2071
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2087
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2097
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.str = ""
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.str = ""
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].union.strVal(),
				Encoding: sqlDollar[6].union.strVal(),
				Collate:  sqlDollar[7].union.strVal(),
				CType:    sqlDollar[8].union.strVal(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].union.strVal(),
				Encoding:    sqlDollar[9].union.strVal(),
				Collate:     sqlDollar[10].union.strVal(),
				CType:       sqlDollar[11].union.strVal(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2219
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2220
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2239
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 343:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2246
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2288
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			return unimplemented(sqllex)
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2318
		{
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2352
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2545
		{
			return unimplemented(sqllex)
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2546
		{
			return unimplemented(sqllex)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2547
		{
			return unimplemented(sqllex)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2550
		{
			return unimplemented(sqllex)
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2551
		{
			return unimplemented(sqllex)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2554
		{
			return unimplemented(sqllex)
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2558
		{
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2561
		{
			return unimplemented(sqllex)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2562
		{
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2565
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2566
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = true
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = false
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = false
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = true
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2589
		{
		}
	case 403:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2590
		{
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2614
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2689
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2690
		{
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2748
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = &From{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2816
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = true
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = false
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2889
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2903
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.str = astFullJoin
		}
	case 460:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.str = astLeftJoin
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.str = astRightJoin
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.str = astInnerJoin
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2956
		{
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2957
		{
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3021
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3043
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3056
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3061
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3070
		{
			return unimplemented(sqllex)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3117
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3126
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3140
		{
			sqlVAL.union.val = nil
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3175
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3219
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3247
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 530:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3279
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3318
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3319
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 540:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 544:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			return unimplemented(sqllex)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3351
		{
			return unimplemented(sqllex)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3352
		{
			return unimplemented(sqllex)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3353
		{
			return unimplemented(sqllex)
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			return unimplemented(sqllex)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			return unimplemented(sqllex)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			return unimplemented(sqllex)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3357
		{
			return unimplemented(sqllex)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3358
		{
			return unimplemented(sqllex)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3359
		{
			return unimplemented(sqllex)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			return unimplemented(sqllex)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3361
		{
			return unimplemented(sqllex)
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3362
		{
			return unimplemented(sqllex)
		}
	case 557:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3363
		{
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			return unimplemented(sqllex)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3367
		{
			return unimplemented(sqllex)
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3402
		{
			return unimplemented(sqllex)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3411
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3427
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3431
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3435
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3483
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			return unimplemented(sqllex)
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3584
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3588
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3592
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3596
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3600
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3604
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: castShort}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3689
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3693
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3725
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3749
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3779
		{
			placeholder := NewPlaceholder(sqlDollar[1].str)
			if indirection := sqlDollar[2].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        placeholder,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = placeholder
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3791
		{
			paren := &ParenExpr{Expr: sqlDollar[2].union.expr()}
			if indirection := sqlDollar[4].union.unresolvedName(); indirection != nil {
				sqlVAL.union.val = &IndirectionExpr{
					Expr:        paren,
					Indirection: indirection,
				}
			} else {
				sqlVAL.union.val = paren
			}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        &Subquery{Select: sqlDollar[1].union.selectStmt()},
				Indirection: sqlDollar[2].union.unresolvedName(),
			}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3820
		{
			return unimplemented(sqllex)
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3845
		{
			return unimplemented(sqllex)
		}
	case 666:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3846
		{
			return unimplemented(sqllex)
		}
	case 667:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
			return unimplemented(sqllex)
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3885
		{
			return unimplemented(sqllex)
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3889
		{
			return unimplemented(sqllex)
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3906
		{
			return unimplemented(sqllex)
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3907
		{
			return unimplemented(sqllex)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
			return unimplemented(sqllex)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3909
		{
			return unimplemented(sqllex)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: castExplicit}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3923
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3927
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3938
		{
			return unimplemented(sqllex)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3940
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3952
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3964
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3968
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3972
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3976
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3982
		{
			return unimplemented(sqllex)
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3983
		{
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3986
		{
			return unimplemented(sqllex)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3987
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3996
		{
			sqlVAL.union.val = Window(nil)
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4012
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4020
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4024
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4028
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.str = ""
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4060
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4074
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4076
		{
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4080
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4086
		{
			return unimplemented(sqllex)
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			return unimplemented(sqllex)
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4088
		{
			return unimplemented(sqllex)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4089
		{
			return unimplemented(sqllex)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4090
		{
			return unimplemented(sqllex)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4292
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4296
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4300
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4312
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4336
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4387
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = UnresolvedName(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4443
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4444
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4463
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4497
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4501
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4513
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4517
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4552
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4573
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 821:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4604
		{
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4640
		{
			return unimplemented(sqllex)
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4646
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefix}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrefixParens}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = DNull
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.str = ""
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
