// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const COALESCE = 57396
const COLLATE = 57397
const COLLATION = 57398
const COLUMN = 57399
const COLUMNS = 57400
const COMMIT = 57401
const COMMITTED = 57402
const CONCAT = 57403
const CONFLICT = 57404
const CONSTRAINT = 57405
const CONSTRAINTS = 57406
const COPY = 57407
const COVERING = 57408
const CREATE = 57409
const CROSS = 57410
const CUBE = 57411
const CURRENT = 57412
const CURRENT_CATALOG = 57413
const CURRENT_DATE = 57414
const CURRENT_ROLE = 57415
const CURRENT_TIME = 57416
const CURRENT_TIMESTAMP = 57417
const CURRENT_USER = 57418
const CYCLE = 57419
const DATA = 57420
const DATABASE = 57421
const DATABASES = 57422
const DATE = 57423
const DAY = 57424
const DEC = 57425
const DECIMAL = 57426
const DEFAULT = 57427
const DEALLOCATE = 57428
const DEFERRABLE = 57429
const DELETE = 57430
const DESC = 57431
const DISTINCT = 57432
const DO = 57433
const DOUBLE = 57434
const DROP = 57435
const ELSE = 57436
const ENCODING = 57437
const END = 57438
const ESCAPE = 57439
const EXCEPT = 57440
const EXISTS = 57441
const EXECUTE = 57442
const EXPLAIN = 57443
const EXTRACT = 57444
const EXTRACT_DURATION = 57445
const FALSE = 57446
const FAMILY = 57447
const FETCH = 57448
const FILTER = 57449
const FIRST = 57450
const FLOAT = 57451
const FLOORDIV = 57452
const FOLLOWING = 57453
const FOR = 57454
const FORCE_INDEX = 57455
const FOREIGN = 57456
const FROM = 57457
const FULL = 57458
const GRANT = 57459
const GRANTS = 57460
const GREATEST = 57461
const GROUP = 57462
const GROUPING = 57463
const HAVING = 57464
const HELP = 57465
const HIGH = 57466
const HOUR = 57467
const INCREMENTAL = 57468
const IF = 57469
const IFNULL = 57470
const ILIKE = 57471
const IN = 57472
const INTERLEAVE = 57473
const INDEX = 57474
const INDEXES = 57475
const INITIALLY = 57476
const INNER = 57477
const INSERT = 57478
const INT = 57479
const INT2VECTOR = 57480
const INT8 = 57481
const INT64 = 57482
const INTEGER = 57483
const INTERSECT = 57484
const INTERVAL = 57485
const INTO = 57486
const IS = 57487
const ISOLATION = 57488
const JOIN = 57489
const KEY = 57490
const KEYS = 57491
const LATERAL = 57492
const LC_CTYPE = 57493
const LC_COLLATE = 57494
const LEADING = 57495
const LEAST = 57496
const LEFT = 57497
const LEVEL = 57498
const LIKE = 57499
const LIMIT = 57500
const LOCAL = 57501
const LOCALTIME = 57502
const LOCALTIMESTAMP = 57503
const LOW = 57504
const LSHIFT = 57505
const MATCH = 57506
const MINUTE = 57507
const MONTH = 57508
const NAME = 57509
const NAMES = 57510
const NATURAL = 57511
const NEXT = 57512
const NO = 57513
const NO_INDEX_JOIN = 57514
const NO_SCAN = 57515
const NORMAL = 57516
const NOT = 57517
const NOTHING = 57518
const NULL = 57519
const NULLIF = 57520
const NULLS = 57521
const NUMERIC = 57522
const OF = 57523
const OFF = 57524
const OFFSET = 57525
const OID = 57526
const ON = 57527
const ONLY = 57528
const OPTIONS = 57529
const OR = 57530
const ORDER = 57531
const ORDINALITY = 57532
const OUT = 57533
const OUTER = 57534
const OVER = 57535
const OVERLAPS = 57536
const OVERLAY = 57537
const PARENT = 57538
const PARTIAL = 57539
const PARTITION = 57540
const PASSWORD = 57541
const PLACING = 57542
const POSITION = 57543
const PRECEDING = 57544
const PRECISION = 57545
const PREPARE = 57546
const PRIMARY = 57547
const PRIORITY = 57548
const RANGE = 57549
const READ = 57550
const REAL = 57551
const RECURSIVE = 57552
const REF = 57553
const REFERENCES = 57554
const REGCLASS = 57555
const REGPROC = 57556
const REGPROCEDURE = 57557
const REGNAMESPACE = 57558
const REGTYPE = 57559
const RENAME = 57560
const REPEATABLE = 57561
const RELEASE = 57562
const RESTORE = 57563
const RESTRICT = 57564
const RETURNING = 57565
const REVOKE = 57566
const RIGHT = 57567
const ROLLBACK = 57568
const ROLLUP = 57569
const ROW = 57570
const ROWS = 57571
const RSHIFT = 57572
const STATUS = 57573
const SAVEPOINT = 57574
const SEARCH = 57575
const SECOND = 57576
const SELECT = 57577
const SERIAL = 57578
const SERIALIZABLE = 57579
const SESSION = 57580
const SESSION_USER = 57581
const SET = 57582
const SHOW = 57583
const SIMILAR = 57584
const SIMPLE = 57585
const SMALLINT = 57586
const SMALLSERIAL = 57587
const SNAPSHOT = 57588
const SOME = 57589
const SPLIT = 57590
const SQL = 57591
const START = 57592
const STDIN = 57593
const STRICT = 57594
const STRING = 57595
const STORING = 57596
const SUBSTRING = 57597
const SYMMETRIC = 57598
const SYSTEM = 57599
const TABLE = 57600
const TABLES = 57601
const TEMPLATE = 57602
const TEXT = 57603
const THEN = 57604
const TIME = 57605
const TIMESTAMP = 57606
const TIMESTAMPTZ = 57607
const TO = 57608
const TRAILING = 57609
const TRANSACTION = 57610
const TREAT = 57611
const TRIM = 57612
const TRUE = 57613
const TRUNCATE = 57614
const TYPE = 57615
const UNBOUNDED = 57616
const UNCOMMITTED = 57617
const UNION = 57618
const UNIQUE = 57619
const UNKNOWN = 57620
const UPDATE = 57621
const UPSERT = 57622
const USER = 57623
const USERS = 57624
const USING = 57625
const VALID = 57626
const VALIDATE = 57627
const VALUE = 57628
const VALUES = 57629
const VARCHAR = 57630
const VARIADIC = 57631
const VIEW = 57632
const VARYING = 57633
const WHEN = 57634
const WHERE = 57635
const WINDOW = 57636
const WITH = 57637
const WITHIN = 57638
const WITHOUT = 57639
const YEAR = 57640
const ZONE = 57641
const NOT_LA = 57642
const WITH_LA = 57643
const AS_LA = 57644
const POSTFIXOP = 57645
const UMINUS = 57646

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NO_SCAN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"STATUS",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5381

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	323, 28,
	-2, 411,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 49,
	98, 394,
	142, 394,
	158, 394,
	183, 394,
	189, 394,
	276, 394,
	-2, 384,
	-1, 62,
	98, 393,
	142, 393,
	158, 393,
	183, 393,
	189, 393,
	276, 393,
	-2, 387,
	-1, 71,
	1, 28,
	323, 28,
	-2, 411,
	-1, 421,
	1, 191,
	323, 191,
	-2, 975,
	-1, 457,
	158, 421,
	183, 421,
	-2, 390,
	-1, 460,
	158, 420,
	183, 420,
	-2, 388,
	-1, 592,
	158, 420,
	183, 420,
	-2, 391,
	-1, 651,
	320, 909,
	-2, 902,
	-1, 652,
	320, 910,
	-2, 903,
	-1, 658,
	5, 580,
	320, 580,
	-2, 1078,
	-1, 682,
	5, 541,
	-2, 1052,
	-1, 683,
	5, 574,
	320, 574,
	-2, 1054,
	-1, 684,
	5, 549,
	-2, 1055,
	-1, 685,
	5, 548,
	-2, 1056,
	-1, 686,
	5, 574,
	320, 574,
	-2, 1059,
	-1, 687,
	5, 574,
	320, 574,
	-2, 1060,
	-1, 688,
	5, 575,
	-2, 1063,
	-1, 689,
	5, 535,
	-2, 1064,
	-1, 690,
	5, 535,
	-2, 1065,
	-1, 691,
	5, 556,
	-2, 1069,
	-1, 692,
	5, 536,
	-2, 1074,
	-1, 693,
	5, 537,
	-2, 1075,
	-1, 694,
	5, 538,
	-2, 1076,
	-1, 695,
	5, 539,
	-2, 1077,
	-1, 696,
	5, 535,
	-2, 1082,
	-1, 697,
	5, 542,
	-2, 1087,
	-1, 698,
	5, 540,
	-2, 1090,
	-1, 699,
	5, 572,
	320, 572,
	-2, 1092,
	-1, 700,
	5, 576,
	-2, 1095,
	-1, 701,
	5, 578,
	-2, 1096,
	-1, 702,
	5, 571,
	320, 571,
	-2, 1100,
	-1, 960,
	98, 394,
	142, 394,
	158, 394,
	183, 394,
	189, 394,
	276, 394,
	-2, 697,
	-1, 969,
	320, 886,
	-2, 874,
	-1, 1177,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 615,
	-1, 1178,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 616,
	-1, 1179,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 617,
	-1, 1183,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 621,
	-1, 1184,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 622,
	-1, 1185,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 623,
	-1, 1188,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 628,
	-1, 1194,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 630,
	-1, 1197,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 635,
	-1, 1198,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 636,
	-1, 1199,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 637,
	-1, 1225,
	194, 768,
	-2, 771,
	-1, 1254,
	115, 808,
	320, 909,
	-2, 902,
	-1, 1255,
	115, 809,
	-2, 1048,
	-1, 1256,
	115, 810,
	-2, 974,
	-1, 1257,
	115, 811,
	-2, 943,
	-1, 1258,
	115, 812,
	-2, 958,
	-1, 1259,
	115, 813,
	-2, 973,
	-1, 1260,
	115, 814,
	-2, 1016,
	-1, 1414,
	98, 394,
	142, 394,
	158, 394,
	183, 394,
	189, 394,
	276, 394,
	-2, 471,
	-1, 1418,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 629,
	-1, 1419,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 631,
	-1, 1424,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 632,
	-1, 1441,
	194, 767,
	-2, 770,
	-1, 1631,
	1, 472,
	68, 472,
	98, 472,
	116, 472,
	120, 472,
	122, 472,
	135, 472,
	142, 472,
	147, 472,
	155, 472,
	158, 472,
	169, 472,
	183, 472,
	185, 472,
	189, 472,
	223, 472,
	225, 472,
	276, 472,
	283, 472,
	293, 472,
	294, 472,
	302, 472,
	319, 472,
	321, 472,
	323, 472,
	324, 472,
	-2, 471,
	-1, 1633,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 633,
	-1, 1638,
	145, 0,
	-2, 647,
	-1, 1648,
	194, 769,
	-2, 772,
	-1, 1682,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 674,
	-1, 1683,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 675,
	-1, 1684,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 676,
	-1, 1688,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 680,
	-1, 1689,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 681,
	-1, 1690,
	13, 0,
	14, 0,
	15, 0,
	303, 0,
	304, 0,
	305, 0,
	-2, 682,
	-1, 1812,
	145, 0,
	-2, 648,
	-1, 1815,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 651,
	-1, 1816,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 653,
	-1, 1919,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 652,
	-1, 1920,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	129, 0,
	130, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 654,
	-1, 1927,
	145, 0,
	-2, 683,
	-1, 1981,
	145, 0,
	-2, 684,
	-1, 2042,
	36, 0,
	129, 0,
	157, 0,
	242, 0,
	300, 0,
	-2, 1051,
}

const sqlNprod = 1196
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 27458

var sqlAct = [...]int{

	652, 2041, 1588, 2021, 1987, 2066, 2022, 2040, 1856, 1626,
	2023, 1283, 1627, 1659, 1412, 1880, 1050, 878, 1058, 1900,
	461, 422, 1777, 1534, 468, 61, 48, 277, 772, 1598,
	84, 84, 84, 1719, 1141, 1802, 1733, 291, 1116, 482,
	1788, 884, 293, 84, 84, 84, 1409, 1388, 84, 628,
	1782, 84, 1535, 1390, 506, 1120, 279, 20, 735, 84,
	1502, 1134, 1115, 741, 524, 61, 84, 84, 1501, 1156,
	84, 1149, 1604, 84, 84, 84, 84, 611, 1452, 84,
	84, 1613, 1400, 1339, 965, 650, 880, 1119, 1090, 718,
	627, 466, 715, 1223, 642, 1059, 61, 1333, 1148, 1023,
	622, 1395, 1210, 1154, 1233, 649, 1014, 1207, 284, 27,
	283, 16, 840, 1042, 833, 901, 1280, 745, 497, 285,
	8, 1074, 266, 1110, 1251, 720, 1083, 956, 20, 621,
	612, 1151, 525, 578, 995, 519, 999, 516, 518, 579,
	1052, 1123, 460, 906, 471, 1734, 595, 62, 596, 835,
	76, 594, 644, 831, 400, 409, 749, 512, 80, 469,
	480, 599, 577, 487, 490, 412, 480, 63, 1440, 1912,
	2057, 290, 1913, 738, 2036, 1051, 465, 1732, 758, 1087,
	27, 265, 16, 758, 465, 758, 2029, 773, 1410, 738,
	2019, 8, 2014, 1080, 2010, 738, 1983, 738, 1351, 1080,
	1977, 479, 730, 738, 485, 756, 1350, 492, 1959, 458,
	1955, 1732, 488, 738, 448, 60, 290, 1950, 1921, 1444,
	1949, 1080, 1088, 908, 1445, 1043, 473, 1472, 1473, 457,
	1490, 1491, 1492, 1910, 1907, 1894, 767, 1908, 1732, 1891,
	1093, 39, 738, 1811, 67, 1889, 1965, 1398, 1732, 40,
	645, 1867, 1866, 1838, 738, 1732, 1093, 907, 1817, 1443,
	60, 1093, 1089, 1086, 1093, 1814, 1806, 69, 1080, 1093,
	1046, 41, 1398, 84, 84, 84, 84, 84, 1487, 528,
	1753, 1752, 1731, 1093, 1093, 1732, 39, 1642, 1055, 1574,
	1093, 1043, 1049, 1695, 40, 1645, 70, 521, 521, 1375,
	1568, 1012, 705, 1049, 65, 466, 1519, 1378, 1227, 1520,
	66, 1093, 1517, 1046, 1516, 1093, 41, 1093, 1515, 1451,
	1441, 1093, 1377, 1093, 1140, 738, 1105, 1478, 607, 64,
	873, 1091, 1145, 1097, 872, 738, 1093, 526, 825, 824,
	290, 909, 910, 1092, 1079, 738, 1093, 1080, 419, 1048,
	704, 1011, 1049, 759, 1010, 495, 766, 541, 759, 767,
	759, 478, 1493, 480, 912, 490, 1735, 71, 501, 857,
	1796, 1413, 561, 2055, 67, 2039, 909, 910, 2028, 1992,
	1488, 1978, 1892, 67, 60, 1843, 911, 1839, 1831, 52,
	1830, 606, 1829, 1825, 1824, 1085, 84, 69, 1823, 912,
	1472, 1473, 1768, 1762, 513, 1710, 69, 1350, 1705, 1704,
	39, 84, 522, 505, 84, 84, 1703, 1084, 40, 1653,
	1631, 911, 1603, 1578, 1524, 1521, 70, 1509, 67, 1380,
	1500, 1471, 907, 1468, 52, 70, 1467, 1465, 67, 1457,
	41, 917, 1456, 65, 1376, 1297, 1248, 1489, 84, 66,
	84, 69, 84, 84, 84, 762, 84, 711, 1247, 64,
	757, 69, 876, 606, 1411, 1219, 973, 966, 64, 64,
	503, 84, 605, 585, 883, 588, 917, 1661, 593, 2002,
	70, 1962, 84, 1948, 1940, 1938, 1929, 1916, 65, 1903,
	70, 1887, 909, 910, 66, 528, 84, 1853, 65, 1836,
	1478, 1808, 293, 528, 66, 84, 909, 910, 1771, 1758,
	84, 84, 84, 1620, 84, 912, 1738, 1637, 710, 1618,
	1484, 1485, 1486, 1054, 1483, 1480, 1481, 1482, 1474, 1475,
	1476, 1477, 1479, 84, 84, 1596, 592, 911, 1761, 739,
	480, 84, 1594, 84, 1593, 1591, 1543, 1576, 1542, 817,
	549, 911, 67, 709, 528, 528, 550, 1220, 52, 823,
	747, 1499, 293, 84, 1461, 84, 84, 84, 84, 84,
	84, 84, 712, 1460, 1437, 69, 84, 84, 1432, 544,
	546, 584, 84, 1212, 1366, 1472, 1473, 1324, 1323, 1311,
	84, 1310, 1290, 1246, 1144, 746, 1000, 1003, 1007, 858,
	480, 750, 750, 582, 70, 580, 882, 734, 84, 993,
	992, 84, 65, 991, 990, 742, 458, 1311, 66, 989,
	988, 987, 986, 487, 490, 602, 603, 1472, 1473, 985,
	608, 966, 984, 501, 983, 982, 457, 278, 962, 981,
	980, 513, 913, 914, 915, 916, 918, 979, 938, 905,
	978, 1360, 977, 466, 737, 970, 959, 64, 877, 483,
	610, 547, 537, 535, 768, 2038, 2012, 748, 751, 1911,
	1819, 1797, 770, 1793, 1359, 504, 1767, 887, 1766, 915,
	916, 918, 957, 938, 1794, 1478, 711, 1952, 1914, 726,
	1391, 819, 1765, 821, 909, 910, 820, 1352, 1043, 1413,
	1523, 1474, 1475, 1476, 1477, 1479, 853, 1005, 846, 852,
	1522, 1006, 1417, 555, 84, 862, 571, 556, 975, 1087,
	881, 1334, 84, 1783, 615, 761, 84, 1478, 764, 1051,
	84, 84, 1662, 996, 84, 1234, 1448, 874, 1346, 84,
	273, 455, 74, 891, 890, 889, 575, 458, 1530, 1995,
	458, 458, 903, 84, 711, 84, 84, 2052, 84, 2053,
	1372, 84, 1088, 84, 84, 657, 84, 897, 528, 1954,
	898, 899, 1746, 447, 1024, 446, 1096, 1017, 576, 441,
	1488, 972, 442, 969, 1068, 521, 779, 521, 721, 875,
	722, 61, 464, 274, 1071, 73, 61, 1875, 721, 938,
	722, 1874, 1089, 1086, 1009, 1558, 1053, 856, 1053, 721,
	1557, 722, 1016, 938, 1527, 1526, 480, 1016, 1554, 269,
	490, 997, 998, 1015, 480, 1420, 526, 1001, 1075, 1028,
	1030, 85, 1365, 1004, 1364, 1027, 463, 1363, 805, 1362,
	1195, 851, 850, 1062, 844, 841, 1094, 1489, 490, 1040,
	1039, 490, 1036, 1008, 581, 1045, 494, 1033, 293, 1575,
	723, 1135, 84, 1020, 553, 1041, 1757, 270, 1037, 1294,
	723, 1091, 1953, 294, 1266, 1293, 1166, 84, 84, 450,
	1077, 723, 1076, 465, 84, 1561, 804, 1209, 1476, 1477,
	1479, 1078, 1057, 533, 1209, 1109, 1066, 1858, 1067, 1069,
	1072, 1070, 1563, 554, 1336, 743, 727, 728, 2025, 84,
	2000, 859, 84, 1545, 863, 864, 865, 866, 867, 275,
	451, 72, 854, 1146, 870, 871, 1026, 1482, 1474, 1475,
	1476, 1477, 1479, 1165, 1234, 1085, 1001, 727, 1004, 456,
	401, 752, 1091, 452, 1138, 1139, 2016, 293, 998, 997,
	2052, 276, 453, 75, 2063, 1216, 1340, 2074, 1583, 1099,
	1214, 406, 1101, 1566, 1098, 1348, 402, 480, 2017, 758,
	462, 1224, 1373, 1103, 1429, 1371, 1329, 1326, 1228, 552,
	811, 732, 1236, 707, 1217, 1322, 1472, 1473, 1427, 2026,
	403, 1104, 2069, 1253, 1253, 1264, 855, 1275, 1025, 1152,
	1102, 938, 731, 1287, 1288, 1289, 719, 1113, 1114, 405,
	272, 271, 1112, 1580, 84, 84, 84, 1472, 1473, 532,
	84, 1552, 1943, 84, 747, 1296, 1013, 1091, 2062, 84,
	84, 84, 84, 84, 1399, 2027, 994, 84, 1147, 572,
	84, 84, 1344, 909, 910, 551, 1130, 528, 1403, 1925,
	84, 1231, 724, 1581, 1888, 84, 1459, 84, 1472, 1473,
	1546, 1425, 724, 954, 84, 1430, 912, 1406, 1614, 1630,
	465, 2024, 1562, 724, 84, 1304, 2051, 2049, 598, 1612,
	1340, 466, 1403, 1221, 1218, 1859, 1478, 1404, 911, 1776,
	1132, 564, 542, 1192, 926, 84, 84, 1157, 1164, 573,
	1242, 1406, 1834, 1298, 1300, 552, 528, 1261, 404, 1487,
	529, 1422, 540, 1401, 1869, 1332, 2067, 1478, 1208, 2061,
	1868, 1404, 1091, 1321, 574, 84, 1851, 84, 597, 84,
	1691, 1328, 2075, 84, 2080, 1402, 1342, 84, 1299, 1488,
	1338, 1742, 1935, 917, 759, 746, 1529, 1307, 845, 842,
	1383, 1790, 407, 598, 746, 1426, 84, 1405, 1478, 1335,
	779, 779, 1428, 1303, 480, 1133, 1379, 2068, 1381, 61,
	1488, 888, 1345, 879, 1803, 1579, 597, 1988, 830, 869,
	1215, 1353, 466, 1745, 1382, 2070, 1190, 1193, 1385, 1599,
	1744, 1405, 826, 1835, 1778, 1852, 927, 1791, 706, 1313,
	1312, 1075, 1609, 654, 551, 1357, 1489, 1608, 511, 1308,
	510, 1488, 805, 805, 1189, 1692, 828, 463, 1368, 1369,
	1374, 1693, 1205, 1386, 1435, 589, 2079, 1416, 829, 1589,
	1370, 1741, 1438, 1804, 1805, 1331, 1203, 1489, 1769, 466,
	1605, 1396, 1245, 1849, 1928, 1833, 1152, 1504, 1503, 1789,
	1454, 1455, 1636, 1077, 1560, 1076, 1393, 1450, 1466, 1415,
	804, 804, 1397, 928, 1078, 1850, 1394, 1431, 1358, 1337,
	1095, 1047, 779, 1354, 570, 1355, 1356, 569, 1489, 568,
	1743, 567, 566, 1498, 1480, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 565, 562, 1511, 509, 1423, 502, 466, 1191,
	1421, 778, 976, 861, 1244, 2020, 1308, 1201, 1985, 1200,
	1407, 1716, 1550, 1206, 1436, 1548, 1528, 1387, 1474, 1475,
	1476, 1477, 1479, 896, 805, 1136, 529, 1128, 1073, 765,
	763, 779, 760, 294, 529, 1555, 1556, 1447, 755, 733,
	922, 919, 920, 921, 913, 914, 915, 916, 918, 729,
	938, 84, 84, 725, 1650, 1483, 1480, 1481, 1482, 1474,
	1475, 1476, 1477, 1479, 1389, 1882, 1570, 909, 910, 779,
	600, 476, 804, 2053, 1142, 558, 84, 508, 77, 84,
	507, 84, 848, 805, 3, 529, 529, 1884, 84, 1032,
	912, 528, 1567, 294, 1506, 1507, 1508, 1540, 1525, 84,
	1945, 1595, 84, 1202, 1408, 1735, 1541, 1980, 1016, 1532,
	1204, 293, 911, 84, 1031, 1399, 1606, 1539, 1564, 288,
	23, 805, 1592, 1625, 1621, 397, 1569, 440, 1559, 1553,
	604, 804, 1143, 61, 286, 22, 1619, 1035, 601, 477,
	1034, 1062, 1152, 1600, 1966, 1573, 1571, 1321, 1622, 1643,
	1572, 1774, 1582, 1584, 1585, 559, 484, 496, 1131, 499,
	84, 1639, 500, 1403, 1727, 1016, 1590, 917, 1127, 804,
	1607, 1029, 408, 1610, 1655, 1656, 1657, 1056, 904, 1602,
	287, 11, 1406, 443, 444, 1611, 1615, 1616, 822, 1152,
	771, 23, 1152, 1082, 1401, 2077, 1728, 2078, 398, 1472,
	1473, 2013, 1404, 1601, 289, 10, 22, 281, 9, 280,
	7, 1696, 1969, 282, 4, 1800, 1402, 909, 910, 807,
	927, 1711, 1706, 1549, 1586, 1551, 1577, 84, 84, 84,
	1649, 1107, 1106, 1665, 1646, 1518, 1361, 1295, 1668, 1292,
	1663, 1291, 1670, 401, 84, 1241, 1108, 963, 1821, 84,
	1999, 84, 11, 84, 84, 84, 1881, 1658, 84, 84,
	637, 528, 1698, 1384, 406, 973, 1739, 971, 449, 402,
	1857, 1699, 1405, 399, 1736, 860, 10, 563, 1795, 9,
	1617, 7, 1740, 2015, 1715, 4, 1723, 928, 1724, 1826,
	81, 81, 267, 403, 84, 84, 1458, 1899, 1712, 529,
	1924, 528, 1243, 392, 393, 394, 974, 38, 411, 84,
	84, 423, 405, 84, 1537, 1770, 1726, 631, 1785, 411,
	1775, 528, 84, 1729, 1756, 1763, 472, 472, 1540, 84,
	267, 1799, 1772, 267, 267, 491, 267, 1541, 1717, 81,
	498, 1531, 1122, 1749, 1759, 1121, 1809, 466, 1539, 1755,
	296, 1157, 1666, 1779, 1764, 849, 653, 1773, 834, 843,
	1157, 1671, 84, 1252, 1781, 1158, 1813, 921, 913, 914,
	915, 916, 918, 742, 938, 778, 778, 1540, 708, 526,
	1786, 1787, 1540, 779, 1792, 1798, 1541, 655, 1725, 294,
	776, 1541, 656, 1702, 777, 1002, 643, 1539, 774, 1152,
	1152, 1060, 1539, 1152, 1213, 1232, 1446, 967, 623, 1267,
	635, 404, 634, 1780, 779, 779, 1229, 84, 534, 84,
	1801, 84, 84, 779, 779, 51, 548, 417, 418, 1832,
	84, 1343, 1760, 1137, 806, 805, 84, 892, 1547, 775,
	454, 1469, 1847, 536, 1273, 1265, 1262, 583, 714, 955,
	1865, 1061, 560, 1349, 1081, 407, 779, 1862, 609, 1727,
	900, 1720, 84, 1844, 475, 474, 805, 805, 1861, 1718,
	1117, 1863, 1845, 1722, 557, 805, 805, 84, 294, 827,
	528, 1100, 948, 804, 84, 1860, 945, 778, 445, 747,
	1937, 1728, 84, 1129, 1306, 1890, 2073, 1944, 1544, 1994,
	1883, 68, 1951, 1879, 1330, 1885, 26, 1876, 805, 84,
	84, 1721, 1909, 24, 804, 804, 21, 19, 1540, 18,
	1855, 1915, 1918, 804, 804, 17, 25, 1541, 1902, 1898,
	15, 1893, 1896, 267, 514, 267, 423, 423, 1539, 14,
	1906, 13, 12, 1923, 37, 703, 778, 1917, 36, 35,
	84, 34, 1877, 33, 32, 6, 804, 1540, 5, 1939,
	2, 1, 0, 1905, 0, 1930, 1541, 1895, 0, 0,
	0, 0, 0, 0, 0, 84, 84, 1539, 529, 0,
	1933, 1723, 1152, 1724, 778, 84, 1942, 295, 779, 84,
	0, 1934, 1897, 807, 807, 1960, 0, 528, 1958, 0,
	0, 1941, 0, 1961, 84, 0, 0, 0, 0, 0,
	84, 1726, 0, 0, 466, 293, 84, 84, 1729, 1970,
	0, 1968, 0, 0, 0, 1975, 0, 0, 1964, 0,
	0, 0, 1267, 1267, 1871, 61, 0, 529, 1971, 84,
	805, 84, 1967, 0, 84, 1979, 84, 0, 1972, 0,
	0, 0, 1973, 1872, 1873, 1976, 538, 0, 1982, 0,
	1997, 2003, 1472, 1473, 2005, 1998, 84, 1996, 2004, 84,
	0, 543, 2001, 0, 423, 423, 1991, 0, 0, 1990,
	2009, 2011, 0, 1725, 0, 2008, 2006, 2007, 804, 0,
	0, 0, 2018, 1267, 1267, 1267, 0, 779, 0, 0,
	0, 84, 0, 84, 0, 807, 0, 2035, 411, 1963,
	267, 2030, 423, 587, 423, 0, 590, 0, 2032, 2033,
	0, 84, 0, 0, 0, 2046, 0, 2037, 0, 0,
	2050, 472, 0, 2048, 1993, 2054, 0, 0, 84, 0,
	0, 2034, 267, 0, 2060, 2058, 0, 2059, 1540, 805,
	2056, 0, 0, 0, 0, 0, 81, 1541, 2072, 2071,
	0, 2076, 1478, 0, 807, 267, 0, 0, 1539, 0,
	267, 267, 267, 0, 753, 909, 910, 0, 0, 2081,
	0, 0, 1433, 1434, 0, 0, 0, 779, 0, 0,
	0, 1062, 0, 267, 267, 0, 0, 804, 912, 0,
	0, 81, 807, 81, 0, 0, 0, 0, 806, 806,
	0, 0, 0, 775, 775, 1488, 0, 0, 0, 0,
	911, 0, 0, 423, 530, 81, 423, 423, 423, 423,
	423, 868, 0, 0, 0, 0, 423, 423, 0, 805,
	0, 0, 411, 1495, 1496, 1497, 1267, 1267, 0, 0,
	886, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 472, 0,
	0, 498, 0, 0, 0, 917, 0, 0, 0, 0,
	779, 0, 1489, 0, 0, 632, 49, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 778, 1267,
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
	1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 0, 1267,
	806, 0, 529, 0, 0, 775, 49, 0, 927, 778,
	778, 0, 805, 0, 0, 0, 0, 0, 778, 778,
	0, 0, 294, 0, 0, 0, 0, 459, 0, 0,
	467, 0, 0, 0, 0, 0, 0, 49, 0, 1483,
	1480, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 0, 0,
	0, 778, 0, 0, 267, 0, 0, 818, 0, 806,
	804, 0, 1021, 0, 775, 0, 267, 0, 0, 0,
	267, 1038, 0, 0, 267, 928, 1634, 1635, 0, 1044,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 267, 0, 1064, 1065, 806, 267, 0,
	0, 267, 775, 423, 423, 0, 423, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	530, 0, 0, 0, 0, 0, 0, 295, 530, 1672,
	1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682,
	1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 0, 1694,
	0, 0, 922, 919, 920, 921, 913, 914, 915, 916,
	918, 0, 938, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 529, 0, 0, 0, 0, 0, 0, 530,
	530, 0, 0, 778, 0, 0, 0, 295, 0, 0,
	0, 0, 0, 0, 0, 0, 807, 0, 0, 0,
	909, 910, 1111, 929, 930, 931, 939, 940, 941, 0,
	0, 0, 529, 0, 0, 0, 932, 267, 1118, 0,
	0, 0, 0, 912, 498, 0, 943, 807, 807, 0,
	0, 0, 529, 1267, 0, 0, 807, 807, 0, 0,
	0, 909, 910, 0, 467, 911, 0, 0, 0, 267,
	0, 926, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 0, 807,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 911, 0, 0, 0,
	0, 0, 778, 0, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 0, 0, 0, 0, 909, 910, 0,
	0, 0, 0, 939, 940, 941, 0, 0, 0, 936,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	912, 0, 0, 943, 0, 942, 0, 0, 1267, 0,
	0, 917, 0, 0, 0, 0, 0, 934, 0, 0,
	0, 0, 911, 927, 267, 1301, 1302, 0, 926, 0,
	1021, 0, 0, 1309, 0, 0, 0, 0, 0, 1314,
	1315, 1317, 1319, 1320, 0, 0, 0, 1325, 933, 0,
	1327, 267, 778, 1854, 0, 0, 0, 0, 0, 0,
	267, 529, 0, 530, 927, 267, 0, 1347, 0, 0,
	0, 807, 0, 0, 267, 0, 0, 917, 0, 0,
	0, 806, 0, 0, 267, 0, 775, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 936, 944, 0, 0,
	0, 0, 937, 1267, 459, 1111, 1111, 0, 0, 0,
	0, 0, 806, 806, 0, 0, 0, 775, 775, 0,
	0, 806, 806, 0, 934, 0, 775, 775, 0, 0,
	927, 928, 0, 0, 0, 886, 0, 886, 0, 423,
	0, 0, 0, 267, 0, 778, 0, 1392, 0, 0,
	0, 0, 0, 295, 806, 0, 909, 910, 1927, 775,
	935, 0, 0, 923, 924, 925, 267, 922, 919, 920,
	921, 913, 914, 915, 916, 918, 0, 938, 529, 912,
	807, 0, 0, 0, 1840, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 928, 0, 0,
	0, 911, 613, 613, 0, 0, 0, 0, 0, 937,
	0, 716, 913, 914, 915, 916, 918, 0, 938, 0,
	0, 909, 910, 0, 929, 930, 931, 939, 940, 941,
	0, 0, 0, 0, 0, 459, 0, 932, 459, 459,
	0, 0, 295, 0, 912, 0, 0, 943, 0, 0,
	0, 0, 0, 1981, 0, 0, 917, 0, 0, 0,
	958, 0, 960, 0, 0, 0, 911, 935, 0, 964,
	807, 0, 926, 0, 922, 919, 920, 921, 913, 914,
	915, 916, 918, 0, 938, 0, 806, 0, 0, 0,
	0, 775, 1472, 1473, 0, 1490, 1491, 1492, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1810, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 1536, 0, 0, 893, 895, 0, 0, 0,
	0, 0, 902, 0, 0, 0, 0, 0, 0, 0,
	936, 944, 530, 1487, 949, 950, 951, 952, 953, 0,
	0, 0, 0, 0, 961, 0, 942, 0, 0, 0,
	0, 267, 267, 807, 968, 0, 0, 0, 934, 0,
	0, 0, 0, 0, 927, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 1587, 49, 0, 1021,
	0, 886, 1478, 0, 0, 806, 0, 0, 1597, 933,
	775, 530, 49, 0, 0, 0, 0, 49, 0, 267,
	0, 0, 267, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1629, 0, 0, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 928, 0, 0, 0, 1488, 0, 0, 0, 0,
	0, 0, 0, 937, 919, 920, 921, 913, 914, 915,
	916, 918, 0, 938, 0, 0, 0, 0, 0, 0,
	1660, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	775, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 1489, 0, 923, 924, 925, 0, 922, 919,
	920, 921, 913, 914, 915, 916, 918, 0, 938, 0,
	0, 0, 0, 0, 0, 1514, 0, 1713, 1714, 1021,
	0, 0, 0, 0, 1153, 0, 0, 0, 0, 0,
	0, 0, 0, 1536, 498, 0, 0, 0, 0, 1747,
	0, 1748, 0, 267, 1750, 1751, 0, 0, 1754, 267,
	0, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	1211, 0, 0, 775, 0, 1484, 1485, 1486, 0, 1483,
	1480, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 0, 0,
	0, 0, 1536, 0, 498, 1118, 0, 1536, 0, 0,
	0, 0, 0, 0, 0, 0, 424, 0, 0, 267,
	267, 0, 0, 267, 0, 0, 0, 0, 0, 0,
	0, 0, 1629, 0, 425, 613, 0, 0, 0, 1807,
	0, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175,
	1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185,
	1186, 1187, 1188, 0, 1194, 0, 1196, 1197, 1198, 1199,
	427, 0, 1827, 0, 0, 432, 433, 0, 0, 438,
	0, 0, 0, 0, 0, 1222, 530, 0, 0, 0,
	467, 426, 428, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 1249, 1250, 0,
	0, 1263, 0, 1274, 1276, 1281, 1284, 1285, 1286, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 1846,
	429, 423, 1848, 0, 0, 0, 0, 0, 716, 0,
	267, 0, 0, 1536, 430, 431, 423, 0, 0, 0,
	0, 0, 1472, 1473, 0, 1490, 1491, 1492, 0, 0,
	0, 434, 0, 49, 0, 0, 0, 49, 1878, 0,
	0, 0, 498, 0, 0, 0, 0, 0, 0, 1341,
	49, 0, 1536, 0, 0, 0, 0, 267, 0, 0,
	0, 1414, 0, 0, 1901, 0, 0, 0, 0, 0,
	0, 0, 267, 1487, 0, 0, 0, 0, 0, 0,
	909, 910, 0, 929, 930, 931, 939, 940, 941, 498,
	1629, 1367, 0, 0, 0, 0, 932, 0, 0, 1211,
	0, 0, 0, 912, 0, 0, 943, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 960, 0,
	0, 0, 1478, 0, 0, 911, 530, 0, 0, 0,
	886, 926, 0, 0, 0, 0, 0, 0, 902, 0,
	0, 435, 1494, 0, 0, 436, 0, 0, 0, 0,
	437, 0, 0, 0, 0, 1946, 1947, 1493, 0, 0,
	0, 0, 0, 0, 439, 1956, 530, 0, 0, 1957,
	0, 0, 0, 0, 0, 1488, 0, 960, 0, 0,
	917, 0, 0, 0, 498, 0, 530, 1418, 1419, 0,
	1629, 0, 0, 1424, 0, 0, 1629, 498, 0, 936,
	944, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 0, 1989,
	0, 498, 0, 0, 267, 1442, 423, 934, 0, 0,
	0, 0, 1449, 927, 0, 1453, 0, 0, 0, 0,
	0, 0, 1489, 1536, 1462, 0, 1901, 0, 0, 1629,
	0, 0, 0, 0, 0, 0, 0, 1153, 933, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 961,
	0, 0, 0, 0, 0, 1281, 1281, 1281, 0, 0,
	0, 267, 0, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 2047, 0, 0, 1153, 0, 0, 1153, 1533, 0,
	0, 0, 937, 0, 49, 1484, 1485, 1486, 1629, 1483,
	1480, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 613, 0,
	0, 0, 0, 0, 0, 530, 613, 0, 0, 0,
	716, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 923, 924, 925, 0, 922, 919, 920,
	921, 913, 914, 915, 916, 918, 0, 938, 0, 0,
	0, 0, 0, 0, 1513, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 909, 910, 0, 929, 930,
	931, 939, 940, 941, 0, 1632, 0, 0, 1633, 0,
	0, 932, 0, 0, 0, 0, 0, 0, 912, 1638,
	0, 943, 0, 0, 0, 0, 0, 0, 1647, 0,
	0, 0, 0, 0, 0, 0, 1651, 0, 0, 1367,
	911, 0, 0, 0, 0, 0, 926, 0, 0, 0,
	0, 0, 530, 0, 1667, 0, 0, 0, 1669, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 0,
	295, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1700, 1701, 0, 0, 917, 0, 0, 0, 0,
	1707, 1708, 1709, 0, 1153, 1153, 0, 0, 1153, 0,
	0, 0, 0, 0, 936, 944, 467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1737, 0, 0, 0,
	942, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 934, 0, 0, 0, 0, 0, 927, 0,
	0, 0, 0, 0, 613, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1784, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 1473, 0, 1490, 1491, 1492, 0,
	0, 0, 0, 0, 0, 928, 0, 0, 0, 1641,
	0, 0, 0, 0, 1812, 0, 0, 937, 1815, 1816,
	0, 0, 0, 1818, 0, 0, 0, 0, 0, 0,
	1820, 0, 1822, 0, 0, 0, 0, 0, 0, 0,
	1828, 0, 0, 0, 1487, 0, 0, 0, 0, 0,
	0, 1886, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1837, 0, 935, 0, 1153, 923, 924,
	925, 0, 922, 919, 920, 921, 913, 914, 915, 916,
	918, 0, 938, 1478, 0, 0, 0, 0, 0, 1512,
	0, 0, 0, 909, 910, 0, 929, 930, 931, 939,
	940, 941, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 1870, 0, 0, 0, 912, 0, 1493, 943,
	0, 0, 909, 910, 0, 929, 930, 931, 939, 940,
	941, 0, 0, 0, 0, 0, 1488, 0, 911, 0,
	0, 0, 0, 0, 926, 912, 0, 0, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1904, 0,
	0, 0, 0, 960, 0, 0, 0, 911, 0, 0,
	0, 0, 0, 926, 0, 0, 0, 0, 1919, 1920,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 0, 0, 917, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 0, 1932, 0,
	0, 0, 936, 944, 0, 0, 0, 0, 0, 0,
	0, 1936, 917, 0, 0, 0, 0, 0, 942, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	934, 936, 944, 0, 0, 0, 927, 0, 0, 0,
	0, 0, 0, 0, 0, 716, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 934,
	0, 933, 0, 0, 0, 927, 1484, 1485, 1486, 0,
	1483, 1480, 1481, 1482, 1474, 1475, 1476, 1477, 1479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 937, 0, 0, 0, 0, 0,
	0, 0, 0, 2031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 2045, 2045, 923, 924, 925, 0,
	922, 919, 920, 921, 913, 914, 915, 916, 918, 0,
	938, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	2045, 0, 935, 0, 0, 923, 924, 925, 0, 922,
	919, 920, 921, 913, 914, 915, 916, 918, 0, 938,
	292, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2045, 86, 87, 311, 88,
	312, 313, 314, 315, 214, 316, 317, 318, 319, 89,
	90, 91, 215, 216, 217, 218, 92, 219, 220, 320,
	93, 221, 222, 94, 321, 322, 223, 224, 225, 323,
	226, 324, 297, 325, 95, 96, 97, 0, 98, 326,
	99, 100, 101, 327, 298, 102, 103, 328, 329, 330,
	331, 332, 333, 104, 105, 268, 106, 227, 107, 228,
	229, 334, 108, 335, 109, 336, 337, 338, 110, 111,
	339, 112, 340, 0, 341, 230, 113, 114, 231, 232,
	342, 343, 344, 115, 116, 233, 0, 117, 345, 118,
	346, 347, 299, 348, 119, 234, 349, 235, 350, 120,
	121, 122, 123, 236, 237, 301, 351, 127, 352, 124,
	353, 300, 125, 238, 126, 239, 240, 241, 354, 242,
	355, 302, 128, 303, 129, 130, 356, 132, 131, 357,
	243, 304, 133, 305, 358, 134, 359, 360, 135, 0,
	136, 137, 138, 244, 139, 306, 140, 141, 143, 144,
	142, 361, 362, 363, 245, 145, 246, 146, 147, 364,
	148, 365, 366, 149, 367, 368, 150, 247, 307, 151,
	308, 248, 152, 153, 154, 155, 369, 249, 156, 250,
	157, 370, 158, 159, 160, 251, 161, 162, 371, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 372,
	173, 309, 174, 175, 252, 176, 0, 177, 178, 179,
	180, 373, 253, 181, 182, 374, 183, 184, 310, 185,
	254, 255, 186, 375, 192, 187, 188, 189, 191, 256,
	190, 257, 376, 193, 377, 194, 195, 196, 378, 258,
	259, 260, 379, 380, 197, 261, 262, 381, 198, 199,
	200, 201, 382, 383, 202, 203, 204, 384, 205, 385,
	206, 207, 208, 263, 264, 386, 387, 209, 388, 389,
	390, 391, 210, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 292, 0, 0,
	0, 0, 0, 0, 1623, 0, 0, 0, 0, 0,
	0, 0, 1624, 86, 87, 311, 88, 312, 313, 314,
	315, 214, 316, 317, 318, 319, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 320, 93, 221, 222,
	94, 321, 322, 223, 224, 225, 323, 226, 324, 297,
	325, 95, 96, 97, 0, 98, 326, 99, 100, 101,
	327, 298, 102, 103, 328, 329, 330, 331, 332, 333,
	104, 105, 268, 106, 227, 107, 228, 229, 334, 108,
	335, 109, 336, 337, 338, 110, 111, 339, 112, 340,
	0, 341, 230, 113, 114, 231, 232, 342, 343, 344,
	115, 116, 233, 0, 117, 345, 118, 346, 347, 299,
	348, 119, 234, 349, 235, 350, 120, 121, 122, 123,
	236, 237, 301, 351, 127, 352, 124, 353, 300, 125,
	238, 126, 239, 240, 241, 354, 242, 355, 302, 128,
	303, 129, 130, 356, 132, 131, 357, 243, 304, 133,
	305, 358, 134, 359, 360, 135, 0, 136, 137, 138,
	244, 139, 306, 140, 141, 143, 144, 142, 361, 362,
	363, 245, 145, 246, 146, 147, 364, 148, 365, 366,
	149, 367, 368, 150, 247, 307, 151, 308, 248, 152,
	153, 154, 155, 369, 249, 156, 250, 157, 370, 158,
	159, 160, 251, 161, 162, 371, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 372, 173, 309, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 373, 253,
	181, 182, 374, 183, 184, 310, 185, 254, 255, 186,
	375, 192, 187, 188, 189, 191, 256, 190, 257, 376,
	193, 377, 194, 195, 196, 378, 258, 259, 260, 379,
	380, 197, 261, 262, 381, 198, 199, 200, 201, 382,
	383, 202, 203, 204, 384, 205, 385, 206, 207, 208,
	263, 264, 386, 387, 209, 388, 389, 390, 391, 210,
	211, 212, 213, 0, 0, 0, 292, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1974, 86, 87, 311, 88, 312, 313, 314, 315,
	214, 316, 317, 318, 319, 89, 90, 91, 215, 216,
	217, 218, 92, 219, 220, 320, 93, 221, 222, 94,
	321, 322, 223, 224, 225, 323, 226, 324, 297, 325,
	95, 96, 97, 0, 98, 326, 99, 100, 101, 327,
	298, 102, 103, 328, 329, 330, 331, 332, 333, 104,
	105, 268, 106, 227, 107, 228, 229, 334, 108, 335,
	109, 336, 337, 338, 110, 111, 339, 112, 340, 0,
	341, 230, 113, 114, 231, 232, 342, 343, 344, 115,
	116, 233, 0, 117, 345, 118, 346, 347, 299, 348,
	119, 234, 349, 235, 350, 120, 121, 122, 123, 236,
	237, 301, 351, 127, 352, 124, 353, 300, 125, 238,
	126, 239, 240, 241, 354, 242, 355, 302, 128, 303,
	129, 130, 356, 132, 131, 357, 243, 304, 133, 305,
	358, 134, 359, 360, 135, 0, 136, 137, 138, 244,
	139, 306, 140, 141, 143, 144, 142, 361, 362, 363,
	245, 145, 246, 146, 147, 364, 148, 365, 366, 149,
	367, 368, 150, 247, 307, 151, 308, 248, 152, 153,
	154, 155, 369, 249, 156, 250, 157, 370, 158, 159,
	160, 251, 161, 162, 371, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 372, 173, 309, 174, 175,
	252, 176, 0, 177, 178, 179, 180, 373, 253, 181,
	182, 374, 183, 184, 310, 185, 254, 255, 186, 375,
	192, 187, 188, 189, 191, 256, 190, 257, 376, 193,
	377, 194, 195, 196, 378, 258, 259, 260, 379, 380,
	197, 261, 262, 381, 198, 199, 200, 201, 382, 383,
	202, 203, 204, 384, 205, 385, 206, 207, 208, 263,
	264, 386, 387, 209, 388, 389, 390, 391, 210, 211,
	212, 213, 292, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 740, 0, 0, 86, 87,
	311, 88, 312, 313, 314, 315, 214, 316, 317, 318,
	319, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 320, 93, 221, 222, 94, 321, 322, 223, 224,
	225, 323, 226, 324, 297, 325, 95, 96, 97, 0,
	98, 326, 99, 100, 101, 327, 298, 102, 103, 328,
	329, 330, 331, 332, 333, 104, 105, 268, 106, 227,
	107, 228, 229, 334, 108, 335, 109, 336, 337, 338,
	110, 111, 339, 112, 340, 0, 341, 230, 113, 114,
	231, 232, 342, 343, 344, 115, 116, 233, 0, 117,
	345, 118, 346, 347, 299, 348, 119, 234, 349, 235,
	350, 120, 121, 122, 123, 236, 237, 301, 351, 127,
	352, 124, 353, 300, 125, 238, 126, 239, 240, 241,
	354, 242, 355, 302, 128, 303, 129, 130, 356, 132,
	131, 357, 243, 304, 133, 305, 358, 134, 359, 360,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	143, 144, 142, 361, 362, 363, 245, 145, 246, 146,
	147, 364, 148, 365, 366, 149, 367, 368, 150, 247,
	307, 151, 308, 248, 152, 153, 154, 155, 369, 249,
	156, 250, 157, 370, 158, 159, 160, 251, 161, 162,
	371, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 372, 173, 309, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 373, 253, 181, 182, 374, 183, 184,
	310, 185, 254, 255, 186, 375, 192, 187, 188, 189,
	191, 256, 190, 257, 376, 193, 377, 194, 195, 196,
	378, 258, 259, 260, 379, 380, 197, 261, 262, 381,
	198, 199, 200, 201, 382, 383, 202, 203, 204, 384,
	205, 385, 206, 207, 208, 263, 264, 386, 387, 209,
	388, 389, 390, 391, 210, 211, 212, 213, 651, 640,
	641, 638, 639, 630, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 87, 0, 88, 0, 0,
	0, 0, 667, 633, 0, 0, 0, 89, 90, 91,
	215, 682, 217, 683, 92, 684, 685, 0, 93, 221,
	222, 94, 636, 666, 686, 687, 225, 0, 678, 0,
	659, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 298, 102, 103, 0, 660, 662, 0, 661,
	663, 104, 105, 268, 106, 688, 107, 689, 690, 717,
	108, 0, 109, 0, 0, 0, 681, 111, 0, 112,
	0, 0, 0, 624, 113, 114, 668, 669, 647, 0,
	0, 115, 116, 691, 0, 117, 0, 118, 0, 0,
	299, 0, 119, 679, 0, 235, 0, 120, 121, 122,
	123, 675, 677, 301, 0, 127, 0, 124, 0, 300,
	125, 692, 126, 693, 694, 695, 0, 658, 0, 302,
	128, 303, 129, 130, 0, 132, 131, 0, 680, 304,
	133, 305, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 244, 139, 306, 140, 141, 143, 144, 142, 619,
	0, 648, 676, 145, 696, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 670,
	152, 153, 154, 155, 0, 671, 156, 250, 157, 0,
	158, 159, 160, 697, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 625, 176, 0, 177, 178, 179, 180, 67,
	253, 181, 182, 664, 183, 184, 310, 185, 698, 255,
	186, 0, 192, 187, 188, 189, 191, 699, 190, 672,
	0, 193, 69, 194, 195, 196, 0, 258, 700, 701,
	0, 0, 197, 673, 674, 646, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 665, 205, 0, 206, 207,
	208, 531, 702, 0, 0, 209, 0, 0, 0, 65,
	210, 211, 212, 213, 620, 66, 0, 0, 0, 651,
	640, 641, 638, 639, 630, 616, 617, 0, 0, 0,
	0, 618, 0, 0, 626, 86, 87, 1238, 88, 629,
	0, 0, 0, 667, 633, 0, 0, 0, 89, 90,
	91, 215, 682, 217, 683, 92, 684, 685, 0, 93,
	221, 222, 94, 636, 666, 686, 687, 225, 0, 678,
	0, 659, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 298, 102, 103, 0, 660, 662, 0,
	661, 663, 104, 105, 268, 106, 688, 107, 689, 690,
	0, 108, 0, 109, 0, 1239, 0, 681, 111, 0,
	112, 0, 0, 0, 624, 113, 114, 668, 669, 647,
	0, 0, 115, 116, 691, 0, 117, 0, 118, 0,
	0, 299, 0, 119, 679, 0, 235, 0, 120, 121,
	122, 123, 675, 677, 301, 0, 127, 0, 124, 0,
	300, 125, 692, 126, 693, 694, 695, 0, 658, 0,
	302, 128, 303, 129, 130, 0, 132, 131, 0, 680,
	304, 133, 305, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 306, 140, 141, 143, 144, 142,
	619, 0, 648, 676, 145, 696, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 307, 151, 308,
	670, 152, 153, 154, 155, 0, 671, 156, 250, 157,
	0, 158, 159, 160, 697, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	309, 174, 175, 625, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 664, 183, 184, 310, 185, 698,
	255, 186, 0, 192, 187, 188, 189, 191, 699, 190,
	672, 0, 193, 0, 194, 195, 196, 0, 258, 700,
	701, 0, 0, 197, 673, 674, 646, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 665, 205, 0, 206,
	207, 208, 263, 702, 1237, 0, 209, 0, 0, 0,
	0, 210, 211, 212, 213, 620, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 616, 617, 1240, 0,
	0, 0, 618, 0, 0, 626, 1235, 0, 0, 0,
	629, 651, 640, 641, 638, 639, 630, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 667, 633, 0, 0, 0,
	89, 90, 91, 215, 682, 217, 683, 92, 684, 685,
	0, 93, 221, 222, 94, 636, 666, 686, 687, 225,
	0, 678, 0, 659, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 298, 102, 103, 0, 660,
	662, 0, 661, 663, 104, 105, 268, 106, 688, 107,
	689, 690, 0, 108, 0, 109, 0, 0, 0, 681,
	111, 0, 112, 0, 0, 0, 624, 113, 114, 668,
	669, 647, 0, 0, 115, 116, 691, 0, 117, 0,
	118, 0, 0, 299, 0, 119, 679, 0, 235, 0,
	120, 121, 122, 123, 675, 677, 301, 0, 127, 0,
	124, 0, 300, 125, 692, 126, 693, 694, 695, 0,
	658, 0, 302, 128, 303, 129, 130, 0, 132, 131,
	0, 680, 304, 133, 305, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 306, 140, 141, 143,
	144, 142, 619, 0, 648, 676, 145, 696, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 307,
	151, 308, 670, 152, 153, 154, 155, 0, 671, 156,
	250, 157, 0, 158, 159, 160, 697, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 309, 174, 175, 625, 176, 0, 177, 178,
	179, 180, 67, 253, 181, 182, 664, 183, 184, 310,
	185, 698, 255, 186, 0, 192, 187, 188, 189, 191,
	699, 190, 672, 0, 193, 69, 194, 195, 196, 0,
	258, 700, 701, 0, 0, 197, 673, 674, 646, 198,
	199, 200, 201, 0, 0, 202, 203, 204, 665, 205,
	0, 206, 207, 208, 531, 702, 0, 0, 209, 0,
	0, 0, 65, 210, 211, 212, 213, 620, 66, 651,
	640, 641, 638, 639, 630, 0, 0, 0, 616, 617,
	0, 0, 0, 0, 618, 86, 87, 626, 88, 0,
	0, 0, 629, 667, 633, 0, 0, 0, 89, 90,
	91, 215, 682, 217, 683, 92, 684, 685, 1277, 93,
	221, 222, 94, 636, 666, 686, 687, 225, 0, 678,
	0, 659, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 298, 102, 103, 0, 660, 662, 0,
	661, 663, 104, 105, 268, 106, 688, 107, 689, 690,
	0, 108, 0, 109, 0, 0, 0, 681, 111, 0,
	112, 0, 0, 0, 624, 113, 114, 668, 669, 647,
	0, 0, 115, 116, 691, 0, 117, 0, 118, 0,
	1282, 299, 0, 119, 679, 0, 235, 0, 120, 121,
	122, 123, 675, 677, 301, 0, 127, 0, 124, 0,
	300, 125, 692, 126, 693, 694, 695, 0, 658, 0,
	302, 128, 303, 129, 130, 0, 132, 131, 1278, 680,
	304, 133, 305, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 306, 140, 141, 143, 144, 142,
	619, 0, 648, 676, 145, 696, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 307, 151, 308,
	670, 152, 153, 154, 155, 0, 671, 156, 250, 157,
	0, 158, 159, 160, 697, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	309, 174, 175, 625, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 664, 183, 184, 310, 185, 698,
	255, 186, 0, 192, 187, 188, 189, 191, 699, 190,
	672, 0, 193, 0, 194, 195, 196, 0, 258, 700,
	701, 0, 1279, 197, 673, 674, 646, 198, 199, 200,
	201, 0, 0, 202, 203, 204, 665, 205, 0, 206,
	207, 208, 263, 702, 0, 0, 209, 0, 0, 0,
	0, 210, 211, 212, 213, 620, 0, 651, 640, 641,
	638, 639, 630, 0, 0, 0, 616, 617, 0, 0,
	0, 0, 618, 86, 87, 626, 88, 0, 0, 0,
	629, 667, 633, 0, 0, 0, 89, 90, 91, 215,
	682, 217, 683, 92, 684, 685, 0, 93, 221, 222,
	94, 636, 666, 686, 687, 225, 0, 678, 0, 659,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 660, 662, 0, 661, 663,
	104, 105, 268, 106, 688, 107, 689, 690, 0, 108,
	0, 109, 0, 0, 0, 681, 111, 0, 112, 0,
	0, 0, 624, 113, 114, 668, 669, 647, 0, 0,
	115, 116, 691, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 679, 0, 235, 0, 120, 121, 122, 123,
	675, 677, 301, 0, 127, 0, 124, 0, 300, 125,
	692, 126, 693, 694, 695, 0, 658, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 680, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 306, 140, 141, 143, 144, 142, 619, 1565,
	648, 676, 145, 696, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 670, 152,
	153, 154, 155, 0, 671, 156, 250, 157, 0, 158,
	159, 160, 697, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 625, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 664, 183, 184, 310, 185, 698, 255, 186,
	0, 192, 187, 188, 189, 191, 699, 190, 672, 0,
	193, 0, 194, 195, 196, 0, 258, 700, 701, 0,
	0, 197, 673, 674, 646, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 665, 205, 0, 206, 207, 208,
	263, 702, 0, 0, 209, 0, 0, 0, 0, 210,
	211, 212, 213, 620, 0, 651, 640, 641, 638, 639,
	630, 0, 0, 0, 616, 617, 614, 0, 0, 0,
	618, 86, 87, 626, 88, 0, 0, 0, 629, 667,
	633, 0, 0, 0, 89, 90, 91, 215, 682, 217,
	683, 92, 684, 685, 0, 93, 221, 222, 94, 636,
	666, 686, 687, 225, 0, 678, 0, 659, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 298,
	102, 103, 0, 660, 662, 0, 661, 663, 104, 105,
	268, 106, 688, 107, 689, 690, 0, 108, 0, 109,
	0, 0, 0, 681, 111, 0, 112, 0, 0, 0,
	624, 113, 114, 668, 669, 647, 0, 0, 115, 116,
	691, 0, 117, 0, 118, 0, 0, 299, 0, 119,
	679, 0, 235, 0, 120, 121, 122, 123, 675, 677,
	301, 0, 127, 0, 124, 0, 300, 125, 692, 126,
	693, 694, 695, 0, 658, 0, 302, 128, 303, 129,
	130, 0, 132, 131, 0, 680, 304, 133, 305, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	306, 140, 141, 143, 144, 142, 619, 0, 648, 676,
	145, 696, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 307, 151, 308, 670, 152, 153, 154,
	155, 0, 671, 156, 250, 157, 0, 158, 159, 160,
	697, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 309, 174, 175, 625,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	664, 183, 184, 310, 185, 698, 255, 186, 0, 192,
	187, 188, 189, 191, 699, 190, 672, 0, 193, 0,
	194, 195, 196, 0, 258, 700, 701, 0, 0, 197,
	673, 674, 646, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 665, 205, 0, 206, 207, 208, 263, 702,
	0, 0, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 620, 0, 0, 0, 0, 651, 640, 641, 638,
	639, 630, 616, 617, 0, 0, 0, 0, 618, 966,
	1230, 626, 86, 87, 0, 88, 629, 0, 0, 0,
	667, 633, 0, 0, 0, 89, 90, 91, 215, 682,
	217, 683, 92, 684, 685, 0, 93, 221, 222, 94,
	636, 666, 686, 687, 225, 0, 678, 0, 659, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 660, 662, 0, 661, 663, 104,
	105, 268, 106, 688, 107, 689, 690, 0, 108, 0,
	109, 0, 0, 0, 681, 111, 0, 112, 0, 0,
	0, 624, 113, 114, 668, 669, 647, 0, 0, 115,
	116, 691, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 679, 0, 235, 0, 120, 121, 122, 123, 675,
	677, 301, 0, 127, 0, 124, 0, 300, 125, 692,
	126, 693, 694, 695, 0, 658, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 680, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 306, 140, 141, 143, 144, 142, 619, 0, 648,
	676, 145, 696, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 670, 152, 153,
	154, 155, 0, 671, 156, 250, 157, 0, 158, 159,
	160, 697, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	625, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 664, 183, 184, 310, 185, 698, 255, 186, 0,
	192, 187, 188, 189, 191, 699, 190, 672, 0, 193,
	0, 194, 195, 196, 0, 258, 700, 701, 0, 0,
	197, 673, 674, 646, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 665, 205, 0, 206, 207, 208, 263,
	702, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 620, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 0, 616, 617, 614, 0, 0, 0, 618,
	86, 87, 626, 88, 0, 0, 0, 629, 667, 633,
	0, 0, 0, 89, 90, 91, 215, 682, 217, 683,
	92, 684, 685, 0, 93, 221, 222, 94, 636, 666,
	686, 687, 225, 0, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 688, 107, 689, 690, 0, 108, 0, 109, 0,
	0, 0, 681, 111, 0, 112, 0, 0, 0, 624,
	113, 114, 668, 669, 647, 0, 0, 115, 116, 691,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 301,
	0, 127, 0, 124, 0, 300, 125, 692, 126, 693,
	694, 695, 0, 658, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 143, 144, 142, 619, 0, 648, 676, 145,
	696, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 697,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 625, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 310, 185, 698, 255, 186, 0, 192, 187,
	188, 189, 191, 699, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 700, 701, 0, 0, 197, 673,
	674, 646, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 702, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 617, 0, 0, 0, 0, 618, 0, 0,
	626, 1697, 0, 0, 0, 629, 651, 640, 641, 638,
	639, 630, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	667, 633, 0, 0, 0, 89, 90, 91, 215, 682,
	217, 683, 92, 684, 685, 0, 93, 221, 222, 94,
	636, 666, 686, 687, 225, 0, 678, 0, 659, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 660, 662, 0, 661, 663, 104,
	105, 268, 106, 688, 107, 689, 690, 0, 108, 0,
	109, 0, 0, 0, 681, 111, 0, 112, 0, 0,
	0, 624, 113, 114, 668, 669, 647, 0, 0, 115,
	116, 691, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 679, 0, 235, 0, 120, 121, 122, 123, 675,
	677, 301, 0, 127, 0, 124, 0, 300, 125, 692,
	126, 693, 694, 695, 0, 658, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 680, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 306, 140, 141, 143, 144, 142, 619, 0, 648,
	676, 145, 696, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 670, 152, 153,
	154, 155, 0, 671, 156, 250, 157, 0, 158, 159,
	160, 697, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	625, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 664, 183, 184, 310, 185, 698, 255, 186, 0,
	192, 187, 188, 189, 191, 699, 190, 672, 0, 193,
	0, 194, 195, 196, 0, 258, 700, 701, 0, 0,
	197, 673, 674, 646, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 665, 205, 0, 206, 207, 208, 263,
	702, 1654, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 620, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 0, 616, 617, 0, 0, 0, 0, 618,
	86, 87, 626, 88, 0, 0, 0, 629, 667, 633,
	0, 0, 0, 89, 90, 91, 215, 682, 217, 683,
	92, 684, 685, 0, 93, 221, 222, 94, 636, 666,
	686, 687, 225, 0, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 688, 107, 689, 690, 0, 108, 0, 109, 0,
	0, 0, 681, 111, 0, 112, 0, 0, 0, 624,
	113, 114, 668, 669, 647, 0, 0, 115, 116, 691,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 301,
	0, 127, 0, 124, 0, 300, 125, 692, 126, 693,
	694, 695, 0, 658, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 143, 144, 142, 619, 0, 648, 676, 145,
	696, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 697,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 625, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 310, 185, 698, 255, 186, 0, 192, 187,
	188, 189, 191, 699, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 700, 701, 0, 0, 197, 673,
	674, 646, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 702, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 616, 617, 0, 0, 0, 0, 618, 0, 0,
	626, 1644, 0, 0, 0, 629, 651, 640, 641, 638,
	639, 630, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 87, 0, 88, 0, 0, 0, 0,
	667, 633, 0, 0, 0, 89, 90, 91, 215, 682,
	217, 683, 92, 684, 685, 0, 93, 221, 222, 94,
	636, 666, 686, 687, 225, 0, 678, 0, 659, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 660, 662, 0, 661, 663, 104,
	105, 268, 106, 688, 107, 689, 690, 717, 108, 0,
	109, 0, 0, 0, 681, 111, 0, 112, 0, 0,
	0, 624, 113, 114, 668, 669, 647, 0, 0, 115,
	116, 691, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 679, 0, 235, 0, 120, 121, 122, 123, 675,
	677, 301, 0, 127, 0, 124, 0, 300, 125, 692,
	126, 693, 694, 695, 0, 658, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 680, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 137, 138, 244,
	139, 306, 140, 141, 143, 144, 142, 619, 0, 648,
	676, 145, 696, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 670, 152, 153,
	154, 155, 0, 671, 156, 250, 157, 0, 158, 159,
	160, 697, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	625, 176, 0, 177, 178, 179, 180, 0, 253, 181,
	182, 664, 183, 184, 310, 185, 698, 255, 186, 0,
	192, 187, 188, 189, 191, 699, 190, 672, 0, 193,
	0, 194, 195, 196, 0, 258, 700, 701, 0, 0,
	197, 673, 674, 646, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 665, 205, 0, 206, 207, 208, 263,
	702, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	212, 213, 620, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 0, 616, 617, 0, 0, 0, 0, 618,
	86, 87, 626, 88, 0, 0, 0, 629, 667, 633,
	0, 0, 0, 89, 90, 91, 215, 682, 217, 683,
	92, 684, 685, 0, 93, 221, 222, 94, 636, 666,
	686, 687, 225, 0, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 688, 107, 689, 690, 0, 108, 0, 109, 0,
	0, 0, 681, 111, 0, 112, 0, 0, 0, 624,
	113, 114, 668, 669, 647, 0, 0, 115, 116, 691,
	0, 117, 0, 118, 0, 1282, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 301,
	0, 127, 0, 124, 0, 300, 125, 692, 126, 693,
	694, 695, 0, 658, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 143, 144, 142, 619, 0, 648, 676, 145,
	696, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 697,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 625, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 310, 185, 698, 255, 186, 0, 192, 187,
	188, 189, 191, 699, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 700, 701, 0, 0, 197, 673,
	674, 646, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 702, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	620, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	0, 616, 617, 0, 0, 0, 0, 618, 86, 87,
	626, 88, 0, 0, 0, 629, 667, 633, 0, 0,
	0, 89, 90, 91, 215, 682, 217, 683, 92, 684,
	685, 0, 93, 221, 222, 94, 636, 666, 686, 687,
	225, 0, 678, 0, 659, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 103, 0,
	660, 662, 0, 661, 663, 104, 105, 268, 106, 688,
	107, 689, 690, 0, 108, 0, 109, 0, 0, 0,
	681, 111, 0, 112, 0, 0, 0, 624, 113, 114,
	668, 669, 647, 0, 0, 115, 116, 691, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 679, 0, 235,
	0, 120, 121, 122, 123, 675, 677, 301, 0, 127,
	0, 124, 0, 300, 125, 692, 126, 693, 694, 695,
	0, 658, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 680, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	143, 144, 142, 619, 0, 648, 676, 145, 696, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 670, 152, 153, 154, 155, 0, 671,
	156, 250, 157, 0, 158, 159, 160, 697, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 625, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 664, 183, 184,
	310, 185, 698, 255, 186, 0, 192, 187, 188, 189,
	191, 699, 190, 672, 0, 193, 0, 194, 195, 196,
	0, 258, 700, 701, 0, 0, 197, 673, 674, 646,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 665,
	205, 0, 206, 207, 208, 263, 702, 0, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 620, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 616,
	617, 0, 0, 0, 0, 618, 0, 0, 626, 1225,
	0, 0, 0, 629, 651, 640, 641, 638, 639, 630,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 87, 894, 88, 0, 0, 0, 0, 667, 633,
	0, 0, 0, 89, 90, 91, 215, 682, 217, 683,
	92, 684, 685, 0, 93, 221, 222, 94, 636, 666,
	686, 687, 225, 0, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 688, 107, 689, 690, 0, 108, 0, 109, 0,
	0, 0, 681, 111, 0, 112, 0, 0, 0, 624,
	113, 114, 668, 669, 647, 0, 0, 115, 116, 691,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 301,
	0, 127, 0, 124, 0, 300, 125, 692, 126, 693,
	694, 695, 0, 658, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 143, 144, 142, 619, 0, 648, 676, 145,
	696, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 697,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 625, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 310, 185, 698, 255, 186, 0, 192, 187,
	188, 189, 191, 699, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 700, 701, 0, 0, 197, 673,
	674, 646, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 702, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	620, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	0, 616, 617, 0, 0, 0, 0, 618, 86, 87,
	626, 88, 0, 0, 0, 629, 667, 633, 0, 0,
	0, 89, 90, 91, 215, 682, 217, 683, 92, 684,
	685, 0, 93, 221, 222, 94, 636, 666, 686, 687,
	225, 0, 678, 0, 659, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 2044, 0,
	660, 662, 0, 661, 663, 104, 105, 268, 106, 688,
	107, 689, 690, 0, 108, 0, 109, 0, 0, 0,
	681, 111, 0, 112, 0, 0, 0, 624, 113, 114,
	668, 669, 647, 0, 0, 115, 116, 691, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 679, 0, 235,
	0, 120, 121, 122, 123, 675, 677, 301, 0, 127,
	0, 124, 0, 300, 125, 692, 126, 693, 694, 695,
	0, 658, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 680, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	143, 144, 142, 619, 0, 648, 676, 145, 696, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 670, 152, 153, 154, 155, 0, 671,
	156, 250, 157, 0, 158, 159, 160, 697, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 625, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 664, 183, 184,
	310, 185, 698, 255, 186, 0, 192, 187, 188, 189,
	191, 699, 190, 672, 0, 193, 0, 194, 195, 196,
	0, 258, 700, 701, 0, 0, 197, 673, 674, 646,
	198, 199, 2043, 201, 0, 0, 202, 203, 204, 665,
	205, 0, 206, 207, 208, 263, 702, 0, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 620, 0,
	651, 640, 641, 638, 639, 630, 0, 0, 0, 616,
	617, 0, 0, 0, 0, 618, 86, 87, 626, 88,
	0, 0, 0, 629, 667, 633, 0, 0, 0, 89,
	90, 91, 2042, 682, 217, 683, 92, 684, 685, 0,
	93, 221, 222, 94, 636, 666, 686, 687, 225, 0,
	678, 0, 659, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 298, 102, 2044, 0, 660, 662,
	0, 661, 663, 104, 105, 268, 106, 688, 107, 689,
	690, 0, 108, 0, 109, 0, 0, 0, 681, 111,
	0, 112, 0, 0, 0, 624, 113, 114, 668, 669,
	647, 0, 0, 115, 116, 691, 0, 117, 0, 118,
	0, 0, 299, 0, 119, 679, 0, 235, 0, 120,
	121, 122, 123, 675, 677, 301, 0, 127, 0, 124,
	0, 300, 125, 692, 126, 693, 694, 695, 0, 658,
	0, 302, 128, 303, 129, 130, 0, 132, 131, 0,
	680, 304, 133, 305, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 244, 139, 306, 140, 141, 143, 144,
	142, 619, 0, 648, 676, 145, 696, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 670, 152, 153, 154, 155, 0, 671, 156, 250,
	157, 0, 158, 159, 160, 697, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 625, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 664, 183, 184, 310, 185,
	698, 255, 186, 0, 192, 187, 188, 189, 191, 699,
	190, 672, 0, 193, 0, 194, 195, 196, 0, 258,
	700, 701, 0, 0, 197, 673, 674, 646, 198, 199,
	2043, 201, 0, 0, 202, 203, 204, 665, 205, 0,
	206, 207, 208, 263, 702, 0, 0, 209, 0, 0,
	0, 0, 210, 211, 212, 213, 620, 0, 651, 640,
	641, 638, 639, 630, 0, 0, 0, 616, 617, 0,
	0, 0, 0, 618, 86, 87, 626, 88, 0, 0,
	0, 629, 667, 633, 0, 0, 0, 89, 90, 91,
	215, 682, 217, 683, 92, 684, 685, 0, 93, 221,
	222, 94, 636, 666, 686, 687, 225, 0, 678, 0,
	659, 0, 95, 96, 97, 0, 98, 0, 99, 100,
	101, 0, 298, 102, 103, 0, 660, 662, 0, 661,
	663, 104, 105, 268, 106, 688, 107, 689, 690, 0,
	108, 0, 109, 0, 0, 0, 681, 111, 0, 112,
	0, 0, 0, 624, 113, 114, 668, 669, 647, 0,
	0, 115, 116, 691, 0, 117, 0, 118, 0, 0,
	299, 0, 119, 679, 0, 235, 0, 120, 121, 122,
	123, 675, 677, 301, 0, 127, 0, 124, 0, 300,
	125, 692, 126, 693, 694, 695, 0, 658, 0, 302,
	128, 303, 129, 130, 0, 132, 131, 0, 680, 304,
	133, 305, 0, 134, 0, 0, 135, 0, 136, 137,
	138, 244, 139, 306, 140, 141, 143, 144, 142, 619,
	0, 648, 676, 145, 696, 146, 147, 0, 148, 0,
	0, 149, 0, 0, 150, 247, 307, 151, 308, 670,
	152, 153, 154, 155, 0, 671, 156, 250, 157, 0,
	158, 159, 160, 697, 161, 162, 0, 163, 164, 165,
	166, 167, 169, 170, 168, 171, 172, 0, 173, 309,
	174, 175, 625, 176, 0, 177, 178, 179, 180, 0,
	253, 181, 182, 664, 183, 184, 310, 185, 698, 255,
	186, 0, 192, 187, 188, 189, 191, 699, 190, 672,
	0, 193, 0, 194, 195, 196, 0, 258, 700, 701,
	0, 0, 197, 673, 674, 646, 198, 199, 200, 201,
	0, 0, 202, 203, 204, 665, 205, 0, 206, 207,
	208, 263, 702, 0, 0, 209, 0, 0, 0, 0,
	210, 211, 212, 213, 620, 0, 1254, 640, 641, 638,
	639, 630, 0, 0, 0, 616, 617, 0, 0, 0,
	0, 618, 86, 87, 626, 88, 0, 0, 0, 629,
	667, 633, 0, 0, 0, 89, 90, 91, 215, 682,
	217, 683, 92, 684, 685, 0, 93, 221, 222, 94,
	636, 666, 686, 687, 225, 0, 678, 0, 659, 0,
	95, 96, 97, 0, 98, 0, 99, 100, 101, 0,
	298, 102, 103, 0, 660, 662, 0, 661, 663, 104,
	105, 268, 106, 688, 1257, 689, 690, 0, 108, 0,
	109, 0, 0, 0, 681, 111, 0, 112, 0, 0,
	0, 624, 113, 114, 668, 669, 647, 0, 0, 115,
	116, 691, 0, 117, 0, 118, 0, 0, 299, 0,
	119, 679, 0, 235, 0, 120, 121, 1258, 123, 675,
	677, 301, 0, 127, 0, 124, 0, 300, 125, 692,
	126, 693, 694, 695, 0, 658, 0, 302, 128, 303,
	129, 130, 0, 132, 131, 0, 680, 304, 133, 305,
	0, 134, 0, 0, 135, 0, 136, 1259, 1256, 244,
	139, 306, 140, 141, 143, 144, 142, 619, 0, 648,
	676, 145, 696, 146, 147, 0, 148, 0, 0, 149,
	0, 0, 150, 247, 307, 151, 308, 670, 152, 153,
	154, 155, 0, 671, 156, 250, 157, 0, 158, 159,
	160, 697, 161, 162, 0, 163, 164, 165, 166, 167,
	169, 170, 168, 171, 172, 0, 173, 309, 174, 175,
	625, 176, 0, 177, 178, 179, 1260, 0, 253, 181,
	182, 664, 183, 184, 310, 185, 698, 255, 186, 0,
	192, 187, 188, 189, 191, 699, 190, 672, 0, 193,
	0, 194, 195, 196, 0, 258, 700, 701, 0, 0,
	197, 673, 674, 646, 198, 199, 200, 201, 0, 0,
	202, 203, 204, 665, 205, 0, 206, 207, 208, 263,
	702, 0, 0, 209, 0, 0, 0, 0, 210, 211,
	1255, 213, 620, 0, 651, 640, 641, 638, 639, 630,
	0, 0, 0, 616, 617, 0, 0, 0, 0, 618,
	86, 87, 626, 88, 0, 0, 0, 629, 667, 633,
	0, 0, 0, 89, 90, 91, 215, 682, 217, 683,
	92, 684, 685, 0, 93, 221, 222, 94, 636, 666,
	686, 687, 225, 0, 678, 0, 659, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 660, 662, 0, 661, 663, 104, 105, 268,
	106, 688, 107, 689, 690, 0, 108, 0, 109, 0,
	0, 0, 681, 111, 0, 112, 0, 0, 0, 624,
	113, 114, 668, 669, 647, 0, 0, 115, 116, 691,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 679,
	0, 235, 0, 120, 121, 122, 123, 675, 677, 301,
	0, 127, 0, 124, 0, 300, 125, 692, 126, 693,
	694, 695, 0, 658, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 680, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 143, 144, 142, 0, 0, 648, 676, 145,
	696, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 670, 152, 153, 154, 155,
	0, 671, 156, 250, 157, 0, 158, 159, 160, 697,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 1272, 176,
	0, 177, 178, 179, 180, 0, 253, 181, 182, 664,
	183, 184, 310, 185, 698, 255, 186, 0, 192, 187,
	188, 189, 191, 699, 190, 672, 0, 193, 0, 194,
	195, 196, 0, 258, 700, 701, 0, 0, 197, 673,
	674, 646, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 665, 205, 0, 206, 207, 208, 263, 702, 0,
	0, 209, 0, 0, 0, 0, 210, 211, 212, 213,
	0, 0, 651, 640, 641, 638, 639, 630, 0, 0,
	0, 1268, 1269, 0, 0, 0, 0, 1270, 86, 87,
	1271, 88, 0, 0, 0, 629, 667, 633, 0, 0,
	0, 89, 90, 91, 0, 682, 217, 683, 92, 684,
	685, 0, 93, 221, 222, 94, 636, 666, 686, 687,
	225, 0, 678, 0, 659, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 2044, 0,
	660, 662, 0, 661, 663, 104, 105, 268, 106, 688,
	107, 689, 690, 0, 108, 0, 109, 0, 0, 0,
	681, 111, 0, 112, 0, 0, 0, 624, 113, 114,
	668, 669, 647, 0, 0, 115, 116, 691, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 679, 0, 235,
	0, 120, 121, 122, 123, 675, 677, 0, 0, 127,
	0, 124, 0, 300, 125, 692, 126, 693, 694, 695,
	0, 658, 0, 0, 128, 303, 129, 130, 0, 132,
	131, 0, 680, 304, 133, 0, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	143, 144, 142, 619, 0, 648, 676, 145, 696, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 670, 152, 153, 154, 155, 0, 671,
	156, 250, 157, 0, 158, 159, 160, 697, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 625, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 664, 183, 184,
	0, 185, 698, 255, 186, 0, 192, 187, 188, 189,
	191, 699, 190, 672, 0, 193, 0, 194, 195, 196,
	0, 258, 700, 701, 0, 0, 197, 673, 674, 646,
	198, 199, 2043, 201, 0, 0, 202, 203, 204, 665,
	205, 0, 206, 207, 208, 263, 702, 0, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 0, 0,
	651, 640, 641, 638, 639, 630, 0, 0, 0, 616,
	617, 0, 0, 0, 0, 618, 86, 87, 626, 88,
	0, 0, 0, 629, 667, 633, 0, 0, 0, 89,
	90, 91, 215, 682, 217, 683, 92, 684, 685, 0,
	93, 221, 222, 94, 0, 666, 686, 687, 225, 0,
	678, 0, 659, 0, 95, 96, 97, 0, 98, 0,
	99, 100, 101, 0, 298, 102, 103, 0, 660, 662,
	0, 661, 663, 104, 105, 268, 106, 688, 107, 689,
	690, 0, 108, 0, 109, 0, 0, 0, 681, 111,
	0, 112, 0, 0, 0, 230, 113, 114, 668, 669,
	647, 0, 0, 115, 116, 691, 0, 117, 0, 118,
	0, 0, 299, 0, 119, 679, 0, 235, 0, 120,
	121, 122, 123, 675, 677, 301, 0, 127, 0, 124,
	0, 300, 125, 692, 126, 693, 694, 695, 0, 658,
	0, 302, 128, 303, 129, 130, 0, 132, 131, 0,
	680, 304, 133, 305, 0, 134, 0, 0, 135, 0,
	136, 137, 138, 244, 139, 306, 140, 141, 143, 144,
	142, 0, 0, 648, 676, 145, 696, 146, 147, 0,
	148, 0, 0, 149, 0, 0, 150, 247, 307, 151,
	308, 670, 152, 153, 154, 155, 0, 671, 156, 250,
	157, 0, 158, 159, 160, 697, 161, 162, 0, 163,
	164, 165, 166, 167, 169, 170, 168, 171, 172, 0,
	173, 309, 174, 175, 1272, 176, 0, 177, 178, 179,
	180, 0, 253, 181, 182, 664, 183, 184, 310, 185,
	698, 255, 186, 0, 192, 187, 188, 189, 191, 699,
	190, 672, 0, 193, 0, 194, 195, 196, 0, 258,
	700, 701, 0, 0, 197, 673, 674, 646, 198, 199,
	200, 201, 651, 0, 202, 203, 204, 665, 205, 0,
	206, 207, 208, 263, 702, 0, 0, 209, 86, 87,
	0, 88, 210, 211, 212, 213, 667, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 1271, 666, 223, 224,
	225, 629, 678, 0, 659, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 103, 0,
	660, 662, 0, 661, 663, 104, 105, 268, 106, 227,
	107, 228, 229, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	668, 669, 0, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 679, 0, 235,
	0, 120, 121, 122, 123, 675, 677, 301, 0, 127,
	0, 124, 0, 300, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 680, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	143, 144, 142, 0, 0, 0, 676, 145, 246, 146,
	147, 0, 148, 0, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 670, 152, 153, 154, 155, 0, 671,
	156, 250, 157, 0, 158, 159, 160, 251, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 664, 183, 184,
	310, 185, 254, 255, 186, 0, 192, 187, 188, 189,
	191, 256, 190, 672, 0, 193, 0, 194, 195, 196,
	0, 258, 259, 260, 0, 0, 197, 673, 674, 0,
	198, 199, 200, 201, 527, 0, 202, 203, 204, 665,
	205, 0, 206, 207, 208, 263, 264, 0, 0, 209,
	86, 87, 0, 88, 210, 211, 212, 213, 214, 0,
	0, 0, 0, 89, 90, 91, 215, 216, 217, 218,
	92, 219, 220, 0, 93, 221, 222, 94, 1538, 0,
	223, 224, 225, 0, 226, 0, 297, 0, 95, 96,
	97, 0, 98, 0, 99, 100, 101, 0, 298, 102,
	103, 0, 0, 0, 0, 0, 0, 104, 105, 268,
	106, 227, 107, 228, 229, 0, 108, 0, 109, 0,
	0, 0, 110, 111, 0, 112, 0, 0, 0, 230,
	113, 114, 231, 232, 0, 0, 0, 115, 116, 233,
	0, 117, 0, 118, 0, 0, 299, 0, 119, 234,
	0, 235, 0, 120, 121, 122, 123, 236, 237, 301,
	0, 127, 0, 124, 0, 300, 125, 238, 126, 239,
	240, 241, 0, 242, 0, 302, 128, 303, 129, 130,
	0, 132, 131, 0, 243, 304, 133, 305, 0, 134,
	0, 0, 135, 0, 136, 137, 138, 244, 139, 306,
	140, 141, 143, 144, 142, 0, 0, 0, 245, 145,
	246, 146, 147, 0, 148, 0, 0, 149, 0, 0,
	150, 247, 307, 151, 308, 248, 152, 153, 154, 155,
	0, 249, 156, 250, 157, 0, 158, 159, 160, 251,
	161, 162, 0, 163, 164, 165, 166, 167, 169, 170,
	168, 171, 172, 0, 173, 309, 174, 175, 252, 176,
	0, 177, 178, 179, 180, 67, 253, 181, 182, 0,
	183, 184, 310, 185, 254, 255, 186, 0, 192, 187,
	188, 189, 191, 256, 190, 257, 0, 193, 69, 194,
	195, 196, 0, 258, 259, 260, 0, 0, 197, 261,
	262, 0, 198, 199, 200, 201, 0, 0, 202, 203,
	204, 0, 205, 0, 206, 207, 208, 531, 264, 0,
	0, 209, 0, 0, 0, 65, 210, 211, 212, 213,
	0, 66, 527, 736, 0, 844, 841, 836, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 87,
	64, 88, 0, 0, 0, 0, 214, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 0, 0, 223, 224,
	225, 0, 226, 0, 297, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 268, 106, 227,
	107, 228, 229, 847, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	231, 232, 838, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 234, 0, 235,
	0, 120, 121, 122, 123, 236, 237, 301, 0, 127,
	0, 124, 0, 300, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 243, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	143, 144, 142, 0, 0, 0, 245, 145, 246, 146,
	147, 0, 148, 839, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 248, 152, 153, 154, 155, 0, 249,
	156, 250, 157, 0, 158, 159, 160, 251, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 0, 183, 184,
	310, 185, 254, 255, 186, 0, 192, 187, 188, 189,
	191, 256, 190, 257, 0, 193, 0, 194, 195, 196,
	0, 258, 259, 260, 0, 0, 197, 261, 262, 837,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 0,
	205, 0, 206, 207, 208, 263, 264, 527, 736, 209,
	844, 841, 836, 0, 210, 211, 212, 213, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 845,
	842, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 297,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 298, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 832, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 838, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 299,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 301, 0, 127, 0, 124, 0, 300, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 302, 128,
	303, 129, 130, 0, 132, 131, 0, 243, 304, 133,
	305, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 306, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 839, 0,
	149, 0, 0, 150, 247, 307, 151, 308, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 309, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 310, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 837, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 527, 736, 209, 844, 841, 836, 0, 210,
	211, 212, 213, 0, 0, 0, 0, 0, 86, 87,
	0, 88, 0, 0, 845, 842, 214, 0, 0, 0,
	0, 89, 90, 91, 215, 216, 217, 218, 92, 219,
	220, 0, 93, 221, 222, 94, 0, 0, 223, 224,
	225, 0, 226, 0, 297, 0, 95, 96, 97, 0,
	98, 0, 99, 100, 101, 0, 298, 102, 103, 0,
	0, 0, 0, 0, 0, 104, 105, 268, 106, 227,
	107, 228, 229, 0, 108, 0, 109, 0, 0, 0,
	110, 111, 0, 112, 0, 0, 0, 230, 113, 114,
	231, 232, 838, 0, 0, 115, 116, 233, 0, 117,
	0, 118, 0, 0, 299, 0, 119, 234, 0, 235,
	0, 120, 121, 122, 123, 236, 237, 301, 0, 127,
	0, 124, 0, 300, 125, 238, 126, 239, 240, 241,
	0, 242, 0, 302, 128, 303, 129, 130, 0, 132,
	131, 0, 243, 304, 133, 305, 0, 134, 0, 0,
	135, 0, 136, 137, 138, 244, 139, 306, 140, 141,
	143, 144, 142, 0, 0, 0, 245, 145, 246, 146,
	147, 0, 148, 839, 0, 149, 0, 0, 150, 247,
	307, 151, 308, 248, 152, 153, 154, 155, 0, 249,
	156, 250, 157, 0, 158, 159, 160, 251, 161, 162,
	0, 163, 164, 165, 166, 167, 169, 170, 168, 171,
	172, 0, 173, 309, 174, 175, 252, 176, 0, 177,
	178, 179, 180, 0, 253, 181, 182, 0, 183, 184,
	310, 185, 254, 255, 186, 0, 192, 187, 188, 189,
	191, 256, 190, 257, 0, 193, 0, 194, 195, 196,
	0, 258, 259, 260, 0, 0, 197, 261, 262, 837,
	198, 199, 200, 201, 0, 0, 202, 203, 204, 0,
	205, 0, 206, 207, 208, 263, 264, 83, 0, 209,
	0, 0, 0, 0, 210, 211, 212, 213, 0, 0,
	0, 0, 0, 86, 87, 0, 88, 0, 0, 845,
	842, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 481,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 67, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 69, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	531, 264, 0, 0, 209, 83, 0, 0, 65, 210,
	211, 212, 213, 0, 66, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 88, 0, 0, 0, 0, 214,
	0, 1150, 0, 1155, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 67, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 69,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 531, 264,
	0, 0, 209, 83, 0, 0, 65, 210, 211, 212,
	213, 0, 66, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 0, 0, 0, 214, 0, 0,
	0, 64, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 481, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 0, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 83, 0, 0, 0, 210, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 0, 214, 0, 1150, 0, 1155,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 0, 140, 141, 143,
	144, 142, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 744, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 1063,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 1661, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 0, 0, 0, 0, 210,
	211, 212, 213, 651, 640, 641, 638, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 713, 0, 0, 0, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 682, 217, 683, 92,
	684, 685, 0, 93, 221, 222, 94, 0, 0, 686,
	687, 225, 0, 226, 0, 297, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 298, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	688, 107, 689, 690, 0, 108, 0, 109, 0, 0,
	0, 681, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 647, 0, 0, 115, 116, 691, 0,
	117, 0, 118, 0, 0, 299, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 301, 0,
	127, 0, 124, 0, 300, 125, 692, 126, 693, 694,
	695, 0, 658, 0, 302, 128, 303, 129, 130, 0,
	132, 131, 0, 243, 304, 133, 305, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 306, 140,
	141, 143, 144, 142, 0, 0, 648, 245, 145, 696,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 307, 151, 308, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 697, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 309, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 310, 185, 698, 255, 186, 0, 192, 187, 188,
	189, 191, 699, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 700, 701, 0, 0, 197, 261, 262,
	646, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 702, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	79, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 78,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 527, 736, 0, 0, 210, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	87, 0, 88, 0, 82, 0, 0, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 297, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 298, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 299, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 301, 0,
	127, 0, 124, 0, 300, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 302, 128, 303, 129, 130, 0,
	132, 131, 0, 243, 304, 133, 305, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 306, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 307, 151, 308, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 309, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 310, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 0, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 527, 209, 0, 0, 0, 0, 210, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 86, 87, 0,
	88, 0, 0, 0, 82, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 297, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 298, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 299, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 301, 0, 127, 0,
	124, 0, 300, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 302, 128, 303, 129, 130, 0, 132, 131,
	0, 243, 304, 133, 305, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 306, 140, 141, 143,
	144, 142, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 307,
	151, 308, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 309, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 310,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 1024, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 1022, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 1126, 0, 115, 116, 233, 0,
	117, 0, 118, 1027, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 1124, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 1026, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 1125, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 1024, 226, 0, 0, 1019, 95,
	96, 97, 0, 98, 1022, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 1027, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 1018, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 1026, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 1025, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 1628, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 0, 140, 141, 143, 144, 142,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 481, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 769, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 0, 140, 141, 143,
	144, 142, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 481, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 539, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 493, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 481, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	486, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 481,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 396, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 0, 140, 141, 143, 144, 142,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 395,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 0, 140, 141, 143,
	144, 142, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 1318, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 1316, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	1305, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 885, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 0, 140, 141, 143, 144, 142,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 0, 140, 141, 143,
	144, 142, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 410,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 754,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 0,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 591, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	586, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 545, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 236, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 421, 0, 140, 141, 143, 144, 142,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 420, 259,
	260, 0, 0, 416, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 236, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 421, 0, 140, 141, 143,
	144, 142, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	420, 259, 260, 0, 0, 416, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 523, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 161,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 520, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	134, 0, 0, 135, 0, 136, 137, 138, 244, 139,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 252,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 182,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 258, 259, 260, 0, 0, 197,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	517, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 154, 155, 0, 249, 156, 250, 157, 0, 158,
	159, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 176, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 83,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 86, 87, 0, 88, 210,
	211, 212, 213, 214, 0, 0, 0, 0, 89, 90,
	91, 215, 216, 217, 218, 92, 219, 220, 0, 93,
	221, 222, 94, 0, 0, 223, 224, 225, 0, 226,
	0, 0, 0, 95, 96, 97, 0, 98, 0, 99,
	100, 101, 0, 0, 102, 103, 0, 0, 0, 0,
	0, 0, 104, 105, 268, 106, 227, 107, 228, 229,
	0, 108, 0, 109, 0, 0, 0, 110, 111, 0,
	112, 0, 0, 0, 230, 113, 114, 231, 232, 0,
	0, 0, 115, 116, 233, 0, 117, 0, 118, 0,
	0, 0, 0, 119, 234, 0, 235, 0, 120, 121,
	122, 123, 515, 237, 0, 0, 127, 0, 124, 0,
	0, 125, 238, 126, 239, 240, 241, 0, 242, 0,
	0, 128, 0, 129, 130, 0, 132, 131, 0, 243,
	0, 133, 0, 0, 134, 0, 0, 135, 0, 136,
	137, 138, 244, 139, 0, 140, 141, 143, 144, 142,
	0, 0, 0, 245, 145, 246, 146, 147, 0, 148,
	0, 0, 149, 0, 0, 150, 247, 0, 151, 0,
	248, 152, 153, 154, 155, 0, 249, 156, 250, 157,
	0, 158, 159, 160, 251, 161, 162, 0, 163, 164,
	165, 166, 167, 169, 170, 168, 171, 172, 0, 173,
	0, 174, 175, 252, 176, 0, 177, 178, 179, 180,
	0, 253, 181, 182, 0, 183, 184, 0, 185, 254,
	255, 186, 0, 192, 187, 188, 189, 191, 256, 190,
	257, 0, 193, 0, 194, 195, 196, 0, 258, 259,
	260, 0, 0, 197, 261, 262, 0, 198, 199, 200,
	201, 83, 0, 202, 203, 204, 0, 205, 0, 206,
	207, 208, 263, 264, 0, 0, 209, 86, 87, 0,
	88, 210, 211, 212, 213, 214, 0, 0, 0, 0,
	89, 90, 91, 215, 216, 217, 218, 92, 219, 220,
	0, 93, 221, 222, 94, 0, 0, 223, 224, 225,
	0, 226, 0, 0, 0, 95, 96, 97, 0, 98,
	0, 99, 100, 101, 0, 0, 102, 103, 0, 0,
	0, 0, 0, 0, 104, 105, 268, 106, 227, 107,
	228, 229, 0, 108, 0, 109, 0, 0, 0, 110,
	111, 0, 112, 0, 0, 0, 230, 113, 114, 231,
	232, 0, 0, 0, 115, 116, 233, 0, 117, 0,
	118, 0, 0, 0, 0, 119, 234, 0, 235, 0,
	120, 121, 122, 123, 489, 237, 0, 0, 127, 0,
	124, 0, 0, 125, 238, 126, 239, 240, 241, 0,
	242, 0, 0, 128, 0, 129, 130, 0, 132, 131,
	0, 243, 0, 133, 0, 0, 134, 0, 0, 135,
	0, 136, 137, 138, 244, 139, 0, 140, 141, 143,
	144, 142, 0, 0, 0, 245, 145, 246, 146, 147,
	0, 148, 0, 0, 149, 0, 0, 150, 247, 0,
	151, 0, 248, 152, 153, 154, 155, 0, 249, 156,
	250, 157, 0, 158, 159, 160, 251, 161, 162, 0,
	163, 164, 165, 166, 167, 169, 170, 168, 171, 172,
	0, 173, 0, 174, 175, 252, 176, 0, 177, 178,
	179, 180, 0, 253, 181, 182, 0, 183, 184, 0,
	185, 254, 255, 186, 0, 192, 187, 188, 189, 191,
	256, 190, 257, 0, 193, 0, 194, 195, 196, 0,
	258, 259, 260, 0, 0, 197, 261, 262, 0, 198,
	199, 200, 201, 83, 0, 202, 203, 204, 0, 205,
	0, 206, 207, 208, 263, 264, 0, 0, 209, 86,
	87, 0, 88, 210, 211, 212, 213, 214, 0, 0,
	0, 0, 89, 90, 91, 215, 216, 217, 218, 92,
	219, 220, 0, 93, 221, 222, 94, 0, 0, 223,
	224, 225, 0, 226, 0, 0, 0, 95, 96, 97,
	0, 98, 0, 99, 100, 101, 0, 0, 102, 103,
	0, 0, 0, 0, 0, 0, 104, 105, 268, 106,
	227, 107, 228, 229, 0, 108, 0, 109, 0, 0,
	0, 110, 111, 0, 112, 0, 0, 0, 230, 113,
	114, 231, 232, 0, 0, 0, 115, 116, 233, 0,
	117, 0, 118, 0, 0, 0, 0, 119, 234, 0,
	235, 0, 120, 121, 122, 123, 236, 237, 0, 0,
	127, 0, 124, 0, 0, 125, 238, 126, 239, 240,
	241, 0, 242, 0, 0, 128, 0, 129, 130, 0,
	132, 131, 0, 243, 0, 133, 0, 0, 134, 0,
	0, 135, 0, 136, 137, 138, 244, 139, 0, 140,
	141, 143, 144, 142, 0, 0, 0, 245, 145, 246,
	146, 147, 0, 148, 0, 0, 149, 0, 0, 150,
	247, 0, 151, 0, 248, 152, 153, 154, 155, 0,
	249, 156, 250, 157, 0, 158, 159, 160, 251, 470,
	162, 0, 163, 164, 165, 166, 167, 169, 170, 168,
	171, 172, 0, 173, 0, 174, 175, 252, 176, 0,
	177, 178, 179, 180, 0, 253, 181, 182, 0, 183,
	184, 0, 185, 254, 255, 186, 0, 192, 187, 188,
	189, 191, 256, 190, 257, 0, 193, 0, 194, 195,
	196, 0, 258, 259, 260, 0, 0, 197, 261, 262,
	0, 198, 199, 200, 201, 83, 0, 202, 203, 204,
	0, 205, 0, 206, 207, 208, 263, 264, 0, 0,
	209, 86, 87, 0, 88, 210, 211, 212, 213, 214,
	0, 0, 0, 0, 89, 90, 91, 215, 216, 217,
	218, 92, 219, 220, 0, 93, 221, 222, 94, 0,
	0, 223, 224, 225, 0, 226, 0, 0, 0, 95,
	96, 97, 0, 98, 0, 99, 100, 101, 0, 0,
	102, 103, 0, 0, 0, 0, 0, 0, 104, 105,
	268, 106, 227, 107, 228, 229, 0, 108, 0, 109,
	0, 0, 0, 110, 111, 0, 112, 0, 0, 0,
	230, 113, 114, 231, 232, 0, 0, 0, 115, 116,
	233, 0, 117, 0, 118, 0, 0, 0, 0, 119,
	234, 0, 235, 0, 120, 121, 122, 123, 236, 237,
	0, 0, 127, 0, 124, 0, 0, 125, 238, 126,
	239, 240, 241, 0, 242, 0, 0, 128, 0, 129,
	130, 0, 132, 131, 0, 243, 0, 133, 0, 0,
	413, 0, 0, 135, 0, 136, 137, 138, 244, 421,
	0, 140, 141, 143, 144, 142, 0, 0, 0, 245,
	145, 246, 146, 147, 0, 148, 0, 0, 149, 0,
	0, 150, 247, 0, 151, 0, 248, 152, 153, 154,
	155, 0, 249, 156, 250, 157, 0, 158, 159, 160,
	251, 161, 162, 0, 163, 164, 165, 166, 167, 169,
	170, 168, 171, 172, 0, 173, 0, 174, 175, 415,
	176, 0, 177, 178, 179, 180, 0, 253, 181, 414,
	0, 183, 184, 0, 185, 254, 255, 186, 0, 192,
	187, 188, 189, 191, 256, 190, 257, 0, 193, 0,
	194, 195, 196, 0, 420, 259, 260, 0, 0, 416,
	261, 262, 0, 198, 199, 200, 201, 83, 0, 202,
	203, 204, 0, 205, 0, 206, 207, 208, 263, 264,
	0, 0, 209, 86, 87, 0, 88, 210, 211, 212,
	213, 214, 0, 0, 0, 0, 89, 90, 91, 215,
	216, 217, 218, 92, 219, 220, 0, 93, 221, 222,
	94, 0, 0, 223, 224, 225, 0, 226, 0, 0,
	0, 95, 96, 97, 0, 98, 0, 99, 100, 101,
	0, 0, 102, 103, 0, 0, 0, 0, 0, 0,
	104, 105, 268, 106, 227, 107, 228, 229, 0, 108,
	0, 109, 0, 0, 0, 110, 111, 0, 112, 0,
	0, 0, 230, 113, 114, 231, 232, 0, 0, 0,
	115, 116, 233, 0, 117, 0, 118, 0, 0, 0,
	0, 119, 234, 0, 235, 0, 120, 121, 122, 123,
	236, 237, 0, 0, 127, 0, 124, 0, 0, 125,
	238, 126, 239, 240, 241, 0, 242, 0, 0, 128,
	0, 129, 130, 0, 132, 131, 0, 243, 0, 133,
	0, 0, 134, 0, 0, 135, 0, 136, 137, 138,
	244, 139, 0, 140, 141, 143, 144, 142, 0, 0,
	0, 245, 145, 246, 146, 147, 0, 148, 0, 0,
	149, 0, 0, 150, 247, 0, 151, 0, 248, 152,
	153, 0, 155, 0, 249, 156, 250, 157, 0, 158,
	0, 160, 251, 161, 162, 0, 163, 164, 165, 166,
	167, 169, 170, 168, 171, 172, 0, 173, 0, 174,
	175, 252, 0, 0, 177, 178, 179, 180, 0, 253,
	181, 182, 0, 183, 184, 0, 185, 254, 255, 186,
	0, 192, 187, 188, 189, 191, 256, 190, 257, 0,
	193, 0, 194, 195, 196, 0, 258, 259, 260, 0,
	0, 197, 261, 262, 0, 198, 199, 200, 201, 0,
	0, 202, 203, 204, 0, 205, 0, 206, 207, 208,
	263, 264, 0, 0, 209, 0, 0, 0, 0, 210,
	211, 212, 213, 909, 910, 0, 929, 930, 931, 939,
	940, 941, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 0, 0, 912, 909, 910, 943,
	929, 930, 931, 939, 940, 941, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 911, 0,
	912, 0, 0, 943, 926, 0, 0, 0, 0, 909,
	910, 0, 929, 930, 931, 939, 940, 941, 0, 0,
	0, 0, 911, 0, 0, 932, 0, 0, 926, 0,
	0, 0, 912, 0, 0, 943, 0, 0, 0, 0,
	0, 909, 910, 0, 929, 930, 931, 939, 940, 941,
	0, 0, 0, 917, 911, 0, 0, 932, 0, 0,
	926, 0, 0, 0, 912, 0, 0, 943, 0, 0,
	0, 0, 936, 944, 0, 0, 0, 917, 0, 0,
	0, 0, 0, 0, 0, 0, 911, 0, 942, 0,
	0, 0, 926, 0, 0, 0, 936, 944, 0, 0,
	934, 0, 0, 0, 0, 0, 927, 0, 0, 917,
	0, 0, 942, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 934, 0, 0, 0, 936, 944,
	927, 933, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 0, 0, 942, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 933, 934, 0, 0, 0,
	936, 944, 927, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 933, 934, 0,
	0, 0, 0, 0, 927, 0, 0, 928, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 933,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 928,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 937, 0, 935, 0, 0, 923, 924, 925, 0,
	922, 919, 920, 921, 913, 914, 915, 916, 918, 0,
	938, 928, 0, 0, 1986, 0, 0, 935, 0, 0,
	923, 924, 925, 937, 922, 919, 920, 921, 913, 914,
	915, 916, 918, 0, 938, 0, 0, 0, 1984, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 935,
	0, 0, 923, 924, 925, 0, 922, 919, 920, 921,
	913, 914, 915, 916, 918, 0, 938, 0, 0, 0,
	1931, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 935, 0, 0, 923, 924, 925, 0, 922, 919,
	920, 921, 913, 914, 915, 916, 918, 0, 938, 0,
	909, 910, 1926, 929, 930, 931, 939, 940, 941, 0,
	0, 0, 0, 0, 0, 0, 932, 0, 0, 0,
	0, 0, 0, 912, 909, 910, 943, 929, 930, 931,
	939, 940, 941, 0, 0, 0, 0, 0, 0, 0,
	932, 0, 0, 0, 0, 911, 0, 912, 0, 0,
	943, 926, 0, 0, 0, 0, 909, 910, 0, 929,
	930, 931, 939, 940, 941, 0, 0, 0, 0, 911,
	0, 0, 932, 0, 0, 926, 0, 0, 0, 912,
	0, 0, 943, 0, 0, 0, 0, 0, 909, 910,
	0, 929, 930, 931, 939, 940, 941, 0, 0, 0,
	917, 911, 0, 0, 932, 0, 0, 926, 0, 0,
	0, 912, 0, 0, 943, 0, 0, 0, 0, 936,
	944, 0, 0, 0, 917, 0, 0, 0, 0, 0,
	0, 0, 0, 911, 0, 942, 0, 0, 0, 926,
	0, 0, 0, 936, 944, 0, 0, 934, 0, 0,
	0, 0, 0, 927, 0, 0, 917, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 934, 0, 0, 0, 936, 944, 927, 933, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 917, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 933, 934, 0, 0, 0, 936, 944, 927,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 933, 934, 0, 0, 0, 0,
	0, 927, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 928, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	935, 0, 0, 923, 924, 925, 0, 922, 919, 920,
	921, 913, 914, 915, 916, 918, 0, 938, 928, 0,
	0, 1922, 0, 0, 935, 0, 0, 923, 924, 925,
	937, 922, 919, 920, 921, 913, 914, 915, 916, 918,
	0, 938, 0, 0, 0, 1864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 935, 0, 0, 923,
	924, 925, 0, 922, 919, 920, 921, 913, 914, 915,
	916, 918, 0, 938, 0, 0, 0, 1842, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 923, 924, 925, 0, 922, 919, 920, 921, 913,
	914, 915, 916, 918, 0, 938, 0, 909, 910, 1841,
	929, 930, 931, 939, 940, 941, 0, 0, 0, 0,
	0, 0, 0, 932, 0, 0, 0, 0, 0, 0,
	912, 909, 910, 943, 929, 930, 931, 939, 940, 941,
	0, 0, 0, 0, 0, 0, 0, 932, 0, 0,
	0, 0, 911, 0, 912, 0, 0, 943, 926, 0,
	0, 0, 0, 909, 910, 0, 929, 930, 931, 939,
	940, 941, 0, 0, 0, 0, 911, 0, 0, 932,
	0, 0, 926, 0, 0, 0, 912, 0, 0, 943,
	0, 0, 0, 0, 0, 909, 910, 0, 929, 930,
	931, 939, 940, 941, 0, 0, 0, 917, 911, 0,
	0, 932, 0, 0, 926, 0, 0, 0, 912, 0,
	0, 943, 0, 0, 0, 0, 936, 944, 0, 0,
	0, 917, 0, 0, 0, 0, 0, 0, 0, 0,
	911, 0, 942, 0, 0, 0, 926, 0, 0, 0,
	936, 944, 0, 0, 934, 0, 0, 0, 0, 0,
	927, 0, 0, 917, 0, 0, 942, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 934, 0,
	0, 0, 936, 944, 927, 933, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 917, 0, 0, 942, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 933,
	934, 0, 0, 0, 936, 944, 927, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 928, 0, 0,
	942, 0, 0, 0, 0, 0, 0, 0, 0, 937,
	0, 933, 934, 0, 0, 0, 0, 0, 927, 0,
	0, 928, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 937, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 933, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 928, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 937, 0, 935, 0, 0,
	923, 924, 925, 0, 922, 919, 920, 921, 913, 914,
	915, 916, 918, 0, 938, 928, 0, 0, 1730, 0,
	0, 935, 0, 0, 923, 924, 925, 937, 922, 919,
	920, 921, 913, 914, 915, 916, 918, 0, 938, 0,
	0, 0, 1664, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 935, 0, 0, 923, 924, 925, 0,
	922, 919, 920, 921, 913, 914, 915, 916, 918, 0,
	938, 0, 0, 0, 1648, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 935, 0, 0, 923, 924,
	925, 0, 922, 919, 920, 921, 913, 914, 915, 916,
	918, 0, 938, 0, 909, 910, 1226, 929, 930, 931,
	939, 940, 941, 0, 0, 0, 0, 0, 0, 0,
	932, 0, 0, 0, 0, 0, 0, 912, 909, 910,
	943, 929, 930, 931, 939, 940, 941, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 911,
	0, 912, 0, 0, 943, 926, 0, 0, 0, 0,
	909, 910, 0, 929, 930, 931, 939, 940, 941, 0,
	0, 0, 0, 911, 0, 0, 932, 0, 0, 926,
	0, 0, 0, 912, 0, 0, 943, 0, 0, 0,
	0, 0, 909, 910, 0, 929, 930, 931, 939, 940,
	941, 0, 0, 0, 917, 911, 0, 0, 932, 0,
	0, 926, 0, 1142, 0, 912, 0, 0, 943, 0,
	0, 0, 0, 936, 944, 0, 0, 0, 917, 2065,
	0, 0, 0, 0, 0, 0, 0, 911, 0, 942,
	0, 0, 0, 926, 0, 0, 0, 936, 944, 0,
	0, 934, 0, 0, 0, 0, 0, 927, 0, 0,
	917, 0, 1504, 942, 0, 1503, 0, 0, 0, 0,
	0, 1143, 0, 0, 0, 934, 0, 0, 0, 936,
	944, 927, 933, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 917, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 933, 934, 0, 0,
	0, 936, 944, 927, 0, 0, 0, 0, 0, 0,
	2064, 0, 0, 0, 928, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 933, 934,
	0, 0, 0, 0, 0, 927, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	933, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	928, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 937, 0, 935, 0, 0, 923, 924, 925,
	0, 922, 919, 920, 921, 913, 914, 915, 916, 918,
	0, 938, 928, 1439, 0, 0, 0, 0, 935, 0,
	0, 923, 924, 925, 937, 922, 919, 920, 921, 913,
	914, 915, 916, 918, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 0, 923, 924, 925, 0, 922, 919, 920,
	921, 913, 914, 915, 916, 918, 0, 938, 0, 0,
	0, 0, 0, 0, 1472, 1473, 0, 1490, 1491, 1492,
	0, 0, 935, 0, 0, 923, 924, 925, 0, 922,
	919, 920, 921, 913, 914, 915, 916, 918, 947, 938,
	0, 0, 0, 0, 909, 910, 0, 929, 930, 931,
	939, 940, 941, 0, 0, 0, 0, 0, 0, 0,
	932, 0, 0, 0, 946, 1487, 0, 912, 909, 910,
	943, 929, 930, 931, 939, 940, 941, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 0, 0, 911,
	0, 912, 0, 0, 943, 926, 0, 0, 0, 0,
	0, 0, 0, 0, 909, 910, 0, 929, 930, 931,
	939, 940, 941, 911, 1478, 0, 0, 0, 0, 926,
	932, 0, 0, 0, 0, 0, 0, 912, 0, 0,
	943, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 917, 0, 0, 0, 0, 911,
	0, 0, 0, 0, 0, 926, 0, 0, 0, 0,
	0, 0, 0, 936, 944, 0, 0, 1488, 917, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 0, 936, 944, 0,
	0, 934, 0, 0, 0, 0, 0, 927, 0, 0,
	0, 0, 0, 942, 917, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 934, 0, 0, 0, 0,
	0, 927, 933, 936, 944, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 942,
	0, 0, 0, 0, 0, 0, 933, 465, 0, 0,
	0, 934, 0, 0, 0, 0, 0, 927, 0, 0,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 937, 0, 0, 0,
	0, 0, 933, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 0, 0, 0, 0, 0, 1484, 1485, 1486,
	0, 1483, 1480, 1481, 1482, 1474, 1475, 1476, 1477, 1479,
	0, 0, 0, 0, 928, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 937, 923, 924, 925,
	0, 922, 919, 920, 921, 913, 914, 915, 916, 918,
	0, 938, 0, 0, 0, 0, 1652, 0, 935, 0,
	0, 923, 924, 925, 0, 922, 919, 920, 921, 913,
	914, 915, 916, 918, 0, 938, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 935, 0, 0, 923, 924, 925,
	0, 922, 919, 920, 921, 913, 914, 915, 916, 918,
	0, 938, 909, 910, 0, 929, 930, 931, 939, 940,
	941, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 0, 0, 912, 909, 910, 943, 929,
	930, 931, 939, 940, 941, 0, 0, 0, 0, 0,
	0, 0, 932, 0, 0, 0, 1505, 911, 0, 912,
	0, 0, 943, 926, 0, 0, 0, 0, 909, 910,
	0, 929, 930, 931, 939, 940, 941, 0, 0, 0,
	0, 911, 0, 0, 932, 0, 0, 926, 0, 0,
	0, 912, 0, 0, 943, 0, 0, 0, 0, 0,
	909, 910, 0, 929, 930, 931, 939, 940, 941, 0,
	0, 0, 917, 911, 0, 0, 932, 1510, 0, 926,
	1463, 0, 0, 912, 0, 0, 943, 0, 0, 0,
	0, 936, 944, 0, 0, 0, 917, 0, 0, 0,
	0, 0, 0, 0, 0, 911, 0, 942, 0, 0,
	0, 926, 0, 0, 0, 936, 944, 0, 0, 934,
	0, 0, 0, 0, 0, 927, 0, 0, 917, 0,
	0, 942, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 934, 0, 0, 0, 936, 944, 927,
	933, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	917, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 933, 934, 0, 0, 0, 936,
	944, 927, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 928, 0, 0, 942, 0, 0, 0, 0,
	0, 0, 0, 0, 937, 0, 933, 934, 0, 0,
	0, 0, 0, 927, 0, 0, 928, 0, 1470, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 937, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 933, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 928, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	937, 0, 935, 0, 0, 923, 924, 925, 0, 922,
	919, 920, 921, 913, 914, 915, 916, 918, 0, 938,
	928, 0, 0, 0, 0, 0, 935, 0, 0, 923,
	924, 925, 937, 922, 919, 920, 921, 913, 914, 915,
	916, 918, 0, 938, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 935, 0,
	0, 923, 924, 925, 0, 922, 919, 920, 921, 913,
	914, 915, 916, 918, 0, 938, 1472, 1473, 0, 1490,
	1491, 1492, 0, 0, 0, 0, 0, 0, 0, 0,
	935, 0, 1640, 923, 924, 925, 0, 922, 919, 920,
	921, 913, 914, 915, 916, 918, 0, 938, 909, 910,
	0, 929, 930, 931, 939, 940, 941, 0, 0, 0,
	0, 0, 0, 0, 932, 0, 0, 1487, 0, 0,
	0, 912, 909, 910, 943, 929, 930, 931, 939, 940,
	941, 0, 0, 0, 0, 0, 0, 0, 932, 0,
	0, 0, 0, 911, 0, 912, 0, 0, 943, 926,
	0, 0, 909, 910, 0, 929, 930, 931, 939, 940,
	941, 0, 0, 0, 0, 0, 1478, 911, 0, 0,
	0, 0, 0, 926, 0, 912, 0, 0, 943, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 911, 917, 0,
	0, 1493, 0, 926, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 936, 944, 1488,
	0, 0, 917, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 942, 0, 0, 0, 0, 0, 0,
	0, 936, 944, 0, 0, 934, 0, 0, 0, 0,
	0, 927, 917, 0, 0, 0, 0, 942, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 934,
	0, 936, 944, 0, 0, 927, 933, 0, 0, 0,
	28, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 29, 53, 0, 0, 0, 0, 0, 0, 934,
	0, 0, 0, 0, 0, 927, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 928, 0,
	0, 0, 31, 0, 60, 0, 0, 0, 0, 0,
	937, 1472, 1473, 0, 1490, 1491, 1492, 0, 0, 0,
	0, 0, 928, 44, 0, 0, 0, 0, 0, 0,
	39, 0, 0, 56, 937, 0, 0, 43, 40, 1484,
	1485, 1486, 0, 1483, 1480, 1481, 1482, 1474, 1475, 1476,
	1477, 1479, 928, 0, 45, 0, 0, 0, 0, 0,
	41, 0, 1487, 0, 937, 0, 0, 0, 935, 0,
	0, 923, 924, 925, 0, 922, 919, 920, 921, 913,
	914, 915, 916, 918, 0, 938, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 923, 924, 925, 0, 922,
	919, 920, 921, 913, 914, 915, 916, 918, 0, 938,
	0, 1478, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 935, 0, 0, 923, 924, 925, 0, 922,
	919, 920, 921, 913, 914, 915, 916, 918, 0, 938,
	0, 42, 0, 0, 0, 0, 1493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 58, 30, 0,
	0, 46, 0, 57, 1488, 0, 0, 0, 0, 47,
	0, 0, 67, 0, 0, 0, 0, 50, 52, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 0, 795,
	787, 812, 780, 803, 802, 69, 0, 782, 781, 0,
	0, 0, 814, 813, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 70, 0, 0, 0, 0, 0,
	0, 1489, 65, 808, 0, 800, 799, 0, 66, 0,
	0, 0, 0, 0, 798, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 797, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 790,
	789, 791, 792, 793, 0, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 1485, 1486, 0, 1483, 1480,
	1481, 1482, 1474, 1475, 1476, 1477, 1479, 0, 0, 784,
	0, 0, 0, 0, 0, 0, 795, 787, 812, 780,
	803, 802, 801, 0, 782, 781, 788, 0, 0, 814,
	813, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 796, 0, 0, 0, 1161, 1159, 1160, 1163, 1162,
	808, 0, 800, 799, 0, 0, 0, 0, 0, 0,
	0, 798, 0, 0, 0, 0, 0, 0, 785, 0,
	0, 0, 0, 0, 0, 0, 794, 786, 797, 0,
	0, 0, 0, 0, 0, 816, 0, 0, 0, 0,
	0, 0, 0, 783, 0, 0, 809, 810, 0, 0,
	0, 0, 0, 0, 0, 0, 790, 789, 791, 792,
	793, 0, 811, 0, 0, 0, 0, 0, 0, 0,
	815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 784, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 801,
	0, 0, 0, 788, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 796, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 785, 0, 0, 0, 0,
	0, 0, 0, 794, 786, 0, 0, 0, 0, 0,
	0, 0, 816, 0, 0, 0, 0, 0, 0, 0,
	783, 0, 0, 809, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815,
}
var sqlPact = [...]int{

	26817, -1000, 44, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 663, 15541,
	15541, 19107, -1000, -1000, -1000, -1000, -1000, -1000, 731, 661,
	317, 5238, 19107, 19107, 18835, 1476, 1476, 20467, -1000, -1000,
	23731, -1000, 3162, 511, 514, 511, 511, 507, 20467, 621,
	662, 139, -1000, 694, 9, 23459, 19107, 1349, 37, 17475,
	339, 26817, 18563, 23187, 19107, 18291, 590, 31, 16101, 19107,
	-1000, 46, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1182, 355, 46, -1000, 1180,
	1066, 1064, 17475, 22915, 22643, 22371, 22099, -1000, 12140, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	761, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 343, 342, -1000, 18019, -1000, 927, -1000, 33,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 907, -1000,
	19107, -1000, -1000, 21827, 21555, 341, 899, -1000, -1000, 598,
	418, 1370, -1000, 50, -1000, -1000, -1000, 1178, -1000, 906,
	1177, 1167, 1166, 1164, 1162, 1159, 417, 893, 488, -1000,
	899, -1000, 899, -1000, -1000, -1000, 588, 20467, -1000, 17475,
	-1000, 21283, 19107, 19107, 1093, 21011, -1000, 694, -1000, -1000,
	-1000, 970, 1348, 1348, 1348, 1386, 151, 142, 139, 4,
	19107, -1000, 340, 4, 7352, 7352, -1000, -1000, 339, -1000,
	373, 14973, -1000, 8592, -1000, 788, 1254, 441, 689, 1250,
	-123, 784, 763, 1240, 15829, 16101, 31, 21, -1000, -1000,
	-1000, 4942, 15829, 654, 14157, 46, -1000, -1000, -1000, 17475,
	19107, 19107, 701, 20739, -1000, 1239, 136, 1233, -1000, 131,
	1231, -1000, 131, 1230, 35, -1000, -1000, -1000, -1000, -1000,
	-1000, 339, 17747, 19107, 1460, 27169, -1000, 10404, -1000, -1000,
	15541, 873, 15541, -1000, -1000, 1458, -1000, 10404, -1000, 15,
	14, 1036, 1054, 12723, 12438, 1312, 837, -1000, -1000, -1000,
	47, 5238, 19107, 1191, 15541, 19107, 19107, 19107, 19107, 19107,
	19107, -1000, 1023, -1000, -1000, 19107, 19107, -1000, 10, 6,
	-1000, 20467, -1000, 138, -1000, 338, 998, 425, 154, 20195,
	425, 996, -1000, 970, -1000, 895, 1018, 9510, 10404, 139,
	-1000, -1000, 139, 139, 10404, -1000, -1000, 19107, 4, 1448,
	19107, 108, -1000, 25884, -1000, -1000, 10404, 10404, 10404, 10404,
	10404, 869, 364, -1000, 337, 336, 6157, -1000, -1000, 1540,
	-1000, -1000, -1000, 149, -1000, -1000, 10404, 46, -1000, -1000,
	-1000, -1000, 335, 1562, -1000, 461, -1000, -1000, -1000, 422,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1190,
	332, 330, -1000, -1000, -1000, -1000, 327, 320, 319, 315,
	314, 312, 309, 302, 301, 300, 299, 294, 293, 290,
	289, 833, -1000, 442, -1000, -1000, 442, 442, -1000, 276,
	276, 277, -1000, -1000, -1000, -1000, 276, -1000, -1000, -1000,
	410, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 278, 108,
	-1000, -1000, -1000, 19107, 30, -1000, 26648, -1000, -23, 760,
	-1000, 16931, 1408, 1351, 1326, 17475, 1407, 1404, 586, 19107,
	19107, 584, 583, 17475, 396, -1000, -1000, -1000, 19107, -1000,
	-1000, -11, -1000, -1000, 1156, 28, -1000, -1000, 436, 203,
	1447, 203, 14429, -1000, 19107, 19107, -1000, 19107, -1000, -1000,
	19107, -1000, 19107, 19107, -1000, 19107, 148, 16387, 777, 1229,
	658, 9, 23, -1000, 1464, -1000, -1000, -1000, -1000, 97,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 277, 833, 276,
	276, 276, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 410,
	-1000, -1000, 442, 442, 442, -1000, -1000, 22, 26648, 580,
	-1000, 1155, 508, 12, 773, 1058, 754, -1000, -1000, -1000,
	-1000, 2, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1524, -1000, -1000, 1539, 2, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1560, 5238, -1000, -1000,
	-1000, 19107, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 773, 1058, -1000, -1000, 17475, 16659, 1438, 1228,
	847, -1000, 1428, 19107, 905, 990, -1000, 601, 1226, -1000,
	-1000, -1000, -1000, 26648, -1000, 26648, 716, 1075, -1000, 1075,
	0, -1000, 25572, -1000, 274, 11, 436, 7352, 13869, 27032,
	27169, 19107, 613, 10404, 10404, 10404, 10404, 10404, 10404, 10404,
	10404, 10404, 10404, 10404, 10404, 10404, 10404, 10404, 10404, 10404,
	10404, 10404, 10404, 10404, 10404, 1057, 10404, 574, 10404, 10404,
	10404, 10404, 1132, 862, 263, 933, 5238, -1000, -1000, 684,
	684, 684, 4022, 4022, 237, 364, -1000, 10404, -1000, 9188,
	142, 25175, -16, -1000, -1000, -1000, 7051, 443, 26648, 46,
	5835, -1000, 1538, 637, 1197, 1122, 273, 137, 125, 10404,
	10404, 10702, 10702, 10404, 11000, 10404, 10404, 6455, 10404, 10404,
	10404, 10404, 10404, 10404, -1000, 272, -1000, -1000, -1000, -1000,
	1534, -1000, -1000, 1532, -1000, 612, 606, 1530, 436, 124,
	8592, -1000, 777, 19107, 19107, 19107, -1000, -1000, 988, 19923,
	972, 27169, 19107, -1000, 271, 269, 1052, 1051, 19107, 19107,
	19651, 19379, 19107, 767, 268, 267, 19107, 759, -1000, 19107,
	19107, 758, 1109, 934, -1000, 426, 15829, 653, 1154, 19107,
	733, 10404, 857, -1000, 13581, 451, 19107, 742, 83, -1000,
	-1000, -1000, 392, 19107, -1000, -1000, -1000, 136, -1000, 131,
	131, -1000, -1000, 17475, -1000, -1000, -1000, -1000, -1000, -1000,
	27169, 356, 333, -1000, 1529, 573, -1000, 571, 568, 566,
	-1000, 264, -1000, 10404, 19107, 19107, 1058, -1000, -1000, -1000,
	-1000, 700, -1000, 764, -1000, 13008, -1000, -1000, -1000, -1000,
	-25, -1000, -1000, -1000, -1000, 123, 1, -17, 27169, -1000,
	-1000, -1000, -1000, -1000, 19107, 297, 19107, 9, 19107, -1000,
	1558, 9, 19107, 1218, 1269, 385, 19107, -1000, -1000, -1000,
	10404, -1000, -1000, -1000, 9, -1000, 1121, -1000, -77, 1347,
	1303, -137, 144, 398, -1000, 13293, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 413, 366, 366, 482,
	482, 482, 482, 1357, 1357, 2451, 2696, 2517, 2517, 2517,
	2065, 331, 331, 2517, 2517, 2517, 4022, 26672, 1033, 10404,
	10404, 559, 855, 263, 1033, 10404, 1507, 1033, 1033, 1033,
	-1000, 884, -1000, -1000, -1000, 1152, 258, 11000, 11000, -1000,
	-1000, -1000, 6157, 11596, -1000, -1000, -1000, -1000, -1000, 254,
	10404, -1000, 25484, -160, -1, -1000, -1000, 10404, -60, -100,
	-1000, -1000, 642, -1000, 10404, -1000, -5, 10404, 10404, 10404,
	121, 118, -1000, 863, 253, 244, 10404, -1000, -1000, 26340,
	3993, 116, 1143, -84, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 115, 112, 26308, -84, 110, 3292, -1000, 11000, 11000,
	11000, 6157, 241, 109, 25540, -84, 26276, 8890, 8890, 8890,
	106, 26252, 10404, -84, 3675, 3350, 2761, -3, -7, -9,
	1528, -15, 104, 411, 401, 103, 1121, -1000, -1000, -1000,
	-1000, 549, 548, 1217, -1000, 971, -1000, 464, -1000, 721,
	10404, 11868, 228, 226, 820, -1000, 1216, 922, 1213, 922,
	-1000, -23, 755, 10404, 10404, -1000, 544, -1000, -1000, 539,
	426, 1139, 628, -1000, 885, -1000, -1000, 651, -1000, -1000,
	6753, 26648, -1000, 740, 1330, -21, -1000, -1000, 7352, 436,
	14429, 13869, 8592, -32, -1000, -1000, -1000, 777, -1000, 540,
	1519, 102, 1009, 888, 793, 708, 1517, 26648, -25, -25,
	-1000, -1000, -1000, -1000, -1000, 19107, 1098, -1000, 16659, 225,
	19107, 224, -1000, 222, -1000, -1000, 215, 19107, 1037, 385,
	15829, -1000, 425, -1000, 101, 1118, 1372, -1000, 13869, 1060,
	1055, 13869, 932, 876, 876, 876, -1000, 199, 193, 398,
	4336, 10404, 17203, 879, 70, 99, 1347, 10404, 1033, 1033,
	10404, 11000, 11000, -1000, 1033, -1000, -1000, -1000, -1000, 1137,
	197, 10404, 27169, 26616, 3883, -34, -1000, 8270, -29, -1000,
	10404, -1000, 25143, -1000, -1000, 313, 1258, -1000, 10404, 25944,
	98, 7972, -1000, 25908, -13, -13, -1000, 1552, -1000, 14701,
	439, 881, 25111, 27032, 27169, -1000, 10404, -1000, -1000, 1133,
	10404, -1000, 27032, 27169, 11000, 11000, 11000, 11000, 11000, 11000,
	11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000, 11000,
	11000, 11000, 11000, 1040, 11000, 1489, 1489, 1489, -31, 7650,
	-1000, 1135, 1133, 10404, 10404, 27169, 95, 88, 87, -1000,
	10404, -84, 10404, 10404, 10404, -1000, -1000, -1000, 84, -1000,
	1514, -1000, -1000, -1000, -1000, 1118, 19107, 19107, 19107, 1212,
	-1000, 1706, -1000, 25087, -39, -1000, 311, 1350, 10404, -1000,
	-1000, 196, 11868, 19107, -1000, 1056, 1105, 499, 19107, -1000,
	19107, -1000, 19107, 19107, 19107, -40, -41, 19107, 19107, -1000,
	15829, 603, 189, -1000, -67, -1000, 7352, 218, 9, -67,
	733, -1000, -52, -1000, 387, -1000, 359, 357, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 81, -1000, -1000, 1108,
	-1000, 11868, 188, 19107, 16659, 1421, 11868, 904, 1043, 385,
	15829, -1000, 601, -1000, 429, 10404, 10404, 1347, 13869, 13869,
	966, 1050, 13869, -1000, -1000, -1000, -1000, 354, 363, 352,
	12140, 17203, -1000, 1508, 1061, -55, -1000, -1000, 19107, 181,
	-1000, 398, 496, 1033, 2832, 217, 10404, 27169, 26702, -56,
	10404, 10404, -1000, -63, -1000, 10404, 351, 26648, -1000, -1000,
	-1000, 26648, 10404, 1543, 10404, 77, 73, 72, -1000, -1000,
	-1000, 24003, 10404, 71, -1000, 69, 67, 26648, 1135, 26648,
	-1000, -1000, 575, 575, 1489, 1489, 1489, 1489, 617, 617,
	1007, 976, 1048, 1048, 1048, 1952, 390, 390, 1048, 1048,
	1048, 1130, 1012, 179, 26881, 10404, -68, -1000, -1000, -1000,
	26648, 26648, 66, -1000, -1000, -1000, -84, 2410, 24778, 24746,
	-1000, 64, 429, -1000, -1000, -1000, 19107, -1000, 19107, -1000,
	19107, 19107, 1138, 949, -1000, -1000, 1047, 177, 11000, 19107,
	-1000, 831, 11868, 1343, 46, 19107, 1343, 24714, 5835, -69,
	-70, 943, -1000, 937, 10404, -1000, 27169, 922, 922, -1000,
	535, 531, -1000, -1000, -1000, -1000, -54, 15269, 1551, -67,
	1274, 19107, 1324, -1000, -1000, 171, -1000, -1000, -1000, 858,
	-76, 11868, -82, 61, 9, -86, 19107, -1000, 385, 15829,
	-1000, 1269, -1000, 19107, 26648, -84, -1000, 966, -1000, 169,
	10404, 13869, -1000, -137, -1000, -87, -1000, 398, -88, -1000,
	350, -155, -1000, 383, -1000, -1000, 398, 167, 19107, 17203,
	10404, 10404, 26702, -103, -1000, 1033, 1033, -1000, 24690, -1000,
	26648, -1000, 25908, -1000, -1000, -1000, 851, -1000, 24381, -1000,
	-1000, -1000, -1000, 11000, 1129, 166, 27169, 24349, -1000, -1000,
	10404, -1000, -1000, -1000, -1000, -1000, 1411, -1000, -1000, 19107,
	967, -1000, -1000, 10404, 26881, 165, 1098, 164, -1000, -1000,
	-1000, -1000, -1000, -1000, 1350, -5, -1000, 810, -1000, -1000,
	26648, 1345, -1000, -1000, 19107, 19107, -1000, 163, 46, -104,
	-1000, 382, 593, -111, 19107, -1000, -1000, 5534, 19107, 831,
	-113, -1000, 1098, -1000, 831, 161, 15829, -1000, 1037, -78,
	-1000, 1414, -1000, 19107, 26648, -1000, 398, -1000, 1505, 17203,
	148, -1000, 1061, -1000, 4643, 17203, 19107, -121, -1000, 1033,
	1033, -1000, -1000, 60, 881, 1363, -1000, 25854, 11000, 27169,
	-125, -1000, 24317, -1000, -1000, 1209, 24293, 1013, 19107, -1000,
	19107, 1343, 58, 19107, 466, 19107, -1000, -1000, 10404, 1551,
	-1000, -1000, 1545, 670, -1000, 436, -1000, 159, 1098, 831,
	-1000, 1098, 11868, -1000, 1043, 19107, 157, -127, 17203, -1000,
	-1000, 347, -1000, -1000, 1494, -1000, -129, -1000, -1000, 739,
	10404, 25854, -131, -1000, -1000, 1200, -1000, 886, 792, 57,
	-135, -1000, -1000, 154, -1000, 10404, -1000, -13, -1000, -1000,
	14429, -1000, 19107, -1000, 1098, -1000, -147, -1000, -1000, -1000,
	-1000, -1000, 398, 346, -1000, 54, 10106, 10106, -84, -1000,
	19107, -1000, 892, 891, 671, -1000, -1000, -1000, -1000, -1000,
	1013, 26648, 52, -118, -151, -1000, 831, 17203, -1000, -1000,
	-1000, -1000, 11298, 917, 726, 25508, -1000, -1000, -1000, 1285,
	-1000, 478, 945, 945, 886, 1543, -1000, 910, 1098, -1000,
	1469, -1000, -1000, -1000, -1000, -1000, -1000, 1477, -1000, -1000,
	1049, -1000, -1000, -1000, -1000, -1000, -1000, 9808, -1000, -1000,
	-1000, -1000,
}
var sqlPgo = [...]int{

	0, 1861, 1860, 1384, 1513, 1858, 1855, 1509, 1854, 1853,
	1851, 1849, 1848, 1844, 119, 1507, 1504, 27, 1480, 1842,
	121, 1841, 1839, 1830, 110, 1826, 1825, 1819, 56, 1817,
	1816, 1434, 1419, 1813, 1806, 108, 1804, 15, 1803, 97,
	1802, 26, 167, 2185, 147, 1801, 1799, 1798, 34, 125,
	89, 1797, 205, 1796, 1794, 61, 47, 29, 22, 1793,
	133, 139, 1560, 41, 1790, 1788, 155, 1786, 94, 36,
	90, 158, 156, 138, 137, 1782, 1781, 1779, 1774, 62,
	1770, 2, 1765, 1764, 17, 78, 20, 1760, 23, 38,
	1758, 1754, 143, 1753, 98, 117, 1378, 21, 135, 11,
	1752, 77, 18, 95, 1751, 1749, 145, 54, 1748, 39,
	101, 151, 1747, 83, 161, 81, 40, 82, 124, 1746,
	1745, 1744, 116, 1743, 126, 88, 1741, 1740, 106, 1738,
	146, 148, 1737, 1733, 140, 1732, 1731, 1728, 165, 1727,
	1726, 162, 1725, 8, 55, 87, 16, 1380, 1377, 127,
	93, 46, 35, 1720, 2277, 874, 724, 49, 100, 68,
	60, 102, 72, 84, 152, 28, 1718, 1716, 129, 1712,
	1710, 1708, 1707, 1706, 104, 1705, 1704, 92, 149, 12,
	9, 14, 115, 52, 71, 103, 131, 157, 130, 1701,
	113, 132, 64, 187, 1698, 1696, 1203, 136, 1695, 1694,
	1692, 1198, 983, 765, 250, 1690, 1687, 350, 302, 1678,
	1665, 69, 1663, 134, 1659, 1658, 153, 348, 37, 1656,
	58, 112, 114, 1655, 63, 0, 1845, 831, 1650, 141,
	99, 1645, 1642, 1641, 1638, 33, 3, 10, 4, 6,
	5, 105, 85, 1617, 1614, 144, 24, 86, 1607, 159,
	1606, 1602, 1600, 50, 1597, 19, 1596, 13, 1589, 1583,
	7, 1, 1580, 1578, 150, 1577, 123, 1575, 1425, 1573,
	154, 1570, 1568, 1427, 53, 107,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 50, 50, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 47, 47,
	52, 52, 52, 54, 54, 51, 51, 46, 46, 5,
	5, 224, 224, 36, 36, 40, 40, 37, 38, 38,
	39, 39, 6, 6, 6, 7, 7, 7, 7, 7,
	7, 14, 15, 15, 15, 15, 15, 15, 15, 15,
	98, 98, 97, 97, 100, 100, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 192,
	192, 191, 19, 166, 166, 20, 20, 20, 20, 21,
	123, 123, 22, 22, 22, 22, 23, 27, 264, 264,
	264, 268, 268, 269, 269, 270, 270, 270, 270, 270,
	270, 270, 266, 266, 30, 30, 30, 30, 30, 142,
	138, 138, 140, 140, 140, 140, 61, 137, 137, 137,
	137, 139, 139, 139, 139, 217, 216, 216, 222, 222,
	222, 76, 76, 76, 76, 76, 77, 77, 77, 215,
	215, 215, 215, 223, 223, 223, 223, 223, 223, 78,
	78, 78, 221, 221, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 18, 265, 265, 267, 267, 32,
	32, 10, 10, 11, 11, 79, 79, 80, 80, 145,
	145, 145, 145, 81, 81, 53, 53, 53, 144, 233,
	233, 234, 234, 234, 234, 234, 234, 235, 235, 235,
	235, 235, 235, 235, 231, 231, 232, 229, 229, 230,
	230, 230, 230, 271, 271, 143, 143, 84, 84, 238,
	238, 238, 238, 236, 236, 236, 236, 236, 239, 237,
	240, 240, 240, 240, 240, 178, 178, 178, 34, 12,
	59, 59, 13, 9, 9, 127, 127, 88, 88, 183,
	183, 183, 69, 69, 48, 48, 48, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 128, 128,
	129, 129, 25, 29, 33, 33, 33, 33, 33, 273,
	273, 65, 65, 65, 65, 66, 66, 141, 141, 141,
	141, 141, 60, 8, 8, 55, 55, 56, 56, 57,
	57, 58, 58, 274, 274, 24, 24, 24, 24, 24,
	72, 72, 134, 134, 134, 136, 136, 135, 135, 135,
	113, 113, 113, 35, 93, 93, 102, 102, 103, 103,
	189, 104, 104, 28, 28, 43, 43, 41, 41, 41,
	41, 41, 41, 42, 42, 44, 44, 44, 44, 44,
	44, 44, 246, 246, 246, 249, 249, 245, 247, 247,
	248, 248, 272, 272, 114, 114, 114, 83, 82, 82,
	86, 86, 85, 87, 87, 182, 111, 111, 111, 111,
	130, 131, 131, 132, 132, 133, 133, 110, 110, 162,
	162, 45, 45, 92, 92, 94, 94, 152, 152, 152,
	152, 153, 153, 151, 151, 151, 151, 184, 184, 184,
	184, 184, 184, 184, 184, 262, 262, 262, 263, 263,
	181, 181, 185, 185, 185, 185, 185, 185, 179, 179,
	179, 179, 180, 180, 190, 190, 117, 117, 117, 117,
	115, 115, 116, 116, 186, 186, 186, 186, 112, 112,
	187, 187, 187, 146, 146, 193, 193, 193, 211, 211,
	91, 91, 91, 194, 194, 194, 194, 194, 194, 194,
	194, 194, 194, 194, 194, 194, 194, 194, 194, 195,
	195, 195, 195, 197, 197, 197, 196, 196, 196, 196,
	196, 196, 196, 196, 196, 196, 196, 196, 196, 196,
	210, 210, 210, 210, 210, 198, 198, 205, 205, 206,
	206, 207, 208, 199, 199, 200, 200, 201, 202, 209,
	209, 209, 209, 213, 213, 203, 203, 203, 203, 203,
	204, 124, 124, 124, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 124, 125, 125, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 156, 156, 156,
	156, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 241, 241, 241, 241, 241, 241, 241, 243,
	243, 244, 244, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	250, 250, 251, 251, 253, 253, 254, 254, 255, 256,
	256, 256, 257, 258, 258, 252, 252, 259, 259, 259,
	260, 260, 261, 261, 261, 261, 261, 168, 168, 168,
	169, 169, 170, 176, 176, 176, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 67, 67, 67, 67, 67, 99, 99, 165,
	165, 163, 163, 163, 167, 167, 118, 118, 212, 212,
	212, 212, 212, 212, 212, 119, 119, 119, 126, 120,
	120, 121, 121, 121, 121, 121, 121, 159, 160, 122,
	122, 122, 161, 161, 171, 175, 175, 174, 173, 173,
	172, 172, 149, 149, 150, 150, 148, 147, 107, 107,
	106, 106, 105, 105, 275, 275, 177, 177, 108, 108,
	109, 101, 101, 188, 188, 188, 188, 95, 95, 74,
	74, 96, 96, 70, 70, 73, 73, 71, 71, 71,
	71, 89, 89, 90, 90, 68, 68, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 214, 214,
	214, 164, 62, 62, 62, 63, 63, 64, 64, 219,
	219, 219, 220, 220, 220, 220, 218, 218, 218, 218,
	218, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 225, 225,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 227, 227, 227, 227, 227, 227, 227, 227, 227,
	227, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	226, 226, 226, 226, 226, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228, 228, 228, 228, 228,
	228, 228, 228, 228, 228, 228,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 4,
	6, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	6, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 1, 1, 1, 1,
	1, 6, 3, 5, 4, 6, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 3, 6, 3, 1, 5,
	2, 1, 1, 1, 3, 3, 2, 3, 3, 3,
	3, 1, 3, 3, 2, 1, 1, 3, 1, 1,
	1, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 2, 2, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 2, 2, 0, 2, 0, 8,
	8, 7, 10, 6, 9, 1, 0, 1, 3, 1,
	1, 1, 1, 8, 0, 1, 1, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 5,
	2, 0, 6, 11, 14, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	6, 8, 6, 8, 8, 10, 8, 10, 1, 0,
	2, 0, 2, 2, 3, 3, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 1, 3,
	3, 0, 3, 8, 11, 3, 0, 3, 0, 3,
	0, 3, 0, 1, 0, 6, 6, 8, 5, 7,
	1, 3, 1, 4, 2, 8, 5, 4, 3, 0,
	2, 2, 0, 8, 2, 0, 1, 3, 1, 1,
	3, 5, 5, 1, 1, 3, 3, 1, 2, 3,
	2, 3, 4, 1, 1, 8, 8, 1, 2, 4,
	4, 4, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 2, 2, 1, 1,
	2, 2, 3, 1, 1, 1, 1, 3, 0, 2,
	0, 2, 3, 3, 0, 1, 3, 3, 5, 1,
	1, 1, 3, 2, 4, 4, 0, 7, 4, 6,
	3, 1, 5, 6, 9, 0, 2, 3, 1, 3,
	2, 0, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 1, 1,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -27, -29,
	-28, -30, -31, -32, -33, -25, -34, -35, 23, 34,
	221, 65, -8, -9, -10, -11, -12, -13, -248, 93,
	101, 123, 204, 100, 86, 117, 224, 232, -41, -43,
	240, -142, 241, 35, 250, 59, 96, 226, 220, 272,
	67, -246, -44, -42, 320, 295, 301, 235, -45, 258,
	287, 323, 258, 132, 79, 290, -264, -96, 258, 79,
	-71, -62, 313, 4, -225, -227, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 58, 59, 60, 62, 64,
	65, 66, 69, 70, 77, 78, 80, 82, 86, 88,
	92, 93, 95, 100, 101, 107, 108, 111, 113, 118,
	123, 124, 125, 126, 133, 136, 138, 131, 146, 148,
	149, 152, 151, 156, 159, 162, 164, 165, 166, 168,
	170, 171, 174, 172, 173, 179, 181, 182, 184, 187,
	190, 193, 196, 197, 198, 199, 202, 204, 206, 207,
	208, 210, 211, 213, 214, 215, 216, 217, 220, 218,
	219, 221, 222, 224, 226, 227, 229, 231, 232, 233,
	234, 237, 238, 240, 241, 243, 246, 249, 250, 251,
	254, 252, 248, 257, 259, 260, 261, 268, 272, 273,
	274, 275, 278, 279, 280, 282, 284, 285, 286, 291,
	296, 297, 298, 299, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 50, 51, 52, 54, 81, 83, 84,
	99, 102, 103, 109, 119, 121, 127, 128, 137, 139,
	140, 141, 143, 154, 167, 178, 180, 191, 195, 201,
	203, 209, 228, 236, 244, 245, 253, 255, 263, 264,
	265, 269, 270, 287, 288, -264, -70, -62, 79, 88,
	136, 280, 279, 79, 132, 258, 290, -17, 320, -28,
	-7, -15, -4, -24, -35, -14, -31, -18, -32, -16,
	23, -218, 4, -225, -227, -226, -228, 56, 68, 116,
	135, 129, 145, 147, 155, 157, 169, 192, 194, 225,
	242, 22, 24, 25, 26, 27, 29, 30, 31, 32,
	43, 48, 49, 53, 55, 57, 63, 67, 71, 72,
	73, 74, 75, 76, 85, 87, 89, 90, 91, 94,
	96, 98, 104, 105, 106, 112, 114, 115, 117, 120,
	122, 130, 132, 134, 142, 144, 150, 153, 158, 160,
	161, 175, 176, 177, 183, 185, 186, 188, 189, 200,
	205, 212, 223, 235, 239, 247, 256, 258, 262, 266,
	267, 271, 276, 277, 281, 283, 289, 290, 292, 293,
	294, 295, -62, -62, -62, 204, 22, -268, 22, -269,
	-270, 67, 93, 117, 235, 136, 88, 279, -268, -66,
	232, -62, -138, 159, 238, 228, 268, -139, -137, -217,
	263, 168, -97, -62, 4, 22, 79, 58, 80, 118,
	132, 133, 63, 64, 149, 259, 263, 268, 67, 282,
	-273, 268, 268, -273, -273, -65, 268, 266, -66, -272,
	258, 258, 281, 290, -127, 79, 277, -42, -44, -43,
	-85, -86, 276, 142, 98, 189, -41, -43, -246, -249,
	210, -245, -62, -249, -82, -83, 22, 90, 324, -186,
	-70, 186, -109, 320, -3, -186, 127, -70, -73, 127,
	-70, -62, -186, 127, 266, 324, -96, -89, -62, -148,
	-147, 322, 115, 115, 320, -106, -107, -147, -148, 115,
	144, 144, -187, -186, -62, 127, -74, 127, -73, -98,
	127, -97, -98, 127, -192, -191, -220, 4, -225, -227,
	-226, 287, 258, 132, -166, 320, -123, 320, -62, 22,
	185, 324, 185, -62, -138, 52, -138, 320, -140, -60,
	-61, 146, 206, 266, 305, 115, 299, -78, 5, 85,
	-100, 322, 115, -265, 185, 115, 115, 115, 115, 115,
	115, 299, 146, 206, 231, 258, 290, -141, -60, -61,
	-141, 266, -66, -112, -186, -97, 127, -62, -97, 132,
	-62, 127, -85, -86, -111, -130, -131, 158, 183, -114,
	22, 90, -114, -114, 44, 321, 321, 324, -249, -90,
	320, -101, -188, -154, 313, -156, 311, 312, 317, 175,
	300, -168, -158, -171, 99, 228, 320, -70, -157, 325,
	9, -243, -43, 29, -169, -170, 48, -62, 7, 8,
	5, 6, -68, -195, -164, -204, 271, 104, 177, -241,
	-242, 4, -225, -219, -196, -206, -200, -203, 143, 56,
	72, 75, 73, 76, 239, 281, 49, 28, 102, 103,
	195, 201, 255, 269, 270, 127, 178, 128, 54, 119,
	154, 92, 37, 39, 41, 42, 50, 51, 81, 83,
	84, 109, 137, 139, 140, 141, 180, 209, 244, 253,
	264, 265, 288, -226, -207, -208, -201, -202, -209, -101,
	-109, 313, -70, 320, -108, -177, -154, 85, -50, 218,
	-49, 21, 23, 93, 285, 99, 248, 248, 218, 99,
	325, 218, 218, 99, -221, -220, 5, -71, 324, -218,
	313, -224, -221, 251, 321, -95, -70, -107, -187, -72,
	-70, -72, 240, -62, 30, 99, -52, 324, 47, 222,
	99, -52, 324, 99, -52, 99, 321, 324, -186, 127,
	-73, 30, -165, -193, -194, -196, -205, -199, -203, -204,
	40, 46, 45, 261, 167, 236, 245, 38, 184, 138,
	137, 139, 140, 141, 244, 37, 209, 109, 92, 84,
	83, 180, 42, 41, -207, -208, -201, -202, 81, 264,
	265, 143, 39, 51, 50, 288, 253, -99, -154, -264,
	-270, -264, 30, -99, 324, 324, 156, -77, 162, 174,
	124, -216, 85, -222, -215, -178, 9, 271, 104, 185,
	-221, 8, 312, -214, 7, 311, -216, 85, 70, -223,
	5, 4, -164, -178, 85, 159, -204, 322, -218, -217,
	-267, 112, -264, -217, -217, -217, -217, -217, -62, 156,
	-217, -217, 324, 324, -66, -52, 324, 320, -84, 175,
	-247, 295, -84, 320, -63, 127, -62, -247, 175, -111,
	-131, -130, -132, -154, 22, -154, -156, -42, -42, -42,
	-87, -182, -154, -245, 30, -89, -92, 324, 115, 10,
	11, 55, 33, 311, 312, 313, 314, 110, 315, 308,
	309, 310, 307, 303, 304, 305, 61, 163, 230, 13,
	14, 15, 26, 188, 157, 300, 129, 242, 317, 16,
	17, 18, 145, 36, 130, -67, 30, 4, -75, -154,
	-154, -154, -154, -154, 194, -105, -149, 318, -43, 320,
	-43, -154, -99, 7, -43, -163, 318, -172, -154, -106,
	320, 5, 320, 5, -250, 296, 112, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 203, -213, 291, -213, -213, -197,
	320, -197, -198, 320, -197, 297, 301, 320, -92, -70,
	324, 321, 324, 266, -128, 63, 57, -144, 127, 57,
	-229, -62, 63, -230, 53, 277, 205, 114, -128, 63,
	-128, 63, 63, -186, 33, 33, 266, -73, -62, 266,
	266, -186, -190, 302, -62, -190, 324, 115, 321, 324,
	-146, 293, -134, -28, 320, 85, 30, -134, -102, -103,
	-189, -104, -70, 320, -62, -62, -73, -74, -97, -98,
	-98, -17, -191, 99, -20, -28, -24, -35, -14, 321,
	324, -91, 29, -124, 320, 298, 166, 82, 125, 165,
	-125, 234, 321, 324, 266, 115, 268, 321, -61, -60,
	-76, 208, 246, 219, 237, 324, 8, 7, 7, -218,
	-266, -62, -61, -60, -186, -79, -89, -80, -62, -145,
	-144, -231, -232, -229, 132, 277, 105, 30, 99, -59,
	199, 30, 185, 175, -55, 260, 99, -133, 228, 229,
	324, -48, 31, 89, 320, 321, -146, -188, -94, -184,
	318, -186, -70, -43, -185, 320, -211, -193, -210, 214,
	215, 213, 217, 216, -193, -97, 263, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
	-154, -154, -154, -154, -154, -154, -154, -154, -154, 157,
	129, 242, 36, 130, -154, 266, -154, -154, -154, -154,
	177, 175, 271, 104, 278, 90, 181, -275, 256, 32,
	-161, -43, 320, -176, 27, 247, 22, -218, -168, 228,
	320, -149, -154, -150, -99, 321, 321, 324, -99, -167,
	319, -163, -175, -174, 292, 321, -99, 289, 22, 90,
	313, 7, -124, -251, 107, 120, 320, 321, 321, -154,
	-154, -118, -212, -99, 4, 298, 166, 82, 125, 165,
	234, -118, -119, -154, -99, -120, -155, -156, 311, 312,
	317, 320, 228, -121, -154, -99, -154, 43, 153, 267,
	-122, -154, 115, -99, -154, -154, -154, -99, -99, -99,
	320, 7, 7, 263, 263, 7, -146, 321, -177, -49,
	-70, -62, -62, 175, -144, 127, -54, 175, -193, -62,
	320, 320, 148, 148, -62, -62, 127, -62, 127, -62,
	-62, -50, 218, 320, 320, -62, 218, -62, -70, 218,
	-36, 126, 181, -39, 295, -221, 251, 115, -70, -113,
	223, -154, -113, -136, 185, -95, 287, -62, 223, -93,
	324, 115, 305, -95, -52, -52, -52, -186, -193, 318,
	318, 7, 266, 266, 266, 266, 320, -154, -266, -266,
	-60, 275, 60, 208, -222, 324, 321, 321, 324, -63,
	132, -63, -28, -97, 5, -28, -70, 99, -56, 95,
	-274, 305, -62, -182, -20, -110, 120, -190, 324, 68,
	-117, 147, 169, 116, 155, 225, 135, 7, 101, -151,
	325, 320, -181, 301, -43, -185, -184, 299, -154, -154,
	266, -275, 256, -161, -154, 177, 271, 104, 278, 90,
	181, 115, 320, -155, -155, -99, -158, 320, -99, 319,
	328, 321, -154, 319, 319, 324, -173, -174, 94, -154,
	-86, 324, -85, -154, -99, -99, 321, 321, -256, 193,
	320, 320, -154, 30, 324, 321, 115, 321, 321, -126,
	200, 321, 10, 11, 311, 312, 313, 314, 110, 315,
	308, 309, 310, 307, 303, 304, 305, 61, 163, 230,
	13, 14, 15, 145, 130, -155, -155, -155, -99, 320,
	321, -159, -160, 115, 112, 30, -122, -122, -122, 321,
	115, -99, 324, 324, 324, 321, 321, 321, 7, 321,
	324, 321, 299, 299, 321, -110, 266, 266, 99, 175,
	284, -233, -230, -154, -88, -183, -62, -244, 320, -241,
	-242, -68, 320, 320, -47, 93, 240, -129, 99, -52,
	99, -52, 266, -128, 63, -99, -99, 266, 266, -39,
	115, 257, 187, 251, -101, 176, 223, 62, 321, -101,
	-146, -103, -94, -177, 321, 319, 7, 7, 321, 166,
	125, 165, -125, 165, -125, -125, 7, -62, -81, 131,
	-145, 320, -63, 320, 320, -84, 320, -62, -57, 152,
	-274, -221, -247, 321, -162, 122, 44, -184, 147, 147,
	-184, -117, 147, -115, 192, -115, -115, -262, 320, -17,
	320, -181, -218, 318, 326, -99, -180, -179, 30, -62,
	190, 321, -154, -154, -155, -155, 115, 320, -154, -165,
	26, 26, 321, -99, 321, 324, -150, -154, 321, -163,
	96, -154, 262, 321, 289, -86, -86, -86, 5, -257,
	-62, 320, 293, -85, 321, -211, -193, -154, -159, -154,
	-211, -193, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
	-155, 90, 175, 181, -155, 324, -99, 321, -160, -159,
	-154, -154, -193, 321, 321, 321, -99, -154, -154, -154,
	321, 7, -162, -62, -62, -144, 99, -234, 63, -235,
	55, 105, 67, 175, 177, 277, 205, 53, 85, 212,
	321, 321, 324, -69, -106, 55, -69, -154, 320, -88,
	-89, 175, 85, 175, 85, 78, 273, -62, -62, -70,
	-62, -62, 321, 321, -62, -70, -224, 263, 320, -101,
	-135, 320, 185, -28, -113, 305, 319, 319, 321, 130,
	-88, 320, -89, -79, 30, -88, 185, -58, 151, -274,
	-221, -55, -253, 294, -154, -99, -184, -184, -116, 283,
	185, 147, -184, 319, 321, -263, 7, 319, -192, -180,
	7, -153, -152, 113, 172, 173, 321, -62, 320, -181,
	26, 26, -154, -165, 321, -154, -154, 321, -154, 319,
	-154, 5, -154, 321, 321, 321, -258, -62, -154, 321,
	321, 321, -160, 115, 90, 181, 320, -154, 321, 321,
	324, 321, 321, 321, -253, -144, -62, -97, -62, 105,
	127, 177, 148, 320, -155, -70, -143, -271, 66, 254,
	-183, -48, -97, -48, 321, -99, 321, 321, 177, 177,
	-154, -193, -52, -52, 266, 266, -157, -68, -62, -38,
	-37, 5, 91, -89, 63, -109, -43, 320, 196, 321,
	-88, 321, 321, -28, 321, -70, -274, -221, -56, -254,
	-255, -62, -116, 320, -154, -184, -151, 321, 324, -181,
	321, 319, 324, 327, 305, -181, 320, -89, -179, -154,
	-154, 321, 321, -86, -252, 198, 321, -155, 115, 320,
	-165, 321, -154, -235, -63, 175, -154, -64, 320, -81,
	320, -69, -86, 212, -51, 55, -62, -62, 320, 324,
	321, -40, 305, 279, 176, 321, -62, -62, -143, 321,
	-81, -143, 320, -221, -57, 324, 30, -89, -181, 7,
	-180, -17, -152, -218, 318, -180, -89, 321, 321, -86,
	44, -155, -165, 321, 321, 99, 321, -238, 164, -62,
	-89, -48, 321, -70, -46, 283, -97, -99, -37, 5,
	240, -146, 320, -81, -143, -81, -88, -58, -255, -257,
	321, -179, 319, 7, 321, -259, 207, 229, -99, 321,
	105, -236, -239, -237, 185, 116, 197, 243, 321, 321,
	-84, -154, -86, -102, -89, -81, 321, -181, 319, 321,
	-260, -261, 36, 274, 70, -154, -260, -62, -237, 185,
	-239, 185, 279, 88, -238, 321, -146, 321, -143, -180,
	-261, 202, 111, 228, 202, 111, -240, 171, 222, 47,
	240, -240, -236, -53, 47, 222, -81, 26, 20, 177,
	85, -261,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 0, 0,
	0, 0, 75, 76, 77, 78, 79, 80, 0, 0,
	411, 0, 0, 0, 0, 0, 0, 0, 383, -2,
	0, 148, 0, 330, 0, 330, 330, 334, 0, 413,
	296, 410, -2, 421, 0, 0, 0, 419, 397, 0,
	0, -2, 0, 0, 0, 0, 0, 128, 0, 941,
	871, 877, 878, 902, 903, 904, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 942, 943, 944, 945,
	946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
	956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
	966, 967, 968, 969, 970, 971, 972, 973, 974, 975,
	976, 977, 978, 979, 980, 981, 982, 983, 984, 985,
	986, 987, 988, 989, 990, 991, 992, 993, 994, 995,
	996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015,
	1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
	1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
	1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045,
	1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055,
	1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065,
	1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
	1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 0, 0, 873, 941, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 0, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	0, 214, 916, 917, 918, 919, 920, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
	1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
	1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193,
	1194, 1195, 114, 121, 122, 993, 124, 0, 131, 132,
	133, 135, 136, 137, 138, 139, 140, 141, 0, 323,
	1014, 336, 144, 970, 1018, 1088, 1033, 151, 161, 0,
	1094, -2, 165, 92, 194, 195, 196, 0, 198, 216,
	0, 0, 0, 0, 0, 206, 0, 0, 0, 213,
	341, 329, 341, 326, 327, 328, 331, 0, 322, 0,
	412, 0, 0, 0, 0, 0, 295, -2, 393, 394,
	-2, 0, 416, 416, 416, 0, 0, 394, 0, 402,
	997, 405, 884, 403, 0, 0, 418, 417, 0, 398,
	494, 0, 441, 0, 2, 0, 1072, 494, 0, 1072,
	876, 0, 0, 1072, 0, 0, 129, 130, 881, 879,
	880, 0, 0, 0, 0, 874, 850, 848, 849, 0,
	0, 0, 0, 500, 82, 1072, 52, 1072, 869, 52,
	1072, 90, 52, 1072, 0, 109, 111, 912, 913, 914,
	915, 1099, 0, 0, 0, 0, 119, 0, 123, 125,
	0, 0, 0, 335, 145, 1061, 147, 0, 150, 152,
	153, 0, 0, 0, 0, 0, 0, 164, 189, 190,
	93, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 207, 0, 209, 210, 0, 0, 324, 337, 338,
	325, 0, 333, 52, 498, 268, 1072, 409, 268, 906,
	409, 1072, -2, 0, 389, 428, 429, 0, 0, 0,
	414, 415, 0, 0, 0, 385, 386, 0, 404, 0,
	0, 444, 861, 865, 866, 597, 0, 0, 0, 0,
	0, 0, 687, 689, 1066, 1088, 0, 691, 692, 0,
	694, 696, 697, 0, 700, 701, 841, 873, 887, 888,
	889, 890, 0, 0, 893, 0, 895, 896, 897, 741,
	710, -2, -2, 885, 529, 530, 531, 532, -2, 1101,
	714, 716, 718, 719, 720, 721, 0, 1050, 1067, 1068,
	1084, 1085, 1093, 1097, 1098, 1072, 1081, 1073, 1062, 1070,
	1079, 946, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 911, 559, 560, 565, 566, 568, 444,
	442, 495, 496, 0, 0, 858, 856, 857, 29, 319,
	31, 0, 319, 319, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 485, 192, 193, 872, 0, 846,
	847, 485, 61, 72, 0, 0, 867, 851, 504, 0,
	360, 0, 0, 501, 0, 0, 84, 0, 50, 51,
	0, 86, 0, 0, 88, 0, 411, 0, 0, 1072,
	0, 411, 0, 799, 512, 513, 514, 515, 516, 594,
	519, 520, 521, 522, 523, 524, 525, 526, 527, 528,
	536, 537, 538, 539, 540, 541, 542, 556, 0, 535,
	535, 535, 548, 549, 557, 558, 563, 564, 575, 576,
	578, 580, 574, 574, 574, 571, 572, 0, 797, 0,
	134, 0, 0, 0, 0, 0, 0, 156, 176, 177,
	178, 157, 159, 166, 168, 169, 170, 179, 180, 181,
	182, 285, 0, 287, 898, 0, 158, 160, 162, 163,
	183, 184, 185, 186, 187, 188, 0, 0, 94, 197,
	199, 0, 215, 200, 201, 202, 203, 204, 205, 208,
	211, 212, 0, 0, 332, 288, 0, 226, 0, 0,
	291, 408, 0, 0, 0, 1072, 905, 346, 0, 392,
	426, 427, 430, 433, 434, 431, 597, 399, 400, 401,
	422, 423, 306, 406, 0, 0, 504, 0, 0, 0,
	0, 0, 0, 776, 777, 778, 779, 780, 781, 784,
	785, 782, 783, 786, 787, 788, 0, 0, 0, 789,
	790, 791, 0, 0, 793, 0, 795, 0, 0, 0,
	0, 0, 0, 855, 0, 0, 0, 864, 792, 602,
	603, 604, 626, 627, 0, 688, 852, 845, 690, 0,
	-2, 797, 0, 693, 698, 699, 0, 0, 840, -2,
	0, 892, 0, 594, 743, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 820, 826, 0, 0, 0, 0,
	0, 0, 0, 0, 544, 562, 573, 570, 569, 546,
	0, 545, 543, 0, 547, 0, 0, 0, 504, 0,
	0, 860, 0, 0, 0, 0, 318, 33, 1072, 0,
	54, 0, 0, 258, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 0, 64, 0, 882, 71, 0, 0, 0, 0,
	372, 0, 372, 362, 0, 0, 0, 358, 375, 376,
	378, 379, 0, 0, 502, 83, 870, 52, 91, 52,
	52, 97, 110, 0, 112, 115, 116, 117, 118, 113,
	0, 505, 507, 517, 0, 581, 582, 583, 584, 585,
	586, 595, 120, 0, 0, 0, 0, 149, 154, 155,
	342, 0, 173, 0, 175, 0, 286, 900, 899, 95,
	217, 142, 339, 340, 499, 0, 0, 225, 881, 227,
	229, 230, 231, 232, 906, 0, 906, 0, 0, 289,
	0, 0, 0, 0, 348, 354, 0, 432, 435, 436,
	0, 425, 304, 305, 411, 883, 438, 862, 485, 445,
	0, 456, 494, 471, 461, 0, 598, 508, 509, 550,
	551, 552, 553, 554, 599, 600, 0, 605, 606, 607,
	608, 609, 610, 611, 612, 613, 614, -2, -2, -2,
	618, 619, 620, -2, -2, -2, 624, 625, -2, 794,
	796, 0, 855, 0, -2, 0, 634, -2, -2, -2,
	638, 0, 641, 643, 645, 0, 0, 0, 0, 854,
	655, 832, 0, 0, 773, 774, 775, 863, 640, 0,
	0, 853, 844, 0, 0, -2, 695, 0, 0, 0,
	803, 804, 839, 835, 0, 702, 421, 0, 0, 0,
	0, 0, 901, 751, 0, 0, 0, 715, 717, 0,
	0, 0, 0, 807, -2, -2, -2, -2, -2, -2,
	-2, 0, 0, 797, 817, 0, 0, 658, 0, 0,
	0, 0, 1088, 0, 797, 825, 0, 0, 0, 0,
	0, 797, 0, 831, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 438, 497, 859, 32,
	308, 0, 0, 0, 35, 1072, 43, 0, 240, 0,
	0, 0, 0, 0, 321, 44, 1072, 52, 1072, 52,
	45, 30, 319, 0, 0, 312, 0, 307, 310, 0,
	71, 0, 0, 60, 0, 62, 73, 0, 868, 81,
	0, 503, 355, 356, 0, 0, 364, 361, 0, 504,
	0, 0, 0, 0, 85, 87, 89, 0, 800, 0,
	0, 0, 0, 0, 0, 0, 0, 798, 126, 127,
	146, 171, 172, 174, 167, 0, 234, 267, 0, 0,
	906, 0, 223, 268, 290, 292, 0, 0, 350, 354,
	0, 353, 409, 424, 0, 440, 0, 443, 0, 0,
	0, 0, 0, 491, 491, 491, 489, 465, 411, 471,
	0, 0, 483, 0, -2, 461, 0, 0, -2, -2,
	0, 0, 0, 656, -2, 639, 642, 644, 646, 0,
	0, 0, 0, 0, 0, 0, 657, 0, 0, 842,
	845, -2, 798, 801, 802, 0, 0, 836, 0, 0,
	0, 0, 420, 421, 421, 421, 708, 0, 709, 0,
	0, 0, 0, 0, 0, 724, 0, 725, 726, 0,
	0, 727, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 661, 662, 663, 0, 0,
	728, 823, 824, 0, 0, 0, 0, 0, 0, 733,
	0, 830, 0, 0, 0, 737, 738, 739, 0, 533,
	0, 555, 577, 579, 567, 440, 0, 0, 0, 0,
	53, 238, 257, 0, 0, 297, 303, 303, 0, 711,
	712, 0, 0, 0, 37, 0, 0, 0, 0, 41,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 0, 74, 370, 371, 0, 369, 0, 359,
	372, 377, 374, 380, 0, 510, 0, 0, 518, 587,
	588, 589, 590, 591, 592, 593, 0, 143, 221, 0,
	228, 0, 0, 0, 226, 0, 0, 0, 352, 354,
	0, 345, 346, 407, 745, 0, 0, 446, 0, 0,
	0, 0, 0, 486, 490, 487, 488, 0, 0, 0,
	0, 483, 453, 0, 0, 0, 460, 482, 0, 481,
	470, -2, 601, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 833, 0, 768, 0, 0, 844, -2, 805,
	834, 838, 0, 703, 0, 0, 0, 0, 894, 749,
	750, 754, 0, 0, 713, 0, 0, 806, 816, 818,
	659, 660, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, -2, -2, -2, 677, 678, 679, -2, -2,
	-2, 0, 0, 0, 819, 0, 0, 771, 821, 822,
	827, 828, 0, 730, 731, 732, 829, 0, 0, 0,
	561, 0, 745, 314, 316, 34, 0, 239, 0, 242,
	0, 0, 0, 0, 248, 249, 0, 0, 0, 0,
	259, 266, 0, 306, 886, 0, 306, 0, 0, 0,
	0, 0, 49, 0, 0, 320, 0, 52, 52, 309,
	0, 0, 219, 220, 313, 311, 63, 0, 0, 357,
	0, 0, 0, 363, 373, 0, 511, 506, 596, 0,
	0, 0, 0, 0, 0, 0, 0, 343, 354, 0,
	347, 348, 395, 0, 439, 437, 473, 0, 475, 0,
	0, 0, 477, 456, 466, 0, 468, 471, 0, 458,
	0, 0, 451, 0, 449, 450, 471, 479, 0, 0,
	0, 0, -2, 0, 649, -2, -2, 767, 798, 843,
	837, 891, 421, 704, 706, 707, 756, 753, 0, 740,
	722, 723, 815, 0, 0, 0, 0, 798, 770, 729,
	0, 735, 736, 534, 396, 36, 0, 243, 244, 906,
	0, 247, 250, 0, 252, 908, 234, 0, 263, 264,
	298, 299, 302, 300, 303, 421, 261, 0, 38, 39,
	48, 56, 40, 46, 0, 0, 484, 0, 0, 0,
	68, 66, 0, 0, 0, 381, 382, 0, 0, 266,
	0, 256, 234, 224, 266, 0, 0, 349, 350, 744,
	746, 0, 474, 0, 493, 476, 471, 467, 0, 483,
	411, 454, 0, 455, 0, 483, 0, 0, 462, -2,
	-2, 650, 769, 0, 421, 0, 742, -2, 0, 0,
	0, 772, 0, 241, 245, 0, 0, 272, 0, 260,
	0, 306, 0, 0, 58, 0, 315, 317, 0, 0,
	70, 67, 0, 0, 366, 504, 368, 0, 234, 266,
	222, 234, 0, 351, 352, 0, 0, 0, 0, 469,
	463, 0, 452, 447, 0, 459, 0, 480, 705, 759,
	0, -2, 0, 685, 734, 0, 251, 277, 0, 0,
	0, 301, 703, 268, 42, 0, 55, 421, 69, 65,
	0, 367, 0, 254, 234, 293, 0, 344, 747, 748,
	492, 457, 471, 0, 478, 0, 0, 0, 755, 686,
	0, 253, 273, 274, 0, 269, 270, 271, 907, 265,
	272, 57, 0, 504, 0, 255, 266, 483, 448, 752,
	757, 760, -2, 1036, 938, 0, 758, 246, 275, 0,
	276, 0, 0, 0, 277, 0, 365, 237, 234, 464,
	0, 762, 763, 764, 765, 766, 278, 0, 281, 282,
	0, 279, 262, 233, 235, 236, 294, 0, 280, 283,
	284, 761,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 309, 3, 315, 310, 3,
	320, 321, 313, 311, 324, 312, 322, 314, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 328, 323,
	303, 305, 304, 3, 325, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 318, 3, 319, 308, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 326, 307, 327, 317,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 306, 57646, 316, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:781
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:787
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:793
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 29:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:840
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:846
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:862
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:886
		{
			return unimplemented(sqllex)
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:909
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:912
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:919
		{
			return unimplemented(sqllex)
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:938
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = nil
		}
	case 50:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.union.val = DropCascade
		}
	case 51:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = DropRestrict
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = DropDefault
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:981
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:982
		{
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:985
		{
			return unimplemented(sqllex)
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:986
		{
		}
	case 59:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:990
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].str, IncrementalFrom: sqlDollar[6].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:994
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.strs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1000
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1010
		{
			sqlVAL.union.val = sqlDollar[3].union.strs()
		}
	case 64:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1014
		{
			sqlVAL.union.val = []string(nil)
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 66:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.str = ""
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1030
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1036
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 70:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1049
		{
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1100
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1140
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 96:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1179
		{ /* SKIP DOC */
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1217
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1272
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1304
		{
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1308
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1319
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1351
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1366
		{
			return unimplemented(sqllex)
		}
	case 146:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{ /* SKIP DOC */
		}
	case 149:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1438
		{
			return unimplemented(sqllex)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return unimplemented(sqllex)
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.union.val = Low
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.union.val = Normal
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = High
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1505
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			return unimplemented(sqllex)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1554
		{
			return unimplemented(sqllex)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1555
		{
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1599
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1603
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1607
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 218:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1697
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1704
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1720
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1726
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 233:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1740
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1747
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1751
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = DropDefault
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1782
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1966
		{
			return unimplemented(sqllex)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1967
		{
			return unimplemented(sqllex)
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return unimplemented(sqllex)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1969
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			return unimplemented(sqllex)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex)
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1978
		{
			return unimplemented(sqllex)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			return unimplemented(sqllex)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1980
		{
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return unimplemented(sqllex)
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1986
		{
			return unimplemented(sqllex)
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1989
		{
			return unimplemented(sqllex)
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1990
		{
			return unimplemented(sqllex)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1991
		{
			return unimplemented(sqllex)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			return unimplemented(sqllex)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1993
		{
			return unimplemented(sqllex)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2025
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2060
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = true
		}
	case 296:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = false
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2097
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2101
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2105
		{
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = Ascending
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = Descending
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2117
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2136
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2140
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2144
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2148
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2159
		{
			return unimplemented(sqllex)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2160
		{
			return unimplemented(sqllex)
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = true
		}
	case 319:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = false
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2174
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2207
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2217
		{
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.str = ""
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 334:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2233
		{
			sqlVAL.str = ""
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2265
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2271
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2287
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 346:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.str = ""
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.str = ""
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 350:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.str = ""
		}
	case 351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2339
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2340
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 357:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2360
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 358:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = AbsentReturningClause
		}
	case 359:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2368
		{
			return unimplementedWithIssue(sqllex, 6637)
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2390
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2394
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2404
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2410
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2414
		{
			return unimplemented(sqllex)
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2422
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2427
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 373:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2438
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2444
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2445
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2475
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2479
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2552
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2568
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2615
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2672
		{
			return unimplemented(sqllex)
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2673
		{
			return unimplemented(sqllex)
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			return unimplemented(sqllex)
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2677
		{
			return unimplemented(sqllex)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2678
		{
			return unimplemented(sqllex)
		}
	case 407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2681
		{
			return unimplemented(sqllex)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2685
		{
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			return unimplemented(sqllex)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2689
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2692
		{
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2693
		{
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2697
		{
			sqlVAL.union.val = true
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = false
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = false
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2711
		{
			sqlVAL.union.val = true
		}
	case 418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
		}
	case 419:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2717
		{
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 421:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2725
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2747
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2755
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2764
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2816
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2817
		{
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 438:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2875
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = &From{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2911
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = &IndexHints{NoScan: true}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2931
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) &&
				(a.Index != b.Index || a.IndexID != b.IndexID) {
				sqllex.Error("conflicting FORCE_INDEX hints")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			a.NoScan = a.NoScan || b.NoScan
			sqlVAL.union.val = a
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2956
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2973
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2996
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = nil
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3034
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3040
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 470:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = true
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = false
		}
	case 472:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.str = astFullJoin
		}
	case 487:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.str = astLeftJoin
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.str = astRightJoin
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.str = astInnerJoin
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3152
		{
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3185
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3238
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3251
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3266
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3275
		{
			return unimplemented(sqllex)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3305
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3309
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3334
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3343
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = nil
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3392
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3414
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3423
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3465
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3469
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3487
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3519
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3549
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3558
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3559
		{
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3564
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3568
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3572
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3576
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 579:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3580
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.union.val = year
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = month
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = day
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = hour
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = minute
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = month
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = hour
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3625
		{
			sqlVAL.union.val = minute
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = minute
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3645
		{
			sqlVAL.union.val = nil
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = second
		}
	case 596:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3654
		{
			return unimplemented(sqllex)
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3689
		{
			return unimplemented(sqllex)
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3746
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3754
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3770
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3774
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3782
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3786
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3849
		{
			return unimplemented(sqllex)
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3867
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3871
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3875
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3879
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3891
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3895
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3899
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3903
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3907
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3915
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4019
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4088
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4141
		{
			return unimplemented(sqllex)
		}
	case 705:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4142
		{
			return unimplemented(sqllex)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4165
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4172
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			return unimplemented(sqllex)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4182
		{
			return unimplemented(sqllex)
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4186
		{
			return unimplemented(sqllex)
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4203
		{
			return unimplemented(sqllex)
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4204
		{
			return unimplemented(sqllex)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			return unimplemented(sqllex)
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4220
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4228
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4235
		{
			return unimplemented(sqllex)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4269
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4273
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4279
		{
			return unimplemented(sqllex)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4280
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = Window(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4315
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.str = ""
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4363
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4377
		{
			return unimplemented(sqllex)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4378
		{
			return unimplemented(sqllex)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4379
		{
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			return unimplemented(sqllex)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4383
		{
			return unimplemented(sqllex)
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4389
		{
			return unimplemented(sqllex)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4390
		{
			return unimplemented(sqllex)
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4391
		{
			return unimplemented(sqllex)
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4392
		{
			return unimplemented(sqllex)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4393
		{
			return unimplemented(sqllex)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4404
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = Any
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = Some
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = All
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = Plus
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4448
		{
			sqlVAL.union.val = Minus
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = Mult
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = Div
		}
	case 780:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = FloorDiv
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = Mod
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = Bitand
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = Bitor
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = Bitxor
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = Bitxor
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = LT
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = GT
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4459
		{
			sqlVAL.union.val = EQ
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = LE
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = GE
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = NE
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = Like
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4467
		{
			sqlVAL.union.val = NotLike
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = ILike
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = NotILike
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 801:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 837:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4693
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
		}
	case 855:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4758
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 873:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4862
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4887
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4891
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4918
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4943
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4947
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4954
		{
			return unimplemented(sqllex)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4956
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4960
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = DNull
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4983
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4987
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4993
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 906:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.str = ""
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
