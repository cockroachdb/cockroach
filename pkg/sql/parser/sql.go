// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const CONTAINS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPLAIN = 57450
const EXTRACT = 57451
const EXTRACT_DURATION = 57452
const FALSE = 57453
const FAMILY = 57454
const FETCH = 57455
const FETCHVAL = 57456
const FETCHTEXT = 57457
const FETCHVAL_PATH = 57458
const FETCHTEXT_PATH = 57459
const FILTER = 57460
const FIRST = 57461
const FLOAT = 57462
const FLOAT4 = 57463
const FLOAT8 = 57464
const FLOORDIV = 57465
const FOLLOWING = 57466
const FOR = 57467
const FORCE_INDEX = 57468
const FOREIGN = 57469
const FROM = 57470
const FULL = 57471
const GRANT = 57472
const GRANTS = 57473
const GREATEST = 57474
const GROUP = 57475
const GROUPING = 57476
const HAVING = 57477
const HELP = 57478
const HIGH = 57479
const HOUR = 57480
const HAS_SOME = 57481
const HAS_ALL = 57482
const IDENTIFIED = 57483
const IMPORT = 57484
const INCREMENTAL = 57485
const IF = 57486
const IFNULL = 57487
const ILIKE = 57488
const IN = 57489
const INET = 57490
const INTERLEAVE = 57491
const INDEX = 57492
const INDEXES = 57493
const INITIALLY = 57494
const INNER = 57495
const INSERT = 57496
const INT = 57497
const INT2VECTOR = 57498
const INT2 = 57499
const INT4 = 57500
const INT8 = 57501
const INT64 = 57502
const INTEGER = 57503
const INTERSECT = 57504
const INTERVAL = 57505
const INTO = 57506
const IS = 57507
const ISOLATION = 57508
const JOB = 57509
const JOBS = 57510
const JOIN = 57511
const KEY = 57512
const KEYS = 57513
const KV = 57514
const LATERAL = 57515
const LC_CTYPE = 57516
const LC_COLLATE = 57517
const LEADING = 57518
const LEAST = 57519
const LEFT = 57520
const LEVEL = 57521
const LIKE = 57522
const LIMIT = 57523
const LOCAL = 57524
const LOCALTIME = 57525
const LOCALTIMESTAMP = 57526
const LOW = 57527
const LSHIFT = 57528
const MATCH = 57529
const MINUTE = 57530
const MONTH = 57531
const NAN = 57532
const NAME = 57533
const NAMES = 57534
const NATURAL = 57535
const NEXT = 57536
const NO = 57537
const NO_INDEX_JOIN = 57538
const NORMAL = 57539
const NOT = 57540
const NOTHING = 57541
const NULL = 57542
const NULLIF = 57543
const NULLS = 57544
const NUMERIC = 57545
const OF = 57546
const OFF = 57547
const OFFSET = 57548
const OID = 57549
const ON = 57550
const ONLY = 57551
const OPTIONS = 57552
const OR = 57553
const ORDER = 57554
const ORDINALITY = 57555
const OUT = 57556
const OUTER = 57557
const OVER = 57558
const OVERLAPS = 57559
const OVERLAY = 57560
const PARENT = 57561
const PARTIAL = 57562
const PARTITION = 57563
const PASSWORD = 57564
const PAUSE = 57565
const PLACING = 57566
const PLANS = 57567
const POSITION = 57568
const PRECEDING = 57569
const PRECISION = 57570
const PREPARE = 57571
const PRIMARY = 57572
const PRIORITY = 57573
const QUERIES = 57574
const QUERY = 57575
const RANGE = 57576
const READ = 57577
const REAL = 57578
const RECURSIVE = 57579
const REF = 57580
const REFERENCES = 57581
const REGCLASS = 57582
const REGPROC = 57583
const REGPROCEDURE = 57584
const REGNAMESPACE = 57585
const REGTYPE = 57586
const REMOVE_PATH = 57587
const RENAME = 57588
const REPEATABLE = 57589
const RELEASE = 57590
const RESET = 57591
const RESTORE = 57592
const RESTRICT = 57593
const RESUME = 57594
const RETURNING = 57595
const REVOKE = 57596
const RIGHT = 57597
const ROLLBACK = 57598
const ROLLUP = 57599
const ROW = 57600
const ROWS = 57601
const RSHIFT = 57602
const SAVEPOINT = 57603
const SCATTER = 57604
const SEARCH = 57605
const SECOND = 57606
const SELECT = 57607
const SEQUENCES = 57608
const SERIAL = 57609
const SERIALIZABLE = 57610
const SESSION = 57611
const SESSIONS = 57612
const SESSION_USER = 57613
const SET = 57614
const SETTING = 57615
const SETTINGS = 57616
const SHOW = 57617
const SIMILAR = 57618
const SIMPLE = 57619
const SMALLINT = 57620
const SMALLSERIAL = 57621
const SNAPSHOT = 57622
const SOME = 57623
const SPLIT = 57624
const SQL = 57625
const START = 57626
const STATUS = 57627
const STDIN = 57628
const STRICT = 57629
const STRING = 57630
const STORE = 57631
const STORING = 57632
const SUBSTRING = 57633
const SYMMETRIC = 57634
const SYSTEM = 57635
const TABLE = 57636
const TABLES = 57637
const TEMP = 57638
const TEMPLATE = 57639
const TEMPORARY = 57640
const TESTING_RANGES = 57641
const TESTING_RELOCATE = 57642
const TEXT = 57643
const THEN = 57644
const TIME = 57645
const TIMESTAMP = 57646
const TIMESTAMPTZ = 57647
const TO = 57648
const TRAILING = 57649
const TRACE = 57650
const TRANSACTION = 57651
const TREAT = 57652
const TRIM = 57653
const TRUE = 57654
const TRUNCATE = 57655
const TYPE = 57656
const UNBOUNDED = 57657
const UNCOMMITTED = 57658
const UNION = 57659
const UNIQUE = 57660
const UNKNOWN = 57661
const UPDATE = 57662
const UPSERT = 57663
const USE = 57664
const USER = 57665
const USERS = 57666
const USING = 57667
const UUID = 57668
const VALID = 57669
const VALIDATE = 57670
const VALUE = 57671
const VALUES = 57672
const VARCHAR = 57673
const VARIADIC = 57674
const VIEW = 57675
const VARYING = 57676
const WHEN = 57677
const WHERE = 57678
const WINDOW = 57679
const WITH = 57680
const WITHIN = 57681
const WITHOUT = 57682
const WRITE = 57683
const YEAR = 57684
const ZONE = 57685
const NOT_LA = 57686
const WITH_LA = 57687
const AS_LA = 57688
const CONTAINED_BY = 57689
const HAS_SOME_KEY = 57690
const HAS_ALL_KEYS = 57691
const POSTFIXOP = 57692
const UMINUS = 57693
const HELPTOKEN = 57694

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IDENTIFIED",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6613

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	372, 53,
	-2, 689,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	150, 539,
	-2, 0,
	-1, 52,
	93, 689,
	154, 689,
	320, 689,
	321, 689,
	-2, 0,
	-1, 62,
	104, 664,
	113, 664,
	162, 664,
	181, 664,
	206, 664,
	212, 664,
	317, 664,
	-2, 653,
	-1, 94,
	4, 691,
	20, 691,
	21, 691,
	23, 691,
	28, 691,
	33, 691,
	34, 691,
	35, 691,
	36, 691,
	37, 691,
	38, 691,
	39, 691,
	40, 691,
	41, 691,
	42, 691,
	44, 691,
	45, 691,
	46, 691,
	47, 691,
	48, 691,
	51, 691,
	52, 691,
	53, 691,
	55, 691,
	56, 691,
	60, 691,
	61, 691,
	62, 691,
	64, 691,
	66, 691,
	68, 691,
	69, 691,
	72, 691,
	73, 691,
	74, 691,
	82, 691,
	83, 691,
	84, 691,
	85, 691,
	86, 691,
	87, 691,
	88, 691,
	89, 691,
	91, 691,
	93, 691,
	95, 691,
	98, 691,
	99, 691,
	101, 691,
	105, 691,
	106, 691,
	107, 691,
	108, 691,
	109, 691,
	110, 691,
	118, 691,
	119, 691,
	120, 691,
	121, 691,
	122, 691,
	124, 691,
	126, 691,
	131, 691,
	132, 691,
	134, 691,
	137, 691,
	138, 691,
	141, 691,
	142, 691,
	143, 691,
	144, 691,
	145, 691,
	148, 691,
	149, 691,
	151, 691,
	154, 691,
	155, 691,
	156, 691,
	157, 691,
	158, 691,
	159, 691,
	160, 691,
	161, 691,
	163, 691,
	166, 691,
	167, 691,
	168, 691,
	170, 691,
	171, 691,
	172, 691,
	174, 691,
	175, 691,
	177, 691,
	179, 691,
	182, 691,
	185, 691,
	187, 691,
	188, 691,
	189, 691,
	190, 691,
	191, 691,
	192, 691,
	194, 691,
	195, 691,
	196, 691,
	197, 691,
	201, 691,
	202, 691,
	203, 691,
	204, 691,
	205, 691,
	207, 691,
	209, 691,
	210, 691,
	213, 691,
	214, 691,
	216, 691,
	218, 691,
	219, 691,
	220, 691,
	221, 691,
	222, 691,
	223, 691,
	225, 691,
	226, 691,
	227, 691,
	228, 691,
	229, 691,
	231, 691,
	232, 691,
	233, 691,
	234, 691,
	235, 691,
	236, 691,
	237, 691,
	238, 691,
	240, 691,
	241, 691,
	242, 691,
	243, 691,
	244, 691,
	246, 691,
	247, 691,
	248, 691,
	249, 691,
	250, 691,
	251, 691,
	252, 691,
	254, 691,
	256, 691,
	257, 691,
	258, 691,
	259, 691,
	261, 691,
	262, 691,
	263, 691,
	264, 691,
	266, 691,
	267, 691,
	268, 691,
	269, 691,
	270, 691,
	272, 691,
	273, 691,
	274, 691,
	275, 691,
	277, 691,
	278, 691,
	279, 691,
	280, 691,
	282, 691,
	283, 691,
	284, 691,
	285, 691,
	286, 691,
	287, 691,
	288, 691,
	289, 691,
	290, 691,
	291, 691,
	293, 691,
	295, 691,
	296, 691,
	297, 691,
	298, 691,
	299, 691,
	300, 691,
	301, 691,
	303, 691,
	304, 691,
	305, 691,
	308, 691,
	309, 691,
	310, 691,
	311, 691,
	313, 691,
	314, 691,
	315, 691,
	316, 691,
	319, 691,
	320, 691,
	321, 691,
	322, 691,
	324, 691,
	326, 691,
	327, 691,
	328, 691,
	329, 691,
	330, 691,
	331, 691,
	334, 691,
	339, 691,
	340, 691,
	341, 691,
	342, 691,
	343, 691,
	-2, 0,
	-1, 110,
	104, 663,
	113, 663,
	162, 663,
	181, 663,
	206, 663,
	212, 663,
	317, 663,
	-2, 656,
	-1, 115,
	1, 590,
	166, 590,
	231, 590,
	235, 590,
	371, 590,
	372, 590,
	-2, 0,
	-1, 117,
	1, 590,
	371, 590,
	372, 590,
	-2, 0,
	-1, 118,
	1, 590,
	371, 590,
	372, 590,
	-2, 0,
	-1, 119,
	1, 594,
	371, 594,
	372, 594,
	-2, 0,
	-1, 137,
	4, 697,
	5, 697,
	6, 697,
	7, 697,
	8, 697,
	9, 697,
	20, 697,
	21, 697,
	23, 697,
	28, 697,
	29, 697,
	33, 697,
	34, 697,
	35, 697,
	36, 697,
	37, 697,
	38, 697,
	39, 697,
	40, 697,
	41, 697,
	42, 697,
	44, 697,
	45, 697,
	46, 697,
	47, 697,
	48, 697,
	49, 697,
	50, 697,
	51, 697,
	52, 697,
	53, 697,
	55, 697,
	56, 697,
	58, 697,
	60, 697,
	61, 697,
	62, 697,
	64, 697,
	66, 697,
	68, 697,
	69, 697,
	71, 697,
	72, 697,
	73, 697,
	74, 697,
	76, 697,
	77, 697,
	78, 697,
	80, 697,
	81, 697,
	82, 697,
	83, 697,
	84, 697,
	85, 697,
	86, 697,
	87, 697,
	88, 697,
	89, 697,
	91, 697,
	93, 697,
	95, 697,
	98, 697,
	99, 697,
	101, 697,
	105, 697,
	106, 697,
	107, 697,
	108, 697,
	109, 697,
	110, 697,
	111, 697,
	112, 697,
	118, 697,
	119, 697,
	120, 697,
	121, 697,
	122, 697,
	124, 697,
	126, 697,
	129, 697,
	131, 697,
	132, 697,
	134, 697,
	137, 697,
	138, 697,
	141, 697,
	142, 697,
	143, 697,
	144, 697,
	145, 697,
	146, 697,
	148, 697,
	149, 697,
	151, 697,
	153, 697,
	154, 697,
	155, 697,
	156, 697,
	157, 697,
	158, 697,
	159, 697,
	160, 697,
	161, 697,
	163, 697,
	165, 697,
	166, 697,
	167, 697,
	168, 697,
	169, 697,
	170, 697,
	171, 697,
	172, 697,
	174, 697,
	175, 697,
	177, 697,
	178, 697,
	179, 697,
	180, 697,
	182, 697,
	185, 697,
	187, 697,
	188, 697,
	189, 697,
	190, 697,
	191, 697,
	192, 697,
	193, 697,
	194, 697,
	195, 697,
	196, 697,
	197, 697,
	198, 697,
	200, 697,
	201, 697,
	202, 697,
	203, 697,
	204, 697,
	205, 697,
	207, 697,
	210, 697,
	213, 697,
	214, 697,
	215, 697,
	216, 697,
	217, 697,
	218, 697,
	219, 697,
	220, 697,
	221, 697,
	222, 697,
	223, 697,
	225, 697,
	226, 697,
	227, 697,
	228, 697,
	229, 697,
	231, 697,
	232, 697,
	233, 697,
	234, 697,
	235, 697,
	236, 697,
	237, 697,
	238, 697,
	240, 697,
	241, 697,
	242, 697,
	243, 697,
	244, 697,
	246, 697,
	247, 697,
	248, 697,
	249, 697,
	250, 697,
	251, 697,
	252, 697,
	254, 697,
	255, 697,
	256, 697,
	257, 697,
	258, 697,
	259, 697,
	261, 697,
	262, 697,
	263, 697,
	264, 697,
	266, 697,
	267, 697,
	268, 697,
	269, 697,
	270, 697,
	271, 697,
	272, 697,
	273, 697,
	274, 697,
	275, 697,
	276, 697,
	277, 697,
	278, 697,
	279, 697,
	280, 697,
	282, 697,
	283, 697,
	284, 697,
	285, 697,
	286, 697,
	287, 697,
	288, 697,
	289, 697,
	290, 697,
	291, 697,
	293, 697,
	295, 697,
	296, 697,
	297, 697,
	298, 697,
	299, 697,
	300, 697,
	301, 697,
	303, 697,
	304, 697,
	305, 697,
	308, 697,
	309, 697,
	310, 697,
	311, 697,
	312, 697,
	313, 697,
	314, 697,
	315, 697,
	316, 697,
	319, 697,
	320, 697,
	321, 697,
	322, 697,
	323, 697,
	324, 697,
	326, 697,
	327, 697,
	328, 697,
	329, 697,
	330, 697,
	331, 697,
	334, 697,
	339, 697,
	340, 697,
	341, 697,
	342, 697,
	343, 697,
	344, 697,
	354, 697,
	359, 697,
	360, 697,
	361, 697,
	368, 697,
	374, 697,
	-2, 0,
	-1, 140,
	1, 53,
	372, 53,
	-2, 689,
	-1, 496,
	128, 1299,
	306, 1299,
	349, 1299,
	370, 1299,
	-2, 0,
	-1, 497,
	128, 1251,
	306, 1251,
	349, 1251,
	370, 1251,
	-2, 0,
	-1, 499,
	128, 1357,
	306, 1357,
	349, 1357,
	370, 1357,
	-2, 0,
	-1, 501,
	128, 1379,
	306, 1379,
	349, 1379,
	370, 1379,
	-2, 0,
	-1, 508,
	128, 1304,
	306, 1304,
	349, 1304,
	370, 1304,
	-2, 330,
	-1, 534,
	1, 407,
	367, 407,
	369, 407,
	371, 407,
	372, 407,
	-2, 0,
	-1, 535,
	1, 454,
	125, 454,
	367, 454,
	369, 454,
	371, 454,
	372, 454,
	-2, 0,
	-1, 541,
	1, 421,
	367, 421,
	369, 421,
	371, 421,
	372, 421,
	-2, 0,
	-1, 543,
	1, 425,
	367, 425,
	369, 425,
	371, 425,
	372, 425,
	-2, 0,
	-1, 546,
	1, 433,
	367, 433,
	369, 433,
	371, 433,
	372, 433,
	-2, 0,
	-1, 547,
	1, 438,
	367, 438,
	369, 438,
	371, 438,
	372, 438,
	-2, 0,
	-1, 550,
	1, 448,
	367, 448,
	369, 448,
	371, 448,
	372, 448,
	-2, 0,
	-1, 573,
	113, 699,
	181, 699,
	206, 699,
	-2, 659,
	-1, 580,
	113, 698,
	181, 698,
	206, 698,
	-2, 657,
	-1, 637,
	368, 1229,
	-2, 1222,
	-1, 638,
	368, 1230,
	-2, 1223,
	-1, 644,
	5, 876,
	368, 876,
	-2, 1431,
	-1, 669,
	5, 835,
	-2, 1400,
	-1, 670,
	5, 870,
	368, 870,
	-2, 1402,
	-1, 671,
	5, 845,
	-2, 1403,
	-1, 672,
	5, 844,
	-2, 1404,
	-1, 673,
	5, 870,
	368, 870,
	-2, 1407,
	-1, 674,
	5, 870,
	368, 870,
	-2, 1408,
	-1, 675,
	5, 871,
	-2, 1411,
	-1, 676,
	5, 827,
	-2, 1412,
	-1, 677,
	5, 827,
	-2, 1413,
	-1, 678,
	5, 852,
	-2, 1417,
	-1, 679,
	5, 837,
	-2, 1418,
	-1, 680,
	5, 838,
	-2, 1419,
	-1, 681,
	5, 828,
	-2, 1425,
	-1, 682,
	5, 829,
	-2, 1426,
	-1, 683,
	5, 830,
	-2, 1427,
	-1, 684,
	5, 831,
	-2, 1428,
	-1, 685,
	5, 832,
	-2, 1429,
	-1, 686,
	5, 833,
	-2, 1430,
	-1, 687,
	5, 827,
	-2, 1435,
	-1, 688,
	5, 836,
	-2, 1440,
	-1, 689,
	5, 834,
	-2, 1443,
	-1, 690,
	5, 868,
	368, 868,
	-2, 1445,
	-1, 691,
	5, 872,
	-2, 1448,
	-1, 692,
	5, 874,
	-2, 1449,
	-1, 693,
	5, 867,
	368, 867,
	-2, 1454,
	-1, 801,
	222, 687,
	-2, 532,
	-1, 806,
	208, 1226,
	-2, 0,
	-1, 842,
	1, 215,
	367, 215,
	369, 215,
	371, 215,
	372, 215,
	-2, 662,
	-1, 845,
	4, 1453,
	10, 1453,
	11, 1453,
	13, 1453,
	14, 1453,
	15, 1453,
	16, 1453,
	17, 1453,
	18, 1453,
	20, 1453,
	21, 1453,
	23, 1453,
	26, 1453,
	28, 1453,
	30, 1453,
	33, 1453,
	34, 1453,
	35, 1453,
	36, 1453,
	37, 1453,
	38, 1453,
	39, 1453,
	40, 1453,
	41, 1453,
	42, 1453,
	44, 1453,
	45, 1453,
	46, 1453,
	47, 1453,
	48, 1453,
	51, 1453,
	52, 1453,
	53, 1453,
	55, 1453,
	56, 1453,
	57, 1453,
	60, 1453,
	61, 1453,
	62, 1453,
	63, 1453,
	64, 1453,
	66, 1453,
	67, 1453,
	68, 1453,
	69, 1453,
	71, 1453,
	72, 1453,
	73, 1453,
	74, 1453,
	82, 1453,
	83, 1453,
	84, 1453,
	85, 1453,
	86, 1453,
	87, 1453,
	88, 1453,
	89, 1453,
	91, 1453,
	93, 1453,
	95, 1453,
	98, 1453,
	99, 1453,
	101, 1453,
	105, 1453,
	106, 1453,
	107, 1453,
	108, 1453,
	109, 1453,
	110, 1453,
	114, 1453,
	115, 1453,
	116, 1453,
	117, 1453,
	118, 1453,
	119, 1453,
	120, 1453,
	121, 1453,
	122, 1453,
	123, 1453,
	124, 1453,
	126, 1453,
	129, 1453,
	131, 1453,
	132, 1453,
	134, 1453,
	137, 1453,
	138, 1453,
	141, 1453,
	142, 1453,
	143, 1453,
	144, 1453,
	145, 1453,
	146, 1453,
	147, 1453,
	148, 1453,
	149, 1453,
	151, 1453,
	153, 1453,
	154, 1453,
	155, 1453,
	156, 1453,
	157, 1453,
	158, 1453,
	159, 1453,
	160, 1453,
	161, 1453,
	163, 1453,
	165, 1453,
	166, 1453,
	167, 1453,
	168, 1453,
	169, 1453,
	170, 1453,
	171, 1453,
	172, 1453,
	174, 1453,
	175, 1453,
	177, 1453,
	178, 1453,
	179, 1453,
	180, 1453,
	182, 1453,
	185, 1453,
	186, 1453,
	187, 1453,
	188, 1453,
	189, 1453,
	190, 1453,
	191, 1453,
	192, 1453,
	193, 1453,
	194, 1453,
	195, 1453,
	196, 1453,
	197, 1453,
	201, 1453,
	202, 1453,
	203, 1453,
	204, 1453,
	205, 1453,
	207, 1453,
	210, 1453,
	211, 1453,
	213, 1453,
	214, 1453,
	216, 1453,
	218, 1453,
	219, 1453,
	220, 1453,
	221, 1453,
	222, 1453,
	223, 1453,
	225, 1453,
	226, 1453,
	227, 1453,
	228, 1453,
	229, 1453,
	231, 1453,
	232, 1453,
	233, 1453,
	234, 1453,
	235, 1453,
	236, 1453,
	237, 1453,
	238, 1453,
	240, 1453,
	241, 1453,
	242, 1453,
	243, 1453,
	244, 1453,
	245, 1453,
	246, 1453,
	247, 1453,
	248, 1453,
	249, 1453,
	250, 1453,
	251, 1453,
	252, 1453,
	254, 1453,
	255, 1453,
	256, 1453,
	257, 1453,
	258, 1453,
	259, 1453,
	260, 1453,
	261, 1453,
	262, 1453,
	263, 1453,
	264, 1453,
	266, 1453,
	267, 1453,
	268, 1453,
	269, 1453,
	270, 1453,
	272, 1453,
	273, 1453,
	274, 1453,
	275, 1453,
	276, 1453,
	277, 1453,
	278, 1453,
	279, 1453,
	280, 1453,
	282, 1453,
	283, 1453,
	284, 1453,
	285, 1453,
	286, 1453,
	287, 1453,
	288, 1453,
	289, 1453,
	290, 1453,
	291, 1453,
	293, 1453,
	295, 1453,
	296, 1453,
	297, 1453,
	298, 1453,
	299, 1453,
	300, 1453,
	301, 1453,
	303, 1453,
	304, 1453,
	305, 1453,
	308, 1453,
	309, 1453,
	310, 1453,
	311, 1453,
	313, 1453,
	314, 1453,
	315, 1453,
	316, 1453,
	319, 1453,
	320, 1453,
	321, 1453,
	322, 1453,
	324, 1453,
	326, 1453,
	327, 1453,
	328, 1453,
	329, 1453,
	330, 1453,
	331, 1453,
	334, 1453,
	339, 1453,
	340, 1453,
	341, 1453,
	342, 1453,
	343, 1453,
	344, 1453,
	345, 1453,
	347, 1453,
	348, 1453,
	349, 1453,
	350, 1453,
	351, 1453,
	352, 1453,
	353, 1453,
	354, 1453,
	356, 1453,
	357, 1453,
	358, 1453,
	359, 1453,
	360, 1453,
	361, 1453,
	362, 1453,
	363, 1453,
	364, 1453,
	366, 1453,
	369, 1453,
	370, 1453,
	373, 1453,
	374, 1453,
	-2, 0,
	-1, 861,
	128, 1357,
	306, 1357,
	349, 1357,
	370, 1357,
	-2, 0,
	-1, 878,
	128, 1379,
	306, 1379,
	349, 1379,
	370, 1379,
	-2, 0,
	-1, 879,
	166, 602,
	231, 602,
	235, 602,
	-2, 318,
	-1, 944,
	113, 698,
	181, 698,
	206, 698,
	-2, 660,
	-1, 1023,
	104, 664,
	113, 664,
	162, 664,
	181, 664,
	206, 664,
	212, 664,
	317, 664,
	-2, 1005,
	-1, 1033,
	368, 1206,
	-2, 1194,
	-1, 1051,
	369, 1118,
	-2, 0,
	-1, 1075,
	166, 602,
	231, 602,
	235, 602,
	-2, 597,
	-1, 1103,
	369, 1118,
	-2, 0,
	-1, 1107,
	104, 664,
	113, 664,
	162, 664,
	181, 664,
	206, 664,
	212, 664,
	317, 664,
	-2, 760,
	-1, 1333,
	166, 602,
	231, 602,
	235, 602,
	-2, 320,
	-1, 1431,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 911,
	-1, 1432,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 912,
	-1, 1433,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 913,
	-1, 1434,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 914,
	-1, 1435,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 915,
	-1, 1436,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 916,
	-1, 1437,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 917,
	-1, 1438,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 918,
	-1, 1447,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 927,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 928,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	353, 0,
	-2, 929,
	-1, 1452,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 934,
	-1, 1458,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 936,
	-1, 1460,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 940,
	-1, 1461,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 941,
	-1, 1462,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 942,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 943,
	-1, 1532,
	128, 1129,
	368, 1229,
	-2, 1222,
	-1, 1533,
	128, 1130,
	-2, 1396,
	-1, 1534,
	128, 1131,
	-2, 1303,
	-1, 1535,
	128, 1132,
	-2, 1266,
	-1, 1536,
	128, 1133,
	-2, 1282,
	-1, 1537,
	128, 1134,
	-2, 1302,
	-1, 1538,
	128, 1135,
	-2, 1354,
	-1, 1614,
	1, 761,
	71, 761,
	104, 761,
	113, 761,
	129, 761,
	133, 761,
	135, 761,
	153, 761,
	162, 761,
	169, 761,
	178, 761,
	181, 761,
	193, 761,
	206, 761,
	208, 761,
	212, 761,
	253, 761,
	255, 761,
	317, 761,
	325, 761,
	336, 761,
	337, 761,
	346, 761,
	367, 761,
	369, 761,
	371, 761,
	372, 761,
	373, 761,
	-2, 760,
	-1, 1760,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 935,
	-1, 1761,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 937,
	-1, 1766,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 938,
	-1, 1784,
	217, 1089,
	-2, 1091,
	-1, 1956,
	222, 687,
	-2, 532,
	-1, 2011,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 939,
	-1, 2016,
	165, 0,
	-2, 955,
	-1, 2025,
	217, 1090,
	-2, 1092,
	-1, 2067,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 982,
	-1, 2068,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 983,
	-1, 2069,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 984,
	-1, 2073,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 988,
	-1, 2074,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 989,
	-1, 2075,
	13, 0,
	14, 0,
	15, 0,
	347, 0,
	348, 0,
	349, 0,
	-2, 990,
	-1, 2201,
	165, 0,
	-2, 956,
	-1, 2204,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 959,
	-1, 2205,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 961,
	-1, 2322,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 960,
	-1, 2323,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	146, 0,
	147, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 962,
	-1, 2330,
	165, 0,
	-2, 991,
	-1, 2407,
	165, 0,
	-2, 992,
	-1, 2484,
	36, 0,
	146, 0,
	180, 0,
	276, 0,
	344, 0,
	354, 0,
	-2, 1399,
}

const sqlPrivate = 57344

const sqlLast = 42729

var sqlAct = [...]int{

	638, 2156, 2483, 2492, 2458, 2356, 2531, 2493, 581, 2494,
	1688, 1680, 2044, 1994, 2412, 1232, 2303, 61, 2482, 1138,
	835, 2167, 1240, 597, 1754, 1609, 636, 2189, 614, 2191,
	2255, 795, 1960, 1276, 2336, 1659, 2269, 741, 176, 2127,
	1105, 2126, 176, 1677, 1898, 2183, 176, 1962, 765, 1658,
	1968, 1663, 176, 1101, 1689, 1234, 1877, 176, 176, 838,
	1084, 176, 2235, 1850, 176, 628, 1627, 1662, 451, 25,
	1610, 1235, 176, 635, 1618, 433, 1885, 2097, 1849, 1512,
	1795, 1405, 1410, 1029, 589, 105, 1750, 1487, 1652, 1358,
	882, 1475, 1228, 947, 1085, 1115, 1113, 608, 1496, 1472,
	1561, 1354, 1738, 747, 831, 881, 430, 1065, 1506, 1061,
	1660, 767, 843, 821, 1682, 828, 1666, 507, 1110, 1596,
	750, 1488, 1583, 1092, 729, 487, 1528, 1018, 110, 607,
	586, 946, 176, 176, 948, 1277, 167, 105, 630, 1357,
	176, 1075, 465, 1247, 818, 111, 500, 172, 727, 1074,
	2270, 528, 952, 2111, 1783, 2527, 2112, 1255, 1681, 1137,
	585, 585, 1255, 176, 176, 770, 176, 176, 1102, 1255,
	2508, 176, 176, 2504, 2268, 2503, 2009, 1704, 2500, 1704,
	613, 2480, 1137, 2479, 2453, 1265, 2448, 1265, 1715, 2444,
	2317, 1978, 580, 1137, 479, 1977, 1585, 2436, 2409, 2387,
	1253, 2268, 1715, 2268, 595, 1134, 2384, 783, 2382, 25,
	1137, 2367, 2268, 2366, 2344, 1137, 2341, 2268, 1137, 2324,
	1137, 1653, 396, 1715, 763, 105, 2291, 2288, 2267, 2248,
	1704, 1704, 2268, 1137, 574, 2203, 2182, 2177, 2107, 1715,
	1657, 1657, 2108, 2020, 1704, 1988, 504, 1704, 2100, 1949,
	1948, 573, 1874, 1867, 1137, 1865, 1137, 1868, 744, 1704,
	1864, 1653, 1685, 1787, 1704, 590, 755, 759, 1863, 1788,
	1725, 777, 1704, 2454, 1704, 1714, 1703, 1509, 36, 1715,
	1704, 731, 1656, 963, 964, 733, 1657, 734, 1265, 37,
	115, 177, 1590, 1269, 1265, 2317, 1589, 1270, 2100, 1584,
	2004, 1616, 40, 2080, 137, 2022, 966, 1949, 1753, 1489,
	1736, 1336, 1079, 1491, 1137, 781, 117, 963, 964, 863,
	748, 1704, 1794, 41, 140, 44, 2271, 1355, 1510, 860,
	965, 859, 858, 139, 857, 856, 855, 854, 853, 852,
	966, 851, 850, 757, 761, 137, 45, 779, 849, 848,
	47, 847, 846, 735, 50, 732, 579, 118, 1820, 1821,
	1256, 51, 578, 52, 965, 1256, 577, 576, 572, 138,
	458, 571, 1256, 570, 139, 569, 1711, 131, 1511, 1508,
	568, 37, 567, 566, 132, 53, 565, 37, 564, 560,
	559, 558, 526, 525, 40, 524, 971, 54, 523, 522,
	40, 521, 176, 770, 176, 520, 176, 112, 519, 176,
	138, 963, 964, 518, 517, 176, 516, 457, 515, 514,
	513, 512, 511, 1712, 176, 176, 176, 176, 770, 510,
	971, 495, 494, 770, 966, 493, 1977, 137, 492, 1525,
	491, 1584, 421, 399, 392, 391, 459, 160, 112, 159,
	586, 787, 1713, 51, 1513, 52, 771, 158, 965, 986,
	157, 176, 801, 156, 155, 154, 139, 153, 152, 151,
	150, 1826, 149, 148, 176, 147, 146, 145, 55, 144,
	1893, 143, 1261, 142, 56, 2526, 141, 1254, 1106, 54,
	176, 1523, 1521, 986, 1389, 54, 1361, 1820, 1821, 1519,
	176, 894, 138, 63, 113, 57, 2499, 58, 2481, 59,
	131, 119, 959, 2463, 2404, 2385, 60, 132, 820, 799,
	137, 804, 2310, 2234, 971, 2233, 2229, 71, 2228, 2221,
	90, 770, 1507, 987, 1836, 2220, 2219, 588, 825, 116,
	1684, 824, 824, 2215, 844, 2214, 2213, 2212, 794, 139,
	1835, 2206, 2188, 2094, 2089, 2088, 2087, 2030, 1720, 1951,
	1947, 694, 176, 1905, 1901, 1872, 1869, 987, 94, 1857,
	55, 1848, 1819, 1816, 1820, 1821, 55, 114, 1815, 1813,
	1800, 1799, 945, 1784, 1614, 138, 959, 986, 1820, 1821,
	897, 864, 1483, 131, 1273, 761, 113, 57, 892, 58,
	132, 742, 113, 57, 1104, 58, 779, 1037, 1837, 958,
	1826, 1103, 137, 1030, 792, 1021, 1740, 1239, 137, 460,
	2046, 2471, 90, 112, 2439, 460, 4, 2433, 90, 2432,
	586, 975, 967, 968, 969, 970, 972, 973, 2431, 787,
	2423, 139, 2421, 879, 2399, 2398, 876, 139, 2397, 2353,
	2332, 2318, 2297, 2274, 944, 2226, 2165, 2162, 2161, 2159,
	2135, 987, 1820, 1821, 2134, 943, 967, 968, 969, 970,
	972, 973, 2115, 1836, 2103, 1992, 2015, 138, 1938, 1356,
	1749, 895, 2309, 138, 1931, 131, 1918, 1826, 1748, 1917,
	1903, 131, 132, 1873, 771, 1847, 1809, 1808, 132, 963,
	964, 1826, 1484, 1805, 1831, 1829, 1830, 1822, 1823, 1824,
	1825, 1827, 1828, 1780, 1775, 112, 1030, 1477, 574, 771,
	1066, 112, 966, 1069, 771, 1601, 772, 176, 1573, 176,
	1517, 1231, 743, 963, 964, 573, 955, 956, 1082, 1073,
	1059, 1058, 761, 960, 1057, 1056, 965, 1837, 1055, 1054,
	1836, 1053, 176, 176, 1052, 1051, 966, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 1050, 1090, 1049, 586,
	1048, 1047, 1083, 1046, 1033, 1826, 1045, 1918, 963, 964,
	965, 770, 176, 1063, 1064, 1067, 1044, 1043, 1141, 1042,
	1041, 1034, 1022, 1021, 176, 1070, 875, 867, 1088, 840,
	137, 966, 2415, 2316, 1717, 2208, 1524, 176, 2187, 2110,
	2106, 1786, 971, 176, 1602, 176, 1990, 176, 1820, 1821,
	1238, 176, 771, 1019, 1837, 965, 1230, 1104, 1963, 139,
	2320, 105, 2319, 2313, 2113, 1724, 1071, 1979, 1836, 1653,
	1135, 1072, 1891, 1831, 1829, 1830, 1822, 1823, 1824, 1825,
	1827, 1828, 1078, 1100, 793, 1123, 631, 1106, 1522, 1520,
	941, 1871, 176, 176, 1870, 138, 1518, 1076, 1759, 770,
	888, 176, 1108, 131, 176, 1121, 891, 1080, 1723, 1244,
	132, 1039, 1995, 1236, 2337, 1681, 1342, 2047, 1791, 1328,
	1497, 971, 1274, 1122, 1062, 1141, 1973, 2122, 2466, 935,
	176, 1708, 427, 112, 402, 176, 164, 2443, 2523, 426,
	176, 176, 1837, 176, 1362, 176, 820, 176, 422, 176,
	2282, 161, 1025, 1822, 1823, 1824, 1825, 1827, 1828, 1136,
	176, 1726, 748, 1111, 722, 1509, 176, 176, 936, 1824,
	1825, 1827, 1828, 1116, 2001, 1117, 2377, 2524, 2376, 720,
	2375, 2374, 400, 2151, 1104, 927, 165, 1246, 1820, 1821,
	1249, 2148, 176, 1116, 772, 1117, 1141, 743, 2119, 2118,
	1036, 718, 1804, 724, 1229, 425, 1803, 1346, 1345, 1802,
	1355, 1352, 1801, 2294, 715, 1419, 1510, 405, 1762, 772,
	1707, 1649, 1645, 761, 772, 1248, 1641, 1248, 1459, 1271,
	426, 1077, 780, 165, 1577, 1576, 1272, 1329, 876, 105,
	1830, 1822, 1823, 1824, 1825, 1827, 1828, 1363, 1343, 1420,
	1333, 1118, 166, 1678, 1387, 1386, 1258, 1347, 2442, 1260,
	1359, 1377, 584, 1263, 405, 1991, 1511, 1508, 1628, 586,
	2154, 1118, 1392, 562, 586, 474, 1370, 2155, 967, 968,
	969, 970, 972, 973, 889, 934, 1944, 1474, 1620, 1226,
	962, 1474, 696, 1349, 2146, 1230, 425, 1366, 2477, 166,
	1481, 1826, 771, 1772, 2358, 1479, 411, 1390, 176, 1142,
	176, 574, 1391, 176, 574, 574, 1250, 973, 1770, 2515,
	583, 2137, 772, 1513, 176, 1751, 1752, 890, 1401, 1411,
	1418, 1402, 1403, 1141, 1971, 1970, 176, 1940, 2040, 1933,
	176, 1631, 1513, 176, 1494, 921, 1128, 176, 1582, 424,
	1330, 176, 1604, 1497, 963, 964, 176, 586, 770, 969,
	970, 972, 973, 1620, 176, 1141, 1322, 412, 176, 1619,
	585, 1718, 1603, 1388, 2496, 1485, 1482, 966, 427, 1970,
	1267, 1367, 1492, 922, 1651, 1350, 874, 1371, 423, 1372,
	771, 1373, 2426, 1374, 2450, 1375, 162, 1767, 1621, 1385,
	1124, 965, 1828, 1556, 2523, 1539, 1116, 1768, 1117, 2002,
	1099, 1773, 1381, 1383, 1513, 1331, 1142, 1644, 1929, 2451,
	1507, 1639, 1632, 1634, 2539, 164, 458, 401, 2000, 1647,
	1255, 940, 1060, 1579, 1580, 163, 2328, 37, 1409, 1672,
	424, 1588, 1593, 162, 1630, 2381, 1598, 1599, 1594, 931,
	40, 406, 1807, 695, 1637, 1607, 402, 2514, 1016, 1642,
	1108, 900, 176, 1624, 1597, 2497, 403, 971, 1650, 427,
	176, 716, 164, 457, 401, 582, 1613, 585, 393, 423,
	1119, 176, 163, 176, 1118, 176, 716, 1142, 176, 466,
	176, 926, 176, 176, 2138, 176, 770, 770, 406, 2195,
	1119, 770, 459, 402, 748, 176, 601, 726, 717, 51,
	725, 52, 471, 403, 932, 2495, 2522, 1702, 467, 1769,
	748, 716, 2498, 1615, 908, 2359, 1771, 1546, 2520, 2302,
	986, 761, 1629, 414, 413, 2144, 761, 1822, 1823, 1824,
	1825, 1827, 1828, 1675, 779, 54, 1683, 1764, 1683, 468,
	2263, 1473, 951, 870, 885, 1701, 862, 420, 2224, 1480,
	2513, 961, 1356, 1353, 2037, 563, 1025, 473, 933, 1365,
	1943, 2545, 772, 470, 1499, 2076, 950, 415, 1456, 1143,
	2534, 1710, 1334, 2369, 105, 2418, 2264, 1531, 1531, 1544,
	105, 2368, 1141, 1564, 1687, 2351, 1698, 1568, 1569, 1571,
	176, 1696, 1695, 1697, 987, 824, 1705, 824, 1699, 1132,
	1617, 1737, 844, 1706, 2038, 1709, 176, 176, 176, 886,
	176, 2121, 1719, 887, 1142, 1131, 55, 2540, 1914, 880,
	1910, 1114, 1676, 1256, 1729, 2281, 2278, 1245, 1237, 176,
	1233, 2036, 2280, 394, 949, 1129, 1731, 1721, 1067, 771,
	1070, 1341, 113, 57, 1091, 58, 1142, 873, 2459, 1380,
	772, 1692, 643, 1130, 1064, 1063, 2225, 1732, 137, 951,
	1470, 1727, 779, 779, 1337, 460, 1397, 2077, 90, 1730,
	896, 2544, 553, 2078, 469, 1468, 1143, 1091, 1454, 1457,
	1513, 901, 950, 105, 2259, 1899, 2260, 139, 2168, 1339,
	594, 974, 975, 967, 968, 969, 970, 972, 973, 395,
	2304, 1340, 1095, 1119, 2352, 1741, 169, 1920, 797, 1095,
	1919, 1743, 1453, 1745, 1757, 586, 2262, 2532, 1747, 902,
	909, 2263, 899, 138, 2256, 2265, 1098, 796, 1793, 472,
	1888, 131, 2254, 1098, 2277, 1095, 885, 2258, 132, 482,
	2279, 1398, 1093, 1592, 1591, 553, 476, 1143, 885, 1595,
	949, 1096, 554, 817, 1464, 1900, 815, 2264, 1096, 1098,
	583, 112, 1465, 594, 1466, 806, 1094, 2157, 1471, 1765,
	416, 2295, 1942, 2533, 1935, 1093, 1763, 771, 771, 2257,
	1126, 1887, 771, 885, 1096, 2349, 1742, 779, 1744, 586,
	761, 2236, 2098, 1516, 2535, 930, 1779, 456, 33, 1094,
	919, 886, 2331, 2223, 2261, 887, 176, 1141, 1455, 1758,
	2153, 417, 176, 176, 1790, 1875, 176, 2350, 1851, 2014,
	1881, 176, 917, 1945, 176, 554, 1880, 3, 1097, 455,
	32, 1814, 176, 1882, 1774, 1097, 454, 29, 176, 176,
	176, 418, 1722, 419, 176, 1655, 915, 176, 886, 1895,
	453, 67, 887, 176, 176, 176, 176, 176, 452, 66,
	555, 1097, 176, 1894, 770, 2259, 176, 2260, 1648, 913,
	176, 1640, 911, 1142, 939, 1904, 1467, 782, 176, 1854,
	1855, 1856, 785, 1469, 1143, 938, 868, 905, 176, 1852,
	176, 1890, 176, 770, 770, 1911, 176, 2262, 1886, 1876,
	176, 786, 1378, 623, 481, 176, 2265, 176, 1369, 772,
	1950, 475, 1952, 813, 176, 816, 1143, 1040, 814, 449,
	21, 929, 586, 1934, 1879, 1515, 918, 1930, 176, 770,
	1883, 1884, 1906, 555, 1889, 1937, 450, 22, 33, 556,
	2491, 173, 2456, 176, 1283, 397, 448, 27, 916, 407,
	1820, 1821, 1955, 1956, 1928, 428, 447, 19, 1975, 1953,
	477, 173, 2252, 1957, 485, 1351, 2142, 490, 753, 2140,
	32, 557, 914, 698, 2120, 509, 925, 29, 176, 1959,
	1679, 1915, 714, 1673, 1671, 2261, 748, 1266, 1987, 445,
	18, 67, 748, 748, 1966, 912, 748, 1972, 910, 66,
	446, 17, 1264, 437, 14, 1262, 1980, 1778, 1259, 1954,
	438, 15, 556, 904, 1781, 444, 49, 1915, 1907, 436,
	48, 1257, 443, 11, 697, 2032, 2033, 2034, 176, 2017,
	1986, 1797, 1798, 1997, 1998, 730, 730, 1999, 640, 812,
	1283, 1283, 1932, 397, 557, 1996, 2003, 772, 772, 1133,
	442, 42, 772, 2005, 1127, 2007, 435, 43, 1946, 1125,
	21, 441, 7, 1826, 440, 6, 397, 397, 1120, 775,
	397, 1989, 439, 35, 173, 784, 1958, 22, 434, 34,
	2027, 1846, 1961, 2392, 1755, 1229, 2524, 27, 1564, 1564,
	1564, 2023, 2026, 1859, 1229, 2315, 2314, 19, 1142, 924,
	719, 721, 2039, 2041, 2042, 1360, 2184, 738, 953, 176,
	2048, 2394, 1636, 1620, 2050, 176, 2053, 1981, 1982, 1635,
	1983, 1984, 2021, 2055, 176, 176, 1836, 739, 1620, 2176,
	18, 2428, 461, 2082, 1633, 2271, 903, 2406, 2237, 2149,
	2109, 17, 1643, 1143, 14, 957, 1646, 1756, 1638, 2083,
	1316, 15, 2455, 2300, 1686, 771, 49, 1674, 2008, 2116,
	48, 1670, 2114, 11, 1581, 2132, 1332, 1411, 2051, 2096,
	176, 1275, 176, 618, 62, 2152, 1411, 2056, 105, 2101,
	176, 2102, 954, 770, 771, 771, 2099, 963, 964, 2081,
	2163, 42, 483, 2530, 2160, 2117, 2543, 43, 176, 176,
	1837, 740, 7, 2124, 2133, 6, 1820, 1821, 2178, 2086,
	966, 2210, 2131, 35, 963, 964, 176, 963, 964, 34,
	771, 1734, 1733, 2181, 2145, 176, 62, 2105, 2343, 2169,
	1141, 2170, 2164, 2242, 965, 2186, 2172, 2158, 2095, 2043,
	2173, 592, 1734, 553, 1993, 1896, 1316, 1316, 1866, 2198,
	1735, 2174, 2179, 2197, 2185, 2180, 2171, 1578, 1575, 1574,
	1505, 594, 1027, 2035, 965, 1037, 1035, 176, 937, 2202,
	928, 923, 920, 906, 872, 1335, 561, 2357, 464, 575,
	1368, 907, 1892, 1600, 2449, 2216, 587, 1806, 2411, 748,
	2327, 1514, 1038, 46, 593, 2129, 617, 1829, 1830, 1822,
	1823, 1824, 1825, 1827, 1828, 509, 2253, 509, 2123, 807,
	1665, 1315, 810, 749, 62, 1664, 1144, 1879, 397, 1344,
	639, 176, 1530, 554, 176, 1412, 713, 509, 509, 397,
	832, 641, 1280, 642, 1141, 176, 176, 2222, 1281, 176,
	176, 176, 1068, 629, 1278, 2141, 841, 2143, 1690, 1348,
	1478, 1495, 1789, 2244, 1031, 484, 176, 609, 621, 2240,
	2246, 176, 620, 176, 509, 176, 176, 176, 1143, 176,
	770, 2247, 176, 1493, 770, 463, 2243, 509, 1692, 748,
	2241, 2132, 176, 176, 2239, 866, 2272, 1897, 2090, 1969,
	770, 2276, 2251, 871, 2293, 2308, 2275, 1396, 1746, 1393,
	1965, 2139, 404, 509, 1817, 839, 2132, 1315, 1315, 1553,
	1545, 1541, 2132, 942, 1089, 1017, 1691, 2298, 893, 1976,
	2133, 2296, 1716, 466, 1081, 772, 1404, 2301, 2131, 2290,
	737, 555, 2299, 736, 1338, 2307, 2305, 1728, 2306, 2238,
	2326, 1010, 1009, 2321, 723, 2133, 471, 2420, 1400, 2312,
	884, 2133, 467, 2131, 772, 772, 883, 1913, 2538, 2131,
	2427, 2147, 2136, 2465, 136, 397, 2311, 133, 2150, 135,
	134, 1941, 70, 176, 771, 176, 31, 1141, 176, 30,
	2333, 89, 88, 468, 462, 87, 176, 86, 85, 84,
	772, 83, 1141, 82, 2340, 81, 2347, 80, 79, 78,
	77, 748, 2342, 76, 463, 75, 74, 470, 591, 73,
	556, 2362, 72, 505, 2361, 2132, 502, 2363, 69, 68,
	1282, 1142, 1230, 176, 2345, 28, 770, 24, 2360, 93,
	176, 23, 65, 64, 26, 16, 10, 20, 176, 176,
	770, 770, 557, 2378, 2132, 2285, 109, 1547, 108, 2289,
	107, 106, 466, 13, 2133, 12, 2405, 104, 176, 2383,
	2391, 103, 2131, 176, 102, 2393, 2401, 2400, 101, 100,
	176, 2395, 2389, 9, 2390, 471, 8, 92, 2422, 39,
	2379, 467, 38, 2133, 91, 129, 2408, 126, 2414, 2386,
	128, 2131, 2417, 125, 2425, 176, 176, 2416, 127, 2402,
	2403, 99, 176, 130, 122, 123, 587, 2437, 2435, 124,
	770, 121, 468, 2438, 120, 176, 1282, 1282, 469, 770,
	770, 2424, 98, 97, 96, 1142, 95, 5, 2, 1,
	490, 0, 730, 2441, 0, 586, 470, 0, 2371, 2446,
	2447, 1090, 176, 0, 176, 0, 0, 176, 0, 1141,
	0, 0, 0, 0, 0, 397, 397, 2472, 2440, 0,
	2474, 771, 2473, 0, 0, 771, 2355, 0, 2467, 2462,
	0, 0, 0, 472, 0, 176, 2478, 0, 2476, 2461,
	0, 771, 0, 0, 0, 173, 2132, 0, 2490, 2489,
	2488, 0, 176, 0, 0, 2507, 0, 397, 176, 2505,
	2501, 2475, 1283, 2388, 2372, 2373, 0, 2512, 2509, 0,
	1243, 0, 176, 2510, 2511, 0, 397, 0, 397, 0,
	397, 0, 2521, 2519, 1251, 2133, 2525, 2506, 0, 0,
	0, 0, 0, 2131, 2528, 0, 0, 0, 1283, 0,
	0, 2529, 0, 0, 772, 0, 0, 469, 0, 2537,
	2541, 2536, 0, 2542, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 575, 0, 509, 173, 2339, 1142, 0,
	0, 0, 0, 0, 173, 0, 0, 509, 0, 0,
	0, 0, 2434, 1142, 1020, 0, 1023, 0, 0, 0,
	0, 1143, 1283, 1028, 0, 0, 0, 0, 0, 0,
	0, 0, 472, 509, 2365, 0, 0, 0, 509, 0,
	0, 0, 0, 173, 509, 0, 509, 771, 509, 0,
	509, 0, 509, 0, 0, 0, 0, 2464, 0, 0,
	0, 771, 771, 1379, 0, 0, 0, 0, 0, 509,
	509, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1283, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 509, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1692, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1283, 1283,
	0, 0, 1317, 0, 0, 1143, 0, 1283, 1283, 1820,
	1821, 771, 1838, 1839, 1840, 0, 1279, 0, 1316, 0,
	771, 771, 0, 0, 0, 2200, 0, 0, 0, 0,
	62, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	1283, 772, 0, 0, 0, 772, 2452, 1318, 1318, 0,
	1142, 0, 0, 0, 1316, 0, 0, 0, 0, 0,
	0, 772, 1835, 0, 0, 0, 0, 0, 0, 0,
	0, 2468, 2469, 2470, 0, 0, 0, 0, 0, 1547,
	1547, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 490, 0, 730, 0, 0, 784, 0, 1317, 1317,
	1776, 1777, 0, 0, 0, 0, 0, 397, 1316, 0,
	0, 0, 1279, 1279, 0, 0, 0, 0, 0, 1612,
	0, 0, 1826, 397, 0, 0, 397, 0, 0, 0,
	1625, 0, 0, 0, 397, 0, 0, 963, 964, 397,
	0, 0, 0, 0, 0, 0, 0, 397, 1143, 0,
	0, 1654, 0, 0, 0, 1547, 1547, 1547, 0, 0,
	966, 0, 0, 1143, 1841, 0, 0, 0, 1316, 0,
	0, 0, 0, 0, 0, 0, 1843, 1844, 1845, 1315,
	0, 0, 0, 0, 965, 1836, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 0, 1283, 0, 1316, 1316, 0, 0, 62, 0,
	0, 772, 772, 1316, 1316, 1315, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1268, 0, 575, 0, 0, 575,
	575, 988, 989, 990, 991, 1661, 1316, 0, 0, 0,
	971, 0, 0, 784, 0, 0, 0, 0, 0, 1837,
	0, 0, 0, 0, 397, 0, 1694, 0, 509, 1315,
	0, 509, 0, 509, 0, 397, 397, 0, 1700, 0,
	0, 772, 0, 0, 0, 0, 0, 0, 1625, 0,
	772, 772, 1476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 587, 0, 0, 0, 0,
	1023, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	1143, 0, 0, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1832, 1833, 1834, 599,
	0, 0, 0, 0, 0, 1831, 1829, 1830, 1822, 1823,
	1824, 1825, 1827, 1828, 0, 1315, 1315, 0, 0, 0,
	1547, 1547, 992, 0, 1315, 1315, 0, 749, 0, 0,
	0, 0, 0, 1739, 0, 0, 0, 987, 1282, 0,
	0, 2012, 2013, 1107, 0, 0, 0, 0, 0, 397,
	397, 397, 0, 397, 0, 0, 62, 1315, 1316, 0,
	0, 0, 0, 1283, 62, 0, 0, 0, 0, 0,
	0, 0, 397, 0, 1282, 0, 0, 0, 0, 1547,
	1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
	1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 0, 1547,
	2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066,
	2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 1283,
	2079, 0, 0, 0, 0, 0, 0, 0, 1282, 0,
	0, 0, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 37, 0, 0, 0, 1283,
	0, 0, 0, 0, 0, 0, 0, 0, 40, 0,
	0, 62, 0, 62, 0, 0, 0, 0, 1282, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 457, 0, 62, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1315,
	0, 0, 0, 0, 1282, 1282, 0, 0, 0, 0,
	459, 0, 0, 1282, 1282, 0, 0, 51, 0, 52,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 397,
	0, 0, 0, 0, 0, 397, 397, 0, 0, 397,
	0, 0, 0, 0, 1612, 0, 1282, 1612, 0, 1316,
	0, 0, 0, 54, 0, 1902, 0, 0, 0, 788,
	790, 397, 1908, 1909, 0, 0, 0, 1625, 0, 0,
	1916, 0, 0, 0, 0, 0, 1921, 1922, 1924, 1926,
	1927, 0, 0, 0, 0, 397, 0, 0, 0, 1936,
	0, 0, 62, 1939, 0, 0, 0, 0, 0, 0,
	0, 397, 0, 0, 0, 1316, 0, 0, 0, 0,
	0, 1243, 0, 1243, 0, 509, 0, 0, 0, 397,
	0, 0, 0, 1964, 0, 0, 0, 0, 397, 0,
	1974, 0, 0, 0, 55, 0, 0, 397, 0, 1318,
	865, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 1739, 0, 0, 0, 1316, 0, 431, 0, 0,
	113, 57, 0, 58, 0, 0, 1739, 0, 0, 0,
	0, 1476, 0, 599, 0, 1318, 137, 0, 458, 0,
	1376, 0, 0, 460, 0, 0, 90, 0, 0, 37,
	1317, 1023, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 397, 40, 0, 1279, 139, 0, 0, 1282, 0,
	1315, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 457, 1317, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1279, 138, 0, 0, 0, 0, 0, 0, 0, 131,
	0, 2045, 0, 0, 459, 0, 132, 0, 0, 0,
	1547, 51, 0, 52, 0, 1023, 1315, 1011, 1012, 1013,
	1014, 1015, 0, 0, 0, 0, 0, 1024, 0, 112,
	1317, 2330, 0, 0, 0, 0, 0, 1032, 0, 1318,
	0, 0, 0, 0, 1279, 0, 0, 54, 0, 749,
	0, 1547, 0, 0, 0, 749, 749, 0, 0, 749,
	0, 0, 0, 0, 0, 0, 1315, 0, 0, 0,
	0, 0, 2354, 0, 0, 1318, 1318, 0, 0, 0,
	0, 0, 397, 0, 1318, 1318, 0, 0, 1612, 0,
	1317, 0, 0, 0, 0, 0, 0, 784, 1612, 0,
	0, 0, 62, 0, 1279, 0, 0, 0, 0, 0,
	62, 0, 2128, 0, 0, 0, 0, 1318, 1547, 0,
	0, 0, 0, 0, 0, 0, 1317, 1317, 55, 0,
	0, 0, 0, 0, 62, 1317, 1317, 0, 62, 2407,
	1279, 1279, 0, 1625, 0, 1243, 0, 0, 587, 1279,
	1279, 1086, 1086, 2166, 113, 57, 0, 58, 599, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1317, 1282,
	137, 397, 397, 0, 0, 0, 0, 460, 0, 0,
	90, 0, 1279, 0, 0, 0, 0, 0, 0, 2192,
	0, 0, 0, 0, 0, 0, 0, 0, 2194, 139,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1282, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 0,
	2217, 0, 0, 131, 0, 0, 0, 0, 0, 0,
	132, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 432, 0, 1282, 0, 0, 0, 1318,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 397, 0, 0, 784, 0, 0,
	0, 0, 0, 0, 599, 599, 0, 0, 1612, 784,
	0, 0, 2249, 2250, 1625, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2128, 784,
	1317, 0, 0, 0, 2283, 0, 2284, 62, 397, 2286,
	2287, 0, 397, 0, 1279, 2292, 0, 0, 0, 0,
	0, 0, 749, 2128, 0, 784, 1661, 0, 0, 2128,
	0, 0, 0, 0, 1394, 0, 1399, 0, 0, 0,
	0, 0, 1406, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
	1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438,
	1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448,
	1449, 1450, 1451, 1452, 0, 1458, 0, 1460, 1461, 1462,
	1463, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 1024, 749, 0, 0, 0, 1625, 0, 2346, 0,
	0, 2348, 0, 0, 0, 0, 0, 0, 0, 397,
	1526, 1527, 2128, 0, 1543, 0, 1555, 1557, 1562, 1565,
	1566, 1567, 0, 0, 0, 0, 963, 964, 0, 993,
	994, 995, 1003, 1004, 1005, 0, 0, 0, 2380, 0,
	1318, 2128, 996, 0, 0, 0, 397, 0, 0, 966,
	0, 0, 1007, 784, 0, 0, 0, 0, 0, 0,
	0, 2192, 2192, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 985,
	0, 2413, 0, 982, 0, 0, 1612, 0, 0, 0,
	0, 1317, 0, 1243, 0, 0, 1318, 0, 0, 0,
	0, 0, 0, 0, 0, 1279, 0, 0, 0, 0,
	0, 0, 0, 0, 749, 0, 0, 0, 2429, 2430,
	0, 0, 0, 0, 0, 397, 0, 0, 0, 0,
	988, 989, 990, 991, 0, 0, 0, 0, 2445, 971,
	0, 0, 0, 0, 0, 0, 1318, 1317, 0, 0,
	0, 0, 0, 1820, 1821, 0, 1838, 1839, 1840, 0,
	0, 1279, 1000, 1008, 0, 2460, 0, 784, 0, 2199,
	397, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1006, 0, 2128, 0, 0, 0, 0, 0, 0,
	0, 62, 0, 0, 0, 0, 998, 1317, 2413, 0,
	0, 0, 986, 0, 0, 0, 1835, 0, 0, 0,
	0, 1279, 0, 0, 0, 784, 0, 0, 963, 964,
	0, 397, 0, 0, 1003, 1004, 1005, 997, 0, 0,
	0, 0, 0, 0, 0, 2518, 0, 0, 0, 0,
	0, 966, 0, 0, 1007, 0, 963, 964, 0, 993,
	994, 995, 1003, 1004, 1005, 0, 0, 0, 0, 0,
	0, 992, 996, 0, 0, 965, 1826, 0, 0, 966,
	0, 985, 1007, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1001, 965, 0, 0, 0, 0, 0, 985,
	0, 0, 0, 982, 0, 0, 0, 0, 1841, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 0, 0,
	0, 0, 988, 989, 990, 991, 0, 2396, 0, 1836,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 989, 990, 991, 1000, 1008, 0, 0, 0, 971,
	999, 0, 0, 977, 978, 984, 983, 979, 980, 981,
	1002, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 0, 1000, 1008, 0, 0, 0, 0, 998, 2230,
	0, 0, 0, 0, 986, 0, 0, 0, 0, 0,
	0, 1006, 0, 1837, 0, 0, 0, 0, 0, 0,
	458, 1023, 0, 0, 0, 0, 998, 0, 1760, 1761,
	0, 37, 986, 0, 1766, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 992, 0, 0, 1785, 457, 0, 0,
	0, 0, 1792, 0, 0, 1796, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 992, 1810, 0, 1001, 0, 459, 0, 0, 0,
	1832, 1833, 1834, 51, 0, 52, 987, 0, 0, 1831,
	1829, 1830, 1822, 1823, 1824, 1825, 1827, 1828, 0, 0,
	0, 0, 1001, 0, 0, 0, 1024, 0, 0, 0,
	0, 0, 0, 1562, 1562, 1562, 0, 0, 0, 54,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 0, 999, 0, 599, 0, 0, 0, 0, 0,
	0, 0, 1002, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 0, 0, 0, 0, 0,
	999, 0, 0, 977, 978, 984, 983, 979, 980, 981,
	1002, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 1862,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 113, 57, 0, 58,
	0, 0, 0, 0, 0, 0, 1967, 0, 0, 0,
	0, 0, 137, 0, 0, 0, 0, 0, 0, 460,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 1985,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 0, 0, 0, 0, 0, 0, 599, 599,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 599, 0, 0, 0, 1820, 1821, 0, 1838, 1839,
	1840, 0, 0, 2006, 0, 0, 0, 138, 1406, 0,
	0, 2019, 0, 0, 2010, 131, 0, 2011, 0, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 2016,
	1820, 1821, 0, 1838, 1839, 1840, 0, 0, 2024, 0,
	0, 0, 0, 0, 0, 112, 2028, 0, 1835, 1985,
	0, 0, 0, 0, 0, 0, 963, 964, 0, 993,
	994, 995, 1003, 1004, 1005, 0, 0, 0, 0, 2052,
	0, 0, 996, 2054, 0, 0, 0, 0, 0, 966,
	0, 0, 1007, 1835, 0, 0, 0, 0, 1820, 1821,
	0, 1838, 1839, 1840, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 2018, 0, 2084, 2085, 1826, 985,
	0, 0, 0, 982, 0, 2091, 2092, 2093, 0, 0,
	0, 0, 0, 963, 964, 0, 993, 994, 995, 1003,
	1004, 1005, 0, 0, 0, 0, 0, 0, 0, 996,
	0, 1835, 2104, 1826, 0, 0, 966, 0, 0, 1007,
	1841, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 989, 990, 991, 0, 0, 0, 1842, 0, 971,
	965, 1836, 2125, 0, 0, 0, 985, 0, 0, 0,
	982, 0, 0, 0, 0, 1841, 0, 0, 0, 0,
	0, 0, 1000, 1008, 0, 1820, 1821, 0, 1838, 1839,
	1840, 1826, 0, 0, 0, 0, 1836, 0, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 998, 988, 989, 990,
	991, 0, 986, 0, 599, 0, 971, 0, 0, 0,
	0, 0, 0, 1841, 0, 1837, 0, 0, 1835, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 1000,
	1008, 0, 0, 0, 1836, 0, 0, 0, 0, 2201,
	0, 0, 0, 2204, 2205, 0, 0, 2207, 1006, 0,
	1837, 0, 0, 0, 2209, 0, 2211, 0, 0, 0,
	0, 992, 0, 998, 0, 0, 0, 0, 0, 986,
	0, 0, 2218, 0, 0, 0, 987, 0, 1826, 0,
	0, 1820, 1821, 0, 1838, 1839, 1840, 0, 0, 0,
	0, 0, 1001, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 1832, 1833, 1834, 2227, 0, 0, 1837, 0,
	0, 1831, 1829, 1830, 1822, 1823, 1824, 1825, 1827, 1828,
	1841, 0, 0, 0, 0, 0, 0, 0, 992, 0,
	0, 0, 0, 0, 1835, 0, 0, 1832, 1833, 1834,
	0, 1836, 0, 987, 0, 0, 1831, 1829, 1830, 1822,
	1823, 1824, 1825, 1827, 1828, 2273, 0, 0, 0, 1001,
	999, 0, 0, 977, 978, 984, 983, 979, 980, 981,
	1002, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 0, 0, 0, 0, 0, 0, 0, 0, 1861,
	0, 0, 0, 0, 1826, 1832, 1833, 1834, 0, 0,
	0, 0, 0, 0, 1831, 1829, 1830, 1822, 1823, 1824,
	1825, 1827, 1828, 0, 0, 1837, 0, 0, 0, 0,
	0, 0, 0, 0, 2322, 2323, 0, 999, 0, 0,
	977, 978, 984, 983, 979, 980, 981, 1002, 0, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 0, 0,
	0, 0, 0, 0, 0, 2335, 1860, 1836, 0, 0,
	0, 2338, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1832, 1833, 1834, 2370, 0, 0, 0, 0,
	0, 1831, 1829, 1830, 1822, 1823, 1824, 1825, 1827, 1828,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1837, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2419, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1832, 1833,
	1834, 0, 599, 0, 0, 0, 0, 1831, 1829, 1830,
	1822, 1823, 1824, 1825, 1827, 1828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2487, 2487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2502, 0, 0, 0, 0, 1140, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2487,
	0, 0, 178, 179, 1145, 180, 1146, 1147, 1148, 1149,
	334, 1150, 1151, 1152, 1153, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 1154, 185, 341, 342, 186,
	187, 1155, 1156, 343, 344, 345, 1157, 188, 346, 1158,
	773, 1159, 189, 190, 191, 2487, 192, 1160, 193, 0,
	194, 195, 1161, 699, 196, 197, 198, 1162, 1163, 1165,
	1164, 1166, 1167, 1168, 199, 200, 398, 201, 347, 202,
	348, 349, 1169, 203, 1170, 204, 1171, 205, 1172, 1173,
	206, 207, 1174, 208, 1175, 0, 1176, 350, 209, 210,
	211, 351, 352, 1177, 700, 1178, 0, 0, 0, 0,
	212, 213, 353, 354, 355, 0, 214, 1179, 215, 1180,
	1181, 701, 1182, 216, 356, 1183, 357, 1184, 0, 217,
	218, 0, 0, 219, 220, 221, 358, 359, 703, 1185,
	360, 225, 1186, 222, 1187, 702, 223, 361, 224, 362,
	363, 364, 365, 366, 1188, 367, 1189, 704, 226, 227,
	228, 705, 229, 230, 231, 1190, 233, 232, 1191, 368,
	706, 234, 707, 1192, 235, 1193, 1194, 236, 0, 237,
	238, 239, 241, 369, 240, 708, 242, 243, 245, 244,
	1195, 1196, 1197, 370, 246, 371, 247, 248, 1198, 249,
	1199, 1200, 250, 1201, 1202, 251, 372, 709, 252, 710,
	373, 253, 254, 255, 256, 257, 1203, 258, 374, 259,
	375, 260, 1204, 261, 262, 263, 264, 265, 376, 266,
	267, 1205, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 1206, 280, 711, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 1207, 292, 378,
	291, 293, 294, 1208, 295, 284, 285, 296, 712, 297,
	379, 380, 298, 1209, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 1210, 306, 1211, 307, 308, 309,
	310, 311, 312, 313, 1212, 383, 384, 385, 1213, 1214,
	314, 315, 386, 387, 1215, 316, 317, 318, 319, 1216,
	1217, 320, 321, 322, 323, 1218, 324, 1219, 388, 325,
	326, 327, 389, 390, 1220, 1221, 328, 1222, 1223, 1224,
	1225, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1140, 0, 0, 0, 0, 0, 1605, 0,
	0, 0, 0, 0, 0, 0, 0, 1606, 178, 179,
	1145, 180, 1146, 1147, 1148, 1149, 334, 1150, 1151, 1152,
	1153, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 1154, 185, 341, 342, 186, 187, 1155, 1156, 343,
	344, 345, 1157, 188, 346, 1158, 773, 1159, 189, 190,
	191, 0, 192, 1160, 193, 0, 194, 195, 1161, 699,
	196, 197, 198, 1162, 1163, 1165, 1164, 1166, 1167, 1168,
	199, 200, 398, 201, 347, 202, 348, 349, 1169, 203,
	1170, 204, 1171, 205, 1172, 1173, 206, 207, 1174, 208,
	1175, 0, 1176, 350, 209, 210, 211, 351, 352, 1177,
	700, 1178, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 1179, 215, 1180, 1181, 701, 1182, 216,
	356, 1183, 357, 1184, 0, 217, 218, 0, 0, 219,
	220, 221, 358, 359, 703, 1185, 360, 225, 1186, 222,
	1187, 702, 223, 361, 224, 362, 363, 364, 365, 366,
	1188, 367, 1189, 704, 226, 227, 228, 705, 229, 230,
	231, 1190, 233, 232, 1191, 368, 706, 234, 707, 1192,
	235, 1193, 1194, 236, 0, 237, 238, 239, 241, 369,
	240, 708, 242, 243, 245, 244, 1195, 1196, 1197, 370,
	246, 371, 247, 248, 1198, 249, 1199, 1200, 250, 1201,
	1202, 251, 372, 709, 252, 710, 373, 253, 254, 255,
	256, 257, 1203, 258, 374, 259, 375, 260, 1204, 261,
	262, 263, 264, 265, 376, 266, 267, 1205, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 1206, 280, 711, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 1207, 292, 378, 291, 293, 294, 1208,
	295, 284, 285, 296, 712, 297, 379, 380, 298, 1209,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	1210, 306, 1211, 307, 308, 309, 310, 311, 312, 313,
	1212, 383, 384, 385, 1213, 1214, 314, 315, 386, 387,
	1215, 316, 317, 318, 319, 1216, 1217, 320, 321, 322,
	323, 1218, 324, 1219, 388, 325, 326, 327, 389, 390,
	1220, 1221, 328, 1222, 1223, 1224, 1225, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 1140,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2245, 178, 179, 1145, 180, 1146,
	1147, 1148, 1149, 334, 1150, 1151, 1152, 1153, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 1154, 185,
	341, 342, 186, 187, 1155, 1156, 343, 344, 345, 1157,
	188, 346, 1158, 773, 1159, 189, 190, 191, 0, 192,
	1160, 193, 0, 194, 195, 1161, 699, 196, 197, 198,
	1162, 1163, 1165, 1164, 1166, 1167, 1168, 199, 200, 398,
	201, 347, 202, 348, 349, 1169, 203, 1170, 204, 1171,
	205, 1172, 1173, 206, 207, 1174, 208, 1175, 0, 1176,
	350, 209, 210, 211, 351, 352, 1177, 700, 1178, 0,
	0, 0, 0, 212, 213, 353, 354, 355, 0, 214,
	1179, 215, 1180, 1181, 701, 1182, 216, 356, 1183, 357,
	1184, 0, 217, 218, 0, 0, 219, 220, 221, 358,
	359, 703, 1185, 360, 225, 1186, 222, 1187, 702, 223,
	361, 224, 362, 363, 364, 365, 366, 1188, 367, 1189,
	704, 226, 227, 228, 705, 229, 230, 231, 1190, 233,
	232, 1191, 368, 706, 234, 707, 1192, 235, 1193, 1194,
	236, 0, 237, 238, 239, 241, 369, 240, 708, 242,
	243, 245, 244, 1195, 1196, 1197, 370, 246, 371, 247,
	248, 1198, 249, 1199, 1200, 250, 1201, 1202, 251, 372,
	709, 252, 710, 373, 253, 254, 255, 256, 257, 1203,
	258, 374, 259, 375, 260, 1204, 261, 262, 263, 264,
	265, 376, 266, 267, 1205, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 1206, 280,
	711, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	1207, 292, 378, 291, 293, 294, 1208, 295, 284, 285,
	296, 712, 297, 379, 380, 298, 1209, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 1210, 306, 1211,
	307, 308, 309, 310, 311, 312, 313, 1212, 383, 384,
	385, 1213, 1214, 314, 315, 386, 387, 1215, 316, 317,
	318, 319, 1216, 1217, 320, 321, 322, 323, 1218, 324,
	1219, 388, 325, 326, 327, 389, 390, 1220, 1221, 328,
	1222, 1223, 1224, 1225, 329, 330, 331, 332, 333, 0,
	0, 1140, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1139, 178, 179, 1145,
	180, 1146, 1147, 1148, 1149, 334, 1150, 1151, 1152, 1153,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	1154, 185, 341, 342, 186, 187, 1155, 1156, 343, 344,
	345, 1157, 188, 346, 1158, 773, 1159, 189, 190, 191,
	0, 192, 1160, 193, 0, 194, 195, 1161, 699, 196,
	197, 198, 1162, 1163, 1165, 1164, 1166, 1167, 1168, 199,
	200, 398, 201, 347, 202, 348, 349, 1169, 203, 1170,
	204, 1171, 205, 1172, 1173, 206, 207, 1174, 208, 1175,
	0, 1176, 350, 209, 210, 211, 351, 352, 1177, 700,
	1178, 0, 0, 0, 0, 212, 213, 353, 354, 355,
	0, 214, 1179, 215, 1180, 1181, 701, 1182, 216, 356,
	1183, 357, 1184, 0, 217, 218, 0, 0, 219, 220,
	221, 358, 359, 703, 1185, 360, 225, 1186, 222, 1187,
	702, 223, 361, 224, 362, 363, 364, 365, 366, 1188,
	367, 1189, 704, 226, 227, 228, 705, 229, 230, 231,
	1190, 233, 232, 1191, 368, 706, 234, 707, 1192, 235,
	1193, 1194, 236, 0, 237, 238, 239, 241, 369, 240,
	708, 242, 243, 245, 244, 1195, 1196, 1197, 370, 246,
	371, 247, 248, 1198, 249, 1199, 1200, 250, 1201, 1202,
	251, 372, 709, 252, 710, 373, 253, 254, 255, 256,
	257, 1203, 258, 374, 259, 375, 260, 1204, 261, 262,
	263, 264, 265, 376, 266, 267, 1205, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	1206, 280, 711, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 1207, 292, 378, 291, 293, 294, 1208, 295,
	284, 285, 296, 712, 297, 379, 380, 298, 1209, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 1210,
	306, 1211, 307, 308, 309, 310, 311, 312, 313, 1212,
	383, 384, 385, 1213, 1214, 314, 315, 386, 387, 1215,
	316, 317, 318, 319, 1216, 1217, 320, 321, 322, 323,
	1218, 324, 1219, 388, 325, 326, 327, 389, 390, 1220,
	1221, 328, 1222, 1223, 1224, 1225, 329, 330, 331, 332,
	333, 1504, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 1501, 180, 0, 0, 0, 0, 654, 619, 0,
	0, 0, 181, 182, 183, 335, 669, 337, 670, 184,
	671, 672, 0, 185, 341, 342, 186, 187, 622, 653,
	673, 674, 345, 0, 188, 665, 0, 645, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	699, 196, 197, 198, 0, 646, 647, 649, 0, 648,
	650, 199, 200, 398, 201, 675, 202, 676, 677, 0,
	203, 0, 204, 0, 205, 1502, 0, 668, 207, 0,
	208, 0, 0, 0, 610, 209, 210, 211, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 212, 213, 678,
	679, 680, 0, 214, 0, 215, 0, 0, 701, 0,
	216, 666, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 662, 664, 703, 0, 360, 225, 0,
	222, 0, 702, 223, 681, 224, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 226, 227, 228, 705, 229,
	230, 231, 0, 233, 232, 0, 667, 706, 234, 707,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 708, 242, 243, 245, 244, 605, 0, 634,
	663, 246, 687, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 709, 252, 710, 657, 253, 254,
	255, 256, 257, 0, 258, 658, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 688, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 711, 281, 282, 611, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	651, 295, 284, 285, 296, 712, 297, 689, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 690, 302, 303,
	659, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 691, 692, 0, 0, 314, 315, 660,
	661, 632, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 652, 324, 0, 388, 325, 326, 327, 389,
	693, 1500, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 606, 0, 637, 626, 627, 624, 625,
	616, 0, 0, 604, 0, 0, 0, 0, 602, 603,
	1503, 178, 179, 0, 180, 0, 0, 612, 1498, 654,
	619, 0, 0, 615, 181, 182, 183, 335, 669, 337,
	670, 184, 671, 672, 0, 185, 341, 342, 186, 187,
	622, 653, 673, 674, 345, 0, 188, 665, 0, 645,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 699, 196, 197, 198, 0, 646, 647, 649,
	0, 648, 650, 199, 200, 398, 201, 675, 202, 676,
	677, 600, 203, 0, 204, 0, 205, 0, 0, 668,
	207, 0, 208, 0, 0, 0, 610, 209, 210, 211,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 212,
	213, 678, 679, 680, 0, 214, 0, 215, 0, 0,
	701, 0, 216, 666, 0, 357, 0, 0, 217, 218,
	0, 0, 219, 220, 221, 662, 664, 703, 0, 360,
	225, 0, 222, 0, 702, 223, 681, 224, 682, 683,
	684, 685, 686, 0, 644, 0, 704, 226, 227, 228,
	705, 229, 230, 231, 0, 233, 232, 0, 667, 706,
	234, 707, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 708, 242, 243, 245, 244, 605,
	0, 634, 663, 246, 687, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 709, 252, 710, 657,
	253, 254, 255, 256, 257, 0, 258, 658, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 688, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 711, 281, 282, 611,
	283, 0, 287, 288, 289, 290, 137, 292, 378, 291,
	293, 294, 651, 295, 284, 285, 296, 712, 297, 689,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 690,
	302, 303, 659, 0, 306, 139, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 691, 692, 0, 0, 314,
	315, 660, 661, 632, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 652, 324, 0, 388, 325, 326,
	327, 845, 693, 0, 0, 328, 0, 0, 0, 131,
	329, 330, 331, 332, 333, 606, 132, 588, 0, 637,
	626, 627, 624, 625, 616, 604, 0, 0, 0, 0,
	602, 603, 0, 0, 0, 178, 179, 0, 180, 1026,
	0, 0, 0, 654, 619, 615, 0, 0, 181, 182,
	183, 335, 669, 337, 670, 184, 671, 672, 0, 185,
	341, 342, 186, 187, 622, 653, 673, 674, 345, 0,
	188, 665, 0, 645, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 699, 196, 197, 198,
	0, 646, 647, 649, 0, 648, 650, 199, 200, 398,
	201, 675, 202, 676, 677, 0, 203, 0, 204, 0,
	205, 0, 0, 668, 207, 0, 208, 0, 0, 0,
	610, 209, 210, 211, 655, 656, 633, 700, 0, 0,
	0, 0, 0, 212, 213, 678, 679, 680, 0, 214,
	0, 215, 0, 0, 701, 0, 216, 666, 0, 357,
	0, 0, 217, 218, 0, 0, 219, 220, 221, 662,
	664, 703, 0, 360, 225, 0, 222, 0, 702, 223,
	681, 224, 682, 683, 684, 685, 686, 0, 644, 0,
	704, 226, 227, 228, 705, 229, 230, 231, 0, 233,
	232, 0, 667, 706, 234, 707, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 708, 242,
	243, 245, 244, 605, 0, 634, 663, 246, 687, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	709, 252, 710, 657, 253, 254, 255, 256, 257, 0,
	258, 658, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 688, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	711, 281, 282, 611, 283, 0, 287, 288, 289, 290,
	137, 292, 378, 291, 293, 294, 651, 295, 284, 285,
	296, 712, 297, 689, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 690, 302, 303, 659, 0, 306, 139,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 691,
	692, 0, 0, 314, 315, 660, 661, 632, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 652, 324,
	0, 388, 325, 326, 327, 845, 693, 0, 0, 328,
	0, 0, 0, 131, 329, 330, 331, 332, 333, 606,
	132, 637, 626, 627, 624, 625, 616, 0, 0, 604,
	0, 0, 0, 0, 602, 603, 0, 178, 179, 0,
	180, 0, 0, 1026, 0, 654, 619, 0, 0, 615,
	181, 182, 183, 335, 669, 337, 670, 184, 671, 672,
	0, 185, 341, 342, 186, 187, 622, 653, 673, 674,
	345, 0, 188, 665, 0, 645, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 699, 196,
	197, 198, 0, 646, 647, 649, 0, 648, 650, 199,
	200, 398, 201, 675, 202, 676, 677, 0, 203, 0,
	204, 0, 205, 0, 0, 668, 207, 0, 208, 0,
	0, 0, 610, 209, 210, 211, 655, 656, 633, 700,
	0, 0, 0, 0, 0, 212, 213, 678, 679, 680,
	0, 214, 0, 215, 0, 0, 701, 0, 216, 666,
	0, 357, 0, 0, 217, 218, 0, 0, 219, 220,
	221, 662, 664, 703, 0, 360, 225, 0, 222, 0,
	702, 223, 681, 224, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 226, 227, 228, 705, 229, 230, 231,
	0, 233, 232, 0, 667, 706, 234, 707, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	708, 242, 243, 245, 244, 605, 0, 634, 663, 246,
	687, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 709, 252, 710, 657, 253, 254, 255, 256,
	257, 0, 258, 658, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 688, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 711, 281, 282, 611, 283, 0, 287, 288,
	289, 290, 137, 292, 378, 291, 293, 294, 651, 295,
	284, 285, 296, 712, 297, 689, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 690, 302, 303, 659, 0,
	306, 139, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 691, 692, 0, 0, 314, 315, 660, 661, 632,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	652, 324, 0, 388, 325, 326, 327, 845, 693, 0,
	0, 328, 0, 0, 0, 131, 329, 330, 331, 332,
	333, 606, 132, 637, 626, 627, 624, 625, 616, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 178,
	179, 0, 180, 0, 0, 1026, 0, 654, 619, 0,
	0, 615, 181, 182, 183, 335, 669, 337, 670, 184,
	671, 672, 1558, 185, 341, 342, 186, 187, 622, 653,
	673, 674, 345, 0, 188, 665, 0, 645, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	699, 196, 197, 198, 0, 646, 647, 649, 0, 648,
	650, 199, 200, 398, 201, 675, 202, 676, 677, 0,
	203, 0, 204, 0, 205, 0, 0, 668, 207, 0,
	208, 0, 0, 0, 610, 209, 210, 211, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 212, 213, 678,
	679, 680, 0, 214, 0, 215, 0, 1563, 701, 0,
	216, 666, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 662, 664, 703, 0, 360, 225, 0,
	222, 0, 702, 223, 681, 224, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 226, 227, 228, 705, 229,
	230, 231, 0, 233, 232, 1559, 667, 706, 234, 707,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 708, 242, 243, 245, 244, 605, 0, 634,
	663, 246, 687, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 709, 252, 710, 657, 253, 254,
	255, 256, 257, 0, 258, 658, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 688, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 711, 281, 282, 611, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	651, 295, 284, 285, 296, 712, 297, 689, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 690, 302, 303,
	659, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 691, 692, 0, 1560, 314, 315, 660,
	661, 632, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 652, 324, 0, 388, 325, 326, 327, 389,
	693, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 606, 596, 0, 637, 626, 627, 624,
	625, 616, 0, 604, 0, 0, 0, 0, 602, 603,
	0, 0, 178, 179, 0, 180, 0, 612, 0, 0,
	654, 619, 0, 615, 0, 181, 182, 183, 335, 669,
	337, 670, 184, 671, 672, 0, 185, 341, 342, 186,
	187, 622, 653, 673, 674, 345, 0, 188, 665, 0,
	645, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 699, 196, 197, 198, 0, 646, 647,
	649, 0, 648, 650, 199, 200, 398, 201, 675, 202,
	676, 677, 600, 203, 0, 204, 0, 205, 0, 0,
	668, 207, 0, 208, 0, 0, 0, 610, 209, 210,
	211, 655, 656, 633, 700, 0, 0, 0, 0, 0,
	212, 213, 678, 679, 680, 0, 214, 0, 215, 0,
	0, 701, 0, 216, 666, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 662, 664, 703, 0,
	360, 225, 0, 222, 0, 702, 223, 681, 224, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 226, 227,
	228, 705, 229, 230, 231, 0, 233, 232, 0, 667,
	706, 234, 707, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 708, 242, 243, 245, 244,
	605, 0, 634, 663, 246, 687, 247, 248, 0, 249,
	598, 0, 250, 0, 0, 251, 372, 709, 252, 710,
	657, 253, 254, 255, 256, 257, 0, 258, 658, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 688, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 711, 281, 282,
	611, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 651, 295, 284, 285, 296, 712, 297,
	689, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	690, 302, 303, 659, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 691, 692, 0, 0,
	314, 315, 660, 661, 632, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 652, 324, 0, 388, 325,
	326, 327, 389, 693, 0, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 606, 0, 637, 626,
	627, 624, 625, 616, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 178, 179, 0, 180, 0, 0,
	612, 0, 654, 619, 0, 0, 615, 181, 182, 183,
	335, 669, 337, 670, 184, 671, 672, 0, 185, 341,
	342, 186, 187, 622, 653, 673, 674, 345, 0, 188,
	665, 0, 645, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 699, 196, 197, 198, 0,
	646, 647, 649, 0, 648, 650, 199, 200, 398, 201,
	675, 202, 676, 677, 0, 203, 0, 204, 0, 205,
	0, 0, 668, 207, 0, 208, 0, 0, 0, 610,
	209, 210, 211, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 212, 213, 678, 679, 680, 0, 214, 0,
	215, 0, 0, 701, 0, 216, 666, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 662, 664,
	703, 0, 360, 225, 0, 222, 0, 702, 223, 681,
	224, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	226, 227, 228, 705, 229, 230, 231, 0, 233, 232,
	0, 667, 706, 234, 707, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 708, 242, 243,
	245, 244, 605, 2175, 634, 663, 246, 687, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 709,
	252, 710, 657, 253, 254, 255, 256, 257, 0, 258,
	658, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	688, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 711,
	281, 282, 611, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 651, 295, 284, 285, 296,
	712, 297, 689, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 690, 302, 303, 659, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 691, 692,
	0, 0, 314, 315, 660, 661, 632, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 652, 324, 0,
	388, 325, 326, 327, 389, 693, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 606, 0,
	637, 626, 627, 624, 625, 616, 0, 0, 604, 0,
	0, 0, 0, 602, 603, 1087, 178, 179, 0, 180,
	0, 0, 612, 0, 654, 619, 0, 0, 615, 181,
	182, 183, 335, 669, 337, 670, 184, 671, 672, 0,
	185, 341, 342, 186, 187, 622, 653, 673, 674, 345,
	0, 188, 665, 0, 645, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 699, 196, 197,
	198, 0, 646, 647, 649, 0, 648, 650, 199, 200,
	398, 201, 675, 202, 676, 677, 0, 203, 0, 204,
	0, 205, 0, 0, 668, 207, 0, 208, 0, 0,
	0, 610, 209, 210, 211, 655, 656, 633, 700, 0,
	0, 0, 0, 0, 212, 213, 678, 679, 680, 0,
	214, 0, 215, 0, 0, 701, 0, 216, 666, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	662, 664, 703, 0, 360, 225, 1408, 222, 0, 702,
	223, 681, 224, 682, 683, 684, 685, 686, 0, 644,
	0, 704, 226, 227, 228, 705, 229, 230, 231, 0,
	233, 232, 0, 667, 706, 234, 707, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 708,
	242, 243, 245, 244, 605, 0, 634, 663, 246, 687,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 709, 252, 710, 657, 253, 254, 255, 256, 257,
	0, 258, 658, 259, 375, 260, 1407, 261, 262, 263,
	264, 265, 688, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 711, 281, 282, 611, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 651, 295, 284,
	285, 296, 712, 297, 689, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 690, 302, 303, 659, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	691, 692, 0, 0, 314, 315, 660, 661, 632, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 652,
	324, 0, 388, 325, 326, 327, 389, 693, 0, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	606, 0, 637, 626, 627, 624, 625, 616, 0, 0,
	604, 0, 0, 0, 0, 602, 603, 0, 178, 179,
	0, 180, 0, 0, 612, 0, 654, 619, 0, 0,
	615, 181, 182, 183, 335, 669, 337, 670, 184, 671,
	672, 0, 185, 341, 342, 186, 187, 622, 653, 673,
	674, 345, 0, 188, 665, 0, 645, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 699,
	196, 197, 198, 0, 646, 647, 649, 0, 648, 650,
	199, 200, 398, 201, 675, 202, 676, 677, 600, 203,
	0, 204, 0, 205, 0, 0, 668, 207, 0, 208,
	0, 0, 0, 610, 209, 210, 211, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 212, 213, 678, 679,
	680, 0, 214, 0, 215, 0, 0, 701, 0, 216,
	666, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 662, 664, 703, 0, 360, 225, 0, 222,
	0, 702, 223, 681, 224, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 226, 227, 228, 705, 229, 230,
	231, 0, 233, 232, 0, 667, 706, 234, 707, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 708, 242, 243, 245, 244, 605, 0, 634, 663,
	246, 687, 247, 248, 0, 249, 598, 0, 250, 0,
	0, 251, 372, 709, 252, 710, 657, 253, 254, 255,
	256, 257, 0, 258, 658, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 688, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 711, 281, 282, 611, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 651,
	295, 284, 285, 296, 712, 297, 689, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 690, 302, 303, 659,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 691, 692, 0, 0, 314, 315, 660, 661,
	632, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 652, 324, 0, 388, 325, 326, 327, 389, 693,
	0, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 606, 0, 637, 626, 627, 624, 625, 616,
	0, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	178, 179, 0, 180, 0, 0, 612, 0, 654, 619,
	0, 0, 615, 181, 182, 183, 335, 669, 337, 670,
	184, 671, 672, 0, 185, 341, 342, 186, 187, 622,
	653, 673, 674, 345, 0, 188, 665, 0, 645, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 699, 196, 197, 198, 0, 646, 647, 649, 0,
	648, 650, 199, 200, 398, 201, 675, 202, 676, 677,
	600, 203, 0, 204, 0, 205, 0, 0, 668, 207,
	0, 208, 0, 0, 0, 610, 209, 210, 211, 655,
	656, 633, 700, 0, 0, 0, 0, 0, 212, 213,
	678, 679, 680, 0, 214, 0, 215, 0, 0, 701,
	0, 216, 666, 0, 357, 0, 0, 217, 218, 0,
	0, 219, 220, 221, 662, 664, 703, 0, 360, 225,
	0, 222, 0, 702, 223, 681, 224, 682, 683, 684,
	685, 686, 0, 644, 0, 704, 226, 227, 228, 705,
	229, 230, 231, 0, 233, 232, 0, 667, 706, 234,
	707, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 708, 242, 243, 245, 244, 605, 0,
	634, 663, 246, 687, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 709, 252, 710, 657, 253,
	254, 255, 256, 257, 0, 258, 658, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 688, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 711, 281, 282, 611, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 651, 295, 284, 285, 296, 712, 297, 689, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 690, 302,
	303, 659, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 691, 692, 0, 0, 314, 315,
	660, 661, 632, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 652, 324, 0, 388, 325, 326, 327,
	389, 693, 0, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 606, 0, 637, 626, 627, 624,
	625, 616, 0, 0, 604, 0, 0, 0, 0, 602,
	603, 0, 178, 179, 0, 180, 0, 0, 612, 0,
	654, 619, 0, 0, 615, 181, 182, 183, 335, 669,
	337, 670, 184, 671, 672, 0, 185, 341, 342, 186,
	187, 622, 653, 673, 674, 345, 0, 188, 665, 0,
	645, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 699, 196, 197, 198, 0, 646, 647,
	649, 0, 648, 650, 199, 200, 398, 201, 675, 202,
	676, 677, 0, 203, 0, 204, 0, 205, 0, 0,
	668, 207, 0, 208, 0, 0, 0, 610, 209, 210,
	211, 655, 656, 633, 700, 0, 0, 0, 0, 0,
	212, 213, 678, 679, 680, 0, 214, 0, 215, 0,
	0, 701, 0, 216, 666, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 662, 664, 703, 0,
	360, 225, 0, 222, 0, 702, 223, 681, 224, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 226, 227,
	228, 705, 229, 230, 231, 0, 233, 232, 0, 667,
	706, 234, 707, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 708, 242, 243, 245, 244,
	605, 0, 634, 663, 246, 687, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 709, 252, 710,
	657, 253, 254, 255, 256, 257, 0, 258, 658, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 688, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 711, 281, 282,
	611, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 651, 295, 284, 285, 296, 712, 297,
	689, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	690, 302, 303, 659, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 691, 692, 0, 0,
	314, 315, 660, 661, 632, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 652, 324, 0, 388, 325,
	326, 327, 389, 693, 2031, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 606, 0, 637, 626,
	627, 624, 625, 616, 0, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 178, 179, 0, 180, 0, 0,
	612, 0, 654, 619, 0, 0, 615, 181, 182, 183,
	335, 669, 337, 670, 184, 671, 672, 0, 185, 341,
	342, 186, 187, 622, 653, 673, 674, 345, 0, 188,
	665, 0, 645, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 699, 196, 197, 198, 0,
	646, 647, 649, 0, 648, 650, 199, 200, 398, 201,
	675, 202, 676, 677, 0, 203, 0, 204, 0, 205,
	0, 0, 668, 207, 0, 208, 0, 0, 0, 610,
	209, 210, 211, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 212, 213, 678, 679, 680, 0, 214, 0,
	215, 0, 0, 701, 0, 216, 666, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 662, 664,
	703, 0, 360, 225, 0, 222, 0, 702, 223, 681,
	224, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	226, 227, 228, 705, 229, 230, 231, 0, 233, 232,
	0, 667, 706, 234, 707, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 708, 242, 243,
	245, 244, 605, 0, 634, 663, 246, 687, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 709,
	252, 710, 657, 253, 254, 255, 256, 257, 0, 258,
	658, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	688, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 711,
	281, 282, 611, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 651, 295, 284, 285, 296,
	712, 297, 689, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 690, 302, 303, 659, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 691, 692,
	0, 0, 314, 315, 660, 661, 632, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 652, 324, 0,
	388, 325, 326, 327, 389, 693, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 606, 0,
	637, 626, 627, 624, 625, 616, 0, 0, 604, 0,
	0, 0, 0, 602, 603, 1087, 178, 179, 0, 180,
	0, 0, 612, 0, 654, 619, 0, 0, 615, 181,
	182, 183, 335, 669, 337, 670, 184, 671, 672, 0,
	185, 341, 342, 186, 187, 622, 653, 673, 674, 345,
	0, 188, 665, 0, 645, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 699, 196, 197,
	198, 0, 646, 647, 649, 0, 648, 650, 199, 200,
	398, 201, 675, 202, 676, 677, 0, 203, 0, 204,
	0, 205, 0, 0, 668, 207, 0, 208, 0, 0,
	0, 610, 209, 210, 211, 655, 656, 633, 700, 0,
	0, 0, 0, 0, 212, 213, 678, 679, 680, 0,
	214, 0, 215, 0, 1563, 701, 0, 216, 666, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	662, 664, 703, 0, 360, 225, 0, 222, 0, 702,
	223, 681, 224, 682, 683, 684, 685, 686, 0, 644,
	0, 704, 226, 227, 228, 705, 229, 230, 231, 0,
	233, 232, 0, 667, 706, 234, 707, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 708,
	242, 243, 245, 244, 605, 0, 634, 663, 246, 687,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 709, 252, 710, 657, 253, 254, 255, 256, 257,
	0, 258, 658, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 688, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 711, 281, 282, 611, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 651, 295, 284,
	285, 296, 712, 297, 689, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 690, 302, 303, 659, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	691, 692, 0, 0, 314, 315, 660, 661, 632, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 652,
	324, 0, 388, 325, 326, 327, 389, 693, 0, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	606, 1608, 0, 637, 626, 627, 624, 625, 616, 0,
	604, 0, 0, 0, 0, 602, 603, 0, 0, 178,
	179, 0, 180, 0, 612, 0, 0, 654, 619, 0,
	615, 0, 181, 182, 183, 335, 669, 337, 670, 184,
	671, 672, 0, 185, 341, 342, 186, 187, 622, 653,
	673, 674, 345, 0, 188, 665, 0, 645, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	699, 196, 197, 198, 0, 646, 647, 649, 0, 648,
	650, 199, 200, 398, 201, 675, 202, 676, 677, 0,
	203, 0, 204, 0, 205, 0, 0, 668, 207, 0,
	208, 0, 0, 0, 610, 209, 210, 211, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 212, 213, 678,
	679, 680, 0, 214, 0, 215, 0, 0, 701, 0,
	216, 666, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 662, 664, 703, 0, 360, 225, 0,
	222, 0, 702, 223, 681, 224, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 226, 227, 228, 705, 229,
	230, 231, 0, 233, 232, 0, 667, 706, 234, 707,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 708, 242, 243, 245, 244, 605, 0, 634,
	663, 246, 687, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 709, 252, 710, 657, 253, 254,
	255, 256, 257, 0, 258, 658, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 688, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 711, 281, 282, 611, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	651, 295, 284, 285, 296, 712, 297, 689, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 690, 302, 303,
	659, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 691, 692, 0, 0, 314, 315, 660,
	661, 632, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 652, 324, 0, 388, 325, 326, 327, 389,
	693, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 606, 1572, 0, 637, 626, 627, 624,
	625, 616, 0, 604, 0, 0, 0, 0, 602, 603,
	0, 0, 178, 179, 0, 180, 0, 612, 0, 0,
	654, 619, 0, 615, 0, 181, 182, 183, 335, 669,
	337, 670, 184, 671, 672, 0, 185, 341, 342, 186,
	187, 622, 653, 673, 674, 345, 0, 188, 665, 0,
	645, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 699, 196, 197, 198, 0, 646, 647,
	649, 0, 648, 650, 199, 200, 398, 201, 675, 202,
	676, 677, 0, 203, 0, 204, 0, 205, 0, 0,
	668, 207, 0, 208, 0, 0, 0, 610, 209, 210,
	211, 655, 656, 633, 700, 0, 0, 0, 0, 0,
	212, 213, 678, 679, 680, 0, 214, 0, 215, 0,
	0, 701, 0, 216, 666, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 662, 664, 703, 0,
	360, 225, 0, 222, 0, 702, 223, 681, 224, 682,
	683, 684, 685, 686, 0, 644, 0, 704, 226, 227,
	228, 705, 229, 230, 231, 0, 233, 232, 0, 667,
	706, 234, 707, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 708, 242, 243, 245, 244,
	605, 0, 634, 663, 246, 687, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 709, 252, 710,
	657, 253, 254, 255, 256, 257, 0, 258, 658, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 688, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 711, 281, 282,
	611, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 651, 295, 284, 285, 296, 712, 297,
	689, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	690, 302, 303, 659, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 691, 692, 0, 0,
	314, 315, 660, 661, 632, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 652, 324, 0, 388, 325,
	326, 327, 389, 693, 0, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 606, 1570, 0, 637,
	626, 627, 624, 625, 616, 0, 604, 0, 0, 0,
	0, 602, 603, 0, 0, 178, 179, 0, 180, 0,
	612, 0, 0, 654, 619, 0, 615, 0, 181, 182,
	183, 335, 669, 337, 670, 184, 671, 672, 0, 185,
	341, 342, 186, 187, 622, 653, 673, 674, 345, 0,
	188, 665, 0, 645, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 699, 196, 197, 198,
	0, 646, 647, 649, 0, 648, 650, 199, 200, 398,
	201, 675, 202, 676, 677, 0, 203, 0, 204, 0,
	205, 0, 0, 668, 207, 0, 208, 0, 0, 0,
	610, 209, 210, 211, 655, 656, 633, 700, 0, 0,
	0, 0, 0, 212, 213, 678, 679, 680, 0, 214,
	0, 215, 0, 0, 701, 0, 216, 666, 0, 357,
	0, 0, 217, 218, 0, 0, 219, 220, 221, 662,
	664, 703, 0, 360, 225, 0, 222, 0, 702, 223,
	681, 224, 682, 683, 684, 685, 686, 0, 644, 0,
	704, 226, 227, 228, 705, 229, 230, 231, 0, 233,
	232, 0, 667, 706, 234, 707, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 708, 242,
	243, 245, 244, 605, 0, 634, 663, 246, 687, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	709, 252, 710, 657, 253, 254, 255, 256, 257, 0,
	258, 658, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 688, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	711, 281, 282, 611, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 651, 295, 284, 285,
	296, 712, 297, 689, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 690, 302, 303, 659, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 691,
	692, 0, 0, 314, 315, 660, 661, 632, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 652, 324,
	0, 388, 325, 326, 327, 389, 693, 0, 0, 328,
	0, 0, 0, 0, 329, 330, 331, 332, 333, 606,
	1554, 0, 637, 626, 627, 624, 625, 616, 0, 604,
	0, 0, 0, 0, 602, 603, 0, 0, 178, 179,
	0, 180, 0, 612, 0, 0, 654, 619, 0, 615,
	0, 181, 182, 183, 335, 669, 337, 670, 184, 671,
	672, 0, 185, 341, 342, 186, 187, 622, 653, 673,
	674, 345, 0, 188, 665, 0, 645, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 699,
	196, 197, 198, 0, 646, 647, 649, 0, 648, 650,
	199, 200, 398, 201, 675, 202, 676, 677, 0, 203,
	0, 204, 0, 205, 0, 0, 668, 207, 0, 208,
	0, 0, 0, 610, 209, 210, 211, 655, 656, 633,
	700, 0, 0, 0, 0, 0, 212, 213, 678, 679,
	680, 0, 214, 0, 215, 0, 0, 701, 0, 216,
	666, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 662, 664, 703, 0, 360, 225, 0, 222,
	0, 702, 223, 681, 224, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 226, 227, 228, 705, 229, 230,
	231, 0, 233, 232, 0, 667, 706, 234, 707, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 708, 242, 243, 245, 244, 605, 0, 634, 663,
	246, 687, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 709, 252, 710, 657, 253, 254, 255,
	256, 257, 0, 258, 658, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 688, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 711, 281, 282, 611, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 651,
	295, 284, 285, 296, 712, 297, 689, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 690, 302, 303, 659,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 691, 692, 0, 0, 314, 315, 660, 661,
	632, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 652, 324, 0, 388, 325, 326, 327, 389, 693,
	0, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 606, 1542, 0, 637, 626, 627, 624, 625,
	616, 0, 604, 0, 0, 0, 0, 602, 603, 0,
	0, 178, 179, 0, 180, 0, 612, 0, 0, 654,
	619, 0, 615, 0, 181, 182, 183, 335, 669, 337,
	670, 184, 671, 672, 0, 185, 341, 342, 186, 187,
	622, 653, 673, 674, 345, 0, 188, 665, 0, 645,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 699, 196, 197, 198, 0, 646, 647, 649,
	0, 648, 650, 199, 200, 398, 201, 675, 202, 676,
	677, 0, 203, 0, 204, 0, 205, 0, 0, 668,
	207, 0, 208, 0, 0, 0, 610, 209, 210, 211,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 212,
	213, 678, 679, 680, 0, 214, 0, 215, 0, 0,
	701, 0, 216, 666, 0, 357, 0, 0, 217, 218,
	0, 0, 219, 220, 221, 662, 664, 703, 0, 360,
	225, 0, 222, 0, 702, 223, 681, 224, 682, 683,
	684, 685, 686, 0, 644, 0, 704, 226, 227, 228,
	705, 229, 230, 231, 0, 233, 232, 0, 667, 706,
	234, 707, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 708, 242, 243, 245, 244, 605,
	0, 634, 663, 246, 687, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 709, 252, 710, 657,
	253, 254, 255, 256, 257, 0, 258, 658, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 688, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 711, 281, 282, 611,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 651, 295, 284, 285, 296, 712, 297, 689,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 690,
	302, 303, 659, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 691, 692, 0, 0, 314,
	315, 660, 661, 632, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 652, 324, 0, 388, 325, 326,
	327, 389, 693, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 606, 1540, 0, 1532, 626,
	627, 624, 625, 616, 0, 604, 0, 0, 0, 0,
	602, 603, 0, 0, 178, 179, 0, 180, 0, 612,
	0, 0, 654, 619, 0, 615, 0, 181, 182, 183,
	335, 669, 337, 670, 184, 671, 672, 0, 185, 341,
	342, 186, 187, 622, 653, 673, 674, 345, 0, 188,
	665, 0, 645, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 699, 196, 197, 198, 0,
	646, 647, 649, 0, 648, 650, 199, 200, 398, 201,
	675, 1535, 676, 677, 0, 203, 0, 204, 0, 205,
	0, 0, 668, 207, 0, 208, 0, 0, 0, 610,
	209, 210, 211, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 212, 213, 678, 679, 680, 0, 214, 0,
	215, 0, 0, 701, 0, 216, 666, 0, 357, 0,
	0, 217, 1536, 0, 0, 219, 220, 221, 662, 664,
	703, 0, 360, 225, 0, 222, 0, 702, 223, 681,
	224, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	226, 227, 228, 705, 229, 230, 231, 0, 233, 232,
	0, 667, 706, 234, 707, 0, 235, 0, 0, 236,
	0, 237, 1537, 1534, 241, 369, 240, 708, 242, 243,
	245, 244, 605, 0, 634, 663, 246, 687, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 709,
	252, 710, 657, 253, 254, 255, 256, 257, 0, 258,
	658, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	688, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 711,
	281, 282, 611, 283, 0, 287, 288, 289, 1538, 0,
	292, 378, 291, 293, 294, 651, 295, 284, 285, 296,
	712, 297, 689, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 690, 302, 303, 659, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 691, 692,
	0, 0, 314, 315, 660, 661, 632, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 652, 324, 0,
	388, 325, 326, 327, 389, 693, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 1533, 333, 606, 1529,
	0, 1532, 626, 627, 624, 625, 616, 0, 604, 0,
	0, 0, 0, 602, 603, 0, 0, 178, 179, 0,
	180, 0, 612, 0, 0, 654, 619, 0, 615, 0,
	181, 182, 183, 335, 669, 337, 670, 184, 671, 672,
	0, 185, 341, 342, 186, 187, 622, 653, 673, 674,
	345, 0, 188, 665, 0, 645, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 699, 196,
	197, 198, 0, 646, 647, 649, 0, 648, 650, 199,
	200, 398, 201, 675, 1535, 676, 677, 0, 203, 0,
	204, 0, 205, 0, 0, 668, 207, 0, 208, 0,
	0, 0, 610, 209, 210, 211, 655, 656, 633, 700,
	0, 0, 0, 0, 0, 212, 213, 678, 679, 680,
	0, 214, 0, 215, 0, 0, 701, 0, 216, 666,
	0, 357, 0, 0, 217, 1536, 0, 0, 219, 220,
	221, 662, 664, 703, 0, 360, 225, 0, 222, 0,
	702, 223, 681, 224, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 226, 227, 228, 705, 229, 230, 231,
	0, 233, 232, 0, 667, 706, 234, 707, 0, 235,
	0, 0, 236, 0, 237, 1537, 1534, 241, 369, 240,
	708, 242, 243, 245, 244, 605, 0, 634, 663, 246,
	687, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 709, 252, 710, 657, 253, 254, 255, 256,
	257, 0, 258, 658, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 688, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 711, 281, 282, 611, 283, 0, 287, 288,
	289, 1538, 0, 292, 378, 291, 293, 294, 651, 295,
	284, 285, 296, 712, 297, 689, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 690, 302, 303, 659, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 691, 692, 0, 0, 314, 315, 660, 661, 632,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	652, 324, 0, 388, 325, 326, 327, 389, 693, 0,
	0, 328, 0, 0, 0, 0, 329, 330, 331, 1533,
	333, 606, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 178,
	179, 0, 180, 0, 0, 612, 0, 654, 619, 0,
	0, 615, 181, 182, 183, 335, 669, 337, 670, 184,
	671, 672, 0, 185, 341, 342, 186, 187, 622, 653,
	673, 674, 345, 0, 188, 665, 0, 645, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	699, 196, 197, 198, 0, 646, 647, 649, 0, 648,
	650, 199, 200, 398, 201, 675, 202, 676, 677, 0,
	203, 0, 204, 0, 205, 0, 0, 668, 207, 0,
	208, 0, 0, 0, 610, 209, 210, 211, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 212, 213, 678,
	679, 680, 0, 214, 0, 215, 0, 0, 701, 0,
	216, 666, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 662, 664, 703, 0, 360, 225, 0,
	222, 0, 702, 223, 681, 224, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 226, 227, 228, 705, 229,
	230, 231, 0, 233, 232, 0, 667, 706, 234, 707,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 708, 242, 243, 245, 244, 605, 0, 634,
	663, 246, 687, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 709, 252, 710, 657, 253, 254,
	255, 256, 257, 0, 258, 658, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 688, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 711, 281, 282, 611, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	651, 295, 284, 285, 296, 712, 297, 689, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 690, 302, 303,
	659, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 691, 692, 0, 0, 314, 315, 660,
	661, 632, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 652, 324, 0, 388, 325, 326, 327, 389,
	693, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 606, 0, 637, 626, 627, 624, 625,
	616, 0, 0, 604, 0, 0, 0, 0, 602, 603,
	0, 178, 179, 1395, 180, 1030, 0, 612, 0, 654,
	619, 0, 0, 615, 181, 182, 183, 335, 669, 337,
	670, 184, 671, 672, 0, 185, 341, 342, 186, 187,
	622, 653, 673, 674, 345, 0, 188, 665, 0, 645,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 699, 196, 197, 198, 0, 646, 647, 649,
	0, 648, 650, 199, 200, 398, 201, 675, 202, 676,
	677, 0, 203, 0, 204, 0, 205, 0, 0, 668,
	207, 0, 208, 0, 0, 0, 610, 209, 210, 211,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 212,
	213, 678, 679, 680, 0, 214, 0, 215, 0, 0,
	701, 0, 216, 666, 0, 357, 0, 0, 217, 218,
	0, 0, 219, 220, 221, 662, 664, 703, 0, 360,
	225, 0, 222, 0, 702, 223, 681, 224, 682, 683,
	684, 685, 686, 0, 644, 0, 704, 226, 227, 228,
	705, 229, 230, 231, 0, 233, 232, 0, 667, 706,
	234, 707, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 708, 242, 243, 245, 244, 605,
	0, 634, 663, 246, 687, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 709, 252, 710, 657,
	253, 254, 255, 256, 257, 0, 258, 658, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 688, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 711, 281, 282, 611,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 651, 295, 284, 285, 296, 712, 297, 689,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 690,
	302, 303, 659, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 691, 692, 0, 0, 314,
	315, 660, 661, 632, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 652, 324, 0, 388, 325, 326,
	327, 389, 693, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 606, 791, 0, 637, 626,
	627, 624, 625, 616, 0, 604, 0, 0, 0, 0,
	602, 603, 0, 0, 178, 179, 0, 180, 0, 612,
	0, 0, 654, 619, 0, 615, 0, 181, 182, 183,
	335, 669, 337, 670, 184, 671, 672, 0, 185, 341,
	342, 186, 187, 622, 653, 673, 674, 345, 0, 188,
	665, 0, 645, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 699, 196, 197, 198, 0,
	646, 647, 649, 0, 648, 650, 199, 200, 398, 201,
	675, 202, 676, 677, 0, 203, 0, 204, 0, 205,
	0, 0, 668, 207, 0, 208, 0, 0, 0, 610,
	209, 210, 211, 655, 656, 633, 700, 0, 0, 0,
	0, 0, 212, 213, 678, 679, 680, 0, 214, 0,
	215, 0, 0, 701, 0, 216, 666, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 662, 664,
	703, 0, 360, 225, 0, 222, 0, 702, 223, 681,
	224, 682, 683, 684, 685, 686, 0, 644, 0, 704,
	226, 227, 228, 705, 229, 230, 231, 0, 233, 232,
	0, 667, 706, 234, 707, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 708, 242, 243,
	245, 244, 605, 0, 634, 663, 246, 687, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 709,
	252, 710, 657, 253, 254, 255, 256, 257, 0, 258,
	658, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	688, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 711,
	281, 282, 611, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 651, 295, 284, 285, 296,
	712, 297, 689, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 690, 302, 303, 659, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 691, 692,
	0, 0, 314, 315, 660, 661, 632, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 652, 324, 0,
	388, 325, 326, 327, 389, 693, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 606, 789,
	0, 637, 626, 627, 624, 625, 616, 0, 604, 0,
	0, 0, 0, 602, 603, 0, 0, 178, 179, 0,
	180, 0, 612, 0, 0, 654, 619, 0, 615, 0,
	181, 182, 183, 335, 669, 337, 670, 184, 671, 672,
	0, 185, 341, 342, 186, 187, 622, 653, 673, 674,
	345, 0, 188, 665, 0, 645, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 699, 196,
	197, 198, 0, 646, 647, 649, 0, 648, 650, 199,
	200, 398, 201, 675, 202, 676, 677, 0, 203, 0,
	204, 0, 205, 0, 0, 668, 207, 0, 208, 0,
	0, 0, 610, 209, 210, 211, 655, 656, 633, 700,
	0, 0, 0, 0, 0, 212, 213, 678, 679, 680,
	0, 214, 0, 215, 0, 0, 701, 0, 216, 666,
	0, 357, 0, 0, 217, 218, 0, 0, 219, 220,
	221, 662, 664, 703, 0, 360, 225, 0, 222, 0,
	702, 223, 681, 224, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 226, 227, 228, 705, 229, 230, 231,
	0, 233, 232, 0, 667, 706, 234, 707, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	708, 242, 243, 245, 244, 605, 0, 634, 663, 246,
	687, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 709, 252, 710, 657, 253, 254, 255, 256,
	257, 0, 258, 658, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 688, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 711, 281, 282, 611, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 651, 295,
	284, 285, 296, 712, 297, 689, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 690, 302, 303, 659, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 691, 692, 0, 0, 314, 315, 660, 661, 632,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	652, 324, 0, 388, 325, 326, 327, 389, 693, 0,
	0, 328, 0, 0, 0, 0, 329, 330, 331, 332,
	333, 606, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 604, 0, 0, 0, 0, 602, 603, 0, 178,
	179, 0, 180, 0, 0, 612, 0, 654, 619, 0,
	0, 615, 181, 182, 183, 335, 669, 337, 670, 184,
	671, 672, 0, 185, 341, 342, 186, 187, 622, 653,
	673, 674, 345, 0, 188, 665, 0, 645, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	699, 196, 197, 2486, 0, 646, 647, 649, 0, 648,
	650, 199, 200, 398, 201, 675, 202, 676, 677, 0,
	203, 0, 204, 0, 205, 0, 0, 668, 207, 0,
	208, 0, 0, 0, 610, 209, 210, 211, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 212, 213, 678,
	679, 680, 0, 214, 0, 215, 0, 0, 701, 0,
	216, 666, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 662, 664, 703, 0, 360, 225, 0,
	222, 0, 702, 223, 681, 224, 682, 683, 684, 685,
	686, 0, 644, 0, 704, 226, 227, 228, 705, 229,
	230, 231, 0, 233, 232, 0, 667, 706, 234, 707,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 708, 242, 243, 245, 244, 605, 0, 634,
	663, 246, 687, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 709, 252, 710, 657, 253, 254,
	255, 256, 257, 0, 258, 658, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 688, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 711, 281, 282, 611, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	651, 295, 284, 285, 296, 712, 297, 689, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 690, 302, 303,
	659, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 691, 692, 0, 0, 314, 315, 660,
	661, 632, 316, 317, 2485, 319, 0, 0, 320, 321,
	322, 323, 652, 324, 0, 388, 325, 326, 327, 389,
	693, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 606, 0, 637, 626, 627, 624, 625,
	616, 0, 0, 604, 0, 0, 0, 0, 602, 603,
	0, 178, 179, 0, 180, 0, 0, 612, 0, 654,
	619, 0, 0, 615, 181, 182, 183, 335, 669, 337,
	670, 184, 671, 672, 0, 185, 341, 342, 186, 187,
	622, 653, 673, 674, 345, 0, 188, 665, 0, 645,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 699, 196, 197, 198, 0, 646, 647, 649,
	0, 648, 650, 199, 200, 398, 201, 675, 202, 676,
	677, 0, 203, 0, 204, 0, 205, 0, 0, 668,
	207, 0, 208, 0, 0, 0, 610, 209, 210, 211,
	655, 656, 633, 700, 0, 0, 0, 0, 0, 212,
	213, 678, 679, 680, 0, 214, 0, 215, 0, 0,
	701, 0, 216, 666, 0, 357, 0, 0, 217, 218,
	0, 0, 219, 220, 221, 662, 664, 703, 0, 360,
	225, 0, 222, 0, 702, 223, 681, 224, 682, 683,
	684, 685, 686, 0, 644, 0, 704, 226, 227, 228,
	705, 229, 230, 231, 0, 233, 232, 0, 667, 706,
	234, 707, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 708, 242, 243, 245, 244, 605,
	0, 634, 663, 246, 687, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 709, 252, 710, 657,
	253, 254, 255, 256, 257, 0, 258, 658, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 688, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 711, 281, 282, 611,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 651, 295, 284, 285, 296, 712, 297, 689,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 690,
	302, 303, 659, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 691, 692, 0, 0, 314,
	315, 660, 661, 632, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 652, 324, 0, 388, 325, 326,
	327, 389, 693, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 606, 0, 637, 626, 627,
	624, 625, 616, 0, 0, 604, 0, 0, 0, 0,
	602, 603, 0, 178, 179, 0, 180, 0, 0, 612,
	0, 654, 619, 0, 0, 615, 181, 182, 183, 2484,
	669, 337, 670, 184, 671, 672, 0, 185, 341, 342,
	186, 187, 622, 653, 673, 674, 345, 0, 188, 665,
	0, 645, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 699, 196, 197, 2486, 0, 646,
	647, 649, 0, 648, 650, 199, 200, 398, 201, 675,
	202, 676, 677, 0, 203, 0, 204, 0, 205, 0,
	0, 668, 207, 0, 208, 0, 0, 0, 610, 209,
	210, 211, 655, 656, 633, 700, 0, 0, 0, 0,
	0, 212, 213, 678, 679, 680, 0, 214, 0, 215,
	0, 0, 701, 0, 216, 666, 0, 357, 0, 0,
	217, 218, 0, 0, 219, 220, 221, 662, 664, 703,
	0, 360, 225, 0, 222, 0, 702, 223, 681, 224,
	682, 683, 684, 685, 686, 0, 644, 0, 704, 226,
	227, 228, 705, 229, 230, 231, 0, 233, 232, 0,
	667, 706, 234, 707, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 708, 242, 243, 245,
	244, 605, 0, 634, 663, 246, 687, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 709, 252,
	710, 657, 253, 254, 255, 256, 257, 0, 258, 658,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 688,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 711, 281,
	282, 611, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 651, 295, 284, 285, 296, 712,
	297, 689, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 690, 302, 303, 659, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 691, 692, 0,
	0, 314, 315, 660, 661, 632, 316, 317, 2485, 319,
	0, 0, 320, 321, 322, 323, 652, 324, 0, 388,
	325, 326, 327, 389, 693, 0, 0, 328, 0, 0,
	0, 0, 329, 330, 331, 332, 333, 606, 0, 637,
	626, 627, 624, 625, 616, 0, 0, 604, 0, 0,
	0, 0, 602, 603, 0, 178, 179, 0, 180, 0,
	0, 612, 0, 654, 619, 0, 0, 615, 181, 182,
	183, 335, 669, 337, 670, 184, 671, 672, 0, 185,
	341, 342, 186, 187, 622, 653, 673, 674, 345, 0,
	188, 665, 0, 645, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 699, 196, 197, 198,
	0, 646, 647, 649, 0, 648, 650, 199, 200, 398,
	201, 675, 202, 676, 677, 0, 203, 0, 204, 0,
	205, 0, 0, 668, 207, 0, 208, 0, 0, 0,
	610, 209, 210, 211, 655, 656, 633, 700, 0, 0,
	0, 0, 0, 212, 213, 678, 679, 680, 0, 214,
	0, 215, 0, 0, 701, 0, 216, 666, 0, 357,
	0, 0, 217, 218, 0, 0, 219, 220, 221, 662,
	664, 703, 0, 360, 225, 0, 222, 0, 702, 223,
	681, 224, 682, 683, 684, 685, 686, 0, 644, 0,
	704, 226, 227, 228, 705, 229, 230, 231, 0, 233,
	232, 0, 667, 706, 234, 707, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 708, 242,
	243, 245, 244, 0, 0, 634, 663, 246, 687, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	709, 252, 710, 657, 253, 254, 255, 256, 257, 0,
	258, 658, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 688, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	711, 281, 282, 1552, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 651, 295, 284, 285,
	296, 712, 297, 689, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 690, 302, 303, 659, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 691,
	692, 0, 0, 314, 315, 660, 661, 632, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 652, 324,
	0, 388, 325, 326, 327, 389, 693, 0, 0, 328,
	0, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	0, 637, 626, 627, 624, 625, 616, 0, 0, 1550,
	0, 0, 0, 0, 1548, 1549, 0, 178, 179, 0,
	180, 0, 0, 1551, 0, 654, 619, 0, 0, 615,
	181, 182, 183, 335, 669, 337, 670, 184, 671, 672,
	0, 185, 341, 342, 186, 187, 0, 653, 673, 674,
	345, 0, 188, 665, 0, 645, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 699, 196,
	197, 198, 0, 646, 647, 649, 0, 648, 650, 199,
	200, 398, 201, 675, 202, 676, 677, 0, 203, 0,
	204, 0, 205, 0, 0, 668, 207, 0, 208, 0,
	0, 0, 350, 209, 210, 211, 655, 656, 633, 700,
	0, 0, 0, 0, 0, 212, 213, 678, 679, 680,
	0, 214, 0, 215, 0, 0, 701, 0, 216, 666,
	0, 357, 0, 0, 217, 218, 0, 0, 219, 220,
	221, 662, 664, 703, 0, 360, 225, 0, 222, 0,
	702, 223, 681, 224, 682, 683, 684, 685, 686, 0,
	644, 0, 704, 226, 227, 228, 705, 229, 230, 231,
	0, 233, 232, 0, 667, 706, 234, 707, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	708, 242, 243, 245, 244, 0, 0, 634, 663, 246,
	687, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 709, 252, 710, 657, 253, 254, 255, 256,
	257, 0, 258, 658, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 688, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 711, 281, 282, 1552, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 651, 295,
	284, 285, 296, 712, 297, 689, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 690, 302, 303, 659, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 691, 692, 0, 0, 314, 315, 660, 661, 632,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	652, 324, 0, 388, 325, 326, 327, 389, 693, 0,
	0, 328, 0, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 637, 626, 627, 624, 625, 616, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 1551, 0, 654, 619, 0,
	0, 615, 181, 182, 183, 0, 669, 337, 670, 184,
	671, 672, 0, 185, 341, 342, 186, 187, 622, 653,
	673, 674, 345, 0, 188, 665, 0, 645, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	699, 196, 197, 2486, 0, 646, 647, 649, 0, 648,
	650, 199, 200, 398, 201, 675, 202, 676, 677, 0,
	203, 0, 204, 0, 205, 0, 0, 668, 207, 0,
	208, 0, 0, 0, 610, 209, 210, 211, 655, 656,
	633, 700, 0, 0, 0, 0, 0, 212, 213, 678,
	679, 680, 0, 214, 0, 215, 0, 0, 701, 0,
	216, 666, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 662, 664, 0, 0, 360, 225, 0,
	222, 0, 702, 223, 681, 224, 682, 683, 684, 685,
	686, 0, 644, 0, 0, 226, 227, 228, 705, 229,
	230, 231, 0, 233, 232, 0, 667, 706, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 708, 242, 243, 245, 244, 605, 0, 634,
	663, 246, 687, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 709, 252, 710, 657, 253, 254,
	255, 256, 257, 0, 258, 658, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 688, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 711, 281, 282, 611, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	651, 295, 284, 285, 296, 0, 297, 689, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 690, 302, 303,
	659, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 691, 692, 0, 0, 314, 315, 660,
	661, 632, 316, 317, 2485, 319, 0, 0, 320, 321,
	322, 323, 652, 324, 0, 388, 325, 326, 327, 389,
	693, 0, 0, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 602, 603,
	0, 178, 179, 0, 180, 0, 0, 612, 0, 654,
	0, 0, 0, 615, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 653, 343, 344, 345, 0, 188, 665, 0, 645,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 699, 196, 197, 198, 0, 646, 647, 649,
	0, 648, 650, 199, 200, 398, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 210, 211,
	655, 656, 0, 700, 0, 0, 0, 0, 0, 212,
	213, 353, 354, 355, 0, 214, 0, 215, 0, 0,
	701, 0, 216, 666, 0, 357, 0, 0, 217, 218,
	0, 0, 219, 220, 221, 662, 664, 703, 0, 360,
	225, 0, 222, 0, 702, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 704, 226, 227, 228,
	705, 229, 230, 231, 0, 233, 232, 0, 667, 706,
	234, 707, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 708, 242, 243, 245, 244, 0,
	0, 0, 663, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 709, 252, 710, 657,
	253, 254, 255, 256, 257, 0, 258, 658, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 711, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 651, 295, 284, 285, 296, 712, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 659, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 660, 661, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 652, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 842, 0, 769, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 2130,
	0, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 773, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 699, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 398, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	210, 211, 351, 352, 0, 700, 0, 0, 0, 0,
	0, 212, 213, 353, 354, 355, 0, 214, 0, 215,
	0, 0, 701, 0, 216, 356, 0, 357, 0, 0,
	217, 218, 0, 0, 219, 220, 221, 358, 359, 703,
	0, 360, 225, 0, 222, 0, 702, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 704, 226,
	227, 228, 705, 229, 230, 231, 0, 233, 232, 0,
	368, 706, 234, 707, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 708, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 709, 252,
	710, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 711, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 137, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 712,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 139, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 845, 390, 0, 0, 328, 0, 0,
	0, 131, 329, 330, 331, 332, 333, 588, 132, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 112, 0, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 345, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 398,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 210, 211, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 353, 354, 355, 0, 214,
	0, 215, 0, 0, 0, 0, 216, 356, 0, 357,
	0, 0, 217, 218, 0, 0, 219, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 752, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	137, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 139,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 845, 390, 0, 0, 328,
	0, 0, 0, 131, 329, 330, 331, 332, 333, 0,
	132, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 746, 0, 1109, 0, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 398, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 210, 211, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 353, 354, 355,
	0, 214, 0, 215, 0, 0, 0, 0, 216, 356,
	0, 357, 0, 0, 217, 218, 0, 0, 219, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 752, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 137, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 139, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 845, 390, 0,
	0, 328, 0, 0, 0, 131, 329, 330, 331, 332,
	333, 588, 132, 175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 746, 0, 1109, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 398, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 210, 211, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 353,
	354, 355, 0, 214, 0, 215, 0, 0, 0, 0,
	216, 356, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 358, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 137, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 139, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 845,
	390, 0, 0, 328, 0, 0, 0, 131, 329, 330,
	331, 332, 333, 1878, 132, 175, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 112, 0, 334,
	0, 0, 0, 0, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 0, 343, 344, 345, 0, 188, 346, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 398, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 210, 211,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 353, 354, 355, 0, 214, 0, 215, 0, 0,
	0, 0, 216, 356, 0, 357, 0, 0, 217, 218,
	0, 0, 219, 220, 221, 358, 359, 0, 0, 360,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	752, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 0, 295, 284, 285, 296, 0, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 382, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 386, 387, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 0, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 0, 328, 0, 0, 0, 0,
	329, 330, 331, 332, 333, 745, 0, 175, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 746, 0, 751,
	0, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 398, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	210, 211, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 353, 354, 355, 0, 214, 0, 215,
	0, 0, 0, 0, 216, 356, 0, 357, 0, 0,
	217, 218, 0, 0, 219, 220, 221, 358, 359, 0,
	0, 360, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 752, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 0,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 389, 390, 0, 0, 328, 0, 0,
	0, 0, 329, 330, 331, 332, 333, 0, 175, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 746,
	0, 751, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 0, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 752, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	746, 0, 751, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 345, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 398,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 210, 211, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 353, 354, 355, 0, 214,
	0, 215, 0, 0, 0, 0, 216, 356, 0, 357,
	0, 0, 217, 218, 0, 0, 219, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 389, 390, 0, 0, 328,
	0, 0, 0, 0, 329, 330, 331, 332, 333, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 334, 1227, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 345, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 398,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 210, 211, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 353, 354, 355, 0, 214,
	0, 215, 0, 0, 0, 0, 216, 356, 0, 357,
	0, 0, 217, 218, 0, 0, 219, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 389, 390, 0, 0, 328,
	0, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 1693, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	398, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 210, 211, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 353, 354, 355, 0,
	214, 0, 215, 0, 0, 0, 0, 216, 356, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 0, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 175, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 2046, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 398, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 210, 211, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 353, 354, 355,
	0, 214, 0, 215, 0, 0, 0, 0, 216, 356,
	0, 357, 0, 0, 217, 218, 0, 0, 219, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 389, 390, 0,
	0, 328, 0, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 637, 626, 627, 624, 625, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 1112, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 669, 337, 670, 184, 671,
	672, 0, 185, 341, 342, 186, 187, 0, 0, 673,
	674, 345, 0, 188, 346, 0, 773, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 699,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 675, 202, 676, 677, 0, 203,
	0, 204, 0, 205, 0, 0, 668, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 633,
	700, 0, 0, 0, 0, 0, 212, 213, 678, 679,
	680, 0, 214, 0, 215, 0, 0, 701, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 358, 359, 703, 0, 360, 225, 0, 222,
	0, 702, 223, 681, 224, 682, 683, 684, 685, 686,
	0, 644, 0, 704, 226, 227, 228, 705, 229, 230,
	231, 0, 233, 232, 0, 368, 706, 234, 707, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 708, 242, 243, 245, 244, 0, 0, 634, 370,
	246, 687, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 709, 252, 710, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 688, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 711, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 712, 297, 689, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 690, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 691, 692, 0, 0, 314, 315, 386, 387,
	632, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 693,
	0, 480, 328, 175, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 171, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 210, 211, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 353,
	354, 355, 0, 214, 0, 215, 0, 0, 0, 0,
	216, 356, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 358, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 170, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 168, 328, 175, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	174, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 171, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 210, 211, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	353, 354, 355, 0, 214, 0, 215, 0, 0, 0,
	0, 216, 356, 0, 357, 0, 0, 217, 218, 0,
	0, 219, 220, 221, 358, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 170, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 0, 175, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 334, 0, 0,
	0, 174, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 171, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 210, 211, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 353,
	354, 355, 0, 214, 0, 215, 0, 0, 0, 0,
	216, 356, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 358, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 170, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 175, 328, 0, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	174, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 0, 215, 0, 0, 0, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	0, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 898, 0, 769, 768, 0, 0, 0, 766,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 174,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 773, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 699, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 398, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 210, 211, 351,
	352, 0, 700, 0, 0, 0, 0, 0, 212, 213,
	353, 354, 355, 0, 214, 0, 215, 0, 0, 701,
	0, 216, 356, 0, 357, 0, 0, 217, 218, 0,
	0, 219, 220, 221, 358, 359, 703, 0, 360, 225,
	0, 222, 0, 702, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 704, 226, 227, 228, 705,
	229, 230, 231, 0, 233, 232, 0, 368, 706, 234,
	707, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 708, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 709, 252, 710, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 711, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 712, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 0, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 837, 0, 769, 768, 0, 0,
	0, 766, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	773, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 699, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 398, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 210,
	211, 351, 352, 0, 700, 0, 0, 0, 0, 0,
	212, 213, 353, 354, 355, 0, 214, 0, 215, 0,
	0, 701, 0, 216, 356, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 836, 359, 703, 0,
	360, 225, 0, 222, 0, 702, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 704, 226, 227,
	228, 705, 229, 230, 231, 0, 233, 232, 0, 368,
	706, 234, 707, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 708, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 709, 252, 710,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 711, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 712, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 0, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 803, 0, 769, 768,
	0, 0, 0, 766, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 773, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 699, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 700, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 701, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 802, 359,
	703, 0, 360, 225, 0, 222, 0, 702, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 704,
	226, 227, 228, 705, 229, 230, 231, 0, 233, 232,
	0, 368, 706, 234, 707, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 708, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 709,
	252, 710, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 711,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	712, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 0, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 762, 0,
	769, 768, 0, 0, 0, 766, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 773, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 699, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	398, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 210, 211, 351, 352, 0, 700, 0,
	0, 0, 0, 0, 212, 213, 353, 354, 355, 0,
	214, 0, 215, 0, 0, 701, 0, 216, 356, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	764, 359, 703, 0, 360, 225, 0, 222, 0, 702,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 704, 226, 227, 228, 705, 229, 230, 231, 0,
	233, 232, 0, 368, 706, 234, 707, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 708,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 709, 252, 710, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 711, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 712, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 769, 768,
	328, 0, 0, 766, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 773, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 699, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 700, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 701, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 358, 359,
	703, 0, 360, 225, 0, 222, 0, 702, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 704,
	226, 227, 228, 705, 229, 230, 231, 0, 233, 232,
	0, 368, 706, 234, 707, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 708, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 709,
	252, 710, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 711,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	712, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 769, 768, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	773, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 699, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 398, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 210,
	211, 351, 352, 0, 700, 0, 0, 0, 0, 0,
	212, 213, 353, 354, 355, 0, 214, 0, 215, 0,
	0, 701, 0, 216, 356, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 358, 359, 703, 0,
	360, 225, 0, 222, 0, 702, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 704, 226, 227,
	228, 705, 229, 230, 231, 0, 233, 232, 0, 368,
	706, 234, 707, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 708, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 709, 252, 710,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 711, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 712, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 769, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 773, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 699, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 398, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 210, 211, 351,
	352, 0, 700, 0, 0, 0, 0, 0, 212, 213,
	353, 354, 355, 0, 214, 0, 215, 0, 0, 701,
	0, 216, 356, 0, 357, 0, 0, 217, 218, 0,
	0, 219, 220, 221, 358, 359, 703, 0, 360, 225,
	0, 222, 0, 702, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 704, 226, 227, 228, 705,
	229, 230, 231, 0, 233, 232, 0, 368, 706, 234,
	707, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 708, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 709, 252, 710, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 711, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 712, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 175, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 1628, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 1626, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 0,
	1669, 0, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 0, 215, 1631, 0, 0, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 358, 359, 0, 0, 360, 225, 1667, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 1630, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 1668, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	175, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	1628, 188, 346, 0, 0, 1623, 189, 190, 191, 0,
	192, 1626, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	398, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 210, 211, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 353, 354, 355, 0,
	214, 0, 215, 1631, 0, 0, 0, 216, 356, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	1622, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 1630, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 1629, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 0, 819,
	328, 175, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 398, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 210, 211, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 353, 354, 355,
	0, 214, 0, 215, 0, 0, 0, 0, 216, 356,
	0, 357, 0, 0, 217, 218, 0, 0, 219, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 752, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 389, 390, 0,
	758, 328, 175, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 0, 215, 0, 0, 0, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 760, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 752, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	0, 754, 328, 175, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 398, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 210, 211, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 353,
	354, 355, 0, 214, 0, 215, 0, 0, 0, 0,
	216, 356, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 756, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 752, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 410, 328, 175, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 409, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 398, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 210, 211, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	353, 354, 355, 0, 214, 0, 215, 0, 0, 0,
	0, 216, 356, 0, 357, 0, 0, 217, 218, 0,
	0, 219, 220, 221, 358, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 408,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 175, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 1611, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 0, 215, 0, 0, 0, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	175, 2193, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	398, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 210, 211, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 353, 354, 355, 0,
	214, 0, 215, 0, 0, 0, 0, 216, 356, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 175, 2193,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 0, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 2190, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 175, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 398, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 210,
	211, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 353, 354, 355, 0, 214, 0, 215, 0,
	0, 0, 0, 216, 356, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 358, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 752, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 0, 1384, 328, 175, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 398, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	210, 211, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 353, 354, 355, 0, 214, 0, 215,
	0, 0, 0, 0, 216, 356, 0, 357, 0, 0,
	217, 218, 0, 0, 219, 220, 221, 358, 359, 0,
	0, 360, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 0,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 389, 390, 0, 1382, 328, 175, 0,
	0, 0, 329, 330, 331, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 0, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 175, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 178, 179, 1364, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 398, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 210,
	211, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 353, 354, 355, 0, 214, 0, 215, 0,
	0, 0, 0, 216, 356, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 358, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 0, 506, 328, 175, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 877, 0, 188, 346,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 398, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	210, 211, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 353, 354, 355, 0, 214, 0, 215,
	0, 0, 0, 0, 216, 356, 0, 357, 0, 0,
	217, 218, 0, 0, 219, 220, 221, 358, 359, 0,
	0, 360, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 508, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 0,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 503, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 389, 390, 0, 1242, 328, 175, 0,
	0, 0, 329, 330, 331, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 0, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 1241, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 0, 506, 328, 175,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 877, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 398,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 210, 211, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 353, 354, 355, 0, 214,
	0, 215, 0, 0, 0, 0, 216, 356, 0, 357,
	0, 0, 217, 218, 0, 0, 219, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 508, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 287, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 503, 384,
	385, 0, 0, 314, 878, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 389, 390, 0, 506, 328,
	175, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 497, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	398, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 210, 211, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 353, 354, 355, 0,
	214, 0, 215, 0, 0, 0, 0, 216, 356, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 508, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 861, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 503,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 0, 834,
	328, 175, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 398, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 210, 211, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 353, 354, 355,
	0, 214, 0, 215, 0, 0, 0, 0, 216, 356,
	0, 357, 0, 0, 217, 218, 0, 0, 219, 220,
	221, 833, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 389, 390, 0,
	830, 328, 175, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 0, 215, 0, 0, 0, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 829, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	0, 827, 328, 175, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 398, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 210, 211, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 353,
	354, 355, 0, 214, 0, 215, 0, 0, 0, 0,
	216, 356, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 826, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 823, 328, 175, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 398, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 210, 211, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	353, 354, 355, 0, 214, 0, 215, 0, 0, 0,
	0, 216, 356, 0, 357, 0, 0, 217, 218, 0,
	0, 219, 220, 221, 822, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 175, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 178, 179,
	811, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 0, 215, 0, 0, 0, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	0, 809, 328, 175, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 0, 0, 0, 178,
	179, 0, 180, 0, 0, 0, 0, 334, 0, 0,
	0, 0, 181, 182, 183, 335, 336, 337, 338, 184,
	339, 340, 0, 185, 341, 342, 186, 187, 0, 0,
	343, 344, 345, 0, 188, 346, 0, 0, 0, 189,
	190, 191, 0, 192, 0, 193, 0, 194, 195, 0,
	0, 196, 197, 198, 0, 0, 0, 0, 0, 0,
	0, 199, 200, 398, 201, 347, 202, 348, 349, 0,
	203, 0, 204, 0, 205, 0, 0, 206, 207, 0,
	208, 0, 0, 0, 350, 209, 210, 211, 351, 352,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 353,
	354, 355, 0, 214, 0, 215, 0, 0, 0, 0,
	216, 356, 0, 357, 0, 0, 217, 218, 0, 0,
	219, 220, 221, 808, 359, 0, 0, 360, 225, 0,
	222, 0, 0, 223, 361, 224, 362, 363, 364, 365,
	366, 0, 367, 0, 0, 226, 227, 228, 0, 229,
	230, 231, 0, 233, 232, 0, 368, 0, 234, 0,
	0, 235, 0, 0, 236, 0, 237, 238, 239, 241,
	369, 240, 0, 242, 243, 245, 244, 0, 0, 0,
	370, 246, 371, 247, 248, 0, 249, 0, 0, 250,
	0, 0, 251, 372, 0, 252, 0, 373, 253, 254,
	255, 256, 257, 0, 258, 374, 259, 375, 260, 0,
	261, 262, 263, 264, 265, 376, 266, 267, 0, 268,
	269, 270, 271, 272, 0, 274, 275, 273, 276, 277,
	278, 279, 0, 280, 0, 281, 282, 377, 283, 0,
	287, 288, 289, 290, 0, 292, 378, 291, 293, 294,
	0, 295, 284, 285, 296, 0, 297, 379, 380, 298,
	0, 305, 299, 300, 286, 301, 304, 381, 302, 303,
	382, 0, 306, 0, 307, 308, 309, 310, 311, 312,
	313, 0, 383, 384, 385, 0, 0, 314, 315, 386,
	387, 0, 316, 317, 318, 319, 0, 0, 320, 321,
	322, 323, 0, 324, 0, 388, 325, 326, 327, 389,
	390, 0, 805, 328, 175, 0, 0, 0, 329, 330,
	331, 332, 333, 0, 0, 0, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 398, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 210, 211, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	353, 354, 355, 0, 214, 0, 215, 0, 0, 0,
	0, 216, 356, 0, 357, 0, 0, 217, 218, 0,
	0, 219, 220, 221, 358, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 0, 798, 328, 175, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 0, 0,
	0, 178, 179, 0, 180, 0, 0, 0, 0, 334,
	0, 0, 0, 0, 181, 182, 183, 335, 336, 337,
	338, 184, 339, 340, 0, 185, 341, 342, 186, 187,
	0, 0, 343, 344, 345, 0, 188, 346, 0, 0,
	0, 189, 190, 191, 0, 192, 0, 193, 0, 194,
	195, 0, 0, 196, 197, 198, 0, 0, 0, 0,
	0, 0, 0, 199, 200, 398, 201, 347, 202, 348,
	349, 0, 203, 0, 204, 0, 205, 0, 0, 206,
	207, 0, 208, 0, 0, 0, 350, 209, 210, 211,
	351, 352, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 353, 354, 355, 0, 214, 0, 215, 0, 0,
	0, 0, 216, 356, 0, 357, 0, 0, 217, 218,
	0, 0, 219, 220, 221, 800, 359, 0, 0, 360,
	225, 0, 222, 0, 0, 223, 361, 224, 362, 363,
	364, 365, 366, 0, 367, 0, 0, 226, 227, 228,
	0, 229, 230, 231, 0, 233, 232, 0, 368, 0,
	234, 0, 0, 235, 0, 0, 236, 0, 237, 238,
	239, 241, 369, 240, 0, 242, 243, 245, 244, 0,
	0, 0, 370, 246, 371, 247, 248, 0, 249, 0,
	0, 250, 0, 0, 251, 372, 0, 252, 0, 373,
	253, 254, 255, 256, 257, 0, 258, 374, 259, 375,
	260, 0, 261, 262, 263, 264, 265, 376, 266, 267,
	0, 268, 269, 270, 271, 272, 0, 274, 275, 273,
	276, 277, 278, 279, 0, 280, 0, 281, 282, 377,
	283, 0, 287, 288, 289, 290, 0, 292, 378, 291,
	293, 294, 0, 295, 284, 285, 296, 0, 297, 379,
	380, 298, 0, 305, 299, 300, 286, 301, 304, 381,
	302, 303, 382, 0, 306, 0, 307, 308, 309, 310,
	311, 312, 313, 0, 383, 384, 385, 0, 0, 314,
	315, 386, 387, 0, 316, 317, 318, 319, 0, 0,
	320, 321, 322, 323, 0, 324, 0, 388, 325, 326,
	327, 389, 390, 0, 776, 328, 175, 0, 0, 0,
	329, 330, 331, 332, 333, 0, 0, 0, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 398, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 210,
	211, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 353, 354, 355, 0, 214, 0, 215, 0,
	0, 0, 0, 216, 356, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 778, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 0, 774, 328, 175, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	0, 0, 0, 178, 179, 0, 180, 0, 0, 0,
	0, 334, 0, 0, 0, 0, 181, 182, 183, 335,
	336, 337, 338, 184, 339, 340, 0, 185, 341, 342,
	186, 187, 0, 0, 343, 344, 345, 0, 188, 346,
	0, 0, 0, 189, 190, 191, 0, 192, 0, 193,
	0, 194, 195, 0, 0, 196, 197, 198, 0, 0,
	0, 0, 0, 0, 0, 199, 200, 398, 201, 347,
	202, 348, 349, 0, 203, 0, 204, 0, 205, 0,
	0, 206, 207, 0, 208, 0, 0, 0, 350, 209,
	210, 211, 351, 352, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 353, 354, 355, 0, 214, 0, 215,
	0, 0, 0, 0, 216, 356, 0, 357, 0, 0,
	217, 218, 0, 0, 219, 220, 221, 358, 359, 0,
	0, 360, 225, 0, 222, 0, 0, 223, 361, 224,
	362, 363, 364, 365, 366, 0, 367, 0, 0, 226,
	227, 228, 0, 229, 230, 231, 0, 233, 232, 0,
	368, 0, 234, 0, 0, 235, 0, 0, 236, 0,
	237, 238, 239, 241, 369, 240, 0, 242, 243, 245,
	244, 0, 0, 0, 370, 246, 371, 247, 248, 0,
	249, 0, 0, 250, 0, 0, 251, 372, 0, 252,
	0, 373, 253, 254, 255, 256, 257, 0, 258, 374,
	259, 375, 260, 0, 261, 262, 263, 264, 265, 376,
	266, 267, 0, 268, 269, 270, 271, 272, 0, 274,
	275, 273, 276, 277, 278, 279, 0, 280, 0, 281,
	282, 377, 283, 0, 287, 288, 289, 290, 0, 292,
	378, 291, 293, 294, 0, 295, 284, 285, 296, 0,
	297, 379, 380, 298, 0, 305, 299, 300, 286, 301,
	304, 381, 302, 303, 382, 0, 306, 0, 307, 308,
	309, 310, 311, 312, 313, 0, 383, 384, 385, 0,
	0, 314, 315, 386, 387, 0, 316, 317, 318, 319,
	0, 0, 320, 321, 322, 323, 0, 324, 0, 388,
	325, 326, 327, 389, 390, 0, 506, 328, 175, 0,
	0, 0, 329, 330, 331, 332, 333, 0, 0, 0,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 497,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 0, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 496, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 508, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 498, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 499, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 503, 384, 385,
	0, 0, 314, 501, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 0, 488, 328, 175,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 0, 0, 0, 178, 179, 0, 180, 0,
	0, 0, 0, 334, 0, 0, 0, 0, 181, 182,
	183, 335, 336, 337, 338, 184, 339, 340, 0, 185,
	341, 342, 186, 187, 0, 0, 343, 344, 345, 0,
	188, 346, 0, 0, 0, 189, 190, 191, 0, 192,
	0, 193, 0, 194, 195, 0, 0, 196, 197, 198,
	0, 0, 0, 0, 0, 0, 0, 199, 200, 398,
	201, 347, 202, 348, 349, 0, 203, 0, 204, 0,
	205, 0, 0, 206, 207, 0, 208, 0, 0, 0,
	350, 209, 210, 211, 351, 352, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 353, 354, 355, 0, 214,
	0, 215, 0, 0, 0, 0, 216, 356, 0, 357,
	0, 0, 217, 218, 0, 0, 219, 220, 221, 358,
	359, 0, 0, 360, 225, 0, 222, 0, 0, 223,
	361, 224, 362, 363, 364, 365, 366, 0, 367, 0,
	0, 226, 227, 228, 0, 229, 230, 231, 0, 233,
	232, 0, 368, 0, 234, 0, 0, 235, 0, 0,
	236, 0, 237, 238, 239, 241, 369, 240, 0, 242,
	243, 245, 244, 0, 0, 0, 370, 246, 371, 247,
	248, 0, 249, 0, 0, 250, 0, 0, 251, 372,
	0, 252, 0, 373, 253, 254, 255, 256, 257, 0,
	258, 374, 259, 375, 260, 0, 261, 262, 263, 264,
	265, 376, 266, 267, 0, 268, 269, 270, 271, 272,
	0, 274, 275, 273, 276, 277, 278, 279, 0, 280,
	0, 281, 282, 377, 283, 0, 489, 288, 289, 290,
	0, 292, 378, 291, 293, 294, 0, 295, 284, 285,
	296, 0, 297, 379, 380, 298, 0, 305, 299, 300,
	286, 301, 304, 381, 302, 303, 382, 0, 306, 0,
	307, 308, 309, 310, 311, 312, 313, 0, 383, 384,
	385, 0, 0, 314, 315, 386, 387, 0, 316, 317,
	318, 319, 0, 0, 320, 321, 322, 323, 0, 324,
	0, 388, 325, 326, 327, 389, 390, 0, 486, 328,
	175, 0, 0, 0, 329, 330, 331, 332, 333, 0,
	0, 0, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	398, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 210, 211, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 353, 354, 355, 0,
	214, 0, 215, 0, 0, 0, 0, 216, 356, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 0, 478,
	328, 175, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 178, 179, 0,
	180, 0, 0, 0, 0, 334, 0, 0, 0, 0,
	181, 182, 183, 335, 336, 337, 338, 184, 339, 340,
	0, 185, 341, 342, 186, 187, 0, 0, 343, 344,
	345, 0, 188, 346, 0, 0, 0, 189, 190, 191,
	0, 192, 0, 193, 0, 194, 195, 0, 0, 196,
	197, 198, 0, 0, 0, 0, 0, 0, 0, 199,
	200, 398, 201, 347, 202, 348, 349, 0, 203, 0,
	204, 0, 205, 0, 0, 206, 207, 0, 208, 0,
	0, 0, 350, 209, 210, 211, 351, 352, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 353, 354, 355,
	0, 214, 0, 215, 0, 0, 0, 0, 216, 356,
	0, 357, 0, 0, 217, 218, 0, 0, 219, 220,
	221, 358, 359, 0, 0, 360, 225, 0, 222, 0,
	0, 223, 361, 224, 362, 363, 364, 365, 366, 0,
	367, 0, 0, 226, 227, 228, 0, 229, 230, 231,
	0, 233, 232, 0, 368, 0, 234, 0, 0, 235,
	0, 0, 236, 0, 237, 238, 239, 241, 369, 240,
	0, 242, 243, 245, 244, 0, 0, 0, 370, 246,
	371, 247, 248, 0, 249, 0, 0, 250, 0, 0,
	251, 372, 0, 252, 0, 373, 253, 254, 255, 256,
	257, 0, 258, 374, 259, 375, 260, 0, 261, 262,
	263, 264, 265, 376, 266, 267, 0, 268, 269, 270,
	271, 272, 0, 274, 275, 273, 276, 277, 278, 279,
	0, 280, 0, 281, 282, 377, 283, 0, 287, 288,
	289, 290, 0, 292, 378, 291, 293, 294, 0, 295,
	284, 285, 296, 0, 297, 379, 380, 298, 0, 305,
	299, 300, 286, 301, 304, 381, 302, 303, 382, 0,
	306, 0, 307, 308, 309, 310, 311, 312, 313, 0,
	383, 384, 385, 0, 0, 314, 315, 386, 387, 0,
	316, 317, 318, 319, 0, 0, 320, 321, 322, 323,
	0, 324, 0, 388, 325, 326, 327, 389, 390, 0,
	429, 328, 175, 0, 0, 0, 329, 330, 331, 332,
	333, 0, 0, 0, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 0, 215, 0, 0, 0, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 287,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	175, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 0, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	398, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 210, 211, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 353, 354, 355, 0,
	214, 0, 215, 0, 0, 0, 0, 216, 356, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 295, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 175, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 0, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 1925, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 266, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 175, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 398, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 210,
	211, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 353, 354, 355, 0, 214, 0, 215, 0,
	0, 0, 0, 216, 356, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 1923, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 255, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 264, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 283, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 175, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 0, 0, 0, 0,
	178, 179, 0, 180, 0, 0, 0, 0, 334, 0,
	0, 0, 0, 181, 182, 183, 335, 336, 337, 338,
	184, 339, 340, 0, 185, 341, 342, 186, 187, 0,
	0, 343, 344, 345, 0, 188, 346, 0, 0, 0,
	189, 190, 191, 0, 192, 0, 193, 0, 194, 195,
	0, 0, 196, 197, 198, 0, 0, 0, 0, 0,
	0, 0, 199, 200, 398, 201, 347, 202, 348, 349,
	0, 203, 0, 204, 0, 205, 0, 0, 206, 207,
	0, 208, 0, 0, 0, 350, 209, 210, 211, 351,
	352, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	353, 354, 355, 0, 214, 0, 215, 0, 0, 0,
	0, 216, 356, 0, 357, 0, 0, 217, 218, 0,
	0, 219, 220, 221, 1912, 359, 0, 0, 360, 225,
	0, 222, 0, 0, 223, 361, 224, 362, 363, 364,
	365, 366, 0, 367, 0, 0, 226, 227, 228, 0,
	229, 230, 231, 0, 233, 232, 0, 368, 0, 234,
	0, 0, 235, 0, 0, 236, 0, 237, 238, 239,
	241, 369, 240, 0, 242, 243, 245, 244, 0, 0,
	0, 370, 246, 371, 247, 248, 0, 249, 0, 0,
	250, 0, 0, 251, 372, 0, 252, 0, 373, 253,
	254, 255, 256, 257, 0, 258, 374, 259, 375, 260,
	0, 261, 262, 263, 264, 265, 376, 266, 267, 0,
	268, 269, 270, 271, 272, 0, 274, 275, 273, 276,
	277, 278, 279, 0, 280, 0, 281, 282, 377, 283,
	0, 287, 288, 289, 290, 0, 292, 378, 291, 293,
	294, 0, 295, 284, 285, 296, 0, 297, 379, 380,
	298, 0, 305, 299, 300, 286, 301, 304, 381, 302,
	303, 382, 0, 306, 0, 307, 308, 309, 310, 311,
	312, 313, 0, 383, 384, 385, 0, 0, 314, 315,
	386, 387, 0, 316, 317, 318, 319, 0, 0, 320,
	321, 322, 323, 0, 324, 0, 388, 325, 326, 327,
	389, 390, 175, 0, 328, 0, 0, 0, 0, 329,
	330, 331, 332, 333, 0, 0, 0, 0, 178, 179,
	0, 180, 0, 0, 0, 0, 334, 0, 0, 0,
	0, 181, 182, 183, 335, 336, 337, 338, 184, 339,
	340, 0, 185, 341, 342, 186, 187, 0, 0, 343,
	344, 345, 0, 188, 346, 0, 0, 0, 189, 190,
	191, 0, 192, 0, 193, 0, 194, 195, 0, 0,
	196, 197, 198, 0, 0, 0, 0, 0, 0, 0,
	199, 200, 398, 201, 347, 202, 348, 349, 0, 203,
	0, 204, 0, 205, 0, 0, 206, 207, 0, 208,
	0, 0, 0, 350, 209, 210, 211, 351, 352, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 353, 354,
	355, 0, 214, 0, 215, 0, 0, 0, 0, 216,
	356, 0, 357, 0, 0, 217, 218, 0, 0, 219,
	220, 221, 358, 359, 0, 0, 360, 225, 0, 222,
	0, 0, 223, 361, 224, 362, 363, 364, 365, 366,
	0, 367, 0, 0, 226, 227, 228, 0, 229, 230,
	231, 0, 233, 232, 0, 368, 0, 234, 0, 0,
	235, 0, 0, 236, 0, 237, 238, 239, 241, 369,
	240, 0, 242, 243, 245, 244, 0, 0, 0, 370,
	246, 371, 247, 248, 0, 249, 0, 0, 250, 0,
	0, 251, 372, 0, 252, 0, 373, 253, 254, 255,
	256, 257, 0, 258, 374, 259, 375, 260, 0, 261,
	262, 263, 264, 265, 376, 266, 267, 0, 268, 269,
	270, 271, 272, 0, 274, 275, 273, 276, 277, 278,
	279, 0, 280, 0, 281, 282, 377, 283, 0, 489,
	288, 289, 290, 0, 292, 378, 291, 293, 294, 0,
	295, 284, 285, 296, 0, 297, 379, 380, 298, 0,
	305, 299, 300, 286, 301, 304, 381, 302, 303, 382,
	0, 306, 0, 307, 308, 309, 310, 311, 312, 313,
	0, 383, 384, 385, 0, 0, 314, 315, 386, 387,
	0, 316, 317, 318, 319, 0, 0, 320, 321, 322,
	323, 0, 324, 0, 388, 325, 326, 327, 389, 390,
	175, 0, 328, 0, 0, 0, 0, 329, 330, 331,
	332, 333, 0, 0, 0, 0, 178, 179, 0, 180,
	0, 0, 0, 0, 334, 0, 1252, 0, 0, 181,
	182, 183, 335, 336, 337, 338, 184, 339, 340, 0,
	185, 341, 342, 186, 187, 0, 0, 343, 344, 345,
	0, 188, 346, 0, 0, 0, 189, 190, 191, 0,
	192, 0, 193, 0, 194, 195, 0, 0, 196, 197,
	198, 0, 0, 0, 0, 0, 0, 0, 199, 200,
	398, 201, 347, 202, 348, 349, 0, 203, 0, 204,
	0, 205, 0, 0, 206, 207, 0, 208, 0, 0,
	0, 350, 209, 210, 211, 351, 352, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 353, 354, 355, 0,
	214, 0, 215, 0, 0, 0, 0, 216, 356, 0,
	357, 0, 0, 217, 218, 0, 0, 219, 220, 221,
	358, 359, 0, 0, 360, 225, 0, 222, 0, 0,
	223, 361, 224, 362, 363, 364, 365, 366, 0, 367,
	0, 0, 226, 227, 228, 0, 229, 230, 231, 0,
	233, 232, 0, 368, 0, 234, 0, 0, 235, 0,
	0, 236, 0, 237, 238, 239, 241, 369, 240, 0,
	242, 243, 245, 244, 0, 0, 0, 370, 246, 371,
	247, 248, 0, 249, 0, 0, 250, 0, 0, 251,
	372, 0, 252, 0, 373, 253, 254, 255, 256, 257,
	0, 258, 374, 259, 375, 260, 0, 261, 262, 263,
	264, 265, 376, 266, 267, 0, 268, 269, 270, 271,
	272, 0, 274, 275, 273, 276, 277, 278, 279, 0,
	280, 0, 281, 282, 377, 283, 0, 287, 288, 289,
	290, 0, 292, 378, 291, 293, 294, 0, 0, 284,
	285, 296, 0, 297, 379, 380, 298, 0, 305, 299,
	300, 286, 301, 304, 381, 302, 303, 382, 0, 306,
	0, 307, 308, 309, 310, 311, 312, 313, 0, 383,
	384, 385, 0, 0, 314, 315, 386, 387, 0, 316,
	317, 318, 319, 0, 0, 320, 321, 322, 323, 0,
	324, 0, 388, 325, 326, 327, 389, 390, 175, 0,
	328, 0, 0, 0, 0, 329, 330, 331, 332, 333,
	0, 0, 0, 0, 178, 179, 0, 180, 0, 0,
	0, 0, 334, 0, 0, 0, 0, 181, 182, 183,
	335, 336, 337, 338, 184, 339, 340, 0, 185, 341,
	342, 186, 187, 0, 0, 343, 344, 345, 0, 188,
	346, 0, 0, 0, 189, 190, 191, 0, 192, 0,
	193, 0, 194, 195, 0, 0, 196, 197, 198, 0,
	0, 0, 0, 0, 0, 0, 199, 200, 398, 201,
	347, 202, 348, 349, 0, 203, 0, 204, 0, 205,
	0, 0, 206, 207, 0, 208, 0, 0, 0, 350,
	209, 210, 211, 351, 352, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 353, 354, 355, 0, 214, 0,
	215, 0, 0, 0, 0, 216, 356, 0, 357, 0,
	0, 217, 218, 0, 0, 219, 220, 221, 358, 359,
	0, 0, 360, 225, 0, 222, 0, 0, 223, 361,
	224, 362, 363, 364, 365, 366, 0, 367, 0, 0,
	226, 227, 228, 0, 229, 230, 231, 0, 233, 232,
	0, 368, 0, 234, 0, 0, 235, 0, 0, 236,
	0, 237, 238, 239, 241, 369, 240, 0, 242, 243,
	245, 244, 0, 0, 0, 370, 246, 371, 247, 248,
	0, 249, 0, 0, 250, 0, 0, 251, 372, 0,
	252, 0, 373, 253, 254, 255, 256, 257, 0, 258,
	374, 259, 375, 260, 0, 261, 262, 263, 264, 265,
	376, 728, 267, 0, 268, 269, 270, 271, 272, 0,
	274, 275, 273, 276, 277, 278, 279, 0, 280, 0,
	281, 282, 377, 283, 0, 287, 288, 289, 290, 0,
	292, 378, 291, 293, 294, 0, 295, 284, 285, 296,
	0, 297, 379, 380, 298, 0, 305, 299, 300, 286,
	301, 304, 381, 302, 303, 382, 0, 306, 0, 307,
	308, 309, 310, 311, 312, 313, 0, 383, 384, 385,
	0, 0, 314, 315, 386, 387, 0, 316, 317, 318,
	319, 0, 0, 320, 321, 322, 323, 0, 324, 0,
	388, 325, 326, 327, 389, 390, 175, 0, 328, 0,
	0, 0, 0, 329, 330, 331, 332, 333, 0, 0,
	0, 0, 178, 179, 0, 180, 0, 0, 0, 0,
	334, 0, 0, 0, 0, 181, 182, 183, 335, 336,
	337, 338, 184, 339, 340, 0, 185, 341, 342, 186,
	187, 0, 0, 343, 344, 345, 0, 188, 346, 0,
	0, 0, 189, 190, 191, 0, 192, 0, 193, 0,
	194, 195, 0, 0, 196, 197, 198, 0, 0, 0,
	0, 0, 0, 0, 199, 200, 398, 201, 347, 202,
	348, 349, 0, 203, 0, 204, 0, 205, 0, 0,
	206, 207, 0, 208, 0, 0, 0, 350, 209, 210,
	211, 351, 352, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 353, 354, 355, 0, 214, 0, 215, 0,
	0, 0, 0, 216, 356, 0, 357, 0, 0, 217,
	218, 0, 0, 219, 220, 221, 358, 359, 0, 0,
	360, 225, 0, 222, 0, 0, 223, 361, 224, 362,
	363, 364, 365, 366, 0, 367, 0, 0, 226, 227,
	228, 0, 229, 230, 231, 0, 233, 232, 0, 368,
	0, 234, 0, 0, 235, 0, 0, 236, 0, 237,
	238, 239, 241, 369, 240, 0, 242, 243, 245, 244,
	0, 0, 0, 370, 246, 371, 247, 248, 0, 249,
	0, 0, 250, 0, 0, 251, 372, 0, 252, 0,
	373, 253, 254, 0, 256, 257, 0, 258, 374, 259,
	375, 260, 0, 261, 262, 263, 0, 265, 376, 266,
	267, 0, 268, 269, 270, 271, 272, 0, 274, 275,
	273, 276, 277, 278, 279, 0, 280, 0, 281, 282,
	377, 0, 0, 287, 288, 289, 290, 0, 292, 378,
	291, 293, 294, 0, 295, 284, 285, 296, 0, 297,
	379, 380, 298, 0, 305, 299, 300, 286, 301, 304,
	381, 302, 303, 382, 0, 306, 0, 307, 308, 309,
	310, 311, 312, 313, 0, 383, 384, 385, 0, 0,
	314, 315, 386, 387, 0, 316, 317, 318, 319, 0,
	0, 320, 321, 322, 323, 0, 324, 0, 388, 325,
	326, 327, 389, 390, 0, 0, 328, 0, 0, 0,
	0, 329, 330, 331, 332, 333, 963, 964, 0, 993,
	994, 995, 1003, 1004, 1005, 0, 0, 0, 0, 0,
	0, 0, 996, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 1007, 0, 963, 964, 0, 993, 994, 995,
	1003, 1004, 1005, 0, 0, 0, 0, 0, 0, 0,
	996, 0, 0, 965, 0, 0, 0, 966, 0, 985,
	1007, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	988, 989, 990, 991, 0, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 988, 989,
	990, 991, 1000, 1008, 0, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 0,
	1000, 1008, 0, 0, 0, 0, 998, 0, 0, 0,
	0, 0, 986, 0, 0, 0, 0, 0, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 998, 0, 0, 997, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 0, 0, 0, 0,
	0, 992, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 992,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 987, 963, 964, 0, 993, 994,
	995, 1003, 1004, 1005, 0, 0, 0, 0, 0, 0,
	1001, 996, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 985, 0,
	999, 0, 982, 977, 978, 984, 983, 979, 980, 981,
	1002, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 0, 0, 0, 0, 0, 0, 0, 999, 1812,
	0, 977, 978, 984, 983, 979, 980, 981, 1002, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 988,
	989, 990, 991, 2457, 0, 0, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	963, 964, 0, 993, 994, 995, 1003, 1004, 1005, 0,
	0, 1000, 1008, 0, 0, 0, 996, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 1007, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 998, 0, 965, 0, 0,
	0, 986, 0, 985, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 988, 989, 990, 991, 0, 0,
	992, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 963, 964, 0, 993,
	994, 995, 1003, 1004, 1005, 0, 1000, 1008, 0, 0,
	0, 1001, 996, 0, 0, 0, 0, 0, 0, 966,
	0, 0, 1007, 0, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	998, 0, 0, 965, 0, 0, 986, 0, 0, 985,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 0, 999,
	0, 0, 977, 978, 984, 983, 979, 980, 981, 1002,
	0, 976, 974, 975, 967, 968, 969, 970, 972, 973,
	988, 989, 990, 991, 2410, 992, 0, 0, 0, 971,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 963, 964, 0, 993, 994, 995, 1003, 1004, 1005,
	0, 0, 1000, 1008, 0, 0, 1001, 996, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 1007, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 998, 0, 965, 0,
	0, 0, 986, 0, 985, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 0, 999, 0, 0, 977, 978, 984,
	983, 979, 980, 981, 1002, 0, 976, 974, 975, 967,
	968, 969, 970, 972, 973, 988, 989, 990, 991, 2364,
	0, 992, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 963, 964, 0,
	993, 994, 995, 1003, 1004, 1005, 0, 1000, 1008, 0,
	0, 0, 1001, 996, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 1007, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 0, 0, 965, 0, 0, 986, 0, 0,
	985, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	999, 0, 0, 977, 978, 984, 983, 979, 980, 981,
	1002, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 988, 989, 990, 991, 2334, 992, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 987, 963, 964, 0, 993, 994, 995, 1003, 1004,
	1005, 0, 0, 1000, 1008, 0, 0, 1001, 996, 0,
	0, 0, 0, 0, 0, 966, 0, 0, 1007, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 998, 0, 965,
	0, 0, 0, 986, 0, 985, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 0,
	0, 0, 0, 0, 0, 999, 0, 0, 977, 978,
	984, 983, 979, 980, 981, 1002, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 988, 989, 990, 991,
	2329, 0, 992, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 963, 964,
	0, 993, 994, 995, 1003, 1004, 1005, 0, 1000, 1008,
	0, 0, 0, 1001, 996, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 1007, 0, 0, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 998, 0, 0, 965, 0, 0, 986, 0,
	0, 985, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 999, 0, 0, 977, 978, 984, 983, 979, 980,
	981, 1002, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 988, 989, 990, 991, 2325, 992, 0, 0,
	0, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 987, 963, 964, 0, 993, 994, 995, 1003,
	1004, 1005, 0, 0, 1000, 1008, 0, 0, 1001, 996,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 1007,
	0, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 998, 0,
	965, 0, 0, 0, 986, 0, 985, 0, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 0, 0, 999, 0, 0, 977,
	978, 984, 983, 979, 980, 981, 1002, 0, 976, 974,
	975, 967, 968, 969, 970, 972, 973, 988, 989, 990,
	991, 2266, 0, 992, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 963,
	964, 0, 993, 994, 995, 1003, 1004, 1005, 0, 1000,
	1008, 0, 0, 0, 1001, 996, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 1007, 0, 0, 1006, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 998, 0, 0, 965, 0, 0, 986,
	0, 0, 985, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 999, 0, 0, 977, 978, 984, 983, 979,
	980, 981, 1002, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 988, 989, 990, 991, 2232, 992, 0,
	0, 0, 971, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 963, 964, 0, 993, 994, 995,
	1003, 1004, 1005, 0, 0, 1000, 1008, 0, 0, 1001,
	996, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	1007, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 998,
	0, 965, 0, 0, 0, 986, 0, 985, 0, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	997, 0, 0, 0, 0, 0, 0, 999, 0, 0,
	977, 978, 984, 983, 979, 980, 981, 1002, 0, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 988, 989,
	990, 991, 2231, 0, 992, 0, 0, 971, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 987,
	963, 964, 0, 993, 994, 995, 1003, 1004, 1005, 0,
	1000, 1008, 0, 0, 0, 1001, 996, 0, 0, 0,
	0, 0, 0, 966, 0, 0, 1007, 0, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 998, 0, 0, 965, 0, 0,
	986, 0, 0, 985, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 997, 0, 0, 0, 0,
	0, 0, 0, 999, 0, 0, 977, 978, 984, 983,
	979, 980, 981, 1002, 0, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 988, 989, 990, 991, 2196, 992,
	0, 0, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 987, 963, 964, 0, 993, 994,
	995, 1003, 1004, 1005, 0, 0, 1000, 1008, 0, 0,
	1001, 996, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 1007, 0, 0, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	998, 0, 965, 0, 0, 0, 986, 0, 985, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 999, 0,
	0, 977, 978, 984, 983, 979, 980, 981, 1002, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 988,
	989, 990, 991, 2049, 0, 992, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 963, 964, 0, 993, 994, 995, 1003, 1004, 1005,
	0, 1000, 1008, 0, 0, 0, 1001, 996, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 1007, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 998, 0, 0, 965, 0,
	0, 986, 0, 0, 985, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 999, 0, 0, 977, 978, 984,
	983, 979, 980, 981, 1002, 0, 976, 974, 975, 967,
	968, 969, 970, 972, 973, 988, 989, 990, 991, 2025,
	992, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 987, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1000, 1008, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 0, 0, 0, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 999,
	0, 0, 977, 978, 984, 983, 979, 980, 981, 1002,
	0, 976, 974, 975, 967, 968, 969, 970, 972, 973,
	0, 0, 0, 0, 1490, 0, 992, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 987, 0, 0, 0, 963, 964, 0, 993, 994,
	995, 1003, 1004, 1005, 0, 0, 0, 1001, 0, 0,
	0, 996, 0, 0, 0, 0, 0, 0, 966, 0,
	0, 1007, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 999, 0, 0, 977, 978,
	984, 983, 979, 980, 981, 1002, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 0, 0, 1782, 988,
	989, 990, 991, 0, 0, 0, 0, 0, 971, 2517,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 963,
	964, 0, 993, 994, 995, 1003, 1004, 1005, 0, 0,
	0, 1000, 1008, 0, 0, 996, 0, 0, 0, 0,
	0, 0, 966, 0, 0, 1007, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 998, 965, 0, 0, 0,
	0, 986, 985, 0, 0, 0, 982, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 997, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 988, 989, 990, 991, 0, 0, 0,
	992, 0, 971, 0, 1852, 0, 0, 1851, 0, 0,
	0, 0, 0, 0, 0, 987, 963, 964, 0, 993,
	994, 995, 1003, 1004, 1005, 1000, 1008, 0, 0, 0,
	0, 1001, 996, 0, 0, 0, 0, 1755, 0, 966,
	0, 0, 1007, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 998,
	0, 0, 0, 965, 0, 986, 0, 0, 0, 985,
	0, 0, 0, 982, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	997, 0, 0, 0, 0, 0, 0, 0, 0, 999,
	1756, 0, 977, 978, 984, 983, 979, 980, 981, 1002,
	0, 976, 974, 975, 967, 968, 969, 970, 972, 973,
	988, 989, 990, 991, 992, 0, 0, 0, 0, 971,
	0, 0, 0, 0, 1587, 0, 0, 0, 0, 987,
	963, 964, 0, 993, 994, 995, 1003, 1004, 1005, 0,
	0, 0, 1000, 1008, 0, 1001, 996, 0, 0, 0,
	1586, 0, 0, 966, 0, 0, 1007, 0, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 998, 965, 0, 0,
	0, 0, 986, 985, 0, 0, 0, 982, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 997, 0, 0,
	0, 0, 0, 999, 0, 0, 977, 978, 984, 983,
	979, 980, 981, 1002, 0, 976, 974, 975, 967, 968,
	969, 970, 972, 973, 988, 989, 990, 991, 0, 0,
	0, 992, 0, 971, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 987, 963, 964, 0,
	993, 994, 995, 1003, 1004, 1005, 1000, 1008, 0, 0,
	0, 0, 1001, 996, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 1007, 0, 1006, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	998, 0, 0, 0, 965, 0, 986, 0, 0, 0,
	985, 0, 0, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 997, 0, 0, 0, 0, 0, 0, 0, 0,
	999, 0, 0, 977, 978, 984, 983, 979, 980, 981,
	1002, 0, 976, 974, 975, 967, 968, 969, 970, 972,
	973, 988, 989, 990, 991, 992, 0, 0, 0, 0,
	971, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	987, 963, 964, 0, 993, 994, 995, 1003, 1004, 1005,
	0, 0, 0, 1000, 1008, 0, 1001, 996, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 1007, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 998, 965, 0,
	0, 0, 0, 986, 985, 0, 0, 0, 982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 997, 585,
	0, 0, 0, 0, 999, 0, 0, 977, 978, 984,
	983, 979, 980, 981, 1002, 0, 976, 974, 975, 967,
	968, 969, 970, 972, 973, 988, 989, 990, 991, 0,
	0, 0, 992, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 963, 964,
	0, 993, 994, 995, 1003, 1004, 1005, 1000, 1008, 0,
	0, 0, 0, 1001, 996, 0, 0, 0, 0, 0,
	0, 966, 0, 0, 1007, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 0, 0, 0, 965, 0, 986, 0, 0,
	0, 985, 0, 0, 0, 982, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 0, 0, 0, 0, 0, 0,
	0, 999, 0, 0, 977, 978, 984, 983, 979, 980,
	981, 1002, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 988, 989, 990, 991, 992, 0, 0, 0,
	0, 971, 0, 0, 0, 0, 1858, 0, 0, 0,
	0, 987, 963, 964, 0, 993, 994, 995, 1003, 1004,
	1005, 0, 0, 0, 1000, 1008, 0, 1001, 996, 0,
	0, 0, 1853, 0, 0, 966, 0, 0, 1007, 0,
	0, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2029, 0, 0, 0, 0, 998, 965,
	0, 0, 0, 0, 986, 985, 0, 0, 0, 982,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 997,
	0, 0, 0, 0, 0, 999, 0, 0, 977, 978,
	984, 983, 979, 980, 981, 1002, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 988, 989, 990, 991,
	0, 0, 0, 992, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 987, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 1008,
	0, 0, 0, 0, 1001, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 998, 0, 0, 0, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 997, 0, 0, 0, 0, 0, 0,
	0, 0, 999, 0, 0, 977, 978, 984, 983, 979,
	980, 981, 1002, 0, 976, 974, 975, 967, 968, 969,
	970, 972, 973, 0, 0, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 987, 963, 964, 0, 993, 994, 995, 1003,
	1004, 1005, 0, 0, 0, 0, 0, 0, 1001, 996,
	0, 0, 0, 0, 0, 0, 966, 0, 0, 1007,
	0, 963, 964, 0, 993, 994, 995, 1003, 1004, 1005,
	0, 0, 0, 0, 0, 0, 0, 996, 0, 0,
	965, 1811, 0, 0, 966, 0, 985, 1007, 0, 0,
	982, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 985, 0, 999, 0, 982, 977,
	978, 984, 983, 979, 980, 981, 1002, 0, 976, 974,
	975, 967, 968, 969, 970, 972, 973, 988, 989, 990,
	991, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 988, 989, 990, 991, 1000,
	1008, 0, 0, 0, 971, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 0, 0, 0, 0, 0, 1000, 1008, 0,
	0, 0, 0, 998, 0, 0, 0, 0, 0, 986,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 0, 0, 997, 0, 0, 986, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1818, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 997, 0, 0, 0, 0, 0, 992, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 987, 963, 964, 0, 993, 994, 995,
	1003, 1004, 1005, 0, 0, 0, 992, 0, 0, 1001,
	996, 0, 0, 0, 0, 0, 0, 966, 0, 0,
	1007, 987, 963, 964, 0, 993, 994, 995, 1003, 1004,
	1005, 0, 0, 0, 0, 0, 0, 1001, 996, 0,
	0, 965, 0, 0, 0, 966, 0, 985, 1007, 0,
	0, 982, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 985, 0, 999, 0, 982,
	977, 978, 984, 983, 979, 980, 981, 1002, 0, 976,
	974, 975, 967, 968, 969, 970, 972, 973, 988, 989,
	990, 991, 0, 0, 0, 999, 0, 971, 977, 978,
	984, 983, 979, 980, 981, 1002, 0, 976, 974, 975,
	967, 968, 969, 970, 972, 973, 988, 989, 990, 991,
	1000, 1008, 0, 0, 0, 971, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1006,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 1008,
	0, 0, 0, 0, 998, 0, 0, 0, 0, 0,
	986, 0, 0, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 998, 0, 0, 997, 0, 0, 986, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 964, 0,
	993, 994, 995, 1003, 1004, 1005, 0, 0, 0, 992,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	966, 0, 0, 1007, 987, 963, 964, 0, 993, 994,
	995, 1003, 1004, 1005, 0, 0, 0, 992, 0, 0,
	1001, 0, 0, 0, 965, 0, 0, 0, 966, 0,
	985, 1007, 987, 0, 982, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1001, 0,
	0, 0, 965, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 982, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 988, 989, 990, 991, 0, 0, 0, 999, 0,
	971, 977, 978, 984, 983, 979, 980, 981, 1002, 0,
	976, 974, 975, 967, 968, 969, 970, 972, 973, 988,
	989, 990, 991, 1000, 1008, 0, 999, 0, 971, 977,
	978, 984, 983, 979, 980, 981, 1002, 0, 976, 974,
	975, 967, 968, 969, 970, 972, 973, 0, 0, 0,
	0, 1000, 1008, 0, 0, 0, 0, 998, 0, 0,
	0, 0, 0, 986, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 998, 0, 0, 0, 0,
	0, 986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 992, 0, 0, 0, 1296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	992, 0, 0, 1001, 0, 0, 0, 0, 0, 1304,
	1293, 1323, 1284, 1314, 1313, 987, 0, 1286, 1285, 0,
	0, 0, 0, 1325, 1324, 0, 0, 0, 0, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1319, 0,
	1311, 1310, 0, 0, 0, 0, 0, 0, 0, 0,
	1309, 999, 0, 0, 977, 978, 984, 983, 979, 980,
	981, 1002, 0, 976, 974, 975, 967, 968, 969, 970,
	972, 973, 1308, 1306, 1307, 0, 0, 0, 0, 999,
	0, 0, 977, 978, 984, 983, 979, 980, 981, 1002,
	1296, 976, 974, 975, 967, 968, 969, 970, 972, 973,
	1292, 0, 0, 0, 0, 0, 0, 1297, 1295, 1298,
	1299, 1300, 1301, 1302, 0, 1322, 0, 0, 0, 0,
	0, 0, 0, 1304, 1293, 1323, 1284, 1314, 1313, 0,
	0, 1286, 1285, 0, 0, 0, 0, 1325, 1324, 0,
	0, 0, 0, 1288, 0, 0, 527, 0, 553, 0,
	0, 0, 0, 0, 0, 1312, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 0, 532, 0, 0, 0,
	0, 0, 1319, 0, 1311, 1310, 0, 0, 530, 0,
	0, 0, 0, 0, 1309, 0, 0, 0, 1305, 0,
	0, 0, 1415, 1413, 1414, 1417, 1416, 0, 0, 531,
	0, 0, 0, 0, 533, 0, 1308, 1306, 1307, 539,
	540, 0, 0, 0, 549, 0, 0, 0, 0, 1289,
	0, 0, 0, 0, 0, 0, 0, 0, 554, 534,
	1303, 1290, 0, 0, 1292, 0, 0, 0, 0, 0,
	1327, 1297, 1295, 1298, 1299, 1300, 1301, 1302, 0, 1322,
	0, 552, 0, 1287, 0, 0, 1320, 1321, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 535, 0, 1288, 1291, 0,
	0, 0, 0, 1326, 0, 0, 0, 0, 0, 1312,
	0, 0, 0, 1294, 536, 537, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 543, 0, 0, 538, 545, 0, 0, 0,
	0, 0, 1305, 0, 0, 0, 542, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 555, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1289, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1303, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 1327, 0, 541, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1287, 0, 0,
	1320, 1321, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1291, 529, 546, 556, 0, 1326, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 547,
	0, 0, 0, 551, 0, 0, 0, 557, 0, 0,
	0, 0, 544, 548, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 550,
}
var sqlPact = [...]int{

	255, -1000, -48, -1000, -1000, -1000, 115, -1000, -1000, -1000,
	112, 110, 108, -1000, 106, 105, 104, 102, 101, 99,
	98, 97, 96, 94, 93, -1000, 92, -1000, -1000, -1000,
	-1000, 89, 86, 78, -1000, 76, 919, 21790, 74, 73,
	1246, 35696, 72, -1000, 950, 26780, 983, 1325, -1000, 71,
	916, 35368, 3395, 2262, 1043, 1524, 35037, 21459, 1517, 2133,
	34706, -1000, -1000, 34375, 69, 67, 64, 61, 60, -1000,
	-1000, 34044, 58, 51, 50, 49, 48, 47, 45, 43,
	42, 37, 34, 30, 28, 27, -1000, 24, 22, 21,
	42404, 20, 19, 18, 1041, 17, 15, 12, 11, -1000,
	9, 4, 2, 0, -3, 80, -4, -5, -9, -15,
	-1000, 928, 535, 2019, 8472, 982, 969, 947, 932, 971,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 37664, 35696, -16, -86, -18, -1000, 1885, 599, 19083,
	255, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26449, 26118, 23816, 33713, 33382, 696, -1000, -58,
	22448, 35696, -1000, 81, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14637, 14294, 486, 81, -1000, -1000,
	-1000, 33051, 23474, 32720, 1395, 32389, -1000, -1000, 32058, -1000,
	-1000, 1691, 1534, 1531, 25787, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 31730, 31399, 31068, 30737, 23132, 431, -1000,
	-1000, -1000, 17373, -1000, -1000, -1000, -1000, -19, -1000, -20,
	-22, -1000, -23, -29, -30, -32, -33, -34, -1000, -35,
	-36, -1000, -37, -39, -1000, -40, -42, 903, 872, 825,
	30406, 1118, -1000, -1000, -54, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 35696, -1000, 15321, -1000, 429, -1000, 1538,
	-1000, 15321, -1000, 1115, -1000, -1000, -1000, -1000, -1000, 35696,
	-1000, -1000, -1000, -1000, -1000, -1000, 2052, 1154, 428, 30075,
	-1000, 1397, -1000, 527, 748, -1000, -1000, -1000, 9498, 131,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1448,
	22790, 1229, 1861, 1665, 2051, 1292, 1650, 1647, 1624, 1600,
	1578, 2050, 883, 2049, 1754, 953, 2048, 1573, 1053, 605,
	2046, 1537, 1526, -1000, -1000, -1000, -1000, 858, -1000, -1000,
	-1000, 28092, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 928, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1233, 1866, 1866, 1866, 1881, 240, 217, -1000, 80,
	-1000, 1521, -1000, 1058, -1000, -1000, -1000, -1000, -1000, 41744,
	-1000, -1000, 15321, 15321, 15321, 15321, 15321, 1011, 457, -1000,
	425, 424, 7787, -1000, -1000, 2035, -1000, -1000, -1000, 247,
	-1000, -1000, 15321, 81, -1000, -1000, -1000, -1000, 423, 2041,
	-1000, 602, -1000, -1000, -1000, 542, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1572, 422, 421, 419, -1000,
	418, -1000, -1000, 408, 405, 403, 402, 400, 398, 387,
	386, 383, 381, 380, 377, 376, 373, 372, 974, -1000,
	560, -1000, -1000, 560, 560, -1000, 352, 352, 355, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 352, -1000, -1000,
	-1000, 496, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 371, 1158, -1000, -1000, 1158, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 695, 37008, -61, 35696, -1000,
	370, -61, -1000, -1000, 364, -1000, 10524, 10524, -1000, -1000,
	-1000, -1000, -1000, 9840, 1386, -1000, 1173, -206, 243, 512,
	-1000, 18057, 20787, -1000, -1000, 1155, 1743, 593, -1000, 924,
	1734, 466, -1000, 1419, 1729, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 870, -1000, 1133, 1724, -169,
	24144, 22448, -58, -59, -1000, -1000, -1000, 6075, 41744, -1000,
	41744, -1000, 773, 19765, 81, -1000, -1000, -1000, -1000, 363,
	1212, 545, 1210, -1000, 249, -1000, 29744, 545, 1209, -1000,
	-1000, -1000, 28092, -1000, 35696, -1000, 35696, -1000, 814, -1000,
	37336, 114, 1696, -1000, -1000, 114, 1683, -1000, 109, 1680,
	-1000, -1000, 1152, 1677, -1000, -79, 1662, -1000, -1000, -1000,
	15321, -76, -1000, -1000, -1000, 599, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 29413, 22119, 1189, 524, 41744, 1921, 42346, 24144, 41744,
	22119, -1000, -1000, 35696, -1000, 15321, -1000, 1916, 1350, -62,
	-1000, -1000, -1000, -1000, -1000, 1265, 1284, 677, 973, 9498,
	9498, 1811, -1000, 126, 6417, -1000, -1000, -1000, -1000, 29082,
	-1000, -1000, -1000, 1065, 35696, -1000, -1000, 1563, -1000, 22119,
	35696, -1000, 35696, -1000, 35696, -1000, 35696, -1000, 35696, -1000,
	-1000, -1000, -1000, -1000, 3151, -1000, 1557, -1000, -1000, 35696,
	-1000, 1250, -1000, -1000, -1000, 28754, 28423, -1000, 875, 730,
	-1000, -1000, 121, -1000, -1000, 1233, -1000, 1116, 1349, 13951,
	1327, 15321, 80, -1000, -1000, 80, 80, 9156, -1000, -1000,
	-1000, 35696, -1000, 42212, 42346, 6417, 716, 15321, 15321, 15321,
	15321, 15321, 15321, 15321, 15321, 15321, 15321, 15321, 15321, 15321,
	15321, 15321, 15321, 15321, 15321, 15321, 15321, 15321, 15321, 15321,
	15321, 15321, 15321, 15321, 15321, 15321, 15321, 15321, 15321, 1312,
	15321, 692, 15321, 15321, 15321, 15321, 1344, 1029, 349, 1048,
	-1000, 1984, 1984, 1984, 41995, 41995, 334, 457, -1000, 15321,
	-1000, 39, 15321, 217, 39985, -60, 7445, -1000, -1000, -1000,
	13609, 555, 41744, 81, 6759, -1000, 2033, 848, 1587, 1440,
	362, 497, 490, 489, 437, 15321, 15321, 13267, 12924, 12581,
	16005, 12238, 15321, 8129, 15321, 15321, 15321, 15321, 11895, 11552,
	-1000, 360, -1000, -1000, -1000, -1000, 2032, -1000, -1000, 2031,
	-1000, 702, 701, 2030, -1000, -62, -1000, 37008, -1000, 35696,
	-61, 1914, 35696, -1000, 68, -1000, 40740, -1000, 68, -77,
	-1000, 1355, 1354, 19424, 1360, 1019, 1019, 1019, -1000, 357,
	447, 512, 5372, 11209, -1000, 27108, 1033, 143, 215, 17715,
	1386, -1000, 35696, -72, 1074, -1000, 25456, 1849, 1834, 1827,
	28092, 1895, 39, 1523, 690, 28092, 1878, 24144, 686, 1893,
	39, 1520, 685, 35696, 6417, 493, -1000, 35696, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1497, -87, -1000,
	-1000, 25128, 1911, 1659, -1000, 987, -1000, 1658, 1907, 35696,
	1105, 1204, -1000, -1000, 726, 1655, 549, 172, 1904, 172,
	20105, -1000, 35696, -1000, 35696, -1000, -1000, 35696, -1000, 35696,
	-1000, 35696, 35696, -1000, 35696, 24144, 24144, -93, 41744, 4327,
	24800, 684, -1000, 576, 25128, 353, -94, -1000, 775, -1000,
	-1000, -1000, -1000, 190, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 355, 974,
	352, 352, 352, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	496, -1000, -1000, 560, 560, 560, -1000, -1000, -85, 1494,
	529, -99, 622, -62, -1000, 1158, -1000, 1169, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2040, -1000, 1994, -1000, -1000, 2023, -63, -1000, -63,
	-1000, 6417, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 35696,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 347, -1000,
	-1000, -1000, -1000, -1000, -1000, 35696, 35696, 35696, -1000, 28092,
	-1000, -1000, -1000, -1000, 41744, -1000, 320, -1000, -1000, 41744,
	837, 1378, -1000, 1378, -65, -1000, 40616, 1324, 35696, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	525, 768, 768, 723, 723, 723, 723, 1957, 273, 307,
	1114, 4148, 4148, 4148, 4148, 4148, 4148, 4148, 4148, 401,
	689, 689, 401, 401, 401, 401, 401, 4148, 4148, 4148,
	41995, 41772, 2797, 15321, 15321, 682, 1025, 349, 2797, 15321,
	2797, 2797, 2797, 2797, -1000, 977, -1000, -1000, -1000, -1000,
	1486, 346, 16005, 16005, -1000, -1000, -1000, 7787, 16347, -1000,
	-1000, -1000, -1000, 345, 15321, -1000, 40111, -223, 214, -129,
	-1000, 15321, 444, -104, -1000, 788, -1000, 15321, -1000, -51,
	15321, 15321, 15321, 212, -1000, 211, -1000, 676, -1000, 673,
	670, 666, -1000, 335, 1006, 329, 328, 15321, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41521, 38326, 210, -1000,
	1483, -129, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 209,
	-1000, 204, -1000, 41493, -129, 203, 4670, -1000, 16005, 16005,
	16005, 7787, 327, 202, -1000, 40489, -1000, 41242, 10866, 10866,
	10866, 200, 41118, 15321, -129, 4763, 4696, 4176, -101, -109,
	-1000, -114, -1000, 2021, -116, 197, 521, 518, 196, -1000,
	-1000, 325, -117, 549, 10524, 18741, 6417, -1000, 549, 9840,
	-1000, 19424, 19424, 1353, 1341, 19424, -1000, -1000, -1000, -1000,
	27108, 473, 512, 27108, -1000, 2018, 1339, 195, -1000, -1000,
	-1000, 35696, 322, -1000, 512, 194, 922, 35696, 35696, 35696,
	-1000, -1000, 1202, 36680, 1200, 42346, 35696, -1000, 321, 318,
	1320, 1317, 35696, 35696, 36352, 36024, 35696, 942, 39, -1000,
	316, 35696, 863, 24144, 1413, 35696, 39, -1000, 310, 35696,
	861, -1000, 1409, 1136, -1000, 770, 1475, 35696, 191, -119,
	-66, 42346, -1000, -1000, -1000, -1000, -1000, 35696, 409, 35696,
	39, 35696, 24144, 24144, 39, 35696, 1654, 1761, 479, 35696,
	1349, 15321, 896, -1000, 18399, 566, 35696, 852, 63, -1000,
	-1000, -1000, 488, 35696, -1000, -1000, 114, 114, -1000, 109,
	1152, -1000, -79, -1000, 15321, -1000, -1000, 35696, 24144, -124,
	-1000, 583, 581, 579, -1000, 42346, -1000, 450, 668, -1000,
	2017, 544, 35696, 9498, 9498, -1000, 1362, -1000, -1000, 882,
	-1000, 944, -1000, -1000, -1000, -1000, 9498, -1000, -73, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 837, -1000, 15321, 2015,
	-1000, -1000, -1000, 9156, -1000, -1000, -1000, 35696, -198, 15321,
	2797, 2797, 15321, 16005, 16005, -1000, 2797, -1000, -1000, -1000,
	-1000, -1000, 1471, 308, 15321, 42346, 4728, 4635, -126, -1000,
	15321, -68, -1000, 15321, -1000, 39860, -1000, -1000, 350, 1758,
	-1000, 15321, 40991, 188, 10182, -1000, 40867, -52, -52, -1000,
	2038, 1222, 1196, 920, 829, 2012, -1000, 20446, 551, 1035,
	39734, 42212, 42346, -1000, 15321, -1000, -1000, 1470, 15321, -1000,
	42212, 42346, 16005, 16005, 16005, 16005, 16005, 16005, 16005, 16005,
	16005, 16005, 16005, 16005, 16005, 16005, 16005, 16005, 16005, 16005,
	16005, 1249, 16005, 1976, 1976, 1976, -70, 15321, -1000, 1544,
	1470, 15321, 15321, 42346, 187, 186, 185, -1000, 15321, -129,
	15321, 15321, 15321, -1000, -1000, -1000, 184, -1000, 2011, -1000,
	-1000, -1000, -1000, 353, -1000, 1439, -1000, -125, -1000, 1386,
	-1000, 1439, -1000, -1000, 1353, -1000, 306, 15321, 19424, -1000,
	443, -1000, -131, -1000, 27108, -1000, 442, -220, -1000, 485,
	-1000, 512, 304, 35696, 27108, -1000, -1000, -1000, 663, 662,
	1649, -1000, 1193, -1000, 570, -1000, 984, 15321, 17031, 296,
	292, 992, -1000, 1644, 1152, 1641, 1152, -1000, -72, 999,
	-1000, 15321, -1000, 655, -1000, 1875, -1000, -1000, 15321, -1000,
	647, 544, 1462, 747, -1000, 761, -1000, 1398, -1000, 25128,
	291, 35696, 290, -1000, 289, -1000, 545, -1000, 288, 35696,
	1293, 479, 24472, -1000, 545, 852, -1000, 41744, -1000, 852,
	8814, 1845, -132, -1000, -1000, -1000, 549, 20105, 19424, 9840,
	-133, -1000, -1000, -1000, -1000, 41744, -73, 1814, 1814, -1000,
	2008, -1000, 441, 183, -1000, 27764, -73, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35696, 1060, 39609, -1000, 1833, 6417,
	1987, 2797, 4083, 2669, 15321, 42346, 41967, -134, 15321, 15321,
	-1000, 182, 15321, 438, 41744, -1000, -1000, -1000, 41744, 15321,
	1986, 15321, 178, 177, 176, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 174, -1000, -1000, 37992, 15321, 167, -1000,
	166, 160, 41744, 1544, 41744, -1000, -1000, 578, 578, 808,
	808, 808, 808, 1976, 652, 564, 1720, 487, 487, 487,
	348, 948, 948, 487, 487, 487, 1455, 1232, 287, 4835,
	15321, 159, -1000, -1000, 41744, 41744, 157, -1000, -1000, -1000,
	-129, 3956, 39483, 39358, -1000, 156, 154, 1436, 1874, -1000,
	19424, 1436, -1000, 35696, 41744, -1000, -206, -1000, 2006, -1000,
	-1000, 1339, -1000, 5728, 27108, 35696, -140, -1000, 35696, 35696,
	35696, 1637, -1000, 1447, -1000, 39232, -141, -1000, 269, 1858,
	15321, -1000, -1000, 285, 17031, 35696, -1000, 1316, 1322, 606,
	35696, -1000, 35696, -1000, 35696, 35696, 35696, -142, 35696, 24144,
	-143, 35696, -1000, 24144, 680, -1000, -1000, 1404, -1000, 17031,
	284, 35696, 25128, 1903, -1000, 17031, 1091, 1306, 479, 24472,
	-1000, 726, -1000, -1000, -74, -1000, 314, 39, 852, -1000,
	-75, -1000, 484, 1793, -1000, 1792, 436, -1000, -1000, -78,
	283, -1000, 483, 481, -1000, -1000, -1000, -1000, 1833, 15321,
	15321, 41967, -150, -1000, 2797, 2797, -1000, 39107, -1000, 41744,
	-1000, 40867, -1000, -1000, -1000, -1000, 985, -1000, 38981, -1000,
	-1000, -1000, -1000, 16005, 1454, 282, 42346, 38856, -1000, -1000,
	15321, -1000, -1000, -1000, -1000, 547, 15321, 15321, 1386, 547,
	-153, 512, -1000, -1000, -1000, 2001, -1000, -155, -1000, -1000,
	-1000, -1000, 35696, -1000, 35696, -1000, 6417, 35696, 1453, 1165,
	-1000, -1000, 1314, 281, 16005, 35696, -1000, 1005, 17031, 1833,
	81, 6417, 1833, 38730, 6759, -156, -158, 1161, -1000, 1153,
	15321, -1000, 42346, 1152, 1152, -1000, 645, 644, 642, -1000,
	-1000, 640, -1000, -79, 21128, 996, -161, 17031, -163, 146,
	39, -170, 35696, -1000, 479, 24472, -1000, 1761, 1766, 35696,
	1826, -1000, -1000, 280, 277, 276, -1000, 27436, 27436, 24144,
	24144, -1000, 2797, 2797, -1000, -1000, 145, 1035, 1873, -1000,
	4951, 16005, 42346, -171, -1000, 38605, -1000, 35696, 41744, -129,
	-1000, -1000, 27108, 435, -1000, -1000, 1266, -1000, -1000, 35696,
	1157, -1000, -1000, 15321, 4835, 274, 1398, 272, -1000, -1000,
	-1000, -1000, -1000, -1000, 1858, -51, -1000, 923, -1000, -1000,
	41744, 1854, -1000, -1000, 35696, 35696, 270, 261, -1000, 259,
	81, 35696, 1005, -172, -1000, 1398, -1000, 1005, 256, 24472,
	-1000, 1293, 708, -180, 35696, -1000, -1000, 7101, 24144, 24144,
	-1000, -183, -1000, -1000, -1000, 930, 15321, 4951, -185, -1000,
	-1000, -100, -1000, 1902, -1000, -1000, -1000, -1000, 1617, 38354,
	1241, 35696, -1000, 35696, 1833, 144, 35696, 573, 6417, -1000,
	-1000, 15321, 15321, 15321, 253, 1398, 1005, -1000, 1398, 17031,
	-1000, 1306, 796, -1000, 549, -1000, -186, -188, -1000, 139,
	15663, 15663, -129, -1000, 35696, 252, 1608, -1000, 1077, 1015,
	137, -191, -1000, -1000, 249, -1000, 15321, -1000, -194, -196,
	-52, 35696, -1000, 1398, -1000, -199, -1000, 20105, -1000, 544,
	544, -1000, -1000, -1000, 16689, 1103, 831, 40365, -1000, -1000,
	-1000, 35696, -1000, 1090, 1078, 854, -1000, -1000, -1000, -1000,
	-1000, 1241, 41744, -1000, -1000, 116, -214, -1000, 1005, -178,
	-1000, -1000, 1947, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1773, -1000, 588, 1302, 1302, 1077, 1986, 1146, 1398, -1000,
	14979, -1000, 1956, -1000, -1000, 1251, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2409, 2408, 1607, 2407, 1858, 2406, 2404, 2403, 2402,
	1852, 2394, 2391, 2389, 2385, 2384, 2383, 2381, 2378, 2373,
	2370, 2367, 2365, 1844, 2364, 1841, 2362, 2359, 2357, 2356,
	2353, 1836, 2349, 2348, 2344, 2341, 1830, 2337, 1802, 2335,
	2333, 1799, 2331, 2330, 2328, 1795, 2326, 1790, 2317, 75,
	106, 1783, 2316, 2315, 1780, 1769, 1736, 2314, 1726, 2313,
	2312, 1716, 1699, 2311, 68, 2309, 2307, 2305, 1638, 1630,
	2299, 2298, 2296, 146, 2293, 1616, 2292, 2289, 2286, 2285,
	2283, 2280, 2279, 2278, 2277, 2275, 2273, 2271, 2269, 2268,
	2267, 2265, 2262, 2261, 151, 2259, 2256, 1609, 1577, 2252,
	2251, 29, 27, 13, 45, 17, 145, 1953, 128, 2250,
	2249, 2247, 2244, 2243, 2242, 24, 95, 96, 2240, 200,
	2238, 2237, 43, 32, 21, 16, 55, 90, 2236, 2230,
	1683, 22, 2227, 2224, 125, 2222, 65, 36, 180, 147,
	143, 104, 115, 2221, 2217, 2214, 49, 110, 1, 2213,
	2210, 15, 80, 8, 2206, 41, 35, 2204, 2202, 122,
	2199, 56, 92, 1486, 117, 113, 309, 121, 2198, 60,
	10, 54, 2196, 2195, 150, 31, 2194, 37, 77, 131,
	2193, 50, 152, 119, 76, 123, 126, 2191, 2190, 2189,
	100, 2185, 108, 79, 2184, 2182, 74, 2181, 93, 134,
	2180, 2179, 2178, 86, 2177, 114, 2175, 2169, 149, 141,
	105, 5, 51, 67, 11, 1507, 1488, 127, 87, 53,
	44, 2167, 2904, 1297, 1276, 28, 97, 78, 63, 91,
	62, 83, 138, 33, 2165, 2153, 129, 2142, 2138, 2137,
	2134, 2132, 98, 2131, 2130, 23, 2129, 70, 25, 40,
	81, 39, 118, 120, 103, 144, 94, 2128, 88, 112,
	2126, 135, 2124, 2123, 1818, 107, 2122, 2118, 2113, 1804,
	1753, 1432, 856, 2112, 2111, 1223, 1062, 2106, 2105, 82,
	2102, 109, 101, 89, 139, 246, 19, 2100, 111, 48,
	2099, 59, 20, 0, 561, 291, 2096, 116, 66, 2095,
	2090, 2088, 2086, 30, 3, 9, 4, 7, 6, 73,
	26, 2076, 2075, 124, 84, 71, 2073, 148, 2072, 2071,
	2070, 34, 2068, 14, 2067, 12, 2065, 2064, 18, 2,
	2063, 2062, 136, 2061, 102, 2060, 1912, 2058, 142, 2057,
	2056, 1762, 2055, 47, 99,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 5, 5,
	5, 5, 5, 5, 5, 5, 6, 6, 6, 6,
	6, 6, 8, 8, 10, 10, 9, 9, 7, 7,
	7, 7, 7, 11, 11, 12, 19, 15, 21, 14,
	14, 18, 18, 117, 117, 116, 116, 116, 116, 116,
	116, 116, 116, 116, 116, 116, 116, 116, 116, 116,
	114, 114, 119, 119, 119, 121, 121, 118, 118, 113,
	113, 23, 23, 62, 62, 104, 55, 55, 55, 291,
	291, 292, 292, 100, 100, 101, 101, 101, 101, 102,
	102, 103, 103, 103, 29, 29, 29, 25, 25, 25,
	25, 25, 26, 26, 27, 27, 30, 30, 30, 30,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 38, 38, 39, 39, 39, 39, 39, 39, 40,
	40, 40, 40, 41, 41, 41, 41, 41, 41, 41,
	41, 46, 46, 46, 44, 44, 44, 43, 43, 43,
	42, 42, 42, 45, 45, 45, 165, 165, 164, 164,
	168, 168, 47, 47, 47, 47, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 49, 49, 50, 50,
	50, 50, 50, 50, 50, 260, 260, 259, 48, 48,
	234, 234, 51, 51, 191, 191, 52, 52, 52, 52,
	52, 53, 53, 63, 63, 332, 332, 332, 336, 336,
	337, 337, 338, 338, 338, 338, 338, 338, 338, 334,
	334, 58, 58, 58, 58, 59, 59, 59, 60, 60,
	99, 99, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 69, 69, 69, 71, 68, 68, 68, 70, 70,
	70, 70, 72, 72, 73, 73, 73, 73, 73, 74,
	74, 285, 283, 283, 284, 284, 144, 144, 144, 144,
	144, 145, 145, 145, 290, 290, 290, 290, 290, 290,
	289, 289, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 87, 87,
	87, 94, 94, 94, 94, 94, 94, 94, 76, 76,
	81, 81, 81, 81, 81, 77, 77, 82, 82, 83,
	83, 84, 84, 84, 84, 84, 84, 78, 78, 78,
	78, 86, 86, 86, 86, 85, 85, 91, 91, 91,
	91, 91, 91, 88, 88, 88, 88, 89, 89, 89,
	92, 92, 92, 92, 79, 79, 80, 80, 93, 93,
	90, 90, 90, 333, 333, 335, 335, 56, 56, 34,
	34, 35, 35, 146, 146, 147, 147, 213, 213, 213,
	213, 148, 148, 120, 120, 120, 212, 301, 301, 302,
	302, 302, 302, 302, 302, 303, 303, 303, 303, 303,
	303, 303, 299, 299, 300, 297, 297, 298, 298, 298,
	298, 339, 339, 211, 211, 151, 151, 306, 306, 306,
	306, 304, 304, 304, 304, 304, 307, 305, 308, 308,
	308, 308, 308, 246, 246, 246, 96, 96, 36, 36,
	36, 126, 126, 37, 37, 33, 33, 33, 195, 195,
	155, 155, 251, 251, 251, 137, 137, 115, 115, 115,
	16, 17, 17, 13, 13, 13, 13, 13, 13, 22,
	22, 20, 20, 196, 196, 197, 197, 57, 57, 61,
	61, 66, 66, 95, 95, 95, 95, 95, 95, 24,
	24, 24, 24, 28, 28, 28, 28, 65, 65, 341,
	341, 133, 133, 133, 133, 134, 134, 208, 208, 209,
	209, 342, 342, 210, 210, 210, 128, 127, 129, 129,
	32, 32, 32, 122, 122, 123, 123, 124, 124, 125,
	125, 343, 343, 54, 54, 54, 98, 98, 140, 140,
	205, 205, 205, 207, 207, 206, 206, 206, 181, 181,
	181, 97, 97, 160, 160, 170, 170, 171, 171, 257,
	172, 172, 64, 64, 107, 107, 105, 105, 105, 105,
	105, 105, 106, 106, 106, 108, 108, 108, 108, 108,
	108, 108, 111, 111, 111, 112, 112, 112, 110, 110,
	314, 314, 314, 317, 317, 313, 315, 315, 316, 316,
	340, 340, 182, 182, 182, 150, 149, 149, 153, 153,
	152, 154, 154, 250, 250, 250, 179, 179, 179, 179,
	200, 200, 198, 198, 199, 199, 201, 201, 202, 202,
	202, 203, 203, 204, 204, 178, 178, 230, 230, 109,
	109, 109, 159, 159, 159, 161, 161, 220, 220, 220,
	221, 221, 219, 219, 219, 219, 252, 252, 252, 252,
	252, 252, 252, 252, 330, 330, 330, 331, 331, 249,
	249, 253, 253, 253, 253, 253, 253, 247, 247, 247,
	247, 248, 248, 258, 258, 185, 185, 185, 185, 183,
	183, 184, 184, 254, 254, 254, 254, 180, 180, 255,
	255, 255, 214, 214, 261, 261, 261, 279, 279, 158,
	158, 158, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 262, 262,
	262, 263, 263, 263, 263, 265, 265, 265, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 278, 278, 278, 278,
	278, 266, 266, 273, 273, 274, 274, 275, 276, 267,
	267, 268, 268, 269, 270, 277, 277, 277, 277, 281,
	281, 271, 271, 271, 271, 271, 272, 192, 192, 192,
	192, 192, 192, 192, 192, 192, 192, 192, 192, 192,
	192, 193, 193, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 223, 223, 223, 223, 223,
	223, 223, 223, 223, 223, 224, 224, 224, 224, 226,
	226, 226, 226, 226, 226, 226, 226, 226, 226, 226,
	309, 309, 309, 309, 309, 309, 309, 309, 311, 311,
	312, 312, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 318, 318, 319, 319, 321, 321, 322, 322,
	323, 324, 324, 324, 325, 326, 326, 320, 320, 327,
	327, 327, 328, 328, 329, 329, 329, 329, 329, 236,
	236, 237, 238, 244, 244, 244, 143, 143, 143, 143,
	143, 143, 143, 143, 143, 143, 143, 143, 143, 143,
	143, 143, 135, 135, 135, 135, 135, 167, 167, 166,
	166, 233, 233, 231, 231, 235, 235, 186, 186, 280,
	280, 280, 280, 280, 280, 280, 187, 187, 187, 194,
	188, 188, 189, 189, 189, 189, 189, 227, 228, 190,
	190, 190, 229, 229, 239, 243, 243, 242, 241, 241,
	240, 240, 217, 217, 218, 218, 216, 215, 175, 175,
	174, 174, 173, 173, 344, 344, 245, 245, 176, 176,
	177, 169, 169, 256, 256, 256, 256, 162, 162, 142,
	142, 163, 163, 138, 138, 141, 141, 139, 139, 139,
	139, 156, 156, 157, 157, 136, 136, 225, 225, 225,
	225, 225, 225, 225, 225, 225, 225, 225, 282, 282,
	282, 232, 130, 130, 130, 131, 131, 132, 132, 287,
	287, 287, 288, 288, 288, 288, 286, 286, 286, 286,
	286, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 293, 293,
	293, 293, 293, 293, 293, 293, 293, 293, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 295, 295, 295, 295, 295,
	295, 295, 295, 295, 295, 294, 294, 294, 294, 294,
	294, 294, 294, 294, 294, 294, 294, 294, 294, 294,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 296, 296, 296, 296,
	296,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 1, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 4, 3, 5,
	3, 4, 5, 2, 3, 3, 3, 4, 2, 3,
	4, 3, 3, 3, 4, 4, 4, 4, 2, 3,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 7,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 3, 2, 0, 1, 3, 1, 1, 3,
	5, 5, 1, 1, 3, 3, 1, 2, 3, 2,
	3, 4, 2, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 8, 8, 2, 4, 4, 4, 2, 2,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 0, 1, 1, 0, 1, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	2, 3, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 5, 2, 1,
	1, 1, 1, 4, 1, 2, 2, 1, 1, 1,
	0, 1, 1, 4, 1, 4, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	0, 1, 4, 1, 3, 3, 3, 5, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 4, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 3, 4, 3, 3,
	4, 3, 4, 3, 4, 5, 6, 6, 7, 6,
	7, 6, 7, 3, 4, 4, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 2, 1, 3, 1, 1, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 3, 4, 1,
	1, 1, 5, 1, 3, 3, 1, 3, 3, 1,
	3, 3, 1, 1, 3, 3, 1, 1, 6, 6,
	4, 3, 4, 3, 4, 3, 4, 4, 3, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 3,
	4, 3, 5, 0, 5, 0, 2, 0, 1, 3,
	3, 2, 2, 0, 6, 1, 0, 3, 0, 2,
	2, 0, 1, 4, 2, 2, 2, 2, 2, 4,
	5, 4, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 0, 1,
	3, 1, 3, 3, 3, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 3, 1, 2,
	3, 0, 3, 3, 2, 2, 1, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 371, -4, -23, -25, -29, -30,
	-52, -38, -39, -40, -51, -47, -53, -54, -55, -56,
	-48, -62, -61, -63, -66, -64, -57, -58, -67, -75,
	-95, -96, -97, -98, -5, -10, 23, 34, -26, -27,
	47, 68, -36, -31, 70, 91, -316, 95, -41, -45,
	99, 106, 108, 130, 142, 223, 229, 250, 252, 254,
	261, -105, -107, 248, -59, -60, -68, -69, -70, -71,
	-99, 272, -76, -77, -78, -79, -80, -81, -82, -83,
	-84, -85, -86, -87, -88, -89, -90, -91, -92, -93,
	275, -24, -28, -65, 313, -6, -7, -8, -9, -17,
	-32, -33, -34, -35, -37, -314, -42, -43, -44, -46,
	-108, -106, 368, 249, 322, 35, 284, 61, 102, 256,
	-11, -12, -15, -14, -13, -19, -21, -18, -20, -22,
	-16, 338, 345, -111, -109, -110, -112, 265, 330, 294,
	372, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 2, 294, 333, 323, 84, 150, -332, 2, -163,
	294, 84, -139, -130, 361, 4, -293, -295, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 68, 69, 72, 73, 74, 82,
	83, 85, 87, 91, 93, 95, 98, 99, 101, 106,
	107, 108, 118, 119, 124, 126, 131, 137, 138, 141,
	142, 143, 151, 154, 156, 149, 166, 167, 168, 170,
	171, 172, 175, 174, 179, 182, 185, 187, 188, 189,
	192, 190, 194, 195, 197, 196, 202, 204, 205, 207,
	210, 213, 216, 219, 220, 221, 222, 223, 225, 227,
	229, 231, 232, 233, 234, 235, 237, 238, 240, 241,
	242, 243, 244, 248, 246, 247, 249, 250, 251, 252,
	254, 256, 257, 259, 273, 274, 285, 261, 262, 263,
	264, 268, 266, 269, 270, 272, 275, 277, 280, 283,
	284, 286, 289, 290, 287, 282, 293, 295, 296, 297,
	298, 299, 300, 301, 308, 309, 313, 314, 315, 316,
	319, 320, 321, 322, 324, 327, 328, 329, 334, 339,
	340, 341, 342, 343, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 86, 88, 89,
	105, 109, 110, 120, 121, 122, 132, 134, 144, 145,
	148, 155, 157, 158, 159, 160, 161, 163, 177, 191,
	201, 203, 214, 218, 226, 228, 236, 258, 267, 278,
	279, 288, 291, 303, 304, 305, 310, 311, 326, 330,
	331, 371, 371, 2, 167, 233, -138, -130, 84, 371,
	2, 294, 323, 333, -195, 84, 318, -130, 229, 22,
	2, 93, 154, 321, 320, 22, 225, 266, 296, 298,
	2, 371, 2, 333, 294, 150, 84, 323, -130, 2,
	-50, 2, 368, -49, -5, -31, -41, -51, -47, -10,
	-23, -25, -36, -38, -45, -55, -54, -56, -58, -62,
	-61, -64, -68, -69, -75, -97, -98, 70, 23, 99,
	272, -336, 2, 22, -337, -338, 70, 99, 130, 265,
	154, 93, 320, 294, 2, 167, 2, -130, 2, -332,
	2, 167, 2, -336, 2, -130, 2, -134, 2, 261,
	-130, 371, 371, 371, 371, 371, 182, 55, 258, 269,
	-73, 309, -72, 303, -285, -74, 2, -164, 192, -130,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 2, -94, 269,
	34, 55, 22, 60, 85, 131, 150, 151, 171, 65,
	66, 232, 182, 168, 308, 172, 270, 295, 309, 70,
	324, 299, 107, 4, 84, 192, 271, 303, 371, 371,
	371, -340, 2, 294, 371, 371, 371, 371, 371, 371,
	371, 371, 371, -106, -108, -107, 371, 371, 371, 371,
	-152, -153, 317, 162, 104, 212, -105, -107, 2, -314,
	-94, 269, 2, 55, 22, -283, 2, -245, 208, -222,
	90, -224, 359, 360, 354, 198, 344, -236, -226, -239,
	105, 258, 368, -138, -225, 374, 9, -311, -107, 29,
	-237, -238, 49, -130, 7, 8, 5, 6, -136, -263,
	-232, -272, 312, 111, 200, -309, -310, 4, -293, -287,
	-264, -274, -268, -271, 163, 58, 76, 77, 80, 78,
	81, 271, 323, 50, 28, 109, 110, 218, 226, 291,
	310, 311, 144, 201, 145, 56, 132, 177, 98, 37,
	39, 41, 42, 51, 52, 86, 88, 89, 120, 121,
	122, 155, 157, 158, 159, 160, 161, 203, 236, 278,
	288, 304, 305, 331, -294, -275, -276, -269, -270, 71,
	112, 129, 153, 146, 165, 169, 178, 180, 193, 215,
	217, 255, 276, -277, -341, 2, 309, 309, 2, -341,
	2, -341, 2, -133, 2, 309, 306, -317, 237, -313,
	-130, -317, 371, 371, 373, 371, -149, -150, 2, 22,
	96, -177, 2, 368, -252, 2, 366, -254, -138, -107,
	-253, 368, 209, -3, 2, -254, 144, -138, 2, -254,
	144, -138, 2, -291, 144, -289, 9, -288, 5, 4,
	-293, -295, -294, 58, 2, -130, 2, -141, 144, -138,
	306, 373, -163, -156, -130, -216, -215, 370, -222, 2,
	-222, 2, 128, 368, -174, -175, -215, -216, 2, -164,
	144, -291, 144, 2, -164, 2, 150, -130, 144, 2,
	-130, 22, 128, 2, 164, 2, 164, 2, -255, 2,
	-254, -165, 144, 2, -164, -165, 144, 2, -142, 144,
	2, -141, -130, 144, 2, -292, 144, 2, -291, -191,
	368, -260, 2, -259, -288, 330, 371, 371, 371, 371,
	371, 371, 371, 371, 371, 371, 371, 371, 371, 371,
	371, 269, 208, 373, -164, -222, -234, 368, 128, -222,
	208, -130, 2, 273, 2, 368, -73, 53, 309, -209,
	2, -210, -127, -128, -129, 166, 231, 235, 343, 306,
	349, 128, -283, -168, 370, -94, 2, -291, 2, 273,
	2, 232, 270, 55, 128, 2, 2, -333, 2, 208,
	128, 2, 128, 2, 128, 2, 128, 2, 128, 2,
	2, 232, 270, 2, 125, 2, 308, 2, 2, 128,
	2, 166, 231, 285, 2, 294, 333, 2, 128, 128,
	343, 2, -180, -254, -152, -153, -179, -198, -199, 181,
	113, 206, -182, 22, 96, -182, -182, 44, 369, 369,
	-94, 273, 2, 10, 11, 57, 33, 359, 360, 361,
	362, 123, 363, 364, 357, 358, 356, 347, 348, 351,
	352, 353, 67, 350, 349, 63, 186, 260, 114, 115,
	116, 117, 245, 13, 14, 15, 26, 211, 180, 344,
	146, 276, 354, 16, 17, 18, 165, 36, 147, -135,
	-143, -222, -222, -222, -222, -222, 217, -173, -217, 366,
	-107, 368, 368, -107, -222, -166, 368, 7, -107, -231,
	366, -240, -222, -174, 368, 5, 368, 5, -318, 339,
	125, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	368, 368, 368, 368, 368, 368, 368, 368, 368, 368,
	228, -281, 334, -281, -281, -265, 368, -265, -266, 368,
	-265, 340, 345, 368, -208, -209, -208, 306, -134, 373,
	-317, -157, 368, -177, -169, -256, -222, 361, -169, -176,
	-245, 71, -185, 169, 193, 129, 178, 255, 153, 7,
	-50, -219, 374, 368, 361, -249, 345, -107, -253, 368,
	-252, -138, 368, -117, 246, -116, 21, 23, 99, 328,
	105, 282, 300, 262, 246, 105, 141, 105, 246, 282,
	300, 262, 246, 105, 374, -291, -139, 373, -286, 361,
	4, -293, -295, -294, -296, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 49, 50, 54, 57, 59,
	65, 70, 75, 76, 78, 77, 79, 80, 81, 90,
	92, 94, 96, 97, 100, 102, 104, 111, 113, 125,
	127, 128, 130, 133, 135, 147, 150, 152, 162, 164,
	173, 176, 181, 183, 184, 198, 199, 200, 206, 208,
	209, 211, 212, 224, 230, 239, 253, 265, 271, 281,
	292, 294, 302, 306, 307, 312, 317, 318, 323, 325,
	332, 333, 335, 336, 337, 338, 286, 369, -162, -138,
	-175, 368, -151, 198, -126, -315, 338, 198, -151, 368,
	-131, 144, 2, -130, -315, 198, -255, -140, -138, -140,
	272, -130, 30, -119, 373, 48, 251, 105, -119, 105,
	-119, 373, 105, -119, 105, 373, 105, -166, -222, 369,
	373, -332, -338, 70, 368, 30, -233, -261, -262, -264,
	-273, -267, -271, -272, 40, 46, 45, 301, 191, 267,
	279, 326, 148, 38, 207, 156, 4, 155, 157, 158,
	159, 160, 161, 278, 37, 236, 121, 122, 120, 98,
	89, 88, 203, 42, 41, -275, -276, -269, -270, 86,
	304, 305, 163, 39, 52, 51, 331, 288, -292, -332,
	-285, -166, 30, -209, 2, -342, 373, 179, -145, 185,
	197, 137, 209, 341, -290, 5, 4, -232, -246, 90,
	182, -272, 8, 360, -282, 7, 359, -284, -283, -284,
	74, 370, -286, -164, 22, 274, 2, -285, -335, 125,
	-332, -285, -285, -285, -285, -285, 269, -50, 125, -130,
	179, -285, 2, -285, 2, 294, 150, 294, -119, 373,
	-179, -199, -198, -201, -222, 22, -204, 119, 194, -222,
	-224, -106, -106, -106, -154, -250, -222, 230, 150, -285,
	-279, -261, -278, 241, 242, 240, 244, 243, -261, -286,
	303, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
	-222, -222, -222, 180, 146, 276, 36, 147, -222, 306,
	-222, -222, -222, -222, 190, 198, 200, 312, 111, 319,
	96, 204, -344, 292, 32, -229, -107, 368, -244, 27,
	281, 22, -236, 258, 368, -217, -222, -218, -167, -166,
	369, 373, -167, -235, -231, -243, -242, 335, 369, -166,
	332, 22, 96, 361, 2, 7, -192, 342, 189, 87,
	138, 188, -193, 264, -319, 118, 133, 368, 369, 2,
	369, 2, 369, 2, 369, 2, -222, -222, -186, 2,
	-280, -166, 4, 342, 189, 87, 138, 188, 264, -186,
	2, -187, 2, -222, -166, -188, -223, -224, 359, 360,
	354, 368, 258, -189, 2, -222, -167, -222, 43, 176,
	307, -190, -222, 128, -166, -222, -222, -222, -166, -166,
	2, -166, 2, 368, 7, 7, 303, 303, 7, -134,
	-313, 30, -156, -159, 373, 128, 30, 4, -159, 373,
	369, 169, 169, -252, -185, 169, -183, 215, -183, -183,
	-330, 368, 367, -249, -286, 366, 375, -167, 2, -248,
	-247, 30, -130, 213, 369, -138, 373, 306, -196, 65,
	59, -212, 144, 59, -297, -130, 65, -298, 54, 318,
	230, 127, -196, 65, -196, 65, 65, -254, 33, -64,
	128, 306, -254, 44, -291, 306, 33, -64, 128, 306,
	-141, -286, -258, 346, -130, 128, 369, 373, -146, -156,
	-147, -130, -213, -212, -299, -300, -297, 150, 318, 112,
	30, 105, 222, 105, 30, 208, 198, -122, 297, 105,
	-214, 336, -205, -64, 368, 90, 30, -205, -170, -171,
	-257, -172, -138, 368, -130, -164, -165, -165, -141, -142,
	-130, -291, -292, 369, 373, -50, -259, 306, 325, -147,
	-49, 23, 70, 99, 369, 373, -158, 29, 366, -192,
	368, -258, 128, 349, 306, 369, 309, -210, -144, 235,
	280, 247, 268, 8, 7, 7, 373, -286, -334, -130,
	269, -50, -138, -141, -138, -254, -202, -282, 368, 360,
	-203, 258, 259, 373, -115, 31, 94, 170, -138, 343,
	-222, -222, 306, -344, 292, -229, -222, 190, 200, 312,
	111, 319, 96, 204, 128, 368, -223, -223, -166, -226,
	368, -166, 367, 377, 369, -222, 367, 367, 373, -241,
	-242, 100, -222, -153, 373, -152, -222, -166, -166, 369,
	369, 306, 306, 306, 306, 368, -324, 216, 368, 368,
	-222, 30, 373, 369, 128, 369, 369, -194, 224, 369,
	10, 11, 359, 360, 361, 362, 123, 363, 364, 357,
	358, 356, 347, 348, 349, 63, 186, 260, 13, 14,
	15, 165, 147, -223, -223, -223, -166, 368, 369, -227,
	-228, 128, 125, 30, -190, -190, -190, 369, 128, -166,
	373, 373, 373, 369, 369, 369, 7, 369, 373, 369,
	343, 343, 369, 368, 369, -214, -256, -161, 2, -252,
	-286, -214, -245, -252, -252, -184, 325, 208, 169, -252,
	-247, 369, -331, 7, -249, -248, 7, -221, -220, 126,
	196, 369, -130, 368, -249, 369, -116, -138, -130, -130,
	198, -212, 144, -121, 198, -261, -130, 368, 368, 170,
	170, -130, -130, 144, -130, 144, -130, -130, -117, 246,
	-64, 368, -138, 246, -291, 141, -130, -64, 368, -130,
	246, -100, 143, 204, 286, 128, -138, 369, 369, 373,
	-131, 150, -131, -64, -164, -291, -291, -64, -138, 105,
	-123, 101, -343, 349, -130, -200, -198, -222, -181, -207,
	253, 208, -162, 330, -130, -181, -160, 373, 128, 349,
	-162, -119, -119, -119, -119, -222, -334, -291, 369, -261,
	366, 367, 7, 7, -103, 338, -334, -283, -283, -127,
	316, 62, 235, -283, 373, -203, -222, -250, -138, 374,
	-222, -222, -223, -223, 128, 368, -222, -233, 26, 26,
	369, -167, 373, -218, -222, 369, -231, 102, -222, 302,
	369, 332, -153, -153, -153, 5, 189, 138, 188, -193,
	188, -193, -193, 7, -325, -130, 368, 336, -152, 369,
	-279, -261, -222, -227, -222, -279, -261, -223, -223, -223,
	-223, -223, -223, -223, -223, -223, -223, -223, -223, -223,
	-223, -223, -223, -223, -223, -223, 96, 198, 204, -223,
	373, -167, -228, -227, -222, -222, -261, 369, 369, 369,
	-166, -222, -222, -222, 369, 7, -49, -178, 133, -258,
	373, -178, -184, 368, -222, -252, 367, 369, 373, -248,
	367, 373, 376, 349, -249, 368, -156, -247, 306, 306,
	105, 198, 327, -301, -298, -222, -155, -251, -130, -312,
	368, -309, -310, -136, 368, 368, -114, 99, 272, -197,
	105, -119, 105, -119, 306, -196, 65, -166, 306, 44,
	-166, 306, -103, 128, 293, 286, -148, 149, -213, 368,
	-131, 368, 368, -151, -126, 368, -130, -124, 175, -343,
	-289, -315, -181, -181, -169, 199, 64, 369, -214, -171,
	-161, -245, 369, -104, 72, -104, 7, 367, 369, -102,
	210, -101, -130, 5, -130, 209, 369, -115, -286, 26,
	26, -222, -233, 369, -222, -222, 369, -222, 367, -222,
	5, -222, 369, 369, 369, 369, -326, -130, -222, 369,
	369, 369, -228, 128, 96, 204, 368, -222, 369, 369,
	373, 369, 369, 369, 369, -230, 135, 44, -252, -230,
	-156, -219, 7, -220, -286, 366, -248, -156, 369, -130,
	-130, -212, 105, -302, 65, -303, 57, 112, 70, 198,
	200, 318, 230, 54, 90, 239, 369, 369, 373, -137,
	-174, 57, -137, -222, 368, -155, -156, 198, 90, 198,
	90, 83, 314, -130, -130, -138, -130, -130, 369, -138,
	-291, 369, -130, -292, 303, 147, -155, 368, -156, -146,
	30, -155, 208, -125, 174, -343, -289, -122, -206, 368,
	208, -64, -181, 349, 83, 83, 367, 373, 368, 349,
	349, -115, -222, -222, 369, 369, -153, -320, 221, 369,
	-223, 128, 368, -233, 369, -222, -321, 337, -222, -166,
	-321, 369, -249, 7, 369, -212, -130, -286, -130, 112,
	144, 200, 170, 368, -223, -138, -211, -339, 69, 290,
	-251, -115, -286, -115, 369, -166, 369, 369, 200, 200,
	-222, -261, -119, -119, 306, 306, 306, 306, -225, -136,
	-130, 219, 369, -155, 369, 369, -64, 369, -138, -343,
	-289, -123, 97, -156, 65, -177, -107, 368, 368, 368,
	-101, -102, -291, -291, 369, -153, 44, -223, -233, 369,
	369, -322, -323, -130, -248, 367, -303, -131, 198, -222,
	-132, 368, -148, 368, -137, -153, 239, -118, 57, -130,
	-130, 368, 368, 368, -138, -211, 369, -148, -211, 368,
	-289, -124, 320, 199, 369, -130, -292, -292, 369, -327,
	234, 259, -166, 369, 373, 30, 105, 369, -306, 187,
	-130, -156, -115, 369, -138, -113, 325, -286, -166, -166,
	-166, 368, -148, -211, -148, -155, -125, 272, -214, 369,
	369, 369, -328, -329, 36, 315, 74, -222, -328, -323,
	-325, 112, -304, -307, -305, 208, 129, 220, 277, 369,
	369, -151, -222, 369, 369, -153, -156, -148, 369, -170,
	-103, -103, -329, 227, 124, 258, 227, 124, -130, -305,
	208, -307, 208, 320, 93, -306, 369, 369, -211, -214,
	26, -308, 195, 251, 48, 272, -308, -304, -120, 48,
	251, -148, -329, 20, 200, 90,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 55, 0, 0, 147, 149,
	0, 0, 156, 158, -2, 0, 0, 0, 179, 180,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 652, -2, 0, 291, 293, 302, 304, 306, 308,
	309, 0, 352, 354, 356, 358, 360, 362, 364, 366,
	368, 370, 372, 374, 376, 378, 380, 381, 383, 385,
	0, 573, 575, 577, -2, 58, 60, 62, 64, 74,
	160, 162, 164, 166, 169, 688, 183, 185, 187, 189,
	-2, 699, 0, 0, 0, -2, 0, -2, -2, -2,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	76, 0, 0, 665, 667, 669, 671, -2, 0, 0,
	-2, 7, 12, 14, 16, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 42, 48, 50, 52,
	56, 57, 0, 0, 0, 0, 0, 0, 122, 275,
	0, 1264, 1191, 1197, 1198, 1222, 1223, 1224, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252,
	1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262,
	1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 148, 150, 151, 0, 0, 0, 1193, 1264, 157,
	159, 0, 0, 0, 0, 0, 538, 266, 1324, 268,
	270, 0, 0, 0, 0, 173, 174, 175, 176, 177,
	178, 181, 182, 0, 0, 0, 0, 0, 265, 263,
	212, 213, 0, 248, 249, 250, 251, 252, 254, 216,
	218, 220, 221, 223, 225, 227, 229, 231, 233, 234,
	236, 238, 239, 241, 243, 244, 246, 539, 0, 0,
	0, 0, 272, 278, 279, 280, 282, 283, 284, 285,
	286, 287, 288, 0, 128, 0, 458, 261, 259, 0,
	124, 0, 570, 0, 274, 571, 572, 567, 568, 1351,
	596, 292, 294, 303, 305, 307, -2, -2, 1441, -2,
	316, -2, 324, 1447, 0, 327, 328, 331, -2, 208,
	353, 355, 357, 359, 361, 363, 365, 367, 369, 371,
	373, 375, 377, 379, 382, 384, 386, 387, 388, 0,
	0, 0, 392, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 391, 393, 394, 395, 0, 574, 576,
	578, 0, 527, 690, 59, 61, 63, 65, 161, 163,
	165, 167, 170, -2, 663, 664, 184, 186, 188, 190,
	-2, 0, 694, 694, 694, 0, 0, 664, 662, 0,
	295, 0, 297, 0, 392, 300, 301, 332, 333, 1176,
	1177, 893, 0, 0, 0, 0, 0, 0, 995, 997,
	1414, 1441, 0, 999, 1000, 0, 1002, 1004, 1005, 0,
	1008, 1009, 1161, 1193, 1207, 1208, 1209, 1210, 0, 0,
	1213, 0, 1215, 1216, 1217, 1063, 1019, -2, -2, 1205,
	821, 822, 823, 824, -2, 1455, 1023, 1026, 1029, 1032,
	1033, 1036, 1037, 0, 1398, 1415, 1416, 1437, 1438, 1446,
	1450, 1451, 1422, 1434, 1423, 1410, 1420, 1432, 1270, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1231, 855, 856, 861, 862, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 864, 598, 580, 589, 598, 582, 583,
	584, 585, 586, 587, 588, 591, 0, 680, 1330, 683,
	1204, 681, 666, 668, 0, 670, 0, 0, 674, 696,
	695, 729, 730, 0, 678, 679, 689, 745, 783, 760,
	751, 0, 0, 2, 71, 0, 1422, 783, 73, 0,
	1422, 783, 75, 0, 1422, 129, 130, 350, 351, 1232,
	1233, 1234, 1235, 1455, 77, 0, 82, 0, 1422, 1196,
	0, 0, 276, 277, 1201, 1199, 1200, 0, 152, 153,
	154, 155, 0, 0, 1194, 1170, 1168, 1169, 168, 506,
	1422, -2, 1422, 530, 506, 534, -2, 687, 1422, 612,
	267, 269, 0, 172, 0, 625, 0, 627, 0, 642,
	789, 114, 1422, 193, 206, 114, 1422, 196, 114, 1422,
	199, 1189, 114, 1422, 202, 203, 1422, 205, 131, 262,
	0, 0, -2, 255, 257, -2, 253, 217, 219, 222,
	224, 226, 228, 230, 232, 235, 237, 240, 242, 245,
	247, -2, 0, 0, 0, 457, 0, 0, 0, 569,
	0, 595, 310, 0, 313, 0, 315, 1409, -2, -2,
	319, 599, 603, 604, 605, 0, 0, 0, 0, 0,
	0, 0, 329, 209, 0, 389, 390, 398, 399, 0,
	402, 423, 435, 0, 0, 406, 408, 456, 410, 0,
	0, 412, 0, 414, 0, 416, 0, 418, 0, 420,
	422, 424, 436, 426, 689, 428, 0, 430, 434, 0,
	439, 0, 441, 442, 443, 0, 0, 449, 0, 0,
	396, 397, 114, 787, -2, 0, 658, 708, 709, 0,
	0, 0, 0, 692, 693, 0, 0, 0, 654, 655,
	296, 0, 299, 0, 0, 0, 0, 1096, 1097, 1098,
	1099, 1100, 1101, 1104, 1105, 1102, 1103, 1106, 1107, 0,
	0, 0, 0, 0, 1108, 0, 0, 0, 0, 0,
	0, 0, 0, 1109, 1110, 1111, 0, 0, 1113, 0,
	1115, 0, 0, 0, 0, 0, 0, 1175, 0, 0,
	1112, 898, 899, 900, 932, 933, 0, 996, 1172, 1165,
	998, 0, 1118, -2, 1119, 0, 0, 1001, 1006, 1007,
	1118, 0, 1160, -2, 0, 1212, 0, 890, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1141, -2, 0, 0, 0, 0, 0, 0, 0, 0,
	840, 858, 869, 866, 865, 842, 0, 841, 839, 0,
	843, 0, 0, 0, 579, -2, 581, 0, 593, 0,
	682, 0, 0, 731, 734, 1181, 1185, 1186, 734, 0,
	1178, 0, 0, 0, 0, 780, 780, 780, 778, 754,
	0, 760, 0, -2, 784, 772, 0, -2, 751, 0,
	0, 785, 0, 83, 564, 93, 0, 564, 564, 0,
	0, 0, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 774, 1192, 0, 1166, 1167,
	1236, 1237, 1238, 1239, 1240, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 144, 0, 0, 1187,
	1171, 464, 0, 0, 528, 0, 686, 0, 0, 0,
	0, 1422, 537, 1225, 614, 0, 793, 0, 628, 0,
	0, 790, 0, 191, 0, 112, 113, 0, 194, 0,
	197, 0, 0, 200, 0, 0, 0, 0, 1119, 689,
	0, 0, 281, 0, 0, 689, 0, 1121, 801, 802,
	803, 804, 805, 890, 808, 809, 810, 811, 812, 813,
	814, 815, 816, 817, 818, 819, 820, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 852, 0,
	827, 827, 827, 844, 845, 853, 854, 859, 860, 871,
	872, 874, 876, 870, 870, 870, 867, 868, 774, 0,
	0, 0, 0, -2, 321, 0, 601, 0, 606, 341,
	342, 343, 608, 609, 325, 344, 345, 346, 347, 348,
	349, 0, 523, 0, 525, 1218, 0, 322, 334, 323,
	326, 0, 210, 400, 401, 403, 404, 405, 409, 0,
	453, 411, 413, 415, 417, 419, 427, 431, 689, 437,
	440, 444, 445, 446, 447, 0, 0, 0, 526, 0,
	661, 706, 707, 712, 716, 717, 720, 723, 724, 714,
	893, 675, 676, 677, 700, 701, 549, 0, 0, 298,
	894, 797, 798, 846, 847, 848, 849, 850, 895, 896,
	0, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, -2, -2, -2, -2, -2, -2, -2, -2, 919,
	920, 921, 922, 923, 924, 925, 926, -2, -2, -2,
	930, 931, -2, 1114, 1116, 0, 1175, 0, -2, 0,
	-2, -2, -2, -2, 944, 0, 946, 949, 951, 953,
	0, 0, 0, 0, 1174, 963, 1152, 0, 0, 1093,
	1094, 1095, 948, 0, 0, 1173, 1164, 0, 0, 1117,
	1003, 0, 0, 0, 1125, 1159, 1155, 0, 1010, 699,
	0, 0, 0, 0, 1017, 0, 1221, 877, 878, 879,
	880, 881, 882, 891, 1073, 0, 0, 0, 1024, 1025,
	1027, 1028, 1030, 1031, 1034, 1035, 0, 0, 0, 1041,
	0, 1128, -2, -2, -2, -2, -2, -2, -2, 0,
	1043, 0, 1045, 1119, 1138, 0, 0, 966, 0, 0,
	0, 0, 1441, 0, 1048, 1119, 1146, 0, 0, 0,
	0, 0, 1119, 0, 1151, 0, 0, 0, 0, 0,
	1059, 0, 1061, 0, 0, 0, 0, 0, 0, 592,
	684, 0, 0, 793, 0, 0, 0, 1184, 793, 0,
	1180, 0, 0, 0, 0, 0, 775, 779, 776, 777,
	0, 0, 760, 772, 742, 0, 0, 0, 749, 750,
	771, 0, 770, 759, -2, 0, 0, 0, 0, 0,
	563, 95, 1422, 0, 116, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 1195, 134, 0, 1202, 0, 0, 0, 0, 0,
	463, 1201, 465, 467, 468, 469, 470, 1226, 0, 1226,
	0, 0, 0, 0, 0, 0, 0, 616, 622, 0,
	711, 0, 640, 630, 0, 0, 0, 640, 644, 645,
	647, 648, 0, 0, 791, 207, 114, 114, 1190, 114,
	114, 132, 204, 264, 0, 214, 256, 0, 0, 0,
	258, 0, 0, 0, 260, 0, 794, 796, 0, 806,
	0, 143, 0, 0, 0, 314, 0, 600, 607, 0,
	338, 0, 340, 524, 1220, 1219, 0, 211, 455, 289,
	429, 432, 450, 451, 452, 788, 0, 718, 0, 0,
	715, 721, 722, 0, 703, 547, 548, 0, 0, 0,
	-2, -2, 0, 0, 0, 964, -2, 945, 947, 950,
	952, 954, 0, 0, 0, 0, 0, 0, 0, 965,
	1118, 0, 1162, 1165, -2, 1120, 1123, 1124, 0, 0,
	1156, 0, 0, 0, 0, 698, 699, 699, 699, 1016,
	0, 0, 0, 0, 0, 0, 1018, 0, 0, 0,
	0, 0, 0, 1040, 0, 1042, 1044, 0, 0, 1046,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 969, 970, 971, 0, 1118, 1047, 1144,
	1145, 0, 0, 0, 0, 0, 0, 1053, 0, 1150,
	0, 0, 0, 1057, 1058, 1060, 0, 825, 0, 851,
	873, 875, 863, 689, 1203, 726, 1182, 774, 733, 735,
	1183, 726, 1179, 762, 0, 764, 0, 0, 0, 766,
	0, 755, 0, 757, 772, 747, 0, 0, 740, 0,
	739, 760, 768, 0, 0, 786, 94, 553, 0, 0,
	0, 97, 1422, 105, 0, 478, 0, 0, 0, 0,
	0, 566, 106, 1422, 114, 1422, 114, 107, 84, 564,
	85, 0, 559, 0, 551, 0, 550, 86, 0, 561,
	0, 143, 0, 0, 145, 0, 1188, 472, 505, 0,
	0, 1226, 0, 461, 506, 531, -2, 533, 0, 0,
	618, 622, 0, 621, 687, 640, 710, 792, 623, 640,
	0, 0, 0, 632, 629, 626, 793, 0, 0, 0,
	0, 192, 195, 198, 201, 1120, 271, 0, 0, 1122,
	0, 799, 0, 0, 123, 0, 273, 311, 312, 317,
	336, 337, 339, 335, 0, 0, 0, 702, 549, 0,
	897, -2, 0, 0, 0, 0, -2, 0, 0, 0,
	1153, 0, 0, 0, 1164, -2, 1126, 1154, 1158, 0,
	1011, 0, 0, 0, 0, 1214, 883, 884, 885, 886,
	887, 888, 889, 0, 1071, 1072, 1076, 0, 0, 1022,
	0, 0, 1127, 1137, 1139, 967, 968, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, -2, -2, -2,
	985, 986, 987, -2, -2, -2, 0, 0, 0, 1140,
	0, 0, 1142, 1143, 1147, 1148, 0, 1050, 1051, 1052,
	1149, 0, 0, 0, 857, 0, 0, 728, 0, 732,
	0, 728, 763, 0, 782, 765, 745, 756, 0, 753,
	743, 0, 744, 0, 772, 0, 0, 752, 0, 0,
	0, 0, 115, 476, 495, 0, 0, 540, 546, 546,
	0, 1020, 1021, 0, 0, 0, 99, 0, 0, 0,
	0, 103, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 121, 0, 0, 146, 459, 0, 466, 0,
	0, 0, 464, 0, 529, 0, 0, 620, 622, 0,
	613, 614, 171, 624, 638, 639, 637, 0, 640, 646,
	643, 649, 0, 0, 125, 0, 0, 800, 807, 141,
	1314, 139, 136, 138, 290, 713, 719, 704, 549, 0,
	0, -2, 0, 957, -2, -2, 1089, 1120, 1163, 1157,
	1211, 699, 1012, 1014, 1015, 892, 1078, 1075, 0, 1062,
	1038, 1039, 1136, 0, 0, 0, 0, 1120, 1091, 1049,
	0, 1055, 1056, 826, 685, 1067, 0, 0, 736, 1067,
	0, 760, 758, 741, 737, 0, 748, 0, 769, 555,
	557, 96, 0, 477, 0, 480, 0, 0, 0, 0,
	486, 487, 0, 0, 0, 0, 497, 504, 0, 549,
	1206, 0, 549, 0, 0, 0, 0, 0, 111, 0,
	0, 565, 0, 114, 114, 554, 0, 0, 0, 560,
	552, 0, 562, 133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 622, 0, 615, 616, 0, 0,
	0, 631, 641, 0, 0, 0, 795, 0, 0, 0,
	0, 705, -2, -2, 958, 1090, 0, 699, 0, 1064,
	-2, 0, 0, 0, 1092, 0, 672, 0, 727, 725,
	673, 781, 772, 0, 767, 98, 0, 481, 482, 1226,
	0, 485, 488, 0, 490, 1228, 472, 0, 501, 502,
	541, 542, 545, 543, 546, 699, 499, 0, 100, 101,
	110, 118, 102, 108, 0, 0, 0, 0, 773, 0,
	0, 0, 504, 0, 494, 472, 462, 504, 0, 0,
	617, 618, 0, 0, 0, 650, 651, 0, 0, 0,
	140, 0, 135, 137, 1013, 1081, 0, -2, 0, 993,
	1054, 1066, 1068, 0, 746, 738, 479, 483, 0, 0,
	510, 0, 498, 0, 549, 0, 0, 120, 0, 556,
	558, 0, 0, 0, 0, 472, 504, 460, 472, 0,
	619, 620, 0, 634, 793, 636, 0, 0, 142, 0,
	0, 0, 1077, 994, 0, 0, 0, 489, 515, 0,
	0, 0, 544, 1011, 506, 104, 0, 117, 0, 0,
	699, 0, 492, 472, 535, 0, 611, 0, 635, 143,
	143, 1074, 1079, 1082, -2, 1382, 1261, 0, 1080, 1069,
	1070, 0, 491, 511, 512, 0, 507, 508, 509, 1227,
	503, 510, 119, 90, 92, 0, 0, 493, 504, 793,
	126, 127, 0, 1084, 1085, 1086, 1087, 1088, 484, 513,
	0, 514, 0, 0, 0, 515, 0, 475, 472, 633,
	0, 516, 0, 519, 520, 0, 517, 500, 471, 473,
	474, 536, 1083, 518, 521, 522,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 357, 3, 363, 358, 3,
	368, 369, 361, 359, 373, 360, 370, 362, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 377, 372,
	347, 349, 348, 351, 374, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 366, 3, 367, 364, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 375, 356, 376, 354,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 350,
	57690, 352, 57691, 353, 57692, 355, 57693, 365, 57694, 371,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:866
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:878
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:902
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:903
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:905
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:907
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:918
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:921
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "ALTER")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 63:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:992
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1003
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1023
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1043
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1049
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1055
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1081
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1097
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1107
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1121
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1144
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1154
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1187
		{
			sqlVAL.union.val = nil
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = DropCascade
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = DropRestrict
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = DropDefault
		}
	case 115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1216
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1217
		{
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1220
		{
			return unimplemented(sqllex, "alter using")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1221
		{
		}
	case 121:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1248
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1274
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.str = "CSV"
		}
	case 126:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1340
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1381
		{
		}
	case 144:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1402
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1403
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1435
		{
			return helpWith(sqllex, "CREATE")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1439
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1440
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1441
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1443
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			return helpWith(sqllex, "DELETE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1470
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1473
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1474
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1476
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1477
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "DROP")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1529
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1567
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1582
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1590
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1633
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1642
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1645
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1649
		{
			return helpWith(sqllex, "DELETE")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1651
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1652
		{
			return helpWith(sqllex, "INSERT")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1655
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1656
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1661
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1662
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1665
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1672
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1673
		{ /* SKIP DOC */
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1677
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return helpWith(sqllex, "GRANT")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1841
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1878
		{
			return helpWith(sqllex, "RESET")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "RESET")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1905
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1910
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1913
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1918
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1920
		{ /* SKIP DOC */
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1921
		{ /* SKIP DOC */
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1922
		{
			return unimplemented(sqllex, "set local")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1938
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 317:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1988
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1990
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1993
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1997
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2001
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2013
		{
			return unimplemented(sqllex, "set from current")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2015
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2021
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2025
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = Low
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = Normal
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = High
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2105
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2109
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2124
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2128
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2129
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2132
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2133
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2134
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2135
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2139
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2140
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2151
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.str = "client_encoding"
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2174
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2199
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2210
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2221
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2229
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2243
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2253
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2264
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2309
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2312
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2319
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2341
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2366
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2370
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2374
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2377
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2388
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2399
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2414
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2422
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2428
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2433
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2439
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2456
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2534
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2548
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2555
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2559
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2563
		{
			sqlVAL.union.val = DropDefault
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2569
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2580
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2584
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2590
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2602
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2606
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2648
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2661
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2695
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2700
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2755
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2765
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2769
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2774
		{
			return unimplemented(sqllex, "match full")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			return unimplemented(sqllex, "match partial")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2776
		{
			return unimplemented(sqllex, "match simple")
		}
	case 510:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2777
		{
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2783
		{
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2784
		{
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2785
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
		}
	case 515:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2787
		{
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2790
		{
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2796
		{
			return unimplemented(sqllex, "no action")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2799
		{
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2800
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
			return unimplemented(sqllex, "action set null")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2802
		{
			return unimplemented(sqllex, "action set default")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2842
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = nil
		}
	case 533:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2907
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = true
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = false
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2921
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2937
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2938
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2941
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2942
		{
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = Ascending
		}
	case 548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = Descending
		}
	case 549:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 550:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2982
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2986
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2994
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2996
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = true
		}
	case 564:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = false
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3029
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3030
		{
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3041
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3063
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 580:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3087
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3089
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3092
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3118
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3129
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.str = ""
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.str = ""
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3161
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3175
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3190
		{
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3220
		{
			sqlVAL.union.val = ReadOnly
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			sqlVAL.union.val = ReadWrite
		}
	case 610:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3254
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.str = ""
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 616:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.str = ""
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3278
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.str = ""
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 620:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.str = ""
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3298
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3322
		{
			return helpWith(sqllex, "INSERT")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3339
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3357
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3361
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3375
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3381
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3393
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 641:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3416
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3421
		{
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3439
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3451
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3455
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3539
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3585
		{
			return helpWith(sqllex, "SELECT")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3586
		{
			return helpWith(sqllex, "VALUES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "TABLE")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3633
		{
			return helpWith(sqllex, "SELECT")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3655
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3677
		{
			return helpWith(sqllex, "TABLE")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3688
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3689
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3690
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3693
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3697
		{
			return unimplemented(sqllex, "cte")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3700
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3701
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3704
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
		}
	case 691:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3709
		{
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = true
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = false
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = false
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = true
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3732
		{
		}
	case 697:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3733
		{
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3780
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3804
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3819
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3856
		{
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3857
		{
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3860
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3861
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3887
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3919
		{
			return helpWith(sqllex, "VALUES")
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3921
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3936
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &From{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3948
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3958
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3976
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4003
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4040
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4062
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = nil
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4106
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4112
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = false
		}
	case 761:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4148
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4160
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4189
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.str = astFullJoin
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.str = astLeftJoin
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.str = astRightJoin
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.str = astInnerJoin
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4224
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4267
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4288
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4310
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4324
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4332
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4356
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4359
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4367
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4417
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4448
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4457
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = nil
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4498
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4522
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4596
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4600
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4618
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4650
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4690
		{
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 873:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 875:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = year
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = month
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = day
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = hour
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = minute
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = month
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = hour
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = minute
		}
	case 886:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = minute
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4768
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = nil
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4782
		{
			sqlVAL.union.val = second
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4785
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4820
		{
			return unimplemented(sqllex, "at tz")
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5021
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5028
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5094
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5206
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5214
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5218
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5222
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5230
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5267
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5320
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5321
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5334
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5345
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5361
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5362
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5366
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5375
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5384
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5394
		{
			return unimplemented(sqllex, "current role")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5403
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5429
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5431
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5434
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5443
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5444
		{
			return unimplemented(sqllex, "treat")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5481
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5490
		{
			return unimplemented(sqllex, "within group")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5491
		{
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5495
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5499
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5526
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5549
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.str = ""
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5588
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5589
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5590
		{
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5593
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5594
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5600
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5601
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5602
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5603
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5604
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5631
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = Any
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = Some
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = All
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5650
		{
			sqlVAL.union.val = Plus
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = Minus
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = Mult
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5653
		{
			sqlVAL.union.val = Div
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = Mod
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = Bitand
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = Bitor
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = Pow
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = Bitxor
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5660
		{
			sqlVAL.union.val = LT
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = GT
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = EQ
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = LE
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = GE
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5665
		{
			sqlVAL.union.val = NE
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = Like
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = NotLike
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = ILike
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5672
		{
			sqlVAL.union.val = NotILike
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5700
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5704
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5710
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5781
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5826
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5846
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5901
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5905
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5934
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5944
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5960
		{
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5979
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5988
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6021
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6029
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6043
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6078
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6091
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6095
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6099
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6103
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6109
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6113
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6122
		{
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6136
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6143
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6147
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6151
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6155
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6158
		{
			return unimplemented(sqllex, "func const")
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6167
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6169
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6173
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6177
		{
			sqlVAL.union.val = DNull
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6188
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6194
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.str = ""
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6235
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
