// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:47

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartition() ListPartition {
	return u.val.(ListPartition)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartition() RangePartition {
	return u.val.(RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:501
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ACTION = lex.ACTION
const ADD = lex.ADD
const ALL = lex.ALL
const ALL_EXISTENCE = lex.ALL_EXISTENCE
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HELP = lex.HELP
const HIGH = lex.HIGH
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const IS = lex.IS
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const ON = lex.ON
const ONLY = lex.ONLY
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SOME_EXISTENCE = lex.SOME_EXISTENCE
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6943

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 728,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	152, 577,
	-2, 0,
	-1, 54,
	97, 728,
	156, 728,
	331, 728,
	332, 728,
	-2, 0,
	-1, 64,
	1, 690,
	215, 690,
	261, 690,
	376, 690,
	378, 690,
	380, 690,
	381, 690,
	-2, 703,
	-1, 97,
	4, 730,
	20, 730,
	21, 730,
	24, 730,
	29, 730,
	34, 730,
	35, 730,
	36, 730,
	37, 730,
	38, 730,
	39, 730,
	40, 730,
	41, 730,
	42, 730,
	43, 730,
	45, 730,
	46, 730,
	47, 730,
	48, 730,
	49, 730,
	52, 730,
	53, 730,
	54, 730,
	56, 730,
	57, 730,
	61, 730,
	62, 730,
	63, 730,
	65, 730,
	66, 730,
	67, 730,
	68, 730,
	70, 730,
	72, 730,
	73, 730,
	76, 730,
	77, 730,
	78, 730,
	86, 730,
	87, 730,
	88, 730,
	89, 730,
	90, 730,
	91, 730,
	92, 730,
	93, 730,
	95, 730,
	97, 730,
	99, 730,
	102, 730,
	103, 730,
	105, 730,
	109, 730,
	110, 730,
	111, 730,
	112, 730,
	113, 730,
	114, 730,
	115, 730,
	123, 730,
	124, 730,
	125, 730,
	126, 730,
	127, 730,
	129, 730,
	131, 730,
	136, 730,
	137, 730,
	139, 730,
	142, 730,
	143, 730,
	144, 730,
	145, 730,
	146, 730,
	147, 730,
	150, 730,
	151, 730,
	153, 730,
	156, 730,
	157, 730,
	158, 730,
	159, 730,
	160, 730,
	161, 730,
	162, 730,
	163, 730,
	165, 730,
	168, 730,
	169, 730,
	170, 730,
	172, 730,
	173, 730,
	174, 730,
	175, 730,
	176, 730,
	178, 730,
	179, 730,
	181, 730,
	183, 730,
	184, 730,
	187, 730,
	188, 730,
	191, 730,
	193, 730,
	195, 730,
	196, 730,
	197, 730,
	198, 730,
	199, 730,
	201, 730,
	202, 730,
	203, 730,
	204, 730,
	208, 730,
	209, 730,
	210, 730,
	211, 730,
	212, 730,
	214, 730,
	216, 730,
	217, 730,
	220, 730,
	221, 730,
	223, 730,
	225, 730,
	226, 730,
	227, 730,
	228, 730,
	229, 730,
	230, 730,
	231, 730,
	233, 730,
	234, 730,
	235, 730,
	236, 730,
	237, 730,
	239, 730,
	240, 730,
	241, 730,
	242, 730,
	243, 730,
	244, 730,
	245, 730,
	246, 730,
	248, 730,
	249, 730,
	250, 730,
	251, 730,
	252, 730,
	254, 730,
	255, 730,
	256, 730,
	257, 730,
	258, 730,
	259, 730,
	260, 730,
	262, 730,
	264, 730,
	265, 730,
	266, 730,
	267, 730,
	269, 730,
	270, 730,
	271, 730,
	272, 730,
	273, 730,
	275, 730,
	276, 730,
	277, 730,
	278, 730,
	279, 730,
	281, 730,
	282, 730,
	283, 730,
	284, 730,
	286, 730,
	287, 730,
	288, 730,
	289, 730,
	292, 730,
	293, 730,
	294, 730,
	295, 730,
	296, 730,
	297, 730,
	298, 730,
	299, 730,
	300, 730,
	301, 730,
	303, 730,
	305, 730,
	306, 730,
	307, 730,
	308, 730,
	309, 730,
	310, 730,
	311, 730,
	312, 730,
	314, 730,
	315, 730,
	316, 730,
	319, 730,
	320, 730,
	321, 730,
	322, 730,
	324, 730,
	325, 730,
	326, 730,
	327, 730,
	330, 730,
	331, 730,
	332, 730,
	333, 730,
	335, 730,
	337, 730,
	338, 730,
	339, 730,
	340, 730,
	341, 730,
	342, 730,
	345, 730,
	350, 730,
	351, 730,
	352, 730,
	353, 730,
	354, 730,
	-2, 0,
	-1, 115,
	1, 693,
	215, 693,
	261, 693,
	376, 693,
	378, 693,
	380, 693,
	381, 693,
	-2, 702,
	-1, 120,
	1, 628,
	168, 628,
	239, 628,
	243, 628,
	380, 628,
	381, 628,
	-2, 0,
	-1, 122,
	1, 628,
	380, 628,
	381, 628,
	-2, 0,
	-1, 123,
	1, 628,
	380, 628,
	381, 628,
	-2, 0,
	-1, 124,
	1, 632,
	380, 632,
	381, 632,
	-2, 0,
	-1, 146,
	4, 736,
	5, 736,
	6, 736,
	7, 736,
	8, 736,
	9, 736,
	20, 736,
	21, 736,
	24, 736,
	29, 736,
	30, 736,
	34, 736,
	35, 736,
	36, 736,
	37, 736,
	38, 736,
	39, 736,
	40, 736,
	41, 736,
	42, 736,
	43, 736,
	45, 736,
	46, 736,
	47, 736,
	48, 736,
	49, 736,
	50, 736,
	51, 736,
	52, 736,
	53, 736,
	54, 736,
	56, 736,
	57, 736,
	59, 736,
	61, 736,
	62, 736,
	63, 736,
	65, 736,
	66, 736,
	67, 736,
	68, 736,
	70, 736,
	72, 736,
	73, 736,
	75, 736,
	76, 736,
	77, 736,
	78, 736,
	80, 736,
	81, 736,
	82, 736,
	84, 736,
	85, 736,
	86, 736,
	87, 736,
	88, 736,
	89, 736,
	90, 736,
	91, 736,
	92, 736,
	93, 736,
	94, 736,
	95, 736,
	97, 736,
	99, 736,
	102, 736,
	103, 736,
	105, 736,
	109, 736,
	110, 736,
	111, 736,
	112, 736,
	113, 736,
	114, 736,
	115, 736,
	116, 736,
	117, 736,
	123, 736,
	124, 736,
	125, 736,
	126, 736,
	127, 736,
	129, 736,
	131, 736,
	134, 736,
	136, 736,
	137, 736,
	139, 736,
	142, 736,
	143, 736,
	144, 736,
	145, 736,
	146, 736,
	147, 736,
	148, 736,
	150, 736,
	151, 736,
	153, 736,
	155, 736,
	156, 736,
	157, 736,
	158, 736,
	159, 736,
	160, 736,
	161, 736,
	162, 736,
	163, 736,
	165, 736,
	167, 736,
	168, 736,
	169, 736,
	170, 736,
	171, 736,
	172, 736,
	173, 736,
	174, 736,
	175, 736,
	176, 736,
	178, 736,
	179, 736,
	181, 736,
	182, 736,
	183, 736,
	184, 736,
	185, 736,
	187, 736,
	188, 736,
	191, 736,
	193, 736,
	194, 736,
	195, 736,
	196, 736,
	197, 736,
	198, 736,
	199, 736,
	200, 736,
	201, 736,
	202, 736,
	203, 736,
	204, 736,
	205, 736,
	207, 736,
	208, 736,
	209, 736,
	210, 736,
	211, 736,
	212, 736,
	214, 736,
	217, 736,
	220, 736,
	221, 736,
	222, 736,
	223, 736,
	224, 736,
	225, 736,
	226, 736,
	227, 736,
	228, 736,
	229, 736,
	230, 736,
	231, 736,
	233, 736,
	234, 736,
	235, 736,
	236, 736,
	237, 736,
	239, 736,
	240, 736,
	241, 736,
	242, 736,
	243, 736,
	244, 736,
	245, 736,
	246, 736,
	248, 736,
	249, 736,
	250, 736,
	251, 736,
	252, 736,
	254, 736,
	255, 736,
	256, 736,
	257, 736,
	258, 736,
	259, 736,
	260, 736,
	262, 736,
	263, 736,
	264, 736,
	265, 736,
	266, 736,
	267, 736,
	269, 736,
	270, 736,
	271, 736,
	272, 736,
	273, 736,
	275, 736,
	276, 736,
	277, 736,
	278, 736,
	279, 736,
	280, 736,
	281, 736,
	282, 736,
	283, 736,
	284, 736,
	285, 736,
	286, 736,
	287, 736,
	288, 736,
	289, 736,
	292, 736,
	293, 736,
	294, 736,
	295, 736,
	296, 736,
	297, 736,
	298, 736,
	299, 736,
	300, 736,
	301, 736,
	303, 736,
	305, 736,
	306, 736,
	307, 736,
	308, 736,
	309, 736,
	310, 736,
	311, 736,
	312, 736,
	314, 736,
	315, 736,
	316, 736,
	319, 736,
	320, 736,
	321, 736,
	322, 736,
	323, 736,
	324, 736,
	325, 736,
	326, 736,
	327, 736,
	330, 736,
	331, 736,
	332, 736,
	333, 736,
	334, 736,
	335, 736,
	337, 736,
	338, 736,
	339, 736,
	340, 736,
	341, 736,
	342, 736,
	345, 736,
	350, 736,
	351, 736,
	352, 736,
	353, 736,
	354, 736,
	355, 736,
	363, 736,
	368, 736,
	369, 736,
	370, 736,
	377, 736,
	383, 736,
	-2, 0,
	-1, 149,
	1, 54,
	381, 54,
	-2, 728,
	-1, 517,
	133, 1347,
	317, 1347,
	360, 1347,
	379, 1347,
	-2, 0,
	-1, 518,
	133, 1294,
	317, 1294,
	360, 1294,
	379, 1294,
	-2, 0,
	-1, 520,
	133, 1407,
	317, 1407,
	360, 1407,
	379, 1407,
	-2, 0,
	-1, 522,
	133, 1430,
	317, 1430,
	360, 1430,
	379, 1430,
	-2, 0,
	-1, 529,
	133, 1352,
	317, 1352,
	360, 1352,
	379, 1352,
	-2, 348,
	-1, 555,
	1, 426,
	376, 426,
	378, 426,
	380, 426,
	381, 426,
	-2, 0,
	-1, 556,
	1, 479,
	130, 479,
	376, 479,
	378, 479,
	380, 479,
	381, 479,
	-2, 0,
	-1, 562,
	1, 440,
	376, 440,
	378, 440,
	380, 440,
	381, 440,
	-2, 0,
	-1, 564,
	1, 444,
	376, 444,
	378, 444,
	380, 444,
	381, 444,
	-2, 0,
	-1, 567,
	1, 452,
	376, 452,
	378, 452,
	380, 452,
	381, 452,
	-2, 0,
	-1, 568,
	1, 457,
	376, 457,
	378, 457,
	380, 457,
	381, 457,
	-2, 0,
	-1, 571,
	1, 467,
	376, 467,
	378, 467,
	380, 467,
	381, 467,
	-2, 0,
	-1, 596,
	118, 738,
	130, 738,
	186, 738,
	213, 738,
	-2, 697,
	-1, 603,
	118, 737,
	130, 737,
	186, 737,
	213, 737,
	-2, 694,
	-1, 630,
	377, 1518,
	-2, 1013,
	-1, 660,
	377, 1272,
	-2, 1265,
	-1, 661,
	377, 1273,
	-2, 1266,
	-1, 667,
	5, 922,
	377, 922,
	-2, 1482,
	-1, 692,
	5, 881,
	-2, 1451,
	-1, 693,
	5, 916,
	377, 916,
	-2, 1453,
	-1, 694,
	5, 891,
	-2, 1454,
	-1, 695,
	5, 890,
	-2, 1455,
	-1, 696,
	5, 916,
	377, 916,
	-2, 1458,
	-1, 697,
	5, 916,
	377, 916,
	-2, 1459,
	-1, 698,
	5, 917,
	-2, 1462,
	-1, 699,
	5, 873,
	-2, 1463,
	-1, 700,
	5, 873,
	-2, 1464,
	-1, 701,
	5, 898,
	-2, 1468,
	-1, 702,
	5, 883,
	-2, 1469,
	-1, 703,
	5, 884,
	-2, 1470,
	-1, 704,
	5, 874,
	-2, 1476,
	-1, 705,
	5, 875,
	-2, 1477,
	-1, 706,
	5, 876,
	-2, 1478,
	-1, 707,
	5, 877,
	-2, 1479,
	-1, 708,
	5, 878,
	-2, 1480,
	-1, 709,
	5, 879,
	-2, 1481,
	-1, 710,
	5, 873,
	-2, 1488,
	-1, 711,
	5, 882,
	-2, 1493,
	-1, 712,
	5, 880,
	-2, 1496,
	-1, 713,
	5, 914,
	377, 914,
	-2, 1498,
	-1, 714,
	5, 918,
	-2, 1501,
	-1, 715,
	5, 920,
	-2, 1502,
	-1, 716,
	5, 913,
	377, 913,
	-2, 1507,
	-1, 779,
	112, 503,
	-2, 827,
	-1, 911,
	229, 726,
	-2, 570,
	-1, 916,
	215, 1269,
	-2, 0,
	-1, 952,
	1, 225,
	376, 225,
	378, 225,
	380, 225,
	381, 225,
	-2, 701,
	-1, 955,
	4, 1506,
	10, 1506,
	11, 1506,
	13, 1506,
	14, 1506,
	15, 1506,
	16, 1506,
	17, 1506,
	18, 1506,
	20, 1506,
	21, 1506,
	23, 1506,
	24, 1506,
	27, 1506,
	29, 1506,
	31, 1506,
	34, 1506,
	35, 1506,
	36, 1506,
	37, 1506,
	38, 1506,
	39, 1506,
	40, 1506,
	41, 1506,
	42, 1506,
	43, 1506,
	45, 1506,
	46, 1506,
	47, 1506,
	48, 1506,
	49, 1506,
	52, 1506,
	53, 1506,
	54, 1506,
	56, 1506,
	57, 1506,
	58, 1506,
	61, 1506,
	62, 1506,
	63, 1506,
	64, 1506,
	65, 1506,
	66, 1506,
	67, 1506,
	68, 1506,
	70, 1506,
	71, 1506,
	72, 1506,
	73, 1506,
	75, 1506,
	76, 1506,
	77, 1506,
	78, 1506,
	86, 1506,
	87, 1506,
	88, 1506,
	89, 1506,
	90, 1506,
	91, 1506,
	92, 1506,
	93, 1506,
	95, 1506,
	97, 1506,
	99, 1506,
	102, 1506,
	103, 1506,
	105, 1506,
	109, 1506,
	110, 1506,
	111, 1506,
	112, 1506,
	113, 1506,
	114, 1506,
	115, 1506,
	119, 1506,
	120, 1506,
	121, 1506,
	122, 1506,
	123, 1506,
	124, 1506,
	125, 1506,
	126, 1506,
	127, 1506,
	128, 1506,
	129, 1506,
	131, 1506,
	134, 1506,
	136, 1506,
	137, 1506,
	139, 1506,
	142, 1506,
	143, 1506,
	144, 1506,
	145, 1506,
	146, 1506,
	147, 1506,
	148, 1506,
	149, 1506,
	150, 1506,
	151, 1506,
	153, 1506,
	155, 1506,
	156, 1506,
	157, 1506,
	158, 1506,
	159, 1506,
	160, 1506,
	161, 1506,
	162, 1506,
	163, 1506,
	165, 1506,
	167, 1506,
	168, 1506,
	169, 1506,
	170, 1506,
	171, 1506,
	172, 1506,
	173, 1506,
	174, 1506,
	175, 1506,
	176, 1506,
	178, 1506,
	179, 1506,
	181, 1506,
	182, 1506,
	183, 1506,
	184, 1506,
	185, 1506,
	187, 1506,
	188, 1506,
	191, 1506,
	192, 1506,
	193, 1506,
	195, 1506,
	196, 1506,
	197, 1506,
	198, 1506,
	199, 1506,
	200, 1506,
	201, 1506,
	202, 1506,
	203, 1506,
	204, 1506,
	208, 1506,
	209, 1506,
	210, 1506,
	211, 1506,
	212, 1506,
	214, 1506,
	217, 1506,
	218, 1506,
	220, 1506,
	221, 1506,
	223, 1506,
	225, 1506,
	226, 1506,
	227, 1506,
	228, 1506,
	229, 1506,
	230, 1506,
	231, 1506,
	233, 1506,
	234, 1506,
	235, 1506,
	236, 1506,
	237, 1506,
	239, 1506,
	240, 1506,
	241, 1506,
	242, 1506,
	243, 1506,
	244, 1506,
	245, 1506,
	246, 1506,
	248, 1506,
	249, 1506,
	250, 1506,
	251, 1506,
	252, 1506,
	253, 1506,
	254, 1506,
	255, 1506,
	256, 1506,
	257, 1506,
	258, 1506,
	259, 1506,
	260, 1506,
	262, 1506,
	263, 1506,
	264, 1506,
	265, 1506,
	266, 1506,
	267, 1506,
	268, 1506,
	269, 1506,
	270, 1506,
	271, 1506,
	272, 1506,
	273, 1506,
	275, 1506,
	276, 1506,
	277, 1506,
	278, 1506,
	279, 1506,
	281, 1506,
	282, 1506,
	283, 1506,
	284, 1506,
	285, 1506,
	286, 1506,
	287, 1506,
	288, 1506,
	289, 1506,
	291, 1506,
	292, 1506,
	293, 1506,
	294, 1506,
	295, 1506,
	296, 1506,
	297, 1506,
	298, 1506,
	299, 1506,
	300, 1506,
	301, 1506,
	303, 1506,
	305, 1506,
	306, 1506,
	307, 1506,
	308, 1506,
	309, 1506,
	310, 1506,
	311, 1506,
	312, 1506,
	314, 1506,
	315, 1506,
	316, 1506,
	319, 1506,
	320, 1506,
	321, 1506,
	322, 1506,
	324, 1506,
	325, 1506,
	326, 1506,
	327, 1506,
	330, 1506,
	331, 1506,
	332, 1506,
	333, 1506,
	335, 1506,
	337, 1506,
	338, 1506,
	339, 1506,
	340, 1506,
	341, 1506,
	342, 1506,
	345, 1506,
	350, 1506,
	351, 1506,
	352, 1506,
	353, 1506,
	354, 1506,
	355, 1506,
	356, 1506,
	358, 1506,
	359, 1506,
	360, 1506,
	361, 1506,
	362, 1506,
	363, 1506,
	365, 1506,
	366, 1506,
	367, 1506,
	368, 1506,
	369, 1506,
	370, 1506,
	371, 1506,
	372, 1506,
	373, 1506,
	375, 1506,
	378, 1506,
	379, 1506,
	382, 1506,
	383, 1506,
	-2, 0,
	-1, 971,
	133, 1407,
	317, 1407,
	360, 1407,
	379, 1407,
	-2, 0,
	-1, 988,
	133, 1430,
	317, 1430,
	360, 1430,
	379, 1430,
	-2, 0,
	-1, 989,
	168, 640,
	239, 640,
	243, 640,
	-2, 336,
	-1, 1057,
	118, 737,
	130, 737,
	186, 737,
	213, 737,
	-2, 698,
	-1, 1138,
	108, 703,
	118, 703,
	130, 703,
	164, 703,
	186, 703,
	213, 703,
	219, 703,
	328, 703,
	-2, 1053,
	-1, 1148,
	377, 1249,
	-2, 1237,
	-1, 1166,
	378, 1166,
	-2, 0,
	-1, 1190,
	168, 640,
	239, 640,
	243, 640,
	-2, 635,
	-1, 1218,
	378, 1166,
	-2, 0,
	-1, 1222,
	108, 703,
	118, 703,
	130, 703,
	164, 703,
	186, 703,
	213, 703,
	219, 703,
	328, 703,
	-2, 804,
	-1, 1369,
	168, 640,
	239, 640,
	243, 640,
	-2, 338,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 957,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 958,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 959,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 960,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 961,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 962,
	-1, 1483,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 963,
	-1, 1484,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 964,
	-1, 1493,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 973,
	-1, 1494,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 974,
	-1, 1495,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 975,
	-1, 1498,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 980,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 982,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 986,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 987,
	-1, 1508,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 988,
	-1, 1509,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 989,
	-1, 1578,
	133, 1177,
	377, 1272,
	-2, 1265,
	-1, 1579,
	133, 1178,
	-2, 1447,
	-1, 1580,
	133, 1179,
	-2, 1351,
	-1, 1581,
	133, 1180,
	-2, 1312,
	-1, 1582,
	133, 1181,
	-2, 1329,
	-1, 1583,
	133, 1182,
	-2, 1350,
	-1, 1584,
	133, 1183,
	-2, 1404,
	-1, 1661,
	1, 805,
	75, 805,
	108, 805,
	118, 805,
	130, 805,
	134, 805,
	138, 805,
	140, 805,
	155, 805,
	164, 805,
	171, 805,
	182, 805,
	186, 805,
	200, 805,
	213, 805,
	215, 805,
	219, 805,
	261, 805,
	263, 805,
	328, 805,
	336, 805,
	347, 805,
	348, 805,
	357, 805,
	376, 805,
	378, 805,
	380, 805,
	381, 805,
	382, 805,
	-2, 804,
	-1, 1816,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 981,
	-1, 1817,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 983,
	-1, 1822,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 984,
	-1, 1840,
	224, 1137,
	-2, 1139,
	-1, 2017,
	229, 726,
	-2, 570,
	-1, 2076,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 985,
	-1, 2081,
	167, 0,
	-2, 1001,
	-1, 2090,
	224, 1138,
	-2, 1140,
	-1, 2132,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1030,
	-1, 2133,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1031,
	-1, 2134,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1032,
	-1, 2138,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1036,
	-1, 2139,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1037,
	-1, 2140,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1038,
	-1, 2280,
	167, 0,
	-2, 1002,
	-1, 2283,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1005,
	-1, 2284,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1007,
	-1, 2412,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1006,
	-1, 2413,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1008,
	-1, 2420,
	167, 0,
	-2, 1039,
	-1, 2497,
	167, 0,
	-2, 1040,
	-1, 2579,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1450,
}

const sqlPrivate = 57344

const sqlLast = 43338

var sqlAct = [...]int{

	661, 2646, 2377, 2227, 2649, 2578, 2587, 2551, 2446, 2628,
	2588, 1740, 2589, 2054, 2502, 2109, 1240, 1267, 2388, 2238,
	945, 1732, 2348, 2577, 2334, 2260, 1810, 2262, 2267, 2191,
	1275, 905, 1521, 2426, 2192, 1310, 787, 948, 604, 186,
	1934, 1656, 1729, 2021, 186, 941, 1955, 2029, 186, 651,
	1238, 659, 2314, 1710, 186, 1216, 2254, 1270, 1741, 186,
	186, 1269, 1674, 186, 1906, 1942, 186, 1199, 1657, 2162,
	2023, 1714, 453, 1851, 186, 1451, 658, 1665, 471, 26,
	612, 110, 1704, 1456, 1905, 1394, 1806, 1144, 992, 1263,
	1533, 1789, 63, 1228, 1558, 1311, 528, 1535, 1062, 637,
	1542, 1230, 1200, 1518, 1390, 1715, 1434, 450, 769, 1432,
	1534, 991, 1607, 1176, 1552, 1180, 1712, 1220, 938, 931,
	1734, 1718, 789, 953, 1133, 1207, 1288, 1711, 1643, 772,
	508, 752, 803, 628, 115, 110, 116, 1063, 525, 1630,
	1574, 186, 186, 1393, 177, 1190, 653, 486, 521, 186,
	928, 1435, 1433, 1282, 750, 1189, 2349, 182, 549, 1067,
	2176, 1839, 1733, 2177, 1217, 2665, 1290, 1290, 1290, 1637,
	2039, 2074, 186, 186, 792, 186, 186, 805, 1632, 2654,
	1254, 186, 186, 2655, 1225, 2651, 608, 2624, 2623, 2652,
	603, 1258, 1258, 608, 2622, 2604, 2599, 2038, 1258, 2347,
	1637, 1637, 2598, 2595, 500, 618, 1637, 1258, 2575, 2574,
	609, 785, 1300, 1300, 2546, 2541, 2540, 2547, 1766, 1258,
	2402, 800, 2536, 2528, 1300, 2499, 1258, 2347, 26, 1766,
	110, 2477, 2474, 2406, 2472, 2347, 1258, 37, 2347, 2457,
	2456, 2402, 2434, 1258, 2347, 597, 1258, 596, 38, 120,
	2431, 2165, 622, 2414, 1258, 478, 2373, 1766, 2368, 2346,
	1637, 41, 1637, 2347, 2327, 2282, 38, 1705, 1258, 1766,
	1078, 1079, 2253, 1631, 2248, 122, 1709, 613, 1709, 41,
	777, 781, 2064, 1663, 2172, 43, 654, 46, 2173, 2085,
	1705, 2048, 2165, 1637, 1081, 2010, 754, 2009, 1931, 2145,
	2087, 1258, 1637, 1078, 1079, 477, 1930, 1923, 47, 893,
	1258, 1924, 49, 1921, 1843, 1300, 52, 1637, 1080, 123,
	1844, 1078, 1079, 53, 1100, 104, 54, 1081, 1920, 2010,
	1809, 1919, 1637, 766, 479, 1637, 1776, 1876, 1877, 1787,
	1637, 53, 1765, 481, 54, 1081, 1766, 1372, 55, 1637,
	1755, 1080, 1555, 1194, 1637, 1708, 1850, 56, 1636, 1709,
	1078, 1079, 1637, 1303, 756, 1537, 757, 1304, 1258, 1080,
	891, 973, 149, 970, 969, 56, 1291, 1291, 1291, 1103,
	1104, 1105, 1106, 2350, 1081, 968, 967, 146, 1086, 966,
	965, 1891, 964, 963, 962, 961, 960, 959, 958, 957,
	956, 146, 758, 755, 1556, 602, 601, 600, 1080, 599,
	595, 594, 593, 592, 591, 1391, 588, 148, 587, 2038,
	586, 1086, 186, 792, 186, 897, 186, 1631, 585, 186,
	581, 148, 580, 579, 547, 186, 546, 545, 544, 1086,
	543, 542, 541, 57, 186, 186, 186, 186, 792, 540,
	58, 539, 1101, 792, 147, 1882, 1557, 1554, 538, 611,
	911, 57, 537, 536, 535, 534, 533, 532, 147, 65,
	118, 59, 531, 60, 516, 61, 140, 124, 1086, 515,
	514, 186, 62, 141, 513, 1101, 512, 146, 118, 59,
	117, 60, 441, 1950, 73, 186, 419, 93, 2594, 1296,
	1289, 1425, 412, 1101, 117, 146, 411, 121, 169, 1791,
	168, 186, 480, 1107, 167, 93, 166, 148, 909, 1892,
	914, 186, 165, 164, 163, 162, 161, 160, 1102, 159,
	158, 157, 156, 155, 1559, 148, 154, 97, 153, 187,
	934, 934, 1101, 930, 152, 609, 119, 151, 150, 1221,
	1737, 1397, 792, 1571, 147, 1004, 2576, 478, 1569, 2562,
	2556, 1102, 140, 1567, 935, 2494, 1565, 2475, 38, 141,
	2395, 1074, 147, 2313, 904, 954, 2312, 2308, 2307, 1102,
	140, 41, 2407, 186, 2300, 2299, 2298, 141, 2294, 1007,
	117, 974, 2293, 4, 2292, 1893, 1078, 1079, 2291, 1108,
	1109, 1110, 1118, 1119, 1120, 2285, 2259, 477, 117, 1096,
	2159, 2154, 2153, 1111, 1553, 1002, 2152, 2095, 1102, 2012,
	1081, 2008, 1962, 1122, 1958, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 1928, 1058, 479, 1925, 1771, 765,
	1876, 1877, 1913, 53, 1080, 481, 54, 1904, 1875, 1872,
	1100, 1871, 1869, 1856, 1855, 1840, 1661, 1097, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 1074, 989, 986,
	1057, 1529, 1152, 1307, 1145, 1073, 1136, 56, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 2661, 902, 2636, 2052, 2635,
	1274, 1053, 1887, 1885, 1886, 1878, 1879, 1880, 1881, 1883,
	1884, 2111, 2505, 1219, 897, 1103, 1104, 1105, 1106, 1005,
	1218, 2566, 2565, 793, 1086, 2564, 806, 2531, 1082, 1083,
	1084, 1085, 1087, 1088, 2523, 2521, 2513, 2401, 609, 2511,
	146, 146, 2394, 1140, 1115, 1123, 2487, 2486, 1876, 1877,
	1523, 1894, 1895, 1896, 2443, 2422, 2403, 597, 2382, 596,
	186, 2371, 186, 1121, 2353, 2279, 1059, 1060, 1882, 2305,
	148, 148, 2236, 57, 2233, 2232, 1070, 1071, 1876, 1877,
	2230, 1113, 2200, 1075, 186, 186, 1392, 1805, 1101, 2199,
	2180, 2168, 1530, 2080, 1998, 1804, 1989, 1975, 1974, 1960,
	118, 59, 1891, 60, 1078, 1079, 1929, 147, 147, 1903,
	1865, 1864, 1861, 1148, 1112, 140, 140, 146, 1836, 1831,
	1178, 1179, 141, 141, 480, 1205, 1182, 93, 1081, 1181,
	1184, 1648, 1619, 1563, 1078, 1079, 1185, 1266, 1203, 1198,
	1197, 1188, 1174, 1736, 117, 1173, 1172, 148, 1171, 1107,
	1170, 1169, 1080, 1168, 1975, 1167, 1166, 1165, 1081, 110,
	1164, 1250, 1163, 1162, 1102, 1161, 1882, 1160, 1159, 1158,
	1157, 1156, 1204, 2287, 1948, 1149, 609, 1137, 1136, 985,
	977, 1116, 1080, 950, 147, 2258, 1215, 1095, 2175, 2171,
	1193, 1842, 140, 1649, 1382, 1381, 1882, 1391, 1388, 141,
	1768, 792, 186, 1145, 2050, 1897, 1191, 1134, 805, 1219,
	1876, 1877, 2024, 1223, 186, 1001, 1195, 2405, 2404, 2398,
	117, 1056, 1086, 1221, 2178, 2040, 2660, 186, 1775, 1186,
	1892, 1051, 1241, 186, 1187, 186, 1705, 186, 1256, 1570,
	903, 186, 1273, 2219, 1568, 620, 1265, 2408, 2212, 1566,
	1378, 1114, 1564, 2001, 1092, 1093, 1099, 1098, 1094, 1117,
	1892, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	1994, 1774, 793, 1927, 1239, 1926, 1815, 1429, 2309, 998,
	1154, 2055, 186, 186, 1385, 1279, 1308, 1271, 1993, 792,
	1797, 186, 1244, 2427, 186, 1733, 1236, 793, 2112, 1543,
	1177, 2656, 793, 1045, 2653, 1847, 1893, 2034, 2187, 1364,
	1880, 1881, 1883, 1884, 1237, 805, 2559, 1759, 447, 422,
	186, 173, 2061, 2619, 764, 186, 1436, 2620, 2535, 1555,
	186, 186, 2361, 186, 1777, 186, 1893, 186, 442, 186,
	1259, 930, 1667, 1046, 1037, 2468, 2466, 2465, 745, 1675,
	186, 2211, 2464, 2221, 1151, 1358, 186, 186, 1302, 1257,
	2214, 1231, 2184, 420, 1232, 186, 2183, 2051, 743, 741,
	1860, 1859, 1293, 738, 1219, 1295, 1858, 1857, 1386, 1298,
	1667, 1556, 1818, 1281, 1758, 1422, 1379, 186, 1700, 1666,
	1284, 805, 747, 1367, 1695, 1690, 1888, 1889, 1890, 999,
	425, 793, 1505, 1887, 1885, 1886, 1878, 1879, 1880, 1881,
	1883, 1884, 1192, 890, 2376, 1623, 1399, 1622, 1466, 1730,
	1423, 719, 1054, 431, 446, 110, 1678, 1305, 2225, 583,
	986, 1306, 1366, 1557, 1554, 1365, 1878, 1879, 1880, 1881,
	1883, 1884, 1000, 1233, 1369, 1231, 495, 1398, 1232, 425,
	1876, 1877, 1413, 2534, 1395, 1383, 1520, 717, 446, 2226,
	2005, 1876, 1877, 1403, 1084, 1085, 1087, 1088, 1261, 1407,
	1520, 1408, 1438, 1409, 1406, 1410, 590, 1411, 1231, 2448,
	1077, 1232, 432, 589, 1457, 1464, 2572, 1527, 445, 1424,
	1265, 1285, 1592, 1525, 1417, 1419, 590, 1088, 1559, 2638,
	2611, 1402, 2031, 186, 2543, 186, 1876, 1877, 186, 1031,
	1437, 1559, 597, 1290, 1447, 597, 597, 1448, 1449, 186,
	1430, 1431, 445, 1465, 984, 1455, 2105, 1233, 805, 2544,
	1246, 186, 1677, 2202, 2000, 186, 2516, 1421, 186, 609,
	898, 900, 186, 1540, 609, 1769, 186, 1543, 1032, 1140,
	1010, 1991, 805, 1055, 186, 1242, 792, 1545, 1392, 1389,
	1233, 2619, 2524, 1044, 186, 805, 1538, 1531, 1882, 186,
	1577, 1577, 1590, 1884, 1317, 1528, 1610, 186, 718, 1882,
	1614, 1615, 1617, 1050, 2032, 186, 2060, 1602, 2062, 2591,
	1175, 1553, 413, 1693, 1986, 1387, 186, 2215, 186, 2209,
	186, 1807, 1808, 186, 1559, 186, 1629, 186, 186, 1701,
	186, 792, 792, 2067, 1585, 792, 421, 2525, 1724, 186,
	1679, 1681, 975, 1676, 1882, 174, 1686, 609, 979, 1446,
	2031, 794, 1754, 1625, 807, 1628, 1626, 1664, 1697, 1654,
	444, 426, 2631, 1892, 1650, 1641, 422, 1668, 1753, 1692,
	1645, 1646, 1750, 1635, 1684, 620, 423, 434, 433, 2379,
	1651, 1036, 1691, 1671, 1223, 421, 739, 1241, 2471, 1828,
	447, 1735, 1247, 1735, 444, 1317, 1317, 2069, 1229, 1234,
	443, 2418, 2592, 170, 1689, 1826, 739, 740, 1892, 175,
	426, 739, 1761, 1131, 110, 422, 1747, 1702, 1863, 934,
	110, 934, 1644, 1640, 447, 423, 2449, 749, 805, 2639,
	748, 2203, 2268, 1660, 443, 1739, 186, 608, 1206, 1893,
	2610, 1756, 1748, 1291, 1749, 1820, 1751, 607, 1593, 1041,
	666, 584, 186, 186, 186, 1760, 186, 954, 1757, 1519,
	793, 2593, 1770, 2065, 2274, 1370, 990, 806, 494, 1126,
	1127, 1128, 1129, 1130, 2590, 1526, 1780, 1772, 2618, 414,
	1076, 1139, 2616, 1234, 1893, 186, 1823, 2066, 1782, 174,
	2387, 1147, 1182, 1241, 1185, 1066, 1824, 1210, 1794, 176,
	1829, 505, 1401, 606, 1179, 1178, 1727, 2102, 1011, 1502,
	1783, 2269, 1065, 1778, 1018, 2629, 1234, 980, 1213, 1252,
	1042, 484, 1781, 972, 983, 110, 1876, 1877, 1878, 1879,
	1880, 1881, 1883, 1884, 1208, 1251, 1887, 1885, 1886, 1878,
	1879, 1880, 1881, 1883, 1884, 1211, 2609, 1012, 793, 2068,
	1009, 415, 1792, 175, 2141, 1516, 2004, 1248, 608, 2103,
	1788, 171, 2459, 1209, 1796, 2458, 1821, 2441, 1801, 2303,
	1800, 1514, 2630, 487, 806, 1249, 1043, 1803, 1944, 2357,
	1064, 2644, 1885, 1886, 1878, 1879, 1880, 1881, 1883, 1884,
	1210, 173, 1377, 2508, 2632, 440, 492, 2360, 2186, 2101,
	794, 172, 488, 1971, 2359, 1201, 1201, 1066, 995, 1967,
	487, 1213, 1825, 1728, 1849, 435, 1280, 1272, 1268, 1827,
	1500, 1503, 2552, 1065, 2389, 794, 1212, 1642, 1956, 1416,
	794, 995, 995, 492, 489, 1061, 1819, 1559, 1211, 488,
	179, 1375, 1373, 176, 1882, 907, 609, 1443, 1065, 906,
	806, 1834, 1510, 2239, 1376, 491, 2442, 1499, 1837, 2142,
	1511, 1945, 1512, 186, 805, 2143, 1517, 605, 1977, 186,
	186, 489, 1846, 186, 1976, 1853, 1854, 1813, 186, 996,
	2304, 186, 1932, 997, 1639, 1638, 995, 1938, 503, 186,
	2356, 1064, 491, 497, 2643, 186, 186, 186, 927, 1943,
	1957, 186, 996, 996, 186, 171, 997, 997, 1892, 925,
	186, 186, 186, 186, 186, 2358, 1064, 606, 1066, 1212,
	609, 186, 1952, 792, 1444, 1902, 186, 1019, 916, 794,
	2228, 805, 1610, 1610, 1610, 173, 2658, 1915, 2380, 2439,
	186, 2003, 2315, 721, 2163, 172, 1947, 1910, 1911, 1912,
	186, 1562, 186, 2421, 186, 792, 792, 1501, 186, 2302,
	1992, 3, 186, 720, 1933, 2224, 1907, 186, 2440, 186,
	476, 34, 2079, 490, 475, 33, 186, 2006, 1513, 1870,
	2011, 1830, 2013, 1773, 1893, 1515, 1040, 806, 1707, 186,
	792, 1699, 2016, 2017, 1987, 1963, 1937, 1951, 1972, 1688,
	1049, 1593, 1593, 1048, 186, 1996, 1968, 978, 1985, 1961,
	490, 806, 1908, 1061, 1798, 793, 1561, 2036, 474, 30,
	1414, 892, 473, 69, 806, 1405, 436, 2047, 1155, 895,
	493, 2014, 2586, 896, 1698, 2018, 472, 68, 1687, 1972,
	1255, 2549, 1029, 1027, 186, 620, 620, 1936, 469, 22,
	2015, 470, 23, 1940, 1941, 502, 2033, 1946, 2331, 609,
	496, 2027, 926, 1999, 1025, 2041, 1023, 493, 437, 2207,
	793, 793, 2205, 924, 793, 2342, 663, 1593, 1593, 1593,
	2046, 468, 28, 1886, 1878, 1879, 1880, 1881, 1883, 1884,
	2057, 2058, 2049, 1021, 186, 2056, 2059, 2082, 1015, 438,
	1035, 439, 2185, 2063, 2020, 2042, 2043, 1731, 2044, 2045,
	1440, 775, 1445, 1725, 2343, 2072, 1723, 1039, 1452, 2070,
	34, 2097, 2098, 2099, 33, 923, 467, 20, 1467, 1468,
	1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478,
	1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498,
	2088, 1504, 2091, 1506, 1507, 1508, 1509, 806, 30, 2113,
	465, 19, 69, 1028, 1026, 1301, 186, 2086, 466, 18,
	1532, 2115, 186, 2104, 2106, 2107, 68, 1139, 2118, 1317,
	2120, 186, 186, 1457, 2116, 1024, 1299, 1022, 22, 1297,
	2147, 23, 1457, 2121, 457, 15, 1572, 1573, 458, 16,
	1589, 1294, 1601, 1603, 1608, 1611, 1612, 1613, 1292, 1253,
	1245, 2148, 1243, 2174, 1020, 2338, 1235, 2339, 1034, 1014,
	1317, 28, 2161, 464, 51, 2151, 2092, 2167, 2166, 2022,
	110, 186, 2155, 186, 2146, 2482, 2223, 2164, 456, 50,
	1811, 186, 463, 12, 792, 2198, 922, 2197, 2341, 761,
	2182, 1068, 2620, 2234, 737, 2400, 2189, 2344, 794, 186,
	186, 2399, 1396, 2231, 2217, 807, 20, 462, 44, 762,
	2255, 2217, 2196, 1317, 455, 45, 186, 1667, 2484, 2249,
	2241, 1683, 1667, 2247, 2210, 186, 1682, 805, 186, 186,
	186, 1680, 1593, 1593, 2243, 805, 2179, 1997, 2244, 2235,
	2251, 1988, 2229, 2242, 1703, 1694, 1812, 2213, 2181, 1352,
	19, 1427, 1428, 2240, 2216, 1799, 2220, 2250, 18, 2245,
	2276, 2222, 461, 7, 2518, 2256, 460, 6, 2206, 1069,
	2208, 2350, 186, 459, 36, 2273, 2281, 1013, 1317, 2340,
	454, 35, 2496, 2470, 15, 482, 794, 763, 16, 2316,
	2170, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
	1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
	1072, 1593, 807, 51, 1317, 1317, 1696, 742, 744, 1685,
	2548, 1078, 1079, 1317, 1317, 2385, 186, 1738, 50, 186,
	1078, 1079, 12, 806, 1726, 1722, 1627, 1368, 1309, 805,
	186, 186, 2627, 2301, 186, 186, 186, 504, 2642, 2289,
	1352, 1352, 1876, 1877, 1081, 2433, 1317, 44, 2321, 2270,
	2257, 186, 1078, 1079, 45, 2160, 186, 2277, 186, 1080,
	186, 186, 186, 1785, 1784, 186, 792, 2351, 1080, 2318,
	2108, 2325, 805, 2322, 1936, 792, 1785, 2320, 807, 2354,
	2053, 1953, 793, 186, 186, 646, 1922, 1786, 1624, 1621,
	806, 792, 1620, 1551, 1142, 2375, 1351, 2100, 1152, 2198,
	1150, 2197, 7, 2370, 1047, 1038, 6, 1033, 1030, 1016,
	2381, 982, 2217, 36, 793, 793, 2386, 1371, 582, 2217,
	35, 2447, 485, 1404, 183, 1017, 2196, 2391, 1949, 417,
	2198, 1647, 2197, 427, 2542, 2392, 2198, 2384, 2197, 448,
	2295, 2330, 1862, 2501, 498, 183, 2319, 2397, 506, 793,
	1006, 511, 574, 2417, 2411, 1560, 1153, 2196, 2326, 530,
	2390, 2323, 2367, 2196, 48, 1816, 1817, 2194, 640, 2372,
	617, 1822, 2332, 2409, 2410, 2188, 1717, 2396, 2355, 2416,
	1716, 808, 186, 1380, 186, 662, 805, 186, 1576, 1458,
	1835, 2423, 736, 664, 1314, 186, 665, 1351, 1351, 1315,
	2317, 805, 2430, 1841, 2374, 1183, 652, 1312, 951, 1848,
	2383, 1742, 1852, 1384, 1524, 807, 1206, 1317, 1541, 1845,
	1146, 632, 644, 643, 1539, 2451, 753, 753, 2453, 1866,
	976, 1265, 2450, 631, 417, 1954, 575, 2030, 186, 807,
	2393, 792, 1442, 794, 1802, 186, 1439, 2198, 1316, 2197,
	574, 2026, 807, 186, 186, 792, 792, 417, 417, 186,
	798, 417, 2473, 1139, 2429, 2204, 183, 894, 617, 424,
	1608, 1608, 1608, 1873, 2196, 1210, 2217, 2480, 186, 2489,
	2488, 2485, 2198, 186, 2197, 2492, 2481, 2435, 2432, 949,
	186, 1599, 2490, 2491, 1591, 1587, 1213, 1201, 794, 794,
	2512, 2455, 794, 1939, 1052, 1132, 2495, 2461, 2498, 2196,
	2479, 2506, 1208, 1743, 2476, 186, 186, 636, 2437, 2467,
	2507, 1003, 186, 1211, 2504, 2037, 2469, 2514, 1767, 2529,
	792, 2527, 1196, 2452, 575, 186, 2530, 792, 792, 2462,
	2463, 1209, 1450, 760, 2515, 759, 2648, 576, 2645, 1316,
	1316, 2533, 2378, 1374, 1779, 1125, 2522, 2538, 2539, 1124,
	746, 416, 186, 2510, 186, 994, 2532, 186, 993, 805,
	1970, 2637, 2483, 615, 2517, 574, 2201, 2558, 145, 142,
	144, 2567, 143, 2002, 2569, 72, 2493, 2568, 32, 31,
	92, 2555, 91, 617, 90, 807, 89, 88, 186, 2028,
	87, 86, 2571, 85, 1212, 1593, 84, 83, 2573, 82,
	81, 2570, 2584, 793, 2585, 186, 186, 186, 2583, 80,
	79, 78, 2603, 186, 77, 2596, 76, 616, 577, 75,
	74, 2198, 526, 2197, 2605, 2608, 523, 186, 2606, 2607,
	620, 620, 1317, 71, 2545, 576, 1593, 70, 29, 25,
	2617, 2615, 96, 620, 2621, 24, 806, 67, 2196, 575,
	66, 27, 578, 2625, 806, 17, 770, 11, 21, 2561,
	2071, 2563, 114, 113, 112, 1452, 111, 2626, 2634, 2640,
	2633, 2075, 14, 2641, 2076, 13, 109, 108, 107, 779,
	783, 2554, 106, 802, 105, 10, 2081, 9, 1317, 95,
	2266, 2560, 2647, 2650, 2657, 2089, 42, 530, 8, 530,
	2659, 917, 40, 2093, 920, 2664, 1939, 39, 2666, 2647,
	417, 94, 2650, 136, 1593, 135, 577, 132, 134, 530,
	530, 417, 942, 131, 133, 103, 2117, 138, 137, 129,
	2119, 1354, 2600, 2601, 2602, 127, 128, 130, 126, 125,
	2342, 1832, 1833, 2335, 139, 102, 101, 100, 99, 1317,
	578, 1353, 98, 5, 2333, 2, 530, 1, 806, 2337,
	576, 0, 483, 2149, 2150, 0, 0, 0, 0, 0,
	530, 0, 2156, 2157, 2158, 0, 0, 0, 0, 2343,
	0, 0, 484, 0, 0, 0, 981, 0, 1214, 1078,
	1079, 0, 0, 0, 0, 793, 530, 0, 0, 2663,
	2169, 806, 2336, 0, 793, 478, 0, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 38, 1899, 1900, 1901,
	793, 807, 0, 0, 1352, 0, 0, 0, 0, 41,
	2190, 0, 1354, 1354, 487, 0, 0, 1080, 0, 614,
	0, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1353, 1353, 0, 477, 0, 492, 417, 0,
	0, 1078, 1079, 488, 1313, 1352, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 578, 0, 0, 0, 0,
	794, 0, 0, 0, 479, 1081, 0, 1201, 807, 0,
	2338, 53, 2339, 481, 54, 489, 2252, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 0, 1080,
	0, 0, 794, 794, 0, 806, 491, 0, 1352, 0,
	0, 0, 0, 2341, 0, 56, 0, 0, 0, 0,
	806, 0, 2344, 0, 0, 2280, 0, 0, 0, 2283,
	2284, 0, 783, 2286, 0, 641, 64, 794, 0, 0,
	2288, 0, 2290, 802, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1313, 1313, 0, 2297, 0,
	793, 1101, 0, 0, 0, 0, 0, 0, 0, 1086,
	0, 1351, 0, 1352, 793, 793, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 2306, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 0, 2340, 0, 0, 0, 0, 1352,
	1352, 0, 1351, 0, 0, 511, 0, 753, 1352, 1352,
	0, 0, 0, 0, 490, 0, 0, 0, 118, 59,
	0, 60, 2077, 2078, 0, 0, 0, 1102, 0, 417,
	417, 2352, 0, 0, 0, 146, 598, 0, 0, 793,
	0, 1352, 480, 610, 0, 93, 793, 793, 0, 0,
	0, 0, 0, 0, 0, 1351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	783, 493, 0, 0, 771, 64, 0, 0, 806, 0,
	0, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140,
	0, 2144, 147, 0, 0, 0, 0, 0, 0, 0,
	140, 0, 0, 1316, 2412, 2413, 0, 141, 0, 0,
	1351, 0, 0, 0, 0, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 0, 0, 0, 1762, 117, 0,
	0, 0, 0, 0, 0, 2425, 0, 183, 38, 0,
	0, 2428, 0, 0, 1316, 0, 1351, 1351, 0, 417,
	0, 41, 0, 0, 0, 1351, 1351, 0, 0, 0,
	0, 0, 1278, 0, 0, 0, 0, 0, 417, 0,
	417, 0, 417, 0, 0, 0, 1286, 1763, 0, 0,
	0, 794, 0, 0, 0, 2460, 0, 0, 1351, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 0, 1316, 0, 0,
	0, 0, 1352, 0, 0, 0, 1764, 0, 0, 0,
	0, 0, 0, 0, 0, 481, 0, 530, 183, 0,
	0, 0, 0, 0, 807, 0, 183, 0, 0, 530,
	0, 0, 807, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 56, 0, 0,
	0, 770, 1226, 0, 0, 530, 0, 0, 0, 0,
	530, 0, 1316, 0, 0, 183, 530, 0, 530, 2509,
	530, 0, 530, 0, 530, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1415, 0, 0, 0, 0,
	0, 530, 530, 0, 0, 0, 0, 0, 1316, 1316,
	417, 0, 0, 1078, 1079, 0, 0, 1316, 1316, 1118,
	1119, 1120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 0, 0, 0, 0, 1081, 0, 0,
	1122, 0, 0, 57, 0, 0, 807, 0, 0, 0,
	1316, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 0, 0, 0, 1100, 0, 1351,
	118, 59, 0, 60, 0, 0, 0, 0, 610, 2582,
	2582, 0, 0, 794, 0, 0, 0, 146, 0, 807,
	0, 1264, 794, 0, 480, 2597, 0, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 1354, 0, 794, 0,
	783, 0, 1283, 0, 1283, 2582, 0, 148, 0, 0,
	0, 0, 1103, 1104, 1105, 1106, 1353, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 1352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1354, 511, 0,
	753, 1115, 1123, 894, 147, 0, 0, 0, 0, 0,
	0, 0, 140, 2582, 417, 0, 0, 1353, 0, 141,
	0, 0, 0, 0, 0, 0, 1659, 0, 0, 0,
	417, 0, 0, 417, 0, 0, 0, 1672, 1113, 0,
	117, 417, 0, 1352, 0, 1101, 2662, 0, 0, 417,
	1354, 0, 0, 807, 0, 2420, 0, 0, 0, 417,
	0, 0, 0, 0, 1706, 0, 0, 0, 807, 0,
	1353, 1316, 1713, 1876, 1877, 0, 1894, 1895, 1896, 0,
	894, 0, 0, 0, 0, 0, 0, 0, 598, 1313,
	2278, 417, 1426, 1746, 0, 530, 2444, 0, 530, 0,
	530, 0, 417, 417, 1352, 1752, 1107, 0, 794, 1135,
	0, 1138, 0, 0, 1672, 1354, 0, 0, 1143, 0,
	0, 1102, 794, 794, 0, 0, 0, 1891, 0, 0,
	1313, 0, 0, 0, 0, 1353, 0, 0, 1116, 0,
	0, 0, 0, 0, 1351, 0, 0, 0, 0, 0,
	0, 1354, 1354, 0, 0, 0, 0, 0, 0, 0,
	1354, 1354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1353, 1353, 0, 2497, 0, 0, 0, 0, 0,
	1353, 1353, 0, 1313, 0, 0, 0, 0, 0, 0,
	0, 1882, 0, 1354, 0, 0, 0, 794, 0, 0,
	1351, 0, 0, 0, 794, 794, 0, 0, 1114, 0,
	0, 1790, 0, 1353, 0, 0, 1117, 0, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 417, 417, 417,
	1897, 417, 0, 0, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 64, 0, 770, 0, 1313, 1222,
	0, 0, 0, 0, 0, 1892, 0, 0, 0, 0,
	417, 1351, 770, 0, 0, 1662, 451, 0, 0, 0,
	0, 0, 0, 783, 0, 0, 0, 0, 0, 0,
	0, 783, 0, 0, 1313, 1313, 0, 0, 478, 0,
	0, 802, 0, 1313, 1313, 0, 1316, 0, 0, 38,
	0, 1876, 1877, 0, 1894, 1895, 1896, 0, 0, 0,
	0, 0, 41, 0, 0, 0, 0, 0, 2084, 0,
	0, 0, 0, 1744, 0, 0, 1313, 0, 0, 0,
	0, 1893, 0, 0, 802, 802, 0, 0, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1316, 0, 0, 1891, 0, 0, 0, 0,
	0, 0, 0, 0, 1354, 0, 0, 479, 0, 0,
	0, 0, 0, 0, 53, 0, 481, 54, 0, 0,
	0, 0, 0, 0, 1353, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 56, 0,
	0, 0, 0, 1316, 0, 0, 0, 0, 0, 1882,
	0, 1888, 1889, 1890, 0, 0, 0, 0, 1887, 1885,
	1886, 1878, 1879, 1880, 1881, 1883, 1884, 0, 417, 0,
	0, 0, 0, 0, 417, 417, 0, 0, 417, 0,
	0, 0, 0, 1659, 0, 0, 1659, 0, 1897, 1793,
	802, 1795, 0, 783, 1959, 0, 0, 0, 0, 0,
	417, 1965, 1966, 0, 0, 0, 1672, 0, 0, 1973,
	0, 0, 0, 1892, 0, 1978, 1979, 1981, 1983, 1984,
	0, 0, 1814, 0, 57, 0, 417, 1313, 0, 0,
	0, 1995, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 0, 417, 0, 0, 0, 0,
	0, 118, 59, 0, 60, 1278, 0, 1278, 0, 530,
	0, 0, 0, 417, 0, 0, 0, 2025, 146, 0,
	0, 0, 417, 598, 2035, 480, 598, 598, 93, 0,
	0, 417, 0, 0, 0, 0, 0, 0, 0, 1893,
	0, 0, 0, 0, 1790, 0, 0, 0, 148, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1079, 1790,
	1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0, 1354,
	1096, 0, 0, 0, 1111, 0, 0, 0, 0, 1522,
	0, 1081, 0, 0, 1122, 147, 0, 0, 0, 1353,
	0, 0, 610, 140, 0, 0, 0, 1138, 0, 417,
	141, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 452, 0, 0, 478, 1354, 0, 0, 0, 1888,
	1889, 1890, 0, 0, 0, 38, 1887, 1885, 1886, 1878,
	1879, 1880, 1881, 1883, 1884, 1353, 0, 0, 41, 2110,
	770, 0, 0, 0, 0, 0, 770, 770, 0, 0,
	770, 0, 0, 0, 771, 0, 1103, 1104, 1105, 1106,
	0, 0, 0, 0, 477, 1086, 0, 0, 0, 0,
	1222, 0, 1964, 0, 0, 0, 1354, 0, 0, 0,
	0, 0, 0, 64, 0, 1115, 1123, 0, 0, 0,
	0, 0, 1313, 479, 0, 64, 1353, 0, 1990, 0,
	53, 0, 481, 54, 1121, 0, 0, 0, 1876, 1877,
	0, 1894, 1895, 1896, 0, 0, 0, 2007, 0, 0,
	0, 417, 1113, 0, 0, 2083, 0, 1659, 64, 1101,
	64, 0, 0, 0, 56, 2019, 894, 1659, 0, 0,
	0, 0, 0, 0, 1264, 0, 0, 0, 1313, 64,
	0, 2193, 0, 1264, 0, 64, 0, 0, 0, 0,
	0, 0, 1891, 0, 0, 0, 0, 0, 0, 0,
	2218, 0, 0, 0, 0, 0, 0, 2218, 0, 0,
	0, 0, 0, 0, 0, 0, 1672, 0, 1278, 0,
	1107, 0, 0, 0, 0, 0, 2237, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 1313,
	0, 0, 0, 0, 417, 417, 0, 0, 0, 0,
	57, 2073, 1116, 0, 0, 0, 1882, 0, 1095, 0,
	0, 2263, 0, 0, 0, 0, 0, 0, 0, 0,
	2265, 0, 0, 2271, 417, 417, 0, 118, 59, 0,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	64, 0, 0, 0, 146, 1897, 0, 0, 1412, 0,
	0, 480, 0, 0, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2296, 0, 0,
	1892, 0, 1114, 0, 148, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 0, 0, 0, 0, 0, 1078, 1079, 0, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096,
	0, 147, 0, 1111, 0, 0, 0, 0, 0, 140,
	1081, 417, 0, 1122, 894, 0, 141, 0, 0, 1522,
	0, 0, 0, 770, 0, 1659, 894, 0, 0, 2328,
	2329, 1672, 0, 0, 1080, 0, 1893, 117, 0, 1138,
	1100, 0, 0, 0, 0, 2193, 894, 1097, 0, 0,
	0, 2362, 0, 2363, 0, 417, 2365, 2366, 2218, 0,
	417, 0, 0, 0, 0, 2218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2193, 0, 894, 1713,
	0, 0, 2193, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 1138, 0, 0, 1744, 770, 0, 0,
	0, 0, 0, 0, 1115, 1123, 1888, 1889, 1890, 0,
	0, 0, 0, 1887, 1885, 1886, 1878, 1879, 1880, 1881,
	1883, 1884, 0, 1121, 0, 0, 2272, 802, 771, 0,
	0, 0, 0, 0, 771, 771, 0, 0, 771, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 1101, 0,
	1876, 1877, 0, 1894, 1895, 1896, 0, 1672, 0, 2436,
	0, 0, 2438, 0, 0, 0, 0, 0, 0, 0,
	417, 0, 0, 2193, 1112, 0, 0, 0, 0, 0,
	0, 64, 1876, 1877, 0, 1894, 1895, 1896, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2218, 0, 1891, 0, 0, 0, 2193, 1107,
	0, 0, 0, 417, 0, 0, 0, 0, 64, 0,
	894, 0, 64, 770, 1102, 0, 0, 0, 2263, 2263,
	0, 0, 610, 0, 894, 0, 1891, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 2503, 0, 0, 0, 0, 1659, 0,
	0, 0, 0, 0, 0, 1278, 0, 2364, 1882, 0,
	0, 0, 2369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1898,
	2519, 2520, 0, 0, 0, 0, 0, 417, 0, 0,
	1882, 0, 0, 0, 0, 0, 0, 1897, 0, 0,
	2537, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 0, 1892, 0, 0, 0, 0, 2553, 1918, 894,
	0, 0, 417, 0, 0, 1078, 1079, 0, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 2193, 1096, 0,
	0, 0, 1111, 0, 1892, 0, 0, 0, 0, 1081,
	0, 0, 1122, 2503, 0, 0, 1078, 1079, 0, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096,
	894, 894, 894, 1080, 0, 0, 0, 0, 417, 1100,
	1081, 0, 2445, 1122, 0, 0, 1097, 0, 1893, 0,
	0, 0, 2614, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 64, 0, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1893, 771, 0, 0, 0, 2478, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 1123, 1103, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 1086, 0, 0, 0, 1888, 1889,
	1890, 0, 1121, 0, 0, 1887, 1885, 1886, 1878, 1879,
	1880, 1881, 1883, 1884, 1115, 1123, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 1101, 0, 2526,
	1888, 1889, 1890, 1121, 0, 771, 0, 1887, 1885, 1886,
	1878, 1879, 1880, 1881, 1883, 1884, 0, 0, 0, 0,
	0, 1113, 0, 1112, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2557, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	1116, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	1744, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 1917, 0, 0,
	0, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 0, 0, 0, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 809, 0, 190, 810, 811,
	812, 813, 352, 814, 815, 816, 817, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 818, 195, 359,
	360, 196, 197, 819, 820, 361, 362, 363, 821, 198,
	364, 822, 795, 823, 199, 200, 201, 0, 203, 204,
	205, 202, 824, 206, 0, 207, 208, 825, 722, 209,
	210, 211, 826, 827, 829, 828, 830, 831, 832, 212,
	213, 418, 214, 365, 215, 366, 367, 833, 216, 834,
	217, 835, 218, 836, 837, 219, 220, 838, 221, 839,
	0, 840, 368, 222, 224, 223, 225, 369, 370, 841,
	723, 842, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 64, 228, 843, 229, 844, 845, 724, 846, 230,
	374, 847, 375, 848, 1522, 231, 232, 233, 234, 376,
	377, 726, 849, 378, 238, 850, 235, 851, 725, 236,
	379, 237, 380, 381, 382, 383, 384, 852, 385, 853,
	727, 239, 240, 241, 728, 386, 387, 242, 243, 244,
	854, 246, 245, 855, 388, 729, 247, 248, 730, 856,
	249, 250, 857, 858, 251, 0, 252, 796, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 859, 860,
	861, 390, 261, 391, 262, 263, 862, 264, 863, 864,
	265, 865, 866, 266, 392, 732, 267, 733, 393, 268,
	269, 270, 271, 272, 273, 867, 274, 394, 275, 395,
	276, 868, 277, 278, 279, 280, 281, 396, 282, 283,
	869, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 870, 296, 734, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 871, 309, 398,
	308, 310, 311, 872, 312, 300, 301, 313, 735, 314,
	399, 400, 315, 873, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 874, 323, 875, 324, 325,
	326, 327, 328, 329, 330, 331, 876, 403, 404, 405,
	877, 878, 332, 333, 406, 407, 879, 334, 335, 336,
	337, 880, 881, 338, 339, 340, 341, 882, 342, 883,
	408, 343, 344, 345, 409, 410, 884, 885, 346, 886,
	887, 888, 889, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 804, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1652, 0,
	0, 0, 0, 0, 188, 189, 809, 1653, 190, 810,
	811, 812, 813, 352, 814, 815, 816, 817, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 818, 195,
	359, 360, 196, 197, 819, 820, 361, 362, 363, 821,
	198, 364, 822, 795, 823, 199, 200, 201, 0, 203,
	204, 205, 202, 824, 206, 0, 207, 208, 825, 722,
	209, 210, 211, 826, 827, 829, 828, 830, 831, 832,
	212, 213, 418, 214, 365, 215, 366, 367, 833, 216,
	834, 217, 835, 218, 836, 837, 219, 220, 838, 221,
	839, 0, 840, 368, 222, 224, 223, 225, 369, 370,
	841, 723, 842, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 843, 229, 844, 845, 724, 846,
	230, 374, 847, 375, 848, 0, 231, 232, 233, 234,
	376, 377, 726, 849, 378, 238, 850, 235, 851, 725,
	236, 379, 237, 380, 381, 382, 383, 384, 852, 385,
	853, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 854, 246, 245, 855, 388, 729, 247, 248, 730,
	856, 249, 250, 857, 858, 251, 0, 252, 796, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 859,
	860, 861, 390, 261, 391, 262, 263, 862, 264, 863,
	864, 265, 865, 866, 266, 392, 732, 267, 733, 393,
	268, 269, 270, 271, 272, 273, 867, 274, 394, 275,
	395, 276, 868, 277, 278, 279, 280, 281, 396, 282,
	283, 869, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 870, 296, 734, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 871, 309,
	398, 308, 310, 311, 872, 312, 300, 301, 313, 735,
	314, 399, 400, 315, 873, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 874, 323, 875, 324,
	325, 326, 327, 328, 329, 330, 331, 876, 403, 404,
	405, 877, 878, 332, 333, 406, 407, 879, 334, 335,
	336, 337, 880, 881, 338, 339, 340, 341, 882, 342,
	883, 408, 343, 344, 345, 409, 410, 884, 885, 346,
	886, 887, 888, 889, 347, 348, 349, 350, 351, 0,
	804, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 809, 2324,
	190, 810, 811, 812, 813, 352, 814, 815, 816, 817,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	818, 195, 359, 360, 196, 197, 819, 820, 361, 362,
	363, 821, 198, 364, 822, 795, 823, 199, 200, 201,
	0, 203, 204, 205, 202, 824, 206, 0, 207, 208,
	825, 722, 209, 210, 211, 826, 827, 829, 828, 830,
	831, 832, 212, 213, 418, 214, 365, 215, 366, 367,
	833, 216, 834, 217, 835, 218, 836, 837, 219, 220,
	838, 221, 839, 0, 840, 368, 222, 224, 223, 225,
	369, 370, 841, 723, 842, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 843, 229, 844, 845,
	724, 846, 230, 374, 847, 375, 848, 0, 231, 232,
	233, 234, 376, 377, 726, 849, 378, 238, 850, 235,
	851, 725, 236, 379, 237, 380, 381, 382, 383, 384,
	852, 385, 853, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 854, 246, 245, 855, 388, 729, 247,
	248, 730, 856, 249, 250, 857, 858, 251, 0, 252,
	796, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 859, 860, 861, 390, 261, 391, 262, 263, 862,
	264, 863, 864, 265, 865, 866, 266, 392, 732, 267,
	733, 393, 268, 269, 270, 271, 272, 273, 867, 274,
	394, 275, 395, 276, 868, 277, 278, 279, 280, 281,
	396, 282, 283, 869, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 870, 296, 734,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	871, 309, 398, 308, 310, 311, 872, 312, 300, 301,
	313, 735, 314, 399, 400, 315, 873, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 874, 323,
	875, 324, 325, 326, 327, 328, 329, 330, 331, 876,
	403, 404, 405, 877, 878, 332, 333, 406, 407, 879,
	334, 335, 336, 337, 880, 881, 338, 339, 340, 341,
	882, 342, 883, 408, 343, 344, 345, 409, 410, 884,
	885, 346, 886, 887, 888, 889, 347, 348, 349, 350,
	351, 804, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1260, 188, 189, 809,
	0, 190, 810, 811, 812, 813, 352, 814, 815, 816,
	817, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 818, 195, 359, 360, 196, 197, 819, 820, 361,
	362, 363, 821, 198, 364, 822, 795, 823, 199, 200,
	201, 0, 203, 204, 205, 202, 824, 206, 0, 207,
	208, 825, 722, 209, 210, 211, 826, 827, 829, 828,
	830, 831, 832, 212, 213, 418, 214, 365, 215, 366,
	367, 833, 216, 834, 217, 835, 218, 836, 837, 219,
	220, 838, 221, 839, 0, 840, 368, 222, 224, 223,
	225, 369, 370, 841, 723, 842, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 843, 229, 844,
	845, 724, 846, 230, 374, 847, 375, 848, 0, 231,
	232, 233, 234, 376, 377, 726, 849, 378, 238, 850,
	235, 851, 725, 236, 379, 237, 380, 381, 382, 383,
	384, 852, 385, 853, 727, 239, 240, 241, 728, 386,
	387, 242, 243, 244, 854, 246, 245, 855, 388, 729,
	247, 248, 730, 856, 249, 250, 857, 858, 251, 0,
	252, 796, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 859, 860, 861, 390, 261, 391, 262, 263,
	862, 264, 863, 864, 265, 865, 866, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 867,
	274, 394, 275, 395, 276, 868, 277, 278, 279, 280,
	281, 396, 282, 283, 869, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 870, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 871, 309, 398, 308, 310, 311, 872, 312, 300,
	301, 313, 735, 314, 399, 400, 315, 873, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 874,
	323, 875, 324, 325, 326, 327, 328, 329, 330, 331,
	876, 403, 404, 405, 877, 878, 332, 333, 406, 407,
	879, 334, 335, 336, 337, 880, 881, 338, 339, 340,
	341, 882, 342, 883, 408, 343, 344, 345, 409, 410,
	884, 885, 346, 886, 887, 888, 889, 347, 348, 349,
	350, 351, 1550, 0, 660, 649, 650, 647, 648, 639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 1547, 0, 190, 0, 0, 0, 0, 677,
	642, 0, 0, 0, 191, 192, 193, 353, 692, 355,
	693, 194, 694, 695, 0, 195, 359, 360, 196, 197,
	645, 676, 696, 697, 363, 0, 198, 688, 0, 668,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	669, 670, 672, 0, 671, 673, 212, 213, 418, 214,
	698, 215, 699, 700, 629, 216, 0, 217, 0, 218,
	1548, 0, 691, 220, 0, 221, 0, 0, 0, 633,
	222, 224, 223, 225, 678, 679, 656, 723, 0, 0,
	0, 0, 0, 226, 227, 701, 702, 703, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 689, 0, 375,
	0, 0, 231, 232, 233, 234, 685, 687, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 704, 237, 705,
	706, 707, 708, 709, 0, 667, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 690, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 630, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 626, 0, 657, 686, 261,
	710, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 680, 268, 269, 270, 271,
	272, 273, 0, 274, 681, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 711, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 634, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	674, 312, 300, 301, 313, 735, 314, 712, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 713, 319,
	320, 682, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 714, 715, 0, 0, 332,
	333, 683, 684, 655, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 675, 342, 0, 408, 343, 344,
	345, 409, 716, 1546, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 0, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	1549, 0, 0, 0, 0, 0, 0, 635, 1544, 0,
	0, 0, 611, 638, 660, 649, 650, 647, 648, 639,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 677,
	642, 0, 0, 0, 191, 192, 193, 353, 692, 355,
	693, 194, 694, 695, 0, 195, 359, 360, 196, 197,
	645, 676, 696, 697, 363, 0, 198, 688, 0, 668,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	669, 670, 672, 0, 671, 673, 212, 213, 418, 214,
	698, 215, 699, 700, 629, 216, 0, 217, 0, 218,
	0, 0, 691, 220, 0, 221, 0, 0, 0, 633,
	222, 224, 223, 225, 678, 679, 656, 723, 0, 0,
	0, 0, 0, 226, 227, 701, 702, 703, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 689, 0, 375,
	0, 0, 231, 232, 233, 234, 685, 687, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 704, 237, 705,
	706, 707, 708, 709, 0, 667, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 690, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 630, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 626, 0, 657, 686, 261,
	710, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 680, 268, 269, 270, 271,
	272, 273, 0, 274, 681, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 711, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 634, 299, 0, 303,
	304, 305, 306, 307, 146, 309, 398, 308, 310, 311,
	674, 312, 300, 301, 313, 735, 314, 712, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 713, 319,
	320, 682, 0, 323, 148, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 714, 715, 0, 0, 332,
	333, 683, 684, 655, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 675, 342, 0, 408, 343, 344,
	345, 955, 716, 0, 0, 346, 0, 0, 0, 140,
	347, 348, 349, 350, 351, 627, 141, 0, 0, 0,
	0, 0, 0, 625, 0, 0, 0, 0, 623, 624,
	660, 649, 650, 647, 648, 639, 0, 1141, 0, 0,
	0, 0, 0, 638, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 677, 642, 0, 0, 0,
	191, 192, 193, 353, 692, 355, 693, 194, 694, 695,
	0, 195, 359, 360, 196, 197, 645, 676, 696, 697,
	363, 0, 198, 688, 0, 668, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 669, 670, 672, 0,
	671, 673, 212, 213, 418, 214, 698, 215, 699, 700,
	629, 216, 0, 217, 0, 218, 0, 0, 691, 220,
	0, 221, 0, 0, 0, 633, 222, 224, 223, 225,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 226,
	227, 701, 702, 703, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 689, 0, 375, 0, 0, 231, 232,
	233, 234, 685, 687, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 704, 237, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 690, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	630, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 626, 0, 657, 686, 261, 710, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 680, 268, 269, 270, 271, 272, 273, 0, 274,
	681, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	711, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 634, 299, 0, 303, 304, 305, 306, 307,
	146, 309, 398, 308, 310, 311, 674, 312, 300, 301,
	313, 735, 314, 712, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 713, 319, 320, 682, 0, 323,
	148, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 714, 715, 0, 0, 332, 333, 683, 684, 655,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	675, 342, 0, 408, 343, 344, 345, 955, 716, 0,
	0, 346, 0, 0, 0, 140, 347, 348, 349, 350,
	351, 627, 141, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 660, 649, 650, 647,
	648, 639, 0, 1141, 0, 0, 0, 0, 0, 638,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 677, 642, 0, 0, 0, 191, 192, 193, 353,
	692, 355, 693, 194, 694, 695, 1604, 195, 359, 360,
	196, 197, 645, 676, 696, 697, 363, 0, 198, 688,
	0, 668, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	211, 0, 669, 670, 672, 0, 671, 673, 212, 213,
	418, 214, 698, 215, 699, 700, 629, 216, 0, 217,
	0, 218, 0, 0, 691, 220, 0, 221, 0, 0,
	0, 633, 222, 224, 223, 225, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 226, 227, 701, 702, 703,
	0, 228, 0, 229, 0, 1609, 724, 0, 230, 689,
	0, 375, 0, 0, 231, 232, 233, 234, 685, 687,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 704,
	237, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 1605, 690, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 630, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 657,
	686, 261, 710, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 680, 268, 269,
	270, 271, 272, 273, 0, 274, 681, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 711, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 634, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 674, 312, 300, 301, 313, 735, 314, 712,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	713, 319, 320, 682, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 714, 715, 0,
	1606, 332, 333, 683, 684, 655, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 675, 342, 0, 408,
	343, 344, 345, 409, 716, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 660, 649,
	650, 647, 648, 639, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 188, 189, 0, 0, 190, 635,
	0, 0, 0, 677, 642, 638, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 215, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 232, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	2246, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	660, 649, 650, 647, 648, 639, 0, 625, 0, 0,
	0, 0, 623, 624, 1202, 0, 188, 189, 0, 0,
	190, 635, 0, 0, 0, 677, 642, 638, 0, 0,
	191, 192, 193, 353, 692, 355, 693, 194, 694, 695,
	0, 195, 359, 360, 196, 197, 645, 676, 696, 697,
	363, 0, 198, 688, 0, 668, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 669, 670, 672, 0,
	671, 673, 212, 213, 418, 214, 698, 215, 699, 700,
	629, 216, 0, 217, 0, 218, 0, 0, 691, 220,
	0, 221, 0, 0, 0, 633, 222, 224, 223, 225,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 226,
	227, 701, 702, 703, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 689, 0, 375, 0, 0, 231, 232,
	233, 234, 685, 687, 726, 0, 378, 238, 1454, 235,
	0, 725, 236, 704, 237, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 690, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	630, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 626, 0, 657, 686, 261, 710, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 680, 268, 269, 270, 271, 272, 273, 0, 274,
	681, 275, 395, 276, 1453, 277, 278, 279, 280, 281,
	711, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 634, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 674, 312, 300, 301,
	313, 735, 314, 712, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 713, 319, 320, 682, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 714, 715, 0, 0, 332, 333, 683, 684, 655,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	675, 342, 0, 408, 343, 344, 345, 409, 716, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 0, 0, 0, 0, 0, 0, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 0, 0,
	0, 0, 0, 635, 0, 0, 0, 0, 619, 638,
	660, 649, 650, 647, 648, 639, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 677, 642, 0, 0, 0,
	191, 192, 193, 353, 692, 355, 693, 194, 694, 695,
	0, 195, 359, 360, 196, 197, 645, 676, 696, 697,
	363, 0, 198, 688, 0, 668, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 669, 670, 672, 0,
	671, 673, 212, 213, 418, 214, 698, 215, 699, 700,
	629, 216, 0, 217, 0, 218, 0, 0, 691, 220,
	0, 221, 0, 0, 0, 633, 222, 224, 223, 225,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 226,
	227, 701, 702, 703, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 689, 0, 375, 0, 0, 231, 232,
	233, 234, 685, 687, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 704, 237, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 690, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	630, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 626, 0, 657, 686, 261, 710, 262, 263, 0,
	264, 621, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 680, 268, 269, 270, 271, 272, 273, 0, 274,
	681, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	711, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 634, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 674, 312, 300, 301,
	313, 735, 314, 712, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 713, 319, 320, 682, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 714, 715, 0, 0, 332, 333, 683, 684, 655,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	675, 342, 0, 408, 343, 344, 345, 409, 716, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 660, 649, 650, 647, 648, 639, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 188, 189,
	0, 0, 190, 635, 0, 0, 0, 677, 642, 638,
	0, 0, 191, 192, 193, 353, 692, 355, 693, 194,
	694, 695, 0, 195, 359, 360, 196, 197, 645, 676,
	696, 697, 363, 0, 198, 688, 0, 668, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 211, 0, 669, 670,
	672, 0, 671, 673, 212, 213, 418, 214, 698, 215,
	699, 700, 629, 216, 0, 217, 0, 218, 0, 0,
	691, 220, 0, 221, 0, 0, 0, 633, 222, 224,
	223, 225, 678, 679, 656, 723, 0, 0, 0, 0,
	0, 226, 227, 701, 702, 703, 0, 228, 0, 229,
	0, 0, 724, 0, 230, 689, 0, 375, 0, 0,
	231, 232, 233, 234, 685, 687, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 704, 237, 705, 706, 707,
	708, 709, 0, 667, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 690,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 630, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 626, 0, 657, 686, 261, 710, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 680, 268, 269, 270, 271, 272, 273,
	0, 274, 681, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 711, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 634, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 674, 312,
	300, 301, 313, 735, 314, 712, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 713, 319, 320, 682,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 714, 715, 0, 0, 332, 333, 683,
	684, 655, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 675, 342, 0, 408, 343, 344, 345, 409,
	716, 2096, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 660, 649, 650, 647, 648, 639,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	188, 189, 0, 0, 190, 635, 0, 0, 0, 677,
	642, 638, 0, 0, 191, 192, 193, 353, 692, 355,
	693, 194, 694, 695, 0, 195, 359, 360, 196, 197,
	645, 676, 696, 697, 363, 0, 198, 688, 0, 668,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	669, 670, 672, 0, 671, 673, 212, 213, 418, 214,
	698, 215, 699, 700, 629, 216, 0, 217, 0, 218,
	0, 0, 691, 220, 0, 221, 0, 0, 0, 633,
	222, 224, 223, 225, 678, 679, 656, 723, 0, 0,
	0, 0, 0, 226, 227, 701, 702, 703, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 689, 0, 375,
	0, 0, 231, 232, 233, 234, 685, 687, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 704, 237, 705,
	706, 707, 708, 709, 0, 667, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 690, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 630, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 626, 0, 657, 686, 261,
	710, 262, 263, 0, 264, 621, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 680, 268, 269, 270, 271,
	272, 273, 0, 274, 681, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 711, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 634, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	674, 312, 300, 301, 313, 735, 314, 712, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 713, 319,
	320, 682, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 714, 715, 0, 0, 332,
	333, 683, 684, 655, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 675, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 660, 649, 650, 647,
	648, 639, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 188, 189, 0, 0, 190, 635, 0, 0,
	0, 677, 642, 638, 0, 0, 191, 192, 193, 353,
	692, 355, 693, 194, 694, 695, 0, 195, 359, 360,
	196, 197, 645, 676, 696, 697, 363, 0, 198, 688,
	0, 668, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	211, 0, 669, 670, 672, 0, 671, 673, 212, 213,
	418, 214, 698, 215, 699, 700, 629, 216, 0, 217,
	0, 218, 0, 0, 691, 220, 0, 221, 0, 0,
	0, 633, 222, 224, 223, 225, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 226, 227, 701, 702, 703,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 689,
	0, 375, 0, 0, 231, 232, 233, 234, 685, 687,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 704,
	237, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 690, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 630, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 657,
	686, 261, 710, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 680, 268, 269,
	270, 271, 272, 273, 0, 274, 681, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 711, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 634, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 674, 312, 300, 301, 313, 735, 314, 712,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	713, 319, 320, 682, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 714, 715, 0,
	0, 332, 333, 683, 684, 655, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 675, 342, 0, 408,
	343, 344, 345, 409, 716, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 660, 649,
	650, 647, 648, 639, 0, 625, 0, 0, 0, 0,
	623, 624, 1202, 0, 188, 189, 0, 0, 190, 635,
	0, 0, 0, 677, 642, 638, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 215, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 1609, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 232, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 1655, 638, 660, 649,
	650, 647, 648, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 215, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 232, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 1618, 638, 660, 649,
	650, 647, 648, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 215, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 232, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 1616, 638, 660, 649,
	650, 647, 648, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 215, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 232, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 1600, 638, 660, 649,
	650, 647, 648, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 215, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 232, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 1588, 638, 660, 649,
	650, 647, 648, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 215, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 232, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 1586, 638, 1578, 649,
	650, 647, 648, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 1581, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 1582, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 1583,
	1580, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 1584, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 1579, 351, 627,
	0, 0, 0, 0, 0, 0, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 0, 0, 0, 0,
	0, 635, 0, 0, 0, 0, 1575, 638, 1578, 649,
	650, 647, 648, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 677, 642, 0, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 1581, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 1582, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 1583,
	1580, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 1584, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 1579, 351, 627,
	660, 649, 650, 647, 648, 639, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 188, 189, 0, 0,
	190, 635, 0, 0, 0, 677, 642, 638, 0, 0,
	191, 192, 193, 353, 692, 355, 693, 194, 694, 695,
	0, 195, 359, 360, 196, 197, 645, 676, 696, 697,
	363, 0, 198, 688, 0, 668, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 669, 670, 672, 0,
	671, 673, 212, 213, 418, 214, 698, 215, 699, 700,
	629, 216, 0, 217, 0, 218, 0, 0, 691, 220,
	0, 221, 0, 0, 0, 633, 222, 224, 223, 225,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 226,
	227, 701, 702, 703, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 689, 0, 375, 0, 0, 231, 232,
	233, 234, 685, 687, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 704, 237, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 690, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	630, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 626, 0, 657, 686, 261, 710, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 680, 268, 269, 270, 271, 272, 273, 0, 274,
	681, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	711, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 634, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 674, 312, 300, 301,
	313, 735, 314, 712, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 713, 319, 320, 682, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 714, 715, 0, 0, 332, 333, 683, 684, 655,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	675, 342, 0, 408, 343, 344, 345, 409, 716, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 627, 660, 649, 650, 647, 648, 639, 0, 625,
	0, 0, 0, 0, 623, 624, 0, 0, 188, 189,
	1441, 1145, 190, 635, 0, 0, 0, 677, 642, 638,
	0, 0, 191, 192, 193, 353, 692, 355, 693, 194,
	694, 695, 0, 195, 359, 360, 196, 197, 645, 676,
	696, 697, 363, 0, 198, 688, 0, 668, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 211, 0, 669, 670,
	672, 0, 671, 673, 212, 213, 418, 214, 698, 215,
	699, 700, 629, 216, 0, 217, 0, 218, 0, 0,
	691, 220, 0, 221, 0, 0, 0, 633, 222, 224,
	223, 225, 678, 679, 656, 723, 0, 0, 0, 0,
	0, 226, 227, 701, 702, 703, 0, 228, 0, 229,
	0, 0, 724, 0, 230, 689, 0, 375, 0, 0,
	231, 232, 233, 234, 685, 687, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 704, 237, 705, 706, 707,
	708, 709, 0, 667, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 690,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 630, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 626, 0, 657, 686, 261, 710, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 680, 268, 269, 270, 271, 272, 273,
	0, 274, 681, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 711, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 634, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 674, 312,
	300, 301, 313, 735, 314, 712, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 713, 319, 320, 682,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 714, 715, 0, 0, 332, 333, 683,
	684, 655, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 675, 342, 0, 408, 343, 344, 345, 409,
	716, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 0, 0, 0, 0, 0, 0,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	0, 0, 0, 0, 0, 635, 0, 0, 0, 0,
	901, 638, 660, 649, 650, 647, 648, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 677, 642, 0,
	0, 0, 191, 192, 193, 353, 692, 355, 693, 194,
	694, 695, 0, 195, 359, 360, 196, 197, 645, 676,
	696, 697, 363, 0, 198, 688, 0, 668, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 211, 0, 669, 670,
	672, 0, 671, 673, 212, 213, 418, 214, 698, 215,
	699, 700, 629, 216, 0, 217, 0, 218, 0, 0,
	691, 220, 0, 221, 0, 0, 0, 633, 222, 224,
	223, 225, 678, 679, 656, 723, 0, 0, 0, 0,
	0, 226, 227, 701, 702, 703, 0, 228, 0, 229,
	0, 0, 724, 0, 230, 689, 0, 375, 0, 0,
	231, 232, 233, 234, 685, 687, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 704, 237, 705, 706, 707,
	708, 709, 0, 667, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 690,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 630, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 626, 0, 657, 686, 261, 710, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 680, 268, 269, 270, 271, 272, 273,
	0, 274, 681, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 711, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 634, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 674, 312,
	300, 301, 313, 735, 314, 712, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 713, 319, 320, 682,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 714, 715, 0, 0, 332, 333, 683,
	684, 655, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 675, 342, 0, 408, 343, 344, 345, 409,
	716, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 0, 0, 0, 0, 0, 0,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	0, 0, 0, 0, 0, 635, 0, 0, 0, 0,
	899, 638, 660, 649, 650, 647, 648, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 677, 642, 0,
	0, 0, 191, 192, 193, 353, 692, 355, 693, 194,
	694, 695, 0, 195, 359, 360, 196, 197, 645, 676,
	696, 697, 363, 0, 198, 688, 0, 668, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 211, 0, 669, 670,
	672, 0, 671, 673, 212, 213, 418, 214, 698, 215,
	699, 700, 629, 216, 0, 217, 0, 218, 0, 0,
	691, 220, 0, 221, 0, 0, 0, 633, 222, 224,
	223, 225, 678, 679, 656, 723, 0, 0, 0, 0,
	0, 226, 227, 701, 702, 703, 0, 228, 0, 229,
	0, 0, 724, 0, 230, 689, 0, 375, 0, 0,
	231, 232, 233, 234, 685, 687, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 704, 237, 705, 706, 707,
	708, 709, 0, 667, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 690,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 630, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 626, 0, 657, 686, 261, 710, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 680, 268, 269, 270, 271, 272, 273,
	0, 274, 681, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 711, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 634, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 674, 312,
	300, 301, 313, 735, 314, 712, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 713, 319, 320, 682,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 714, 715, 0, 0, 332, 333, 683,
	684, 655, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 675, 342, 0, 408, 343, 344, 345, 409,
	716, 0, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 627, 660, 649, 650, 647, 648, 639,
	0, 625, 0, 0, 0, 0, 623, 624, 0, 0,
	188, 189, 0, 0, 190, 635, 0, 0, 0, 677,
	642, 638, 0, 0, 191, 192, 193, 353, 692, 355,
	693, 194, 694, 695, 0, 195, 359, 360, 196, 197,
	645, 676, 696, 697, 363, 0, 198, 688, 0, 668,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	669, 670, 672, 0, 671, 673, 212, 213, 418, 214,
	698, 215, 699, 700, 629, 216, 0, 217, 0, 218,
	0, 0, 691, 220, 0, 221, 0, 0, 0, 633,
	222, 224, 223, 225, 678, 679, 656, 723, 0, 0,
	0, 0, 0, 226, 227, 701, 702, 703, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 689, 0, 375,
	0, 0, 231, 232, 233, 234, 685, 687, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 704, 237, 705,
	706, 707, 708, 709, 0, 667, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 690, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 630, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 626, 0, 657, 686, 261,
	710, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 680, 268, 269, 270, 271,
	272, 273, 0, 274, 681, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 711, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 634, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	674, 312, 300, 301, 313, 735, 314, 712, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 713, 319,
	320, 682, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 714, 715, 0, 0, 332,
	333, 683, 684, 655, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 675, 342, 0, 408, 343, 344,
	345, 409, 716, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 627, 660, 649, 650, 647,
	648, 639, 0, 625, 0, 0, 0, 0, 623, 624,
	0, 0, 188, 189, 0, 0, 190, 635, 0, 0,
	0, 677, 642, 638, 0, 0, 191, 192, 193, 353,
	692, 355, 693, 194, 694, 695, 0, 195, 359, 360,
	196, 197, 645, 676, 696, 697, 363, 0, 198, 688,
	0, 668, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	2581, 0, 669, 670, 672, 0, 671, 673, 212, 213,
	418, 214, 698, 215, 699, 700, 629, 216, 0, 217,
	0, 218, 0, 0, 691, 220, 0, 221, 0, 0,
	0, 633, 222, 224, 223, 225, 678, 679, 656, 723,
	0, 0, 0, 0, 0, 226, 227, 701, 702, 703,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 689,
	0, 375, 0, 0, 231, 232, 233, 234, 685, 687,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 704,
	237, 705, 706, 707, 708, 709, 0, 667, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 690, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 630, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 626, 0, 657,
	686, 261, 710, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 680, 268, 269,
	270, 271, 272, 273, 0, 274, 681, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 711, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 634, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 674, 312, 300, 301, 313, 735, 314, 712,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	713, 319, 320, 682, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 714, 715, 0,
	0, 332, 333, 683, 684, 655, 334, 335, 2580, 337,
	0, 0, 338, 339, 340, 341, 675, 342, 0, 408,
	343, 344, 345, 409, 716, 0, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 627, 660, 649,
	650, 647, 648, 639, 0, 625, 0, 0, 0, 0,
	623, 624, 0, 0, 188, 189, 0, 0, 190, 635,
	0, 0, 0, 677, 642, 638, 0, 0, 191, 192,
	193, 2579, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 645, 676, 696, 697, 363, 0,
	198, 688, 0, 668, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 2581, 0, 669, 670, 672, 0, 671, 673,
	212, 213, 418, 214, 698, 215, 699, 700, 629, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 633, 222, 224, 223, 225, 678, 679,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 689, 0, 375, 0, 0, 231, 232, 233, 234,
	685, 687, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 690, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 630, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 626,
	0, 657, 686, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 680,
	268, 269, 270, 271, 272, 273, 0, 274, 681, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	634, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 674, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 682, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 683, 684, 655, 334, 335,
	2580, 337, 0, 0, 338, 339, 340, 341, 675, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 627,
	660, 649, 650, 647, 648, 639, 0, 625, 0, 0,
	0, 0, 623, 624, 0, 0, 188, 189, 0, 0,
	190, 635, 0, 0, 0, 677, 642, 638, 0, 0,
	191, 192, 193, 353, 692, 355, 693, 194, 694, 695,
	0, 195, 359, 360, 196, 197, 645, 676, 696, 697,
	363, 0, 198, 688, 0, 668, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 669, 670, 672, 0,
	671, 673, 212, 213, 418, 214, 698, 215, 699, 700,
	0, 216, 0, 217, 0, 218, 0, 0, 691, 220,
	0, 221, 0, 0, 0, 633, 222, 224, 223, 225,
	678, 679, 656, 723, 0, 0, 0, 0, 0, 226,
	227, 701, 702, 703, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 689, 0, 375, 0, 0, 231, 232,
	233, 234, 685, 687, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 704, 237, 705, 706, 707, 708, 709,
	0, 667, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 690, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	796, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 0, 0, 657, 686, 261, 710, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 680, 268, 269, 270, 271, 272, 273, 0, 274,
	681, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	711, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 1598, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 674, 312, 300, 301,
	313, 735, 314, 712, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 713, 319, 320, 682, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 714, 715, 0, 0, 332, 333, 683, 684, 655,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	675, 342, 0, 408, 343, 344, 345, 409, 716, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 660, 649, 650, 647, 648, 639, 0, 0, 1596,
	0, 0, 0, 0, 1594, 1595, 0, 188, 189, 0,
	0, 190, 0, 1597, 0, 0, 677, 642, 0, 638,
	0, 191, 192, 193, 0, 692, 355, 693, 194, 694,
	695, 0, 195, 359, 360, 196, 197, 645, 676, 696,
	697, 363, 0, 198, 688, 0, 668, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 722, 209, 210, 2581, 0, 669, 670, 672,
	0, 671, 673, 212, 213, 418, 214, 698, 215, 699,
	700, 629, 216, 0, 217, 0, 218, 0, 0, 691,
	220, 0, 221, 0, 0, 0, 633, 222, 224, 223,
	225, 678, 679, 656, 723, 0, 0, 0, 0, 0,
	226, 227, 701, 702, 703, 0, 228, 0, 229, 0,
	0, 724, 0, 230, 689, 0, 375, 0, 0, 231,
	232, 233, 234, 685, 687, 0, 0, 378, 238, 0,
	235, 0, 725, 236, 704, 237, 705, 706, 707, 708,
	709, 0, 667, 0, 0, 239, 240, 241, 728, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 690, 729,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 630, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 657, 686, 261, 710, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 680, 268, 269, 270, 271, 272, 273, 0,
	274, 681, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 711, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 634, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 674, 312, 300,
	301, 313, 0, 314, 712, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 713, 319, 320, 682, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 714, 715, 0, 0, 332, 333, 683, 684,
	655, 334, 335, 2580, 337, 0, 0, 338, 339, 340,
	341, 675, 342, 0, 408, 343, 344, 345, 409, 716,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 660, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 623, 624, 0, 188, 189,
	0, 0, 190, 0, 635, 0, 0, 677, 0, 0,
	638, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 676,
	361, 362, 363, 0, 198, 688, 0, 668, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 722, 209, 210, 211, 0, 669, 670,
	672, 0, 671, 673, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 678, 679, 0, 723, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 724, 0, 230, 689, 0, 375, 0, 0,
	231, 232, 233, 234, 685, 687, 726, 0, 378, 238,
	0, 235, 0, 725, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 727, 239, 240, 241, 728,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 690,
	729, 247, 248, 730, 0, 249, 250, 0, 0, 251,
	0, 252, 796, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 0, 0, 0, 686, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 680, 268, 269, 270, 271, 272, 273,
	0, 274, 681, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 674, 312,
	300, 301, 313, 735, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 682,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 683,
	684, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 675, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 952, 0, 791, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 2195, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 795, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 722, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 723,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 724, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	726, 0, 378, 238, 0, 235, 0, 725, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 727,
	239, 240, 241, 728, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 729, 247, 248, 730, 0, 249,
	250, 0, 0, 251, 0, 252, 796, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 146, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 735, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 148, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 955, 410, 0, 0, 346, 611, 0,
	185, 140, 347, 348, 349, 350, 351, 0, 141, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 117,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 774, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	146, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	148, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 955, 410, 0,
	0, 346, 0, 0, 185, 140, 347, 348, 349, 350,
	351, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 768, 0, 1224, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 774, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 146, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 148, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 955, 410, 0, 0, 346, 611, 0, 185, 140,
	347, 348, 349, 350, 351, 0, 141, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 768, 0, 1224, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 146, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 148, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 955, 410, 0, 0, 346,
	1935, 0, 185, 140, 347, 348, 349, 350, 351, 0,
	141, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 117, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 774, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 767, 0, 185, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 768, 0, 773, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 774, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 0, 346, 0, 0,
	185, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 768, 0, 773,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 774, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	0, 346, 0, 0, 185, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 768, 0, 773, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 185,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 1262, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 185, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 1745, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 185, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 2111, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 660, 649,
	650, 647, 648, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	1227, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 692, 355, 693, 194, 694, 695, 0, 195,
	359, 360, 196, 197, 0, 0, 696, 697, 363, 0,
	198, 364, 0, 795, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 722,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 698, 215, 699, 700, 0, 216,
	0, 217, 0, 218, 0, 0, 691, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	656, 723, 0, 0, 0, 0, 0, 226, 227, 701,
	702, 703, 0, 228, 0, 229, 0, 0, 724, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 726, 0, 378, 238, 0, 235, 0, 725,
	236, 704, 237, 705, 706, 707, 708, 709, 0, 667,
	0, 727, 239, 240, 241, 728, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 729, 247, 248, 730,
	0, 249, 250, 0, 0, 251, 0, 252, 796, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 0,
	0, 657, 390, 261, 710, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 732, 267, 733, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 711, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 734, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 735,
	314, 712, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 713, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 714,
	715, 0, 0, 332, 333, 406, 407, 655, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 716, 0, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 1008,
	0, 791, 790, 0, 0, 0, 788, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 795, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 722, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 723, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 724, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 726, 0, 378, 238, 0,
	235, 0, 725, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 727, 239, 240, 241, 728, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 729,
	247, 248, 730, 0, 249, 250, 0, 0, 251, 0,
	252, 796, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 735, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 947, 0, 791, 790, 0, 0, 0, 788,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 795,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 722, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 723, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 724, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 946, 377, 726, 0,
	378, 238, 0, 235, 0, 725, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 727, 239, 240,
	241, 728, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 729, 247, 248, 730, 0, 249, 250, 0,
	0, 251, 0, 252, 796, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 735, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 913, 0, 791, 790, 0,
	0, 0, 788, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 795, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 722, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	723, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 724, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 912,
	377, 726, 0, 378, 238, 0, 235, 0, 725, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	727, 239, 240, 241, 728, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 729, 247, 248, 730, 0,
	249, 250, 0, 0, 251, 0, 252, 796, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 735, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 784, 0,
	791, 790, 0, 0, 0, 788, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 795, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 722, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 723, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	724, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 786, 377, 726, 0, 378, 238, 0, 235,
	0, 725, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 727, 239, 240, 241, 728, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 729, 247,
	248, 730, 0, 249, 250, 0, 0, 251, 0, 252,
	796, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 735, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	501, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 181, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 180, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 178, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 184, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 181, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 180, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 791, 790, 346, 0, 0, 788, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	184, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 795, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 722, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 723, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 724, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 726, 0, 378,
	238, 0, 235, 0, 725, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 727, 239, 240, 241,
	728, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 729, 247, 248, 730, 0, 249, 250, 0, 0,
	251, 0, 252, 796, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 735, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 181, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 180, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 791, 790, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 184, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 795, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 722, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 723, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 724, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 726, 0, 378, 238, 0,
	235, 0, 725, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 727, 239, 240, 241, 728, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 729,
	247, 248, 730, 0, 249, 250, 0, 0, 251, 0,
	252, 796, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 735, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	185, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 791,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 184, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 795, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	722, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 723, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 724,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 726, 0, 378, 238, 0, 235, 0,
	725, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 727, 239, 240, 241, 728, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 729, 247, 248,
	730, 0, 249, 250, 0, 0, 251, 0, 252, 796,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	735, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 185, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 1675,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 1673, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 1721, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 1678, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 1719, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 1677, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 1720, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 1675, 198,
	364, 0, 0, 1670, 199, 200, 201, 0, 203, 204,
	205, 202, 1673, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 1678, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 1669,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 1677, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 1676, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 929, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 774, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 780,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 782, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 774, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 776, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 778, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 774, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 430, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 429, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 428, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 1658, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 2264, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 2264, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 2261, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 774, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 1420, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 1418, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 1400, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 527, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 987, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 529, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 524, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 1277, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	1276, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 527, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	987, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 529, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	524, 404, 405, 0, 0, 332, 988, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	527, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 518, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 529, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 971, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 524, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 944, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 943, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 940, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 939, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 937, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	936, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 933, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 932, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 921, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 919,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 918, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 915, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 908, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 910, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 799, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 801,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 797, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 527,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 518, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 517, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 529, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 519, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 520, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 524, 404, 405, 0, 0, 332, 522, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 509, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 510, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 507, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 499, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 449, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 185, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 1982,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 185, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 1980, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 1969, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 510,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	1287, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	0, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 751, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 0, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 0,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 0, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 0, 0, 0, 0, 1096, 0, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1122,
	0, 0, 0, 1876, 1877, 0, 1894, 1895, 1896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 1078, 1079, 1100, 1108, 1109, 1110,
	1118, 1119, 1120, 1097, 0, 0, 0, 1096, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 1122, 0, 0, 0, 0, 0, 1891, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 1100, 0,
	0, 1103, 1104, 1105, 1106, 1097, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1882, 0, 0, 0, 0, 0, 0, 0, 1121,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	1897, 0, 1115, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 1121, 0, 0, 0, 1892, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 1893, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 1078,
	1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 1116,
	0, 0, 1096, 0, 0, 1095, 1111, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 1122, 1114, 0, 0,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 1080, 0, 0,
	0, 0, 0, 1100, 1916, 0, 0, 0, 0, 0,
	1097, 1888, 1889, 1890, 0, 0, 0, 0, 1887, 1885,
	1886, 1878, 1879, 1880, 1881, 1883, 1884, 0, 0, 1114,
	0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 1868, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 0, 0, 0, 0, 1096, 0, 1115, 1123, 1111,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 1113, 0, 1100, 0, 0, 0,
	0, 1101, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	1086, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	1115, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 1121,
	1095, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120,
	0, 0, 0, 0, 1096, 0, 0, 1113, 1111, 0,
	0, 0, 0, 0, 1101, 1081, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	1112, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 1097, 0, 1114, 0, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 0, 1107, 0, 2550, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 1105, 1106, 0, 0, 0, 1116, 0, 1086,
	0, 0, 0, 1095, 1078, 1079, 0, 1108, 1109, 1110,
	1118, 1119, 1120, 0, 0, 0, 0, 1096, 0, 1115,
	1123, 1111, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 1113, 0, 1100, 0,
	0, 0, 0, 1101, 0, 1097, 0, 1114, 0, 0,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 0, 1112,
	2500, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 1086, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 1115, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 0,
	0, 1121, 1095, 1078, 1079, 0, 1108, 1109, 1110, 1118,
	1119, 1120, 0, 0, 0, 0, 1096, 0, 0, 1113,
	1111, 0, 0, 0, 0, 0, 1101, 1081, 0, 0,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 1112, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 1097, 0, 1114, 0, 0, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 0, 1107, 0, 2454,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 1104, 1105, 1106, 0, 0, 0, 1116,
	0, 1086, 0, 0, 0, 1095, 1078, 1079, 0, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096,
	0, 1115, 1123, 1111, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 1113, 0,
	1100, 0, 0, 0, 0, 1101, 0, 1097, 0, 1114,
	0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0,
	0, 1112, 2424, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 1086, 0, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 1115, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 0, 1121, 1095, 1078, 1079, 0, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096, 0,
	0, 1113, 1111, 0, 0, 0, 0, 0, 1101, 1081,
	0, 0, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 1112, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 0, 0, 1097, 0, 1114, 0,
	0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 1107,
	0, 2419, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1104, 1105, 1106, 0, 0,
	0, 1116, 0, 1086, 0, 0, 0, 1095, 1078, 1079,
	0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0,
	0, 1096, 0, 1115, 1123, 1111, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1122, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	1113, 0, 1100, 0, 0, 0, 0, 1101, 0, 1097,
	0, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 0, 0, 1112, 2415, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 1104, 1105,
	1106, 0, 0, 0, 0, 0, 1086, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 1115, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 1121, 1095, 1078, 1079, 0,
	1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0,
	1096, 0, 0, 1113, 1111, 0, 0, 0, 0, 0,
	1101, 1081, 0, 0, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 1112, 0, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1097, 0,
	1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	0, 1107, 0, 2345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 1104, 1105, 1106,
	0, 0, 0, 1116, 0, 1086, 0, 0, 0, 1095,
	1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0,
	0, 0, 0, 1096, 0, 1115, 1123, 1111, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1080, 0,
	0, 0, 1113, 0, 1100, 0, 0, 0, 0, 1101,
	0, 1097, 0, 1114, 0, 0, 1092, 1093, 1099, 1098,
	1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085,
	1087, 1088, 0, 0, 0, 1112, 2311, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 1086, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 1115, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 1121, 1095, 1078,
	1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0,
	0, 0, 1096, 0, 0, 1113, 1111, 0, 0, 0,
	0, 0, 1101, 1081, 0, 0, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1112, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 0, 0, 1107, 0, 2310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 1116, 0, 1086, 0, 0,
	0, 1095, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 0, 0, 0, 0, 1096, 0, 1115, 1123, 1111,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1122,
	0, 0, 0, 0, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1080, 0, 0, 0, 1113, 0, 1100, 0, 0, 0,
	0, 1101, 0, 1097, 0, 1114, 0, 0, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 0, 0, 0, 1112, 2275, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	1086, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	1115, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 1121,
	1095, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120,
	0, 0, 0, 0, 1096, 0, 0, 1113, 1111, 0,
	0, 0, 0, 0, 1101, 1081, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	1112, 0, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 1097, 0, 1114, 0, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 0, 1107, 0, 2114, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 1105, 1106, 0, 0, 0, 1116, 0, 1086,
	0, 0, 0, 1095, 1078, 1079, 0, 1108, 1109, 1110,
	1118, 1119, 1120, 0, 0, 0, 0, 1096, 0, 1115,
	1123, 1111, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 1113, 0, 1100, 0,
	0, 0, 0, 1101, 0, 1097, 0, 1114, 0, 0,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 0, 1112,
	2090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 1086, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 1115, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 0,
	0, 1121, 1095, 1078, 1079, 0, 1108, 1109, 1110, 1118,
	1119, 1120, 0, 0, 0, 0, 1096, 0, 0, 1113,
	1111, 0, 0, 0, 0, 0, 1101, 1081, 0, 0,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 1112, 0, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 1097, 0, 1114, 0, 0, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 0, 1107, 0, 1536,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 1104, 1105, 1106, 0, 0, 0, 1116,
	0, 1086, 2613, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 1114,
	0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0,
	1838, 1112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2612, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	1079, 1102, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0,
	0, 0, 1096, 0, 0, 0, 1111, 0, 1116, 0,
	0, 0, 0, 1081, 1095, 0, 1122, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1114, 0,
	0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 0, 0, 1086, 0, 1908,
	0, 0, 1907, 0, 0, 0, 0, 0, 1078, 1079,
	0, 1108, 1109, 1110, 1118, 1119, 1120, 1115, 1123, 0,
	0, 1096, 0, 0, 0, 1111, 0, 0, 0, 0,
	1811, 0, 1081, 0, 0, 1122, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 1080, 0, 0, 0,
	0, 1101, 1100, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 1812, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 1104, 1105,
	1106, 0, 1107, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 1115, 1123, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	1101, 0, 1634, 0, 0, 0, 0, 0, 1078, 1079,
	0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0,
	0, 1096, 0, 0, 0, 1111, 1112, 0, 0, 1633,
	0, 0, 1081, 0, 1114, 1122, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 0, 0, 1080, 0, 0, 0,
	0, 1107, 1100, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 0, 1078, 1079, 1095,
	1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0,
	1096, 0, 0, 0, 1111, 0, 0, 1103, 1104, 1105,
	1106, 1081, 0, 0, 1122, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 1115, 1123, 0, 0,
	0, 1100, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 1114, 0, 1121, 1092, 1093, 1099, 1098,
	1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085,
	1087, 1088, 0, 1113, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1103, 1104, 1105, 1106,
	0, 0, 0, 0, 0, 1086, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 1116, 0, 0, 0, 1078, 1079, 1095,
	1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0,
	1096, 0, 0, 0, 1111, 1112, 0, 0, 0, 0,
	0, 1081, 0, 0, 1122, 2379, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	1107, 1100, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 1114, 0, 1102, 1092, 1093, 1099, 1098,
	1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085,
	1087, 1088, 1116, 0, 0, 0, 1078, 1079, 1095, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096,
	0, 0, 0, 1111, 0, 0, 1103, 1104, 1105, 1106,
	1081, 0, 0, 1122, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 1115, 1123, 0, 0, 0,
	1100, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 1114, 0, 1121, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 0, 1113, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 1104, 1105, 1106, 0,
	0, 0, 0, 0, 1086, 1112, 608, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1107, 0, 0, 1121, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 1116, 0, 0, 0, 1078, 1079, 1095, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096,
	0, 0, 0, 1111, 1112, 0, 0, 0, 0, 0,
	1081, 0, 0, 1122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 1107,
	1100, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 1114, 0, 1102, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 1116, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1103, 1104, 1105, 1106, 2094,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 1914,
	0, 0, 0, 0, 0, 1078, 1079, 0, 1108, 1109,
	1110, 1118, 1119, 1120, 1115, 1123, 0, 0, 1096, 0,
	0, 0, 1111, 0, 0, 0, 1909, 0, 0, 1081,
	0, 1114, 1122, 1121, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 1113, 0, 1080, 0, 0, 0, 0, 1101, 1100,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1104, 1105, 1106, 0, 1107,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 1123, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 1078, 1079, 0, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096, 0,
	0, 0, 1111, 1112, 0, 0, 0, 0, 0, 1081,
	0, 1114, 1122, 0, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 0, 0, 1080, 0, 0, 0, 0, 1107, 1100,
	0, 0, 0, 0, 0, 0, 1097, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1103, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 1079, 0, 1108, 1109, 1110,
	1118, 1119, 1120, 1115, 1123, 0, 0, 1096, 0, 0,
	0, 1111, 0, 0, 0, 1867, 0, 0, 1081, 0,
	1114, 1122, 1121, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	1113, 0, 1080, 0, 0, 0, 0, 1101, 1100, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 1107, 0,
	0, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 1123, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 1078, 1079, 0, 1108, 1109, 1110,
	1118, 1119, 1120, 0, 0, 0, 0, 1096, 0, 0,
	0, 1111, 1112, 0, 0, 0, 0, 0, 1081, 0,
	1114, 1122, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	0, 0, 1080, 0, 0, 0, 0, 1107, 1100, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 0, 1078, 1079, 1095, 1108, 1109, 1110, 1118,
	1119, 1120, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 1103, 1104, 1105, 1106, 1081, 0, 0,
	1122, 0, 1086, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1080, 1115, 1123, 0, 0, 0, 1100, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 1114,
	0, 1121, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 1113,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 1104, 1105, 1106, 0, 0, 0, 0,
	0, 1086, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 1102, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 1116, 0,
	0, 0, 0, 0, 1095, 1340, 1329, 1359, 1318, 1350,
	1349, 0, 0, 1320, 1319, 0, 0, 0, 0, 1361,
	1360, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1355, 0, 1347,
	1346, 0, 0, 0, 0, 0, 0, 0, 1114, 1345,
	0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 0,
	0, 0, 1344, 1342, 1343, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1328, 0, 0,
	0, 0, 0, 0, 1333, 1331, 1334, 1335, 1336, 1337,
	1338, 0, 1358, 0, 0, 0, 0, 0, 0, 1322,
	1321, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1332, 1324, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1348, 0, 0,
	0, 1330, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1340, 1329,
	1359, 1318, 1350, 1349, 0, 0, 1320, 1319, 0, 0,
	0, 1341, 1361, 1360, 0, 1461, 1459, 1460, 1463, 1462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1325, 548, 0, 574, 0, 0, 0,
	1355, 0, 1347, 1346, 1339, 1326, 0, 0, 0, 0,
	0, 0, 1345, 0, 553, 1363, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 551, 1323, 0,
	0, 0, 1356, 1357, 0, 1344, 1342, 1343, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 0,
	0, 0, 0, 554, 1327, 0, 0, 0, 0, 1362,
	1328, 560, 561, 0, 0, 0, 570, 1333, 1331, 1334,
	1335, 1336, 1337, 1338, 0, 1358, 0, 0, 0, 0,
	575, 555, 1322, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 573, 0, 0, 0, 0, 1324, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 1330, 0, 0, 0, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 557, 558, 0, 0, 0, 0,
	0, 0, 0, 0, 1341, 0, 0, 0, 0, 0,
	0, 0, 564, 0, 0, 0, 0, 559, 566, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 0, 0, 0, 0, 0, 1325, 0, 0, 0,
	0, 576, 0, 0, 0, 0, 0, 1339, 1326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1363, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 0, 0, 0, 1356, 1357, 0, 0, 0,
	0, 0, 562, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 1362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	550, 567, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 568, 0, 0,
	0, 572, 0, 0, 0, 0, 578, 0, 0, 0,
	0, 565, 569, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 571,
}
var sqlPact = [...]int{

	213, -1000, -9, -1000, -1000, -1000, 168, -1000, -1000, -1000,
	-1000, 167, 164, 158, -1000, 156, 153, 152, 151, 150,
	149, 147, 146, 145, 144, 143, -1000, 142, -1000, -1000,
	-1000, -1000, 136, 134, 130, -1000, 128, 1371, 22650, 126,
	122, 1280, -1000, 35604, 116, -1000, 1051, 26391, 1016, 1563,
	-1000, 112, 1026, 35265, 3694, 2720, 1134, 1661, 34923, 22308,
	1656, 1469, 34581, -1000, -1000, 34239, 106, 104, 100, 99,
	94, -1000, -1000, 33897, 92, 87, 86, 85, 84, 83,
	82, 78, 71, 69, 62, 61, 60, 58, -1000, 57,
	56, 54, -1000, 43002, 53, 52, 50, 1117, 48, 40,
	38, 36, -1000, -1000, 902, 34, 33, 32, 31, 30,
	113, 29, 27, 26, 25, -1000, 1309, 457, 2521, 8776,
	1061, 1057, 1056, 1036, 1080, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	37638, 35604, 23, -16, 22, -1000, 2027, 637, 18482, 213,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26049, 25707, 21966, 33555, 33213, 6227, 786, -1000, -12,
	24006, 35604, -1000, 46, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14308, 13928, 553, 46, -1000, -1000,
	-1000, 32871, 21613, 32529, 1546, 32187, -1000, -1000, 31845, -1000,
	-1000, 1893, 1677, 1666, 25365, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 31506, 31164, 30822, 30480, 21260, 496, -1000,
	-1000, -1000, 16762, -1000, -1000, -1000, -1000, 20, -1000, 19,
	18, -1000, 17, 16, 15, 14, 13, 12, -1000, 10,
	9, -1000, 6, 5, -1000, -6, -7, 1002, 1227, 1060,
	30138, 882, 1278, -1000, -1000, -11, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35604, -1000, 14660, -1000, 493, -1000,
	1644, -1000, 14660, -1000, 1272, -1000, -1000, -1000, -1000, -1000,
	35604, -1000, -1000, -1000, -1000, -1000, -1000, 2259, 1212, 492,
	29796, -1000, 1434, -1000, 615, 772, -1000, -1000, -1000, 9480,
	176, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2298, 20907, 1238, 2061, 1866, 2257, 1482, 1861, 1834, 1832,
	1811, 1810, 2256, 959, 2255, 1868, 1032, 2253, 1754, 1251,
	689, 2252, 1640, 1637, -1000, -1000, -1000, -1000, 919, -1000,
	-1000, -1000, 27747, -1000, -1000, -1000, -1000, -1000, -1000, 808,
	889, -1000, -1000, -1000, -1000, -1000, 1309, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1475, 2009, 2009, 2009, 2105, 297,
	289, -1000, 113, -1000, 2396, -1000, 1168, -1000, -1000, -1000,
	42384, -1000, -1000, 14660, 14660, 14660, 14660, 14660, 1159, -1000,
	-1000, 522, -1000, 491, 490, 7326, -1000, -1000, 2237, -1000,
	-1000, -1000, 299, -1000, -1000, 14660, 46, -1000, -1000, -1000,
	-1000, 488, 2245, -1000, 667, -1000, -1000, -1000, 620, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1668, 484,
	483, 482, -1000, 481, -1000, -1000, 480, 478, 476, 475,
	473, 470, 469, 468, 466, 464, 463, 461, 459, 458,
	455, 1044, -1000, 645, -1000, -1000, 645, 645, -1000, 442,
	442, 443, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	442, -1000, -1000, -1000, 568, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 454, 1410, -1000, -1000,
	1410, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 785, 36960,
	-29, 35604, -1000, 453, -29, -1000, -1000, 452, -1000, 9832,
	9832, -1000, -1000, -1000, 14660, -1000, 2291, -1000, 2741, -219,
	333, 557, -1000, 17450, 20203, -1000, -1000, 1114, 1887, 694,
	-1000, 991, 1883, 529, -1000, 633, 1881, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1108, -1000,
	1235, 1880, -203, 1698, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	22989, 24006, -12, -14, -1000, -1000, -1000, 5876, 42384, -1000,
	42384, -1000, 862, 19170, 46, -1000, -1000, -1000, -1000, 450,
	1383, 628, 1382, -1000, 313, -1000, 29454, 628, 1381, -1000,
	-1000, -1000, 27747, -1000, 35604, -1000, 35604, -1000, 900, -1000,
	37299, 118, 1879, -1000, -1000, 118, 1872, -1000, 117, 1860,
	-1000, -1000, 1154, 1857, -1000, -158, 1836, -1000, -1000, -1000,
	14660, -15, -1000, -1000, -1000, 637, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 29112, 23328, 1506, 599, 42384, 2147, 42920, 22989, 42384,
	23328, -1000, -1000, 35604, -1000, 14660, -1000, 2146, 1433, -35,
	-1000, -1000, -1000, -1000, -1000, 1428, 1420, 724, 880, 9480,
	9480, 1964, -1000, 172, 6227, -1000, -1000, -1000, -1000, 28770,
	-1000, -1000, -1000, 1189, 35604, -1000, -1000, 1665, -1000, 23328,
	35604, -1000, 35604, -1000, 35604, -1000, 35604, -1000, 35604, -1000,
	-1000, -1000, -1000, -1000, 4050, -1000, 1660, -1000, -1000, 35604,
	-1000, 1415, -1000, -1000, -1000, 28431, 28089, -1000, 923, 806,
	-1000, -1000, 119, -1000, 35604, 2026, 613, -1000, 1475, 1364,
	1653, 685, 1252, 1500, 13548, 1493, 14660, 113, -1000, -1000,
	113, 113, 8396, -1000, -1000, -1000, 35604, -1000, 42727, 42920,
	6227, 794, 14660, 14660, 14660, 14660, 14660, 14660, 14660, 14660,
	14660, 14660, 14660, 14660, 14660, 14660, 14660, 14660, 14660, 14660,
	14660, 14660, 14660, 14660, 14660, 14660, 14660, 14660, 14660, 14660,
	14660, 14660, 14660, 14660, 1442, 14660, 775, 14660, 14660, 14660,
	14660, 1425, 1127, 363, 1155, -1000, 2192, 2192, 2192, 4776,
	4776, 405, 522, -1000, 14660, -1000, 127, 14660, 289, 40331,
	-17, 6960, -1000, -1000, -1000, 13196, 643, 42384, 46, 6580,
	-1000, 2236, 928, 1663, 1583, 446, 564, 561, 556, 551,
	14660, 14660, 12844, 12464, 12084, 15716, 11704, 14660, 7692, 14660,
	14660, 14660, 14660, 11324, 10944, -1000, 445, -1000, -1000, -1000,
	-1000, 2235, -1000, -1000, 2232, -1000, 793, 791, 2231, -1000,
	-35, -1000, 36960, -1000, 35604, -29, 2145, 35604, 14660, 45,
	-1000, 41188, -1000, 45, -20, 42384, 1484, 1483, 18826, 1426,
	1170, 1170, 1170, -1000, 444, 507, 557, 5163, 10564, -1000,
	26730, 1183, 193, 278, 17106, 2291, -1000, 35604, -99, 1010,
	-1000, 25023, 2002, 1997, 1992, 27747, 2125, 127, 1696, 1636,
	-1000, 6227, 768, 27747, 1110, 22989, 2018, 767, 2122, 127,
	1692, 1628, 761, 35604, 6227, 2017, 569, -1000, 35604, -1000,
	-1000, -1000, 1625, -23, -1000, -1000, 24684, 2144, 1777, -1000,
	1079, -1000, 1774, 2143, 35604, 1261, 1378, -1000, -1000, 802,
	1768, 638, 456, 2136, 456, 19515, -1000, 35604, -1000, 35604,
	-1000, -1000, 35604, -1000, 35604, -1000, 35604, 35604, -1000, 35604,
	22989, 22989, -28, 533, 24345, 757, -1000, 671, 24684, 3093,
	-36, -1000, 860, -1000, -1000, -1000, -1000, 261, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 443, 1044, 442, 442, 442, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 568, -1000, -1000, 645,
	645, 645, -1000, -1000, -67, 1620, 601, -42, 704, -35,
	-1000, 1410, -1000, 1203, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2243, -1000, 2206,
	-1000, -1000, 2230, -43, -1000, -43, -1000, 6227, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 35604, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 231, -1000, -1000, -1000, -1000, -1000,
	-1000, 35604, 35604, 35604, -1000, 27747, 631, 1654, -1000, 2029,
	1364, 1653, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42384, -1000, 408, -1000, -1000, 42384, 1025, 1523, -1000, 1523,
	-52, -1000, 40998, 1473, 35604, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 612, 784, 784, 814,
	814, 814, 814, 2160, 311, 350, 2739, 3283, 3283, 3283,
	3283, 3283, 3283, 3283, 3283, 293, 2811, 2811, 293, 293,
	293, 293, 293, 3283, 3283, 3283, 4776, 3997, 260, 14660,
	14660, 755, 1113, 363, 260, 14660, 260, 260, 260, 260,
	-1000, 1259, -1000, -1000, -1000, -1000, 1618, 432, 15716, 15716,
	-1000, -1000, -1000, 7326, 14660, -1000, -1000, -1000, -1000, 431,
	14660, -1000, 40454, -225, 277, -181, -1000, 14660, 505, -62,
	-1000, 891, -1000, 14660, -1000, -26, 14660, 14660, 14660, 276,
	-1000, 275, -1000, 750, -1000, 749, 744, 743, -1000, 425,
	1165, 424, 423, 14660, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 42194, 38374, 274, -1000, 1616, -181, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 273, -1000, 271, -1000, 42065,
	-181, 270, 4550, -1000, 15716, 15716, 15716, 7326, 422, 269,
	-1000, 40869, -1000, 41875, 10184, 10184, 10184, 264, 41746, 14660,
	-181, 38322, 4745, 4366, -47, -50, -1000, -65, -1000, 2229,
	-71, 259, 611, 609, 256, -1000, -1000, 419, -72, -80,
	638, 9832, 18138, 6227, -1000, 638, -1000, 14660, 18826, 18826,
	1333, 1460, 18826, -1000, -1000, -1000, -1000, 26730, 486, 557,
	26730, -1000, 2224, 1467, 246, -1000, -1000, -1000, 35604, 412,
	-1000, 557, 244, 1147, 35604, 35604, 35604, -1000, -1000, 1374,
	36621, 1368, 42920, 35604, -1000, 411, 410, 1470, 1464, 35604,
	35604, 36282, 35943, 35604, 1030, 127, -1000, 2014, 409, -1000,
	35604, 987, 22989, 629, 606, 35604, 127, -1000, 2010, 407,
	6227, 970, -1000, 589, 1566, 1315, -1000, 854, 1614, 35604,
	243, -81, -53, 42920, -1000, -1000, -1000, -1000, -1000, 35604,
	467, 35604, 127, 35604, 22989, 22989, 127, 35604, 1765, 1904,
	542, 35604, 1500, 14660, 1059, -1000, 17794, 656, 35604, 931,
	37, -1000, -1000, -1000, 555, 35604, -1000, -1000, 118, 118,
	-1000, 117, 1154, -1000, -158, -1000, -1000, -1000, 35604, 22989,
	-87, -1000, 677, 675, 674, -1000, 42920, -1000, 519, 681,
	-1000, 2223, 622, 35604, 9480, 9480, -1000, 1488, -1000, -1000,
	949, -1000, 1035, -1000, -1000, -1000, -1000, 9480, -1000, -100,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1216, 1215, -1000,
	-1000, -1000, 1025, -1000, 14660, 2219, -1000, -1000, -1000, 8396,
	-1000, -1000, -1000, 35604, -212, 14660, 260, 260, 14660, 15716,
	15716, -1000, 260, -1000, -1000, -1000, -1000, -1000, 1609, 406,
	14660, 42920, 4158, 3721, -89, 293, 14660, -82, -1000, 14660,
	-1000, 40172, -1000, -1000, 518, 1900, -1000, 14660, 41556, 239,
	9128, -1000, 41467, -33, -33, -1000, 2242, 1373, 1334, 1021,
	915, 2213, -1000, 19859, 641, 1188, 40049, 42727, 42920, -1000,
	14660, -1000, -1000, 1603, 14660, -1000, 42727, 42920, 15716, 15716,
	15716, 15716, 15716, 15716, 15716, 15716, 15716, 15716, 15716, 15716,
	15716, 15716, 15716, 15716, 15716, 15716, 15716, 1424, 15716, 2182,
	2182, 2182, -83, 14660, -1000, 1652, 1603, 14660, 14660, 42920,
	238, 234, 233, -1000, 14660, -181, 14660, 14660, 14660, -1000,
	-1000, -1000, 232, -1000, 2198, -1000, -1000, -1000, -1000, 3093,
	-1000, -1000, 1576, -1000, -90, -1000, 2291, -1000, 1576, 42384,
	-1000, 1333, -1000, 404, 14660, 18826, -1000, 503, -1000, -94,
	-1000, 26730, -1000, 502, -222, -1000, 554, -1000, 557, 403,
	35604, 26730, -1000, -1000, -1000, 739, 735, 1763, -1000, 1363,
	-1000, 660, -1000, 984, 14660, 16418, 402, 395, 1120, -1000,
	1733, 1154, 1730, 1154, -1000, -99, 972, -1000, 584, 14660,
	-1000, 733, -1000, 1058, 20554, -1000, -1000, 579, 14660, -1000,
	726, 20554, 622, 1602, 815, -1000, 853, -1000, 1549, -1000,
	24684, 393, 35604, 388, -1000, 387, -1000, 628, -1000, 385,
	35604, 1444, 542, 23667, -1000, 628, 931, -1000, 42384, -1000,
	931, 8044, 1995, -104, -1000, -1000, -1000, 638, 19515, 18826,
	14660, -106, -1000, -1000, -1000, -1000, -100, 1974, 1974, -1000,
	2193, -1000, 499, 228, -1000, 27408, -100, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 35604, 1250, 6227, 35604, 35604, 35604,
	1218, 39890, -1000, 1988, 6227, 2151, 260, 3493, 728, 14660,
	42920, 42473, -113, 14660, 14660, -1000, 227, 14660, 487, 42384,
	-1000, -1000, -1000, 42384, 14660, 2184, 14660, 220, 216, 214,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 210, -1000,
	-1000, 37977, 14660, 208, -1000, 207, 206, 42384, 1652, 42384,
	-1000, -1000, 630, 630, 890, 890, 890, 890, 2182, 1486,
	758, 1186, 327, 327, 327, 1141, 1130, 1130, 327, 327,
	327, 1596, 1439, 382, 38353, 14660, 200, -1000, -1000, 42384,
	42384, 199, -1000, -1000, -1000, -181, 586, 39767, 39608, -1000,
	198, 195, 1572, 2084, -1000, 18826, 1572, -1000, 35604, 42384,
	-1000, -219, -1000, 2191, -1000, -1000, 1467, -1000, 5524, 26730,
	35604, -114, -1000, 35604, 35604, 35604, 1719, -1000, 2645, -1000,
	39485, -119, -1000, 325, 2053, 14660, -1000, -1000, 377, 16418,
	35604, -1000, 1455, 1480, 697, 35604, -1000, 35604, -1000, 35604,
	35604, 35604, 20554, -120, 35604, 22989, -1000, 374, 46, 20554,
	-122, 6227, -1000, -1000, 22989, 790, -1000, 1121, 1559, -1000,
	16418, 371, 35604, 24684, 2134, -1000, 16418, 1245, 1416, 542,
	23667, -1000, 802, -1000, -1000, -109, -1000, 355, 127, 931,
	-1000, -131, 42384, 549, 1954, -1000, 1948, 351, -1000, -1000,
	-141, 369, -1000, 548, 547, -1000, -149, -1000, 560, -1000,
	-1000, -1000, 1129, 1129, -1000, -1000, -1000, 1988, 14660, 14660,
	42473, -125, -1000, 260, 260, -1000, 39326, -1000, 42384, -1000,
	41467, -1000, -1000, -1000, -1000, 1143, -1000, 39203, -1000, -1000,
	-1000, -1000, 15716, 1590, 368, 42920, 39044, -1000, -1000, 14660,
	-1000, -1000, -1000, -1000, 635, 14660, 14660, 2291, 635, -128,
	557, -1000, -1000, -1000, 2188, -1000, -136, -1000, -1000, -1000,
	-1000, 35604, -1000, 35604, -1000, 6227, 35604, 1592, 1330, -1000,
	-1000, 1452, 367, 15716, 35604, -1000, 1096, 16418, 1988, 46,
	6227, 1988, 38921, 6580, -138, -139, 1328, -1000, 1325, 14660,
	-1000, 42920, 1154, 1154, -1000, 725, 720, -1000, 719, -1000,
	-1000, 14660, -1000, 718, -1000, -158, 20554, -1000, -1000, 2078,
	1132, -144, 16418, -146, 189, 127, -147, 35604, -1000, 542,
	23667, -1000, 1904, 1914, 35604, 1989, -1000, -1000, 363, 360,
	359, -1000, 27069, 27069, 22989, 22989, 1250, -1000, 35604, -1000,
	-1000, -1000, 260, 260, -1000, -1000, 187, 1188, 2077, -1000,
	4582, 15716, 42920, -153, -1000, 38762, -1000, 35604, 42384, -181,
	-1000, -1000, 26730, 326, -1000, -1000, 1790, -1000, -1000, 35604,
	1358, -1000, -1000, 14660, 38353, 352, 1549, 349, -1000, -1000,
	-1000, -1000, -1000, -1000, 2053, -26, -1000, 979, -1000, -1000,
	42384, 2046, -1000, -1000, 35604, 35604, 348, -33, 347, -1000,
	1065, 35604, 1096, -155, -1000, 1549, -1000, 1096, 340, 23667,
	-1000, 1444, 812, -156, 35604, -1000, 22989, 22989, -1000, -162,
	-1000, -1000, -1000, -163, -1000, 952, 14660, 4582, -164, -1000,
	-1000, -165, -1000, 2129, -1000, -1000, -1000, -1000, 1702, 38639,
	1399, 35604, -1000, 35604, 1988, 182, 35604, 670, 6227, -1000,
	-1000, 14660, 181, 14660, 338, 335, 334, 1549, 1096, -1000,
	1549, 16418, -1000, 1416, 895, -1000, 638, -1000, -169, -170,
	-1000, -1000, 178, 15364, 15364, -181, -1000, 35604, 324, 1685,
	-1000, 1229, 1145, 120, -175, -1000, -1000, 313, -1000, 14660,
	-1000, -176, 2184, -182, 35604, 35604, 35604, -1000, 1549, -1000,
	-183, -1000, 19515, -1000, 622, 622, -1000, -1000, -1000, 16067,
	1281, 924, 40613, -1000, -1000, -1000, 35604, -1000, 1237, 1233,
	920, -1000, -1000, -1000, -1000, -1000, 1399, 42384, -1000, -1000,
	-184, -190, -191, -1000, 1096, -185, -1000, -1000, 2155, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1935, -1000, 682, 1283,
	1283, 1229, 312, 310, 1140, 1549, -1000, 15012, -1000, 2168,
	-1000, -1000, 1457, -1000, -1000, 1129, 1129, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -193, -1000, 653, -199, -1000,
	650, -1000, 1129, 1557, -1000, 1129, 558, -1000, 308, -1000,
	14660, 14660, 41277, -213, -1000, 1121, -1000,
}
var sqlPgo = [...]int{

	0, 2717, 2715, 1731, 2713, 2120, 2712, 2708, 2707, 2706,
	2113, 2705, 2704, 2699, 2698, 2697, 2696, 2695, 2689, 2688,
	2687, 2685, 2684, 2683, 2678, 2677, 2675, 2673, 2106, 2671,
	2102, 2667, 2662, 2658, 2656, 2650, 28, 2649, 2647, 2645,
	2054, 2644, 2642, 2638, 2637, 2047, 2636, 2022, 2635, 2632,
	2018, 2626, 2624, 2623, 2003, 2622, 1978, 2618, 72, 107,
	1974, 2617, 2615, 1948, 1940, 1896, 2611, 1851, 2610, 2607,
	1821, 1818, 2605, 78, 2602, 2599, 2598, 1806, 1792, 2597,
	2593, 2586, 148, 2582, 1788, 2580, 2579, 2576, 2574, 2571,
	2570, 2569, 2560, 2559, 2557, 2556, 2553, 2551, 2550, 2547,
	2546, 2544, 2542, 2540, 158, 2539, 2538, 1744, 1740, 2535,
	2533, 27, 25, 13, 56, 92, 136, 2905, 134, 2532,
	2530, 2529, 2528, 2527, 2526, 26, 101, 93, 2524, 126,
	2521, 2520, 42, 43, 19, 18, 61, 88, 2518, 2515,
	2235, 30, 2513, 2510, 130, 2509, 49, 22, 2467, 157,
	153, 45, 118, 2505, 2504, 2503, 53, 116, 3, 2,
	2502, 16, 50, 1, 2498, 4, 2496, 2495, 2493, 17,
	73, 38, 2492, 29, 127, 2482, 2478, 139, 2475, 40,
	89, 1610, 96, 119, 97, 110, 2471, 67, 11, 58,
	2463, 2455, 156, 31, 69, 152, 109, 2454, 47, 159,
	128, 65, 125, 140, 2445, 2444, 2441, 112, 2439, 114,
	94, 2423, 2419, 77, 2415, 98, 137, 2401, 151, 106,
	2396, 2394, 86, 2392, 120, 2390, 2387, 155, 145, 111,
	8, 105, 71, 21, 1619, 1615, 124, 90, 55, 46,
	2385, 815, 1182, 252, 99, 2383, 84, 64, 32, 52,
	87, 146, 35, 2380, 2374, 133, 2373, 2372, 2371, 2370,
	2369, 100, 2368, 2364, 2363, 68, 41, 117, 75, 34,
	184, 129, 108, 150, 102, 2361, 82, 123, 2358, 95,
	2357, 2356, 1846, 115, 2355, 2349, 2346, 1733, 1713, 1420,
	286, 2344, 2343, 1268, 1111, 2342, 2339, 83, 2338, 113,
	104, 85, 143, 138, 132, 2335, 122, 36, 2333, 37,
	20, 0, 1147, 539, 2331, 121, 62, 2330, 2326, 2325,
	2322, 24, 7, 6, 9, 12, 10, 76, 51, 2318,
	2317, 131, 80, 57, 2314, 154, 2306, 2305, 2303, 33,
	2293, 14, 2292, 15, 2290, 2284, 23, 5, 2281, 2278,
	144, 2275, 91, 2273, 2125, 2272, 147, 2271, 2268, 2034,
	2267, 70, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 127, 127, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	124, 124, 129, 129, 129, 131, 131, 128, 128, 123,
	123, 28, 28, 71, 71, 114, 64, 64, 64, 309,
	309, 310, 310, 110, 110, 111, 111, 111, 111, 112,
	112, 113, 113, 113, 38, 38, 38, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 47, 47, 48, 48, 48, 48, 48, 48, 49,
	49, 49, 49, 50, 50, 50, 50, 50, 50, 50,
	50, 55, 55, 55, 53, 53, 53, 52, 52, 52,
	51, 51, 51, 54, 54, 54, 183, 183, 182, 182,
	186, 186, 56, 56, 56, 56, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 59, 59,
	59, 59, 59, 59, 59, 278, 278, 277, 57, 57,
	253, 253, 60, 60, 208, 208, 61, 61, 61, 61,
	61, 62, 62, 72, 72, 350, 350, 350, 354, 354,
	355, 355, 356, 356, 356, 356, 356, 356, 356, 352,
	352, 67, 67, 67, 67, 68, 68, 68, 69, 69,
	109, 109, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 33, 34, 34, 35, 35, 36, 36, 36, 78,
	78, 78, 80, 77, 77, 77, 79, 79, 79, 79,
	81, 81, 82, 82, 82, 82, 82, 83, 83, 303,
	301, 301, 302, 302, 154, 154, 154, 154, 154, 155,
	155, 155, 308, 308, 308, 308, 308, 308, 307, 307,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 96, 96, 96,
	104, 104, 104, 104, 104, 104, 104, 85, 85, 90,
	90, 90, 90, 90, 86, 86, 91, 91, 92, 92,
	93, 93, 93, 93, 93, 93, 87, 87, 87, 87,
	95, 95, 95, 95, 94, 94, 100, 100, 100, 100,
	100, 100, 97, 97, 97, 97, 98, 98, 98, 101,
	101, 101, 101, 88, 88, 89, 89, 102, 102, 103,
	103, 103, 103, 103, 103, 99, 99, 99, 351, 351,
	353, 353, 65, 65, 43, 43, 44, 44, 156, 156,
	157, 157, 232, 232, 232, 232, 158, 158, 130, 130,
	130, 161, 162, 162, 159, 159, 160, 160, 164, 164,
	163, 166, 166, 165, 231, 319, 319, 320, 320, 320,
	320, 320, 320, 321, 321, 321, 321, 321, 321, 321,
	317, 317, 318, 315, 315, 316, 316, 316, 316, 357,
	357, 230, 230, 169, 169, 322, 322, 322, 322, 323,
	323, 323, 323, 323, 326, 325, 324, 324, 324, 324,
	324, 264, 264, 264, 106, 106, 45, 45, 45, 136,
	136, 46, 46, 42, 42, 42, 212, 212, 173, 173,
	269, 269, 269, 147, 147, 125, 125, 125, 19, 21,
	21, 15, 15, 15, 15, 15, 15, 27, 27, 24,
	24, 213, 213, 214, 214, 66, 66, 70, 70, 75,
	75, 105, 105, 105, 105, 105, 105, 29, 29, 29,
	29, 37, 37, 37, 37, 74, 74, 359, 359, 143,
	143, 143, 143, 144, 144, 227, 227, 228, 228, 360,
	360, 229, 229, 229, 138, 137, 139, 139, 41, 41,
	41, 132, 132, 133, 133, 134, 134, 135, 135, 361,
	361, 63, 63, 63, 108, 108, 150, 150, 224, 224,
	224, 226, 226, 225, 225, 225, 198, 198, 198, 107,
	107, 178, 178, 188, 188, 189, 189, 275, 190, 73,
	73, 117, 117, 115, 115, 115, 115, 115, 115, 115,
	115, 116, 116, 116, 118, 118, 118, 118, 118, 118,
	118, 121, 121, 121, 122, 122, 122, 120, 120, 332,
	332, 332, 335, 335, 331, 333, 333, 334, 334, 358,
	358, 199, 199, 199, 168, 167, 167, 171, 171, 170,
	172, 172, 268, 268, 268, 196, 196, 195, 195, 195,
	195, 217, 217, 215, 215, 216, 216, 220, 220, 221,
	221, 221, 222, 222, 223, 223, 194, 194, 249, 249,
	219, 219, 218, 119, 119, 119, 177, 177, 177, 179,
	179, 239, 239, 239, 240, 240, 238, 238, 238, 238,
	270, 270, 270, 270, 270, 270, 270, 270, 348, 348,
	348, 349, 349, 267, 267, 271, 271, 271, 271, 271,
	271, 265, 265, 265, 265, 266, 266, 276, 276, 202,
	202, 202, 202, 200, 200, 201, 201, 272, 272, 272,
	272, 197, 197, 273, 273, 273, 233, 233, 279, 279,
	279, 297, 297, 176, 176, 176, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 281, 281, 281,
	281, 283, 283, 283, 282, 282, 282, 282, 282, 282,
	282, 282, 282, 282, 282, 282, 282, 282, 282, 282,
	282, 282, 296, 296, 296, 296, 296, 284, 284, 291,
	291, 292, 292, 293, 294, 285, 285, 286, 286, 287,
	288, 295, 295, 295, 295, 299, 299, 289, 289, 289,
	289, 289, 290, 209, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 210, 210, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 242, 242, 242, 242, 242, 242, 242,
	242, 242, 242, 243, 243, 243, 243, 245, 245, 245,
	245, 245, 245, 245, 245, 245, 245, 245, 327, 327,
	327, 327, 327, 327, 327, 327, 329, 329, 330, 330,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	336, 336, 337, 337, 339, 339, 340, 340, 341, 342,
	342, 342, 343, 344, 344, 338, 338, 345, 345, 345,
	346, 346, 347, 347, 347, 347, 347, 255, 255, 256,
	257, 263, 263, 263, 153, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	145, 145, 145, 145, 145, 185, 185, 184, 184, 252,
	252, 250, 250, 254, 254, 203, 203, 298, 298, 298,
	298, 298, 298, 298, 204, 204, 204, 211, 205, 205,
	206, 206, 206, 206, 206, 246, 247, 207, 207, 207,
	248, 248, 258, 262, 262, 261, 260, 260, 259, 259,
	236, 236, 237, 237, 235, 234, 193, 193, 192, 192,
	191, 191, 362, 362, 187, 187, 274, 274, 274, 274,
	180, 180, 152, 152, 181, 181, 148, 148, 151, 151,
	149, 149, 149, 149, 174, 174, 175, 175, 146, 146,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
	244, 300, 300, 300, 251, 140, 140, 140, 141, 141,
	142, 142, 305, 305, 305, 306, 306, 306, 306, 304,
	304, 304, 304, 304, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314, 314, 314, 314, 314, 314,
	314, 314, 314, 314, 314,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 7, 3, 2, 2, 2, 2, 2, 2, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 4, 6, 3, 4, 6, 3, 4, 6, 3,
	4, 6, 3, 3, 5, 3, 1, 3, 1, 2,
	2, 3, 2, 2, 5, 3, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 1, 4, 7, 1, 3, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 8, 8, 4, 5, 5, 5, 5, 2, 0,
	2, 0, 3, 2, 8, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 2, 1, 0, 1, 0, 9, 9, 1, 3,
	7, 1, 3, 5, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 2, 4, 7, 3, 3,
	0, 6, 3, 11, 14, 4, 1, 0, 1, 3,
	3, 3, 5, 2, 0, 1, 1, 0, 6, 6,
	8, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 1,
	1, 3, 3, 1, 2, 4, 4, 2, 3, 5,
	5, 2, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 8, 8, 2, 4, 4, 4, 2, 2, 2,
	2, 3, 1, 3, 6, 1, 0, 1, 0, 1,
	0, 1, 1, 0, 1, 1, 0, 1, 0, 3,
	1, 3, 2, 4, 5, 1, 0, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	1, 0, 2, 4, 2, 5, 3, 2, 0, 1,
	3, 3, 5, 1, 1, 3, 2, 4, 4, 0,
	8, 4, 6, 3, 3, 1, 5, 5, 0, 2,
	3, 1, 3, 2, 0, 3, 4, 5, 4, 5,
	4, 5, 2, 4, 1, 1, 0, 5, 0, 2,
	2, 2, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 0, 2, 5,
	2, 1, 1, 2, 3, 0, 1, 1, 1, 1,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 3, 4, 3, 4, 3,
	4, 5, 6, 6, 7, 6, 7, 6, 7, 3,
	4, 4, 1, 1, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	1, 1, 3, 3, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 5, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 3, 2, 1, 1,
	1, 3, 1, 3, 1, 3, 1, 2, 3, 1,
	1, 1, 2, 2, 1, 3, 3, 0, 1, 2,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -28, -30, -33, -38,
	-39, -61, -47, -48, -49, -60, -56, -62, -63, -64,
	-65, -57, -71, -70, -72, -75, -73, -66, -67, -76,
	-84, -105, -106, -107, -108, -5, -10, 24, 35, -31,
	-32, 48, -34, 72, -45, -40, 74, 95, -334, 99,
	-50, -54, 103, 110, 113, 135, 144, 230, 237, 258,
	260, 262, 269, -115, -117, 256, -68, -69, -77, -78,
	-79, -80, -109, 281, -85, -86, -87, -88, -89, -90,
	-91, -92, -93, -94, -95, -96, -97, -98, -99, -100,
	-101, -102, -103, 284, -29, -37, -74, 324, -6, -7,
	-8, -9, -11, -21, 112, -41, -42, -43, -44, -46,
	-332, -51, -52, -53, -55, -118, -116, 377, 257, 333,
	36, 294, 62, 106, 264, -13, -14, -17, -16, -18,
	-15, -23, -25, -22, -24, -26, -27, -19, -20, -12,
	349, 356, -121, -119, -120, -122, 274, 341, 304, 381,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	2, 304, 344, 334, 88, 152, 242, -350, 2, -181,
	304, 88, -149, -140, 370, 4, -311, -313, 20, 21,
	24, 34, 35, 36, 41, 45, 48, 49, 56, 61,
	62, 63, 68, 65, 66, 67, 70, 72, 73, 76,
	77, 78, 86, 87, 89, 91, 95, 97, 99, 102,
	103, 105, 110, 112, 111, 113, 123, 124, 129, 131,
	136, 142, 143, 144, 145, 153, 156, 158, 151, 168,
	169, 170, 174, 175, 176, 179, 178, 183, 184, 187,
	188, 191, 193, 195, 196, 199, 197, 201, 202, 204,
	203, 209, 211, 212, 214, 217, 220, 223, 226, 227,
	228, 229, 230, 231, 233, 235, 237, 239, 240, 241,
	242, 243, 245, 246, 248, 249, 250, 251, 252, 256,
	254, 255, 257, 258, 259, 260, 262, 264, 265, 267,
	282, 283, 295, 269, 270, 271, 272, 273, 277, 275,
	278, 279, 281, 284, 286, 289, 293, 294, 296, 299,
	300, 297, 292, 303, 305, 306, 307, 308, 309, 310,
	311, 312, 319, 320, 324, 325, 326, 327, 330, 331,
	332, 333, 335, 338, 339, 340, 345, 350, 351, 352,
	353, 354, 29, 37, 38, 39, 40, 42, 43, 46,
	47, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 146, 147, 150, 157,
	159, 160, 161, 162, 163, 165, 172, 173, 181, 198,
	208, 210, 221, 225, 234, 236, 244, 266, 276, 287,
	288, 298, 301, 314, 315, 316, 321, 322, 337, 341,
	342, 380, 380, 2, 169, 241, -148, -140, 88, 380,
	2, 304, 334, 344, -212, 88, 329, -140, 237, 22,
	2, 97, 156, 332, 331, 22, 233, 275, 306, 308,
	2, 380, 2, 344, 304, 152, 88, 334, -140, 2,
	-59, 2, 377, -58, -5, -40, -50, -60, -56, -10,
	-28, -30, -45, -47, -54, -64, -63, -65, -67, -71,
	-70, -73, -77, -78, -84, -107, -108, 74, 24, 103,
	281, 112, -354, 2, 22, -355, -356, 74, 103, 135,
	274, 156, 97, 331, 304, 2, 169, 2, -140, 2,
	-350, 2, 169, 2, -354, 2, -140, 2, -144, 2,
	269, -140, 380, 380, 380, 380, 380, 188, 56, 266,
	278, -82, 320, -81, 314, -303, -83, 2, -182, 199,
	-140, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 2, -104,
	278, 35, 56, 22, 61, 89, 136, 152, 153, 175,
	69, 70, 240, 188, 170, 319, 176, 279, 305, 320,
	74, 335, 309, 111, 4, 88, 199, 280, 314, 380,
	380, 380, -358, 2, 304, 380, 380, 380, 380, 271,
	284, 380, 380, 380, 380, 380, -116, -118, -117, 380,
	380, 380, 380, -170, -171, 328, 164, 108, 219, -115,
	-117, 2, -332, -104, 278, 2, 56, 22, -301, 2,
	-241, 215, -243, 368, 369, 363, 205, 355, -255, 94,
	194, -245, -258, 109, 266, 377, -148, -244, 383, 9,
	-329, -117, 30, -256, -257, 50, -140, 7, 8, 5,
	6, -146, -281, -251, -290, 323, 116, 207, -327, -328,
	4, -311, -305, -282, -292, -286, -289, 165, 59, 80,
	81, 84, 82, 85, 280, 334, 51, 29, 114, 115,
	225, 234, 301, 321, 322, 146, 208, 147, 57, 137,
	181, 102, 38, 40, 42, 43, 52, 53, 90, 92,
	93, 125, 126, 127, 157, 159, 160, 161, 162, 163,
	210, 244, 287, 298, 315, 316, 342, -312, -293, -294,
	-287, -288, 75, 117, 134, 155, 148, 167, 171, 182,
	185, 200, 222, 224, 263, 285, -295, -359, 2, 320,
	320, 2, -359, 2, -359, 2, -143, 2, 320, 317,
	-335, 245, -331, -140, -335, 380, 380, 382, 380, -167,
	-168, 2, 22, 100, 377, 2, -270, 2, 375, -272,
	-148, -117, -271, 377, 216, -3, 2, -272, 146, -148,
	2, -272, 146, -148, 2, -309, 146, -307, 9, -306,
	5, 4, -311, -313, -312, 59, 194, 2, -140, 2,
	-151, 146, -148, -304, 4, -311, -313, -312, -314, 22,
	25, 26, 27, 28, 30, 31, 32, 33, 44, 50,
	51, 55, 58, 60, 69, 74, 79, 80, 82, 81,
	83, 84, 85, 94, 96, 98, 100, 101, 104, 106,
	108, 116, 118, 130, 132, 133, 135, 138, 140, 149,
	152, 154, 164, 166, 177, 180, 186, 189, 190, 205,
	206, 207, 213, 215, 216, 218, 219, 232, 238, 247,
	261, 274, 280, 290, 302, 304, 313, 317, 318, 323,
	328, 329, 334, 336, 343, 344, 346, 347, 348, 349,
	317, 382, -181, -174, -140, -235, -234, 379, -241, 2,
	-241, 2, 133, 377, -192, -193, -234, -235, 2, -182,
	146, -309, 146, 2, -182, 2, 152, -140, 146, 2,
	-140, 22, 133, 2, 166, 2, 166, 2, -273, 2,
	-272, -183, 146, 2, -182, -183, 146, 2, -152, 146,
	2, -151, -140, 146, 2, -310, 146, 2, -309, -208,
	377, -278, 2, -277, -306, 341, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 278, 215, 382, -182, -241, -253, 377, 133, -241,
	215, -140, 2, 282, 2, 377, -82, 54, 320, -228,
	2, -229, -137, -138, -139, 168, 239, 243, 354, 317,
	360, 133, -301, -186, 379, -104, 2, -309, 2, 282,
	2, 240, 279, 56, 133, 2, 2, -351, 2, 215,
	133, 2, 133, 2, 133, 2, 133, 2, 133, 2,
	2, 240, 279, 2, 130, 2, 319, 2, 2, 133,
	2, 168, 239, 295, 2, 304, 344, 2, 133, 133,
	354, 2, -197, -272, 304, 354, 22, -170, -171, -218,
	-195, 130, -215, -216, 186, 118, 213, -199, 22, 100,
	-199, -199, 45, 378, 378, -104, 282, 2, 10, 11,
	58, 34, 368, 369, 370, 371, 128, 372, 373, 366,
	367, 365, 358, 359, 362, 291, 23, 71, 361, 360,
	64, 192, 268, 119, 120, 121, 122, 253, 13, 14,
	15, 27, 218, 185, 355, 148, 285, 363, 16, 17,
	18, 167, 37, 149, -145, -153, -241, -241, -241, -241,
	-241, 224, -191, -236, 375, -117, 377, 377, -117, -241,
	-184, 377, 7, -117, -250, 375, -259, -241, -192, 377,
	5, 377, 5, -336, 350, 130, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 236, -299, 345, -299, -299,
	-283, 377, -283, -284, 377, -283, 351, 356, 377, -227,
	-228, -227, 317, -144, 382, -335, -175, 377, 377, -187,
	-274, -241, 370, -187, -184, -241, 75, -202, 171, 200,
	134, 182, 263, 155, 7, -59, -238, 383, 377, 370,
	-267, 356, -117, -271, 377, -270, -148, 377, -127, 254,
	-126, 21, 24, 103, 339, 109, 292, 310, -162, 270,
	-161, 228, 254, 109, 349, 109, 112, 254, 292, 310,
	-162, 270, 254, 109, 383, 112, -309, -149, 382, -304,
	370, 296, 378, -180, -148, -193, 377, -169, 205, -136,
	-333, 349, 205, -169, 377, -141, 146, 2, -140, -333,
	205, -273, -150, -148, -150, 281, -140, 31, -129, 382,
	49, 259, 109, -129, 109, -129, 382, 109, -129, 109,
	382, 109, -184, 378, 382, -350, -356, 74, 377, 31,
	-252, -279, -280, -282, -291, -285, -289, -290, 41, 47,
	46, 173, 172, 311, 198, 276, 288, 337, 150, 39,
	214, 158, 4, 157, 159, 160, 161, 162, 163, 287,
	38, 244, 126, 127, 125, 102, 93, 92, 210, 43,
	42, -293, -294, -287, -288, 90, 315, 316, 165, 40,
	53, 52, 342, 298, -310, -350, -303, -184, 31, -228,
	2, -360, 382, 184, -155, 191, 204, 142, 216, 352,
	-308, 5, 4, -251, -264, 94, 188, -290, 8, 369,
	-300, 7, 368, -302, -301, -302, 78, 379, -304, -182,
	22, 283, 2, -303, -353, 130, -350, -303, -303, -303,
	-303, -303, 278, -59, 130, -140, 184, -303, 2, -303,
	2, 304, 152, 304, -129, 382, -148, 65, 66, 354,
	-218, -195, -196, -195, -219, -218, 331, -216, -215, -220,
	-241, 22, -223, 124, 201, -241, -243, -116, -116, -116,
	-172, -268, -241, 238, 152, -303, -297, -279, -296, 249,
	250, 248, 252, 251, -279, -304, 314, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, 185,
	148, 285, 37, 149, -241, 317, -241, -241, -241, -241,
	197, 205, 207, 323, 116, 330, 100, 211, -362, 302,
	33, -248, -117, 377, -263, 28, 290, 22, -255, 266,
	377, -236, -241, -237, -185, -184, 378, 382, -185, -254,
	-250, -262, -261, 346, 378, -184, 343, 22, 100, 370,
	2, 7, -209, 353, 196, 91, 143, 195, -210, 273,
	-337, 123, 138, 377, 378, 2, 378, 2, 378, 2,
	378, 2, -241, -241, -203, 2, -298, -184, 4, 353,
	196, 91, 143, 195, 273, -203, 2, -204, 2, -241,
	-184, -205, -242, -243, 368, 369, 363, 377, 266, -206,
	2, -241, -185, -241, 44, 180, 318, -207, -241, 133,
	-184, -241, -241, -241, -184, -184, 2, -184, 2, 377,
	7, 7, 314, 314, 7, -144, -331, 31, -174, -184,
	-177, 382, 133, 31, 4, -177, 378, 382, 171, 171,
	-270, -202, 171, -200, 222, -200, -200, -348, 377, 376,
	-267, -304, 375, 384, -185, 2, -266, -265, 31, -140,
	220, 378, -148, 382, 317, -213, 69, 60, -231, 146,
	60, -315, -140, 69, -316, 55, 329, 238, 132, -213,
	69, -213, 69, 69, -272, 34, -73, 112, 133, -304,
	317, -272, 229, -309, 67, 317, 34, -73, 112, 133,
	317, -151, -304, 67, -276, 357, -140, 133, 378, 382,
	-156, -174, -157, -140, -232, -231, -317, -318, -315, 152,
	329, 117, 31, 109, 229, 109, 31, 215, 205, -132,
	307, 109, -233, 347, -224, -73, 377, 94, 31, -224,
	-188, -189, -275, -190, -148, 377, -140, -182, -183, -183,
	-151, -152, -140, -309, -310, 378, -59, -277, 317, 336,
	-157, -58, 24, 74, 103, 378, 382, -176, 30, 375,
	-209, 377, -276, 133, 360, 317, 378, 320, -229, -154,
	243, 289, 255, 277, 8, 7, 7, 382, -304, -352,
	-140, 278, -59, -148, -151, -148, -272, 349, 130, 66,
	-196, -219, -221, -300, 377, 369, -222, 266, 267, 382,
	-125, 32, 98, 174, -148, 354, -241, -241, 317, -362,
	302, -248, -241, 197, 207, 323, 116, 330, 100, 211,
	133, 377, -242, -242, -184, -241, 377, -184, 376, 386,
	378, -241, 376, 376, 382, -260, -261, 104, -241, -171,
	382, -170, -241, -184, -184, 378, 378, 317, 317, 317,
	317, 377, -342, 223, 377, 377, -241, 31, 382, 378,
	133, 378, 378, -211, 232, 378, 10, 11, 368, 369,
	370, 371, 128, 372, 373, 366, 367, 365, 358, 359,
	360, 64, 192, 268, 13, 14, 15, 167, 149, -242,
	-242, -242, -184, 377, 378, -246, -247, 133, 130, 31,
	-207, -207, -207, 378, 133, -184, 382, 382, 382, 378,
	378, 378, 7, 378, 382, 378, 354, 354, 378, 377,
	378, 378, -233, -274, -179, 2, -270, -304, -233, -241,
	-270, -270, -201, 336, 215, 171, -270, -265, 378, -349,
	7, -267, -266, 7, -240, -239, 131, 203, 378, -140,
	377, -267, 378, -126, -148, -140, -140, 205, -231, 146,
	-131, 205, -279, -140, 377, 377, 174, 174, -140, -140,
	146, -140, 146, -140, -140, -127, 254, -73, 67, 377,
	-148, 254, -309, 349, 354, -140, -73, 67, 377, -304,
	254, 354, -110, 145, 211, 296, 133, -148, 378, 378,
	382, -141, 152, -141, -73, -182, -309, -309, -73, -148,
	109, -133, 105, -361, 360, -140, -217, -215, -241, -198,
	-226, 261, 215, -180, 341, -140, -198, -178, 382, 133,
	360, -180, -129, -129, -129, -129, -352, -309, 378, -279,
	375, 376, 7, 7, -113, 349, -352, -301, -301, -137,
	327, 63, 243, -301, 382, 217, 242, 88, 304, 152,
	-222, -241, -268, -148, 383, -241, -241, -242, -242, 133,
	377, -241, -252, 27, 27, 378, -185, 382, -237, -241,
	378, -250, 106, -241, 313, 378, 343, -171, -171, -171,
	5, 196, 143, 195, -210, 195, -210, -210, 7, -343,
	-140, 377, 347, -170, 378, -297, -279, -241, -246, -241,
	-297, -279, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, -242, -242, -242, -242, -242, -242, -242, -242, -242,
	-242, 100, 205, 211, -242, 382, -185, -247, -246, -241,
	-241, -279, 378, 378, 378, -184, -241, -241, -241, 378,
	7, -58, -194, 138, -276, 382, -194, -201, 377, -241,
	-270, 376, 378, 382, -266, 376, 382, 385, 360, -267,
	377, -174, -265, 317, 317, 109, 205, 338, -319, -316,
	-241, -173, -269, -140, -330, 377, -327, -328, -146, 377,
	377, -124, 103, 281, -214, 109, -129, 109, -129, 317,
	-213, 69, 354, -184, 317, 229, -244, -146, -140, 354,
	-184, 317, -244, -113, 133, 303, 296, -158, 151, -232,
	377, -141, 377, 377, -169, -136, 377, -140, -134, 179,
	-361, -307, -333, -198, -198, -187, 206, 68, 378, -233,
	-189, -179, -241, 378, -114, 76, -114, 7, 376, 378,
	-112, 217, -111, -140, 5, -140, -35, -36, 152, 231,
	-304, -140, -148, -151, 216, 378, -125, -304, 27, 27,
	-241, -252, 378, -241, -241, 378, -241, 376, -241, 5,
	-241, 378, 378, 378, 378, -344, -140, -241, 378, 378,
	378, -247, 133, 100, 211, 377, -241, 378, 378, 382,
	378, 378, 378, 378, -249, 140, 45, -270, -249, -174,
	-238, 7, -239, -304, 375, -266, -174, 378, -140, -140,
	-231, 109, -320, 69, -321, 58, 117, 74, 205, 207,
	329, 238, 55, 94, 247, 378, 378, 382, -147, -192,
	58, -147, -241, 377, -173, -174, 205, 94, 205, 94,
	87, 325, -140, -140, -148, -140, -140, -244, 378, -148,
	-309, 377, -244, 378, -304, -310, 314, -159, -160, 228,
	149, -173, 377, -174, -156, 31, -173, 215, -135, 178,
	-361, -307, -132, -225, 377, 215, -73, -198, 360, 87,
	87, 376, 382, 377, 360, 360, 382, 22, 377, -162,
	-162, -125, -241, -241, 378, 378, -171, -338, 228, 378,
	-242, 133, 377, -252, 378, -241, -339, 348, -241, -184,
	-339, 378, -267, 7, 378, -231, -140, -304, -140, 117,
	146, 207, 174, 377, -242, -148, -230, -357, 73, 300,
	-269, -125, -304, -125, 378, -184, 378, 378, 207, 207,
	-241, -279, -129, -129, 317, 317, 317, -184, 317, -244,
	45, 226, 378, -173, 378, 378, -73, 378, -148, -361,
	-307, -133, 101, -174, 69, -248, 377, 377, -111, -112,
	-309, -309, -36, -174, 378, -171, 45, -242, -252, 378,
	378, -340, -341, -140, -266, 376, -321, -141, 205, -241,
	-142, 377, -158, 377, -147, -171, 247, -128, 58, -140,
	-140, 377, -171, 377, 187, 242, -148, -230, 378, -158,
	-230, 377, -307, -134, 331, 206, 378, -140, -310, -310,
	378, 378, -345, 242, 267, -184, 378, 382, 31, 109,
	378, -322, 193, -140, -174, -125, 378, -148, -123, 336,
	-304, -184, 378, -184, 377, 377, 377, -158, -230, -158,
	-173, -135, 281, -233, 378, 378, 378, -346, -347, 37,
	326, 78, -241, -346, -341, -343, 117, -323, -326, -325,
	215, 134, 227, 286, 378, 378, -169, -241, 378, 378,
	-174, -174, -174, -158, 378, -188, -113, -113, -347, 235,
	129, 266, 235, 129, -140, -325, 215, -326, 215, 331,
	97, -322, 378, 378, 378, -230, -233, 27, -324, 202,
	259, 49, 281, -324, -323, 377, 377, -130, 49, 259,
	-158, -347, 20, 207, 94, -164, -163, -161, -166, -165,
	-161, 378, 382, 341, 378, 382, 341, -163, 149, -165,
	358, 377, -241, -184, -159, 378, -159,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 321, 0, 166, 168, -2, 0, 0, 0,
	189, 190, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 689, -2, 0, 301, 303, 312, 314,
	316, 318, 319, 0, 370, 372, 374, 376, 378, 380,
	382, 384, 386, 388, 390, 392, 394, 396, 398, 399,
	401, 403, 405, 0, 611, 613, 615, -2, 59, 61,
	63, 65, 67, 77, 0, 170, 172, 174, 176, 179,
	727, 193, 195, 197, 199, -2, 738, 0, 0, 0,
	-2, 0, -2, -2, -2, 68, 69, 70, 71, 72,
	73, 83, 84, 85, 86, 87, 75, 79, 80, 82,
	0, 0, 704, 706, 708, 710, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 43, 49, 51, 53, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 132, 285,
	0, 1310, 1234, 1240, 1241, 1265, 1266, 1267, 1284, 1285,
	1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295,
	1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
	1306, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506,
	1507, 158, 160, 161, 0, 0, 0, 1236, 1310, 167,
	169, 0, 0, 0, 0, 0, 576, 276, 1373, 278,
	280, 0, 0, 0, 0, 183, 184, 185, 186, 187,
	188, 191, 192, 0, 0, 0, 0, 0, 275, 273,
	222, 223, 0, 258, 259, 260, 261, 262, 264, 226,
	228, 230, 231, 233, 235, 237, 239, 241, 243, 244,
	246, 248, 249, 251, 253, 254, 256, 577, 0, 0,
	0, 0, 0, 282, 288, 289, 290, 292, 293, 294,
	295, 296, 297, 298, 0, 138, 0, 483, 271, 269,
	0, 134, 0, 608, 0, 284, 609, 610, 605, 606,
	1400, 634, 302, 304, 313, 315, 317, -2, -2, 1494,
	-2, 334, -2, 342, 1500, 0, 345, 346, 349, -2,
	218, 371, 373, 375, 377, 379, 381, 383, 385, 387,
	389, 391, 393, 395, 397, 400, 402, 404, 406, 407,
	0, 0, 0, 411, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 410, 412, 413, 414, 0, 612,
	614, 616, 0, 565, 729, 60, 62, 64, 66, 0,
	0, 171, 173, 175, 177, 180, -2, 702, 703, 194,
	196, 198, 200, -2, 0, 733, 733, 733, 0, 0,
	703, 701, 0, 305, 0, 307, 0, 411, 310, 311,
	350, 351, 939, 0, 0, 0, 0, 0, 0, 1012,
	-2, 1043, 1045, 1465, 1494, 0, 1047, 1048, 0, 1050,
	1052, 1053, 0, 1056, 1057, 1209, 1236, 1250, 1251, 1252,
	1253, 0, 0, 1256, 0, 1258, 1259, 1260, 1111, 1067,
	-2, -2, 1248, 867, 868, 869, 870, -2, 1508, 1071,
	1074, 1077, 1080, 1081, 1084, 1085, 0, 1449, 1466, 1467,
	1490, 1491, 1499, 1503, 1504, 1473, 1487, 1474, 1461, 1471,
	1485, 1316, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1274, 901, 902,
	907, 908, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516,
	1517, 1519, 1520, 1521, 1522, 1523, 910, 636, 618, 627,
	636, 620, 621, 622, 623, 624, 625, 626, 629, 0,
	719, 1379, 722, 1247, 720, 705, 707, 0, 709, 0,
	0, 713, 735, 734, 0, 774, 717, 718, 728, 789,
	827, 804, 795, 0, 0, 2, 74, 0, 1473, -2,
	76, 0, 1473, 827, 78, 0, 1473, 139, 140, 368,
	369, 1275, 1276, 1277, 1278, 1508, 1518, 81, 0, 88,
	503, 1473, 1239, 0, 1279, 1280, 1281, 1282, 1283, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584,
	1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	0, 0, 286, 287, 1244, 1242, 1243, 0, 162, 163,
	164, 165, 0, 0, 1237, 1218, 1216, 1217, 178, 544,
	1473, -2, 1473, 568, 544, 572, -2, 726, 1473, 650,
	277, 279, 0, 182, 0, 663, 0, 665, 0, 680,
	833, 124, 1473, 203, 216, 124, 1473, 206, 124, 1473,
	209, 1232, 124, 1473, 212, 213, 1473, 215, 141, 272,
	0, 0, -2, 265, 267, -2, 263, 227, 229, 232,
	234, 236, 238, 240, 242, 245, 247, 250, 252, 255,
	257, -2, 0, 0, 0, 482, 0, 0, 0, 607,
	0, 633, 320, 0, 331, 0, 333, 1460, -2, -2,
	337, 637, 641, 642, 643, 0, 0, 0, 0, 0,
	0, 0, 347, 219, 0, 408, 409, 417, 418, 0,
	421, 442, 454, 0, 0, 425, 427, 481, 429, 0,
	0, 431, 0, 433, 0, 435, 0, 437, 0, 439,
	441, 443, 455, 445, 728, 447, 0, 449, 453, 0,
	458, 0, 460, 461, 462, 0, 0, 468, 0, 0,
	415, 416, 124, 831, 0, 0, 0, -2, 0, 746,
	771, 0, 749, 750, 0, 0, 0, 0, 731, 732,
	0, 0, 0, 691, 692, 306, 0, 309, 0, 0,
	0, 0, 1144, 1145, 1146, 1147, 1148, 1149, 1152, 1153,
	1150, 1151, 1154, 1155, 0, 0, 0, 0, 0, 1156,
	0, 0, 0, 0, 0, 0, 0, 0, 1157, 1158,
	1159, 0, 0, 1161, 0, 1163, 0, 0, 0, 0,
	0, 0, 1223, 0, 0, 1160, 944, 945, 946, 978,
	979, 0, 1044, 1220, 1213, 1046, 0, 1166, -2, 1167,
	0, 0, 1049, 1054, 1055, 1166, 0, 1208, -2, 0,
	1255, 0, 936, 1113, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1189, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 886, 904, 915, 912, 911,
	888, 0, 887, 885, 0, 889, 0, 0, 0, 617,
	-2, 619, 0, 631, 0, 721, 0, 0, 0, 778,
	1224, 1228, 1229, 778, 0, 1167, 0, 0, 0, 0,
	824, 824, 824, 822, 798, 0, 804, 0, -2, 828,
	816, 0, -2, 795, 0, 0, 829, 0, 89, 602,
	103, 0, 602, 602, 0, 0, 0, 0, 0, 99,
	502, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 818, 1235, 0, 1214,
	1215, 154, 0, 0, 1230, 1219, 489, 0, 0, 566,
	0, 725, 0, 0, 0, 0, 1473, 575, 1268, 652,
	0, 837, 0, 666, 0, 0, 834, 0, 201, 0,
	122, 123, 0, 204, 0, 207, 0, 0, 210, 0,
	0, 0, 0, 728, 0, 0, 291, 0, 0, 728,
	0, 1169, 845, 846, 847, 848, 849, 936, 852, 853,
	854, 855, 856, 857, 858, 859, 860, 861, 862, 863,
	864, 865, 866, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 898, 0, 873, 873, 873, 890,
	891, 899, 900, 905, 906, 917, 918, 920, 922, 916,
	916, 916, 913, 914, 818, 0, 0, 0, 0, -2,
	339, 0, 639, 0, 644, 359, 360, 361, 646, 647,
	343, 362, 363, 364, 365, 366, 367, 0, 561, 0,
	563, 1261, 0, 340, 352, 341, 344, 0, 220, 419,
	420, 422, 423, 424, 428, 0, 478, 430, 432, 434,
	436, 438, 446, 450, 728, 456, 459, 463, 464, 465,
	466, 0, 0, 0, 564, 0, 322, 0, 473, 0,
	746, 771, 695, 745, 696, 770, 772, 747, 748, 753,
	757, 758, 761, 764, 765, 755, 939, 714, 715, 716,
	739, 740, 587, 0, 0, 308, 940, 841, 842, 892,
	893, 894, 895, 896, 941, 942, 0, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, -2, -2, -2,
	-2, -2, -2, -2, -2, 965, 966, 967, 968, 969,
	970, 971, 972, -2, -2, -2, 976, 977, -2, 1162,
	1164, 0, 1223, 0, -2, 0, -2, -2, -2, -2,
	990, 0, 992, 995, 997, 999, 0, 0, 0, 0,
	1222, 1009, 1200, 0, 0, 1141, 1142, 1143, 994, 0,
	0, 1221, 1212, 0, 0, 1165, 1051, 0, 0, 0,
	1173, 1207, 1203, 0, 1058, 738, 0, 0, 0, 0,
	1065, 0, 1264, 923, 924, 925, 926, 927, 928, 937,
	1121, 0, 0, 0, 1072, 1073, 1075, 1076, 1078, 1079,
	1082, 1083, 0, 0, 0, 1089, 0, 1176, -2, -2,
	-2, -2, -2, -2, -2, 0, 1091, 0, 1093, 1167,
	1186, 0, 0, 1014, 0, 0, 0, 0, 1494, 0,
	1096, 1167, 1194, 0, 0, 0, 0, 0, 1167, 0,
	1199, 0, 0, 0, 0, 0, 1107, 0, 1109, 0,
	0, 0, 0, 0, 0, 630, 723, 0, 0, 0,
	837, 0, 0, 0, 1227, 837, 773, 0, 0, 0,
	0, 0, 0, 819, 823, 820, 821, 0, 0, 804,
	816, 786, 0, 0, 0, 793, 794, 815, 0, 814,
	803, -2, 0, 0, 0, 0, 0, 601, 105, 1473,
	0, 126, 0, 0, 534, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 0, 0, 501,
	0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
	0, 0, 1238, 0, 144, 0, 1245, 0, 0, 0,
	0, 0, 488, 1244, 490, 492, 493, 494, 495, 1269,
	0, 1269, 0, 0, 0, 0, 0, 0, 0, 654,
	660, 0, 752, 0, 678, 668, 0, 0, 0, 678,
	682, 683, 685, 686, 0, 0, 835, 217, 124, 124,
	1233, 124, 124, 142, 214, 274, 224, 266, 0, 0,
	0, 268, 0, 0, 0, 270, 0, 838, 840, 0,
	850, 0, 153, 0, 0, 0, 332, 0, 638, 645,
	0, 356, 0, 358, 562, 1263, 1262, 0, 221, 480,
	299, 448, 451, 475, 476, 477, 832, 0, 0, 474,
	699, 700, 0, 759, 0, 0, 756, 762, 763, 0,
	742, 585, 586, 0, 0, 0, -2, -2, 0, 0,
	0, 1010, -2, 991, 993, 996, 998, 1000, 0, 0,
	0, 0, 0, 0, 0, 1011, 1166, 0, 1210, 1213,
	-2, 1168, 1171, 1172, 0, 0, 1204, 0, 0, 0,
	0, 737, 738, 738, 738, 1064, 0, 0, 0, 0,
	0, 0, 1066, 0, 0, 0, 0, 0, 0, 1088,
	0, 1090, 1092, 0, 0, 1094, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	1018, 1019, 0, 1166, 1095, 1192, 1193, 0, 0, 0,
	0, 0, 0, 1101, 0, 1198, 0, 0, 0, 1105,
	1106, 1108, 0, 871, 0, 897, 919, 921, 909, 728,
	1246, 775, 767, 1225, 818, 777, 779, 1226, 767, 1168,
	806, 0, 808, 0, 0, 0, 810, 0, 799, 0,
	801, 816, 791, 0, 0, 784, 0, 783, 804, 812,
	0, 0, 830, 104, 591, 0, 0, 0, 107, 1473,
	115, 0, 516, 0, 0, 0, 0, 0, 604, 116,
	1473, 124, 1473, 124, 117, 90, 602, 91, 0, 0,
	597, 0, 589, 0, 0, 588, 92, 0, 0, 599,
	0, 0, 153, 0, 0, 155, 0, 1231, 497, 543,
	0, 0, 1269, 0, 486, 544, 569, -2, 571, 0,
	0, 656, 660, 0, 659, 726, 678, 751, 836, 661,
	678, 0, 0, 0, 670, 667, 664, 837, 0, 0,
	0, 0, 202, 205, 208, 211, 281, 0, 0, 1170,
	0, 843, 0, 0, 133, 0, 283, 329, 330, 335,
	354, 355, 357, 353, 0, 0, 0, 0, 0, 0,
	0, 0, 741, 587, 0, 943, -2, 0, 0, 0,
	0, -2, 0, 0, 0, 1201, 0, 0, 0, 1212,
	-2, 1174, 1202, 1206, 0, 1059, 0, 0, 0, 0,
	1257, 929, 930, 931, 932, 933, 934, 935, 0, 1119,
	1120, 1124, 0, 0, 1070, 0, 0, 1175, 1185, 1187,
	1015, 1016, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
	1028, 1029, -2, -2, -2, 1033, 1034, 1035, -2, -2,
	-2, 0, 0, 0, 1188, 0, 0, 1190, 1191, 1195,
	1196, 0, 1098, 1099, 1100, 1197, 0, 0, 0, 903,
	0, 0, 769, 0, 776, 0, 769, 807, 0, 826,
	809, 789, 800, 0, 797, 787, 0, 788, 0, 816,
	0, 0, 796, 0, 0, 0, 0, 125, 514, 533,
	0, 0, 578, 584, 584, 0, 1068, 1069, 0, 0,
	0, 109, 0, 0, 0, 0, 113, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 95, 131, 0, 0, 156, 505, 0, 491,
	0, 0, 0, 489, 0, 567, 0, 0, 658, 660,
	0, 651, 652, 181, 662, 676, 677, 675, 0, 678,
	684, 681, 687, 0, 0, 135, 0, 0, 844, 851,
	151, 1362, 149, 146, 148, 300, 323, 324, 0, 328,
	469, 470, 503, 503, 754, 760, 743, 587, 0, 0,
	-2, 0, 1003, -2, -2, 1137, 1168, 1211, 1205, 1254,
	738, 1060, 1062, 1063, 938, 1126, 1123, 0, 1110, 1086,
	1087, 1184, 0, 0, 0, 0, 1168, 1139, 1097, 0,
	1103, 1104, 872, 724, 1115, 0, 0, 780, 1115, 0,
	804, 802, 785, 781, 0, 792, 0, 813, 593, 595,
	106, 0, 515, 0, 518, 0, 0, 0, 0, 524,
	525, 0, 0, 0, 0, 535, 542, 0, 587, 1249,
	0, 587, 0, 0, 0, 0, 0, 121, 0, 0,
	603, 0, 124, 124, 592, 0, 0, 97, 0, 598,
	590, 0, 98, 0, 600, 143, 0, 484, 504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 648, 660,
	0, 653, 654, 0, 0, 0, 669, 679, 0, 0,
	0, 839, 0, 0, 0, 0, 0, 326, 0, 471,
	472, 744, -2, -2, 1004, 1138, 0, 738, 0, 1112,
	-2, 0, 0, 0, 1140, 0, 711, 0, 768, 766,
	712, 825, 816, 0, 811, 108, 0, 519, 520, 1269,
	0, 523, 526, 0, 528, 1271, 497, 0, 539, 540,
	579, 580, 583, 581, 584, 738, 537, 0, 110, 111,
	120, 128, 112, 118, 0, 0, 0, 738, 0, 817,
	0, 0, 542, 0, 532, 497, 487, 542, 0, 0,
	655, 656, 0, 0, 0, 688, 0, 0, 150, 0,
	145, 147, 325, 0, 1061, 1129, 0, -2, 0, 1041,
	1102, 1114, 1116, 0, 790, 782, 517, 521, 0, 0,
	548, 0, 536, 0, 587, 0, 0, 130, 0, 594,
	596, 0, 0, 0, 0, 0, 0, 497, 542, 485,
	497, 0, 657, 658, 0, 672, 837, 674, 0, 0,
	152, 327, 0, 0, 0, 1125, 1042, 0, 0, 0,
	527, 553, 0, 0, 0, 582, 1059, 544, 114, 0,
	127, 0, 0, 0, 0, 0, 0, 530, 497, 573,
	0, 649, 0, 673, 153, 153, 1122, 1127, 1130, -2,
	1433, 1307, 0, 1128, 1117, 1118, 0, 529, 549, 550,
	0, 545, 546, 547, 1270, 541, 548, 129, 100, 102,
	0, 0, 0, 531, 542, 837, 136, 137, 0, 1132,
	1133, 1134, 1135, 1136, 522, 551, 0, 552, 0, 0,
	0, 553, 0, 0, 500, 497, 671, 0, 554, 0,
	557, 558, 0, 555, 538, 0, 0, 496, 498, 499,
	574, 1131, 556, 559, 560, 0, 508, 0, 0, 511,
	0, 506, 0, 0, 507, 0, 0, 509, 0, 512,
	0, 0, 505, 0, 513, 505, 510,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:925
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:931
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:937
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:966
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:991
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:994
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:995
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:996
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:997
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1034
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1045
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1054
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1090
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1110
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1122
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1128
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1137
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1146
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1158
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1170
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1230
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1253
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1326
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1330
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1357
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1490
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1498
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1523
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1542
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1550
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1552
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1553
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1572
		{
			return helpWith(sqllex, "DELETE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1583
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1585
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1586
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return helpWith(sqllex, "DROP")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1597
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1600
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1612
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1615
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1684
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1754
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1755
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1757
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "DELETE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1759
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1761
		{
			return helpWith(sqllex, "INSERT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1762
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1782
		{ /* SKIP DOC */
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1810
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1814
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1834
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1844
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1858
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1862
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1866
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1869
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "GRANT")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1906
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1909
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1913
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1917
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1954
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1978
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1987
		{
			return helpWith(sqllex, "RESET")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			return helpWith(sqllex, "RESET")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2019
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2022
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2026
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2028
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2029
		{ /* SKIP DOC */
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2030
		{ /* SKIP DOC */
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2031
		{
			return unimplemented(sqllex, "set local")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2077
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2145
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2150
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2154
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2167
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			return unimplemented(sqllex, "set from current")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2172
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2224
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = Low
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = Normal
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = High
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2283
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2287
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2289
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.str = "client_encoding"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2323
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2324
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2354
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2357
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2368
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2390
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2424
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2427
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2438
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2470
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2472
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2475
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2493
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2524
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2528
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2532
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2546
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2557
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2568
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2572
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2576
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2580
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2587
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2594
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2598
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2604
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2608
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2612
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2618
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2646
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = DropDefault
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 503:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2774
		{
			sqlVAL.str = ""
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2781
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2794
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = []ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 510:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = ListPartition{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = []RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 513:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2833
		{
			sqlVAL.union.val = RangePartition{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Expr:         sqlDollar[4].union.expr(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2854
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2864
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2868
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2884
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2902
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2906
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2945
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2970
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2981
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3050
		{
			return unimplemented(sqllex, "match full")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			return unimplemented(sqllex, "match partial")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			return unimplemented(sqllex, "match simple")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3053
		{
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3060
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3064
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3076
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3096
		{
			sqlVAL.union.val = NoAction
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3100
		{
			sqlVAL.union.val = Restrict
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3104
		{
			sqlVAL.union.val = Cascade
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			sqlVAL.union.val = SetNull
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3112
		{
			sqlVAL.union.val = SetDefault
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3118
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3126
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3136
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3139
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = nil
		}
	case 571:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3197
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3219
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = true
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = false
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3249
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3250
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3253
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 584:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3254
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = Ascending
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = Descending
		}
	case 587:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3266
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 588:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3283
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3301
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3305
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3307
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3311
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3331
		{
			sqlVAL.union.val = true
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = false
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3341
		{
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3371
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3374
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3379
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3398
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3403
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3421
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3429
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3436
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3439
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3440
		{
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3444
		{
			sqlVAL.str = ""
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3448
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.str = ""
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3501
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = ReadOnly
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = ReadWrite
		}
	case 648:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3545
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3565
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 652:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.str = ""
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.str = ""
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.str = ""
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3609
		{
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 662:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3633
		{
			return helpWith(sqllex, "INSERT")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3644
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3672
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3692
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3704
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3713
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 679:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3724
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3727
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3731
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3732
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3859
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			return helpWith(sqllex, "SELECT")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3895
		{
			return helpWith(sqllex, "VALUES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			return helpWith(sqllex, "TABLE")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3932
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3943
		{
			return helpWith(sqllex, "SELECT")
		}
	case 714:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3956
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3980
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3987
		{
			return helpWith(sqllex, "TABLE")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3998
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3999
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4000
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4007
		{
			return unimplemented(sqllex, "cte")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4010
		{
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4011
		{
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4014
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4015
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4018
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4019
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4023
		{
			sqlVAL.union.val = true
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = false
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = false
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = true
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4042
		{
		}
	case 736:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4043
		{
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4097
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4121
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4174
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4177
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4204
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = false
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = true
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4249
		{
			return helpWith(sqllex, "VALUES")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4251
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4263
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4266
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4268
		{
			sqlVAL.union.val = &From{}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4278
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4284
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4288
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4329
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4333
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4370
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4395
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = nil
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4436
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4442
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = true
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = false
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4494
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4504
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.str = astFullJoin
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.str = astLeftJoin
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.str = astRightJoin
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.str = astInnerJoin
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4553
		{
		}
	case 824:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4554
		{
		}
	case 825:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4565
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4569
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4610
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4614
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4640
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4654
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4662
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4686
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4697
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = jsonbColType
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = jsonColType
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4735
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4739
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4743
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4755
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4786
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4795
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = nil
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4828
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4832
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4836
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4840
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4860
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4874
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4883
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4912
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4920
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4924
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 898:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4956
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 904:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4988
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 912:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5028
		{
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 919:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = year
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = month
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = day
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = hour
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			sqlVAL.union.val = minute
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = month
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = hour
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = minute
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = minute
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 936:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = nil
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = second
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5123
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5158
		{
			return unimplemented(sqllex, "at tz")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5331
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5335
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5343
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5347
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5351
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5355
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5359
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5363
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5396
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5408
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5412
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5416
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5420
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5432
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5449
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5453
		{
			sqlVAL.union.val = MaxVal{}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5536
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5540
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5544
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5548
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5552
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5556
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5560
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5572
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5613
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5639
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5643
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5651
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5659
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5666
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5667
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5669
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5677
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5680
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5691
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5707
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5708
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5712
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5714
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5718
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5721
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5727
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5730
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5739
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5740
		{
			return unimplemented(sqllex, "current role")
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5746
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5749
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5751
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5755
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5759
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5763
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5767
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5770
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5775
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5777
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5780
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5782
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5786
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5789
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5790
		{
			return unimplemented(sqllex, "treat")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5792
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5816
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5820
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5824
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5827
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5832
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5836
		{
			return unimplemented(sqllex, "within group")
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5837
		{
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5845
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5856
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5872
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5884
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5895
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.str = ""
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5934
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5935
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5936
		{
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5940
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5946
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5947
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5948
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5949
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5950
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5983
		{
			sqlVAL.union.val = Any
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5987
		{
			sqlVAL.union.val = Some
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5991
		{
			sqlVAL.union.val = All
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = Plus
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = Minus
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = Mult
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = Div
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = Mod
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = Bitand
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = Bitor
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = Pow
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = Bitxor
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = LT
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = GT
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = EQ
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = LE
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6010
		{
			sqlVAL.union.val = GE
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6011
		{
			sqlVAL.union.val = NE
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = Like
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = NotLike
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = ILike
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = NotILike
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6040
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6046
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6050
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6076
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6106
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6110
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6123
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6127
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6144
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6148
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6182
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6192
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6196
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6224
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6230
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6241
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6247
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6251
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6258
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6264
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6270
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6305
		{
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6306
		{
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6310
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6314
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6333
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6337
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6365
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6384
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6390
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6394
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6419
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6425
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6429
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6435
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6438
		{
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6448
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6459
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6463
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6467
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6471
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6474
		{
			return unimplemented(sqllex, "func const")
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6476
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6480
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6483
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6485
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6489
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6493
		{
			sqlVAL.union.val = DNull
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6500
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6504
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6510
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6545
		{
			sqlVAL.str = ""
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6551
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6555
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
