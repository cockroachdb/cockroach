// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:490
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFIGURATION = 57406
const CONFIGURATIONS = 57407
const CONFIGURE = 57408
const CONFLICT = 57409
const CONSTRAINT = 57410
const CONSTRAINTS = 57411
const CONTAINS = 57412
const COPY = 57413
const COVERING = 57414
const CREATE = 57415
const CROSS = 57416
const CSV = 57417
const CUBE = 57418
const CURRENT = 57419
const CURRENT_CATALOG = 57420
const CURRENT_DATE = 57421
const CURRENT_SCHEMA = 57422
const CURRENT_ROLE = 57423
const CURRENT_TIME = 57424
const CURRENT_TIMESTAMP = 57425
const CURRENT_USER = 57426
const CYCLE = 57427
const DATA = 57428
const DATABASE = 57429
const DATABASES = 57430
const DATE = 57431
const DAY = 57432
const DEC = 57433
const DECIMAL = 57434
const DEFAULT = 57435
const DEALLOCATE = 57436
const DEFERRABLE = 57437
const DELETE = 57438
const DESC = 57439
const DISCARD = 57440
const DISTINCT = 57441
const DO = 57442
const DOUBLE = 57443
const DROP = 57444
const ELSE = 57445
const ENCODING = 57446
const END = 57447
const ESCAPE = 57448
const EXCEPT = 57449
const EXISTS = 57450
const EXECUTE = 57451
const EXPERIMENTAL_FINGERPRINTS = 57452
const EXPERIMENTAL = 57453
const EXPLAIN = 57454
const EXTRACT = 57455
const EXTRACT_DURATION = 57456
const FALSE = 57457
const FAMILY = 57458
const FETCH = 57459
const FETCHVAL = 57460
const FETCHTEXT = 57461
const FETCHVAL_PATH = 57462
const FETCHTEXT_PATH = 57463
const FILTER = 57464
const FIRST = 57465
const FLOAT = 57466
const FLOAT4 = 57467
const FLOAT8 = 57468
const FLOORDIV = 57469
const FOLLOWING = 57470
const FOR = 57471
const FORCE_INDEX = 57472
const FOREIGN = 57473
const FROM = 57474
const FULL = 57475
const GRANT = 57476
const GRANTS = 57477
const GREATEST = 57478
const GROUP = 57479
const GROUPING = 57480
const HAVING = 57481
const HELP = 57482
const HIGH = 57483
const HOUR = 57484
const HAS_SOME = 57485
const HAS_ALL = 57486
const IMPORT = 57487
const INCREMENTAL = 57488
const IF = 57489
const IFNULL = 57490
const ILIKE = 57491
const IN = 57492
const INET = 57493
const INTERLEAVE = 57494
const INDEX = 57495
const INDEXES = 57496
const INITIALLY = 57497
const INNER = 57498
const INSERT = 57499
const INT = 57500
const INT2VECTOR = 57501
const INT2 = 57502
const INT4 = 57503
const INT8 = 57504
const INT64 = 57505
const INTEGER = 57506
const INTERSECT = 57507
const INTERVAL = 57508
const INTO = 57509
const IS = 57510
const ISOLATION = 57511
const JOB = 57512
const JOBS = 57513
const JOIN = 57514
const JSON = 57515
const JSONB = 57516
const KEY = 57517
const KEYS = 57518
const KV = 57519
const LATERAL = 57520
const LC_CTYPE = 57521
const LC_COLLATE = 57522
const LEADING = 57523
const LEAST = 57524
const LEFT = 57525
const LESS = 57526
const LEVEL = 57527
const LIKE = 57528
const LIMIT = 57529
const LIST = 57530
const LOCAL = 57531
const LOCALTIME = 57532
const LOCALTIMESTAMP = 57533
const LOW = 57534
const LSHIFT = 57535
const MATCH = 57536
const MAXVALUE = 57537
const MINUTE = 57538
const MONTH = 57539
const NAN = 57540
const NAME = 57541
const NAMES = 57542
const NATURAL = 57543
const NEXT = 57544
const NO = 57545
const NO_INDEX_JOIN = 57546
const NORMAL = 57547
const NOT = 57548
const NOTHING = 57549
const NULL = 57550
const NULLIF = 57551
const NULLS = 57552
const NUMERIC = 57553
const OF = 57554
const OFF = 57555
const OFFSET = 57556
const OID = 57557
const ON = 57558
const ONLY = 57559
const OPTIONS = 57560
const OR = 57561
const ORDER = 57562
const ORDINALITY = 57563
const OUT = 57564
const OUTER = 57565
const OVER = 57566
const OVERLAPS = 57567
const OVERLAY = 57568
const PARENT = 57569
const PARTIAL = 57570
const PARTITION = 57571
const PASSWORD = 57572
const PAUSE = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCE = 57617
const SEQUENCES = 57618
const SERIAL = 57619
const SERIALIZABLE = 57620
const SESSION = 57621
const SESSIONS = 57622
const SESSION_USER = 57623
const SET = 57624
const SETTING = 57625
const SETTINGS = 57626
const SHOW = 57627
const SIMILAR = 57628
const SIMPLE = 57629
const SMALLINT = 57630
const SMALLSERIAL = 57631
const SNAPSHOT = 57632
const SOME = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TO = 57659
const TRAILING = 57660
const TRACE = 57661
const TRANSACTION = 57662
const TREAT = 57663
const TRIM = 57664
const TRUE = 57665
const TRUNCATE = 57666
const TYPE = 57667
const UNBOUNDED = 57668
const UNCOMMITTED = 57669
const UNION = 57670
const UNIQUE = 57671
const UNKNOWN = 57672
const UPDATE = 57673
const UPSERT = 57674
const USE = 57675
const USER = 57676
const USERS = 57677
const USING = 57678
const UUID = 57679
const VALID = 57680
const VALIDATE = 57681
const VALUE = 57682
const VALUES = 57683
const VARCHAR = 57684
const VARIADIC = 57685
const VIEW = 57686
const VARYING = 57687
const WHEN = 57688
const WHERE = 57689
const WINDOW = 57690
const WITH = 57691
const WITHIN = 57692
const WITHOUT = 57693
const WRITE = 57694
const YEAR = 57695
const ZONE = 57696
const NOT_LA = 57697
const WITH_LA = 57698
const AS_LA = 57699
const CONTAINED_BY = 57700
const HAS_SOME_KEY = 57701
const HAS_ALL_KEYS = 57702
const POSTFIXOP = 57703
const UMINUS = 57704
const HELPTOKEN = 57705

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6928

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	383, 54,
	-2, 716,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	153, 566,
	-2, 0,
	-1, 65,
	96, 716,
	157, 716,
	331, 716,
	332, 716,
	-2, 0,
	-1, 75,
	1, 678,
	216, 678,
	261, 678,
	378, 678,
	380, 678,
	382, 678,
	383, 678,
	-2, 691,
	-1, 108,
	4, 718,
	20, 718,
	21, 718,
	23, 718,
	28, 718,
	33, 718,
	34, 718,
	35, 718,
	36, 718,
	37, 718,
	38, 718,
	39, 718,
	40, 718,
	41, 718,
	42, 718,
	44, 718,
	45, 718,
	46, 718,
	47, 718,
	48, 718,
	51, 718,
	52, 718,
	53, 718,
	55, 718,
	56, 718,
	60, 718,
	61, 718,
	62, 718,
	64, 718,
	65, 718,
	66, 718,
	67, 718,
	69, 718,
	71, 718,
	72, 718,
	75, 718,
	76, 718,
	77, 718,
	85, 718,
	86, 718,
	87, 718,
	88, 718,
	89, 718,
	90, 718,
	91, 718,
	92, 718,
	94, 718,
	96, 718,
	98, 718,
	101, 718,
	102, 718,
	104, 718,
	108, 718,
	109, 718,
	110, 718,
	111, 718,
	112, 718,
	113, 718,
	114, 718,
	122, 718,
	123, 718,
	124, 718,
	125, 718,
	126, 718,
	128, 718,
	130, 718,
	135, 718,
	136, 718,
	138, 718,
	141, 718,
	142, 718,
	145, 718,
	146, 718,
	147, 718,
	148, 718,
	151, 718,
	152, 718,
	154, 718,
	157, 718,
	158, 718,
	159, 718,
	160, 718,
	161, 718,
	162, 718,
	163, 718,
	164, 718,
	166, 718,
	169, 718,
	170, 718,
	171, 718,
	173, 718,
	174, 718,
	175, 718,
	176, 718,
	177, 718,
	179, 718,
	180, 718,
	182, 718,
	184, 718,
	185, 718,
	188, 718,
	189, 718,
	192, 718,
	194, 718,
	196, 718,
	197, 718,
	198, 718,
	199, 718,
	200, 718,
	202, 718,
	203, 718,
	204, 718,
	205, 718,
	209, 718,
	210, 718,
	211, 718,
	212, 718,
	213, 718,
	215, 718,
	217, 718,
	218, 718,
	221, 718,
	222, 718,
	224, 718,
	226, 718,
	227, 718,
	228, 718,
	229, 718,
	230, 718,
	231, 718,
	233, 718,
	234, 718,
	235, 718,
	236, 718,
	237, 718,
	239, 718,
	240, 718,
	241, 718,
	242, 718,
	243, 718,
	244, 718,
	245, 718,
	246, 718,
	248, 718,
	249, 718,
	250, 718,
	251, 718,
	252, 718,
	254, 718,
	255, 718,
	256, 718,
	257, 718,
	258, 718,
	259, 718,
	260, 718,
	262, 718,
	264, 718,
	265, 718,
	266, 718,
	267, 718,
	269, 718,
	270, 718,
	271, 718,
	272, 718,
	273, 718,
	275, 718,
	276, 718,
	277, 718,
	278, 718,
	279, 718,
	280, 718,
	282, 718,
	283, 718,
	284, 718,
	285, 718,
	287, 718,
	288, 718,
	289, 718,
	290, 718,
	292, 718,
	293, 718,
	294, 718,
	295, 718,
	296, 718,
	297, 718,
	298, 718,
	299, 718,
	300, 718,
	301, 718,
	303, 718,
	305, 718,
	306, 718,
	307, 718,
	308, 718,
	309, 718,
	310, 718,
	311, 718,
	312, 718,
	314, 718,
	315, 718,
	316, 718,
	319, 718,
	320, 718,
	321, 718,
	322, 718,
	324, 718,
	325, 718,
	326, 718,
	327, 718,
	330, 718,
	331, 718,
	332, 718,
	333, 718,
	335, 718,
	337, 718,
	338, 718,
	339, 718,
	340, 718,
	341, 718,
	342, 718,
	345, 718,
	350, 718,
	351, 718,
	352, 718,
	353, 718,
	354, 718,
	-2, 0,
	-1, 125,
	1, 681,
	216, 681,
	261, 681,
	378, 681,
	380, 681,
	382, 681,
	383, 681,
	-2, 690,
	-1, 130,
	1, 615,
	169, 615,
	239, 615,
	243, 615,
	382, 615,
	383, 615,
	-2, 0,
	-1, 132,
	1, 615,
	382, 615,
	383, 615,
	-2, 0,
	-1, 133,
	1, 615,
	382, 615,
	383, 615,
	-2, 0,
	-1, 134,
	1, 619,
	382, 619,
	383, 619,
	-2, 0,
	-1, 141,
	4, 724,
	5, 724,
	6, 724,
	7, 724,
	8, 724,
	9, 724,
	20, 724,
	21, 724,
	23, 724,
	28, 724,
	29, 724,
	33, 724,
	34, 724,
	35, 724,
	36, 724,
	37, 724,
	38, 724,
	39, 724,
	40, 724,
	41, 724,
	42, 724,
	44, 724,
	45, 724,
	46, 724,
	47, 724,
	48, 724,
	49, 724,
	50, 724,
	51, 724,
	52, 724,
	53, 724,
	55, 724,
	56, 724,
	58, 724,
	60, 724,
	61, 724,
	62, 724,
	64, 724,
	65, 724,
	66, 724,
	67, 724,
	69, 724,
	71, 724,
	72, 724,
	74, 724,
	75, 724,
	76, 724,
	77, 724,
	79, 724,
	80, 724,
	81, 724,
	83, 724,
	84, 724,
	85, 724,
	86, 724,
	87, 724,
	88, 724,
	89, 724,
	90, 724,
	91, 724,
	92, 724,
	94, 724,
	96, 724,
	98, 724,
	101, 724,
	102, 724,
	104, 724,
	108, 724,
	109, 724,
	110, 724,
	111, 724,
	112, 724,
	113, 724,
	114, 724,
	115, 724,
	116, 724,
	122, 724,
	123, 724,
	124, 724,
	125, 724,
	126, 724,
	128, 724,
	130, 724,
	133, 724,
	135, 724,
	136, 724,
	138, 724,
	141, 724,
	142, 724,
	145, 724,
	146, 724,
	147, 724,
	148, 724,
	149, 724,
	151, 724,
	152, 724,
	154, 724,
	156, 724,
	157, 724,
	158, 724,
	159, 724,
	160, 724,
	161, 724,
	162, 724,
	163, 724,
	164, 724,
	166, 724,
	168, 724,
	169, 724,
	170, 724,
	171, 724,
	172, 724,
	173, 724,
	174, 724,
	175, 724,
	176, 724,
	177, 724,
	179, 724,
	180, 724,
	182, 724,
	183, 724,
	184, 724,
	185, 724,
	186, 724,
	188, 724,
	189, 724,
	192, 724,
	194, 724,
	195, 724,
	196, 724,
	197, 724,
	198, 724,
	199, 724,
	200, 724,
	201, 724,
	202, 724,
	203, 724,
	204, 724,
	205, 724,
	206, 724,
	208, 724,
	209, 724,
	210, 724,
	211, 724,
	212, 724,
	213, 724,
	215, 724,
	218, 724,
	221, 724,
	222, 724,
	223, 724,
	224, 724,
	225, 724,
	226, 724,
	227, 724,
	228, 724,
	229, 724,
	230, 724,
	231, 724,
	233, 724,
	234, 724,
	235, 724,
	236, 724,
	237, 724,
	239, 724,
	240, 724,
	241, 724,
	242, 724,
	243, 724,
	244, 724,
	245, 724,
	246, 724,
	248, 724,
	249, 724,
	250, 724,
	251, 724,
	252, 724,
	254, 724,
	255, 724,
	256, 724,
	257, 724,
	258, 724,
	259, 724,
	260, 724,
	262, 724,
	263, 724,
	264, 724,
	265, 724,
	266, 724,
	267, 724,
	269, 724,
	270, 724,
	271, 724,
	272, 724,
	273, 724,
	275, 724,
	276, 724,
	277, 724,
	278, 724,
	279, 724,
	280, 724,
	281, 724,
	282, 724,
	283, 724,
	284, 724,
	285, 724,
	286, 724,
	287, 724,
	288, 724,
	289, 724,
	290, 724,
	292, 724,
	293, 724,
	294, 724,
	295, 724,
	296, 724,
	297, 724,
	298, 724,
	299, 724,
	300, 724,
	301, 724,
	303, 724,
	305, 724,
	306, 724,
	307, 724,
	308, 724,
	309, 724,
	310, 724,
	311, 724,
	312, 724,
	314, 724,
	315, 724,
	316, 724,
	319, 724,
	320, 724,
	321, 724,
	322, 724,
	323, 724,
	324, 724,
	325, 724,
	326, 724,
	327, 724,
	330, 724,
	331, 724,
	332, 724,
	333, 724,
	334, 724,
	335, 724,
	337, 724,
	338, 724,
	339, 724,
	340, 724,
	341, 724,
	342, 724,
	345, 724,
	350, 724,
	351, 724,
	352, 724,
	353, 724,
	354, 724,
	355, 724,
	365, 724,
	370, 724,
	371, 724,
	372, 724,
	379, 724,
	385, 724,
	-2, 0,
	-1, 144,
	1, 54,
	383, 54,
	-2, 716,
	-1, 518,
	132, 1338,
	317, 1338,
	360, 1338,
	381, 1338,
	-2, 0,
	-1, 519,
	132, 1285,
	317, 1285,
	360, 1285,
	381, 1285,
	-2, 0,
	-1, 521,
	132, 1398,
	317, 1398,
	360, 1398,
	381, 1398,
	-2, 0,
	-1, 523,
	132, 1421,
	317, 1421,
	360, 1421,
	381, 1421,
	-2, 0,
	-1, 530,
	132, 1343,
	317, 1343,
	360, 1343,
	381, 1343,
	-2, 333,
	-1, 556,
	1, 411,
	378, 411,
	380, 411,
	382, 411,
	383, 411,
	-2, 0,
	-1, 557,
	1, 463,
	129, 463,
	378, 463,
	380, 463,
	382, 463,
	383, 463,
	-2, 0,
	-1, 563,
	1, 425,
	378, 425,
	380, 425,
	382, 425,
	383, 425,
	-2, 0,
	-1, 565,
	1, 429,
	378, 429,
	380, 429,
	382, 429,
	383, 429,
	-2, 0,
	-1, 568,
	1, 437,
	378, 437,
	380, 437,
	382, 437,
	383, 437,
	-2, 0,
	-1, 569,
	1, 442,
	378, 442,
	380, 442,
	382, 442,
	383, 442,
	-2, 0,
	-1, 572,
	1, 452,
	378, 452,
	380, 452,
	382, 452,
	383, 452,
	-2, 0,
	-1, 588,
	117, 726,
	129, 726,
	187, 726,
	214, 726,
	-2, 685,
	-1, 591,
	117, 725,
	129, 725,
	187, 725,
	214, 725,
	-2, 682,
	-1, 648,
	379, 1263,
	-2, 1256,
	-1, 649,
	379, 1264,
	-2, 1257,
	-1, 655,
	5, 910,
	379, 910,
	-2, 1473,
	-1, 680,
	5, 869,
	-2, 1442,
	-1, 681,
	5, 904,
	379, 904,
	-2, 1444,
	-1, 682,
	5, 879,
	-2, 1445,
	-1, 683,
	5, 878,
	-2, 1446,
	-1, 684,
	5, 904,
	379, 904,
	-2, 1449,
	-1, 685,
	5, 904,
	379, 904,
	-2, 1450,
	-1, 686,
	5, 905,
	-2, 1453,
	-1, 687,
	5, 861,
	-2, 1454,
	-1, 688,
	5, 861,
	-2, 1455,
	-1, 689,
	5, 886,
	-2, 1459,
	-1, 690,
	5, 871,
	-2, 1460,
	-1, 691,
	5, 872,
	-2, 1461,
	-1, 692,
	5, 862,
	-2, 1467,
	-1, 693,
	5, 863,
	-2, 1468,
	-1, 694,
	5, 864,
	-2, 1469,
	-1, 695,
	5, 865,
	-2, 1470,
	-1, 696,
	5, 866,
	-2, 1471,
	-1, 697,
	5, 867,
	-2, 1472,
	-1, 698,
	5, 861,
	-2, 1479,
	-1, 699,
	5, 870,
	-2, 1484,
	-1, 700,
	5, 868,
	-2, 1487,
	-1, 701,
	5, 902,
	379, 902,
	-2, 1489,
	-1, 702,
	5, 906,
	-2, 1492,
	-1, 703,
	5, 908,
	-2, 1493,
	-1, 704,
	5, 901,
	379, 901,
	-2, 1498,
	-1, 891,
	230, 714,
	-2, 559,
	-1, 895,
	216, 1260,
	-2, 0,
	-1, 930,
	1, 217,
	378, 217,
	380, 217,
	382, 217,
	383, 217,
	-2, 689,
	-1, 937,
	4, 1497,
	10, 1497,
	11, 1497,
	13, 1497,
	14, 1497,
	15, 1497,
	16, 1497,
	17, 1497,
	18, 1497,
	20, 1497,
	21, 1497,
	23, 1497,
	26, 1497,
	28, 1497,
	30, 1497,
	33, 1497,
	34, 1497,
	35, 1497,
	36, 1497,
	37, 1497,
	38, 1497,
	39, 1497,
	40, 1497,
	41, 1497,
	42, 1497,
	44, 1497,
	45, 1497,
	46, 1497,
	47, 1497,
	48, 1497,
	51, 1497,
	52, 1497,
	53, 1497,
	55, 1497,
	56, 1497,
	57, 1497,
	60, 1497,
	61, 1497,
	62, 1497,
	63, 1497,
	64, 1497,
	65, 1497,
	66, 1497,
	67, 1497,
	69, 1497,
	70, 1497,
	71, 1497,
	72, 1497,
	74, 1497,
	75, 1497,
	76, 1497,
	77, 1497,
	85, 1497,
	86, 1497,
	87, 1497,
	88, 1497,
	89, 1497,
	90, 1497,
	91, 1497,
	92, 1497,
	94, 1497,
	96, 1497,
	98, 1497,
	101, 1497,
	102, 1497,
	104, 1497,
	108, 1497,
	109, 1497,
	110, 1497,
	111, 1497,
	112, 1497,
	113, 1497,
	114, 1497,
	118, 1497,
	119, 1497,
	120, 1497,
	121, 1497,
	122, 1497,
	123, 1497,
	124, 1497,
	125, 1497,
	126, 1497,
	127, 1497,
	128, 1497,
	130, 1497,
	133, 1497,
	135, 1497,
	136, 1497,
	138, 1497,
	141, 1497,
	142, 1497,
	145, 1497,
	146, 1497,
	147, 1497,
	148, 1497,
	149, 1497,
	150, 1497,
	151, 1497,
	152, 1497,
	154, 1497,
	156, 1497,
	157, 1497,
	158, 1497,
	159, 1497,
	160, 1497,
	161, 1497,
	162, 1497,
	163, 1497,
	164, 1497,
	166, 1497,
	168, 1497,
	169, 1497,
	170, 1497,
	171, 1497,
	172, 1497,
	173, 1497,
	174, 1497,
	175, 1497,
	176, 1497,
	177, 1497,
	179, 1497,
	180, 1497,
	182, 1497,
	183, 1497,
	184, 1497,
	185, 1497,
	186, 1497,
	188, 1497,
	189, 1497,
	192, 1497,
	193, 1497,
	194, 1497,
	196, 1497,
	197, 1497,
	198, 1497,
	199, 1497,
	200, 1497,
	201, 1497,
	202, 1497,
	203, 1497,
	204, 1497,
	205, 1497,
	209, 1497,
	210, 1497,
	211, 1497,
	212, 1497,
	213, 1497,
	215, 1497,
	218, 1497,
	219, 1497,
	221, 1497,
	222, 1497,
	224, 1497,
	226, 1497,
	227, 1497,
	228, 1497,
	229, 1497,
	230, 1497,
	231, 1497,
	233, 1497,
	234, 1497,
	235, 1497,
	236, 1497,
	237, 1497,
	239, 1497,
	240, 1497,
	241, 1497,
	242, 1497,
	243, 1497,
	244, 1497,
	245, 1497,
	246, 1497,
	248, 1497,
	249, 1497,
	250, 1497,
	251, 1497,
	252, 1497,
	253, 1497,
	254, 1497,
	255, 1497,
	256, 1497,
	257, 1497,
	258, 1497,
	259, 1497,
	260, 1497,
	262, 1497,
	263, 1497,
	264, 1497,
	265, 1497,
	266, 1497,
	267, 1497,
	268, 1497,
	269, 1497,
	270, 1497,
	271, 1497,
	272, 1497,
	273, 1497,
	275, 1497,
	276, 1497,
	277, 1497,
	278, 1497,
	279, 1497,
	280, 1497,
	282, 1497,
	283, 1497,
	284, 1497,
	285, 1497,
	286, 1497,
	287, 1497,
	288, 1497,
	289, 1497,
	290, 1497,
	292, 1497,
	293, 1497,
	294, 1497,
	295, 1497,
	296, 1497,
	297, 1497,
	298, 1497,
	299, 1497,
	300, 1497,
	301, 1497,
	303, 1497,
	305, 1497,
	306, 1497,
	307, 1497,
	308, 1497,
	309, 1497,
	310, 1497,
	311, 1497,
	312, 1497,
	314, 1497,
	315, 1497,
	316, 1497,
	319, 1497,
	320, 1497,
	321, 1497,
	322, 1497,
	324, 1497,
	325, 1497,
	326, 1497,
	327, 1497,
	330, 1497,
	331, 1497,
	332, 1497,
	333, 1497,
	335, 1497,
	337, 1497,
	338, 1497,
	339, 1497,
	340, 1497,
	341, 1497,
	342, 1497,
	345, 1497,
	350, 1497,
	351, 1497,
	352, 1497,
	353, 1497,
	354, 1497,
	355, 1497,
	356, 1497,
	358, 1497,
	359, 1497,
	360, 1497,
	361, 1497,
	362, 1497,
	363, 1497,
	364, 1497,
	365, 1497,
	367, 1497,
	368, 1497,
	369, 1497,
	370, 1497,
	371, 1497,
	372, 1497,
	373, 1497,
	374, 1497,
	375, 1497,
	377, 1497,
	380, 1497,
	381, 1497,
	384, 1497,
	385, 1497,
	-2, 0,
	-1, 950,
	132, 1398,
	317, 1398,
	360, 1398,
	381, 1398,
	-2, 0,
	-1, 967,
	132, 1421,
	317, 1421,
	360, 1421,
	381, 1421,
	-2, 0,
	-1, 968,
	169, 627,
	239, 627,
	243, 627,
	-2, 321,
	-1, 1040,
	117, 725,
	129, 725,
	187, 725,
	214, 725,
	-2, 686,
	-1, 1121,
	107, 691,
	117, 691,
	129, 691,
	165, 691,
	187, 691,
	214, 691,
	220, 691,
	328, 691,
	-2, 1039,
	-1, 1131,
	379, 1240,
	-2, 1228,
	-1, 1149,
	380, 1152,
	-2, 0,
	-1, 1173,
	169, 627,
	239, 627,
	243, 627,
	-2, 622,
	-1, 1201,
	380, 1152,
	-2, 0,
	-1, 1205,
	107, 691,
	117, 691,
	129, 691,
	165, 691,
	187, 691,
	214, 691,
	220, 691,
	328, 691,
	-2, 792,
	-1, 1348,
	169, 627,
	239, 627,
	243, 627,
	-2, 323,
	-1, 1456,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 945,
	-1, 1457,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 946,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 947,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 948,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 949,
	-1, 1461,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 950,
	-1, 1462,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 951,
	-1, 1463,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 952,
	-1, 1472,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 961,
	-1, 1473,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 962,
	-1, 1474,
	13, 0,
	14, 0,
	15, 0,
	70, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	363, 0,
	364, 0,
	-2, 963,
	-1, 1477,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 968,
	-1, 1483,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 970,
	-1, 1485,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 974,
	-1, 1486,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 975,
	-1, 1487,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 976,
	-1, 1488,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 977,
	-1, 1557,
	132, 1163,
	379, 1263,
	-2, 1256,
	-1, 1558,
	132, 1164,
	-2, 1438,
	-1, 1559,
	132, 1165,
	-2, 1342,
	-1, 1560,
	132, 1166,
	-2, 1303,
	-1, 1561,
	132, 1167,
	-2, 1320,
	-1, 1562,
	132, 1168,
	-2, 1341,
	-1, 1563,
	132, 1169,
	-2, 1394,
	-1, 1639,
	1, 793,
	74, 793,
	107, 793,
	117, 793,
	129, 793,
	133, 793,
	137, 793,
	139, 793,
	156, 793,
	165, 793,
	172, 793,
	183, 793,
	187, 793,
	201, 793,
	214, 793,
	216, 793,
	220, 793,
	261, 793,
	263, 793,
	328, 793,
	336, 793,
	347, 793,
	348, 793,
	357, 793,
	378, 793,
	380, 793,
	382, 793,
	383, 793,
	384, 793,
	-2, 792,
	-1, 1788,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 969,
	-1, 1789,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 971,
	-1, 1794,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 972,
	-1, 1812,
	225, 1123,
	-2, 1125,
	-1, 2045,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 973,
	-1, 2050,
	168, 0,
	-2, 989,
	-1, 2059,
	225, 1124,
	-2, 1126,
	-1, 2101,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1016,
	-1, 2102,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1017,
	-1, 2103,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1018,
	-1, 2107,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1022,
	-1, 2108,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1023,
	-1, 2109,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1024,
	-1, 2244,
	168, 0,
	-2, 990,
	-1, 2247,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 993,
	-1, 2248,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 995,
	-1, 2371,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 994,
	-1, 2372,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	149, 0,
	150, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 996,
	-1, 2379,
	168, 0,
	-2, 1025,
	-1, 2458,
	168, 0,
	-2, 1026,
	-1, 2540,
	36, 0,
	149, 0,
	186, 0,
	286, 0,
	355, 0,
	365, 0,
	-2, 1441,
	-1, 2626,
	379, 1509,
	-2, 498,
}

const sqlPrivate = 57344

const sqlLast = 44376

var sqlAct = [...]int{

	649, 2608, 2622, 2548, 2512, 2623, 2539, 2589, 2339, 2338,
	2549, 1714, 2463, 2550, 2606, 2078, 2298, 1245, 1342, 2023,
	2349, 74, 2194, 184, 1706, 2538, 2312, 608, 2204, 1288,
	1782, 1253, 2228, 2405, 1989, 1634, 1343, 2233, 2161, 639,
	883, 2226, 183, 2385, 1878, 1926, 1203, 183, 988, 1703,
	647, 475, 26, 2160, 1905, 753, 183, 625, 780, 1689,
	2278, 1199, 1684, 1715, 646, 183, 2220, 1688, 1643, 705,
	183, 183, 1991, 1997, 183, 1249, 1678, 183, 1182, 592,
	1877, 1635, 1913, 1652, 2131, 183, 600, 124, 1512, 971,
	1241, 1823, 1513, 1127, 460, 1761, 1213, 1045, 1211, 1183,
	1500, 1521, 619, 1537, 1586, 1497, 1369, 1413, 920, 759,
	1430, 642, 1411, 1435, 457, 970, 1163, 1531, 1159, 1778,
	1686, 990, 917, 1708, 1692, 762, 910, 1685, 1621, 1190,
	1608, 931, 1266, 741, 1553, 1116, 183, 183, 1046, 618,
	509, 1414, 174, 1412, 183, 125, 1372, 641, 1173, 597,
	526, 1260, 124, 487, 529, 179, 522, 907, 126, 739,
	1373, 1172, 1050, 550, 2145, 2313, 1811, 2146, 1268, 1268,
	183, 183, 183, 183, 782, 1268, 2340, 1208, 183, 183,
	2639, 2638, 2631, 2340, 2632, 2632, 2632, 2585, 1707, 2584,
	2583, 1236, 596, 1236, 1236, 2565, 26, 783, 1200, 2311,
	2560, 1061, 1062, 2043, 1729, 596, 2559, 1101, 1102, 1103,
	1729, 2556, 2536, 501, 1232, 1236, 1744, 2535, 591, 2507,
	2007, 1744, 2502, 1737, 1064, 2006, 1236, 1105, 1610, 2501,
	2497, 124, 1514, 2363, 1236, 2489, 2460, 2436, 2433, 2311,
	1737, 2311, 1236, 784, 2644, 2431, 2416, 2415, 1063, 2311,
	1236, 2311, 2393, 2390, 1083, 2373, 1236, 1236, 2334, 1737,
	2332, 2310, 1729, 2630, 1729, 2311, 1061, 1062, 2291, 2246,
	589, 2219, 1236, 1737, 2214, 1683, 1679, 1729, 1683, 767,
	771, 777, 2141, 588, 2054, 2508, 2142, 2017, 1729, 1064,
	606, 1978, 601, 1977, 1902, 1895, 743, 1236, 1236, 1896,
	1893, 1892, 1815, 2134, 1729, 1729, 871, 1679, 1816, 1086,
	1087, 1088, 1089, 1063, 1744, 1891, 1748, 2367, 1069, 1729,
	1729, 756, 1736, 1728, 1682, 1615, 1737, 1729, 1683, 1614,
	2363, 2640, 1281, 745, 1744, 746, 1282, 2134, 2619, 1609,
	1098, 1106, 2034, 1641, 2114, 2056, 1236, 1978, 1781, 1759,
	1351, 1534, 1177, 1516, 1289, 869, 1729, 952, 144, 1061,
	1062, 2314, 1091, 1092, 1093, 1101, 1102, 1103, 141, 1822,
	949, 948, 947, 946, 945, 1094, 944, 1096, 943, 1269,
	1269, 141, 1064, 1069, 1084, 1105, 1269, 942, 1711, 941,
	1848, 1849, 940, 939, 938, 747, 744, 582, 143, 581,
	580, 548, 547, 1535, 546, 545, 1063, 544, 543, 542,
	541, 143, 1083, 1848, 1849, 540, 1866, 1867, 1868, 1080,
	539, 183, 538, 183, 183, 183, 1370, 183, 537, 2243,
	536, 535, 183, 534, 533, 142, 532, 517, 183, 516,
	515, 514, 513, 1863, 1090, 448, 447, 446, 142, 1084,
	445, 183, 183, 183, 183, 183, 135, 1536, 1533, 1085,
	934, 444, 429, 136, 428, 419, 1863, 1086, 1087, 1088,
	1089, 418, 2006, 127, 1061, 1062, 1069, 1099, 1921, 417,
	1609, 597, 183, 935, 416, 409, 127, 408, 167, 875,
	1061, 1062, 166, 165, 164, 163, 183, 1064, 1098, 1106,
	162, 161, 1550, 1548, 1274, 1267, 160, 1854, 159, 1546,
	158, 1404, 183, 1064, 157, 156, 155, 1104, 154, 153,
	599, 1063, 183, 152, 1085, 151, 150, 149, 148, 936,
	1854, 147, 146, 145, 1538, 1096, 1544, 1063, 1376, 983,
	2607, 2612, 1084, 1204, 2610, 2555, 1097, 909, 2537, 2522,
	2517, 2455, 2434, 934, 2277, 2368, 1100, 2276, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 1057, 1095, 141,
	2272, 1869, 2271, 1864, 2356, 887, 935, 889, 914, 893,
	882, 932, 924, 2264, 183, 2263, 2262, 2258, 2257, 986,
	2256, 1069, 458, 1197, 2255, 2249, 1864, 2225, 2128, 143,
	2123, 2122, 1090, 2121, 2064, 913, 913, 1069, 1976, 40,
	1933, 1848, 1849, 40, 1532, 1980, 1929, 1085, 1900, 1897,
	41, 1885, 936, 1876, 41, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 1847, 44, 1844, 1099, 142, 44, 1843, 1841,
	1742, 1285, 1828, 1827, 135, 597, 1812, 1639, 1865, 1057,
	953, 136, 1135, 1202, 1508, 754, 1128, 1084, 1119, 52,
	1201, 880, 1056, 52, 2633, 2617, 2597, 2596, 1041, 1252,
	2080, 1865, 968, 2527, 1710, 2526, 2525, 2492, 965, 2484,
	1040, 2483, 2474, 1739, 2472, 875, 2448, 2447, 63, 2446,
	2629, 981, 63, 1036, 2402, 64, 2381, 482, 65, 64,
	2364, 482, 65, 2343, 1097, 2331, 2317, 1075, 1076, 1082,
	1081, 1077, 1078, 1079, 1100, 984, 1074, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 2269, 2202, 2200, 1854, 2199,
	2197, 67, 1085, 2273, 1042, 67, 1043, 2355, 2169, 183,
	2168, 183, 2149, 2137, 2049, 1966, 589, 1859, 1857, 1858,
	1850, 1851, 1852, 1853, 1855, 1856, 2021, 1053, 1054, 588,
	1960, 1860, 1861, 1862, 183, 183, 1058, 1509, 1946, 1945,
	1859, 1857, 1858, 1850, 1851, 1852, 1853, 1855, 1856, 1931,
	1901, 1875, 2466, 1188, 1837, 597, 1836, 1833, 1808, 1371,
	1777, 1803, 141, 1502, 1280, 1164, 1167, 1626, 1776, 1598,
	1131, 1542, 1181, 1161, 1162, 1165, 1244, 755, 1180, 1171,
	1157, 1156, 1155, 1154, 1153, 1168, 1152, 68, 1151, 1150,
	1149, 68, 143, 1148, 1147, 1146, 1145, 1144, 1186, 1143,
	1142, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	1141, 1946, 1140, 128, 70, 124, 71, 128, 70, 1139,
	71, 1919, 1067, 1068, 1070, 1071, 1123, 1132, 1120, 142,
	141, 1119, 1061, 1062, 141, 707, 964, 135, 481, 934,
	183, 104, 481, 1198, 136, 104, 782, 956, 706, 1176,
	1549, 1547, 183, 928, 2362, 1064, 2251, 1545, 2224, 1206,
	143, 1174, 935, 2144, 143, 2140, 183, 127, 1814, 783,
	1178, 1627, 183, 1128, 183, 1234, 183, 2019, 881, 1063,
	183, 1251, 2369, 1117, 1543, 612, 1202, 1848, 1849, 1747,
	1992, 2366, 2365, 1243, 610, 2359, 2147, 142, 1534, 1221,
	2008, 142, 1169, 1679, 1237, 135, 980, 1170, 936, 135,
	1204, 1969, 136, 1034, 1357, 784, 136, 1286, 1963, 1959,
	1899, 183, 183, 1898, 1039, 1707, 1137, 1787, 934, 1408,
	183, 977, 1746, 183, 2024, 127, 1250, 1769, 2386, 459,
	2081, 1819, 1257, 1852, 1853, 1855, 1856, 1522, 1160, 1028,
	1535, 935, 2615, 2614, 782, 2002, 1061, 1062, 2156, 1214,
	2580, 1215, 2520, 183, 1733, 1214, 2496, 1215, 183, 449,
	434, 1415, 2031, 183, 183, 2581, 183, 783, 183, 1064,
	183, 909, 183, 654, 1653, 2325, 1749, 595, 734, 1029,
	732, 2427, 2426, 183, 730, 1235, 1134, 936, 2424, 183,
	183, 1740, 755, 1063, 1536, 1533, 727, 2423, 183, 2188,
	2185, 2153, 1377, 2152, 736, 1832, 1020, 1271, 1831, 1830,
	1273, 1829, 1790, 784, 1276, 1732, 1674, 1262, 1670, 1259,
	183, 435, 1645, 506, 782, 1667, 2627, 1484, 1295, 1175,
	1216, 2180, 868, 2337, 1602, 594, 1216, 1601, 1445, 1358,
	1704, 1402, 1037, 485, 453, 1571, 2192, 783, 1222, 1366,
	2193, 1656, 1401, 1230, 1283, 1973, 1499, 1499, 1239, 587,
	1538, 2533, 1344, 1069, 124, 1381, 1284, 965, 2171, 1229,
	1219, 1538, 1263, 1345, 1848, 1849, 1348, 1866, 1867, 1868,
	2495, 978, 1444, 1779, 1780, 1362, 1374, 2020, 1220, 584,
	596, 1227, 1392, 784, 488, 1848, 1849, 1014, 1866, 1867,
	1868, 597, 496, 2074, 1417, 1385, 597, 1378, 1382, 1228,
	452, 2242, 586, 2407, 1386, 1060, 1387, 493, 1388, 2572,
	1389, 1279, 1390, 489, 979, 1968, 587, 1863, 1403, 1084,
	1962, 963, 1243, 1295, 1295, 1999, 183, 1015, 183, 1396,
	1398, 183, 709, 1409, 1416, 1410, 2032, 1223, 1863, 2477,
	1202, 1532, 183, 1848, 1849, 490, 589, 1346, 1655, 589,
	589, 782, 1848, 1849, 183, 168, 876, 878, 183, 1426,
	1434, 183, 1427, 1428, 1522, 183, 2037, 2000, 492, 183,
	1538, 1517, 1519, 2485, 783, 183, 2599, 1071, 1957, 597,
	443, 1854, 183, 782, 1506, 437, 436, 183, 593, 1504,
	2580, 708, 1581, 1400, 1085, 183, 1628, 421, 1645, 993,
	438, 1510, 1854, 183, 1507, 1158, 783, 1644, 1699, 1629,
	2609, 2607, 1999, 1114, 183, 2377, 183, 2030, 183, 2552,
	784, 183, 1664, 183, 1646, 183, 183, 2486, 183, 183,
	1672, 1564, 1856, 934, 1657, 1659, 1038, 183, 2172, 1654,
	171, 1676, 954, 1869, 1632, 1033, 2504, 1864, 958, 2071,
	2340, 451, 784, 2430, 2592, 1268, 935, 1217, 1607, 1835,
	1854, 1605, 1709, 1217, 1709, 1622, 1604, 1613, 1864, 1854,
	2178, 2505, 1619, 1623, 1624, 610, 1361, 1360, 1662, 1370,
	1367, 454, 426, 1206, 1668, 491, 728, 1638, 728, 1649,
	1675, 450, 729, 575, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 936, 2072, 728, 1481, 172, 1123, 1214, 738,
	1215, 605, 737, 1019, 2553, 1524, 1792, 1498, 124, 1618,
	1225, 2036, 1865, 2238, 124, 596, 1864, 782, 1556, 1556,
	1569, 2408, 1735, 1724, 1589, 183, 1713, 1380, 1593, 1594,
	1596, 2035, 494, 1865, 1027, 2551, 1730, 1722, 1725, 1723,
	783, 183, 183, 183, 932, 183, 1727, 1734, 1109, 1110,
	1111, 1112, 1113, 1741, 1731, 1364, 1436, 1443, 1122, 1743,
	1752, 2579, 1721, 2554, 1495, 913, 576, 913, 1130, 2577,
	1538, 585, 1754, 2038, 183, 1760, 1059, 2600, 2348, 1216,
	1493, 1165, 1701, 1168, 495, 173, 784, 959, 951, 1001,
	1189, 1865, 962, 1049, 1972, 1755, 410, 1162, 1161, 2590,
	1349, 439, 1860, 1861, 1862, 2605, 1750, 1753, 1479, 1482,
	2418, 1859, 1857, 1858, 1850, 1851, 1852, 1853, 1855, 1856,
	124, 2571, 2417, 1860, 1861, 1862, 1800, 994, 1336, 969,
	2110, 2400, 1859, 1857, 1858, 1850, 1851, 1852, 1853, 1855,
	1856, 974, 1798, 1505, 440, 1478, 1642, 169, 1764, 1193,
	1766, 1365, 2469, 1226, 1768, 2591, 1269, 488, 1773, 2267,
	422, 2155, 1772, 1489, 597, 484, 1942, 995, 1775, 1938,
	992, 1490, 1196, 1491, 441, 1702, 442, 1496, 2593, 577,
	493, 2321, 1258, 1184, 1184, 485, 489, 170, 1191, 420,
	610, 1857, 1858, 1850, 1851, 1852, 1853, 1855, 1856, 1194,
	1247, 1024, 1850, 1851, 1852, 1853, 1855, 1856, 1246, 1395,
	2306, 975, 2070, 1927, 427, 976, 1048, 1192, 490, 423,
	2604, 1048, 2513, 1793, 1193, 1795, 1422, 1791, 2570, 424,
	1352, 1212, 1915, 1044, 2618, 1796, 488, 2111, 597, 1801,
	2350, 492, 1048, 2112, 1821, 1480, 1807, 1196, 2324, 2307,
	885, 183, 782, 2205, 176, 2323, 2401, 183, 183, 493,
	578, 183, 1818, 1620, 411, 489, 183, 974, 1948, 183,
	884, 1025, 2268, 1903, 1194, 783, 1947, 183, 1909, 1195,
	1356, 1785, 1910, 183, 183, 183, 1047, 1928, 1492, 183,
	1916, 1047, 183, 579, 2320, 1494, 974, 490, 183, 183,
	183, 183, 183, 1002, 1923, 1423, 1617, 1616, 183, 504,
	1908, 183, 1047, 1049, 1922, 183, 1217, 974, 1049, 498,
	492, 784, 594, 651, 183, 2234, 1932, 1026, 1882, 1883,
	1884, 1354, 1371, 1368, 183, 412, 183, 975, 183, 183,
	895, 976, 183, 2195, 1355, 2341, 183, 1918, 1939, 1904,
	1797, 183, 1914, 183, 1195, 1958, 2398, 1799, 491, 1971,
	183, 2279, 2302, 1965, 2303, 1979, 975, 1981, 2322, 2132,
	976, 1541, 597, 183, 934, 1806, 2380, 906, 1934, 2266,
	2191, 1879, 1809, 2048, 904, 934, 183, 2399, 1982, 1974,
	1842, 1802, 1986, 1745, 2305, 1681, 1673, 935, 3, 1825,
	1826, 1956, 1295, 2308, 1666, 1032, 480, 34, 935, 1031,
	2016, 479, 33, 610, 610, 494, 478, 30, 957, 477,
	80, 2025, 1061, 1062, 1880, 1044, 183, 2004, 1907, 1770,
	1393, 873, 870, 1384, 1911, 1912, 1540, 491, 1917, 1295,
	1023, 2001, 1138, 936, 1995, 1064, 2547, 1012, 1233, 1874,
	2009, 874, 476, 79, 936, 2510, 1589, 1589, 1589, 473,
	22, 1887, 1330, 2295, 474, 23, 472, 28, 2015, 1063,
	471, 20, 2176, 2051, 2174, 1329, 183, 503, 2154, 2029,
	1988, 2026, 1419, 1990, 1424, 2304, 1705, 497, 1698, 1295,
	1431, 1697, 1983, 1984, 494, 2010, 2011, 1010, 2012, 2013,
	1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455,
	1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465,
	1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475,
	1476, 1477, 2041, 1483, 2039, 1485, 1486, 1487, 1488, 1069,
	2057, 2055, 905, 765, 2066, 2067, 2068, 2027, 2028, 903,
	2060, 34, 1511, 469, 19, 1295, 33, 183, 1008, 1122,
	2033, 30, 2116, 183, 80, 1006, 2087, 1330, 1330, 2082,
	1022, 1278, 183, 183, 2073, 2075, 2076, 1011, 1551, 1552,
	1329, 1329, 1568, 1277, 1580, 1582, 1587, 1590, 1591, 1592,
	1004, 1295, 1295, 2084, 470, 18, 998, 79, 2143, 2117,
	1295, 1295, 2089, 1018, 22, 1425, 1275, 726, 2115, 23,
	1294, 28, 464, 15, 1272, 20, 2148, 465, 16, 183,
	902, 183, 2133, 1270, 1189, 1231, 2167, 1009, 124, 183,
	2190, 1224, 934, 1295, 2135, 2136, 2130, 2166, 1218, 2182,
	2061, 2201, 2441, 2182, 2581, 1943, 1051, 183, 183, 2182,
	2361, 2165, 2198, 2360, 2151, 935, 1375, 2181, 463, 14,
	2221, 2186, 468, 12, 2443, 183, 2179, 2189, 2158, 750,
	2215, 462, 10, 467, 7, 183, 2218, 782, 183, 183,
	2207, 483, 1943, 1193, 782, 1645, 2196, 1645, 1007, 751,
	1783, 603, 2213, 575, 1660, 1005, 1658, 1661, 19, 2150,
	783, 936, 2217, 2206, 1572, 1677, 1196, 783, 2209, 2208,
	2216, 605, 2210, 2240, 1669, 1294, 1294, 1665, 2211, 2245,
	1003, 183, 1191, 1052, 2222, 2175, 997, 2177, 1771, 985,
	1017, 575, 2018, 1194, 2139, 2235, 466, 6, 2479, 18,
	731, 733, 2241, 2314, 604, 996, 784, 461, 5, 605,
	901, 1192, 2457, 784, 505, 2429, 1784, 15, 2280, 2124,
	1406, 1407, 16, 1055, 1671, 1663, 752, 2509, 2346, 1712,
	1700, 1696, 2265, 1606, 1347, 183, 576, 1287, 183, 1332,
	1061, 1062, 1065, 1066, 1067, 1068, 1070, 1071, 782, 183,
	183, 2588, 2603, 183, 183, 183, 1848, 1849, 1061, 1062,
	2392, 1295, 1030, 14, 2285, 1061, 1062, 12, 2223, 634,
	183, 783, 2129, 1195, 576, 183, 10, 183, 7, 183,
	183, 183, 1757, 1756, 2289, 1907, 183, 1063, 1064, 183,
	2315, 2286, 934, 2184, 1436, 2085, 2282, 2077, 1331, 2187,
	183, 183, 2284, 1436, 2090, 1757, 2287, 934, 2167, 2022,
	2336, 180, 1063, 1924, 2294, 935, 414, 784, 1894, 2166,
	1758, 1603, 2318, 1600, 1599, 430, 1530, 1125, 2253, 2069,
	935, 1985, 1135, 2165, 455, 1133, 2120, 2167, 1021, 499,
	180, 6, 2167, 507, 1332, 1332, 512, 1016, 2166, 577,
	1013, 2342, 5, 2166, 531, 2352, 2347, 999, 2353, 961,
	1350, 936, 2165, 2345, 583, 2283, 2357, 2165, 2406, 486,
	1383, 1000, 2370, 1788, 1789, 1920, 936, 2290, 2351, 1794,
	1625, 2503, 624, 2259, 1834, 2462, 2376, 577, 1539, 2358,
	1136, 56, 2163, 628, 2296, 2157, 183, 2319, 183, 2382,
	782, 183, 1691, 1331, 1331, 742, 742, 1690, 785, 183,
	1359, 1813, 2281, 414, 650, 782, 1555, 1820, 1437, 725,
	1824, 652, 1292, 783, 653, 1293, 2389, 2344, 602, 413,
	578, 2391, 1166, 640, 2375, 1290, 929, 1838, 783, 414,
	414, 775, 414, 2410, 1716, 1363, 2412, 180, 872, 183,
	2409, 2167, 934, 1503, 1243, 2394, 183, 1520, 2396, 1817,
	1129, 620, 2166, 579, 183, 183, 934, 934, 578, 784,
	183, 1122, 632, 2411, 631, 935, 2165, 2182, 1587, 1587,
	1587, 1295, 1518, 2167, 784, 955, 1925, 183, 2440, 935,
	935, 1998, 183, 2354, 2166, 2428, 2449, 2432, 2435, 183,
	2439, 579, 2451, 2452, 1184, 2453, 2450, 1421, 2165, 610,
	1774, 2459, 2467, 1572, 1572, 2444, 1418, 1994, 2173, 425,
	1845, 936, 927, 2438, 183, 183, 760, 2465, 2473, 1578,
	2468, 183, 1570, 1566, 1035, 936, 936, 1295, 1187, 934,
	2475, 1115, 1717, 982, 183, 2005, 1738, 1179, 934, 934,
	1429, 749, 769, 773, 748, 779, 2456, 2490, 2616, 2421,
	2422, 1353, 935, 1751, 1108, 2488, 2499, 2500, 597, 2494,
	2491, 935, 935, 183, 1188, 183, 1107, 735, 183, 2471,
	782, 973, 972, 2442, 1248, 1941, 2598, 2493, 2478, 1572,
	1572, 1572, 2170, 1295, 2476, 2519, 140, 2454, 137, 139,
	138, 1970, 1996, 783, 83, 2482, 2516, 32, 936, 183,
	31, 2528, 103, 2388, 2530, 2532, 1330, 936, 936, 102,
	101, 2545, 2534, 2529, 2014, 2546, 183, 183, 183, 1329,
	100, 2544, 2167, 99, 183, 98, 2557, 97, 2521, 96,
	95, 610, 610, 2166, 94, 2566, 2531, 2569, 183, 784,
	2414, 93, 2564, 1330, 610, 2567, 2568, 2165, 92, 91,
	90, 2578, 2582, 2576, 2425, 89, 1329, 88, 87, 86,
	85, 2040, 527, 524, 82, 81, 1431, 29, 25, 107,
	24, 78, 2044, 1804, 1805, 2045, 2595, 77, 27, 2594,
	531, 2587, 531, 891, 531, 2602, 896, 2050, 17, 2586,
	11, 899, 2515, 1330, 21, 61, 2058, 414, 782, 2601,
	782, 62, 60, 59, 2062, 58, 1329, 2014, 13, 54,
	531, 531, 414, 921, 872, 2620, 2621, 1848, 1849, 53,
	51, 783, 2634, 783, 2628, 50, 2637, 2086, 2636, 49,
	1291, 2088, 2643, 48, 47, 2635, 2645, 9, 2641, 2642,
	106, 531, 2232, 2561, 2562, 2563, 45, 8, 43, 1871,
	1872, 1873, 42, 105, 1294, 531, 2611, 119, 2613, 1330,
	116, 118, 115, 117, 2118, 2119, 121, 784, 120, 784,
	2420, 960, 1329, 2125, 2126, 2127, 113, 111, 112, 114,
	2506, 531, 110, 109, 122, 39, 38, 1848, 1849, 37,
	36, 1294, 35, 2, 1, 1330, 1330, 1572, 1572, 0,
	2138, 0, 0, 0, 1330, 1330, 2523, 2524, 1329, 1329,
	773, 0, 0, 0, 0, 0, 0, 1329, 1329, 0,
	0, 0, 0, 0, 0, 779, 0, 0, 1848, 1849,
	2159, 1866, 1867, 1868, 1854, 1291, 1291, 1330, 0, 0,
	0, 1294, 0, 414, 2053, 0, 0, 0, 0, 0,
	1329, 0, 0, 0, 0, 0, 1572, 1572, 1572, 1572,
	1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
	1572, 1572, 1572, 1572, 1572, 0, 1572, 0, 0, 0,
	0, 1863, 0, 0, 1184, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 0, 0, 0, 0, 0, 0,
	1864, 0, 0, 0, 1854, 0, 0, 1294, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2244, 0, 0, 0, 2247, 2248, 0,
	0, 2250, 0, 1294, 1294, 1854, 0, 0, 2252, 0,
	2254, 0, 1294, 1294, 0, 0, 773, 0, 0, 0,
	1332, 0, 0, 0, 0, 0, 2261, 2046, 2047, 0,
	1864, 0, 0, 0, 0, 1865, 41, 0, 0, 1848,
	1849, 0, 1331, 0, 0, 1294, 1869, 0, 0, 44,
	0, 0, 0, 0, 0, 629, 75, 0, 512, 2270,
	742, 0, 0, 0, 0, 1330, 0, 0, 0, 0,
	1332, 1864, 0, 0, 0, 0, 0, 0, 1329, 1331,
	0, 0, 0, 414, 414, 0, 2091, 2092, 2093, 2094,
	2095, 2096, 2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104,
	2105, 2106, 2107, 2108, 2109, 1865, 2113, 0, 0, 2316,
	0, 1061, 1062, 482, 0, 0, 0, 0, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 0, 0, 1331,
	0, 0, 0, 0, 1064, 0, 1332, 1850, 1851, 1852,
	1853, 1855, 1856, 0, 0, 0, 1865, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 1854, 0, 1063, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1332, 1332, 0, 0, 0, 0, 0, 0,
	590, 1332, 1332, 598, 0, 0, 0, 2371, 2372, 180,
	0, 0, 0, 0, 0, 1331, 760, 1209, 0, 761,
	75, 414, 0, 0, 1859, 1857, 1858, 1850, 1851, 1852,
	1853, 1855, 1856, 1294, 1332, 1256, 0, 0, 2384, 0,
	0, 414, 1864, 414, 2387, 414, 0, 0, 1069, 1264,
	0, 1331, 1331, 68, 0, 0, 1860, 1861, 1862, 0,
	1331, 1331, 0, 0, 0, 1859, 1857, 1858, 1850, 1851,
	1852, 1853, 1855, 1856, 0, 0, 0, 0, 0, 128,
	70, 0, 71, 0, 0, 0, 0, 0, 2419, 0,
	531, 180, 0, 1331, 0, 0, 141, 0, 0, 180,
	0, 0, 531, 0, 481, 1330, 0, 104, 0, 0,
	0, 0, 0, 0, 1084, 0, 0, 1865, 1329, 0,
	0, 0, 0, 0, 0, 0, 143, 0, 0, 0,
	0, 0, 531, 0, 1242, 0, 0, 531, 0, 0,
	0, 0, 180, 531, 0, 531, 0, 531, 0, 531,
	0, 531, 1572, 0, 773, 0, 1261, 0, 1261, 0,
	0, 1330, 1394, 142, 0, 0, 0, 2470, 531, 531,
	0, 135, 0, 0, 1329, 0, 0, 414, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 1572, 2306, 0, 0, 2299, 0, 531,
	0, 127, 1332, 0, 0, 0, 0, 0, 2297, 0,
	0, 610, 0, 2301, 0, 0, 0, 1330, 1858, 1850,
	1851, 1852, 1853, 1855, 1856, 0, 0, 0, 0, 0,
	1329, 0, 0, 2307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1294, 0, 0, 2300, 0, 0, 0,
	0, 1331, 0, 0, 0, 0, 1572, 0, 0, 2543,
	2543, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2558, 0, 0, 0, 0,
	1405, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0,
	0, 0, 0, 0, 1291, 2543, 0, 0, 0, 1294,
	0, 0, 0, 0, 0, 512, 0, 742, 0, 0,
	872, 0, 2379, 0, 0, 0, 0, 0, 0, 0,
	0, 414, 0, 0, 0, 598, 0, 0, 0, 0,
	0, 1291, 0, 1637, 0, 0, 2302, 414, 2303, 0,
	414, 0, 0, 2543, 1650, 0, 1848, 1849, 414, 1866,
	1867, 1868, 0, 2403, 414, 1294, 0, 0, 0, 0,
	0, 414, 2052, 0, 0, 0, 1680, 0, 2305, 0,
	0, 0, 2624, 0, 1687, 0, 0, 2308, 0, 0,
	0, 1291, 872, 0, 2624, 0, 0, 2624, 2624, 0,
	0, 0, 0, 414, 0, 1720, 0, 531, 0, 1863,
	531, 0, 531, 0, 414, 414, 0, 1726, 872, 0,
	0, 0, 1332, 0, 0, 0, 1650, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2458, 0, 0, 0,
	0, 0, 0, 0, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	760, 0, 0, 1640, 0, 0, 0, 0, 0, 2304,
	0, 773, 0, 1854, 0, 0, 590, 773, 1332, 0,
	0, 1331, 0, 0, 779, 0, 0, 0, 0, 0,
	0, 0, 0, 1291, 1291, 0, 0, 1118, 0, 1121,
	0, 0, 1291, 1291, 0, 0, 1126, 0, 0, 0,
	0, 0, 0, 0, 1869, 0, 1718, 0, 0, 0,
	0, 0, 0, 0, 1762, 0, 0, 779, 779, 0,
	0, 0, 0, 0, 1332, 1291, 0, 1331, 0, 1864,
	414, 414, 414, 0, 414, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 0, 0, 0, 0, 1094,
	0, 0, 0, 414, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 0, 1848, 1849, 0, 1866, 1867, 1868,
	0, 0, 0, 1331, 0, 0, 0, 0, 0, 0,
	1063, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 1080, 1865, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 1863, 0, 1205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1765, 779, 1767, 0, 773, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1786, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 0, 0, 0, 0,
	0, 1854, 0, 1291, 1860, 1861, 1862, 0, 0, 0,
	0, 1104, 0, 1859, 1857, 1858, 1850, 1851, 1852, 1853,
	1855, 1856, 0, 0, 1870, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 1084, 0, 0, 0,
	0, 0, 1869, 0, 0, 0, 0, 0, 0, 0,
	414, 0, 0, 0, 0, 0, 414, 414, 0, 0,
	414, 0, 1095, 0, 0, 1637, 0, 1864, 1637, 0,
	0, 0, 0, 0, 0, 0, 1930, 0, 0, 0,
	0, 0, 414, 1936, 1937, 0, 0, 0, 1650, 0,
	0, 1944, 0, 0, 0, 0, 1090, 1949, 1950, 1952,
	1954, 1955, 0, 0, 0, 0, 0, 414, 0, 0,
	1964, 1085, 0, 0, 1967, 0, 0, 0, 0, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 1256, 0, 1256, 0, 531, 531, 0,
	0, 414, 1865, 1848, 1849, 1993, 1866, 1867, 1868, 0,
	414, 0, 2003, 0, 0, 0, 0, 0, 0, 414,
	0, 0, 0, 760, 0, 0, 0, 0, 0, 760,
	760, 0, 1762, 760, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1762, 0, 0, 0, 0,
	0, 0, 0, 75, 0, 1935, 1863, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	1961, 0, 0, 1291, 0, 414, 590, 1890, 0, 590,
	590, 0, 1860, 1861, 1862, 0, 1975, 0, 0, 0,
	0, 1859, 1857, 1858, 1850, 1851, 1852, 1853, 1855, 1856,
	0, 0, 0, 0, 1987, 0, 0, 0, 0, 0,
	1854, 0, 0, 1242, 0, 0, 0, 0, 0, 0,
	0, 0, 1242, 0, 0, 2079, 0, 0, 0, 1291,
	0, 0, 1501, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 0,
	1121, 1869, 0, 0, 0, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 0, 0, 44,
	0, 0, 0, 0, 0, 1291, 0, 0, 2042, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 0, 52, 414, 0, 0, 0,
	0, 0, 1637, 0, 0, 0, 0, 761, 0, 0,
	0, 872, 1637, 0, 0, 0, 55, 0, 0, 0,
	57, 0, 0, 1205, 63, 0, 2162, 133, 0, 0,
	0, 64, 0, 123, 65, 0, 75, 0, 0, 2183,
	0, 1865, 0, 2183, 75, 0, 0, 0, 0, 2183,
	0, 0, 0, 0, 0, 0, 66, 0, 1650, 0,
	1256, 0, 0, 0, 0, 0, 0, 67, 2203, 0,
	0, 0, 0, 0, 0, 0, 75, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 414, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 0, 75, 2229, 0, 0, 0, 0, 760,
	0, 0, 0, 0, 2231, 0, 0, 2236, 414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1860, 1861, 1862, 0, 0, 0, 0, 0, 0,
	1859, 1857, 1858, 1850, 1851, 1852, 1853, 1855, 1856, 0,
	0, 0, 0, 68, 0, 0, 0, 0, 0, 69,
	2260, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 128,
	70, 0, 71, 0, 72, 0, 134, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 141, 0, 0, 1718,
	760, 0, 0, 0, 84, 0, 0, 104, 0, 75,
	0, 40, 0, 0, 414, 0, 131, 872, 0, 0,
	0, 0, 41, 0, 0, 0, 143, 0, 1637, 872,
	0, 2237, 2292, 2293, 1650, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 2162, 872,
	0, 0, 0, 0, 2326, 129, 2327, 0, 414, 2329,
	2330, 52, 0, 142, 0, 414, 0, 0, 2335, 0,
	0, 135, 0, 0, 0, 0, 0, 2162, 136, 872,
	1687, 0, 2162, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 0, 0, 0, 0, 64, 1501, 482,
	65, 127, 0, 0, 4, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 760, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 0, 0, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1105, 0,
	0, 2328, 0, 0, 0, 1650, 0, 2395, 2333, 0,
	2397, 0, 0, 0, 0, 0, 0, 0, 414, 1063,
	0, 2162, 1121, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 1080, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2183, 0, 68,
	0, 0, 0, 2162, 0, 0, 761, 0, 414, 0,
	0, 0, 761, 761, 0, 872, 761, 0, 0, 0,
	0, 0, 0, 2229, 2229, 128, 70, 0, 71, 872,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	0, 0, 141, 0, 0, 0, 2464, 1763, 0, 0,
	481, 1637, 0, 104, 0, 0, 0, 0, 1256, 75,
	0, 1098, 1106, 0, 0, 0, 0, 75, 0, 0,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	1104, 2404, 0, 2480, 2481, 0, 0, 0, 0, 0,
	414, 0, 75, 0, 0, 0, 75, 0, 1096, 0,
	0, 0, 0, 2498, 0, 1084, 598, 0, 0, 142,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 2437, 0, 0, 136, 0, 0, 0, 0, 0,
	0, 1095, 2514, 0, 872, 0, 0, 414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 0, 2162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 2464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 872, 872, 872, 0, 0,
	0, 0, 0, 414, 0, 0, 0, 0, 1099, 0,
	0, 0, 0, 2487, 0, 0, 0, 2575, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2518, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 0, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 1889, 75, 0, 0,
	0, 0, 0, 0, 0, 0, 1718, 0, 0, 0,
	0, 0, 761, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1529, 0, 648, 637, 638, 635, 636, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 1526, 187, 0, 0, 0, 0, 665, 630, 0,
	0, 0, 188, 189, 190, 350, 680, 352, 681, 191,
	682, 683, 0, 192, 356, 357, 193, 194, 633, 664,
	684, 685, 360, 761, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 1527, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	761, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	75, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 700, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 701, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 702, 703, 0, 0, 329, 330,
	671, 672, 643, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 704, 1525, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 617, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 615, 0, 0, 0, 0, 613,
	614, 1528, 0, 0, 0, 0, 0, 0, 623, 1523,
	0, 0, 0, 0, 626, 0, 0, 0, 0, 0,
	781, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2445, 185, 186, 787, 187,
	788, 789, 790, 791, 349, 792, 793, 794, 795, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 796,
	192, 356, 357, 193, 194, 797, 798, 358, 359, 360,
	799, 195, 361, 800, 786, 801, 196, 197, 198, 0,
	200, 201, 202, 199, 802, 203, 0, 204, 205, 803,
	710, 206, 207, 208, 804, 805, 807, 806, 808, 809,
	810, 209, 210, 415, 211, 362, 212, 363, 364, 811,
	213, 812, 214, 813, 215, 814, 815, 216, 217, 816,
	218, 817, 1121, 818, 365, 219, 221, 220, 222, 366,
	367, 819, 711, 820, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 821, 226, 822, 823, 712,
	824, 227, 371, 825, 372, 826, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 714, 827, 375, 235, 828,
	232, 829, 713, 233, 376, 234, 377, 378, 379, 380,
	381, 830, 382, 831, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 832, 243, 242, 833, 385, 717,
	244, 245, 718, 834, 246, 247, 835, 836, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 837, 838, 839, 387, 258, 388, 259, 260,
	840, 261, 841, 842, 262, 843, 844, 263, 389, 721,
	264, 722, 390, 265, 266, 267, 268, 269, 845, 270,
	391, 271, 392, 272, 846, 273, 274, 275, 276, 277,
	393, 278, 279, 847, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 848, 292, 723,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	849, 305, 306, 395, 304, 307, 308, 850, 309, 296,
	297, 310, 724, 311, 396, 397, 312, 851, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 852, 320,
	853, 321, 322, 323, 324, 325, 326, 327, 328, 854,
	400, 401, 402, 855, 856, 329, 330, 403, 404, 857,
	331, 332, 333, 334, 858, 859, 335, 336, 337, 338,
	860, 339, 861, 405, 340, 341, 342, 406, 407, 862,
	863, 343, 864, 865, 866, 867, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 781, 0, 0,
	0, 0, 0, 1630, 0, 0, 0, 0, 0, 0,
	0, 0, 1631, 185, 186, 787, 187, 788, 789, 790,
	791, 349, 792, 793, 794, 795, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 796, 192, 356, 357,
	193, 194, 797, 798, 358, 359, 360, 799, 195, 361,
	800, 786, 801, 196, 197, 198, 0, 200, 201, 202,
	199, 802, 203, 0, 204, 205, 803, 710, 206, 207,
	208, 804, 805, 807, 806, 808, 809, 810, 209, 210,
	415, 211, 362, 212, 363, 364, 811, 213, 812, 214,
	813, 215, 814, 815, 216, 217, 816, 218, 817, 0,
	818, 365, 219, 221, 220, 222, 366, 367, 819, 711,
	820, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 821, 226, 822, 823, 712, 824, 227, 371,
	825, 372, 826, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 714, 827, 375, 235, 828, 232, 829, 713,
	233, 376, 234, 377, 378, 379, 380, 381, 830, 382,
	831, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 832, 243, 242, 833, 385, 717, 244, 245, 718,
	834, 246, 247, 835, 836, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 837,
	838, 839, 387, 258, 388, 259, 260, 840, 261, 841,
	842, 262, 843, 844, 263, 389, 721, 264, 722, 390,
	265, 266, 267, 268, 269, 845, 270, 391, 271, 392,
	272, 846, 273, 274, 275, 276, 277, 393, 278, 279,
	847, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 848, 292, 723, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 849, 305, 306,
	395, 304, 307, 308, 850, 309, 296, 297, 310, 724,
	311, 396, 397, 312, 851, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 852, 320, 853, 321, 322,
	323, 324, 325, 326, 327, 328, 854, 400, 401, 402,
	855, 856, 329, 330, 403, 404, 857, 331, 332, 333,
	334, 858, 859, 335, 336, 337, 338, 860, 339, 861,
	405, 340, 341, 342, 406, 407, 862, 863, 343, 864,
	865, 866, 867, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 781, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2288, 185, 186, 787, 187, 788, 789, 790, 791, 349,
	792, 793, 794, 795, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 796, 192, 356, 357, 193, 194,
	797, 798, 358, 359, 360, 799, 195, 361, 800, 786,
	801, 196, 197, 198, 0, 200, 201, 202, 199, 802,
	203, 0, 204, 205, 803, 710, 206, 207, 208, 804,
	805, 807, 806, 808, 809, 810, 209, 210, 415, 211,
	362, 212, 363, 364, 811, 213, 812, 214, 813, 215,
	814, 815, 216, 217, 816, 218, 817, 0, 818, 365,
	219, 221, 220, 222, 366, 367, 819, 711, 820, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	821, 226, 822, 823, 712, 824, 227, 371, 825, 372,
	826, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	714, 827, 375, 235, 828, 232, 829, 713, 233, 376,
	234, 377, 378, 379, 380, 381, 830, 382, 831, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 832,
	243, 242, 833, 385, 717, 244, 245, 718, 834, 246,
	247, 835, 836, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 837, 838, 839,
	387, 258, 388, 259, 260, 840, 261, 841, 842, 262,
	843, 844, 263, 389, 721, 264, 722, 390, 265, 266,
	267, 268, 269, 845, 270, 391, 271, 392, 272, 846,
	273, 274, 275, 276, 277, 393, 278, 279, 847, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 848, 292, 723, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 849, 305, 306, 395, 304,
	307, 308, 850, 309, 296, 297, 310, 724, 311, 396,
	397, 312, 851, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 852, 320, 853, 321, 322, 323, 324,
	325, 326, 327, 328, 854, 400, 401, 402, 855, 856,
	329, 330, 403, 404, 857, 331, 332, 333, 334, 858,
	859, 335, 336, 337, 338, 860, 339, 861, 405, 340,
	341, 342, 406, 407, 862, 863, 343, 864, 865, 866,
	867, 344, 345, 346, 347, 348, 0, 0, 781, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1238, 185, 186, 787, 187, 788, 789,
	790, 791, 349, 792, 793, 794, 795, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 796, 192, 356,
	357, 193, 194, 797, 798, 358, 359, 360, 799, 195,
	361, 800, 786, 801, 196, 197, 198, 0, 200, 201,
	202, 199, 802, 203, 0, 204, 205, 803, 710, 206,
	207, 208, 804, 805, 807, 806, 808, 809, 810, 209,
	210, 415, 211, 362, 212, 363, 364, 811, 213, 812,
	214, 813, 215, 814, 815, 216, 217, 816, 218, 817,
	0, 818, 365, 219, 221, 220, 222, 366, 367, 819,
	711, 820, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 821, 226, 822, 823, 712, 824, 227,
	371, 825, 372, 826, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 714, 827, 375, 235, 828, 232, 829,
	713, 233, 376, 234, 377, 378, 379, 380, 381, 830,
	382, 831, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 832, 243, 242, 833, 385, 717, 244, 245,
	718, 834, 246, 247, 835, 836, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	837, 838, 839, 387, 258, 388, 259, 260, 840, 261,
	841, 842, 262, 843, 844, 263, 389, 721, 264, 722,
	390, 265, 266, 267, 268, 269, 845, 270, 391, 271,
	392, 272, 846, 273, 274, 275, 276, 277, 393, 278,
	279, 847, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 848, 292, 723, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 849, 305,
	306, 395, 304, 307, 308, 850, 309, 296, 297, 310,
	724, 311, 396, 397, 312, 851, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 852, 320, 853, 321,
	322, 323, 324, 325, 326, 327, 328, 854, 400, 401,
	402, 855, 856, 329, 330, 403, 404, 857, 331, 332,
	333, 334, 858, 859, 335, 336, 337, 338, 860, 339,
	861, 405, 340, 341, 342, 406, 407, 862, 863, 343,
	864, 865, 866, 867, 344, 345, 346, 347, 348, 648,
	637, 638, 635, 636, 627, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 665, 630, 0, 0, 0, 188, 189,
	190, 350, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 611, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 141,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 143,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 937, 704, 0, 0,
	343, 0, 0, 0, 135, 344, 345, 346, 347, 348,
	617, 136, 599, 0, 648, 637, 638, 635, 636, 627,
	615, 0, 0, 0, 0, 613, 614, 0, 0, 0,
	185, 186, 0, 187, 1124, 0, 0, 0, 665, 630,
	626, 0, 0, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 141, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 143, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 937, 704, 0, 0, 343, 0, 0, 0, 135,
	344, 345, 346, 347, 348, 617, 136, 648, 637, 638,
	635, 636, 627, 0, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 185, 186, 0, 187, 0, 0, 1124,
	0, 665, 630, 0, 0, 626, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	0, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 141, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 143, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 937, 704, 0, 0, 343, 0,
	0, 0, 135, 344, 345, 346, 347, 348, 617, 136,
	648, 637, 638, 635, 636, 627, 0, 0, 615, 0,
	0, 0, 0, 613, 614, 0, 185, 186, 0, 187,
	0, 0, 1124, 0, 665, 630, 0, 0, 626, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 1583,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 1588, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 1584, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 1585, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 607, 0, 648, 637, 638, 635, 636, 627,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 0,
	185, 186, 0, 187, 0, 623, 0, 0, 665, 630,
	0, 626, 0, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 611, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 609, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 617, 0, 648, 637, 638,
	635, 636, 627, 0, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 185, 186, 0, 187, 0, 0, 623,
	0, 665, 630, 0, 0, 626, 188, 189, 190, 350,
	680, 352, 681, 191, 682, 683, 0, 192, 356, 357,
	193, 194, 633, 664, 684, 685, 360, 0, 195, 676,
	0, 656, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 657, 658, 660, 0, 659, 661, 209, 210,
	415, 211, 686, 212, 687, 688, 0, 213, 0, 214,
	0, 215, 0, 0, 679, 217, 0, 218, 0, 0,
	0, 621, 219, 221, 220, 222, 666, 667, 644, 711,
	0, 0, 0, 0, 0, 223, 224, 689, 690, 691,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 677,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	673, 675, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 692, 234, 693, 694, 695, 696, 697, 0, 655,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 678, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 616,
	2212, 645, 674, 258, 698, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 668,
	265, 266, 267, 268, 269, 0, 270, 669, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 699, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 622,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 662, 309, 296, 297, 310, 724,
	311, 700, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 701, 316, 317, 670, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 702, 703,
	0, 0, 329, 330, 671, 672, 643, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 663, 339, 0,
	405, 340, 341, 342, 406, 704, 0, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 617, 0,
	648, 637, 638, 635, 636, 627, 0, 0, 615, 0,
	0, 0, 0, 613, 614, 1185, 185, 186, 0, 187,
	0, 0, 623, 0, 665, 630, 0, 0, 626, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 1433,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 1432, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 0, 648, 637, 638, 635, 636, 627, 0,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 0, 187, 0, 0, 623, 0, 665, 630, 0,
	0, 626, 188, 189, 190, 350, 680, 352, 681, 191,
	682, 683, 0, 192, 356, 357, 193, 194, 633, 664,
	684, 685, 360, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 208, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 686, 212,
	687, 688, 611, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 609, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 700, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 701, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 702, 703, 0, 0, 329, 330,
	671, 672, 643, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 704, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 617, 0, 648, 637, 638, 635,
	636, 627, 0, 0, 615, 0, 0, 0, 0, 613,
	614, 0, 185, 186, 0, 187, 0, 0, 623, 0,
	665, 630, 0, 0, 626, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 2625, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 2626, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 617, 0, 648,
	637, 638, 635, 636, 627, 0, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 185, 186, 0, 187, 0,
	0, 623, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 350, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 611, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 406, 704, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	617, 0, 648, 637, 638, 635, 636, 627, 0, 0,
	615, 0, 0, 0, 0, 613, 614, 0, 185, 186,
	0, 187, 0, 0, 623, 0, 665, 630, 0, 0,
	626, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 2065, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 617, 0, 648, 637, 638, 635, 636,
	627, 0, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 185, 186, 0, 187, 0, 0, 623, 0, 665,
	630, 0, 0, 626, 188, 189, 190, 350, 680, 352,
	681, 191, 682, 683, 0, 192, 356, 357, 193, 194,
	633, 664, 684, 685, 360, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 415, 211,
	686, 212, 687, 688, 0, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 621,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 616, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 622, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 662, 309, 296, 297, 310, 724, 311, 700,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 701,
	316, 317, 670, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 702, 703, 0, 0,
	329, 330, 671, 672, 643, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 663, 339, 0, 405, 340,
	341, 342, 406, 704, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 617, 0, 648, 637,
	638, 635, 636, 627, 0, 0, 615, 0, 0, 0,
	0, 613, 614, 1185, 185, 186, 0, 187, 0, 0,
	623, 0, 665, 630, 0, 0, 626, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 1588, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 617,
	1633, 0, 648, 637, 638, 635, 636, 627, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 0, 185, 186,
	0, 187, 0, 623, 0, 0, 665, 630, 0, 626,
	0, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 617, 1597, 0, 648, 637, 638, 635,
	636, 627, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 0, 185, 186, 0, 187, 0, 623, 0, 0,
	665, 630, 0, 626, 0, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 617, 1595, 0,
	648, 637, 638, 635, 636, 627, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 0, 185, 186, 0, 187,
	0, 623, 0, 0, 665, 630, 0, 626, 0, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 1579, 0, 648, 637, 638, 635, 636, 627,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 0,
	185, 186, 0, 187, 0, 623, 0, 0, 665, 630,
	0, 626, 0, 188, 189, 190, 350, 680, 352, 681,
	191, 682, 683, 0, 192, 356, 357, 193, 194, 633,
	664, 684, 685, 360, 0, 195, 676, 0, 656, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 657,
	658, 660, 0, 659, 661, 209, 210, 415, 211, 686,
	212, 687, 688, 0, 213, 0, 214, 0, 215, 0,
	0, 679, 217, 0, 218, 0, 0, 0, 621, 219,
	221, 220, 222, 666, 667, 644, 711, 0, 0, 0,
	0, 0, 223, 224, 689, 690, 691, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 677, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 673, 675, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 692, 234,
	693, 694, 695, 696, 697, 0, 655, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 678, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 616, 0, 645, 674,
	258, 698, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 668, 265, 266, 267,
	268, 269, 0, 270, 669, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 699, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 622, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 662, 309, 296, 297, 310, 724, 311, 700, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 701, 316,
	317, 670, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 702, 703, 0, 0, 329,
	330, 671, 672, 643, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 663, 339, 0, 405, 340, 341,
	342, 406, 704, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 617, 1567, 0, 648, 637,
	638, 635, 636, 627, 0, 615, 0, 0, 0, 0,
	613, 614, 0, 0, 185, 186, 0, 187, 0, 623,
	0, 0, 665, 630, 0, 626, 0, 188, 189, 190,
	350, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 208, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 714, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 715, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	718, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	724, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 617,
	1565, 0, 1557, 637, 638, 635, 636, 627, 0, 615,
	0, 0, 0, 0, 613, 614, 0, 0, 185, 186,
	0, 187, 0, 623, 0, 0, 665, 630, 0, 626,
	0, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 1560, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	1561, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 1562, 1559, 253, 386, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 1563, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 1558, 348, 617, 1554, 0, 1557, 637, 638, 635,
	636, 627, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 0, 185, 186, 0, 187, 0, 623, 0, 0,
	665, 630, 0, 626, 0, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 1560, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 1561, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 1562, 1559,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 1563, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 1558, 348, 617, 0, 648,
	637, 638, 635, 636, 627, 0, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 185, 186, 0, 187, 0,
	0, 623, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 350, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 208, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 406, 704, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	617, 0, 648, 637, 638, 635, 636, 627, 0, 0,
	615, 0, 0, 0, 0, 613, 614, 0, 185, 186,
	1420, 187, 1128, 0, 623, 0, 665, 630, 0, 0,
	626, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 616, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 622, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 617, 879, 0, 648, 637, 638, 635,
	636, 627, 0, 615, 0, 0, 0, 0, 613, 614,
	0, 0, 185, 186, 0, 187, 0, 623, 0, 0,
	665, 630, 0, 626, 0, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 617, 877, 0,
	648, 637, 638, 635, 636, 627, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 0, 185, 186, 0, 187,
	0, 623, 0, 0, 665, 630, 0, 626, 0, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 633, 664, 684, 685, 360,
	0, 195, 676, 0, 656, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 657, 658, 660, 0, 659,
	661, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 621, 219, 221, 220, 222, 666,
	667, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 677, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 673, 675, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 678, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 616, 0, 645, 674, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 668, 265, 266, 267, 268, 269, 0, 270,
	669, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 622, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 662, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 670, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 671, 672, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	663, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 617, 0, 648, 637, 638, 635, 636, 627, 0,
	0, 615, 0, 0, 0, 0, 613, 614, 0, 185,
	186, 0, 187, 0, 0, 623, 0, 665, 630, 0,
	0, 626, 188, 189, 190, 350, 680, 352, 681, 191,
	682, 683, 0, 192, 356, 357, 193, 194, 633, 664,
	684, 685, 360, 0, 195, 676, 0, 656, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 710, 206, 207, 2542, 0, 657, 658,
	660, 0, 659, 661, 209, 210, 415, 211, 686, 212,
	687, 688, 0, 213, 0, 214, 0, 215, 0, 0,
	679, 217, 0, 218, 0, 0, 0, 621, 219, 221,
	220, 222, 666, 667, 644, 711, 0, 0, 0, 0,
	0, 223, 224, 689, 690, 691, 0, 225, 0, 226,
	0, 0, 712, 0, 227, 677, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 673, 675, 714, 0,
	375, 235, 0, 232, 0, 713, 233, 692, 234, 693,
	694, 695, 696, 697, 0, 655, 0, 715, 236, 237,
	238, 716, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 678, 717, 244, 245, 718, 0, 246, 247, 0,
	0, 248, 0, 249, 719, 250, 251, 253, 386, 252,
	720, 254, 255, 257, 256, 616, 0, 645, 674, 258,
	698, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 721, 264, 722, 668, 265, 266, 267, 268,
	269, 0, 270, 669, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 699, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 723, 293, 294, 622, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	662, 309, 296, 297, 310, 724, 311, 700, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 701, 316, 317,
	670, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 702, 703, 0, 0, 329, 330,
	671, 672, 643, 331, 332, 2541, 334, 0, 0, 335,
	336, 337, 338, 663, 339, 0, 405, 340, 341, 342,
	406, 704, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 617, 0, 648, 637, 638, 635,
	636, 627, 0, 0, 615, 0, 0, 0, 0, 613,
	614, 0, 185, 186, 0, 187, 0, 0, 623, 0,
	665, 630, 0, 0, 626, 188, 189, 190, 350, 680,
	352, 681, 191, 682, 683, 0, 192, 356, 357, 193,
	194, 633, 664, 684, 685, 360, 0, 195, 676, 0,
	656, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 657, 658, 660, 0, 659, 661, 209, 210, 415,
	211, 686, 212, 687, 688, 0, 213, 0, 214, 0,
	215, 0, 0, 679, 217, 0, 218, 0, 0, 0,
	621, 219, 221, 220, 222, 666, 667, 644, 711, 0,
	0, 0, 0, 0, 223, 224, 689, 690, 691, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 677, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 673,
	675, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	692, 234, 693, 694, 695, 696, 697, 0, 655, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 678, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 616, 0,
	645, 674, 258, 698, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 668, 265,
	266, 267, 268, 269, 0, 270, 669, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 699, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 622, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 662, 309, 296, 297, 310, 724, 311,
	700, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	701, 316, 317, 670, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 702, 703, 0,
	0, 329, 330, 671, 672, 643, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 663, 339, 0, 405,
	340, 341, 342, 406, 704, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 617, 0, 648,
	637, 638, 635, 636, 627, 0, 0, 615, 0, 0,
	0, 0, 613, 614, 0, 185, 186, 0, 187, 0,
	0, 623, 0, 665, 630, 0, 0, 626, 188, 189,
	190, 2540, 680, 352, 681, 191, 682, 683, 0, 192,
	356, 357, 193, 194, 633, 664, 684, 685, 360, 0,
	195, 676, 0, 656, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 710,
	206, 207, 2542, 0, 657, 658, 660, 0, 659, 661,
	209, 210, 415, 211, 686, 212, 687, 688, 0, 213,
	0, 214, 0, 215, 0, 0, 679, 217, 0, 218,
	0, 0, 0, 621, 219, 221, 220, 222, 666, 667,
	644, 711, 0, 0, 0, 0, 0, 223, 224, 689,
	690, 691, 0, 225, 0, 226, 0, 0, 712, 0,
	227, 677, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 673, 675, 714, 0, 375, 235, 0, 232,
	0, 713, 233, 692, 234, 693, 694, 695, 696, 697,
	0, 655, 0, 715, 236, 237, 238, 716, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 678, 717, 244,
	245, 718, 0, 246, 247, 0, 0, 248, 0, 249,
	719, 250, 251, 253, 386, 252, 720, 254, 255, 257,
	256, 616, 0, 645, 674, 258, 698, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 721, 264,
	722, 668, 265, 266, 267, 268, 269, 0, 270, 669,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 699,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 723, 293,
	294, 622, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 662, 309, 296, 297,
	310, 724, 311, 700, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 701, 316, 317, 670, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	702, 703, 0, 0, 329, 330, 671, 672, 643, 331,
	332, 2541, 334, 0, 0, 335, 336, 337, 338, 663,
	339, 0, 405, 340, 341, 342, 406, 704, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	617, 0, 648, 637, 638, 635, 636, 627, 0, 0,
	615, 0, 0, 0, 0, 613, 614, 0, 185, 186,
	0, 187, 0, 0, 623, 0, 665, 630, 0, 0,
	626, 188, 189, 190, 350, 680, 352, 681, 191, 682,
	683, 0, 192, 356, 357, 193, 194, 633, 664, 684,
	685, 360, 0, 195, 676, 0, 656, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 710, 206, 207, 208, 0, 657, 658, 660,
	0, 659, 661, 209, 210, 415, 211, 686, 212, 687,
	688, 0, 213, 0, 214, 0, 215, 0, 0, 679,
	217, 0, 218, 0, 0, 0, 621, 219, 221, 220,
	222, 666, 667, 644, 711, 0, 0, 0, 0, 0,
	223, 224, 689, 690, 691, 0, 225, 0, 226, 0,
	0, 712, 0, 227, 677, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 673, 675, 714, 0, 375,
	235, 0, 232, 0, 713, 233, 692, 234, 693, 694,
	695, 696, 697, 0, 655, 0, 715, 236, 237, 238,
	716, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	678, 717, 244, 245, 718, 0, 246, 247, 0, 0,
	248, 0, 249, 719, 250, 251, 253, 386, 252, 720,
	254, 255, 257, 256, 0, 0, 645, 674, 258, 698,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 721, 264, 722, 668, 265, 266, 267, 268, 269,
	0, 270, 669, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 699, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 723, 293, 294, 1577, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 662,
	309, 296, 297, 310, 724, 311, 700, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 701, 316, 317, 670,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 702, 703, 0, 0, 329, 330, 671,
	672, 643, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 663, 339, 0, 405, 340, 341, 342, 406,
	704, 0, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 648, 637, 638, 635, 636,
	627, 0, 0, 1575, 0, 0, 0, 0, 1573, 1574,
	0, 185, 186, 0, 187, 0, 0, 1576, 0, 665,
	630, 0, 0, 626, 188, 189, 190, 350, 680, 352,
	681, 191, 682, 683, 0, 192, 356, 357, 193, 194,
	0, 664, 684, 685, 360, 0, 195, 676, 0, 656,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	657, 658, 660, 0, 659, 661, 209, 210, 415, 211,
	686, 212, 687, 688, 0, 213, 0, 214, 0, 215,
	0, 0, 679, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 666, 667, 644, 711, 0, 0,
	0, 0, 0, 223, 224, 689, 690, 691, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 677, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 673, 675,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 692,
	234, 693, 694, 695, 696, 697, 0, 655, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 678, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 0, 0, 645,
	674, 258, 698, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 668, 265, 266,
	267, 268, 269, 0, 270, 669, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 699, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 1577, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 662, 309, 296, 297, 310, 724, 311, 700,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 701,
	316, 317, 670, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 702, 703, 0, 0,
	329, 330, 671, 672, 643, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 663, 339, 0, 405, 340,
	341, 342, 406, 704, 0, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 648, 637,
	638, 635, 636, 627, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	1576, 0, 665, 630, 0, 0, 626, 188, 189, 190,
	0, 680, 352, 681, 191, 682, 683, 0, 192, 356,
	357, 193, 194, 633, 664, 684, 685, 360, 0, 195,
	676, 0, 656, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 710, 206,
	207, 2542, 0, 657, 658, 660, 0, 659, 661, 209,
	210, 415, 211, 686, 212, 687, 688, 0, 213, 0,
	214, 0, 215, 0, 0, 679, 217, 0, 218, 0,
	0, 0, 621, 219, 221, 220, 222, 666, 667, 644,
	711, 0, 0, 0, 0, 0, 223, 224, 689, 690,
	691, 0, 225, 0, 226, 0, 0, 712, 0, 227,
	677, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 673, 675, 0, 0, 375, 235, 0, 232, 0,
	713, 233, 692, 234, 693, 694, 695, 696, 697, 0,
	655, 0, 0, 236, 237, 238, 716, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 678, 717, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 719,
	250, 251, 253, 386, 252, 720, 254, 255, 257, 256,
	616, 0, 645, 674, 258, 698, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 721, 264, 722,
	668, 265, 266, 267, 268, 269, 0, 270, 669, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 699, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 723, 293, 294,
	622, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 662, 309, 296, 297, 310,
	0, 311, 700, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 701, 316, 317, 670, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 702,
	703, 0, 0, 329, 330, 671, 672, 643, 331, 332,
	2541, 334, 0, 0, 335, 336, 337, 338, 663, 339,
	0, 405, 340, 341, 342, 406, 704, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 648, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 613, 614, 0, 185, 186, 0,
	187, 0, 0, 623, 0, 665, 0, 0, 0, 626,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 664, 358, 359,
	360, 0, 195, 676, 0, 656, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 710, 206, 207, 208, 0, 657, 658, 660, 0,
	659, 661, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	666, 667, 0, 711, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	712, 0, 227, 677, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 673, 675, 714, 0, 375, 235,
	0, 232, 0, 713, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 715, 236, 237, 238, 716,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 678,
	717, 244, 245, 718, 0, 246, 247, 0, 0, 248,
	0, 249, 719, 250, 251, 253, 386, 252, 720, 254,
	255, 257, 256, 0, 0, 0, 674, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	721, 264, 722, 668, 265, 266, 267, 268, 269, 0,
	270, 669, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	723, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 662, 309,
	296, 297, 310, 724, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 670, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 671, 672,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 663, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 930, 0, 933, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 2164, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 786, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 711, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 141, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 724, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 143, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 937, 407, 0, 0, 343, 0, 0, 0, 135,
	344, 345, 346, 347, 348, 599, 136, 182, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 127,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	764, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 141, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 143, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 937, 407, 0, 0, 343, 0,
	0, 0, 135, 344, 345, 346, 347, 348, 0, 136,
	182, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	758, 0, 1207, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 764, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	141, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	143, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 937, 407, 0,
	0, 343, 0, 0, 0, 135, 344, 345, 346, 347,
	348, 599, 136, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 758, 0, 1207, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 141, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 143, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	937, 407, 0, 0, 343, 0, 0, 0, 135, 344,
	345, 346, 347, 348, 1906, 136, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 127, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 764,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 757, 0, 182,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 758,
	0, 763, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 764, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 758, 0, 763, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 764, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 182, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 758, 0, 763, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 182, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 1240,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 182, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 1719,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 182, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 2080, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	648, 637, 638, 635, 636, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 1210, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 680, 352, 681, 191, 682, 683, 0,
	192, 356, 357, 193, 194, 0, 0, 684, 685, 360,
	0, 195, 361, 0, 786, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	710, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 686, 212, 687, 688, 0,
	213, 0, 214, 0, 215, 0, 0, 679, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 644, 711, 0, 0, 0, 0, 0, 223, 224,
	689, 690, 691, 0, 225, 0, 226, 0, 0, 712,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 714, 0, 375, 235, 0,
	232, 0, 713, 233, 692, 234, 693, 694, 695, 696,
	697, 0, 655, 0, 715, 236, 237, 238, 716, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 717,
	244, 245, 718, 0, 246, 247, 0, 0, 248, 0,
	249, 719, 250, 251, 253, 386, 252, 720, 254, 255,
	257, 256, 0, 0, 645, 387, 258, 698, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 721,
	264, 722, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	699, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 723,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 724, 311, 700, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 701, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 702, 703, 0, 0, 329, 330, 403, 404, 643,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 704, 0,
	502, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 178, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 177, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 175, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	181, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 178, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 177, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 182, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 181, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 178, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 177, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 182, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 181, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 987, 0, 933, 991, 0,
	0, 0, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 181, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 786, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 710, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 711,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 712, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 714, 0, 375, 235, 0, 232, 0, 713,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 715, 236, 237, 238, 716, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 717, 244, 245, 718,
	0, 246, 247, 0, 0, 248, 0, 249, 719, 250,
	251, 253, 386, 252, 720, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 721, 264, 722, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 723, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 724,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 933, 991, 343, 0,
	0, 989, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	786, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 710, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 711, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 712, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 714, 0, 375, 235, 0, 232, 0, 713, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	715, 236, 237, 238, 716, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 717, 244, 245, 718, 0,
	246, 247, 0, 0, 248, 0, 249, 719, 250, 251,
	253, 386, 252, 720, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 721, 264, 722, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 723, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 724, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 933, 991, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 786,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 710, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 711, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 712, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	714, 0, 375, 235, 0, 232, 0, 713, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 715,
	236, 237, 238, 716, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 717, 244, 245, 718, 0, 246,
	247, 0, 0, 248, 0, 249, 719, 250, 251, 253,
	386, 252, 720, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 721, 264, 722, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 723, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 724, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 933, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 786, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 710, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 711, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 712, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 714,
	0, 375, 235, 0, 232, 0, 713, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 715, 236,
	237, 238, 716, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 717, 244, 245, 718, 0, 246, 247,
	0, 0, 248, 0, 249, 719, 250, 251, 253, 386,
	252, 720, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 721, 264, 722, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 723, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 724, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 1653, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 1651, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 1695, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	1656, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 1693, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 1655, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 1694, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 182, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 1653, 195, 361, 0, 0, 1648, 196, 197,
	198, 0, 200, 201, 202, 199, 1651, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 1656,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 1647, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 1655, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 1654, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 908, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 764, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 770, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 772,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 764,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 766, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 768, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 764, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 433, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 432, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 431, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 182,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 1636, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 182, 2230,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 182, 2230, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 2227, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 182, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 764,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 1399, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 1397, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 182,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 1379, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 528,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	966, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 373, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 530, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 525, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 1255, 343, 182, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 1254, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 528, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 966, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 373, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 530, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 525, 401, 402, 0, 0,
	329, 967, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 528, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 519, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 530, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 950, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 525, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 0, 926, 343, 182,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 925, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 267, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 276, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 295, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 923,
	343, 182, 0, 0, 0, 344, 345, 346, 347, 348,
	0, 0, 0, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 922, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	0, 919, 343, 182, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 918, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 299, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 0, 916, 343, 182, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 915, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 0, 912, 343, 182, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	911, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 182, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 185, 186, 900, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 898, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 897, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 894, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	892, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 886, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 888, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 776, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 778,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 774, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 0, 528, 343,
	182, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 519, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 518, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 530, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 278, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 520, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 521, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	525, 401, 402, 0, 0, 329, 523, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 0,
	510, 343, 182, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 0, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 511, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	309, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 0, 508, 343, 182, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 373, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 0, 500, 343, 182, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 373,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 0, 456, 343, 182, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 0, 0, 0, 185, 186, 0, 187, 0, 0,
	0, 0, 349, 0, 0, 0, 0, 188, 189, 190,
	350, 351, 352, 353, 191, 354, 355, 0, 192, 356,
	357, 193, 194, 0, 0, 358, 359, 360, 0, 195,
	361, 0, 0, 0, 196, 197, 198, 0, 200, 201,
	202, 199, 0, 203, 0, 204, 205, 0, 0, 206,
	207, 208, 0, 0, 0, 0, 0, 0, 0, 209,
	210, 415, 211, 362, 212, 363, 364, 0, 213, 0,
	214, 0, 215, 0, 0, 216, 217, 0, 218, 0,
	0, 0, 365, 219, 221, 220, 222, 366, 367, 0,
	0, 0, 0, 0, 0, 0, 223, 224, 368, 369,
	370, 0, 225, 0, 226, 0, 0, 0, 0, 227,
	371, 0, 372, 0, 0, 228, 229, 0, 0, 230,
	231, 373, 374, 0, 0, 375, 235, 0, 232, 0,
	0, 233, 376, 234, 377, 378, 379, 380, 381, 0,
	382, 0, 0, 236, 237, 238, 0, 383, 384, 239,
	240, 241, 0, 243, 242, 0, 385, 0, 244, 245,
	0, 0, 246, 247, 0, 0, 248, 0, 249, 0,
	250, 251, 253, 386, 252, 0, 254, 255, 257, 256,
	0, 0, 0, 387, 258, 388, 259, 260, 0, 261,
	0, 0, 262, 0, 0, 263, 389, 0, 264, 0,
	390, 265, 266, 267, 268, 269, 0, 270, 391, 271,
	392, 272, 0, 273, 274, 275, 276, 277, 393, 278,
	279, 0, 280, 281, 282, 283, 284, 0, 286, 287,
	285, 288, 289, 290, 291, 0, 292, 0, 293, 294,
	394, 295, 0, 299, 300, 301, 302, 303, 0, 305,
	306, 395, 304, 307, 308, 0, 309, 296, 297, 310,
	0, 311, 396, 397, 312, 0, 319, 313, 314, 298,
	315, 318, 398, 316, 317, 399, 0, 320, 0, 321,
	322, 323, 324, 325, 326, 327, 328, 0, 400, 401,
	402, 0, 0, 329, 330, 403, 404, 0, 331, 332,
	333, 334, 0, 0, 335, 336, 337, 338, 0, 339,
	0, 405, 340, 341, 342, 406, 407, 182, 0, 343,
	0, 0, 0, 0, 344, 345, 346, 347, 348, 0,
	0, 0, 0, 185, 186, 0, 187, 0, 0, 0,
	0, 349, 0, 0, 0, 0, 188, 189, 190, 350,
	351, 352, 353, 191, 354, 355, 0, 192, 356, 357,
	193, 194, 0, 0, 358, 359, 360, 0, 195, 361,
	0, 0, 0, 196, 197, 198, 0, 200, 201, 202,
	199, 0, 203, 0, 204, 205, 0, 0, 206, 207,
	208, 0, 0, 0, 0, 0, 0, 0, 209, 210,
	415, 211, 362, 212, 363, 364, 0, 213, 0, 214,
	0, 215, 0, 0, 216, 217, 0, 218, 0, 0,
	0, 365, 219, 221, 220, 222, 366, 367, 0, 0,
	0, 0, 0, 0, 0, 223, 224, 368, 369, 370,
	0, 225, 0, 226, 0, 0, 0, 0, 227, 371,
	0, 372, 0, 0, 228, 229, 0, 0, 230, 231,
	373, 374, 0, 0, 375, 235, 0, 232, 0, 0,
	233, 376, 234, 377, 378, 379, 380, 381, 0, 382,
	0, 0, 236, 237, 238, 0, 383, 384, 239, 240,
	241, 0, 243, 242, 0, 385, 0, 244, 245, 0,
	0, 246, 247, 0, 0, 248, 0, 249, 0, 250,
	251, 253, 386, 252, 0, 254, 255, 257, 256, 0,
	0, 0, 387, 258, 388, 259, 260, 0, 261, 0,
	0, 262, 0, 0, 263, 389, 0, 264, 0, 390,
	265, 266, 267, 268, 269, 0, 270, 391, 271, 392,
	272, 0, 273, 274, 275, 276, 277, 393, 278, 279,
	0, 280, 281, 282, 283, 284, 0, 286, 287, 285,
	288, 289, 290, 291, 0, 292, 0, 293, 294, 394,
	295, 0, 299, 300, 301, 302, 303, 0, 305, 306,
	395, 304, 307, 308, 0, 309, 296, 297, 310, 0,
	311, 396, 397, 312, 0, 319, 313, 314, 298, 315,
	318, 398, 316, 317, 399, 0, 320, 0, 321, 322,
	323, 324, 325, 326, 327, 328, 0, 400, 401, 402,
	0, 0, 329, 330, 403, 404, 0, 331, 332, 333,
	334, 0, 0, 335, 336, 337, 338, 0, 339, 0,
	405, 340, 341, 342, 406, 407, 182, 0, 343, 0,
	0, 0, 0, 344, 345, 346, 347, 348, 0, 0,
	0, 0, 185, 186, 0, 187, 0, 0, 0, 0,
	349, 0, 0, 0, 0, 188, 189, 190, 350, 351,
	352, 353, 191, 354, 355, 0, 192, 356, 357, 193,
	194, 0, 0, 358, 359, 360, 0, 195, 361, 0,
	0, 0, 196, 197, 198, 0, 200, 201, 202, 199,
	0, 203, 0, 204, 205, 0, 0, 206, 207, 208,
	0, 0, 0, 0, 0, 0, 0, 209, 210, 415,
	211, 362, 212, 363, 364, 0, 213, 0, 214, 0,
	215, 0, 0, 216, 217, 0, 218, 0, 0, 0,
	365, 219, 221, 220, 222, 366, 367, 0, 0, 0,
	0, 0, 0, 0, 223, 224, 368, 369, 370, 0,
	225, 0, 226, 0, 0, 0, 0, 227, 371, 0,
	372, 0, 0, 228, 229, 0, 0, 230, 231, 1953,
	374, 0, 0, 375, 235, 0, 232, 0, 0, 233,
	376, 234, 377, 378, 379, 380, 381, 0, 382, 0,
	0, 236, 237, 238, 0, 383, 384, 239, 240, 241,
	0, 243, 242, 0, 385, 0, 244, 245, 0, 0,
	246, 247, 0, 0, 248, 0, 249, 0, 250, 251,
	253, 386, 252, 0, 254, 255, 257, 256, 0, 0,
	0, 387, 258, 388, 259, 260, 0, 261, 0, 0,
	262, 0, 0, 263, 389, 0, 264, 0, 390, 265,
	266, 267, 268, 269, 0, 270, 391, 271, 392, 272,
	0, 273, 274, 275, 276, 277, 393, 278, 279, 0,
	280, 281, 282, 283, 284, 0, 286, 287, 285, 288,
	289, 290, 291, 0, 292, 0, 293, 294, 394, 295,
	0, 299, 300, 301, 302, 303, 0, 305, 306, 395,
	304, 307, 308, 0, 309, 296, 297, 310, 0, 311,
	396, 397, 312, 0, 319, 313, 314, 298, 315, 318,
	398, 316, 317, 399, 0, 320, 0, 321, 322, 323,
	324, 325, 326, 327, 328, 0, 400, 401, 402, 0,
	0, 329, 330, 403, 404, 0, 331, 332, 333, 334,
	0, 0, 335, 336, 337, 338, 0, 339, 0, 405,
	340, 341, 342, 406, 407, 182, 0, 343, 0, 0,
	0, 0, 344, 345, 346, 347, 348, 0, 0, 0,
	0, 185, 186, 0, 187, 0, 0, 0, 0, 349,
	0, 0, 0, 0, 188, 189, 190, 350, 351, 352,
	353, 191, 354, 355, 0, 192, 356, 357, 193, 194,
	0, 0, 358, 359, 360, 0, 195, 361, 0, 0,
	0, 196, 197, 198, 0, 200, 201, 202, 199, 0,
	203, 0, 204, 205, 0, 0, 206, 207, 208, 0,
	0, 0, 0, 0, 0, 0, 209, 210, 415, 211,
	362, 212, 363, 364, 0, 213, 0, 214, 0, 215,
	0, 0, 216, 217, 0, 218, 0, 0, 0, 365,
	219, 221, 220, 222, 366, 367, 0, 0, 0, 0,
	0, 0, 0, 223, 224, 368, 369, 370, 0, 225,
	0, 226, 0, 0, 0, 0, 227, 371, 0, 372,
	0, 0, 228, 229, 0, 0, 230, 231, 1951, 374,
	0, 0, 375, 235, 0, 232, 0, 0, 233, 376,
	234, 377, 378, 379, 380, 381, 0, 382, 0, 0,
	236, 237, 238, 0, 383, 384, 239, 240, 241, 0,
	243, 242, 0, 385, 0, 244, 245, 0, 0, 246,
	247, 0, 0, 248, 0, 249, 0, 250, 251, 253,
	386, 252, 0, 254, 255, 257, 256, 0, 0, 0,
	387, 258, 388, 259, 260, 0, 261, 0, 0, 262,
	0, 0, 263, 389, 0, 264, 0, 390, 265, 266,
	267, 268, 269, 0, 270, 391, 271, 392, 272, 0,
	273, 274, 275, 276, 277, 393, 278, 279, 0, 280,
	281, 282, 283, 284, 0, 286, 287, 285, 288, 289,
	290, 291, 0, 292, 0, 293, 294, 394, 295, 0,
	299, 300, 301, 302, 303, 0, 305, 306, 395, 304,
	307, 308, 0, 309, 296, 297, 310, 0, 311, 396,
	397, 312, 0, 319, 313, 314, 298, 315, 318, 398,
	316, 317, 399, 0, 320, 0, 321, 322, 323, 324,
	325, 326, 327, 328, 0, 400, 401, 402, 0, 0,
	329, 330, 403, 404, 0, 331, 332, 333, 334, 0,
	0, 335, 336, 337, 338, 0, 339, 0, 405, 340,
	341, 342, 406, 407, 182, 0, 343, 0, 0, 0,
	0, 344, 345, 346, 347, 348, 0, 0, 0, 0,
	185, 186, 0, 187, 0, 0, 0, 0, 349, 0,
	0, 0, 0, 188, 189, 190, 350, 351, 352, 353,
	191, 354, 355, 0, 192, 356, 357, 193, 194, 0,
	0, 358, 359, 360, 0, 195, 361, 0, 0, 0,
	196, 197, 198, 0, 200, 201, 202, 199, 0, 203,
	0, 204, 205, 0, 0, 206, 207, 208, 0, 0,
	0, 0, 0, 0, 0, 209, 210, 415, 211, 362,
	212, 363, 364, 0, 213, 0, 214, 0, 215, 0,
	0, 216, 217, 0, 218, 0, 0, 0, 365, 219,
	221, 220, 222, 366, 367, 0, 0, 0, 0, 0,
	0, 0, 223, 224, 368, 369, 370, 0, 225, 0,
	226, 0, 0, 0, 0, 227, 371, 0, 372, 0,
	0, 228, 229, 0, 0, 230, 231, 1940, 374, 0,
	0, 375, 235, 0, 232, 0, 0, 233, 376, 234,
	377, 378, 379, 380, 381, 0, 382, 0, 0, 236,
	237, 238, 0, 383, 384, 239, 240, 241, 0, 243,
	242, 0, 385, 0, 244, 245, 0, 0, 246, 247,
	0, 0, 248, 0, 249, 0, 250, 251, 253, 386,
	252, 0, 254, 255, 257, 256, 0, 0, 0, 387,
	258, 388, 259, 260, 0, 261, 0, 0, 262, 0,
	0, 263, 389, 0, 264, 0, 390, 265, 266, 267,
	268, 269, 0, 270, 391, 271, 392, 272, 0, 273,
	274, 275, 276, 277, 393, 278, 279, 0, 280, 281,
	282, 283, 284, 0, 286, 287, 285, 288, 289, 290,
	291, 0, 292, 0, 293, 294, 394, 295, 0, 299,
	300, 301, 302, 303, 0, 305, 306, 395, 304, 307,
	308, 0, 309, 296, 297, 310, 0, 311, 396, 397,
	312, 0, 319, 313, 314, 298, 315, 318, 398, 316,
	317, 399, 0, 320, 0, 321, 322, 323, 324, 325,
	326, 327, 328, 0, 400, 401, 402, 0, 0, 329,
	330, 403, 404, 0, 331, 332, 333, 334, 0, 0,
	335, 336, 337, 338, 0, 339, 0, 405, 340, 341,
	342, 406, 407, 182, 0, 343, 0, 0, 0, 0,
	344, 345, 346, 347, 348, 0, 0, 0, 0, 185,
	186, 0, 187, 0, 0, 0, 0, 349, 0, 0,
	0, 0, 188, 189, 190, 350, 351, 352, 353, 191,
	354, 355, 0, 192, 356, 357, 193, 194, 0, 0,
	358, 359, 360, 0, 195, 361, 0, 0, 0, 196,
	197, 198, 0, 200, 201, 202, 199, 0, 203, 0,
	204, 205, 0, 0, 206, 207, 208, 0, 0, 0,
	0, 0, 0, 0, 209, 210, 415, 211, 362, 212,
	363, 364, 0, 213, 0, 214, 0, 215, 0, 0,
	216, 217, 0, 218, 0, 0, 0, 365, 219, 221,
	220, 222, 366, 367, 0, 0, 0, 0, 0, 0,
	0, 223, 224, 368, 369, 370, 0, 225, 0, 226,
	0, 0, 0, 0, 227, 371, 0, 372, 0, 0,
	228, 229, 0, 0, 230, 231, 373, 374, 0, 0,
	375, 235, 0, 232, 0, 0, 233, 376, 234, 377,
	378, 379, 380, 381, 0, 382, 0, 0, 236, 237,
	238, 0, 383, 384, 239, 240, 241, 0, 243, 242,
	0, 385, 0, 244, 245, 0, 0, 246, 247, 0,
	0, 248, 0, 249, 0, 250, 251, 253, 386, 252,
	0, 254, 255, 257, 256, 0, 0, 0, 387, 258,
	388, 259, 260, 0, 261, 0, 0, 262, 0, 0,
	263, 389, 0, 264, 0, 390, 265, 266, 267, 268,
	269, 0, 270, 391, 271, 392, 272, 0, 273, 274,
	275, 276, 277, 393, 278, 279, 0, 280, 281, 282,
	283, 284, 0, 286, 287, 285, 288, 289, 290, 291,
	0, 292, 0, 293, 294, 394, 295, 0, 511, 300,
	301, 302, 303, 0, 305, 306, 395, 304, 307, 308,
	0, 309, 296, 297, 310, 0, 311, 396, 397, 312,
	0, 319, 313, 314, 298, 315, 318, 398, 316, 317,
	399, 0, 320, 0, 321, 322, 323, 324, 325, 326,
	327, 328, 0, 400, 401, 402, 0, 0, 329, 330,
	403, 404, 0, 331, 332, 333, 334, 0, 0, 335,
	336, 337, 338, 0, 339, 0, 405, 340, 341, 342,
	406, 407, 182, 0, 343, 0, 0, 0, 0, 344,
	345, 346, 347, 348, 0, 0, 0, 0, 185, 186,
	0, 187, 0, 0, 0, 0, 349, 0, 1265, 0,
	0, 188, 189, 190, 350, 351, 352, 353, 191, 354,
	355, 0, 192, 356, 357, 193, 194, 0, 0, 358,
	359, 360, 0, 195, 361, 0, 0, 0, 196, 197,
	198, 0, 200, 201, 202, 199, 0, 203, 0, 204,
	205, 0, 0, 206, 207, 208, 0, 0, 0, 0,
	0, 0, 0, 209, 210, 415, 211, 362, 212, 363,
	364, 0, 213, 0, 214, 0, 215, 0, 0, 216,
	217, 0, 218, 0, 0, 0, 365, 219, 221, 220,
	222, 366, 367, 0, 0, 0, 0, 0, 0, 0,
	223, 224, 368, 369, 370, 0, 225, 0, 226, 0,
	0, 0, 0, 227, 371, 0, 372, 0, 0, 228,
	229, 0, 0, 230, 231, 373, 374, 0, 0, 375,
	235, 0, 232, 0, 0, 233, 376, 234, 377, 378,
	379, 380, 381, 0, 382, 0, 0, 236, 237, 238,
	0, 383, 384, 239, 240, 241, 0, 243, 242, 0,
	385, 0, 244, 245, 0, 0, 246, 247, 0, 0,
	248, 0, 249, 0, 250, 251, 253, 386, 252, 0,
	254, 255, 257, 256, 0, 0, 0, 387, 258, 388,
	259, 260, 0, 261, 0, 0, 262, 0, 0, 263,
	389, 0, 264, 0, 390, 265, 266, 267, 268, 269,
	0, 270, 391, 271, 392, 272, 0, 273, 274, 275,
	276, 277, 393, 278, 279, 0, 280, 281, 282, 283,
	284, 0, 286, 287, 285, 288, 289, 290, 291, 0,
	292, 0, 293, 294, 394, 295, 0, 299, 300, 301,
	302, 303, 0, 305, 306, 395, 304, 307, 308, 0,
	0, 296, 297, 310, 0, 311, 396, 397, 312, 0,
	319, 313, 314, 298, 315, 318, 398, 316, 317, 399,
	0, 320, 0, 321, 322, 323, 324, 325, 326, 327,
	328, 0, 400, 401, 402, 0, 0, 329, 330, 403,
	404, 0, 331, 332, 333, 334, 0, 0, 335, 336,
	337, 338, 0, 339, 0, 405, 340, 341, 342, 406,
	407, 182, 0, 343, 0, 0, 0, 0, 344, 345,
	346, 347, 348, 0, 0, 0, 0, 185, 186, 0,
	187, 0, 0, 0, 0, 349, 0, 0, 0, 0,
	188, 189, 190, 350, 351, 352, 353, 191, 354, 355,
	0, 192, 356, 357, 193, 194, 0, 0, 358, 359,
	360, 0, 195, 361, 0, 0, 0, 196, 197, 198,
	0, 200, 201, 202, 199, 0, 203, 0, 204, 205,
	0, 0, 206, 207, 208, 0, 0, 0, 0, 0,
	0, 0, 209, 210, 415, 211, 362, 212, 363, 364,
	0, 213, 0, 214, 0, 215, 0, 0, 216, 217,
	0, 218, 0, 0, 0, 365, 219, 221, 220, 222,
	366, 367, 0, 0, 0, 0, 0, 0, 0, 223,
	224, 368, 369, 370, 0, 225, 0, 226, 0, 0,
	0, 0, 227, 371, 0, 372, 0, 0, 228, 229,
	0, 0, 230, 231, 890, 374, 0, 0, 375, 235,
	0, 232, 0, 0, 233, 376, 234, 377, 378, 379,
	380, 381, 0, 382, 0, 0, 236, 237, 238, 0,
	383, 384, 239, 240, 241, 0, 243, 242, 0, 385,
	0, 244, 245, 0, 0, 246, 247, 0, 0, 248,
	0, 249, 0, 250, 251, 253, 386, 252, 0, 254,
	255, 257, 256, 0, 0, 0, 387, 258, 388, 259,
	260, 0, 261, 0, 0, 262, 0, 0, 263, 389,
	0, 264, 0, 390, 265, 266, 267, 268, 269, 0,
	270, 391, 271, 392, 272, 0, 273, 274, 275, 276,
	277, 393, 278, 279, 0, 280, 281, 282, 283, 284,
	0, 286, 287, 285, 288, 289, 290, 291, 0, 292,
	0, 293, 294, 394, 295, 0, 299, 300, 301, 302,
	303, 0, 305, 306, 395, 304, 307, 308, 0, 309,
	296, 297, 310, 0, 311, 396, 397, 312, 0, 319,
	313, 314, 298, 315, 318, 398, 316, 317, 399, 0,
	320, 0, 321, 322, 323, 324, 325, 326, 327, 328,
	0, 400, 401, 402, 0, 0, 329, 330, 403, 404,
	0, 331, 332, 333, 334, 0, 0, 335, 336, 337,
	338, 0, 339, 0, 405, 340, 341, 342, 406, 407,
	182, 0, 343, 0, 0, 0, 0, 344, 345, 346,
	347, 348, 0, 0, 0, 0, 185, 186, 0, 187,
	0, 0, 0, 0, 349, 0, 0, 0, 0, 188,
	189, 190, 350, 351, 352, 353, 191, 354, 355, 0,
	192, 356, 357, 193, 194, 0, 0, 358, 359, 360,
	0, 195, 361, 0, 0, 0, 196, 197, 198, 0,
	200, 201, 202, 199, 0, 203, 0, 204, 205, 0,
	0, 206, 207, 208, 0, 0, 0, 0, 0, 0,
	0, 209, 210, 415, 211, 362, 212, 363, 364, 0,
	213, 0, 214, 0, 215, 0, 0, 216, 217, 0,
	218, 0, 0, 0, 365, 219, 221, 220, 222, 366,
	367, 0, 0, 0, 0, 0, 0, 0, 223, 224,
	368, 369, 370, 0, 225, 0, 226, 0, 0, 0,
	0, 227, 371, 0, 372, 0, 0, 228, 229, 0,
	0, 230, 231, 373, 374, 0, 0, 375, 235, 0,
	232, 0, 0, 233, 376, 234, 377, 378, 379, 380,
	381, 0, 382, 0, 0, 236, 237, 238, 0, 383,
	384, 239, 240, 241, 0, 243, 242, 0, 385, 0,
	244, 245, 0, 0, 246, 247, 0, 0, 248, 0,
	249, 0, 250, 251, 253, 386, 252, 0, 254, 255,
	257, 256, 0, 0, 0, 387, 258, 388, 259, 260,
	0, 261, 0, 0, 262, 0, 0, 263, 389, 0,
	264, 0, 390, 265, 266, 267, 268, 269, 0, 270,
	391, 271, 392, 272, 0, 273, 274, 275, 276, 277,
	393, 740, 279, 0, 280, 281, 282, 283, 284, 0,
	286, 287, 285, 288, 289, 290, 291, 0, 292, 0,
	293, 294, 394, 295, 0, 299, 300, 301, 302, 303,
	0, 305, 306, 395, 304, 307, 308, 0, 309, 296,
	297, 310, 0, 311, 396, 397, 312, 0, 319, 313,
	314, 298, 315, 318, 398, 316, 317, 399, 0, 320,
	0, 321, 322, 323, 324, 325, 326, 327, 328, 0,
	400, 401, 402, 0, 0, 329, 330, 403, 404, 0,
	331, 332, 333, 334, 0, 0, 335, 336, 337, 338,
	0, 339, 0, 405, 340, 341, 342, 406, 407, 182,
	0, 343, 0, 0, 0, 0, 344, 345, 346, 347,
	348, 0, 0, 0, 0, 185, 186, 0, 187, 0,
	0, 0, 0, 349, 0, 0, 0, 0, 188, 189,
	190, 350, 351, 352, 353, 191, 354, 355, 0, 192,
	356, 357, 193, 194, 0, 0, 358, 359, 360, 0,
	195, 361, 0, 0, 0, 196, 197, 198, 0, 200,
	201, 202, 199, 0, 203, 0, 204, 205, 0, 0,
	206, 207, 208, 0, 0, 0, 0, 0, 0, 0,
	209, 210, 415, 211, 362, 212, 363, 364, 0, 213,
	0, 214, 0, 215, 0, 0, 216, 217, 0, 218,
	0, 0, 0, 365, 219, 221, 220, 222, 366, 367,
	0, 0, 0, 0, 0, 0, 0, 223, 224, 368,
	369, 370, 0, 225, 0, 226, 0, 0, 0, 0,
	227, 371, 0, 372, 0, 0, 228, 229, 0, 0,
	230, 231, 373, 374, 0, 0, 375, 235, 0, 232,
	0, 0, 233, 376, 234, 377, 378, 379, 380, 381,
	0, 382, 0, 0, 236, 237, 238, 0, 383, 384,
	239, 240, 241, 0, 243, 242, 0, 385, 0, 244,
	245, 0, 0, 246, 247, 0, 0, 248, 0, 249,
	0, 250, 251, 253, 386, 252, 0, 254, 255, 257,
	256, 0, 0, 0, 387, 258, 388, 259, 260, 0,
	261, 0, 0, 262, 0, 0, 263, 389, 0, 264,
	0, 390, 265, 266, 0, 268, 269, 0, 270, 391,
	271, 392, 272, 0, 273, 274, 275, 0, 277, 393,
	278, 279, 0, 280, 281, 282, 283, 284, 0, 286,
	287, 285, 288, 289, 290, 291, 0, 292, 0, 293,
	294, 394, 0, 0, 299, 300, 301, 302, 303, 0,
	305, 306, 395, 304, 307, 308, 0, 309, 296, 297,
	310, 0, 311, 396, 397, 312, 0, 319, 313, 314,
	298, 315, 318, 398, 316, 317, 399, 0, 320, 0,
	321, 322, 323, 324, 325, 326, 327, 328, 0, 400,
	401, 402, 0, 0, 329, 330, 403, 404, 0, 331,
	332, 333, 334, 0, 0, 335, 336, 337, 338, 0,
	339, 0, 405, 340, 341, 342, 406, 407, 0, 0,
	343, 0, 0, 0, 0, 344, 345, 346, 347, 348,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 0, 0, 0, 0, 1094, 0, 0, 0,
	0, 0, 0, 1064, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 1061, 1062, 0, 1091, 1092,
	1093, 1101, 1102, 1103, 0, 0, 0, 1063, 0, 0,
	0, 1094, 0, 1083, 0, 0, 0, 0, 1064, 0,
	1080, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1098,
	1106, 0, 0, 1086, 1087, 1088, 1089, 0, 0, 0,
	0, 0, 1069, 0, 0, 0, 0, 0, 1104, 0,
	0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 1098, 1106, 1096, 0, 0, 1094,
	0, 0, 0, 1084, 0, 0, 1064, 0, 0, 1105,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1095,
	1063, 1096, 0, 0, 0, 0, 1083, 0, 1084, 0,
	0, 0, 0, 1080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 1099, 0, 1090, 0,
	1069, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 0,
	0, 0, 1098, 1106, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 1097, 1084, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	0, 0, 1095, 0, 1888, 0, 0, 0, 0, 0,
	1097, 0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 0, 1090, 0, 0, 1840,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 1099,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1097, 0,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 0, 0, 2511, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 1098, 1106, 1094, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 1061,
	1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 1063, 0,
	0, 0, 1096, 0, 1083, 1094, 0, 0, 0, 1084,
	0, 1080, 1064, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 1063, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 0, 1069, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	1098, 1106, 0, 0, 0, 0, 0, 1086, 1087, 1088,
	1089, 0, 1099, 0, 0, 0, 1069, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 1098, 1106,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 1097, 1084, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 1090, 0, 2461, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 1064, 0, 1097, 1105, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 1063, 0,
	0, 2413, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 1097, 0, 0, 1075, 1076, 1082,
	1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0, 2383,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	1098, 1106, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 1063, 0, 0, 0, 1096, 0, 1083,
	1094, 0, 0, 0, 1084, 0, 1080, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 1063, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 1098, 1106, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 1099, 0, 0,
	0, 1069, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 1098, 1106, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 1097, 1084, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 1090,
	0, 2378, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1099, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 1097, 1105, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 1063, 0, 0, 2374, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 2309, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 1098, 1106, 1094, 0, 0,
	0, 0, 0, 0, 1064, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 0, 0, 1061,
	1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 1063, 0,
	0, 0, 1096, 0, 1083, 1094, 0, 0, 0, 1084,
	0, 1080, 1064, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1095, 1063, 0, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 0, 1069, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	1098, 1106, 0, 0, 0, 0, 0, 1086, 1087, 1088,
	1089, 0, 1099, 0, 0, 0, 1069, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 1098, 1106,
	0, 0, 0, 0, 1084, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 1097, 1084, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 1090, 0, 2275, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 0, 0, 1094, 0, 0,
	0, 0, 0, 0, 1064, 0, 1097, 1105, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 1063, 0,
	0, 2274, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 1080, 0, 0, 1097, 0, 0, 1075, 1076, 1082,
	1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0, 2239,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	1098, 1106, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 1063, 0, 0, 0, 1096, 0, 1083,
	1094, 0, 0, 0, 1084, 0, 1080, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1095, 1063, 0, 0, 0, 1061, 1062, 1083, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 1064, 0,
	0, 0, 0, 1069, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 1063, 0, 0, 1098, 1106, 0, 1083, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 1099, 0, 0,
	0, 1069, 0, 0, 1104, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1096, 1098, 1106, 0, 0, 0, 0, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1104, 1086, 1087, 1088, 1089, 0, 0, 0,
	0, 0, 1069, 0, 0, 1095, 0, 0, 0, 0,
	1096, 0, 0, 0, 0, 0, 1097, 1084, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 1090,
	0, 2083, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1084, 0,
	0, 0, 1099, 0, 0, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 1090, 0,
	0, 0, 1094, 0, 0, 0, 0, 0, 0, 1064,
	0, 1097, 1105, 1085, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 1063, 0, 0, 2059, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 0, 0, 1098, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 0, 1096, 1094, 0, 0, 0, 0, 0, 1084,
	1064, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 1095, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 1099, 0, 1069, 2574, 0, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 1098, 1106, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 1096, 0, 1083, 0, 0, 0, 0,
	1084, 1097, 1080, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 1810, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2573, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	1090, 1880, 0, 0, 1879, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1098, 1106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1099, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101,
	1102, 1103, 0, 0, 0, 0, 0, 0, 1096, 1094,
	0, 0, 0, 0, 1783, 1084, 1064, 0, 0, 1105,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1063, 1095, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 1097, 1080, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 1090, 0, 0, 0, 0,
	1784, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1086, 1087, 1088, 1089, 0, 0, 0, 1099, 0,
	1069, 0, 1612, 0, 0, 0, 0, 0, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0,
	0, 0, 1098, 1106, 1094, 0, 0, 0, 1611, 0,
	0, 1064, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 1104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 1096,
	0, 1083, 0, 0, 0, 0, 1084, 1097, 1080, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1086, 1087, 1088, 1089,
	0, 0, 0, 0, 0, 1069, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1085, 0, 0, 0, 0, 0, 1098, 1106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1099,
	0, 0, 0, 0, 0, 0, 1104, 0, 0, 1061,
	1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 0,
	0, 0, 0, 0, 1096, 1094, 0, 0, 0, 0,
	0, 1084, 1064, 0, 0, 1105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1063, 1095, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 1097, 1080,
	0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0,
	1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0,
	0, 1090, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1086, 1087, 1088,
	1089, 0, 0, 0, 1099, 0, 1069, 0, 0, 0,
	0, 0, 0, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 0, 0, 0, 0, 0, 1098, 1106,
	1094, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 1104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 1096, 0, 1083, 0, 0,
	0, 0, 1084, 1097, 1080, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 0, 0, 0, 1095, 596,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 0, 0, 0,
	0, 1069, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1085, 0, 0,
	0, 0, 0, 1098, 1106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1099, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 1061, 1062, 0, 1091, 1092,
	1093, 1101, 1102, 1103, 0, 0, 0, 0, 0, 0,
	1096, 1094, 0, 0, 0, 0, 0, 1084, 1064, 0,
	0, 1105, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1063, 1095, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 1097, 1080, 0, 1075, 1076, 1082,
	1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065,
	1066, 1067, 1068, 1070, 1071, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1086, 1087, 1088, 1089, 0, 0, 0,
	1099, 0, 1069, 0, 0, 0, 0, 1886, 0, 0,
	1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103, 0,
	0, 0, 0, 0, 1098, 1106, 1094, 2063, 0, 0,
	1881, 0, 0, 1064, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 1104, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1063, 0, 0,
	0, 1096, 0, 1083, 0, 0, 0, 0, 1084, 1097,
	1080, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1086, 1087,
	1088, 1089, 0, 0, 0, 0, 0, 1069, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1085, 0, 0, 0, 0, 0, 1098,
	1106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1099, 0, 0, 0, 0, 0, 0, 1104, 0,
	0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102, 1103,
	0, 0, 0, 0, 0, 0, 1096, 1094, 0, 0,
	0, 0, 0, 1084, 1064, 0, 0, 1105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1063, 1095,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	1097, 1080, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079,
	1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070,
	1071, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1086,
	1087, 1088, 1089, 0, 0, 0, 1099, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 1061, 1062, 0, 1091,
	1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0, 0,
	1098, 1106, 1094, 0, 0, 0, 1839, 0, 0, 1064,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 1104,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1063, 0, 0, 0, 1096, 0, 1083,
	0, 0, 0, 0, 1084, 1097, 1080, 0, 1075, 1076,
	1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072, 1073,
	1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1846, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1086, 1087, 1088, 1089, 0, 0,
	0, 0, 0, 1069, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1085,
	0, 0, 0, 0, 0, 1098, 1106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1099, 0, 0,
	0, 0, 0, 0, 1104, 0, 0, 1061, 1062, 0,
	1091, 1092, 1093, 1101, 1102, 1103, 0, 0, 0, 0,
	0, 0, 1096, 1094, 0, 0, 0, 0, 0, 1084,
	1064, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1063, 1095, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 1097, 1080, 0, 1075,
	1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074, 1072,
	1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1085, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1086, 1087, 1088, 1089, 0,
	0, 0, 1099, 0, 1069, 0, 0, 0, 0, 0,
	0, 0, 1061, 1062, 0, 1091, 1092, 1093, 1101, 1102,
	1103, 0, 0, 0, 0, 0, 1098, 1106, 1094, 0,
	0, 0, 0, 0, 0, 1064, 0, 0, 1105, 0,
	0, 0, 0, 0, 0, 1104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1063,
	0, 0, 0, 1096, 0, 1083, 0, 0, 0, 0,
	1084, 1097, 1080, 0, 1075, 1076, 1082, 1081, 1077, 1078,
	1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067, 1068,
	1070, 1071, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1086, 1087, 1088, 1089, 0, 0, 0, 0, 0, 1069,
	1090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1085, 0, 0, 0, 0,
	0, 1098, 1106, 0, 1061, 1062, 0, 1091, 1092, 1093,
	1101, 1102, 1103, 1099, 0, 0, 0, 0, 0, 0,
	1104, 0, 0, 0, 0, 0, 0, 1064, 0, 0,
	1105, 0, 0, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 0, 0, 1084, 0, 0, 0, 0,
	0, 1063, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 1075, 1076, 1082, 1081, 1077,
	1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066, 1067,
	1068, 1070, 1071, 0, 0, 1090, 0, 0, 0, 0,
	0, 0, 1086, 1087, 1088, 1089, 0, 0, 0, 0,
	1085, 1069, 0, 0, 0, 0, 0, 0, 1061, 1062,
	0, 1091, 1092, 1093, 1101, 1102, 1103, 0, 1099, 0,
	0, 0, 0, 1098, 1106, 0, 0, 0, 0, 0,
	0, 1064, 0, 0, 1105, 0, 0, 0, 0, 0,
	0, 0, 1104, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1063, 0, 0, 0, 0,
	1096, 1083, 0, 0, 40, 0, 0, 1084, 1080, 0,
	0, 0, 0, 0, 0, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1097, 44, 0,
	1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100, 0, 1074,
	1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071, 0, 0,
	0, 0, 0, 0, 52, 0, 1086, 1087, 1088, 1089,
	0, 0, 0, 0, 0, 1069, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1085, 63, 0, 0, 0, 1098, 1106, 0,
	64, 0, 482, 65, 0, 0, 0, 0, 0, 0,
	1099, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 41, 0, 1096, 0, 67, 0, 0, 0,
	0, 1084, 0, 0, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 1075, 1076, 1082, 1081, 1077, 1078, 1079, 1100,
	0, 1074, 1072, 1073, 1065, 1066, 1067, 1068, 1070, 1071,
	63, 1090, 0, 0, 0, 0, 0, 64, 0, 482,
	65, 0, 0, 0, 0, 0, 1085, 0, 0, 0,
	0, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 128, 70,
	0, 71, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	1391, 0, 0, 481, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 0,
	0, 1310, 0, 1097, 0, 0, 1075, 1076, 1082, 1081,
	1077, 1078, 1079, 1100, 0, 1074, 1072, 1073, 1065, 1066,
	1067, 1068, 1070, 1071, 0, 0, 0, 0, 0, 68,
	0, 0, 142, 0, 1318, 1307, 1337, 1296, 1328, 1327,
	135, 0, 1298, 1297, 0, 0, 0, 136, 1339, 1338,
	0, 0, 0, 0, 0, 128, 70, 0, 71, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	481, 0, 0, 104, 0, 0, 1333, 0, 1325, 1324,
	0, 0, 0, 0, 0, 0, 1310, 0, 1323, 0,
	0, 0, 143, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 1320, 1321, 0, 0, 0, 0, 0, 1318,
	1307, 1337, 1296, 1328, 1327, 0, 0, 1298, 1297, 142,
	0, 0, 0, 1339, 1338, 0, 0, 135, 1306, 0,
	0, 0, 0, 0, 136, 1311, 1309, 1312, 1313, 1314,
	1315, 1316, 0, 1336, 0, 0, 0, 0, 0, 0,
	1300, 1299, 0, 0, 0, 0, 0, 127, 0, 0,
	0, 1333, 0, 1325, 1324, 0, 0, 0, 0, 0,
	0, 0, 0, 1323, 0, 0, 1302, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1326, 0,
	0, 0, 1308, 0, 0, 0, 1322, 1320, 1321, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1319, 0, 1306, 0, 1440, 1438, 1439, 1442, 1441,
	1311, 1309, 1312, 1313, 1314, 1315, 1316, 0, 1336, 0,
	0, 0, 549, 0, 575, 1300, 1299, 0, 0, 0,
	0, 0, 0, 0, 1303, 0, 0, 0, 0, 0,
	0, 0, 554, 0, 0, 1317, 1304, 0, 0, 0,
	0, 1302, 0, 0, 552, 1341, 0, 0, 0, 0,
	0, 0, 0, 1326, 0, 0, 0, 1308, 1301, 0,
	0, 0, 1334, 1335, 0, 553, 0, 0, 0, 0,
	555, 0, 0, 0, 0, 0, 0, 0, 561, 562,
	0, 0, 0, 571, 1305, 0, 1319, 0, 0, 1340,
	0, 0, 0, 0, 0, 0, 0, 576, 556, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1303,
	574, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1317, 1304, 0, 0, 0, 0, 0, 0, 0, 0,
	1341, 0, 0, 0, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 1301, 0, 0, 0, 1334, 1335, 0,
	0, 0, 0, 558, 559, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1305,
	0, 565, 0, 0, 1340, 0, 560, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 564,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	563, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 551,
	568, 578, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 569, 0, 0, 0, 573,
	0, 0, 0, 0, 579, 0, 0, 0, 0, 566,
	570, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 572,
}
var sqlPact = [...]int{

	4012, -1000, -25, -1000, -1000, -1000, 151, -1000, -1000, -1000,
	-1000, 150, 149, 146, -1000, 145, 144, 143, 141, 137,
	136, 134, 133, 132, 128, 126, -1000, 124, -1000, -1000,
	-1000, -1000, 119, 118, 113, 112, 111, 110, 106, -1000,
	1203, 22190, 105, 103, 1454, -1000, 36183, 102, 97, 89,
	83, -1000, 1245, 82, 80, 26286, 904, 1228, 79, 68,
	65, 64, 63, 997, 35844, 590, 1523, 1140, 1677, 35502,
	21848, 1667, 1061, 35160, -1000, -1000, 34818, 60, 59, 58,
	57, 55, -1000, -1000, 34476, 54, 52, 51, 49, 48,
	46, 40, 38, 33, 28, 27, 26, 25, 23, -1000,
	22, 20, 19, -1000, 44040, 18, 17, 15, 1127, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 881, 94, -1000, 910, 518, 2049, 8090,
	1034, 1022, 1018, 1016, 1042, 38556, 36183, 14, -49, 13,
	-1000, 2027, 653, 19395, 4012, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25944,
	25602, 34134, 33792, 6324, 755, -1000, -29, 22870, 36183, -1000,
	108, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14806, 14452, 529, 108, -1000, -1000, -1000, -1000, -1000,
	33450, -1000, 38217, 33108, 32766, 1547, 32424, -1000, -1000, -1000,
	-1000, 32082, -1000, -1000, 1978, 1742, 1735, 25260, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	31743, 31401, 31059, 30717, 30375, 504, -1000, -1000, -1000, 17630,
	-1000, -1000, -1000, -1000, 12, -1000, 11, -1000, 10, 7,
	5, -4, -1000, -6, -8, -1000, -9, -10, -1000, -11,
	-12, 30033, 814, 1232, -1000, -1000, -27, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36183, -1000, 15512, -1000, 498,
	-1000, 1646, -1000, 15512, -1000, 1231, -1000, -1000, -1000, -1000,
	-1000, 36183, -1000, -1000, -1000, -1000, -1000, -1000, 2257, 1169,
	487, 29691, -1000, 1487, -1000, 607, 804, -1000, -1000, -1000,
	9149, 158, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2087, 23223, 1247, 2050, 1954, 2255, 1447, 1948, 1923,
	1916, 1855, 1805, 2248, 897, 2245, 1961, 1044, 2236, 1798,
	1392, 675, 2160, 1637, 1633, -1000, -1000, -1000, -1000, 941,
	-1000, -1000, -1000, 27642, -1000, -1000, 778, 932, 910, -1000,
	-1000, -1000, 1464, 1984, 1984, 1984, 2079, 282, 269, -1000,
	94, -1000, 1339, -1000, 1153, -1000, -1000, -1000, -1000, -1000,
	43037, -1000, -1000, 15512, 15512, 15512, 15512, 15512, 1038, 536,
	-1000, 482, 479, 7383, -1000, -1000, 2220, -1000, -1000, -1000,
	279, -1000, -1000, 15512, 108, -1000, -1000, -1000, -1000, 478,
	2230, -1000, 647, -1000, -1000, -1000, 606, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1673, 470, 463, 461,
	-1000, 451, -1000, -1000, 450, 448, 447, 446, 445, 444,
	441, 440, 439, 437, 435, 434, 433, 432, 431, 1019,
	-1000, 633, -1000, -1000, 633, 633, -1000, 416, 416, 417,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 416, -1000,
	-1000, -1000, 581, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 430, 1332, -1000, -1000, 1332,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 752, 37539, -32,
	36183, -1000, 429, -32, -1000, -1000, 428, -1000, 10561, 10561,
	-1000, -1000, -1000, -1000, -1000, 9855, 1910, -1000, 586, -187,
	281, 584, -1000, 18336, 21154, -1000, -1000, 1337, 1890, 818,
	-1000, 933, 1883, 544, -1000, 1259, -1000, 839, 1877, -171,
	1697, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23562, 22870,
	-29, -38, -1000, -1000, -1000, 5971, 43037, -1000, 43037, -1000,
	802, 20099, 108, -1000, -1000, -1000, -1000, 427, 1362, -1000,
	1354, 617, -1000, 290, -1000, 29349, 617, 1336, -1000, -1000,
	-1000, 27642, -1000, 36183, -1000, 36183, -1000, 830, -1000, 37878,
	121, 1875, -1000, -1000, 121, 1866, -1000, 120, 1858, -1000,
	-1000, 1257, 1835, -1000, -38, 1823, -1000, -1000, 15512, -48,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 653, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	29007, 22530, 1444, 568, 43037, 2107, 43872, 23562, 43037, 22530,
	-1000, -1000, 36183, -1000, 15512, -1000, 2104, 1458, -34, -1000,
	-1000, -1000, -1000, -1000, 1405, 1499, 727, 1322, 9149, 9149,
	1939, -1000, 157, 6324, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 28665, -1000, -1000, -1000, 1103, 36183, -1000, -1000,
	1664, -1000, 22530, 36183, -1000, 36183, -1000, 36183, -1000, 36183,
	-1000, 36183, -1000, -1000, -1000, -1000, -1000, 43471, -1000, 1661,
	-1000, -1000, 36183, -1000, 1384, -1000, -1000, -1000, 28326, 27984,
	-1000, 939, 777, -1000, -1000, 127, -1000, 36183, 2056, 605,
	-1000, 1464, 1459, 1656, 670, 1239, 1485, 14098, 1463, 15512,
	94, -1000, -1000, 94, 94, 8796, -1000, -1000, -1000, 36183,
	-1000, 43777, 43872, 6324, 764, 15512, 15512, 15512, 15512, 15512,
	15512, 15512, 15512, 15512, 15512, 15512, 15512, 15512, 15512, 15512,
	15512, 15512, 15512, 15512, 15512, 15512, 15512, 15512, 15512, 15512,
	15512, 15512, 15512, 15512, 15512, 15512, 15512, 1319, 15512, 750,
	15512, 15512, 15512, 15512, 1325, 1065, 414, 1212, -1000, 2148,
	2148, 2148, 43304, 43304, 388, 536, -1000, 15512, -1000, 107,
	15512, 269, 41164, -31, 7030, -1000, -1000, -1000, 13745, 631,
	43037, 108, 4859, -1000, 2219, 838, 1674, 1594, 422, 534,
	507, 501, 500, 15512, 15512, 13392, 13038, 12684, 16218, 12330,
	15512, 7736, 15512, 15512, 15512, 15512, 11976, 11622, -1000, 420,
	-1000, -1000, -1000, -1000, 2217, -1000, -1000, 2216, -1000, 763,
	760, 2214, -1000, -34, -1000, 37539, -1000, 36183, -32, 2103,
	36183, -1000, 96, -1000, 42018, -1000, 96, -55, -1000, 1495,
	1494, 19747, 1451, 1092, 1092, 1092, -1000, 418, 523, 584,
	5246, 11268, -1000, 26625, 1116, 187, 267, 17983, 1910, -1000,
	36183, -41, 1189, -1000, 24918, 1988, 1986, 1989, 27642, 2092,
	107, 2011, 1632, 748, 27642, 2008, 741, 2091, 107, 1624,
	739, 36183, 6324, 1999, 576, -1000, 36183, -1000, -1000, -1000,
	1623, -56, -1000, -1000, 24579, 2101, 1743, 1740, -1000, 1028,
	-1000, 2100, 36183, 1226, 1329, -1000, -1000, 773, 1738, 608,
	295, 2099, 295, 20450, -1000, 36183, -1000, 36183, -1000, -1000,
	36183, -1000, 36183, -1000, 36183, 36183, -1000, 36183, 36183, -57,
	43037, 43578, 24240, 738, -1000, 658, 24579, 2852, -58, -1000,
	654, -1000, -1000, -1000, -1000, 261, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 417, 1019, 416, 416, 416, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 581, -1000, -1000, 633, 633, 633,
	-1000, -1000, -50, -1000, 1621, 602, -64, 696, -34, -1000,
	1332, -1000, 1177, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2227, -1000, 2175, -1000,
	-1000, 2213, -35, -1000, -35, -1000, 6324, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36183, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 4278, -1000, -1000, -1000, -1000, -1000, -1000,
	36183, 36183, 36183, -1000, 27642, 618, 1660, -1000, 2023, 1459,
	1656, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 43037,
	-1000, 419, -1000, -1000, 43037, 857, 1517, -1000, 1517, -36,
	-1000, 41893, 1466, 36183, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 603, 480, 480, 852, 852,
	852, 852, 2155, 256, 2951, 976, 191, 191, 191, 191,
	191, 191, 191, 191, 464, 1772, 1772, 464, 464, 464,
	464, 464, 191, 191, 191, 43304, 43162, 41215, 15512, 15512,
	735, 1064, 414, 41215, 15512, 41215, 41215, 41215, 41215, -1000,
	1387, -1000, -1000, -1000, -1000, 1619, 412, 16218, 16218, -1000,
	-1000, -1000, 7383, 16571, -1000, -1000, -1000, -1000, 409, 15512,
	-1000, 41446, -222, 266, -107, -1000, 15512, 520, -76, -1000,
	868, -1000, 15512, -1000, -15, 15512, 15512, 15512, 263, -1000,
	262, -1000, 734, -1000, 732, 731, 728, -1000, 408, 1085,
	407, 405, 15512, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 42876, 39275, 259, -1000, 1618, -107, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 258, -1000, 254, -1000, 42751, -107,
	252, 3604, -1000, 16218, 16218, 16218, 7383, 402, 243, -1000,
	41732, -1000, 42590, 10914, 10914, 10914, 241, 42465, 15512, -107,
	39240, 4422, 3573, -65, -79, -1000, -80, -1000, 2211, -85,
	239, 599, 596, 238, -1000, -1000, 401, -86, 608, 10561,
	19042, 6324, -1000, 608, 9855, -1000, 19747, 19747, 1376, 1478,
	19747, -1000, -1000, -1000, -1000, 26625, 471, 584, 26625, -1000,
	2206, 1443, 236, -1000, -1000, -1000, 36183, 400, -1000, 584,
	230, 968, 36183, 36183, 36183, -1000, -1000, 1323, 37200, 1320,
	43872, 36183, -1000, 390, 389, 1461, 1453, 36183, 36183, 36861,
	36522, 36183, 974, 107, -1000, 595, 381, 36183, 916, 594,
	36183, 107, -1000, 366, 36183, 911, -1000, 587, 1573, 1242,
	-1000, 799, 1617, 36183, 228, -87, -37, 43872, -1000, -1000,
	-1000, -1000, -1000, 36183, 462, 36183, 107, 36183, 36183, 2226,
	107, 36183, 1732, 1739, 560, 36183, 1485, 15512, 1001, -1000,
	18689, 644, 36183, 914, 88, -1000, -1000, -1000, 570, 36183,
	-1000, -1000, 121, 121, -1000, 120, 1257, -38, -1000, 15512,
	-1000, -1000, 36183, 23562, -93, -1000, -1000, 43872, -1000, 530,
	749, -1000, 2202, 615, 23562, 36183, 9149, 9149, -1000, 1508,
	-1000, -1000, 940, -1000, 943, -1000, -1000, -1000, -1000, 9149,
	-1000, -42, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1173,
	1129, -1000, -1000, -1000, 857, -1000, 15512, 2198, -1000, -1000,
	-1000, 8796, -1000, -1000, -1000, 36183, -182, 15512, 41215, 41215,
	15512, 16218, 16218, -1000, 41215, -1000, -1000, -1000, -1000, -1000,
	1611, 365, 15512, 43872, 3376, 2728, -96, -1000, 15512, -39,
	-1000, 15512, -1000, 41126, -1000, -1000, 526, 1895, -1000, 15512,
	42304, 224, 10208, -1000, 42179, -28, -28, -1000, 2224, 1375,
	1157, 947, 827, 2190, -1000, 20802, 623, 1155, 41001, 43777,
	43872, -1000, 15512, -1000, -1000, 1609, 15512, -1000, 43777, 43872,
	16218, 16218, 16218, 16218, 16218, 16218, 16218, 16218, 16218, 16218,
	16218, 16218, 16218, 16218, 16218, 16218, 16218, 16218, 16218, 1391,
	16218, 2146, 2146, 2146, -40, 15512, -1000, 1655, 1609, 15512,
	15512, 43872, 223, 221, 220, -1000, 15512, -107, 15512, 15512,
	15512, -1000, -1000, -1000, 218, -1000, 2165, -1000, -1000, -1000,
	-1000, 2852, -1000, 1592, -1000, -81, -1000, 1910, -1000, 1592,
	-1000, -1000, 1376, -1000, 364, 15512, 19747, -1000, 517, -1000,
	-98, -1000, 26625, -1000, 515, -220, -1000, 566, -1000, 584,
	363, 36183, 26625, -1000, -1000, -1000, 726, 724, 1730, -1000,
	1315, -1000, 650, -1000, 960, 15512, 17277, 361, 359, 1006,
	-1000, 1726, 1257, 1724, 1257, -1000, -41, 1003, -1000, 21506,
	15512, -1000, 723, 21506, -1000, -1000, 15512, -1000, 722, 21506,
	615, 1608, 783, -1000, 794, -1000, 1551, -1000, 24579, 351,
	36183, 350, -1000, 348, -1000, -1000, -1000, 347, 36183, 1433,
	560, 23901, -1000, 617, 914, -1000, 43037, -1000, 914, 8443,
	1985, -106, -1000, -1000, -1000, 608, 20450, 19747, 9855, -109,
	-1000, -1000, -1000, -1000, 43037, -42, 1945, 1945, -1000, 2161,
	-1000, 510, 217, -1000, 27303, -1000, -42, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36183, 1532, 6324, 36183, 36183, 1156,
	40719, -1000, 2019, 6324, 2130, 41215, 1125, 403, 15512, 43872,
	43428, -111, 15512, 15512, -1000, 215, 15512, 508, 43037, -1000,
	-1000, -1000, 43037, 15512, 2223, 15512, 214, 210, 208, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 207, -1000, -1000,
	38895, 15512, 206, -1000, 205, 203, 43037, 1655, 43037, -1000,
	-1000, 601, 601, 907, 907, 907, 907, 2146, 2879, 2617,
	1183, 380, 380, 380, 2687, 1192, 1192, 380, 380, 380,
	1607, 1420, 346, 3863, 15512, 192, -1000, -1000, 43037, 43037,
	190, -1000, -1000, -1000, -107, 349, 40681, 40556, -1000, 177,
	174, 1582, 2074, -1000, 19747, 1582, -1000, 36183, 43037, -1000,
	-187, -1000, 2157, -1000, -1000, 1443, -1000, 5613, 26625, 36183,
	-112, -1000, 36183, 36183, 36183, 1715, -1000, 3170, -1000, 40274,
	-119, -1000, 304, 2046, 15512, -1000, -1000, 327, 17277, 36183,
	-1000, 1448, 1522, 690, 36183, -1000, 36183, -1000, 36183, 36183,
	36183, -1000, 326, 108, -120, 36183, -1000, -122, 36183, -1000,
	-1000, 23562, 759, -1000, 1071, 1555, -1000, 17277, 324, 36183,
	24579, 2098, 17277, 1222, 1421, 560, 23901, -1000, 773, -1000,
	-1000, -45, -1000, 358, 107, 914, -1000, -47, -1000, 565,
	1927, -1000, 1924, 506, -1000, -1000, -54, 321, -1000, 562,
	561, -1000, -67, -1000, 533, -1000, -1000, -1000, -1000, -1000,
	-1000, 2019, 15512, 15512, 43428, -125, -1000, 41215, 41215, -1000,
	40236, -1000, 43037, -1000, 42179, -1000, -1000, -1000, -1000, 1036,
	-1000, 40111, -1000, -1000, -1000, -1000, 16218, 1604, 317, 43872,
	39829, -1000, -1000, 15512, -1000, -1000, -1000, -1000, 620, 15512,
	15512, 1910, 620, -127, 584, -1000, -1000, -1000, 2153, -1000,
	-128, -1000, -1000, -1000, -1000, 36183, -1000, 36183, -1000, 6324,
	36183, 1600, 1283, -1000, -1000, 1441, 315, 16218, 36183, -1000,
	1081, 17277, 2019, 108, 6324, 2019, 39791, 4859, -133, -134,
	1274, -1000, 1262, 15512, -1000, 43872, 1257, 1257, -1000, 720,
	711, 15512, 705, -1000, 704, -1000, -70, 21506, -1000, -1000,
	2071, 1076, -135, 17277, -142, 172, 107, -143, 36183, -1000,
	560, 23901, -1000, 1739, 1902, 36183, 1956, -1000, -1000, 310,
	308, 307, -1000, 26964, 26964, 23562, 23562, 1532, -1000, 36183,
	-1000, 41215, 41215, -1000, -1000, 171, 1155, 2068, -1000, 1104,
	16218, 43872, -144, -1000, 39666, -1000, 36183, 43037, -107, -1000,
	-1000, 26625, 404, -1000, -1000, 1516, -1000, -1000, 36183, 1306,
	-1000, -1000, 15512, 3863, 305, 1551, 303, -1000, -1000, -1000,
	-1000, -1000, -1000, 2046, -15, -1000, 942, -1000, -1000, 43037,
	2041, -1000, -1000, 36183, 36183, -28, 302, 300, -1000, 1035,
	36183, 1081, -145, -1000, 1551, -1000, 1081, 298, 23901, -1000,
	1433, 789, -150, 36183, -1000, -1000, 6675, 23562, 23562, -1000,
	-151, -1000, -1000, -1000, -158, -1000, 1054, 15512, 1104, -161,
	-1000, -1000, -99, -1000, 2097, -1000, -1000, -1000, -1000, 1707,
	39403, 1388, 36183, -1000, 36183, 2019, 170, 36183, 656, 6324,
	-1000, -1000, 169, 15512, 15512, 297, 296, 294, 1551, 1081,
	-1000, 1551, 17277, -1000, 1421, 819, -1000, 608, -1000, -163,
	-168, -1000, -1000, 168, 15865, 15865, -107, -1000, 36183, 291,
	1690, -1000, 1179, 1136, 165, -169, -1000, -1000, 290, -1000,
	15512, -1000, 2223, -174, -180, 36183, 36183, 36183, -1000, 1551,
	-1000, -185, -1000, 20450, -1000, 615, 615, -1000, -1000, -1000,
	16924, 1353, 893, 41607, -1000, -1000, -1000, 36183, -1000, 1213,
	1205, 909, -1000, -1000, -1000, -1000, -1000, 1388, 43037, -1000,
	-1000, -190, -191, -193, -1000, 1081, -159, -1000, -1000, 2125,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1908, -1000, 659,
	1256, 1256, 1179, 288, 287, 1178, 1551, -1000, 15159, -1000,
	2132, -1000, -1000, 1372, -1000, -1000, 1032, 1031, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 164, 6324, 161, 6324,
	-1000, 642, -1000, 641, 286, 1410, -46, 9502, 754, 311,
	-121, -1000, -198, -1000, 43037, -1000, -1000, 285, -1000, 9502,
	1032, -1000, 9502, 9502, -199, -1000, -1000, -200, -1000, -53,
	1031, -140, -1000, -1000, 1031, -1000,
}
var sqlPgo = [...]int{

	0, 2704, 2703, 1758, 2107, 2702, 2700, 2699, 2696, 2695,
	2694, 2693, 2692, 2689, 2688, 2687, 2686, 2678, 2676, 2673,
	2672, 2671, 2670, 2667, 2096, 2663, 2033, 2662, 2658, 2657,
	2656, 2652, 37, 2650, 2647, 2031, 2644, 2643, 2639, 2635,
	2630, 2629, 2619, 2022, 2618, 2018, 2615, 2613, 2612, 2611,
	2605, 1977, 2604, 94, 114, 1972, 2600, 2598, 1954, 1913,
	1830, 2588, 1826, 2587, 2581, 1824, 1819, 2580, 51, 2579,
	2578, 2577, 1812, 1779, 2575, 2574, 2573, 156, 2572, 1776,
	2570, 2569, 2568, 2567, 2565, 2560, 2559, 2558, 2551, 2544,
	2540, 2539, 2537, 2535, 2533, 2530, 2520, 2519, 2512, 163,
	2510, 2507, 1771, 1766, 2504, 2501, 32, 41, 19, 66,
	21, 158, 2905, 145, 2500, 2499, 2498, 2496, 2495, 2492,
	30, 96, 98, 2488, 132, 2486, 2485, 49, 34, 28,
	20, 2484, 89, 2482, 2481, 2169, 31, 2479, 2477, 140,
	2476, 39, 26, 2282, 155, 151, 108, 122, 2464, 2463,
	2461, 62, 120, 22, 9, 8, 14, 1, 2458, 2,
	5, 2454, 2451, 17, 91, 79, 2450, 53, 127, 2447,
	2446, 130, 2445, 54, 90, 1614, 154, 126, 232, 92,
	2443, 78, 11, 63, 2442, 2441, 165, 40, 2438, 55,
	84, 143, 112, 2434, 73, 162, 128, 82, 129, 134,
	2433, 2432, 2429, 104, 2422, 117, 103, 2420, 2419, 68,
	2418, 97, 138, 2417, 141, 107, 2416, 2410, 119, 2407,
	123, 2393, 2391, 161, 148, 115, 33, 59, 67, 24,
	1630, 1610, 135, 88, 61, 45, 2386, 794, 1085, 915,
	57, 102, 80, 44, 100, 60, 93, 147, 29, 2385,
	2382, 139, 2374, 2372, 2361, 2360, 2359, 101, 2357, 2353,
	27, 2345, 81, 35, 46, 110, 38, 177, 125, 109,
	157, 99, 2344, 76, 131, 2336, 354, 2335, 2333, 1683,
	116, 2332, 2325, 2324, 1241, 1182, 1013, 111, 2322, 2321,
	878, 865, 2319, 2318, 113, 2316, 118, 106, 160, 146,
	150, 58, 2314, 121, 48, 2310, 36, 18, 0, 69,
	23, 2308, 124, 83, 2307, 2302, 2295, 2294, 16, 4,
	3, 7, 13, 10, 64, 50, 2293, 2292, 133, 86,
	75, 2291, 159, 2290, 2288, 2286, 43, 2285, 12, 2284,
	15, 2283, 2281, 25, 6, 2280, 2275, 142, 2271, 95,
	2270, 2041, 2269, 153, 2268, 2264, 1967, 2260, 72, 105,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 122, 122, 121, 121,
	121, 121, 121, 121, 121, 121, 121, 121, 121, 121,
	121, 121, 121, 119, 119, 124, 124, 124, 126, 126,
	123, 123, 118, 118, 24, 24, 66, 66, 109, 59,
	59, 59, 306, 306, 307, 307, 105, 105, 106, 106,
	106, 106, 107, 107, 108, 108, 108, 34, 34, 34,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 43, 43, 44, 44, 44, 44,
	44, 44, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 50, 50, 50, 48, 48, 48, 47,
	47, 47, 46, 46, 46, 49, 49, 49, 177, 177,
	176, 176, 180, 180, 51, 51, 51, 51, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 54, 54, 54, 54, 54, 54,
	54, 275, 275, 274, 52, 52, 249, 249, 55, 55,
	204, 204, 56, 56, 56, 56, 56, 57, 57, 67,
	67, 347, 347, 347, 351, 351, 352, 352, 353, 353,
	353, 353, 353, 353, 353, 349, 349, 62, 62, 62,
	62, 63, 63, 63, 64, 64, 104, 104, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 29, 30, 30,
	31, 31, 32, 32, 73, 73, 73, 75, 72, 72,
	72, 74, 74, 74, 74, 76, 76, 77, 77, 77,
	77, 77, 78, 78, 300, 298, 298, 299, 299, 149,
	149, 149, 149, 149, 150, 150, 150, 305, 305, 305,
	305, 305, 305, 304, 304, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 91, 91, 91, 99, 99, 99, 99, 99,
	99, 99, 80, 80, 85, 85, 85, 85, 85, 81,
	81, 86, 86, 87, 87, 88, 88, 88, 88, 88,
	88, 82, 82, 82, 82, 90, 90, 90, 90, 89,
	89, 95, 95, 95, 95, 95, 95, 92, 92, 92,
	92, 93, 93, 93, 96, 96, 96, 96, 83, 83,
	84, 84, 97, 97, 98, 98, 98, 98, 98, 94,
	94, 94, 348, 348, 350, 350, 60, 60, 38, 38,
	39, 39, 151, 151, 152, 152, 228, 228, 228, 228,
	153, 153, 125, 125, 125, 154, 154, 155, 155, 156,
	156, 156, 158, 158, 159, 159, 160, 160, 160, 157,
	157, 157, 227, 316, 316, 317, 317, 317, 317, 317,
	317, 318, 318, 318, 318, 318, 318, 318, 314, 314,
	315, 312, 312, 313, 313, 313, 313, 354, 354, 226,
	226, 163, 163, 319, 319, 319, 319, 320, 320, 320,
	320, 320, 323, 322, 321, 321, 321, 321, 321, 261,
	261, 261, 40, 40, 101, 101, 41, 41, 131, 131,
	42, 42, 37, 37, 37, 208, 208, 167, 167, 266,
	266, 266, 142, 142, 120, 120, 120, 17, 13, 13,
	13, 13, 13, 13, 23, 23, 21, 21, 209, 209,
	210, 210, 61, 61, 65, 65, 70, 70, 100, 100,
	100, 100, 100, 100, 25, 25, 25, 25, 33, 33,
	33, 33, 69, 69, 356, 356, 138, 138, 138, 138,
	139, 139, 223, 223, 224, 224, 357, 357, 225, 225,
	225, 133, 132, 134, 134, 36, 36, 36, 127, 127,
	128, 128, 129, 129, 130, 130, 358, 358, 58, 58,
	58, 103, 103, 145, 145, 220, 220, 220, 222, 222,
	221, 221, 221, 194, 194, 194, 102, 102, 172, 172,
	182, 182, 183, 183, 272, 184, 184, 68, 68, 112,
	112, 110, 110, 110, 110, 110, 110, 110, 110, 111,
	111, 111, 113, 113, 113, 113, 113, 113, 113, 116,
	116, 116, 117, 117, 117, 115, 115, 329, 329, 329,
	332, 332, 328, 330, 330, 331, 331, 355, 355, 195,
	195, 195, 162, 161, 161, 165, 165, 164, 166, 166,
	265, 265, 265, 192, 192, 191, 191, 191, 191, 213,
	213, 211, 211, 212, 212, 216, 216, 217, 217, 217,
	218, 218, 219, 219, 190, 190, 245, 245, 215, 215,
	214, 114, 114, 114, 171, 171, 171, 173, 173, 235,
	235, 235, 236, 236, 234, 234, 234, 234, 267, 267,
	267, 267, 267, 267, 267, 267, 345, 345, 345, 346,
	346, 264, 264, 268, 268, 268, 268, 268, 268, 262,
	262, 262, 262, 263, 263, 273, 273, 198, 198, 198,
	198, 196, 196, 197, 197, 269, 269, 269, 269, 193,
	193, 270, 270, 270, 229, 229, 276, 276, 276, 294,
	294, 170, 170, 170, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 277, 277, 277, 277, 277,
	277, 277, 277, 277, 277, 278, 278, 278, 278, 280,
	280, 280, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	293, 293, 293, 293, 293, 281, 281, 288, 288, 289,
	289, 290, 291, 282, 282, 283, 283, 284, 285, 292,
	292, 292, 292, 296, 296, 286, 286, 286, 286, 286,
	287, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 205, 205, 206, 206, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 239,
	239, 239, 239, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 324, 324, 324, 324, 324, 324,
	324, 324, 326, 326, 327, 327, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 333, 333, 334, 334,
	336, 336, 337, 337, 338, 339, 339, 339, 340, 341,
	341, 335, 335, 342, 342, 342, 343, 343, 344, 344,
	344, 344, 344, 251, 251, 252, 253, 259, 259, 259,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 148, 148, 148, 140, 140, 140, 140,
	140, 179, 179, 178, 178, 248, 248, 246, 246, 250,
	250, 199, 199, 295, 295, 295, 295, 295, 295, 295,
	200, 200, 200, 207, 201, 201, 202, 202, 202, 202,
	202, 242, 243, 203, 203, 203, 244, 244, 254, 258,
	258, 257, 256, 256, 255, 255, 232, 232, 233, 233,
	231, 230, 187, 187, 186, 186, 185, 185, 359, 359,
	260, 260, 188, 188, 189, 181, 181, 271, 271, 271,
	271, 174, 174, 147, 147, 175, 175, 143, 143, 146,
	146, 144, 144, 144, 144, 168, 168, 169, 169, 141,
	141, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 297, 297, 297, 247, 135, 135, 135, 136,
	136, 137, 137, 302, 302, 302, 303, 303, 303, 303,
	301, 301, 301, 301, 301, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 311,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 3, 1,
	2, 1, 2, 2, 7, 3, 2, 2, 2, 2,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 1, 3, 1, 5, 2, 3, 0, 3, 2,
	3, 0, 2, 3, 2, 3, 2, 6, 2, 6,
	2, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 1, 4, 7,
	1, 3, 2, 4, 6, 6, 3, 5, 3, 2,
	6, 3, 3, 4, 4, 3, 3, 1, 3, 3,
	1, 1, 2, 1, 1, 1, 1, 1, 3, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 3, 3, 4, 4, 3, 4, 4, 4,
	3, 2, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 2, 3, 3, 3, 2,
	3, 4, 3, 5, 3, 4, 5, 2, 3, 3,
	3, 4, 2, 3, 4, 3, 3, 3, 4, 4,
	4, 4, 2, 3, 7, 7, 7, 4, 5, 5,
	5, 5, 2, 0, 2, 0, 3, 2, 8, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 1, 0, 9, 9, 6,
	7, 5, 3, 5, 1, 3, 1, 1, 1, 10,
	11, 9, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 3, 6, 4, 2, 4, 3, 3, 0,
	6, 3, 11, 14, 4, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 0, 1, 1,
	1, 2, 3, 2, 2, 8, 11, 3, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	3, 6, 3, 1, 3, 1, 4, 2, 8, 5,
	4, 3, 0, 2, 2, 0, 8, 3, 2, 0,
	1, 3, 1, 1, 3, 5, 5, 1, 1, 3,
	3, 1, 2, 4, 4, 2, 3, 5, 5, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 1, 0, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 1, 0,
	2, 2, 2, 3, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 2, 1, 3, 1, 1,
	2, 2, 1, 1, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 1, 1, 3, 3,
	1, 1, 6, 6, 4, 3, 4, 3, 4, 3,
	4, 4, 3, 6, 5, 5, 5, 4, 8, 6,
	6, 4, 4, 3, 4, 3, 5, 0, 5, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 5, 4, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 3, 1, 3, 3, 3, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 2, 2, 3, 2, 1, 1, 3, 5, 1,
	2, 4, 2, 0, 1, 0, 3, 5, 1, 0,
	2, 2, 1, 1, 1, 2, 1, 2, 1, 0,
	1, 1, 1, 3, 3, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 382, -4, -24, -26, -29, -34,
	-35, -56, -43, -44, -45, -55, -51, -57, -58, -59,
	-60, -52, -66, -65, -67, -70, -68, -61, -62, -71,
	-79, -100, -101, -102, -103, -5, -6, -7, -8, -9,
	23, 34, -27, -28, 47, -30, 71, -36, -37, -38,
	-39, -40, 73, -41, -42, 94, -331, 98, -46, -47,
	-48, -50, -49, 102, 109, 112, 134, 145, 231, 237,
	258, 260, 262, 269, -110, -112, 256, -63, -64, -72,
	-73, -74, -75, -104, 282, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, -90, -91, -92, -93, -94,
	-95, -96, -97, -98, 285, -25, -33, -69, 324, -11,
	-12, -15, -14, -16, -13, -20, -22, -19, -21, -23,
	-17, -18, -10, 111, -329, -113, -111, 379, 257, 333,
	35, 294, 61, 105, 264, 349, 356, -116, -114, -115,
	-117, 274, 341, 304, 383, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 2, 304,
	344, 87, 153, 242, -347, 2, -175, 304, 87, -144,
	-135, 372, 4, -308, -310, 20, 21, 23, 33, 34,
	35, 40, 44, 47, 48, 55, 60, 61, 62, 67,
	64, 65, 66, 69, 71, 72, 75, 76, 77, 85,
	86, 88, 90, 94, 96, 98, 101, 102, 104, 109,
	111, 110, 112, 122, 123, 128, 130, 135, 141, 142,
	145, 146, 154, 157, 159, 152, 169, 170, 171, 175,
	176, 177, 180, 179, 184, 185, 188, 189, 192, 194,
	196, 197, 200, 198, 202, 203, 205, 204, 210, 212,
	213, 215, 218, 221, 224, 227, 228, 229, 230, 231,
	233, 235, 237, 239, 240, 241, 242, 243, 245, 246,
	248, 249, 250, 251, 252, 256, 254, 255, 257, 258,
	259, 260, 262, 264, 265, 267, 283, 284, 295, 269,
	270, 271, 272, 273, 278, 275, 276, 279, 280, 282,
	285, 287, 290, 293, 294, 296, 299, 300, 297, 292,
	303, 305, 306, 307, 308, 309, 310, 311, 312, 319,
	320, 324, 325, 326, 327, 330, 331, 332, 333, 335,
	338, 339, 340, 345, 350, 351, 352, 353, 354, 28,
	36, 37, 38, 39, 41, 42, 45, 46, 51, 52,
	53, 56, 89, 91, 92, 108, 113, 114, 124, 125,
	126, 136, 138, 147, 148, 151, 158, 160, 161, 162,
	163, 164, 166, 173, 174, 182, 199, 209, 211, 222,
	226, 234, 236, 244, 266, 277, 288, 289, 298, 301,
	314, 315, 316, 321, 322, 337, 341, 342, 382, 382,
	2, 170, 241, -143, -135, 87, 382, 382, 382, 382,
	304, 2, 275, 334, 344, -208, 87, 329, 382, 382,
	-135, 237, 22, 2, 96, 157, 332, 331, 22, 233,
	276, 306, 308, 2, 382, 382, 382, 382, 382, 2,
	344, 304, 153, 87, 334, -135, 2, -54, 2, 379,
	-53, -4, -35, -45, -55, -51, -24, -26, -43, -59,
	-58, -60, -62, -66, -65, -68, -72, -73, -79, -102,
	-103, 282, 111, -351, 2, 22, -352, -353, 73, 102,
	134, 274, 157, 96, 331, 304, 2, 170, 2, -135,
	2, -347, 2, 170, 2, -351, 2, -135, 2, -139,
	2, 269, -135, 382, 382, 382, 382, 382, 189, 55,
	266, 279, -77, 320, -76, 314, -300, -78, 2, -176,
	200, -135, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 2,
	-99, 279, 34, 55, 22, 60, 88, 135, 153, 154,
	176, 68, 69, 240, 189, 171, 319, 177, 280, 305,
	320, 73, 335, 309, 110, 4, 87, 200, 281, 314,
	382, 382, 382, -355, 2, 304, 271, 285, -111, -113,
	-112, -164, -165, 328, 165, 107, 220, -110, -112, 2,
	-329, -99, 279, 2, 55, 22, -298, 2, -260, 216,
	-237, 93, -239, 370, 371, 365, 206, 355, -251, -241,
	-254, 108, 266, 379, -143, -240, 385, 9, -326, -112,
	29, -252, -253, 49, -135, 7, 8, 5, 6, -141,
	-278, -247, -287, 323, 115, 208, -324, -325, 4, -308,
	-302, -279, -289, -283, -286, 166, 58, 79, 80, 83,
	81, 84, 281, 334, 50, 28, 113, 114, 226, 234,
	301, 321, 322, 147, 209, 148, 56, 136, 182, 101,
	37, 39, 41, 42, 51, 52, 89, 91, 92, 124,
	125, 126, 158, 160, 161, 162, 163, 164, 211, 244,
	288, 298, 315, 316, 342, -309, -290, -291, -284, -285,
	74, 116, 133, 156, 149, 168, 172, 183, 186, 195,
	201, 223, 225, 263, 286, -292, -356, 2, 320, 320,
	2, -356, 2, -356, 2, -138, 2, 320, 317, -332,
	245, -328, -135, -332, 382, 382, 384, 382, -161, -162,
	2, 22, 99, -189, 2, 379, -267, 2, 377, -269,
	-143, -112, -268, 379, 217, -3, 2, -269, 147, -143,
	2, -269, 147, -143, 2, -135, 2, -146, 147, -143,
	-301, 4, -308, -310, -309, -311, 58, 22, 24, 25,
	26, 27, 29, 30, 31, 32, 43, 49, 50, 54,
	57, 59, 68, 73, 78, 79, 81, 80, 82, 83,
	84, 93, 95, 97, 99, 100, 103, 105, 107, 115,
	117, 129, 131, 132, 134, 137, 139, 150, 153, 155,
	165, 167, 178, 181, 187, 190, 191, 206, 207, 208,
	214, 216, 217, 219, 220, 232, 238, 247, 261, 274,
	281, 291, 302, 304, 313, 317, 318, 323, 328, 329,
	334, 336, 343, 344, 346, 347, 348, 349, 317, 384,
	-175, -168, -135, -231, -230, 381, -237, 2, -237, 2,
	132, 379, -186, -187, -230, -231, 2, -176, 147, -176,
	147, -135, 2, -176, 2, 153, -135, 147, 2, -135,
	22, 132, 2, 167, 2, 167, 2, -270, 2, -269,
	-177, 147, 2, -176, -177, 147, 2, -147, 147, 2,
	-146, -135, 147, 2, -168, 147, 2, -204, 379, -275,
	2, -274, -303, 4, -308, -310, -309, 341, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	279, 216, 384, -176, -237, -249, 379, 132, -237, 216,
	-135, 2, 283, 2, 379, -77, 53, 320, -224, 2,
	-225, -132, -133, -134, 169, 239, 243, 354, 317, 360,
	132, -298, -180, 381, -99, 2, -306, 2, -304, 9,
	-303, 5, 283, 2, 240, 280, 55, 132, 2, 2,
	-348, 2, 216, 132, 2, 132, 2, 132, 2, 132,
	2, 132, 2, 2, 240, 280, 2, 129, 2, 319,
	2, 2, 132, 2, 169, 239, 295, 2, 304, 344,
	2, 132, 132, 354, 2, -193, -269, 304, 354, 22,
	-164, -165, -214, -191, 129, -211, -212, 187, 117, 214,
	-195, 22, 99, -195, -195, 44, 380, 380, -99, 283,
	2, 10, 11, 57, 33, 370, 371, 372, 373, 127,
	374, 375, 368, 369, 367, 358, 359, 362, 363, 364,
	70, 361, 360, 63, 193, 268, 118, 119, 120, 121,
	253, 13, 14, 15, 26, 219, 186, 355, 149, 286,
	365, 16, 17, 18, 168, 36, 150, -140, -148, -237,
	-237, -237, -237, -237, 225, -185, -232, 377, -112, 379,
	379, -112, -237, -178, 379, 7, -112, -246, 377, -255,
	-237, -186, 379, 5, 379, 5, -333, 350, 129, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 236, -296,
	345, -296, -296, -280, 379, -280, -281, 379, -280, 351,
	356, 379, -223, -224, -223, 317, -139, 384, -332, -169,
	379, -189, -181, -271, -237, 372, -181, -188, -260, 74,
	-198, 172, 201, 133, 183, 263, 156, 7, -54, -234,
	385, 379, 372, -264, 356, -112, -268, 379, -267, -143,
	379, -122, 254, -121, 21, 23, 102, 339, 108, 292,
	310, 111, 270, 254, 108, 111, 254, 292, 310, 270,
	254, 108, 385, 111, -306, -144, 384, -301, 372, 296,
	380, -174, -143, -187, 379, -163, 206, 206, -131, -330,
	349, -163, 379, -136, 147, 2, -135, -330, 206, -270,
	-145, -143, -145, 282, -135, 30, -124, 384, 48, 259,
	108, -124, 108, -124, 384, 108, -124, 108, 108, -178,
	-237, 380, 384, -347, -353, 73, 379, 30, -248, -276,
	-277, -279, -288, -282, -286, -287, 40, 46, 45, 174,
	173, 311, 199, 277, 289, 337, 151, 38, 215, 159,
	4, 158, 160, 161, 162, 163, 164, 288, 37, 244,
	125, 126, 124, 101, 92, 91, 211, 42, 41, -290,
	-291, -284, -285, 89, 315, 316, 166, 39, 52, 51,
	342, 298, -307, -306, -347, -300, -178, 30, -224, 2,
	-357, 384, 185, -150, 192, 205, 141, 217, 352, -305,
	5, 4, -247, -261, 93, 189, -287, 8, 371, -297,
	7, 370, -299, -298, -299, 77, 381, -301, -176, 22,
	284, 2, -300, -350, 129, -347, -300, -300, -300, -300,
	-300, 279, -54, 129, -135, 185, -300, 2, -300, 2,
	304, 153, 304, -124, 384, -143, 64, 65, 354, -214,
	-191, -192, -191, -215, -214, 331, -212, -211, -216, -237,
	22, -219, 123, 202, -237, -239, -111, -111, -111, -166,
	-265, -237, 238, 153, -300, -294, -276, -293, 249, 250,
	248, 252, 251, -276, -301, 314, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, -237, -237,
	-237, -237, -237, -237, -237, -237, -237, -237, 186, 149,
	286, 36, 150, -237, 317, -237, -237, -237, -237, 198,
	206, 208, 323, 115, 330, 99, 212, -359, 302, 32,
	-244, -112, 379, -259, 27, 291, 22, -251, 266, 379,
	-232, -237, -233, -179, -178, 380, 384, -179, -250, -246,
	-258, -257, 346, 380, -178, 343, 22, 99, 372, 2,
	7, -205, 353, 197, 90, 142, 196, -206, 273, -334,
	122, 137, 379, 380, 2, 380, 2, 380, 2, 380,
	2, -237, -237, -199, 2, -295, -178, 4, 353, 197,
	90, 142, 196, 273, -199, 2, -200, 2, -237, -178,
	-201, -238, -239, 370, 371, 365, 379, 266, -202, 2,
	-237, -179, -237, 43, 181, 318, -203, -237, 132, -178,
	-237, -237, -237, -178, -178, 2, -178, 2, 379, 7,
	7, 314, 314, 7, -139, -328, 30, -168, -171, 384,
	132, 30, 4, -171, 384, 380, 172, 172, -267, -198,
	172, -196, 223, -196, -196, -345, 379, 378, -264, -301,
	377, 386, -179, 2, -263, -262, 30, -135, 221, 380,
	-143, 384, 317, -209, 68, 59, -227, 147, 59, -312,
	-135, 68, -313, 54, 329, 238, 131, -209, 68, -209,
	68, 68, -269, 33, -68, 66, 132, 317, -269, 66,
	317, 33, -68, 132, 317, -146, -301, 66, -273, 357,
	-135, 132, 380, 384, -151, -168, -152, -135, -228, -227,
	-314, -315, -312, 153, 329, 116, 30, 108, 108, 230,
	30, 216, 206, -127, 307, 108, -229, 347, -220, -68,
	379, 93, 30, -220, -182, -183, -272, -184, -143, 379,
	-135, -176, -177, -177, -146, -147, -135, -168, 380, 384,
	-54, -274, 317, 336, -152, -53, 380, 384, -170, 29,
	377, -205, 379, -273, 384, 132, 360, 317, 380, 320,
	-225, -149, 243, 290, 255, 278, 8, 7, 7, 384,
	-301, -349, -135, 279, -54, -143, -146, -143, -269, 349,
	129, 65, -192, -215, -217, -297, 379, 371, -218, 266,
	267, 384, -120, 31, 97, 175, -143, 354, -237, -237,
	317, -359, 302, -244, -237, 198, 208, 323, 115, 330,
	99, 212, 132, 379, -238, -238, -178, -241, 379, -178,
	378, 388, 380, -237, 378, 378, 384, -256, -257, 103,
	-237, -165, 384, -164, -237, -178, -178, 380, 380, 317,
	317, 317, 317, 379, -339, 224, 379, 379, -237, 30,
	384, 380, 132, 380, 380, -207, 232, 380, 10, 11,
	370, 371, 372, 373, 127, 374, 375, 368, 369, 367,
	358, 359, 360, 63, 193, 268, 13, 14, 15, 168,
	150, -238, -238, -238, -178, 379, 380, -242, -243, 132,
	129, 30, -203, -203, -203, 380, 132, -178, 384, 384,
	384, 380, 380, 380, 7, 380, 384, 380, 354, 354,
	380, 379, 380, -229, -271, -173, 2, -267, -301, -229,
	-260, -267, -267, -197, 336, 216, 172, -267, -262, 380,
	-346, 7, -264, -263, 7, -236, -235, 130, 204, 380,
	-135, 379, -264, 380, -121, -143, -135, -135, 206, -227,
	147, -126, 206, -276, -135, 379, 379, 175, 175, -135,
	-135, 147, -135, 147, -135, -135, -122, 254, -68, 354,
	379, -143, 254, 354, -135, -68, 379, -135, 254, 354,
	-105, 146, 212, 296, 132, -143, 380, 380, 384, -136,
	153, -136, -68, -176, -176, 5, -68, -143, 108, -128,
	104, -358, 360, -135, -213, -211, -237, -194, -222, 261,
	216, -174, 341, -135, -194, -172, 384, 132, 360, -174,
	-124, -124, -124, -124, -237, -349, -306, 380, -276, 377,
	378, 7, 7, -108, 349, -306, -349, -298, -298, -132,
	327, 62, 243, -298, 384, 218, 242, 87, 304, -218,
	-237, -265, -143, 385, -237, -237, -238, -238, 132, 379,
	-237, -248, 26, 26, 380, -179, 384, -233, -237, 380,
	-246, 105, -237, 313, 380, 343, -165, -165, -165, 5,
	197, 142, 196, -206, 196, -206, -206, 7, -340, -135,
	379, 347, -164, 380, -294, -276, -237, -242, -237, -294,
	-276, -238, -238, -238, -238, -238, -238, -238, -238, -238,
	-238, -238, -238, -238, -238, -238, -238, -238, -238, -238,
	99, 206, 212, -238, 384, -179, -243, -242, -237, -237,
	-276, 380, 380, 380, -178, -237, -237, -237, 380, 7,
	-53, -190, 137, -273, 384, -190, -197, 379, -237, -267,
	378, 380, 384, -263, 378, 384, 387, 360, -264, 379,
	-168, -262, 317, 317, 108, 206, 338, -316, -313, -237,
	-167, -266, -135, -327, 379, -324, -325, -141, 379, 379,
	-119, 102, 282, -210, 108, -124, 108, -124, 317, -209,
	68, -240, -141, -135, -178, 317, -240, -178, 317, -240,
	-108, 132, 303, 296, -153, 152, -228, 379, -136, 379,
	379, -163, 379, -135, -129, 180, -358, -304, -330, -194,
	-194, -181, 207, 67, 380, -229, -183, -173, -260, 380,
	-109, 75, -109, 7, 378, 380, -107, 218, -106, -135,
	5, -135, -31, -32, 153, -301, -135, -143, 217, 380,
	-120, -301, 26, 26, -237, -248, 380, -237, -237, 380,
	-237, 378, -237, 5, -237, 380, 380, 380, 380, -341,
	-135, -237, 380, 380, 380, -243, 132, 99, 212, 379,
	-237, 380, 380, 384, 380, 380, 380, 380, -245, 139,
	44, -267, -245, -168, -234, 7, -235, -301, 377, -263,
	-168, 380, -135, -135, -227, 108, -317, 68, -318, 57,
	116, 73, 206, 208, 329, 238, 54, 93, 247, 380,
	380, 384, -142, -186, 57, -142, -237, 379, -167, -168,
	206, 93, 206, 93, 86, 325, -135, -135, -143, -135,
	-135, 379, 380, -143, 380, -135, -307, 314, -154, -155,
	229, 150, -167, 379, -168, -151, 30, -167, 216, -130,
	179, -358, -304, -127, -221, 379, 216, -68, -194, 360,
	86, 86, 378, 384, 379, 360, 360, 384, 22, 379,
	-120, -237, -237, 380, 380, -165, -335, 229, 380, -238,
	132, 379, -248, 380, -237, -336, 348, -237, -178, -336,
	380, -264, 7, 380, -227, -135, -301, -135, 116, 147,
	208, 175, 379, -238, -143, -226, -354, 72, 300, -266,
	-120, -301, -120, 380, -178, 380, 380, 208, 208, -237,
	-276, -124, -124, 317, 317, -178, 317, 317, -240, 44,
	227, 380, -167, 380, 380, -68, 380, -143, -358, -304,
	-128, 100, -168, 68, -189, -112, 379, 379, 379, -106,
	-107, -306, -306, -32, -168, 380, -165, 44, -238, -248,
	380, 380, -337, -338, -135, -263, 378, -318, -136, 206,
	-237, -137, 379, -153, 379, -142, -165, 247, -123, 57,
	-135, -135, -165, 379, 379, 188, 242, -143, -226, 380,
	-153, -226, 379, -304, -129, 331, 207, 380, -135, -307,
	-307, 380, 380, -342, 242, 267, -178, 380, 384, 30,
	108, 380, -319, 194, -135, -168, -120, 380, -143, -118,
	336, -301, 380, -178, -178, 379, 379, 379, -153, -226,
	-153, -167, -130, 282, -229, 380, 380, 380, -343, -344,
	36, 326, 77, -237, -343, -338, -340, 116, -320, -323,
	-322, 216, 133, 228, 287, 380, 380, -163, -237, 380,
	380, -168, -168, -168, -153, 380, -182, -108, -108, -344,
	235, 128, 266, 235, 128, -135, -322, 216, -323, 216,
	331, 96, -319, 380, 380, 380, -226, -229, 26, -321,
	203, 259, 48, 282, -321, -320, 379, 379, -125, 48,
	259, -153, -344, 20, 208, 93, -156, 229, -157, 229,
	380, -301, 380, -301, 341, 341, -158, 379, 184, 384,
	-155, -154, -159, -160, -237, 93, 195, 312, -156, 379,
	384, 380, 384, 379, -159, -156, -160, -159, 380, 380,
	384, -155, -154, -157, 384, -157,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 307, 0, 159, 161, 163,
	165, 167, -2, 169, 171, 0, 0, 0, 182, 184,
	186, 188, 190, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 677, -2, 0, 287, 289, 298,
	300, 302, 304, 305, 0, 355, 357, 359, 361, 363,
	365, 367, 369, 371, 373, 375, 377, 379, 381, 383,
	384, 386, 388, 390, 0, 598, 600, 602, -2, 65,
	66, 67, 68, 69, 70, 78, 79, 80, 81, 72,
	74, 75, 77, 0, 715, -2, 726, 0, 0, 0,
	-2, 0, -2, -2, -2, 0, 0, 692, 694, 696,
	698, -2, 0, 0, -2, 7, 13, 15, 17, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40,
	43, 49, 51, 53, 56, 58, 60, 62, 64, 0,
	0, 0, 0, 0, 0, 125, 271, 0, 1301, 1225,
	1231, 1232, 1256, 1257, 1258, 1275, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
	1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,
	1300, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
	1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
	1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
	1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
	1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350,
	1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370,
	1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380,
	1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
	1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400,
	1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410,
	1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420,
	1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430,
	1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1440,
	1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449, 1450,
	1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 151, 153,
	154, 0, 0, 0, 1227, 1301, 160, 162, 164, 166,
	0, 173, 0, 0, 0, 0, 0, 565, 170, 172,
	262, 1363, 264, 266, 0, 0, 0, 0, 176, 177,
	178, 179, 180, 181, 183, 185, 187, 189, 191, 192,
	0, 0, 0, 0, 0, 261, 259, 214, 215, 0,
	244, 245, 246, 247, 248, 250, 218, 220, 221, 223,
	225, 227, 229, 230, 232, 234, 235, 237, 239, 240,
	242, 0, 0, 0, 268, 274, 275, 276, 278, 279,
	280, 281, 282, 283, 284, 0, 131, 0, 467, 257,
	255, 0, 127, 0, 595, 0, 270, 596, 597, 592,
	593, 1390, 621, 288, 290, 299, 301, 303, -2, -2,
	1485, -2, 319, -2, 327, 1491, 0, 330, 331, 334,
	-2, 210, 356, 358, 360, 362, 364, 366, 368, 370,
	372, 374, 376, 378, 380, 382, 385, 387, 389, 391,
	392, 0, 0, 0, 396, 0, -2, -2, 0, 0,
	0, 0, 0, -2, 0, -2, 0, 0, -2, -2,
	0, 0, -2, 0, 0, 395, 397, 398, 399, 0,
	599, 601, 603, 0, 555, 717, 0, 0, -2, 690,
	691, -2, 0, 721, 721, 721, 0, 0, 691, 689,
	0, 291, 0, 293, 0, 396, 296, 297, 335, 336,
	1210, 1211, 927, 0, 0, 0, 0, 0, 0, 1029,
	1031, 1456, 1485, 0, 1033, 1034, 0, 1036, 1038, 1039,
	0, 1042, 1043, 1195, 1227, 1241, 1242, 1243, 1244, 0,
	0, 1247, 0, 1249, 1250, 1251, 1097, 1053, -2, -2,
	1239, 855, 856, 857, 858, -2, 1499, 1057, 1060, 1063,
	1066, 1067, 1070, 1071, 0, 1440, 1457, 1458, 1481, 1482,
	1490, 1494, 1495, 1464, 1478, 1465, 1452, 1462, 1476, 1307,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1265, 889, 890, 895, 896,
	1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
	1510, 1511, 1512, 1513, 1514, 898, 623, 605, 614, 623,
	607, 608, 609, 610, 611, 612, 613, 616, 0, 707,
	1369, 710, 1238, 708, 693, 695, 0, 697, 0, 0,
	701, 723, 722, 761, 762, 0, 705, 706, 716, 777,
	815, 792, 783, 0, 0, 2, 71, 0, 1464, 815,
	73, 0, 1464, 815, 76, 0, 82, 0, 1464, 1230,
	0, 1270, 1271, 1272, 1273, 1274, 1499, 1515, 1516, 1517,
	1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527,
	1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537,
	1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547,
	1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557,
	1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567,
	1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577,
	1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587,
	1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 0, 0,
	272, 273, 1235, 1233, 1234, 0, 155, 156, 157, 158,
	0, 0, 1228, 1204, 1202, 1203, 168, 532, 1464, 552,
	1464, -2, 557, 532, 561, -2, 714, 1464, 637, 263,
	265, 0, 175, 0, 650, 0, 652, 0, 667, 821,
	117, 1464, 195, 208, 117, 1464, 198, 117, 1464, 201,
	1223, 117, 1464, 204, 205, 1464, 207, 258, 0, 0,
	-2, 251, 253, 1266, 1267, 1268, 1269, -2, 249, 219,
	222, 224, 226, 228, 231, 233, 236, 238, 241, 243,
	-2, 0, 0, 0, 466, 0, 0, 0, 594, 0,
	620, 306, 0, 316, 0, 318, 1451, -2, -2, 322,
	624, 628, 629, 630, 0, 0, 0, 0, 0, 0,
	0, 332, 211, 0, 393, 394, 402, 403, 132, 133,
	353, 354, 0, 406, 427, 439, 0, 0, 410, 412,
	465, 414, 0, 0, 416, 0, 418, 0, 420, 0,
	422, 0, 424, 426, 428, 440, 430, 716, 432, 0,
	434, 438, 0, 443, 0, 445, 446, 447, 0, 0,
	453, 0, 0, 400, 401, 117, 819, 0, 0, 0,
	-2, 0, 734, 759, 0, 737, 738, 0, 0, 0,
	0, 719, 720, 0, 0, 0, 679, 680, 292, 0,
	295, 0, 0, 0, 0, 1130, 1131, 1132, 1133, 1134,
	1135, 1138, 1139, 1136, 1137, 1140, 1141, 0, 0, 0,
	0, 0, 1142, 0, 0, 0, 0, 0, 0, 0,
	0, 1143, 1144, 1145, 0, 0, 1147, 0, 1149, 0,
	0, 0, 0, 0, 0, 1209, 0, 0, 1146, 932,
	933, 934, 966, 967, 0, 1030, 1206, 1199, 1032, 0,
	1152, -2, 1153, 0, 0, 1035, 1040, 1041, 1152, 0,
	1194, -2, 0, 1246, 0, 924, 1099, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1175, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 874, 892,
	903, 900, 899, 876, 0, 875, 873, 0, 877, 0,
	0, 0, 604, -2, 606, 0, 618, 0, 709, 0,
	0, 763, 766, 1215, 1219, 1220, 766, 0, 1212, 0,
	0, 0, 0, 812, 812, 812, 810, 786, 0, 792,
	0, -2, 816, 804, 0, -2, 783, 0, 0, 817,
	0, 83, 589, 96, 0, 589, 589, 0, 0, 0,
	0, 0, 92, 0, 0, 0, 0, 0, 0, 94,
	0, 0, 0, 0, 806, 1226, 0, 1200, 1201, 147,
	0, 0, 1221, 1205, 473, 0, 0, 0, 556, 0,
	713, 0, 0, 0, 1464, 564, 1259, 639, 0, 825,
	0, 653, 0, 0, 822, 0, 193, 0, 115, 116,
	0, 196, 0, 199, 0, 0, 202, 0, 0, 0,
	1153, 716, 0, 0, 277, 0, 0, 716, 0, 1155,
	833, 834, 835, 836, 837, 924, 840, 841, 842, 843,
	844, 845, 846, 847, 848, 849, 850, 851, 852, 853,
	854, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 886, 0, 861, 861, 861, 878, 879, 887,
	888, 893, 894, 905, 906, 908, 910, 904, 904, 904,
	901, 902, 806, 134, 0, 0, 0, 0, -2, 324,
	0, 626, 0, 631, 344, 345, 346, 633, 634, 328,
	347, 348, 349, 350, 351, 352, 0, 549, 0, 551,
	1252, 0, 325, 337, 326, 329, 0, 212, 404, 405,
	407, 408, 409, 413, 0, 462, 415, 417, 419, 421,
	423, 431, 435, 716, 441, 444, 448, 449, 450, 451,
	0, 0, 0, 554, 0, 308, 0, 457, 0, 734,
	759, 683, 733, 684, 758, 760, 735, 736, 741, 745,
	746, 749, 752, 753, 743, 927, 702, 703, 704, 727,
	728, 576, 0, 0, 294, 928, 829, 830, 880, 881,
	882, 883, 884, 929, 930, 0, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, -2, -2, -2, -2,
	-2, -2, -2, -2, 953, 954, 955, 956, 957, 958,
	959, 960, -2, -2, -2, 964, 965, -2, 1148, 1150,
	0, 1209, 0, -2, 0, -2, -2, -2, -2, 978,
	0, 980, 983, 985, 987, 0, 0, 0, 0, 1208,
	997, 1186, 0, 0, 1127, 1128, 1129, 982, 0, 0,
	1207, 1198, 0, 0, 1151, 1037, 0, 0, 0, 1159,
	1193, 1189, 0, 1044, 726, 0, 0, 0, 0, 1051,
	0, 1255, 911, 912, 913, 914, 915, 916, 925, 1107,
	0, 0, 0, 1058, 1059, 1061, 1062, 1064, 1065, 1068,
	1069, 0, 0, 0, 1075, 0, 1162, -2, -2, -2,
	-2, -2, -2, -2, 0, 1077, 0, 1079, 1153, 1172,
	0, 0, 1000, 0, 0, 0, 0, 1485, 0, 1082,
	1153, 1180, 0, 0, 0, 0, 0, 1153, 0, 1185,
	0, 0, 0, 0, 0, 1093, 0, 1095, 0, 0,
	0, 0, 0, 0, 617, 711, 0, 0, 825, 0,
	0, 0, 1218, 825, 0, 1214, 0, 0, 0, 0,
	0, 807, 811, 808, 809, 0, 0, 792, 804, 774,
	0, 0, 0, 781, 782, 803, 0, 802, 791, -2,
	0, 0, 0, 0, 0, 588, 98, 1464, 0, 119,
	0, 0, 522, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 1229, 0, 137, 0,
	1236, 0, 0, 0, 0, 0, 472, 1235, 474, 476,
	477, 478, 479, 1260, 0, 1260, 0, 0, 0, 0,
	0, 0, 0, 641, 647, 0, 740, 0, 665, 655,
	0, 0, 0, 665, 669, 670, 672, 673, 0, 0,
	823, 209, 117, 117, 1224, 117, 117, 206, 260, 0,
	216, 252, 0, 0, 0, 254, 256, 0, 826, 828,
	0, 838, 0, 146, 0, 0, 0, 0, 317, 0,
	625, 632, 0, 341, 0, 343, 550, 1254, 1253, 0,
	213, 464, 285, 433, 436, 459, 460, 461, 820, 0,
	0, 458, 687, 688, 0, 747, 0, 0, 744, 750,
	751, 0, 730, 574, 575, 0, 0, 0, -2, -2,
	0, 0, 0, 998, -2, 979, 981, 984, 986, 988,
	0, 0, 0, 0, 0, 0, 0, 999, 1152, 0,
	1196, 1199, -2, 1154, 1157, 1158, 0, 0, 1190, 0,
	0, 0, 0, 725, 726, 726, 726, 1050, 0, 0,
	0, 0, 0, 0, 1052, 0, 0, 0, 0, 0,
	0, 1074, 0, 1076, 1078, 0, 0, 1080, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1003, 1004, 1005, 0, 1152, 1081, 1178, 1179, 0,
	0, 0, 0, 0, 0, 1087, 0, 1184, 0, 0,
	0, 1091, 1092, 1094, 0, 859, 0, 885, 907, 909,
	897, 716, 1237, 755, 1216, 806, 765, 767, 1217, 755,
	1213, 794, 0, 796, 0, 0, 0, 798, 0, 787,
	0, 789, 804, 779, 0, 0, 772, 0, 771, 792,
	800, 0, 0, 818, 97, 578, 0, 0, 0, 100,
	1464, 108, 0, 504, 0, 0, 0, 0, 0, 591,
	109, 1464, 117, 1464, 117, 110, 84, 589, 85, 0,
	0, 584, 0, 0, 577, 86, 0, 586, 0, 0,
	146, 0, 0, 148, 0, 1222, 481, 531, 0, 0,
	1260, 0, 470, 532, 553, 558, 560, 0, 0, 643,
	647, 0, 646, 714, 665, 739, 824, 648, 665, 0,
	0, 0, 657, 654, 651, 825, 0, 0, 0, 0,
	194, 197, 200, 203, 1154, 267, 0, 0, 1156, 0,
	831, 0, 0, 126, 0, 135, 269, 314, 315, 320,
	339, 340, 342, 338, 0, 0, 0, 0, 0, 0,
	0, 729, 576, 0, 931, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1187, 0, 0, 0, 1198, -2,
	1160, 1188, 1192, 0, 1045, 0, 0, 0, 0, 1248,
	917, 918, 919, 920, 921, 922, 923, 0, 1105, 1106,
	1110, 0, 0, 1056, 0, 0, 1161, 1171, 1173, 1001,
	1002, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, -2, -2, -2, 1019, 1020, 1021, -2, -2, -2,
	0, 0, 0, 1174, 0, 0, 1176, 1177, 1181, 1182,
	0, 1084, 1085, 1086, 1183, 0, 0, 0, 891, 0,
	0, 757, 0, 764, 0, 757, 795, 0, 814, 797,
	777, 788, 0, 785, 775, 0, 776, 0, 804, 0,
	0, 784, 0, 0, 0, 0, 118, 502, 521, 0,
	0, 567, 573, 573, 0, 1054, 1055, 0, 0, 0,
	102, 0, 0, 0, 0, 106, 0, 112, 0, 0,
	0, 91, 0, 0, 0, 0, 90, 0, 0, 89,
	124, 0, 0, 149, 486, 0, 475, 0, 0, 0,
	473, 0, 0, 0, 645, 647, 0, 638, 639, 174,
	649, 663, 664, 662, 0, 665, 671, 668, 674, 0,
	0, 128, 0, 0, 832, 839, 144, 1353, 142, 139,
	141, 286, 309, 310, 0, 454, 455, 456, 742, 748,
	731, 576, 0, 0, -2, 0, 991, -2, -2, 1123,
	1154, 1197, 1191, 1245, 726, 1046, 1048, 1049, 926, 1112,
	1109, 0, 1096, 1072, 1073, 1170, 0, 0, 0, 0,
	1154, 1125, 1083, 0, 1089, 1090, 860, 712, 1101, 0,
	0, 768, 1101, 0, 792, 790, 773, 769, 0, 780,
	0, 801, 580, 582, 99, 0, 503, 0, 506, 0,
	0, 0, 0, 512, 513, 0, 0, 0, 0, 523,
	530, 0, 576, 1240, 0, 576, 0, 0, 0, 0,
	0, 114, 0, 0, 590, 0, 117, 117, 579, 0,
	0, 0, 0, 585, 0, 587, 136, 0, 468, 485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 635,
	647, 0, 640, 641, 0, 0, 0, 656, 666, 0,
	0, 0, 827, 0, 0, 0, 0, 0, 312, 0,
	732, -2, -2, 992, 1124, 0, 726, 0, 1098, -2,
	0, 0, 0, 1126, 0, 699, 0, 756, 754, 700,
	813, 804, 0, 799, 101, 0, 507, 508, 1260, 0,
	511, 514, 0, 516, 1262, 481, 0, 527, 528, 568,
	569, 572, 570, 573, 726, 525, 0, 103, 104, 113,
	121, 105, 111, 0, 0, 726, 0, 0, 805, 0,
	0, 530, 0, 520, 481, 471, 530, 0, 0, 642,
	643, 0, 0, 0, 675, 676, 0, 0, 0, 143,
	0, 138, 140, 311, 0, 1047, 1115, 0, -2, 0,
	1027, 1088, 1100, 1102, 0, 778, 770, 505, 509, 0,
	0, 536, 0, 524, 0, 576, 0, 0, 123, 0,
	581, 583, 0, 0, 0, 0, 0, 0, 481, 530,
	469, 481, 0, 644, 645, 0, 659, 825, 661, 0,
	0, 145, 313, 0, 0, 0, 1111, 1028, 0, 0,
	0, 515, 541, 0, 0, 0, 571, 1045, 532, 107,
	0, 120, 0, 0, 0, 0, 0, 0, 518, 481,
	562, 0, 636, 0, 660, 146, 146, 1108, 1113, 1116,
	-2, 1424, 1298, 0, 1114, 1103, 1104, 0, 517, 537,
	538, 0, 533, 534, 535, 1261, 529, 536, 122, 93,
	95, 0, 0, 0, 519, 530, 825, 129, 130, 0,
	1118, 1119, 1120, 1121, 1122, 510, 539, 0, 540, 0,
	0, 0, 541, 0, 0, 484, 481, 658, 0, 542,
	0, 545, 546, 0, 543, 526, 0, 0, 480, 482,
	483, 563, 1117, 544, 547, 548, 0, 0, 0, 0,
	487, 0, 488, 0, 0, 0, 486, 0, 0, 0,
	485, 491, 0, 494, 496, 497, -2, 0, 489, 0,
	0, 492, 0, 0, 0, 490, 495, 0, 493, 486,
	0, 485, 501, 499, 0, 500,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 368, 3, 374, 369, 3,
	379, 380, 372, 370, 384, 371, 381, 373, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 388, 383,
	358, 360, 359, 362, 385, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 377, 3, 378, 375, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 386, 367, 387, 365,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 363, 57702, 364, 57703, 366, 57704, 376,
	57705, 382, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:909
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:915
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:921
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:942
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:944
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:978
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1014
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1025
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1060
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1086
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1092
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1098
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1107
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1116
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1166
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1185
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1208
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1218
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1228
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1237
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1247
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1265
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1280
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1281
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1285
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1312
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1373
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1376
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1400
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1404
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1414
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1442
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1445
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1478
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1497
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1503
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1505
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "CREATE")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "DELETE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1537
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1538
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1546
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1547
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DROP")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1561
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1564
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1579
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1595
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1664
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1693
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1700
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "DELETE")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			return helpWith(sqllex, "INSERT")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1708
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1710
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1713
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1717
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1720
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1727
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1728
		{ /* SKIP DOC */
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 254:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1774
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 261:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1832
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1835
		{
			return helpWith(sqllex, "GRANT")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1859
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1874
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1877
		{
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1892
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			return helpWith(sqllex, "RESET")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1934
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			return helpWith(sqllex, "RESET")
		}
	case 294:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1968
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1972
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1975
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{ /* SKIP DOC */
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			return unimplemented(sqllex, "set local")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1998
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2029
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2033
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2086
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2091
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2108
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2111
		{
			return unimplemented(sqllex, "set from current")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2119
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2123
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2133
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2171
		{
			sqlVAL.union.val = Low
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2175
		{
			sqlVAL.union.val = Normal
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = High
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2223
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2225
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2226
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2227
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2228
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2231
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2232
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2233
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2234
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2235
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2237
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2238
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2239
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2241
		{
			return helpWith(sqllex, "SHOW")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2250
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.str = "client_encoding"
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2265
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2309
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2331
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2347
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2349
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2352
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2363
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2368
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2376
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2379
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2398
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2422
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2434
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2436
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2457
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2465
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2469
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2473
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2484
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2495
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2498
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2513
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2517
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2521
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2525
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2529
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2535
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2539
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2543
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2549
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 463:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2554
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2641
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2647
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2657
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2669
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2684
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2688
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 484:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2692
		{
			sqlVAL.union.val = DropDefault
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 487:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2705
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2712
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2721
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 490:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2728
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 501:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2802
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2839
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2843
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2869
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2873
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2877
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2885
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2929
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			return unimplemented(sqllex, "match full")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3010
		{
			return unimplemented(sqllex, "match partial")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			return unimplemented(sqllex, "match simple")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3012
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3019
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3023
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3041
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = NoAction
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = Restrict
		}
	case 546:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3063
		{
			sqlVAL.union.val = Cascade
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3067
		{
			sqlVAL.union.val = SetNull
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = SetDefault
		}
	case 549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3077
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3081
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3085
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &CreateSequence{Name: sqlDollar[3].union.normalizableTableName(), IfNotExists: false}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &CreateSequence{Name: sqlDollar[6].union.normalizableTableName(), IfNotExists: true}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3108
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3119
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3123
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3127
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3144
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3184
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = true
		}
	case 566:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = false
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3214
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3215
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3218
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3219
		{
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3223
		{
			sqlVAL.union.val = Ascending
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = Descending
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 577:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3237
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3247
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3251
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3255
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3259
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3261
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = true
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = false
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3294
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3295
		{
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3306
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3332
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3334
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3367
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3370
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3375
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3383
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3390
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3393
		{
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3394
		{
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3398
		{
			sqlVAL.str = ""
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.str = ""
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3430
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3440
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
		}
	case 627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3455
		{
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3459
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3463
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3479
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3485
		{
			sqlVAL.union.val = ReadOnly
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = ReadWrite
		}
	case 635:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3519
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.str = ""
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.str = ""
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3543
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 643:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.str = ""
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 645:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.str = ""
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3562
		{
		}
	case 647:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3563
		{
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			return helpWith(sqllex, "INSERT")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3604
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3608
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3636
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3640
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3646
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3650
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3658
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 665:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3667
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 666:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3681
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3685
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3686
		{
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3704
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3720
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3773
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3823
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3858
		{
			return helpWith(sqllex, "SELECT")
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3859
		{
			return helpWith(sqllex, "VALUES")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			return helpWith(sqllex, "TABLE")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3883
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3907
		{
			return helpWith(sqllex, "SELECT")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3911
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3944
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3951
		{
			return helpWith(sqllex, "TABLE")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3962
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3964
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3968
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3971
		{
			return unimplemented(sqllex, "cte")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3974
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3975
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3978
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3979
		{
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3982
		{
		}
	case 718:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3983
		{
		}
	case 719:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = true
		}
	case 720:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = false
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = false
		}
	case 722:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = true
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4006
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4007
		{
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4011
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 726:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4015
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4061
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4070
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4085
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4100
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4127
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 749:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4131
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4137
		{
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4138
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4141
		{
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4142
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4168
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4185
		{
			sqlVAL.union.val = false
		}
	case 760:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = true
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			return helpWith(sqllex, "VALUES")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4230
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4232
		{
			sqlVAL.union.val = &From{}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4252
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4259
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4270
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4297
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4334
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4359
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4389
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = nil
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4406
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = true
		}
	case 792:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = false
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4489
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4493
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.str = astFullJoin
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.str = astLeftJoin
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.str = astRightJoin
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.str = astInnerJoin
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4517
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4518
		{
		}
	case 813:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4547
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 818:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 825:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4604
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4618
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4650
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 839:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4661
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = jsonbColType
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = jsonColType
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 846:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4695
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4699
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4715
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4719
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4750
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4759
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = nil
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4788
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 872:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4820
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4824
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4898
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4902
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4920
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 897:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4952
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 900:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4978
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4982
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4991
		{
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4992
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4997
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5001
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 907:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5005
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 909:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = year
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5028
		{
			sqlVAL.union.val = month
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = day
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = hour
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = minute
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = month
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = hour
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = minute
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = minute
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = nil
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = second
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5087
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5122
		{
			return unimplemented(sqllex, "at tz")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5131
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5135
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5139
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5143
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5147
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5151
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5155
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5159
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5183
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5187
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5191
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5195
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5199
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5231
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5235
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5239
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5243
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5247
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5251
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5255
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5259
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5263
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5267
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5271
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5275
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5279
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5283
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5299
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5303
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5307
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5311
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5315
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5319
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5323
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5327
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5330
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5372
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5376
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5380
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5396
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5424
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5428
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5436
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5440
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5444
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5452
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5456
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5460
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5464
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5468
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5472
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5476
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5488
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5492
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5504
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5516
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5520
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5524
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5528
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5545
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5564
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5569
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5603
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5607
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5622
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5623
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5636
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5647
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5663
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5664
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5668
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5677
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5686
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5695
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5696
		{
			return unimplemented(sqllex, "current role")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5702
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5705
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5707
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5719
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5723
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5726
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5731
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5733
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5738
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5742
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5745
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5746
		{
			return unimplemented(sqllex, "treat")
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5748
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5752
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5756
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5764
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5768
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5772
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5783
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5788
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5792
		{
			return unimplemented(sqllex, "within group")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5793
		{
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5797
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5801
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5812
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5828
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5840
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5851
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.str = ""
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5890
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5891
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5892
		{
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5895
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5896
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5902
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5903
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5904
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5905
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5906
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5917
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5921
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5927
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = Any
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = Some
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5947
		{
			sqlVAL.union.val = All
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = Plus
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5953
		{
			sqlVAL.union.val = Minus
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5954
		{
			sqlVAL.union.val = Mult
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5955
		{
			sqlVAL.union.val = Div
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5956
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = Mod
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = Bitand
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = Bitor
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5960
		{
			sqlVAL.union.val = Pow
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5961
		{
			sqlVAL.union.val = Bitxor
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = LT
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = GT
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5964
		{
			sqlVAL.union.val = EQ
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5965
		{
			sqlVAL.union.val = LE
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5966
		{
			sqlVAL.union.val = GE
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5967
		{
			sqlVAL.union.val = NE
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5971
		{
			sqlVAL.union.val = Like
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = NotLike
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5973
		{
			sqlVAL.union.val = ILike
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5974
		{
			sqlVAL.union.val = NotILike
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5992
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6012
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6116
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6148
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6163
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6186
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6197
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6207
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6220
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6226
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6236
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6242
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6246
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6252
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6261
		{
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6262
		{
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6271
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6277
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6281
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6300
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6306
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6323
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6341
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6345
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6351
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6355
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6366
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6370
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6393
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6397
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6401
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6415
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6424
		{
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6434
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6438
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6445
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6449
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6453
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6460
		{
			return unimplemented(sqllex, "func const")
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6462
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6466
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6469
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6471
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6475
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6479
		{
			sqlVAL.union.val = DNull
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6486
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6490
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6496
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6531
		{
			sqlVAL.str = ""
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6537
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6541
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
