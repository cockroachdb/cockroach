// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer) int {
	sqllex.Error("unimplemented")
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.Error(fmt.Sprintf("unimplemented "+
		"(see issue https://github.com/cockroachdb/cockroach/issues/%d)",
		issue))
	return 1
}

//line sql.y:50

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}

//line sql.y:350
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPLAIN = 57444
const EXTRACT = 57445
const EXTRACT_DURATION = 57446
const FALSE = 57447
const FAMILY = 57448
const FETCH = 57449
const FILTER = 57450
const FIRST = 57451
const FLOAT = 57452
const FLOORDIV = 57453
const FOLLOWING = 57454
const FOR = 57455
const FORCE_INDEX = 57456
const FOREIGN = 57457
const FROM = 57458
const FULL = 57459
const GRANT = 57460
const GRANTS = 57461
const GREATEST = 57462
const GROUP = 57463
const GROUPING = 57464
const HAVING = 57465
const HELP = 57466
const HIGH = 57467
const HOUR = 57468
const INCREMENTAL = 57469
const IF = 57470
const IFNULL = 57471
const ILIKE = 57472
const IN = 57473
const INTERLEAVE = 57474
const INDEX = 57475
const INDEXES = 57476
const INITIALLY = 57477
const INNER = 57478
const INSERT = 57479
const INT = 57480
const INT2VECTOR = 57481
const INT8 = 57482
const INT64 = 57483
const INTEGER = 57484
const INTERSECT = 57485
const INTERVAL = 57486
const INTO = 57487
const IS = 57488
const ISOLATION = 57489
const JOIN = 57490
const KEY = 57491
const KEYS = 57492
const LATERAL = 57493
const LC_CTYPE = 57494
const LC_COLLATE = 57495
const LEADING = 57496
const LEAST = 57497
const LEFT = 57498
const LEVEL = 57499
const LIKE = 57500
const LIMIT = 57501
const LOCAL = 57502
const LOCALTIME = 57503
const LOCALTIMESTAMP = 57504
const LOW = 57505
const LSHIFT = 57506
const MATCH = 57507
const MINUTE = 57508
const MONTH = 57509
const NAN = 57510
const NAME = 57511
const NAMES = 57512
const NATURAL = 57513
const NEXT = 57514
const NO = 57515
const NO_INDEX_JOIN = 57516
const NORMAL = 57517
const NOT = 57518
const NOTHING = 57519
const NULL = 57520
const NULLIF = 57521
const NULLS = 57522
const NUMERIC = 57523
const OF = 57524
const OFF = 57525
const OFFSET = 57526
const OID = 57527
const ON = 57528
const ONLY = 57529
const OPTIONS = 57530
const OR = 57531
const ORDER = 57532
const ORDINALITY = 57533
const OUT = 57534
const OUTER = 57535
const OVER = 57536
const OVERLAPS = 57537
const OVERLAY = 57538
const PARENT = 57539
const PARTIAL = 57540
const PARTITION = 57541
const PASSWORD = 57542
const PLACING = 57543
const POSITION = 57544
const PRECEDING = 57545
const PRECISION = 57546
const PREPARE = 57547
const PRIMARY = 57548
const PRIORITY = 57549
const RANGE = 57550
const READ = 57551
const REAL = 57552
const RECURSIVE = 57553
const REF = 57554
const REFERENCES = 57555
const REGCLASS = 57556
const REGPROC = 57557
const REGPROCEDURE = 57558
const REGNAMESPACE = 57559
const REGTYPE = 57560
const RENAME = 57561
const REPEATABLE = 57562
const RELEASE = 57563
const RESET = 57564
const RESTORE = 57565
const RESTRICT = 57566
const RETURNING = 57567
const REVOKE = 57568
const RIGHT = 57569
const ROLLBACK = 57570
const ROLLUP = 57571
const ROW = 57572
const ROWS = 57573
const RSHIFT = 57574
const SAVEPOINT = 57575
const SCATTER = 57576
const SEARCH = 57577
const SECOND = 57578
const SELECT = 57579
const SERIAL = 57580
const SERIALIZABLE = 57581
const SESSION = 57582
const SESSION_USER = 57583
const SET = 57584
const SETTING = 57585
const SHOW = 57586
const SIMILAR = 57587
const SIMPLE = 57588
const SMALLINT = 57589
const SMALLSERIAL = 57590
const SNAPSHOT = 57591
const SOME = 57592
const SPLIT = 57593
const SQL = 57594
const START = 57595
const STATUS = 57596
const STDIN = 57597
const STRICT = 57598
const STRING = 57599
const STORING = 57600
const SUBSTRING = 57601
const SYMMETRIC = 57602
const SYSTEM = 57603
const TABLE = 57604
const TABLES = 57605
const TEMPLATE = 57606
const TESTING_RANGES = 57607
const TESTING_RELOCATE = 57608
const TEXT = 57609
const THEN = 57610
const TIME = 57611
const TIMESTAMP = 57612
const TIMESTAMPTZ = 57613
const TO = 57614
const TRAILING = 57615
const TRANSACTION = 57616
const TREAT = 57617
const TRIM = 57618
const TRUE = 57619
const TRUNCATE = 57620
const TYPE = 57621
const UNBOUNDED = 57622
const UNCOMMITTED = 57623
const UNION = 57624
const UNIQUE = 57625
const UNKNOWN = 57626
const UPDATE = 57627
const UPSERT = 57628
const USER = 57629
const USERS = 57630
const USING = 57631
const VALID = 57632
const VALIDATE = 57633
const VALUE = 57634
const VALUES = 57635
const VARCHAR = 57636
const VARIADIC = 57637
const VIEW = 57638
const VARYING = 57639
const WHEN = 57640
const WHERE = 57641
const WINDOW = 57642
const WITH = 57643
const WITHIN = 57644
const WITHOUT = 57645
const YEAR = 57646
const ZONE = 57647
const NOT_LA = 57648
const WITH_LA = 57649
const AS_LA = 57650
const POSTFIXOP = 57651
const UMINUS = 57652

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USERS",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5463

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 31,
	329, 31,
	-2, 427,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	99, 410,
	143, 410,
	159, 410,
	184, 410,
	190, 410,
	282, 410,
	-2, 400,
	-1, 66,
	99, 409,
	143, 409,
	159, 409,
	184, 409,
	190, 409,
	282, 409,
	-2, 403,
	-1, 75,
	1, 31,
	329, 31,
	-2, 427,
	-1, 434,
	1, 200,
	329, 200,
	-2, 993,
	-1, 473,
	159, 437,
	184, 437,
	-2, 406,
	-1, 476,
	159, 436,
	184, 436,
	-2, 404,
	-1, 611,
	159, 436,
	184, 436,
	-2, 407,
	-1, 670,
	326, 926,
	-2, 919,
	-1, 671,
	326, 927,
	-2, 920,
	-1, 677,
	5, 595,
	326, 595,
	-2, 1101,
	-1, 701,
	5, 556,
	-2, 1075,
	-1, 702,
	5, 589,
	326, 589,
	-2, 1077,
	-1, 703,
	5, 564,
	-2, 1078,
	-1, 704,
	5, 563,
	-2, 1079,
	-1, 705,
	5, 589,
	326, 589,
	-2, 1082,
	-1, 706,
	5, 589,
	326, 589,
	-2, 1083,
	-1, 707,
	5, 590,
	-2, 1086,
	-1, 708,
	5, 550,
	-2, 1087,
	-1, 709,
	5, 550,
	-2, 1088,
	-1, 710,
	5, 571,
	-2, 1092,
	-1, 711,
	5, 551,
	-2, 1097,
	-1, 712,
	5, 552,
	-2, 1098,
	-1, 713,
	5, 553,
	-2, 1099,
	-1, 714,
	5, 554,
	-2, 1100,
	-1, 715,
	5, 550,
	-2, 1105,
	-1, 716,
	5, 557,
	-2, 1110,
	-1, 717,
	5, 555,
	-2, 1113,
	-1, 718,
	5, 587,
	326, 587,
	-2, 1115,
	-1, 719,
	5, 591,
	-2, 1118,
	-1, 720,
	5, 593,
	-2, 1119,
	-1, 721,
	5, 586,
	326, 586,
	-2, 1123,
	-1, 990,
	99, 410,
	143, 410,
	159, 410,
	184, 410,
	190, 410,
	282, 410,
	-2, 714,
	-1, 999,
	326, 903,
	-2, 891,
	-1, 1213,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 630,
	-1, 1214,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 631,
	-1, 1215,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 632,
	-1, 1219,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 636,
	-1, 1220,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 637,
	-1, 1221,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 638,
	-1, 1224,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 643,
	-1, 1230,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 645,
	-1, 1233,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 650,
	-1, 1234,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 651,
	-1, 1235,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 652,
	-1, 1262,
	195, 785,
	-2, 788,
	-1, 1291,
	116, 825,
	326, 926,
	-2, 919,
	-1, 1292,
	116, 826,
	-2, 1071,
	-1, 1293,
	116, 827,
	-2, 992,
	-1, 1294,
	116, 828,
	-2, 961,
	-1, 1295,
	116, 829,
	-2, 976,
	-1, 1296,
	116, 830,
	-2, 991,
	-1, 1297,
	116, 831,
	-2, 1037,
	-1, 1453,
	99, 410,
	143, 410,
	159, 410,
	184, 410,
	190, 410,
	282, 410,
	-2, 486,
	-1, 1457,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 644,
	-1, 1458,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 646,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 647,
	-1, 1481,
	195, 784,
	-2, 787,
	-1, 1670,
	1, 487,
	69, 487,
	99, 487,
	117, 487,
	121, 487,
	123, 487,
	136, 487,
	143, 487,
	148, 487,
	156, 487,
	159, 487,
	171, 487,
	184, 487,
	186, 487,
	190, 487,
	225, 487,
	227, 487,
	282, 487,
	289, 487,
	299, 487,
	300, 487,
	308, 487,
	325, 487,
	327, 487,
	329, 487,
	330, 487,
	-2, 486,
	-1, 1672,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 648,
	-1, 1677,
	146, 0,
	-2, 664,
	-1, 1687,
	195, 786,
	-2, 789,
	-1, 1721,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 691,
	-1, 1722,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 692,
	-1, 1723,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 693,
	-1, 1727,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 697,
	-1, 1728,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 698,
	-1, 1729,
	13, 0,
	14, 0,
	15, 0,
	309, 0,
	310, 0,
	311, 0,
	-2, 699,
	-1, 1849,
	146, 0,
	-2, 665,
	-1, 1852,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 668,
	-1, 1853,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 670,
	-1, 1958,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 669,
	-1, 1959,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	130, 0,
	131, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 671,
	-1, 1966,
	146, 0,
	-2, 700,
	-1, 2022,
	146, 0,
	-2, 701,
	-1, 2087,
	36, 0,
	130, 0,
	158, 0,
	245, 0,
	306, 0,
	-2, 1074,
}

const sqlPrivate = 57344

const sqlLast = 28652

var sqlAct = [...]int{

	88, 2064, 1627, 2111, 2086, 2028, 1084, 2065, 1665, 2066,
	1092, 1893, 2085, 908, 477, 1666, 669, 661, 1698, 1919,
	1451, 1152, 1815, 797, 1939, 1574, 668, 303, 1840, 1637,
	1758, 435, 484, 65, 1448, 287, 1772, 1826, 1185, 1427,
	498, 647, 1542, 1177, 914, 305, 51, 1820, 1575, 766,
	1643, 522, 540, 1156, 1151, 758, 1378, 1170, 760, 1492,
	1192, 1541, 1429, 781, 1439, 1260, 995, 910, 1155, 737,
	1124, 734, 630, 1372, 1184, 1053, 65, 1093, 1434, 641,
	1270, 1247, 1190, 1317, 1244, 1076, 294, 30, 1044, 798,
	1108, 931, 1652, 860, 1144, 739, 770, 767, 289, 20,
	1288, 293, 16, 1117, 986, 513, 631, 640, 65, 541,
	295, 8, 535, 1086, 532, 482, 1159, 1773, 614, 487,
	936, 615, 651, 52, 613, 80, 534, 476, 597, 1187,
	598, 432, 862, 663, 421, 431, 412, 858, 528, 774,
	1025, 84, 485, 596, 1951, 1480, 1449, 1952, 66, 1029,
	67, 618, 783, 783, 424, 481, 939, 940, 1089, 275,
	2102, 783, 30, 763, 481, 753, 52, 302, 1085, 1390,
	724, 1484, 939, 940, 20, 2081, 1485, 16, 1771, 942,
	2076, 2075, 89, 1127, 1127, 1127, 8, 2072, 475, 2062,
	763, 483, 1114, 1077, 464, 942, 463, 2057, 52, 1389,
	763, 938, 941, 495, 504, 2006, 501, 2053, 956, 508,
	763, 1080, 64, 489, 474, 1437, 473, 2024, 941, 31,
	1114, 939, 940, 2018, 1483, 2000, 763, 306, 1771, 1127,
	32, 56, 1512, 1513, 1996, 71, 1991, 763, 42, 1990,
	939, 940, 1960, 1077, 942, 1114, 43, 1949, 723, 1946,
	792, 1933, 1947, 1437, 1771, 1930, 58, 947, 763, 937,
	73, 1734, 34, 942, 64, 1080, 1928, 941, 44, 1771,
	1684, 1904, 1121, 947, 763, 1903, 1875, 1854, 1771, 1127,
	1127, 1851, 1843, 47, 1114, 1127, 941, 1414, 1042, 544,
	42, 74, 1417, 59, 1264, 1127, 1176, 46, 43, 69,
	1792, 1139, 626, 1127, 1491, 70, 903, 902, 1791, 71,
	957, 1127, 852, 646, 48, 1122, 1770, 537, 537, 1771,
	44, 851, 947, 763, 68, 511, 957, 557, 1681, 784,
	784, 1127, 494, 1518, 73, 482, 1613, 1608, 784, 1083,
	1083, 947, 1559, 1557, 1774, 1560, 1127, 542, 276, 75,
	517, 1556, 1512, 1513, 1127, 1123, 1120, 1555, 1481, 1416,
	1127, 1127, 763, 1181, 1131, 74, 763, 1127, 1126, 1113,
	1834, 1127, 1114, 69, 1082, 957, 1452, 1083, 958, 70,
	884, 71, 1041, 1389, 578, 1040, 1528, 496, 55, 791,
	503, 506, 792, 496, 958, 521, 625, 2100, 1088, 538,
	2084, 45, 2071, 2033, 2019, 1931, 73, 1880, 1876, 1868,
	1867, 483, 529, 1866, 1862, 937, 71, 61, 62, 33,
	1512, 1513, 49, 1861, 60, 1125, 1860, 1806, 1800, 50,
	1749, 1744, 1419, 71, 1743, 787, 782, 74, 53, 1742,
	55, 73, 1692, 958, 906, 69, 1670, 1642, 1617, 57,
	1564, 70, 1561, 1518, 1529, 1549, 1540, 1511, 73, 952,
	949, 950, 951, 943, 944, 945, 946, 948, 1508, 968,
	68, 545, 74, 519, 63, 952, 949, 950, 951, 943,
	944, 945, 946, 948, 1507, 968, 1505, 1497, 612, 74,
	1496, 671, 671, 1119, 1415, 730, 1334, 69, 1285, 604,
	671, 607, 1450, 70, 1284, 68, 1528, 625, 1256, 624,
	913, 544, 1003, 1700, 996, 1118, 68, 2045, 305, 544,
	2003, 1518, 68, 939, 940, 949, 950, 951, 943, 944,
	945, 946, 948, 611, 968, 729, 1520, 1521, 1522, 1514,
	1515, 1516, 1517, 1519, 1989, 764, 942, 943, 944, 945,
	946, 948, 1988, 968, 671, 1987, 996, 1979, 566, 1977,
	567, 1968, 1955, 1942, 728, 671, 1926, 1890, 1799, 941,
	1873, 544, 544, 772, 1529, 1845, 1809, 1797, 1777, 305,
	560, 562, 1676, 1657, 1635, 1633, 1632, 1630, 1615, 1583,
	1582, 1539, 1501, 1500, 1477, 603, 496, 601, 506, 786,
	1472, 599, 789, 1249, 1257, 1405, 885, 475, 757, 1363,
	1361, 886, 1512, 1513, 1399, 1348, 517, 671, 671, 1347,
	1327, 912, 939, 940, 671, 1348, 867, 867, 1283, 627,
	1180, 621, 622, 474, 1030, 473, 671, 671, 671, 671,
	671, 1033, 1037, 1023, 1022, 942, 671, 1021, 1020, 1019,
	1018, 935, 1017, 762, 1016, 529, 671, 1015, 1522, 1514,
	1515, 1516, 1517, 1519, 773, 1014, 905, 776, 941, 1013,
	1012, 1011, 1010, 1009, 939, 940, 795, 917, 793, 1008,
	1007, 1000, 844, 520, 846, 989, 68, 907, 499, 2083,
	1832, 629, 482, 545, 845, 849, 564, 553, 551, 848,
	306, 545, 2055, 1950, 1856, 1835, 880, 879, 890, 873,
	1831, 1805, 887, 1518, 1804, 891, 892, 893, 894, 895,
	941, 1398, 830, 947, 987, 898, 899, 1514, 1515, 1516,
	1517, 1519, 747, 730, 921, 904, 920, 919, 570, 939,
	940, 475, 1993, 1953, 475, 475, 933, 1430, 1803, 745,
	1391, 1035, 1077, 545, 545, 1036, 1452, 1563, 1562, 1456,
	589, 306, 573, 1005, 746, 911, 988, 474, 990, 927,
	474, 474, 928, 929, 999, 994, 957, 571, 1373, 496,
	1821, 1085, 1701, 1488, 1271, 1026, 471, 664, 1385, 1320,
	1570, 939, 940, 544, 1047, 2036, 1995, 2097, 593, 1785,
	829, 1130, 462, 2098, 461, 456, 457, 740, 1796, 741,
	1914, 731, 1512, 1513, 942, 1411, 1913, 730, 1912, 1102,
	537, 1911, 537, 283, 65, 1598, 1597, 1105, 1567, 65,
	1058, 1060, 594, 1002, 771, 1566, 968, 941, 1459, 496,
	775, 775, 572, 1404, 958, 1065, 1027, 1028, 1068, 1038,
	634, 542, 1079, 1121, 1054, 1046, 1403, 1050, 1402, 1031,
	1401, 1594, 503, 506, 1527, 1034, 740, 78, 741, 52,
	1231, 1046, 52, 1087, 1063, 1087, 284, 1045, 1128, 1071,
	742, 1074, 1073, 1111, 1171, 305, 1075, 1070, 600, 510,
	1091, 1331, 947, 1330, 1202, 1109, 1122, 52, 1110, 52,
	1101, 1103, 1106, 1104, 1994, 466, 1614, 1112, 750, 1100,
	1601, 901, 1143, 1518, 52, 1895, 1057, 1603, 1375, 52,
	77, 1516, 1517, 1519, 549, 748, 1246, 768, 951, 943,
	944, 945, 946, 948, 579, 968, 1123, 1120, 671, 742,
	749, 563, 1246, 1182, 671, 671, 671, 671, 671, 671,
	671, 671, 671, 671, 671, 671, 671, 671, 671, 671,
	671, 671, 671, 671, 671, 671, 1528, 671, 467, 671,
	671, 671, 671, 1201, 1031, 545, 1034, 305, 1303, 1028,
	1027, 1133, 1132, 740, 2043, 741, 1271, 968, 671, 472,
	671, 878, 877, 468, 871, 868, 1585, 671, 570, 2097,
	777, 671, 469, 480, 1254, 285, 1125, 1056, 2068, 1766,
	671, 671, 671, 671, 671, 671, 671, 671, 671, 671,
	671, 671, 671, 671, 671, 939, 940, 2059, 1147, 1193,
	1200, 1125, 1149, 1148, 1529, 1410, 1150, 571, 2108, 286,
	900, 671, 1767, 1379, 1183, 1333, 1039, 479, 942, 76,
	2060, 772, 968, 548, 1383, 676, 742, 2119, 496, 783,
	279, 1189, 1368, 1268, 1359, 590, 506, 306, 1982, 1592,
	496, 941, 1622, 881, 1119, 1512, 1513, 743, 410, 1174,
	1175, 544, 1253, 79, 1055, 1043, 671, 1251, 1365, 2069,
	1258, 1096, 1255, 1379, 481, 755, 506, 1248, 754, 506,
	945, 946, 948, 1341, 968, 1412, 1896, 1279, 280, 1619,
	830, 830, 1335, 1298, 751, 1523, 1520, 1521, 1522, 1514,
	1515, 1516, 1517, 1519, 413, 591, 947, 569, 671, 750,
	413, 836, 1762, 1358, 1763, 482, 743, 2070, 1336, 1024,
	544, 1345, 1125, 1381, 1586, 418, 748, 882, 1387, 1620,
	414, 418, 568, 1166, 1461, 984, 414, 1964, 2107, 306,
	1927, 749, 1765, 1360, 1499, 1393, 1362, 1394, 1395, 1768,
	1245, 1653, 592, 1602, 415, 1669, 1518, 671, 1374, 957,
	415, 738, 481, 2067, 726, 1384, 478, 52, 829, 829,
	52, 1135, 2096, 417, 1392, 867, 1422, 2094, 1371, 417,
	1814, 2114, 1137, 1168, 1397, 1418, 582, 1420, 558, 1442,
	556, 483, 569, 65, 1146, 506, 616, 617, 1906, 1125,
	496, 1138, 830, 1407, 1408, 1905, 671, 671, 1445, 1528,
	1455, 1136, 671, 1413, 2120, 1871, 784, 1396, 482, 1764,
	1651, 617, 1888, 1974, 1345, 671, 671, 958, 1443, 2106,
	671, 671, 1188, 743, 1781, 1730, 282, 281, 671, 1409,
	1569, 2125, 1421, 545, 1344, 671, 1424, 1111, 1432, 1340,
	1436, 1433, 671, 1784, 1454, 671, 671, 671, 1169, 1109,
	1783, 918, 1110, 909, 671, 830, 52, 1618, 1490, 1438,
	52, 1112, 2029, 416, 616, 1228, 482, 1529, 1841, 416,
	829, 1638, 897, 52, 872, 869, 671, 671, 671, 671,
	1252, 1462, 853, 1460, 1453, 671, 671, 671, 1816, 1444,
	671, 857, 545, 1889, 1829, 830, 1872, 2112, 1350, 1349,
	1476, 1648, 943, 944, 945, 946, 948, 1442, 968, 804,
	1731, 419, 568, 842, 1780, 1647, 1732, 419, 671, 671,
	1487, 527, 1248, 2124, 850, 482, 1445, 1337, 1842, 855,
	526, 883, 671, 829, 671, 1580, 1581, 479, 1440, 725,
	1782, 856, 990, 608, 1628, 1579, 1443, 1807, 2113, 1886,
	671, 1370, 1514, 1515, 1516, 1517, 1519, 1644, 1367, 1226,
	1229, 1441, 671, 1435, 1967, 1609, 2115, 1377, 1546, 1547,
	1548, 1887, 771, 829, 1282, 1870, 1543, 673, 1675, 1600,
	1506, 771, 1565, 1471, 1376, 1129, 1081, 1225, 1589, 1069,
	1591, 496, 1572, 1066, 595, 588, 587, 586, 585, 584,
	544, 990, 583, 580, 525, 992, 1634, 518, 1544, 1606,
	1006, 889, 1281, 1599, 2063, 2026, 1446, 1444, 1593, 1755,
	305, 671, 1604, 1590, 1588, 1568, 1426, 671, 1172, 1164,
	671, 671, 671, 1612, 1631, 1611, 1358, 1610, 926, 1660,
	1107, 790, 671, 1621, 1623, 1624, 1646, 1661, 671, 1649,
	65, 671, 1425, 1658, 788, 1640, 1629, 785, 780, 671,
	756, 1639, 671, 752, 744, 1689, 1678, 1428, 1921, 1641,
	619, 2098, 524, 492, 1227, 1188, 1650, 671, 1694, 1695,
	1696, 671, 523, 1189, 575, 671, 671, 671, 671, 671,
	671, 671, 671, 671, 671, 671, 671, 671, 671, 671,
	671, 671, 671, 671, 81, 671, 1654, 1655, 1178, 3,
	671, 1447, 300, 25, 671, 671, 1685, 299, 24, 298,
	23, 671, 1688, 671, 671, 671, 875, 296, 22, 1923,
	1189, 1702, 1046, 1189, 1704, 297, 11, 1062, 1061, 620,
	52, 1707, 493, 1709, 1046, 301, 10, 1607, 455, 671,
	1059, 1984, 1774, 671, 1737, 2021, 1645, 623, 515, 291,
	9, 290, 7, 1193, 1705, 576, 1067, 1179, 516, 1580,
	1581, 544, 1193, 1710, 1738, 1779, 1064, 803, 1778, 1579,
	2007, 1812, 545, 1167, 1775, 500, 1751, 512, 25, 1163,
	409, 1090, 1754, 24, 934, 23, 847, 796, 1116, 292,
	4, 671, 306, 22, 2122, 1741, 671, 458, 459, 2123,
	544, 11, 2056, 830, 2010, 671, 671, 1580, 1581, 1838,
	1795, 10, 1580, 1581, 1810, 1858, 1808, 1579, 1512, 1513,
	544, 1813, 1579, 656, 1750, 9, 1802, 7, 1469, 1837,
	420, 939, 940, 1625, 830, 830, 671, 1141, 1140, 1616,
	671, 671, 1467, 830, 830, 671, 1824, 1825, 1811, 1558,
	1830, 1846, 671, 1400, 671, 1818, 85, 85, 277, 1819,
	1850, 1817, 671, 1096, 1188, 4, 482, 1801, 1332, 404,
	405, 406, 1836, 1329, 423, 1328, 830, 436, 542, 1278,
	1142, 829, 993, 2042, 1920, 423, 436, 804, 804, 465,
	1697, 52, 1423, 488, 488, 671, 832, 277, 1003, 1001,
	277, 277, 507, 277, 1894, 1464, 85, 514, 411, 888,
	1869, 1188, 829, 829, 1188, 1465, 581, 1833, 1656, 1470,
	2058, 829, 829, 1863, 1498, 1938, 1963, 1280, 671, 1004,
	1189, 1189, 671, 41, 1189, 1577, 650, 1756, 671, 1261,
	1571, 1158, 483, 545, 671, 1157, 1265, 308, 1580, 1581,
	1273, 1884, 876, 1438, 829, 672, 861, 671, 1579, 1881,
	870, 1290, 1290, 1301, 1289, 1312, 1899, 1194, 727, 1882,
	671, 1324, 1325, 1326, 1916, 674, 1898, 801, 544, 1900,
	1897, 1922, 545, 675, 802, 772, 1580, 1581, 1032, 671,
	662, 799, 1094, 1250, 1269, 1929, 1579, 1486, 1915, 804,
	997, 1442, 545, 642, 1924, 654, 653, 830, 671, 671,
	1909, 1910, 1266, 550, 1466, 1839, 1948, 54, 565, 1937,
	1445, 1468, 1957, 1941, 1954, 1304, 1945, 1956, 1944, 430,
	1382, 671, 1440, 1936, 1962, 1908, 1798, 1173, 671, 1935,
	1443, 922, 1587, 470, 1509, 552, 1310, 1302, 1299, 602,
	733, 671, 1512, 1513, 985, 1441, 1978, 1969, 1095, 577,
	1388, 1115, 804, 628, 930, 491, 1788, 490, 1153, 574,
	1828, 1932, 1794, 854, 1972, 1134, 978, 1981, 975, 460,
	1976, 831, 1165, 1343, 2118, 829, 1925, 671, 1983, 1584,
	2035, 1973, 72, 1992, 2001, 52, 544, 1918, 1980, 1369,
	1999, 29, 804, 26, 21, 2002, 277, 530, 277, 436,
	436, 1444, 1189, 19, 305, 18, 830, 2011, 28, 800,
	17, 1188, 1188, 2016, 2008, 1188, 2009, 2005, 671, 27,
	15, 14, 13, 482, 12, 40, 39, 2017, 2020, 38,
	2013, 2014, 65, 37, 36, 2012, 35, 6, 671, 671,
	671, 2004, 2023, 1518, 5, 803, 803, 2, 1, 0,
	545, 2031, 2046, 2044, 671, 2048, 0, 0, 0, 0,
	2041, 0, 2047, 1827, 722, 0, 2037, 0, 0, 0,
	1580, 1581, 671, 0, 2032, 2054, 2052, 0, 2050, 2049,
	1579, 2051, 0, 0, 829, 0, 0, 671, 0, 1475,
	0, 0, 0, 0, 830, 0, 1528, 1478, 2073, 990,
	2080, 0, 0, 0, 2078, 2077, 0, 0, 0, 307,
	671, 671, 0, 0, 0, 1494, 1495, 2079, 0, 0,
	0, 554, 52, 2091, 2095, 2093, 2082, 0, 0, 2099,
	0, 0, 1892, 0, 0, 2101, 559, 0, 671, 436,
	436, 2104, 2105, 2103, 1242, 1304, 1304, 0, 1538, 0,
	0, 2117, 2116, 0, 0, 0, 2121, 803, 1240, 1551,
	0, 0, 0, 0, 1529, 0, 0, 0, 545, 0,
	0, 0, 829, 671, 832, 832, 423, 2126, 1934, 277,
	0, 436, 606, 436, 0, 609, 306, 0, 0, 830,
	0, 0, 0, 1188, 0, 0, 0, 0, 0, 0,
	488, 1595, 0, 1596, 0, 0, 1304, 1304, 1304, 0,
	0, 277, 1512, 1513, 0, 1530, 1531, 1532, 0, 0,
	803, 1236, 0, 0, 0, 85, 0, 0, 1848, 1237,
	0, 1238, 0, 0, 277, 1243, 0, 0, 0, 277,
	277, 277, 0, 778, 0, 1523, 1520, 1521, 1522, 1514,
	1515, 1516, 1517, 1519, 0, 0, 0, 0, 0, 0,
	803, 0, 277, 277, 1527, 0, 0, 829, 0, 0,
	85, 0, 85, 1473, 1474, 0, 0, 436, 0, 0,
	0, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	1664, 0, 0, 436, 436, 0, 85, 436, 436, 436,
	436, 436, 896, 0, 0, 0, 0, 436, 436, 0,
	804, 0, 0, 1518, 423, 0, 0, 1682, 0, 0,
	0, 0, 916, 0, 0, 0, 0, 0, 0, 0,
	1239, 0, 0, 0, 1535, 1536, 1537, 1241, 0, 0,
	488, 804, 804, 514, 0, 0, 2034, 0, 1533, 832,
	804, 804, 0, 546, 0, 0, 0, 0, 0, 831,
	831, 1304, 1304, 0, 0, 0, 1528, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1735,
	0, 0, 0, 804, 0, 0, 0, 0, 0, 832,
	1745, 0, 0, 0, 0, 0, 0, 800, 800, 0,
	0, 0, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 1304, 1304, 1304, 1304, 1304,
	1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
	1304, 1304, 1304, 1304, 1529, 1304, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1766, 277, 0, 1759, 0,
	0, 0, 0, 0, 1051, 0, 1757, 0, 277, 0,
	1761, 0, 0, 0, 0, 0, 277, 1072, 0, 0,
	277, 831, 0, 0, 0, 0, 0, 1078, 1767, 0,
	0, 0, 0, 0, 0, 1823, 0, 0, 0, 1673,
	1674, 277, 0, 1098, 1099, 0, 277, 0, 1760, 277,
	0, 436, 436, 0, 436, 0, 0, 0, 0, 800,
	0, 1524, 1525, 1526, 804, 1523, 1520, 1521, 1522, 1514,
	1515, 1516, 1517, 1519, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 831, 0, 0, 0, 0, 0,
	0, 0, 0, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 0, 1733, 0, 0, 0, 0, 1762, 0,
	1763, 0, 800, 0, 831, 546, 0, 0, 803, 0,
	0, 0, 307, 546, 0, 0, 302, 0, 0, 0,
	0, 0, 0, 0, 0, 302, 0, 0, 1765, 0,
	0, 0, 0, 1145, 0, 1768, 0, 0, 0, 803,
	803, 0, 800, 0, 277, 277, 0, 1902, 803, 803,
	277, 1154, 0, 804, 0, 0, 0, 514, 0, 0,
	0, 64, 843, 0, 0, 546, 546, 0, 0, 0,
	64, 0, 0, 307, 0, 0, 0, 0, 0, 0,
	0, 803, 277, 0, 0, 436, 0, 42, 0, 0,
	0, 0, 0, 0, 0, 43, 42, 0, 1304, 0,
	0, 0, 0, 0, 43, 1764, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 804, 0, 0, 0, 0, 0, 0, 939, 940,
	0, 959, 960, 961, 969, 970, 971, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 832, 832,
	0, 942, 0, 0, 973, 0, 0, 832, 832, 0,
	0, 0, 0, 0, 0, 0, 0, 277, 1338, 1339,
	0, 0, 0, 1051, 941, 0, 1346, 0, 0, 0,
	956, 1304, 1351, 1352, 1354, 1356, 1357, 0, 0, 0,
	832, 0, 803, 0, 1364, 0, 0, 1366, 277, 0,
	0, 0, 0, 0, 0, 0, 1891, 277, 0, 0,
	71, 0, 277, 0, 1386, 0, 804, 55, 0, 71,
	0, 277, 0, 0, 0, 0, 55, 0, 0, 947,
	0, 277, 0, 0, 0, 73, 0, 2038, 2039, 2040,
	0, 0, 0, 0, 73, 0, 0, 0, 966, 974,
	0, 0, 1145, 1145, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 972, 0, 74, 546, 0, 0,
	0, 2061, 0, 0, 69, 74, 964, 0, 1304, 0,
	70, 0, 957, 69, 916, 0, 916, 0, 436, 70,
	0, 0, 277, 0, 0, 0, 1431, 0, 0, 1659,
	0, 803, 831, 0, 0, 0, 0, 963, 288, 1966,
	0, 0, 0, 0, 0, 277, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 0, 0, 437, 0, 0,
	0, 0, 0, 831, 831, 0, 0, 0, 0, 0,
	800, 0, 831, 831, 0, 438, 0, 0, 0, 0,
	958, 0, 0, 0, 0, 0, 0, 0, 0, 307,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 800, 800, 0, 0, 831, 0, 439, 0, 0,
	800, 800, 441, 0, 0, 0, 0, 446, 447, 803,
	0, 452, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 440, 442, 0, 2022, 0, 0, 0,
	0, 0, 0, 800, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 953, 954, 955,
	832, 952, 949, 950, 951, 943, 944, 945, 946, 948,
	0, 968, 443, 0, 0, 0, 0, 0, 1877, 0,
	0, 307, 0, 0, 0, 0, 444, 445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1576, 448, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 939, 940, 0, 0, 0, 831, 969, 970, 971,
	0, 0, 0, 277, 277, 0, 0, 0, 832, 0,
	0, 0, 0, 0, 942, 0, 0, 973, 0, 0,
	0, 0, 0, 632, 632, 0, 0, 0, 1626, 0,
	0, 1051, 735, 916, 800, 0, 0, 941, 0, 0,
	1636, 0, 0, 956, 0, 546, 0, 0, 0, 0,
	0, 277, 0, 0, 277, 0, 1512, 1513, 0, 1530,
	1531, 1532, 0, 0, 0, 1668, 0, 0, 0, 0,
	0, 0, 1847, 0, 0, 0, 449, 0, 454, 0,
	0, 0, 450, 0, 0, 0, 0, 451, 0, 0,
	0, 0, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 453, 0, 832, 546, 831, 0, 0, 1527, 0,
	0, 966, 974, 1699, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 964,
	0, 0, 0, 800, 0, 957, 0, 0, 0, 923,
	925, 0, 0, 0, 0, 0, 932, 1518, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 979, 980,
	981, 982, 983, 0, 0, 0, 0, 0, 991, 0,
	1752, 1753, 1051, 0, 0, 0, 0, 0, 998, 0,
	0, 0, 1533, 831, 0, 0, 1576, 514, 0, 0,
	0, 0, 1786, 0, 1787, 0, 277, 1789, 1790, 0,
	1528, 1793, 277, 958, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 967, 0, 0, 0,
	0, 800, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1576, 0, 514, 1154, 0, 1576,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 277, 277, 0, 0, 277, 0, 0, 0, 0,
	0, 0, 0, 0, 1668, 0, 0, 0, 1529, 0,
	0, 1844, 0, 0, 0, 0, 0, 965, 831, 0,
	0, 0, 0, 0, 952, 949, 950, 951, 943, 944,
	945, 946, 948, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1524, 1525, 1526, 0, 1523,
	1520, 1521, 1522, 1514, 1515, 1516, 1517, 1519, 0, 1051,
	0, 1883, 0, 436, 1885, 0, 0, 0, 0, 0,
	0, 0, 277, 0, 0, 1576, 0, 0, 436, 0,
	0, 0, 0, 0, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1917, 0, 0, 514, 307, 0, 1512, 1513, 0, 1530,
	1531, 1532, 0, 1576, 0, 0, 0, 0, 277, 0,
	0, 0, 0, 0, 0, 1940, 0, 0, 0, 0,
	0, 0, 0, 277, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 514,
	1668, 0, 0, 0, 0, 0, 0, 0, 1527, 0,
	632, 0, 0, 0, 0, 0, 1203, 1204, 1205, 1206,
	1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216,
	1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 0, 1230,
	916, 1232, 1233, 1234, 1235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1518, 0, 0,
	1259, 0, 0, 0, 0, 1985, 1986, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1997, 0, 0,
	0, 1998, 1286, 1287, 0, 0, 1300, 0, 1311, 1313,
	1318, 1321, 1322, 1323, 0, 0, 514, 0, 0, 0,
	0, 0, 1668, 0, 0, 546, 0, 0, 1668, 514,
	1528, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2030, 0, 514, 0, 0, 277, 0, 436, 0,
	0, 0, 0, 0, 546, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1576, 1380, 0,
	1940, 0, 0, 1668, 546, 0, 0, 0, 0, 939,
	940, 0, 959, 960, 961, 969, 970, 971, 1529, 0,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	0, 0, 942, 0, 0, 973, 0, 277, 0, 514,
	1406, 0, 0, 0, 0, 0, 939, 940, 0, 959,
	960, 961, 969, 970, 971, 941, 0, 2092, 0, 0,
	0, 956, 962, 0, 0, 0, 0, 0, 0, 942,
	0, 0, 973, 0, 0, 0, 1668, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 932,
	0, 0, 941, 0, 0, 1524, 1525, 1526, 956, 1523,
	1520, 1521, 1522, 1514, 1515, 1516, 1517, 1519, 0, 0,
	947, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 966,
	974, 0, 0, 0, 0, 0, 0, 0, 1457, 1458,
	0, 0, 0, 0, 1463, 972, 0, 947, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 546, 957, 0, 0, 966, 974, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1482, 0, 0,
	0, 0, 972, 0, 1489, 0, 0, 1493, 963, 0,
	0, 0, 0, 0, 964, 0, 1502, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 991, 0, 0, 0, 963, 0, 1318, 1318, 1318,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1573, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	546, 967, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 632, 0, 0, 0, 0, 0, 307, 0,
	0, 0, 0, 0, 735, 965, 0, 0, 953, 954,
	955, 0, 952, 949, 950, 951, 943, 944, 945, 946,
	948, 0, 968, 0, 0, 0, 0, 0, 0, 1554,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 953, 954, 955, 0, 952,
	949, 950, 951, 943, 944, 945, 946, 948, 0, 968,
	0, 0, 0, 0, 0, 0, 1553, 0, 0, 1671,
	0, 0, 1672, 0, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 0, 1677, 0, 0, 0, 0, 0,
	962, 0, 0, 1686, 0, 0, 0, 942, 0, 0,
	973, 1690, 0, 0, 1406, 0, 939, 940, 0, 959,
	960, 961, 969, 970, 971, 0, 0, 0, 0, 1706,
	941, 0, 962, 1708, 0, 0, 956, 0, 0, 942,
	0, 0, 973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 1739, 1740, 956, 0,
	0, 0, 0, 0, 0, 1746, 1747, 1748, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1776, 0, 0, 966, 974, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 947, 0, 0,
	972, 0, 939, 940, 0, 959, 960, 961, 969, 970,
	971, 0, 964, 0, 0, 0, 966, 974, 957, 0,
	0, 0, 0, 0, 0, 942, 0, 0, 973, 0,
	0, 0, 972, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 963, 964, 0, 0, 1822, 941, 0,
	957, 0, 0, 0, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 963, 0, 0, 1849, 0,
	0, 0, 1852, 1853, 0, 0, 958, 1855, 0, 0,
	0, 0, 0, 0, 1857, 0, 1859, 0, 0, 967,
	0, 0, 0, 947, 1865, 0, 0, 0, 0, 939,
	940, 0, 959, 960, 961, 969, 970, 971, 958, 0,
	0, 0, 966, 974, 0, 962, 0, 0, 0, 0,
	0, 967, 942, 0, 0, 973, 0, 1874, 972, 0,
	0, 1512, 1513, 0, 1530, 1531, 1532, 0, 0, 0,
	964, 0, 0, 0, 0, 941, 957, 1680, 0, 0,
	965, 956, 0, 953, 954, 955, 0, 952, 949, 950,
	951, 943, 944, 945, 946, 948, 0, 968, 0, 0,
	0, 0, 0, 0, 1552, 0, 1907, 0, 0, 0,
	0, 0, 965, 1527, 0, 953, 954, 955, 0, 952,
	949, 950, 951, 943, 944, 945, 946, 948, 0, 968,
	947, 0, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 966,
	974, 1943, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 1518, 0, 0, 972, 0, 0, 0, 0,
	1958, 1959, 0, 0, 0, 0, 0, 964, 0, 0,
	0, 0, 0, 957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1533, 0, 0,
	1971, 0, 0, 0, 0, 0, 0, 0, 963, 0,
	0, 0, 0, 1975, 0, 1528, 0, 0, 965, 0,
	0, 953, 954, 955, 0, 952, 949, 950, 951, 943,
	944, 945, 946, 948, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 958, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1529, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 953, 954,
	955, 0, 952, 949, 950, 951, 943, 944, 945, 946,
	948, 0, 968, 0, 0, 0, 2027, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2074,
	1524, 1525, 1526, 0, 1523, 1520, 1521, 1522, 1514, 1515,
	1516, 1517, 1519, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2090, 2090, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2090, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2090, 90, 91, 323, 92,
	324, 325, 326, 327, 224, 328, 329, 330, 331, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 332,
	97, 231, 232, 98, 333, 334, 233, 234, 235, 335,
	99, 236, 336, 309, 337, 100, 101, 102, 0, 103,
	338, 104, 105, 106, 339, 310, 107, 108, 340, 341,
	342, 343, 344, 345, 109, 110, 278, 111, 237, 112,
	238, 239, 346, 113, 347, 114, 348, 349, 350, 115,
	116, 351, 117, 352, 0, 353, 240, 118, 119, 241,
	242, 354, 355, 356, 120, 121, 243, 0, 122, 357,
	123, 358, 359, 311, 360, 124, 244, 361, 245, 362,
	125, 126, 127, 128, 246, 247, 313, 363, 132, 364,
	129, 365, 312, 130, 248, 131, 249, 250, 251, 366,
	252, 367, 314, 133, 315, 134, 135, 368, 137, 136,
	369, 253, 316, 138, 317, 370, 139, 371, 372, 140,
	0, 141, 142, 143, 145, 254, 144, 318, 146, 147,
	149, 148, 373, 374, 375, 255, 150, 256, 151, 152,
	376, 153, 377, 378, 154, 379, 380, 155, 257, 319,
	156, 320, 258, 157, 158, 159, 160, 381, 259, 161,
	260, 162, 382, 163, 164, 165, 261, 166, 167, 383,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 384, 179, 321, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 385, 263, 189, 190, 386, 191, 183,
	192, 322, 193, 264, 265, 194, 387, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 388, 201, 389, 202,
	203, 204, 205, 206, 390, 268, 269, 270, 391, 392,
	207, 271, 272, 393, 208, 209, 210, 211, 394, 395,
	212, 213, 214, 396, 215, 397, 216, 217, 218, 273,
	274, 398, 399, 219, 400, 401, 402, 403, 220, 221,
	222, 223, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 304, 0, 0, 0, 0, 0, 0,
	1662, 0, 0, 0, 0, 0, 0, 0, 1663, 90,
	91, 323, 92, 324, 325, 326, 327, 224, 328, 329,
	330, 331, 93, 94, 95, 225, 226, 227, 228, 96,
	229, 230, 332, 97, 231, 232, 98, 333, 334, 233,
	234, 235, 335, 99, 236, 336, 309, 337, 100, 101,
	102, 0, 103, 338, 104, 105, 106, 339, 310, 107,
	108, 340, 341, 342, 343, 344, 345, 109, 110, 278,
	111, 237, 112, 238, 239, 346, 113, 347, 114, 348,
	349, 350, 115, 116, 351, 117, 352, 0, 353, 240,
	118, 119, 241, 242, 354, 355, 356, 120, 121, 243,
	0, 122, 357, 123, 358, 359, 311, 360, 124, 244,
	361, 245, 362, 125, 126, 127, 128, 246, 247, 313,
	363, 132, 364, 129, 365, 312, 130, 248, 131, 249,
	250, 251, 366, 252, 367, 314, 133, 315, 134, 135,
	368, 137, 136, 369, 253, 316, 138, 317, 370, 139,
	371, 372, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 373, 374, 375, 255, 150,
	256, 151, 152, 376, 153, 377, 378, 154, 379, 380,
	155, 257, 319, 156, 320, 258, 157, 158, 159, 160,
	381, 259, 161, 260, 162, 382, 163, 164, 165, 261,
	166, 167, 383, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 384, 179, 321, 180, 181, 262,
	182, 0, 185, 186, 187, 188, 385, 263, 189, 190,
	386, 191, 183, 192, 322, 193, 264, 265, 194, 387,
	200, 195, 196, 184, 197, 199, 266, 198, 267, 388,
	201, 389, 202, 203, 204, 205, 206, 390, 268, 269,
	270, 391, 392, 207, 271, 272, 393, 208, 209, 210,
	211, 394, 395, 212, 213, 214, 396, 215, 397, 216,
	217, 218, 273, 274, 398, 399, 219, 400, 401, 402,
	403, 220, 221, 222, 223, 0, 0, 0, 304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2015, 90, 91, 323, 92, 324, 325,
	326, 327, 224, 328, 329, 330, 331, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 332, 97, 231,
	232, 98, 333, 334, 233, 234, 235, 335, 99, 236,
	336, 309, 337, 100, 101, 102, 0, 103, 338, 104,
	105, 106, 339, 310, 107, 108, 340, 341, 342, 343,
	344, 345, 109, 110, 278, 111, 237, 112, 238, 239,
	346, 113, 347, 114, 348, 349, 350, 115, 116, 351,
	117, 352, 0, 353, 240, 118, 119, 241, 242, 354,
	355, 356, 120, 121, 243, 0, 122, 357, 123, 358,
	359, 311, 360, 124, 244, 361, 245, 362, 125, 126,
	127, 128, 246, 247, 313, 363, 132, 364, 129, 365,
	312, 130, 248, 131, 249, 250, 251, 366, 252, 367,
	314, 133, 315, 134, 135, 368, 137, 136, 369, 253,
	316, 138, 317, 370, 139, 371, 372, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	373, 374, 375, 255, 150, 256, 151, 152, 376, 153,
	377, 378, 154, 379, 380, 155, 257, 319, 156, 320,
	258, 157, 158, 159, 160, 381, 259, 161, 260, 162,
	382, 163, 164, 165, 261, 166, 167, 383, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 384,
	179, 321, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 385, 263, 189, 190, 386, 191, 183, 192, 322,
	193, 264, 265, 194, 387, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 388, 201, 389, 202, 203, 204,
	205, 206, 390, 268, 269, 270, 391, 392, 207, 271,
	272, 393, 208, 209, 210, 211, 394, 395, 212, 213,
	214, 396, 215, 397, 216, 217, 218, 273, 274, 398,
	399, 219, 400, 401, 402, 403, 220, 221, 222, 223,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 765, 0, 0, 90, 91, 323, 92,
	324, 325, 326, 327, 224, 328, 329, 330, 331, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 332,
	97, 231, 232, 98, 333, 334, 233, 234, 235, 335,
	99, 236, 336, 309, 337, 100, 101, 102, 0, 103,
	338, 104, 105, 106, 339, 310, 107, 108, 340, 341,
	342, 343, 344, 345, 109, 110, 278, 111, 237, 112,
	238, 239, 346, 113, 347, 114, 348, 349, 350, 115,
	116, 351, 117, 352, 0, 353, 240, 118, 119, 241,
	242, 354, 355, 356, 120, 121, 243, 0, 122, 357,
	123, 358, 359, 311, 360, 124, 244, 361, 245, 362,
	125, 126, 127, 128, 246, 247, 313, 363, 132, 364,
	129, 365, 312, 130, 248, 131, 249, 250, 251, 366,
	252, 367, 314, 133, 315, 134, 135, 368, 137, 136,
	369, 253, 316, 138, 317, 370, 139, 371, 372, 140,
	0, 141, 142, 143, 145, 254, 144, 318, 146, 147,
	149, 148, 373, 374, 375, 255, 150, 256, 151, 152,
	376, 153, 377, 378, 154, 379, 380, 155, 257, 319,
	156, 320, 258, 157, 158, 159, 160, 381, 259, 161,
	260, 162, 382, 163, 164, 165, 261, 166, 167, 383,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 384, 179, 321, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 385, 263, 189, 190, 386, 191, 183,
	192, 322, 193, 264, 265, 194, 387, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 388, 201, 389, 202,
	203, 204, 205, 206, 390, 268, 269, 270, 391, 392,
	207, 271, 272, 393, 208, 209, 210, 211, 394, 395,
	212, 213, 214, 396, 215, 397, 216, 217, 218, 273,
	274, 398, 399, 219, 400, 401, 402, 403, 220, 221,
	222, 223, 670, 659, 660, 657, 658, 649, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 686, 652, 0, 0,
	0, 93, 94, 95, 225, 701, 227, 702, 96, 703,
	704, 0, 97, 231, 232, 98, 655, 685, 705, 706,
	235, 0, 99, 697, 0, 678, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 310, 107, 108,
	0, 679, 681, 0, 680, 682, 109, 110, 278, 111,
	707, 112, 708, 709, 736, 113, 0, 114, 0, 0,
	0, 700, 116, 0, 117, 0, 0, 0, 643, 118,
	119, 687, 688, 666, 0, 0, 120, 121, 710, 0,
	122, 0, 123, 0, 0, 311, 0, 124, 698, 0,
	245, 0, 125, 126, 127, 128, 694, 696, 313, 0,
	132, 0, 129, 0, 312, 130, 711, 131, 712, 713,
	714, 0, 677, 0, 314, 133, 315, 134, 135, 0,
	137, 136, 0, 699, 316, 138, 317, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 318,
	146, 147, 149, 148, 638, 0, 667, 695, 150, 715,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 319, 156, 320, 689, 157, 158, 159, 160, 0,
	690, 161, 260, 162, 0, 163, 164, 165, 716, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 321, 180, 181, 644, 182,
	0, 185, 186, 187, 188, 71, 263, 189, 190, 683,
	191, 183, 192, 322, 193, 717, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 718, 198, 691, 0, 201,
	73, 202, 203, 204, 205, 206, 0, 268, 719, 720,
	0, 0, 207, 692, 693, 665, 208, 209, 210, 211,
	0, 0, 212, 213, 214, 684, 215, 0, 216, 217,
	218, 547, 721, 0, 0, 219, 0, 0, 0, 69,
	220, 221, 222, 223, 639, 70, 0, 0, 0, 670,
	659, 660, 657, 658, 649, 635, 636, 0, 0, 0,
	0, 637, 0, 0, 645, 90, 91, 1275, 92, 648,
	0, 0, 0, 686, 652, 0, 0, 0, 93, 94,
	95, 225, 701, 227, 702, 96, 703, 704, 0, 97,
	231, 232, 98, 655, 685, 705, 706, 235, 0, 99,
	697, 0, 678, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 310, 107, 108, 0, 679, 681,
	0, 680, 682, 109, 110, 278, 111, 707, 112, 708,
	709, 0, 113, 0, 114, 0, 1276, 0, 700, 116,
	0, 117, 0, 0, 0, 643, 118, 119, 687, 688,
	666, 0, 0, 120, 121, 710, 0, 122, 0, 123,
	0, 0, 311, 0, 124, 698, 0, 245, 0, 125,
	126, 127, 128, 694, 696, 313, 0, 132, 0, 129,
	0, 312, 130, 711, 131, 712, 713, 714, 0, 677,
	0, 314, 133, 315, 134, 135, 0, 137, 136, 0,
	699, 316, 138, 317, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 254, 144, 318, 146, 147, 149,
	148, 638, 0, 667, 695, 150, 715, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 257, 319, 156,
	320, 689, 157, 158, 159, 160, 0, 690, 161, 260,
	162, 0, 163, 164, 165, 716, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 321, 180, 181, 644, 182, 0, 185, 186,
	187, 188, 0, 263, 189, 190, 683, 191, 183, 192,
	322, 193, 717, 265, 194, 0, 200, 195, 196, 184,
	197, 199, 718, 198, 691, 0, 201, 0, 202, 203,
	204, 205, 206, 0, 268, 719, 720, 0, 0, 207,
	692, 693, 665, 208, 209, 210, 211, 0, 0, 212,
	213, 214, 684, 215, 0, 216, 217, 218, 273, 721,
	1274, 0, 219, 0, 0, 0, 0, 220, 221, 222,
	223, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 635, 636, 1277, 0, 0, 0, 637, 0,
	0, 645, 1272, 0, 0, 0, 648, 670, 659, 660,
	657, 658, 649, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 0, 92, 0, 0, 0,
	0, 686, 652, 0, 0, 0, 93, 94, 95, 225,
	701, 227, 702, 96, 703, 704, 0, 97, 231, 232,
	98, 655, 685, 705, 706, 235, 0, 99, 697, 0,
	678, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 310, 107, 108, 0, 679, 681, 0, 680,
	682, 109, 110, 278, 111, 707, 112, 708, 709, 0,
	113, 0, 114, 0, 0, 0, 700, 116, 0, 117,
	0, 0, 0, 643, 118, 119, 687, 688, 666, 0,
	0, 120, 121, 710, 0, 122, 0, 123, 0, 0,
	311, 0, 124, 698, 0, 245, 0, 125, 126, 127,
	128, 694, 696, 313, 0, 132, 0, 129, 0, 312,
	130, 711, 131, 712, 713, 714, 0, 677, 0, 314,
	133, 315, 134, 135, 0, 137, 136, 0, 699, 316,
	138, 317, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 254, 144, 318, 146, 147, 149, 148, 638,
	0, 667, 695, 150, 715, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 257, 319, 156, 320, 689,
	157, 158, 159, 160, 0, 690, 161, 260, 162, 0,
	163, 164, 165, 716, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	321, 180, 181, 644, 182, 0, 185, 186, 187, 188,
	71, 263, 189, 190, 683, 191, 183, 192, 322, 193,
	717, 265, 194, 0, 200, 195, 196, 184, 197, 199,
	718, 198, 691, 0, 201, 73, 202, 203, 204, 205,
	206, 0, 268, 719, 720, 0, 0, 207, 692, 693,
	665, 208, 209, 210, 211, 0, 0, 212, 213, 214,
	684, 215, 0, 216, 217, 218, 547, 721, 0, 0,
	219, 0, 0, 0, 69, 220, 221, 222, 223, 639,
	70, 670, 659, 660, 657, 658, 649, 0, 0, 0,
	635, 636, 0, 0, 0, 0, 637, 90, 91, 645,
	92, 0, 0, 0, 648, 686, 652, 0, 0, 0,
	93, 94, 95, 225, 701, 227, 702, 96, 703, 704,
	1314, 97, 231, 232, 98, 655, 685, 705, 706, 235,
	0, 99, 697, 0, 678, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 310, 107, 108, 0,
	679, 681, 0, 680, 682, 109, 110, 278, 111, 707,
	112, 708, 709, 0, 113, 0, 114, 0, 0, 0,
	700, 116, 0, 117, 0, 0, 0, 643, 118, 119,
	687, 688, 666, 0, 0, 120, 121, 710, 0, 122,
	0, 123, 0, 1319, 311, 0, 124, 698, 0, 245,
	0, 125, 126, 127, 128, 694, 696, 313, 0, 132,
	0, 129, 0, 312, 130, 711, 131, 712, 713, 714,
	0, 677, 0, 314, 133, 315, 134, 135, 0, 137,
	136, 1315, 699, 316, 138, 317, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 254, 144, 318, 146,
	147, 149, 148, 638, 0, 667, 695, 150, 715, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 257,
	319, 156, 320, 689, 157, 158, 159, 160, 0, 690,
	161, 260, 162, 0, 163, 164, 165, 716, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 321, 180, 181, 644, 182, 0,
	185, 186, 187, 188, 0, 263, 189, 190, 683, 191,
	183, 192, 322, 193, 717, 265, 194, 0, 200, 195,
	196, 184, 197, 199, 718, 198, 691, 0, 201, 0,
	202, 203, 204, 205, 206, 0, 268, 719, 720, 0,
	1316, 207, 692, 693, 665, 208, 209, 210, 211, 0,
	0, 212, 213, 214, 684, 215, 0, 216, 217, 218,
	273, 721, 0, 0, 219, 0, 0, 0, 0, 220,
	221, 222, 223, 639, 0, 670, 659, 660, 657, 658,
	649, 0, 0, 0, 635, 636, 0, 0, 0, 0,
	637, 90, 91, 645, 92, 0, 0, 0, 648, 686,
	652, 0, 0, 0, 93, 94, 95, 225, 701, 227,
	702, 96, 703, 704, 0, 97, 231, 232, 98, 655,
	685, 705, 706, 235, 0, 99, 697, 0, 678, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	310, 107, 108, 0, 679, 681, 0, 680, 682, 109,
	110, 278, 111, 707, 112, 708, 709, 0, 113, 0,
	114, 0, 0, 0, 700, 116, 0, 117, 0, 0,
	0, 643, 118, 119, 687, 688, 666, 0, 0, 120,
	121, 710, 0, 122, 0, 123, 0, 0, 311, 0,
	124, 698, 0, 245, 0, 125, 126, 127, 128, 694,
	696, 313, 0, 132, 0, 129, 0, 312, 130, 711,
	131, 712, 713, 714, 0, 677, 0, 314, 133, 315,
	134, 135, 0, 137, 136, 0, 699, 316, 138, 317,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	254, 144, 318, 146, 147, 149, 148, 638, 1605, 667,
	695, 150, 715, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 257, 319, 156, 320, 689, 157, 158,
	159, 160, 0, 690, 161, 260, 162, 0, 163, 164,
	165, 716, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 321, 180,
	181, 644, 182, 0, 185, 186, 187, 188, 0, 263,
	189, 190, 683, 191, 183, 192, 322, 193, 717, 265,
	194, 0, 200, 195, 196, 184, 197, 199, 718, 198,
	691, 0, 201, 0, 202, 203, 204, 205, 206, 0,
	268, 719, 720, 0, 0, 207, 692, 693, 665, 208,
	209, 210, 211, 0, 0, 212, 213, 214, 684, 215,
	0, 216, 217, 218, 273, 721, 0, 0, 219, 0,
	0, 0, 0, 220, 221, 222, 223, 639, 0, 670,
	659, 660, 657, 658, 649, 0, 0, 0, 635, 636,
	633, 0, 0, 0, 637, 90, 91, 645, 92, 0,
	0, 0, 648, 686, 652, 0, 0, 0, 93, 94,
	95, 225, 701, 227, 702, 96, 703, 704, 0, 97,
	231, 232, 98, 655, 685, 705, 706, 235, 0, 99,
	697, 0, 678, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 310, 107, 108, 0, 679, 681,
	0, 680, 682, 109, 110, 278, 111, 707, 112, 708,
	709, 0, 113, 0, 114, 0, 0, 0, 700, 116,
	0, 117, 0, 0, 0, 643, 118, 119, 687, 688,
	666, 0, 0, 120, 121, 710, 0, 122, 0, 123,
	0, 0, 311, 0, 124, 698, 0, 245, 0, 125,
	126, 127, 128, 694, 696, 313, 0, 132, 0, 129,
	0, 312, 130, 711, 131, 712, 713, 714, 0, 677,
	0, 314, 133, 315, 134, 135, 0, 137, 136, 0,
	699, 316, 138, 317, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 254, 144, 318, 146, 147, 149,
	148, 638, 0, 667, 695, 150, 715, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 257, 319, 156,
	320, 689, 157, 158, 159, 160, 0, 690, 161, 260,
	162, 0, 163, 164, 165, 716, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 321, 180, 181, 644, 182, 0, 185, 186,
	187, 188, 0, 263, 189, 190, 683, 191, 183, 192,
	322, 193, 717, 265, 194, 0, 200, 195, 196, 184,
	197, 199, 718, 198, 691, 0, 201, 0, 202, 203,
	204, 205, 206, 0, 268, 719, 720, 0, 0, 207,
	692, 693, 665, 208, 209, 210, 211, 0, 0, 212,
	213, 214, 684, 215, 0, 216, 217, 218, 273, 721,
	0, 0, 219, 0, 0, 0, 0, 220, 221, 222,
	223, 639, 0, 0, 0, 0, 670, 659, 660, 657,
	658, 649, 635, 636, 0, 0, 0, 0, 637, 996,
	1267, 645, 90, 91, 0, 92, 648, 0, 0, 0,
	686, 652, 0, 0, 0, 93, 94, 95, 225, 701,
	227, 702, 96, 703, 704, 0, 97, 231, 232, 98,
	655, 685, 705, 706, 235, 0, 99, 697, 0, 678,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 310, 107, 108, 0, 679, 681, 0, 680, 682,
	109, 110, 278, 111, 707, 112, 708, 709, 0, 113,
	0, 114, 0, 0, 0, 700, 116, 0, 117, 0,
	0, 0, 643, 118, 119, 687, 688, 666, 0, 0,
	120, 121, 710, 0, 122, 0, 123, 0, 0, 311,
	0, 124, 698, 0, 245, 0, 125, 126, 127, 128,
	694, 696, 313, 0, 132, 0, 129, 0, 312, 130,
	711, 131, 712, 713, 714, 0, 677, 0, 314, 133,
	315, 134, 135, 0, 137, 136, 0, 699, 316, 138,
	317, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 318, 146, 147, 149, 148, 638, 0,
	667, 695, 150, 715, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 319, 156, 320, 689, 157,
	158, 159, 160, 0, 690, 161, 260, 162, 0, 163,
	164, 165, 716, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 321,
	180, 181, 644, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 683, 191, 183, 192, 322, 193, 717,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 718,
	198, 691, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 719, 720, 0, 0, 207, 692, 693, 665,
	208, 209, 210, 211, 0, 0, 212, 213, 214, 684,
	215, 0, 216, 217, 218, 273, 721, 0, 0, 219,
	0, 0, 0, 0, 220, 221, 222, 223, 639, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 635,
	636, 0, 0, 0, 0, 637, 0, 0, 645, 1736,
	0, 0, 0, 648, 670, 659, 660, 657, 658, 649,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 686, 652,
	0, 0, 0, 93, 94, 95, 225, 701, 227, 702,
	96, 703, 704, 0, 97, 231, 232, 98, 655, 685,
	705, 706, 235, 0, 99, 697, 0, 678, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 310,
	107, 108, 0, 679, 681, 0, 680, 682, 109, 110,
	278, 111, 707, 112, 708, 709, 0, 113, 0, 114,
	0, 0, 0, 700, 116, 0, 117, 0, 0, 0,
	643, 118, 119, 687, 688, 666, 0, 0, 120, 121,
	710, 0, 122, 0, 123, 0, 0, 311, 0, 124,
	698, 0, 245, 0, 125, 126, 127, 128, 694, 696,
	313, 0, 132, 0, 129, 0, 312, 130, 711, 131,
	712, 713, 714, 0, 677, 0, 314, 133, 315, 134,
	135, 0, 137, 136, 0, 699, 316, 138, 317, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 318, 146, 147, 149, 148, 638, 0, 667, 695,
	150, 715, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 319, 156, 320, 689, 157, 158, 159,
	160, 0, 690, 161, 260, 162, 0, 163, 164, 165,
	716, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 321, 180, 181,
	644, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 683, 191, 183, 192, 322, 193, 717, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 718, 198, 691,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	719, 720, 0, 0, 207, 692, 693, 665, 208, 209,
	210, 211, 0, 0, 212, 213, 214, 684, 215, 0,
	216, 217, 218, 273, 721, 1693, 0, 219, 0, 0,
	0, 0, 220, 221, 222, 223, 639, 0, 670, 659,
	660, 657, 658, 649, 0, 0, 0, 635, 636, 0,
	0, 0, 0, 637, 90, 91, 645, 92, 0, 0,
	0, 648, 686, 652, 0, 0, 0, 93, 94, 95,
	225, 701, 227, 702, 96, 703, 704, 0, 97, 231,
	232, 98, 655, 685, 705, 706, 235, 0, 99, 697,
	0, 678, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 310, 107, 108, 0, 679, 681, 0,
	680, 682, 109, 110, 278, 111, 707, 112, 708, 709,
	0, 113, 0, 114, 0, 0, 0, 700, 116, 0,
	117, 0, 0, 0, 643, 118, 119, 687, 688, 666,
	0, 0, 120, 121, 710, 0, 122, 0, 123, 0,
	0, 311, 0, 124, 698, 0, 245, 0, 125, 126,
	127, 128, 694, 696, 313, 0, 132, 0, 129, 0,
	312, 130, 711, 131, 712, 713, 714, 0, 677, 0,
	314, 133, 315, 134, 135, 0, 137, 136, 0, 699,
	316, 138, 317, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	638, 0, 667, 695, 150, 715, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 319, 156, 320,
	689, 157, 158, 159, 160, 0, 690, 161, 260, 162,
	0, 163, 164, 165, 716, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 321, 180, 181, 644, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 683, 191, 183, 192, 322,
	193, 717, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 718, 198, 691, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 719, 720, 0, 0, 207, 692,
	693, 665, 208, 209, 210, 211, 0, 0, 212, 213,
	214, 684, 215, 0, 216, 217, 218, 273, 721, 0,
	0, 219, 0, 0, 0, 0, 220, 221, 222, 223,
	639, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 635, 636, 0, 0, 0, 0, 637, 0, 0,
	645, 1683, 0, 0, 0, 648, 670, 659, 660, 657,
	658, 649, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 91, 0, 92, 0, 0, 0, 0,
	686, 652, 0, 0, 0, 93, 94, 95, 225, 701,
	227, 702, 96, 703, 704, 0, 97, 231, 232, 98,
	655, 685, 705, 706, 235, 0, 99, 697, 0, 678,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 310, 107, 108, 0, 679, 681, 0, 680, 682,
	109, 110, 278, 111, 707, 112, 708, 709, 736, 113,
	0, 114, 0, 0, 0, 700, 116, 0, 117, 0,
	0, 0, 643, 118, 119, 687, 688, 666, 0, 0,
	120, 121, 710, 0, 122, 0, 123, 0, 0, 311,
	0, 124, 698, 0, 245, 0, 125, 126, 127, 128,
	694, 696, 313, 0, 132, 0, 129, 0, 312, 130,
	711, 131, 712, 713, 714, 0, 677, 0, 314, 133,
	315, 134, 135, 0, 137, 136, 0, 699, 316, 138,
	317, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 318, 146, 147, 149, 148, 638, 0,
	667, 695, 150, 715, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 319, 156, 320, 689, 157,
	158, 159, 160, 0, 690, 161, 260, 162, 0, 163,
	164, 165, 716, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 321,
	180, 181, 644, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 683, 191, 183, 192, 322, 193, 717,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 718,
	198, 691, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 719, 720, 0, 0, 207, 692, 693, 665,
	208, 209, 210, 211, 0, 0, 212, 213, 214, 684,
	215, 0, 216, 217, 218, 273, 721, 0, 0, 219,
	0, 0, 0, 0, 220, 221, 222, 223, 639, 0,
	670, 659, 660, 657, 658, 649, 0, 0, 0, 635,
	636, 0, 0, 0, 0, 637, 90, 91, 645, 92,
	0, 0, 0, 648, 686, 652, 0, 0, 0, 93,
	94, 95, 225, 701, 227, 702, 96, 703, 704, 0,
	97, 231, 232, 98, 655, 685, 705, 706, 235, 0,
	99, 697, 0, 678, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 310, 107, 108, 0, 679,
	681, 0, 680, 682, 109, 110, 278, 111, 707, 112,
	708, 709, 0, 113, 0, 114, 0, 0, 0, 700,
	116, 0, 117, 0, 0, 0, 643, 118, 119, 687,
	688, 666, 0, 0, 120, 121, 710, 0, 122, 0,
	123, 0, 1319, 311, 0, 124, 698, 0, 245, 0,
	125, 126, 127, 128, 694, 696, 313, 0, 132, 0,
	129, 0, 312, 130, 711, 131, 712, 713, 714, 0,
	677, 0, 314, 133, 315, 134, 135, 0, 137, 136,
	0, 699, 316, 138, 317, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 318, 146, 147,
	149, 148, 638, 0, 667, 695, 150, 715, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 319,
	156, 320, 689, 157, 158, 159, 160, 0, 690, 161,
	260, 162, 0, 163, 164, 165, 716, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 321, 180, 181, 644, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 683, 191, 183,
	192, 322, 193, 717, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 718, 198, 691, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 719, 720, 0, 0,
	207, 692, 693, 665, 208, 209, 210, 211, 0, 0,
	212, 213, 214, 684, 215, 0, 216, 217, 218, 273,
	721, 0, 0, 219, 0, 0, 0, 0, 220, 221,
	222, 223, 639, 0, 670, 659, 660, 657, 658, 649,
	0, 0, 0, 635, 636, 0, 0, 0, 0, 637,
	90, 91, 645, 92, 0, 0, 0, 648, 686, 652,
	0, 0, 0, 93, 94, 95, 225, 701, 227, 702,
	96, 703, 704, 0, 97, 231, 232, 98, 655, 685,
	705, 706, 235, 0, 99, 697, 0, 678, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 310,
	107, 108, 0, 679, 681, 0, 680, 682, 109, 110,
	278, 111, 707, 112, 708, 709, 0, 113, 0, 114,
	0, 0, 0, 700, 116, 0, 117, 0, 0, 0,
	643, 118, 119, 687, 688, 666, 0, 0, 120, 121,
	710, 0, 122, 0, 123, 0, 0, 311, 0, 124,
	698, 0, 245, 0, 125, 126, 127, 128, 694, 696,
	313, 0, 132, 0, 129, 0, 312, 130, 711, 131,
	712, 713, 714, 0, 677, 0, 314, 133, 315, 134,
	135, 0, 137, 136, 0, 699, 316, 138, 317, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 318, 146, 147, 149, 148, 638, 0, 667, 695,
	150, 715, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 319, 156, 320, 689, 157, 158, 159,
	160, 0, 690, 161, 260, 162, 0, 163, 164, 165,
	716, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 321, 180, 181,
	644, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 683, 191, 183, 192, 322, 193, 717, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 718, 198, 691,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	719, 720, 0, 0, 207, 692, 693, 665, 208, 209,
	210, 211, 0, 0, 212, 213, 214, 684, 215, 0,
	216, 217, 218, 273, 721, 0, 0, 219, 0, 0,
	0, 0, 220, 221, 222, 223, 639, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 635, 636, 0,
	0, 0, 0, 637, 0, 0, 645, 1262, 0, 0,
	0, 648, 670, 659, 660, 657, 658, 649, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 686, 652, 0, 0,
	0, 93, 94, 95, 225, 701, 227, 702, 96, 703,
	704, 0, 97, 231, 232, 98, 655, 685, 705, 706,
	235, 0, 99, 697, 0, 678, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 310, 107, 108,
	0, 679, 681, 0, 680, 682, 109, 110, 278, 111,
	707, 112, 708, 709, 0, 113, 0, 114, 0, 0,
	0, 700, 116, 0, 117, 0, 0, 0, 643, 118,
	119, 687, 688, 666, 0, 0, 120, 121, 710, 0,
	122, 0, 123, 0, 0, 311, 0, 124, 698, 0,
	245, 0, 125, 126, 127, 128, 694, 696, 313, 0,
	132, 0, 129, 0, 312, 130, 711, 131, 712, 713,
	714, 0, 677, 0, 314, 133, 315, 134, 135, 0,
	137, 136, 0, 699, 316, 138, 317, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 318,
	146, 147, 149, 148, 638, 0, 667, 695, 150, 715,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 319, 156, 320, 689, 157, 158, 159, 160, 0,
	690, 161, 260, 162, 0, 163, 164, 165, 716, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 321, 180, 181, 644, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 683,
	191, 183, 192, 322, 193, 717, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 718, 198, 691, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 719, 720,
	0, 0, 207, 692, 693, 665, 208, 209, 210, 211,
	0, 0, 212, 213, 214, 684, 215, 0, 216, 217,
	218, 273, 721, 0, 0, 219, 0, 0, 0, 0,
	220, 221, 222, 223, 639, 0, 0, 0, 0, 670,
	659, 660, 657, 658, 649, 635, 636, 633, 0, 0,
	0, 637, 0, 0, 645, 90, 91, 924, 92, 648,
	0, 0, 0, 686, 652, 0, 0, 0, 93, 94,
	95, 225, 701, 227, 702, 96, 703, 704, 0, 97,
	231, 232, 98, 655, 685, 705, 706, 235, 0, 99,
	697, 0, 678, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 310, 107, 108, 0, 679, 681,
	0, 680, 682, 109, 110, 278, 111, 707, 112, 708,
	709, 0, 113, 0, 114, 0, 0, 0, 700, 116,
	0, 117, 0, 0, 0, 643, 118, 119, 687, 688,
	666, 0, 0, 120, 121, 710, 0, 122, 0, 123,
	0, 0, 311, 0, 124, 698, 0, 245, 0, 125,
	126, 127, 128, 694, 696, 313, 0, 132, 0, 129,
	0, 312, 130, 711, 131, 712, 713, 714, 0, 677,
	0, 314, 133, 315, 134, 135, 0, 137, 136, 0,
	699, 316, 138, 317, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 254, 144, 318, 146, 147, 149,
	148, 638, 0, 667, 695, 150, 715, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 257, 319, 156,
	320, 689, 157, 158, 159, 160, 0, 690, 161, 260,
	162, 0, 163, 164, 165, 716, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 321, 180, 181, 644, 182, 0, 185, 186,
	187, 188, 0, 263, 189, 190, 683, 191, 183, 192,
	322, 193, 717, 265, 194, 0, 200, 195, 196, 184,
	197, 199, 718, 198, 691, 0, 201, 0, 202, 203,
	204, 205, 206, 0, 268, 719, 720, 0, 0, 207,
	692, 693, 665, 208, 209, 210, 211, 0, 0, 212,
	213, 214, 684, 215, 0, 216, 217, 218, 273, 721,
	0, 0, 219, 0, 0, 0, 0, 220, 221, 222,
	223, 639, 0, 670, 659, 660, 657, 658, 649, 0,
	0, 0, 635, 636, 0, 0, 0, 0, 637, 90,
	91, 645, 92, 0, 0, 0, 648, 686, 652, 0,
	0, 0, 93, 94, 95, 225, 701, 227, 702, 96,
	703, 704, 0, 97, 231, 232, 98, 655, 685, 705,
	706, 235, 0, 99, 697, 0, 678, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	2089, 0, 679, 681, 0, 680, 682, 109, 110, 278,
	111, 707, 112, 708, 709, 0, 113, 0, 114, 0,
	0, 0, 700, 116, 0, 117, 0, 0, 0, 643,
	118, 119, 687, 688, 666, 0, 0, 120, 121, 710,
	0, 122, 0, 123, 0, 0, 311, 0, 124, 698,
	0, 245, 0, 125, 126, 127, 128, 694, 696, 313,
	0, 132, 0, 129, 0, 312, 130, 711, 131, 712,
	713, 714, 0, 677, 0, 314, 133, 315, 134, 135,
	0, 137, 136, 0, 699, 316, 138, 317, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 638, 0, 667, 695, 150,
	715, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 689, 157, 158, 159, 160,
	0, 690, 161, 260, 162, 0, 163, 164, 165, 716,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 644,
	182, 0, 185, 186, 187, 188, 0, 263, 189, 190,
	683, 191, 183, 192, 322, 193, 717, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 718, 198, 691, 0,
	201, 0, 202, 203, 204, 205, 206, 0, 268, 719,
	720, 0, 0, 207, 692, 693, 665, 208, 209, 2088,
	211, 0, 0, 212, 213, 214, 684, 215, 0, 216,
	217, 218, 273, 721, 0, 0, 219, 0, 0, 0,
	0, 220, 221, 222, 223, 639, 0, 670, 659, 660,
	657, 658, 649, 0, 0, 0, 635, 636, 0, 0,
	0, 0, 637, 90, 91, 645, 92, 0, 0, 0,
	648, 686, 652, 0, 0, 0, 93, 94, 95, 2087,
	701, 227, 702, 96, 703, 704, 0, 97, 231, 232,
	98, 655, 685, 705, 706, 235, 0, 99, 697, 0,
	678, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 310, 107, 2089, 0, 679, 681, 0, 680,
	682, 109, 110, 278, 111, 707, 112, 708, 709, 0,
	113, 0, 114, 0, 0, 0, 700, 116, 0, 117,
	0, 0, 0, 643, 118, 119, 687, 688, 666, 0,
	0, 120, 121, 710, 0, 122, 0, 123, 0, 0,
	311, 0, 124, 698, 0, 245, 0, 125, 126, 127,
	128, 694, 696, 313, 0, 132, 0, 129, 0, 312,
	130, 711, 131, 712, 713, 714, 0, 677, 0, 314,
	133, 315, 134, 135, 0, 137, 136, 0, 699, 316,
	138, 317, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 254, 144, 318, 146, 147, 149, 148, 638,
	0, 667, 695, 150, 715, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 257, 319, 156, 320, 689,
	157, 158, 159, 160, 0, 690, 161, 260, 162, 0,
	163, 164, 165, 716, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	321, 180, 181, 644, 182, 0, 185, 186, 187, 188,
	0, 263, 189, 190, 683, 191, 183, 192, 322, 193,
	717, 265, 194, 0, 200, 195, 196, 184, 197, 199,
	718, 198, 691, 0, 201, 0, 202, 203, 204, 205,
	206, 0, 268, 719, 720, 0, 0, 207, 692, 693,
	665, 208, 209, 2088, 211, 0, 0, 212, 213, 214,
	684, 215, 0, 216, 217, 218, 273, 721, 0, 0,
	219, 0, 0, 0, 0, 220, 221, 222, 223, 639,
	0, 670, 659, 660, 657, 658, 649, 0, 0, 0,
	635, 636, 0, 0, 0, 0, 637, 90, 91, 645,
	92, 0, 0, 0, 648, 686, 652, 0, 0, 0,
	93, 94, 95, 225, 701, 227, 702, 96, 703, 704,
	0, 97, 231, 232, 98, 655, 685, 705, 706, 235,
	0, 99, 697, 0, 678, 0, 100, 101, 102, 0,
	103, 0, 104, 105, 106, 0, 310, 107, 108, 0,
	679, 681, 0, 680, 682, 109, 110, 278, 111, 707,
	112, 708, 709, 0, 113, 0, 114, 0, 0, 0,
	700, 116, 0, 117, 0, 0, 0, 643, 118, 119,
	687, 688, 666, 0, 0, 120, 121, 710, 0, 122,
	0, 123, 0, 0, 311, 0, 124, 698, 0, 245,
	0, 125, 126, 127, 128, 694, 696, 313, 0, 132,
	0, 129, 0, 312, 130, 711, 131, 712, 713, 714,
	0, 677, 0, 314, 133, 315, 134, 135, 0, 137,
	136, 0, 699, 316, 138, 317, 0, 139, 0, 0,
	140, 0, 141, 142, 143, 145, 254, 144, 318, 146,
	147, 149, 148, 638, 0, 667, 695, 150, 715, 151,
	152, 0, 153, 0, 0, 154, 0, 0, 155, 257,
	319, 156, 320, 689, 157, 158, 159, 160, 0, 690,
	161, 260, 162, 0, 163, 164, 165, 716, 166, 167,
	0, 168, 169, 170, 171, 172, 174, 175, 173, 176,
	177, 178, 0, 179, 321, 180, 181, 644, 182, 0,
	185, 186, 187, 188, 0, 263, 189, 190, 683, 191,
	183, 192, 322, 193, 717, 265, 194, 0, 200, 195,
	196, 184, 197, 199, 718, 198, 691, 0, 201, 0,
	202, 203, 204, 205, 206, 0, 268, 719, 720, 0,
	0, 207, 692, 693, 665, 208, 209, 210, 211, 0,
	0, 212, 213, 214, 684, 215, 0, 216, 217, 218,
	273, 721, 0, 0, 219, 0, 0, 0, 0, 220,
	221, 222, 223, 639, 0, 1291, 659, 660, 657, 658,
	649, 0, 0, 0, 635, 636, 0, 0, 0, 0,
	637, 90, 91, 645, 92, 0, 0, 0, 648, 686,
	652, 0, 0, 0, 93, 94, 95, 225, 701, 227,
	702, 96, 703, 704, 0, 97, 231, 232, 98, 655,
	685, 705, 706, 235, 0, 99, 697, 0, 678, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	310, 107, 108, 0, 679, 681, 0, 680, 682, 109,
	110, 278, 111, 707, 1294, 708, 709, 0, 113, 0,
	114, 0, 0, 0, 700, 116, 0, 117, 0, 0,
	0, 643, 118, 119, 687, 688, 666, 0, 0, 120,
	121, 710, 0, 122, 0, 123, 0, 0, 311, 0,
	124, 698, 0, 245, 0, 125, 126, 1295, 128, 694,
	696, 313, 0, 132, 0, 129, 0, 312, 130, 711,
	131, 712, 713, 714, 0, 677, 0, 314, 133, 315,
	134, 135, 0, 137, 136, 0, 699, 316, 138, 317,
	0, 139, 0, 0, 140, 0, 141, 1296, 1293, 145,
	254, 144, 318, 146, 147, 149, 148, 638, 0, 667,
	695, 150, 715, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 257, 319, 156, 320, 689, 157, 158,
	159, 160, 0, 690, 161, 260, 162, 0, 163, 164,
	165, 716, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 321, 180,
	181, 644, 182, 0, 185, 186, 187, 1297, 0, 263,
	189, 190, 683, 191, 183, 192, 322, 193, 717, 265,
	194, 0, 200, 195, 196, 184, 197, 199, 718, 198,
	691, 0, 201, 0, 202, 203, 204, 205, 206, 0,
	268, 719, 720, 0, 0, 207, 692, 693, 665, 208,
	209, 210, 211, 0, 0, 212, 213, 214, 684, 215,
	0, 216, 217, 218, 273, 721, 0, 0, 219, 0,
	0, 0, 0, 220, 221, 1292, 223, 639, 0, 670,
	659, 660, 657, 658, 649, 0, 0, 0, 635, 636,
	0, 0, 0, 0, 637, 90, 91, 645, 92, 0,
	0, 0, 648, 686, 652, 0, 0, 0, 93, 94,
	95, 225, 701, 227, 702, 96, 703, 704, 0, 97,
	231, 232, 98, 655, 685, 705, 706, 235, 0, 99,
	697, 0, 678, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 310, 107, 108, 0, 679, 681,
	0, 680, 682, 109, 110, 278, 111, 707, 112, 708,
	709, 0, 113, 0, 114, 0, 0, 0, 700, 116,
	0, 117, 0, 0, 0, 643, 118, 119, 687, 688,
	666, 0, 0, 120, 121, 710, 0, 122, 0, 123,
	0, 0, 311, 0, 124, 698, 0, 245, 0, 125,
	126, 127, 128, 694, 696, 313, 0, 132, 0, 129,
	0, 312, 130, 711, 131, 712, 713, 714, 0, 677,
	0, 314, 133, 315, 134, 135, 0, 137, 136, 0,
	699, 316, 138, 317, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 254, 144, 318, 146, 147, 149,
	148, 0, 0, 667, 695, 150, 715, 151, 152, 0,
	153, 0, 0, 154, 0, 0, 155, 257, 319, 156,
	320, 689, 157, 158, 159, 160, 0, 690, 161, 260,
	162, 0, 163, 164, 165, 716, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 321, 180, 181, 1309, 182, 0, 185, 186,
	187, 188, 0, 263, 189, 190, 683, 191, 183, 192,
	322, 193, 717, 265, 194, 0, 200, 195, 196, 184,
	197, 199, 718, 198, 691, 0, 201, 0, 202, 203,
	204, 205, 206, 0, 268, 719, 720, 0, 0, 207,
	692, 693, 665, 208, 209, 210, 211, 0, 0, 212,
	213, 214, 684, 215, 0, 216, 217, 218, 273, 721,
	0, 0, 219, 0, 0, 0, 0, 220, 221, 222,
	223, 0, 0, 670, 659, 660, 657, 658, 649, 0,
	0, 0, 1305, 1306, 0, 0, 0, 0, 1307, 90,
	91, 1308, 92, 0, 0, 0, 648, 686, 652, 0,
	0, 0, 93, 94, 95, 0, 701, 227, 702, 96,
	703, 704, 0, 97, 231, 232, 98, 655, 685, 705,
	706, 235, 0, 99, 697, 0, 678, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	2089, 0, 679, 681, 0, 680, 682, 109, 110, 278,
	111, 707, 112, 708, 709, 0, 113, 0, 114, 0,
	0, 0, 700, 116, 0, 117, 0, 0, 0, 643,
	118, 119, 687, 688, 666, 0, 0, 120, 121, 710,
	0, 122, 0, 123, 0, 0, 311, 0, 124, 698,
	0, 245, 0, 125, 126, 127, 128, 694, 696, 0,
	0, 132, 0, 129, 0, 312, 130, 711, 131, 712,
	713, 714, 0, 677, 0, 0, 133, 315, 134, 135,
	0, 137, 136, 0, 699, 316, 138, 0, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 638, 0, 667, 695, 150,
	715, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 689, 157, 158, 159, 160,
	0, 690, 161, 260, 162, 0, 163, 164, 165, 716,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 644,
	182, 0, 185, 186, 187, 188, 0, 263, 189, 190,
	683, 191, 183, 192, 0, 193, 717, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 718, 198, 691, 0,
	201, 0, 202, 203, 204, 205, 206, 0, 268, 719,
	720, 0, 0, 207, 692, 693, 665, 208, 209, 2088,
	211, 0, 0, 212, 213, 214, 684, 215, 0, 216,
	217, 218, 273, 721, 0, 0, 219, 0, 0, 0,
	0, 220, 221, 222, 223, 0, 0, 670, 659, 660,
	657, 658, 649, 0, 0, 0, 635, 636, 0, 0,
	0, 0, 637, 90, 91, 645, 92, 0, 0, 0,
	648, 686, 652, 0, 0, 0, 93, 94, 95, 225,
	701, 227, 702, 96, 703, 704, 0, 97, 231, 232,
	98, 0, 685, 705, 706, 235, 0, 99, 697, 0,
	678, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 310, 107, 108, 0, 679, 681, 0, 680,
	682, 109, 110, 278, 111, 707, 112, 708, 709, 0,
	113, 0, 114, 0, 0, 0, 700, 116, 0, 117,
	0, 0, 0, 240, 118, 119, 687, 688, 666, 0,
	0, 120, 121, 710, 0, 122, 0, 123, 0, 0,
	311, 0, 124, 698, 0, 245, 0, 125, 126, 127,
	128, 694, 696, 313, 0, 132, 0, 129, 0, 312,
	130, 711, 131, 712, 713, 714, 0, 677, 0, 314,
	133, 315, 134, 135, 0, 137, 136, 0, 699, 316,
	138, 317, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 254, 144, 318, 146, 147, 149, 148, 0,
	0, 667, 695, 150, 715, 151, 152, 0, 153, 0,
	0, 154, 0, 0, 155, 257, 319, 156, 320, 689,
	157, 158, 159, 160, 0, 690, 161, 260, 162, 0,
	163, 164, 165, 716, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	321, 180, 181, 1309, 182, 0, 185, 186, 187, 188,
	0, 263, 189, 190, 683, 191, 183, 192, 322, 193,
	717, 265, 194, 0, 200, 195, 196, 184, 197, 199,
	718, 198, 691, 0, 201, 0, 202, 203, 204, 205,
	206, 0, 268, 719, 720, 0, 0, 207, 692, 693,
	665, 208, 209, 210, 211, 670, 0, 212, 213, 214,
	684, 215, 0, 216, 217, 218, 273, 721, 0, 0,
	219, 90, 91, 0, 92, 220, 221, 222, 223, 686,
	0, 0, 0, 0, 93, 94, 95, 225, 226, 227,
	228, 96, 229, 230, 0, 97, 231, 232, 98, 1308,
	685, 233, 234, 235, 648, 99, 697, 0, 678, 0,
	100, 101, 102, 0, 103, 0, 104, 105, 106, 0,
	310, 107, 108, 0, 679, 681, 0, 680, 682, 109,
	110, 278, 111, 237, 112, 238, 239, 0, 113, 0,
	114, 0, 0, 0, 115, 116, 0, 117, 0, 0,
	0, 240, 118, 119, 687, 688, 0, 0, 0, 120,
	121, 243, 0, 122, 0, 123, 0, 0, 311, 0,
	124, 698, 0, 245, 0, 125, 126, 127, 128, 694,
	696, 313, 0, 132, 0, 129, 0, 312, 130, 248,
	131, 249, 250, 251, 0, 252, 0, 314, 133, 315,
	134, 135, 0, 137, 136, 0, 699, 316, 138, 317,
	0, 139, 0, 0, 140, 0, 141, 142, 143, 145,
	254, 144, 318, 146, 147, 149, 148, 0, 0, 0,
	695, 150, 256, 151, 152, 0, 153, 0, 0, 154,
	0, 0, 155, 257, 319, 156, 320, 689, 157, 158,
	159, 160, 0, 690, 161, 260, 162, 0, 163, 164,
	165, 261, 166, 167, 0, 168, 169, 170, 171, 172,
	174, 175, 173, 176, 177, 178, 0, 179, 321, 180,
	181, 262, 182, 0, 185, 186, 187, 188, 0, 263,
	189, 190, 683, 191, 183, 192, 322, 193, 264, 265,
	194, 0, 200, 195, 196, 184, 197, 199, 266, 198,
	691, 0, 201, 0, 202, 203, 204, 205, 206, 0,
	268, 269, 270, 0, 0, 207, 692, 693, 0, 208,
	209, 210, 211, 543, 0, 212, 213, 214, 684, 215,
	0, 216, 217, 218, 273, 274, 0, 0, 219, 90,
	91, 0, 92, 220, 221, 222, 223, 224, 0, 0,
	0, 0, 93, 94, 95, 225, 226, 227, 228, 96,
	229, 230, 0, 97, 231, 232, 98, 1578, 0, 233,
	234, 235, 0, 99, 236, 0, 309, 0, 100, 101,
	102, 0, 103, 0, 104, 105, 106, 0, 310, 107,
	108, 0, 0, 0, 0, 0, 0, 109, 110, 278,
	111, 237, 112, 238, 239, 0, 113, 0, 114, 0,
	0, 0, 115, 116, 0, 117, 0, 0, 0, 240,
	118, 119, 241, 242, 0, 0, 0, 120, 121, 243,
	0, 122, 0, 123, 0, 0, 311, 0, 124, 244,
	0, 245, 0, 125, 126, 127, 128, 246, 247, 313,
	0, 132, 0, 129, 0, 312, 130, 248, 131, 249,
	250, 251, 0, 252, 0, 314, 133, 315, 134, 135,
	0, 137, 136, 0, 253, 316, 138, 317, 0, 139,
	0, 0, 140, 0, 141, 142, 143, 145, 254, 144,
	318, 146, 147, 149, 148, 0, 0, 0, 255, 150,
	256, 151, 152, 0, 153, 0, 0, 154, 0, 0,
	155, 257, 319, 156, 320, 258, 157, 158, 159, 160,
	0, 259, 161, 260, 162, 0, 163, 164, 165, 261,
	166, 167, 0, 168, 169, 170, 171, 172, 174, 175,
	173, 176, 177, 178, 0, 179, 321, 180, 181, 262,
	182, 0, 185, 186, 187, 188, 71, 263, 189, 190,
	0, 191, 183, 192, 322, 193, 264, 265, 194, 0,
	200, 195, 196, 184, 197, 199, 266, 198, 267, 0,
	201, 73, 202, 203, 204, 205, 206, 0, 268, 269,
	270, 0, 0, 207, 271, 272, 0, 208, 209, 210,
	211, 0, 0, 212, 213, 214, 0, 215, 0, 216,
	217, 218, 547, 274, 0, 0, 219, 0, 0, 0,
	69, 220, 221, 222, 223, 0, 70, 543, 761, 0,
	871, 868, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 90, 91, 68, 92, 0, 0, 0,
	0, 224, 0, 0, 0, 0, 93, 94, 95, 225,
	226, 227, 228, 96, 229, 230, 0, 97, 231, 232,
	98, 0, 0, 233, 234, 235, 0, 99, 236, 0,
	309, 0, 100, 101, 102, 0, 103, 0, 104, 105,
	106, 0, 310, 107, 108, 0, 0, 0, 0, 0,
	0, 109, 110, 278, 111, 237, 112, 238, 239, 874,
	113, 0, 114, 0, 0, 0, 115, 116, 0, 117,
	0, 0, 0, 240, 118, 119, 241, 242, 865, 0,
	0, 120, 121, 243, 0, 122, 0, 123, 0, 0,
	311, 0, 124, 244, 0, 245, 0, 125, 126, 127,
	128, 246, 247, 313, 0, 132, 0, 129, 0, 312,
	130, 248, 131, 249, 250, 251, 0, 252, 0, 314,
	133, 315, 134, 135, 0, 137, 136, 0, 253, 316,
	138, 317, 0, 139, 0, 0, 140, 0, 141, 142,
	143, 145, 254, 144, 318, 146, 147, 149, 148, 0,
	0, 0, 255, 150, 256, 151, 152, 0, 153, 866,
	0, 154, 0, 0, 155, 257, 319, 156, 320, 258,
	157, 158, 159, 160, 0, 259, 161, 260, 162, 0,
	163, 164, 165, 261, 166, 167, 0, 168, 169, 170,
	171, 172, 174, 175, 173, 176, 177, 178, 0, 179,
	321, 180, 181, 262, 182, 0, 185, 186, 187, 188,
	0, 263, 189, 190, 0, 191, 183, 192, 322, 193,
	264, 265, 194, 0, 200, 195, 196, 184, 197, 199,
	266, 198, 267, 0, 201, 0, 202, 203, 204, 205,
	206, 0, 268, 269, 270, 0, 0, 207, 271, 272,
	864, 208, 209, 210, 211, 0, 0, 212, 213, 214,
	0, 215, 0, 216, 217, 218, 273, 274, 543, 761,
	219, 871, 868, 863, 0, 220, 221, 222, 223, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	872, 869, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 309, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 310, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	859, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 865,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 311, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 313, 0, 132, 0, 129, 0,
	312, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	314, 133, 315, 134, 135, 0, 137, 136, 0, 253,
	316, 138, 317, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	866, 0, 154, 0, 0, 155, 257, 319, 156, 320,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 321, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 322,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 864, 208, 209, 210, 211, 0, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 543,
	761, 219, 871, 868, 863, 0, 220, 221, 222, 223,
	0, 0, 0, 0, 0, 90, 91, 0, 92, 0,
	0, 872, 869, 224, 0, 0, 0, 0, 93, 94,
	95, 225, 226, 227, 228, 96, 229, 230, 0, 97,
	231, 232, 98, 0, 0, 233, 234, 235, 0, 99,
	236, 0, 309, 0, 100, 101, 102, 0, 103, 0,
	104, 105, 106, 0, 310, 107, 108, 0, 0, 0,
	0, 0, 0, 109, 110, 278, 111, 237, 112, 238,
	239, 0, 113, 0, 114, 0, 0, 0, 115, 116,
	0, 117, 0, 0, 0, 240, 118, 119, 241, 242,
	865, 0, 0, 120, 121, 243, 0, 122, 0, 123,
	0, 0, 311, 0, 124, 244, 0, 245, 0, 125,
	126, 127, 128, 246, 247, 313, 0, 132, 0, 129,
	0, 312, 130, 248, 131, 249, 250, 251, 0, 252,
	0, 314, 133, 315, 134, 135, 0, 137, 136, 0,
	253, 316, 138, 317, 0, 139, 0, 0, 140, 0,
	141, 142, 143, 145, 254, 144, 318, 146, 147, 149,
	148, 0, 0, 0, 255, 150, 256, 151, 152, 0,
	153, 866, 0, 154, 0, 0, 155, 257, 319, 156,
	320, 258, 157, 158, 159, 160, 0, 259, 161, 260,
	162, 0, 163, 164, 165, 261, 166, 167, 0, 168,
	169, 170, 171, 172, 174, 175, 173, 176, 177, 178,
	0, 179, 321, 180, 181, 262, 182, 0, 185, 186,
	187, 188, 0, 263, 189, 190, 0, 191, 183, 192,
	322, 193, 264, 265, 194, 0, 200, 195, 196, 184,
	197, 199, 266, 198, 267, 0, 201, 0, 202, 203,
	204, 205, 206, 0, 268, 269, 270, 0, 0, 207,
	271, 272, 864, 208, 209, 210, 211, 0, 0, 212,
	213, 214, 0, 215, 0, 216, 217, 218, 273, 274,
	87, 0, 219, 0, 0, 0, 0, 220, 221, 222,
	223, 0, 0, 0, 0, 0, 90, 91, 0, 92,
	0, 0, 872, 869, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 497, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 71, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 73, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 0, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 547,
	274, 0, 0, 219, 87, 0, 0, 69, 220, 221,
	222, 223, 0, 70, 0, 0, 0, 0, 0, 0,
	90, 91, 0, 92, 0, 0, 0, 0, 224, 0,
	1186, 0, 1191, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 71, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 73, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 0, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 547, 274, 0, 0, 219, 87, 0,
	0, 69, 220, 221, 222, 223, 0, 70, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 0, 224, 0, 0, 0, 68, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 497, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 0, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 87, 0, 0, 0, 220, 221, 222, 223,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 91,
	0, 92, 0, 0, 0, 0, 224, 0, 1186, 0,
	1191, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 246, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 769, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 1097, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	1700, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 0, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	0, 0, 0, 0, 220, 221, 222, 223, 670, 659,
	660, 657, 658, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 732, 0,
	0, 0, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 701, 227, 702, 96, 703, 704, 0, 97, 231,
	232, 98, 0, 0, 705, 706, 235, 0, 99, 236,
	0, 309, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 310, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 707, 112, 708, 709,
	0, 113, 0, 114, 0, 0, 0, 700, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 666,
	0, 0, 120, 121, 710, 0, 122, 0, 123, 0,
	0, 311, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 313, 0, 132, 0, 129, 0,
	312, 130, 711, 131, 712, 713, 714, 0, 677, 0,
	314, 133, 315, 134, 135, 0, 137, 136, 0, 253,
	316, 138, 317, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	0, 0, 667, 255, 150, 715, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 319, 156, 320,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 716, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 321, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 322,
	193, 717, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 718, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 719, 720, 0, 0, 207, 271,
	272, 665, 208, 209, 210, 211, 543, 761, 212, 213,
	214, 759, 215, 0, 216, 217, 218, 273, 721, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 309,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 310, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 311,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 313, 0, 132, 0, 129, 0, 312, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 314, 133,
	315, 134, 135, 0, 137, 136, 0, 253, 316, 138,
	317, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 318, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 319, 156, 320, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 321,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 322, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	83, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 82, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 0, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 543, 761,
	0, 0, 220, 221, 222, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 86,
	0, 0, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 309, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 310, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 311, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 313, 0, 132, 0, 129, 0,
	312, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	314, 133, 315, 134, 135, 0, 137, 136, 0, 253,
	316, 138, 317, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 319, 156, 320,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 321, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 322,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 0, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 543, 219,
	0, 0, 0, 0, 220, 221, 222, 223, 0, 0,
	0, 0, 0, 0, 90, 91, 0, 92, 0, 0,
	0, 86, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 309, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 310, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 311, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 313, 0, 132, 0, 129, 0,
	312, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	314, 133, 315, 134, 135, 0, 137, 136, 0, 253,
	316, 138, 317, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 318, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 319, 156, 320,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 321, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 322,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 1054, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 1052, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 1162, 0,
	120, 121, 243, 0, 122, 0, 123, 1057, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 1160, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 1056, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 1161, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 1054, 99, 236, 0, 0, 1049, 100,
	101, 102, 0, 103, 1052, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 1057, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 1048, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 1056, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 1055, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 1667, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 246, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 497, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 794, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 497, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 555, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 509, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 497, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 502, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 497, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 408, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 407, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	1355, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 1353, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 1342, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 915, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 422, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 779, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 0, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 610, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 605, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 561, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 246, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 434, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 433, 269, 270, 0, 0,
	429, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 246, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 434, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 433, 269, 270, 0, 0, 429, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	539, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 166, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 99, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 536, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	139, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	144, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	262, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	190, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 268,
	269, 270, 0, 0, 207, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 533, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 159, 160, 0,
	259, 161, 260, 162, 0, 163, 164, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 182,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	87, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 90, 91, 0, 92,
	220, 221, 222, 223, 224, 0, 0, 0, 0, 93,
	94, 95, 225, 226, 227, 228, 96, 229, 230, 0,
	97, 231, 232, 98, 0, 0, 233, 234, 235, 0,
	99, 236, 0, 0, 0, 100, 101, 102, 0, 103,
	0, 104, 105, 106, 0, 0, 107, 108, 0, 0,
	0, 0, 0, 0, 109, 110, 278, 111, 237, 112,
	238, 239, 0, 113, 0, 114, 0, 0, 0, 115,
	116, 0, 117, 0, 0, 0, 240, 118, 119, 241,
	242, 0, 0, 0, 120, 121, 243, 0, 122, 0,
	123, 0, 0, 0, 0, 124, 244, 0, 245, 0,
	125, 126, 127, 128, 531, 247, 0, 0, 132, 0,
	129, 0, 0, 130, 248, 131, 249, 250, 251, 0,
	252, 0, 0, 133, 0, 134, 135, 0, 137, 136,
	0, 253, 0, 138, 0, 0, 139, 0, 0, 140,
	0, 141, 142, 143, 145, 254, 144, 0, 146, 147,
	149, 148, 0, 0, 0, 255, 150, 256, 151, 152,
	0, 153, 0, 0, 154, 0, 0, 155, 257, 0,
	156, 0, 258, 157, 158, 159, 160, 0, 259, 161,
	260, 162, 0, 163, 164, 165, 261, 166, 167, 0,
	168, 169, 170, 171, 172, 174, 175, 173, 176, 177,
	178, 0, 179, 0, 180, 181, 262, 182, 0, 185,
	186, 187, 188, 0, 263, 189, 190, 0, 191, 183,
	192, 0, 193, 264, 265, 194, 0, 200, 195, 196,
	184, 197, 199, 266, 198, 267, 0, 201, 0, 202,
	203, 204, 205, 206, 0, 268, 269, 270, 0, 0,
	207, 271, 272, 0, 208, 209, 210, 211, 87, 0,
	212, 213, 214, 0, 215, 0, 216, 217, 218, 273,
	274, 0, 0, 219, 90, 91, 0, 92, 220, 221,
	222, 223, 224, 0, 0, 0, 0, 93, 94, 95,
	225, 226, 227, 228, 96, 229, 230, 0, 97, 231,
	232, 98, 0, 0, 233, 234, 235, 0, 99, 236,
	0, 0, 0, 100, 101, 102, 0, 103, 0, 104,
	105, 106, 0, 0, 107, 108, 0, 0, 0, 0,
	0, 0, 109, 110, 278, 111, 237, 112, 238, 239,
	0, 113, 0, 114, 0, 0, 0, 115, 116, 0,
	117, 0, 0, 0, 240, 118, 119, 241, 242, 0,
	0, 0, 120, 121, 243, 0, 122, 0, 123, 0,
	0, 0, 0, 124, 244, 0, 245, 0, 125, 126,
	127, 128, 505, 247, 0, 0, 132, 0, 129, 0,
	0, 130, 248, 131, 249, 250, 251, 0, 252, 0,
	0, 133, 0, 134, 135, 0, 137, 136, 0, 253,
	0, 138, 0, 0, 139, 0, 0, 140, 0, 141,
	142, 143, 145, 254, 144, 0, 146, 147, 149, 148,
	0, 0, 0, 255, 150, 256, 151, 152, 0, 153,
	0, 0, 154, 0, 0, 155, 257, 0, 156, 0,
	258, 157, 158, 159, 160, 0, 259, 161, 260, 162,
	0, 163, 164, 165, 261, 166, 167, 0, 168, 169,
	170, 171, 172, 174, 175, 173, 176, 177, 178, 0,
	179, 0, 180, 181, 262, 182, 0, 185, 186, 187,
	188, 0, 263, 189, 190, 0, 191, 183, 192, 0,
	193, 264, 265, 194, 0, 200, 195, 196, 184, 197,
	199, 266, 198, 267, 0, 201, 0, 202, 203, 204,
	205, 206, 0, 268, 269, 270, 0, 0, 207, 271,
	272, 0, 208, 209, 210, 211, 87, 0, 212, 213,
	214, 0, 215, 0, 216, 217, 218, 273, 274, 0,
	0, 219, 90, 91, 0, 92, 220, 221, 222, 223,
	224, 0, 0, 0, 0, 93, 94, 95, 225, 226,
	227, 228, 96, 229, 230, 0, 97, 231, 232, 98,
	0, 0, 233, 234, 235, 0, 99, 236, 0, 0,
	0, 100, 101, 102, 0, 103, 0, 104, 105, 106,
	0, 0, 107, 108, 0, 0, 0, 0, 0, 0,
	109, 110, 278, 111, 237, 112, 238, 239, 0, 113,
	0, 114, 0, 0, 0, 115, 116, 0, 117, 0,
	0, 0, 240, 118, 119, 241, 242, 0, 0, 0,
	120, 121, 243, 0, 122, 0, 123, 0, 0, 0,
	0, 124, 244, 0, 245, 0, 125, 126, 127, 128,
	246, 247, 0, 0, 132, 0, 129, 0, 0, 130,
	248, 131, 249, 250, 251, 0, 252, 0, 0, 133,
	0, 134, 135, 0, 137, 136, 0, 253, 0, 138,
	0, 0, 139, 0, 0, 140, 0, 141, 142, 143,
	145, 254, 144, 0, 146, 147, 149, 148, 0, 0,
	0, 255, 150, 256, 151, 152, 0, 153, 0, 0,
	154, 0, 0, 155, 257, 0, 156, 0, 258, 157,
	158, 159, 160, 0, 259, 161, 260, 162, 0, 163,
	164, 165, 261, 486, 167, 0, 168, 169, 170, 171,
	172, 174, 175, 173, 176, 177, 178, 0, 179, 0,
	180, 181, 262, 182, 0, 185, 186, 187, 188, 0,
	263, 189, 190, 0, 191, 183, 192, 0, 193, 264,
	265, 194, 0, 200, 195, 196, 184, 197, 199, 266,
	198, 267, 0, 201, 0, 202, 203, 204, 205, 206,
	0, 268, 269, 270, 0, 0, 207, 271, 272, 0,
	208, 209, 210, 211, 87, 0, 212, 213, 214, 0,
	215, 0, 216, 217, 218, 273, 274, 0, 0, 219,
	90, 91, 0, 92, 220, 221, 222, 223, 224, 0,
	0, 0, 0, 93, 94, 95, 225, 226, 227, 228,
	96, 229, 230, 0, 97, 231, 232, 98, 0, 0,
	233, 234, 235, 0, 427, 236, 0, 0, 0, 100,
	101, 102, 0, 103, 0, 104, 105, 106, 0, 0,
	107, 108, 0, 0, 0, 0, 0, 0, 109, 110,
	278, 111, 237, 112, 238, 239, 0, 113, 0, 114,
	0, 0, 0, 115, 116, 0, 117, 0, 0, 0,
	240, 118, 119, 241, 242, 0, 0, 0, 120, 121,
	243, 0, 122, 0, 123, 0, 0, 0, 0, 124,
	244, 0, 245, 0, 125, 126, 127, 128, 246, 247,
	0, 0, 132, 0, 129, 0, 0, 130, 248, 131,
	249, 250, 251, 0, 252, 0, 0, 133, 0, 134,
	135, 0, 137, 136, 0, 253, 0, 138, 0, 0,
	425, 0, 0, 140, 0, 141, 142, 143, 145, 254,
	434, 0, 146, 147, 149, 148, 0, 0, 0, 255,
	150, 256, 151, 152, 0, 153, 0, 0, 154, 0,
	0, 155, 257, 0, 156, 0, 258, 157, 158, 159,
	160, 0, 259, 161, 260, 162, 0, 163, 164, 165,
	261, 166, 167, 0, 168, 169, 170, 171, 172, 174,
	175, 173, 176, 177, 178, 0, 179, 0, 180, 181,
	428, 182, 0, 185, 186, 187, 188, 0, 263, 189,
	426, 0, 191, 183, 192, 0, 193, 264, 265, 194,
	0, 200, 195, 196, 184, 197, 199, 266, 198, 267,
	0, 201, 0, 202, 203, 204, 205, 206, 0, 433,
	269, 270, 0, 0, 429, 271, 272, 0, 208, 209,
	210, 211, 87, 0, 212, 213, 214, 0, 215, 0,
	216, 217, 218, 273, 274, 0, 0, 219, 90, 91,
	0, 92, 220, 221, 222, 223, 224, 0, 0, 0,
	0, 93, 94, 95, 225, 226, 227, 228, 96, 229,
	230, 0, 97, 231, 232, 98, 0, 0, 233, 234,
	235, 0, 99, 236, 0, 0, 0, 100, 101, 102,
	0, 103, 0, 104, 105, 106, 0, 0, 107, 108,
	0, 0, 0, 0, 0, 0, 109, 110, 278, 111,
	237, 112, 238, 239, 0, 113, 0, 114, 0, 0,
	0, 115, 116, 0, 117, 0, 0, 0, 240, 118,
	119, 241, 242, 0, 0, 0, 120, 121, 243, 0,
	122, 0, 123, 0, 0, 0, 0, 124, 244, 0,
	245, 0, 125, 126, 127, 128, 246, 247, 0, 0,
	132, 0, 129, 0, 0, 130, 248, 131, 249, 250,
	251, 0, 252, 0, 0, 133, 0, 134, 135, 0,
	137, 136, 0, 253, 0, 138, 0, 0, 139, 0,
	0, 140, 0, 141, 142, 143, 145, 254, 144, 0,
	146, 147, 149, 148, 0, 0, 0, 255, 150, 256,
	151, 152, 0, 153, 0, 0, 154, 0, 0, 155,
	257, 0, 156, 0, 258, 157, 158, 0, 160, 0,
	259, 161, 260, 162, 0, 163, 0, 165, 261, 166,
	167, 0, 168, 169, 170, 171, 172, 174, 175, 173,
	176, 177, 178, 0, 179, 0, 180, 181, 262, 0,
	0, 185, 186, 187, 188, 0, 263, 189, 190, 0,
	191, 183, 192, 0, 193, 264, 265, 194, 0, 200,
	195, 196, 184, 197, 199, 266, 198, 267, 0, 201,
	0, 202, 203, 204, 205, 206, 0, 268, 269, 270,
	0, 0, 207, 271, 272, 0, 208, 209, 210, 211,
	0, 0, 212, 213, 214, 0, 215, 0, 216, 217,
	218, 273, 274, 0, 0, 219, 0, 0, 0, 0,
	220, 221, 222, 223, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 0, 0, 0, 0, 0, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 942, 939, 940,
	973, 959, 960, 961, 969, 970, 971, 0, 0, 0,
	0, 0, 0, 0, 962, 0, 0, 0, 0, 0,
	941, 942, 0, 0, 973, 0, 956, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 947, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1512, 1513,
	0, 1530, 1531, 1532, 966, 974, 0, 0, 0, 947,
	0, 0, 0, 0, 1679, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 966, 974,
	0, 0, 964, 0, 0, 0, 0, 0, 957, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	1527, 0, 0, 0, 0, 0, 964, 0, 0, 0,
	0, 0, 957, 963, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 963, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1518,
	0, 0, 0, 0, 0, 0, 958, 0, 0, 939,
	940, 0, 959, 960, 961, 969, 970, 971, 0, 967,
	0, 0, 0, 0, 0, 962, 0, 0, 0, 0,
	958, 0, 942, 0, 1533, 973, 0, 0, 0, 0,
	0, 0, 0, 967, 0, 0, 0, 0, 0, 0,
	0, 0, 1528, 0, 0, 941, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 953, 954, 955, 0, 952, 949, 950,
	951, 943, 944, 945, 946, 948, 0, 968, 0, 0,
	0, 2025, 0, 0, 965, 0, 0, 953, 954, 955,
	947, 952, 949, 950, 951, 943, 944, 945, 946, 948,
	1529, 968, 0, 0, 0, 1970, 0, 0, 0, 966,
	974, 0, 939, 940, 0, 959, 960, 961, 969, 970,
	971, 0, 0, 0, 0, 972, 0, 0, 962, 0,
	0, 0, 0, 0, 0, 942, 0, 964, 973, 0,
	0, 0, 0, 957, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 941, 0,
	0, 0, 0, 0, 956, 0, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 1524, 1525, 1526,
	0, 1523, 1520, 1521, 1522, 1514, 1515, 1516, 1517, 1519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 0, 947, 0, 939, 940, 0, 959, 960,
	961, 969, 970, 971, 967, 0, 0, 0, 0, 0,
	0, 962, 966, 974, 0, 0, 0, 0, 942, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 972, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	964, 941, 0, 0, 0, 0, 957, 956, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 953, 954,
	955, 963, 952, 949, 950, 951, 943, 944, 945, 946,
	948, 0, 968, 0, 0, 0, 1965, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 947, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 966, 974, 0, 939, 940,
	0, 959, 960, 961, 969, 970, 971, 967, 0, 0,
	0, 972, 0, 0, 962, 0, 0, 0, 0, 0,
	0, 942, 0, 964, 973, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 0, 0,
	956, 0, 0, 0, 963, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 965, 0,
	0, 953, 954, 955, 0, 952, 949, 950, 951, 943,
	944, 945, 946, 948, 0, 968, 0, 0, 0, 1961,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 947,
	0, 939, 940, 0, 959, 960, 961, 969, 970, 971,
	967, 0, 0, 0, 0, 0, 0, 962, 966, 974,
	0, 0, 0, 0, 942, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 941, 0, 0,
	0, 0, 957, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 953, 954, 955, 963, 952, 949,
	950, 951, 943, 944, 945, 946, 948, 0, 968, 0,
	0, 0, 1901, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 966, 974, 0, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 967, 0, 0, 0, 972, 0, 0,
	962, 0, 0, 0, 0, 0, 0, 942, 0, 964,
	973, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 965, 0, 0, 953, 954, 955,
	0, 952, 949, 950, 951, 943, 944, 945, 946, 948,
	0, 968, 0, 0, 0, 1879, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 947, 0, 939, 940, 0,
	959, 960, 961, 969, 970, 971, 967, 0, 0, 0,
	0, 0, 0, 962, 966, 974, 0, 0, 0, 0,
	942, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 941, 0, 0, 0, 0, 957, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	953, 954, 955, 963, 952, 949, 950, 951, 943, 944,
	945, 946, 948, 0, 968, 0, 0, 0, 1878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 966, 974, 0,
	939, 940, 0, 959, 960, 961, 969, 970, 971, 967,
	0, 0, 0, 972, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 942, 0, 964, 973, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 963, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	965, 0, 0, 953, 954, 955, 0, 952, 949, 950,
	951, 943, 944, 945, 946, 948, 0, 968, 0, 0,
	0, 1769, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 947, 0, 939, 940, 0, 959, 960, 961, 969,
	970, 971, 967, 0, 0, 0, 0, 0, 0, 962,
	966, 974, 0, 0, 0, 0, 942, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 941,
	0, 0, 0, 0, 957, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 953, 954, 955, 963,
	952, 949, 950, 951, 943, 944, 945, 946, 948, 0,
	968, 0, 0, 0, 1703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 958, 966, 974, 0, 939, 940, 0, 959,
	960, 961, 969, 970, 971, 967, 0, 0, 0, 972,
	0, 0, 962, 0, 0, 0, 0, 0, 0, 942,
	0, 964, 973, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 941, 0, 0, 0, 0, 0, 956, 0,
	0, 0, 963, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 953,
	954, 955, 0, 952, 949, 950, 951, 943, 944, 945,
	946, 948, 0, 968, 0, 0, 0, 1687, 1512, 1513,
	0, 1530, 1531, 1532, 0, 958, 0, 947, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 966, 974, 0, 939,
	940, 0, 959, 960, 961, 969, 970, 971, 0, 0,
	0, 0, 972, 0, 0, 962, 0, 0, 0, 0,
	1527, 0, 942, 0, 964, 973, 0, 0, 0, 0,
	957, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 941, 0, 0, 0, 965,
	0, 956, 953, 954, 955, 963, 952, 949, 950, 951,
	943, 944, 945, 946, 948, 0, 968, 0, 0, 1518,
	1263, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1534,
	0, 0, 0, 0, 0, 0, 0, 0, 958, 0,
	947, 2110, 939, 940, 1533, 959, 960, 961, 969, 970,
	971, 967, 0, 0, 0, 0, 0, 0, 962, 966,
	974, 0, 1528, 0, 0, 942, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 941, 0,
	0, 0, 0, 957, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 965, 0, 0, 953, 954, 955, 963, 952,
	949, 950, 951, 943, 944, 945, 946, 948, 0, 968,
	1529, 1479, 2109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 0, 1544, 0, 0, 1543, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 966, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 972, 939,
	940, 0, 959, 960, 961, 969, 970, 971, 0, 0,
	964, 0, 0, 0, 0, 962, 957, 0, 0, 0,
	1178, 0, 942, 0, 0, 973, 0, 1524, 1525, 1526,
	0, 1523, 1520, 1521, 1522, 1514, 1515, 1516, 1517, 1519,
	0, 963, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 965, 0, 0, 953, 954,
	955, 0, 952, 949, 950, 951, 943, 944, 945, 946,
	948, 0, 968, 0, 0, 0, 0, 0, 0, 1179,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 977, 967, 0, 0,
	947, 0, 939, 940, 0, 959, 960, 961, 969, 970,
	971, 0, 0, 0, 0, 0, 0, 0, 962, 966,
	974, 0, 976, 0, 0, 942, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 941, 0,
	0, 0, 0, 957, 956, 0, 0, 0, 965, 0,
	0, 953, 954, 955, 0, 952, 949, 950, 951, 943,
	944, 945, 946, 948, 0, 968, 0, 0, 963, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 966, 974, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 967, 0, 0, 0, 972, 939,
	940, 0, 959, 960, 961, 969, 970, 971, 0, 0,
	964, 0, 0, 0, 0, 962, 957, 0, 0, 0,
	0, 0, 942, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 963, 0, 0, 0, 941, 0, 0, 0, 0,
	0, 956, 0, 0, 0, 965, 0, 0, 953, 954,
	955, 0, 952, 949, 950, 951, 943, 944, 945, 946,
	948, 0, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 967, 0, 0,
	947, 0, 939, 940, 0, 959, 960, 961, 969, 970,
	971, 0, 0, 0, 0, 0, 0, 0, 962, 966,
	974, 0, 0, 0, 0, 942, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 964, 941, 0,
	0, 0, 0, 957, 956, 0, 0, 0, 965, 0,
	0, 953, 954, 955, 0, 952, 949, 950, 951, 943,
	944, 945, 946, 948, 0, 968, 0, 0, 963, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 947, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 958, 966, 974, 0, 939, 940, 0, 959, 960,
	961, 969, 970, 971, 967, 0, 0, 0, 972, 0,
	0, 962, 0, 0, 0, 0, 0, 0, 942, 0,
	964, 973, 0, 0, 0, 0, 957, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 941, 0, 0, 0, 0, 0, 956, 0, 0,
	0, 963, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 965, 0, 0, 953, 954,
	955, 0, 952, 949, 950, 951, 943, 944, 945, 946,
	948, 0, 968, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 958, 0, 947, 0, 0, 0,
	0, 1550, 0, 0, 0, 0, 0, 967, 0, 0,
	0, 0, 0, 0, 0, 966, 974, 0, 939, 940,
	0, 959, 960, 961, 969, 970, 971, 0, 0, 0,
	1691, 972, 0, 0, 962, 0, 0, 0, 1545, 0,
	0, 942, 0, 964, 973, 0, 0, 0, 0, 957,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 941, 0, 0, 0, 965, 0,
	956, 953, 954, 955, 963, 952, 949, 950, 951, 943,
	944, 945, 946, 948, 0, 968, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 958, 0, 947,
	0, 939, 940, 0, 959, 960, 961, 969, 970, 971,
	967, 0, 0, 0, 0, 0, 0, 962, 966, 974,
	0, 0, 0, 0, 942, 0, 0, 973, 0, 0,
	0, 0, 0, 0, 972, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 964, 941, 0, 0,
	0, 0, 957, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 965, 0, 0, 953, 954, 955, 963, 952, 949,
	950, 951, 943, 944, 945, 946, 948, 0, 968, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 947, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	958, 966, 974, 0, 939, 940, 0, 959, 960, 961,
	969, 970, 971, 967, 0, 0, 0, 972, 0, 0,
	962, 0, 0, 0, 1503, 0, 0, 942, 0, 964,
	973, 0, 0, 0, 0, 957, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	941, 0, 0, 0, 0, 0, 956, 0, 0, 0,
	963, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1510, 0, 965, 0, 0, 953, 954, 955,
	0, 952, 949, 950, 951, 943, 944, 945, 946, 948,
	0, 968, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 958, 0, 947, 0, 939, 940, 0,
	959, 960, 961, 969, 970, 971, 967, 0, 0, 0,
	0, 0, 0, 962, 966, 974, 0, 0, 0, 0,
	942, 0, 0, 973, 0, 0, 0, 0, 0, 0,
	972, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 964, 941, 0, 0, 0, 0, 957, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 965, 0, 0,
	953, 954, 955, 963, 952, 949, 950, 951, 943, 944,
	945, 946, 948, 0, 968, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 947, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 958, 966, 974, 0,
	939, 940, 0, 959, 960, 961, 969, 970, 971, 967,
	0, 0, 0, 972, 0, 0, 962, 0, 0, 0,
	0, 0, 0, 942, 0, 964, 973, 0, 0, 0,
	0, 957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 941, 0, 0, 0,
	0, 0, 956, 0, 0, 0, 963, 0, 0, 0,
	0, 1512, 1513, 0, 1530, 1531, 1532, 0, 0, 0,
	965, 0, 0, 953, 954, 955, 0, 952, 949, 950,
	951, 943, 944, 945, 946, 948, 0, 968, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 958,
	0, 947, 0, 939, 940, 0, 959, 960, 961, 969,
	970, 971, 967, 1527, 0, 0, 0, 0, 0, 0,
	966, 974, 0, 0, 0, 0, 942, 0, 0, 973,
	0, 0, 0, 0, 0, 0, 972, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 964, 941,
	0, 0, 0, 0, 957, 956, 0, 0, 0, 0,
	0, 0, 1518, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 965, 0, 0, 953, 954, 955, 0,
	952, 949, 950, 951, 943, 944, 945, 946, 948, 0,
	968, 0, 0, 0, 0, 0, 0, 1533, 0, 0,
	0, 0, 0, 0, 947, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1528, 0, 0, 0, 0,
	0, 0, 958, 966, 974, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 967, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 964, 0, 0, 0, 0, 0, 957, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 820, 812, 837, 805, 828, 827, 0,
	0, 807, 806, 1529, 0, 0, 839, 838, 0, 0,
	0, 0, 0, 0, 0, 0, 965, 0, 0, 953,
	954, 955, 0, 952, 949, 950, 951, 943, 944, 945,
	946, 948, 0, 968, 0, 0, 0, 0, 833, 0,
	825, 824, 0, 0, 0, 958, 0, 0, 0, 823,
	0, 0, 0, 0, 0, 0, 0, 0, 967, 0,
	0, 0, 0, 0, 0, 0, 822, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1524, 1525, 1526, 0, 1523, 1520, 1521, 1522, 1514, 1515,
	1516, 1517, 1519, 0, 815, 814, 816, 817, 818, 0,
	836, 0, 0, 0, 820, 812, 837, 805, 828, 827,
	0, 0, 807, 806, 0, 0, 0, 839, 838, 965,
	0, 0, 953, 954, 955, 809, 952, 949, 950, 951,
	943, 944, 945, 946, 948, 0, 968, 826, 0, 0,
	0, 813, 0, 0, 0, 0, 0, 0, 0, 833,
	0, 825, 824, 0, 0, 0, 0, 0, 0, 0,
	823, 0, 0, 0, 0, 0, 821, 0, 0, 0,
	1197, 1195, 1196, 1199, 1198, 0, 0, 822, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 810, 0, 0, 0, 0, 0,
	0, 0, 0, 819, 811, 815, 814, 816, 817, 818,
	0, 836, 0, 841, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 808, 0, 0, 834, 835, 0, 0,
	0, 0, 0, 0, 0, 0, 809, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 826, 0,
	840, 0, 813, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 821, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 810, 0, 0, 0, 0,
	0, 0, 0, 0, 819, 811, 0, 0, 0, 0,
	0, 0, 0, 0, 841, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 808, 0, 0, 834, 835, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 840,
}
var sqlPact = [...]int{

	196, -1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 787, 16400, 16400, 20044, -1000, -1000, -1000, -1000, -1000,
	-1000, 971, 743, 2522, 5606, 20044, 20044, 19766, 1056, 1056,
	21434, -1000, -1000, 24770, -1000, 2863, 531, 532, 531, 531,
	530, 21434, 20044, 643, 706, 179, -1000, 904, -2, 24492,
	20044, 1481, 2, 18376, 362, 196, 19488, 24214, 20044, 19210,
	617, -5, 16972, 20044, -1000, 22, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1321, 357, 22, -1000, 1318,
	1215, 1206, 18376, 23936, 23658, 23380, 23102, -1000, 12649, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 791, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 372, 371, -1000, 18932, -1000, 1024,
	-1000, -3, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1022, -1000, 20044, -1000, -1000, 22824, 22546, 698, 370, 1005,
	-1000, -1000, 726, 457, 1509, -1000, 56, -1000, -1000, 691,
	-1000, 1317, -1000, 1020, 1316, 1313, 1312, 1311, 1310, 1309,
	455, 918, 536, -1000, 1308, 1005, -1000, 1005, -1000, -1000,
	-1000, 616, 21434, -1000, -1000, 18376, -1000, 22268, 20044, 20044,
	1240, 21990, -1000, 904, -1000, -1000, -1000, 1057, 1478, 1478,
	1478, 1543, 182, 180, 179, -28, 20044, -1000, 365, -28,
	9658, 9658, -1000, -1000, 362, -1000, 414, 15542, -1000, 8722,
	-1000, 962, 1394, 498, 895, 1393, -166, 879, 876, 1390,
	16122, 16972, -5, -7, -1000, -1000, -1000, 5304, 16122, 672,
	14708, 22, -1000, -1000, -1000, 18376, 20044, 20044, 758, 21712,
	-1000, 1388, 106, 1387, -1000, 105, 1384, -1000, 105, 1371,
	62, -1000, -1000, -1000, -1000, -1000, -1000, 362, 18654, 20044,
	1597, 28357, -1000, 10877, -1000, -1000, 16400, 1062, 16400, -1000,
	-1000, 1596, -1000, 20044, 10877, -1000, -9, -18, 1155, 1196,
	13244, 12953, 1485, 987, -1000, -1000, -1000, 52, 5606, 20044,
	20044, 1328, 16400, 20044, 20044, 20044, 20044, 20044, 20044, -1000,
	1145, -1000, -1000, 20044, 20044, 778, -1000, -23, -24, -1000,
	21434, -1000, 114, -1000, 361, 1107, 464, 184, 21156, 464,
	1105, -1000, 1057, -1000, 1033, 1135, 9965, 10877, 179, -1000,
	-1000, 179, 179, 10877, -1000, -1000, 20044, -28, 1594, 20044,
	85, -1000, 27062, -1000, -1000, 10877, 10877, 10877, 10877, 10877,
	960, 400, -1000, 360, 359, 6543, -1000, -1000, 1715, -1000,
	-1000, -1000, 190, -1000, -1000, 10877, 22, -1000, -1000, -1000,
	-1000, 355, 1734, -1000, 507, -1000, -1000, -1000, 461, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1327, 354,
	353, -1000, -1000, -1000, -1000, 347, 346, 345, 344, 343,
	339, 331, 328, 326, 324, 323, 322, 321, 318, 317,
	935, -1000, 488, -1000, -1000, 488, 488, -1000, 308, 308,
	315, -1000, -1000, -1000, -1000, 308, -1000, -1000, -1000, 448,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 316, 85, -1000,
	-1000, -1000, 20044, 55, -1000, 27877, -1000, -42, 813, -1000,
	17820, 1516, 1504, 1503, 18376, 1573, -2, 1307, 1563, -2,
	1303, 615, 20044, 20044, 610, 609, 18376, 444, -1000, -1000,
	-1000, -1000, -1000, 20044, -1000, -1000, -65, -1000, -1000, 1300,
	47, -1000, -1000, 482, 72, 1591, 72, 14986, -1000, 20044,
	20044, -1000, 20044, -1000, -1000, 20044, -1000, 20044, 20044, -1000,
	20044, 144, 17264, 786, 1370, 674, -2, 42, -1000, 1599,
	-1000, -1000, -1000, -1000, 189, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 315, 935, 308, 308, 308, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 448, -1000, -1000, 488, 488, 488,
	-1000, -1000, 41, 27877, 606, -1000, 1299, 527, -1000, 466,
	37, 920, 1195, 982, -1000, -1000, -1000, -1000, -29, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1670,
	-1000, -1000, 1713, -29, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1733, 5606, -1000, -1000, -1000, -1000, 20044,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	20044, 20044, 920, 1195, -1000, -1000, 18376, 17542, 1589, 1359,
	953, -1000, 1583, 20044, 1017, 1102, -1000, 620, 1358, -1000,
	-1000, -1000, -1000, 27877, -1000, 27877, 849, 1224, -1000, 1224,
	-34, -1000, 26959, -1000, 304, 36, 482, 9658, 14414, 28246,
	28357, 20044, 625, 10877, 10877, 10877, 10877, 10877, 10877, 10877,
	10877, 10877, 10877, 10877, 10877, 10877, 10877, 10877, 10877, 10877,
	10877, 10877, 10877, 10877, 10877, 1259, 10877, 598, 10877, 10877,
	10877, 10877, 2003, 910, 277, 1060, 5606, -1000, -1000, 729,
	729, 729, 4172, 4172, 278, 400, -1000, 10877, -1000, 9330,
	180, 26473, -36, -1000, -1000, -1000, 7455, 486, 27877, 22,
	6215, -1000, 1712, 770, 1334, 1283, 302, 177, 171, 10877,
	10877, 11181, 11181, 10877, 11485, 10877, 10877, 6847, 10877, 10877,
	10877, 10877, 10877, 10877, -1000, 294, -1000, -1000, -1000, -1000,
	1708, -1000, -1000, 1706, -1000, 624, 622, 1701, 482, 169,
	8722, -1000, 786, 20044, 20044, 20044, -1000, -1000, 1093, 20878,
	1088, 28357, 20044, -1000, 293, 289, 1180, 1179, 20044, 20044,
	20600, 20322, 20044, 845, -2, -1000, 284, -2, -1000, 283,
	20044, 869, -1000, 20044, 20044, 843, 1254, 1016, -1000, 477,
	16122, 663, 1298, 20044, 818, 10877, 868, -1000, 14120, 495,
	20044, 818, 53, -1000, -1000, -1000, 439, 20044, -1000, -1000,
	-1000, 106, -1000, 105, 105, -1000, -1000, 18376, -1000, -1000,
	-1000, -1000, -1000, -1000, 28357, 397, 290, -1000, 1686, 588,
	-1000, 586, 584, 571, -1000, 279, -1000, 10877, 20044, 20044,
	1195, -1000, -1000, -1000, -1000, 754, -1000, 896, -1000, 13535,
	-1000, -1000, -1000, -1000, -43, -1000, -1000, -1000, -1000, -1000,
	-1000, 167, 32, -38, 28357, -1000, -1000, -1000, -1000, -1000,
	20044, 299, 20044, -2, 20044, -1000, 1727, -2, 20044, 1356,
	1401, 436, 20044, -1000, -1000, -1000, 10877, -1000, -1000, -1000,
	-2, -1000, 1272, -1000, -115, 1220, 1439, -185, 176, 449,
	-1000, 13826, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 454, 781, 781, 513, 513, 513, 513, 612,
	612, 1015, 211, 3031, 3031, 3031, 162, 230, 230, 3031,
	3031, 3031, 4172, 28000, 146, 10877, 10877, 566, 894, 277,
	146, 10877, 1661, 146, 146, 146, -1000, 1577, -1000, -1000,
	-1000, -1000, 1297, 274, 11485, 11485, -1000, -1000, -1000, 6543,
	12093, -1000, -1000, -1000, -1000, -1000, 268, 10877, -1000, 26596,
	-189, 31, -1000, -1000, 10877, -101, -154, -1000, -1000, 688,
	-1000, 10877, -1000, -26, 10877, 10877, 10877, 163, 160, -1000,
	970, 267, 266, 10877, -1000, -1000, 27774, 4066, 159, 1294,
	-145, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 157, 141,
	27651, -145, 130, 26688, -1000, 11485, 11485, 11485, 6543, 265,
	129, 26822, -145, 27548, 9026, 9026, 9026, 128, 27425, 10877,
	-145, 4034, 3706, 3669, 30, 24, 16, 1682, 15, 125,
	453, 452, 123, 1272, -1000, -1000, -1000, -1000, 563, 556,
	1355, -1000, 1084, -1000, 500, -1000, 801, 10877, 12371, 264,
	263, 902, -1000, 1354, 1012, 1353, 1012, -1000, -42, 797,
	-1000, 10877, -1000, 10877, -1000, 554, -1000, -1000, 553, 477,
	1293, 649, -1000, 985, -1000, -1000, 662, -1000, -1000, 7151,
	27877, -1000, 818, 1514, 10, -1000, -1000, -1000, 482, 14986,
	14414, 8722, 9, -1000, -1000, -1000, 786, -1000, 581, 1672,
	121, 1120, 983, 906, 795, 1666, 27877, -43, -43, -1000,
	-1000, -1000, -1000, -1000, 20044, 1242, -1000, 17542, 261, 20044,
	260, -1000, 259, -1000, -1000, 258, 20044, 1148, 436, 16694,
	-1000, 464, -1000, 120, 1264, 1542, -1000, 14414, 1197, 1183,
	14414, 1092, 978, 978, 978, -1000, 257, 2513, 449, 4686,
	10877, 18098, 984, 69, 119, 1220, 10877, 146, 146, 10877,
	11485, 11485, -1000, 146, -1000, -1000, -1000, -1000, -1000, 1292,
	256, 10877, 28357, 25458, 4311, 1, -1000, 8394, -60, -1000,
	10877, -1000, 26370, -1000, -1000, 232, 1398, -1000, 10877, 27302,
	115, 8090, -1000, 27199, -35, -35, -1000, 1725, -1000, 15264,
	483, 992, 26247, 28246, 28357, -1000, 10877, -1000, -1000, 1290,
	10877, -1000, 28246, 28357, 11485, 11485, 11485, 11485, 11485, 11485,
	11485, 11485, 11485, 11485, 11485, 11485, 11485, 11485, 11485, 11485,
	11485, 11485, 11485, 1164, 11485, 1648, 1648, 1648, -69, 7762,
	-1000, 1325, 1290, 10877, 10877, 28357, 112, 107, 104, -1000,
	10877, -145, 10877, 10877, 10877, -1000, -1000, -1000, 103, -1000,
	1657, -1000, -1000, -1000, -1000, 1264, 20044, 20044, 20044, 1349,
	-1000, 2342, -1000, 26144, -11, -1000, 288, 1526, 10877, -1000,
	-1000, 252, 12371, 20044, -1000, 1168, 1194, 520, 20044, -1000,
	20044, -1000, 20044, 20044, 20044, -19, -27, 20044, 20044, -1000,
	16122, 539, 251, -1000, -71, -1000, -1000, 242, -2, 818,
	-1000, -77, -1000, 437, -1000, 389, 386, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 100, -1000, -1000, 1246, -1000,
	12371, 250, 20044, 17542, 1581, 12371, 1014, 1166, 436, 16694,
	-1000, 620, -1000, 480, 10877, 10877, 1220, 14414, 14414, 1724,
	1176, 14414, -1000, -1000, -1000, -1000, 385, 363, 380, 12649,
	18098, -1000, 1642, 1184, -45, -1000, -1000, 20044, 249, -1000,
	449, 664, 146, 3096, 2152, 10877, 28357, 28103, -46, 10877,
	10877, -1000, -50, -1000, 10877, 379, 27877, -1000, -1000, -1000,
	27877, 10877, 1650, 10877, 99, 96, 87, -1000, -1000, -1000,
	25048, 10877, 86, -1000, 83, 82, 27877, 1325, 27877, -1000,
	-1000, 602, 602, 1648, 1648, 1648, 1648, 342, 342, 1065,
	222, 802, 802, 802, 1882, 410, 410, 802, 802, 802,
	1289, 1144, 244, 28061, 10877, -51, -1000, -1000, -1000, 27877,
	27877, 81, -1000, -1000, -1000, -145, 2658, 26021, 25918, -1000,
	80, 480, -1000, -1000, -1000, 20044, -1000, 20044, -1000, 20044,
	20044, 1273, 1064, -1000, -1000, 1174, 241, 11485, 20044, -1000,
	848, 12371, 1507, 22, 20044, 1507, 25795, 6215, -52, -56,
	1047, -1000, 1040, 10877, -1000, 28357, 1012, 1012, -1000, 549,
	546, 544, 538, -1000, -1000, -119, 15844, 1719, 1406, 20044,
	1495, -1000, -1000, 240, -1000, -1000, -1000, 963, -61, 12371,
	-72, 78, -2, -76, 20044, -1000, 436, 16694, -1000, 1401,
	-1000, 20044, 27877, -145, -1000, 1724, -1000, 237, 10877, 14414,
	-1000, -185, -1000, -78, -1000, 449, -80, -1000, 378, -186,
	-1000, 432, -1000, 449, 236, 20044, 18098, 10877, 10877, 28103,
	-85, -1000, 146, 146, -1000, 25692, -1000, 27877, -1000, 27199,
	-1000, -1000, -1000, 958, -1000, 25569, -1000, -1000, -1000, -1000,
	11485, 1278, 235, 28357, 25368, -1000, -1000, 10877, -1000, -1000,
	-1000, -1000, -1000, 956, -1000, -1000, 20044, 1067, -1000, -1000,
	10877, 28061, 233, 1242, 231, -1000, -1000, -1000, -1000, -1000,
	-1000, 1526, -26, -1000, 855, -1000, -1000, 27877, 1525, -1000,
	-1000, 20044, 20044, 229, 226, -1000, 218, 22, -91, -1000,
	431, 619, -93, 20044, -1000, -1000, 5908, 20044, 848, -102,
	-1000, 1242, -1000, 848, 194, 16694, -1000, 1148, -125, -1000,
	1580, -1000, 20044, 27877, -1000, 449, -1000, 1637, 18098, 144,
	-1000, 1184, -1000, 4999, 18098, 20044, -104, -1000, 146, 146,
	-1000, -1000, 77, 992, 1541, -1000, 3456, 11485, 28357, -110,
	-1000, 25344, -1000, -1000, 1345, 4279, 1127, 20044, -1000, 20044,
	1507, 76, 20044, 506, 20044, -1000, -1000, 10877, 10877, 10877,
	1719, -1000, -1000, 1718, 742, -1000, 482, -1000, 191, 1242,
	848, -1000, 1242, 12371, -1000, 1166, 20044, 187, -120, 18098,
	-1000, -1000, 377, -1000, -1000, 1635, -1000, -130, -1000, -1000,
	819, 10877, 3456, -138, -1000, -1000, 1338, -1000, 997, 891,
	75, -140, -1000, -1000, 184, -1000, 10877, -1000, -146, -147,
	-35, -1000, -1000, 14986, -1000, 20044, -1000, 1242, -1000, -152,
	-1000, -1000, -1000, -1000, -1000, 449, 364, -1000, 73, 10573,
	10573, -145, -1000, 20044, -1000, 1011, 1006, 714, -1000, -1000,
	-1000, -1000, -1000, 1127, 27877, -1000, -1000, 70, -131, -167,
	-1000, 848, 18098, -1000, -1000, -1000, -1000, 11789, 1046, 808,
	26719, -1000, -1000, -1000, 1412, -1000, 512, 1154, 1154, 997,
	1650, -1000, 1010, 1242, -1000, 1608, -1000, -1000, -1000, -1000,
	-1000, -1000, 1619, -1000, -1000, 1175, -1000, -1000, -1000, -1000,
	-1000, -1000, 10269, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1998, 1997, 1539, 1629, 1994, 1987, 1591, 1986, 1984,
	1983, 1979, 1976, 1975, 110, 1589, 1575, 35, 1565, 1974,
	90, 1972, 1971, 1970, 101, 1969, 1960, 1958, 1955, 98,
	1953, 1944, 1557, 1549, 1547, 1542, 1943, 1941, 86, 1939,
	19, 1937, 73, 1933, 46, 150, 122, 148, 1932, 1930,
	1929, 43, 95, 69, 1928, 63, 1924, 1923, 57, 39,
	29, 22, 1922, 128, 130, 1663, 44, 1920, 1919, 134,
	1918, 17, 36, 313, 141, 139, 126, 114, 1916, 1915,
	1913, 1909, 54, 1908, 2, 1907, 1905, 13, 59, 14,
	1904, 25, 21, 1903, 1901, 120, 1900, 74, 96, 1534,
	31, 112, 789, 1899, 72, 10, 77, 1898, 1894, 117,
	51, 1890, 40, 78, 124, 1889, 56, 151, 92, 37,
	64, 100, 1888, 1887, 1886, 83, 1885, 103, 70, 1884,
	1883, 88, 1882, 118, 121, 1881, 1877, 113, 1876, 1870,
	135, 154, 1869, 1858, 143, 1857, 11, 53, 68, 6,
	1512, 1502, 104, 65, 34, 28, 1855, 2582, 978, 850,
	41, 79, 61, 42, 81, 50, 66, 133, 23, 1853,
	1852, 107, 1846, 1845, 1843, 1840, 1837, 80, 1834, 1833,
	71, 132, 15, 8, 20, 91, 48, 38, 82, 129,
	138, 106, 1832, 85, 109, 52, 89, 1831, 1830, 1407,
	149, 1828, 1824, 1823, 1369, 1184, 1055, 787, 1817, 1815,
	248, 170, 1808, 1807, 60, 1804, 140, 1800, 1796, 137,
	131, 27, 1795, 58, 55, 93, 1792, 97, 49, 0,
	2014, 182, 1787, 116, 75, 1785, 1781, 1780, 1777, 30,
	1, 9, 5, 7, 3, 26, 16, 1776, 1775, 119,
	32, 67, 1773, 142, 1769, 1767, 1766, 47, 1765, 24,
	1764, 18, 1763, 1760, 12, 4, 1758, 1757, 125, 1756,
	94, 1749, 1620, 1748, 136, 1744, 1729, 1578, 62, 84,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 53, 53, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 50, 50, 55, 55, 55, 57, 57, 54, 54,
	49, 49, 5, 5, 227, 227, 228, 228, 39, 39,
	43, 43, 40, 41, 41, 42, 42, 6, 6, 6,
	7, 7, 7, 7, 7, 7, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 101, 101, 100, 100, 103,
	103, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 195, 195, 194, 19,
	169, 169, 20, 20, 20, 20, 21, 126, 126, 22,
	22, 22, 22, 23, 28, 268, 268, 268, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 274, 274, 270,
	270, 27, 31, 31, 31, 31, 31, 31, 145, 141,
	141, 143, 143, 143, 143, 64, 140, 140, 140, 140,
	142, 142, 142, 142, 220, 219, 219, 225, 225, 225,
	79, 79, 79, 79, 79, 80, 80, 80, 218, 218,
	218, 218, 226, 226, 226, 226, 226, 226, 81, 81,
	81, 224, 224, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 18, 269, 269, 271,
	271, 33, 33, 34, 34, 35, 35, 35, 35, 10,
	10, 11, 11, 82, 82, 83, 83, 148, 148, 148,
	148, 84, 84, 56, 56, 56, 147, 237, 237, 238,
	238, 238, 238, 238, 238, 239, 239, 239, 239, 239,
	239, 239, 235, 235, 236, 233, 233, 234, 234, 234,
	234, 275, 275, 146, 146, 87, 87, 242, 242, 242,
	242, 240, 240, 240, 240, 240, 243, 241, 244, 244,
	244, 244, 244, 181, 181, 181, 37, 12, 62, 62,
	13, 9, 9, 130, 130, 91, 91, 186, 186, 186,
	72, 72, 51, 51, 51, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 131, 131, 132, 132,
	25, 30, 36, 36, 36, 36, 36, 277, 277, 68,
	68, 68, 68, 69, 69, 144, 144, 144, 144, 144,
	63, 8, 8, 58, 58, 59, 59, 60, 60, 61,
	61, 278, 278, 24, 24, 24, 75, 75, 137, 137,
	137, 139, 139, 138, 138, 138, 116, 116, 116, 38,
	96, 96, 105, 105, 106, 106, 192, 107, 107, 29,
	29, 46, 46, 44, 44, 44, 44, 44, 44, 45,
	45, 47, 47, 47, 47, 47, 47, 47, 250, 250,
	250, 253, 253, 249, 251, 251, 252, 252, 276, 276,
	117, 117, 117, 86, 85, 85, 89, 89, 88, 90,
	90, 185, 114, 114, 114, 114, 133, 134, 134, 135,
	135, 136, 136, 113, 113, 165, 165, 48, 48, 95,
	95, 97, 97, 155, 155, 155, 156, 156, 154, 154,
	154, 154, 187, 187, 187, 187, 187, 187, 187, 187,
	266, 266, 266, 267, 267, 184, 184, 188, 188, 188,
	188, 188, 188, 182, 182, 182, 182, 183, 183, 193,
	193, 120, 120, 120, 120, 118, 118, 119, 119, 189,
	189, 189, 189, 115, 115, 190, 190, 190, 149, 149,
	196, 196, 196, 214, 214, 94, 94, 94, 197, 197,
	197, 197, 197, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 198, 198, 198, 198, 200, 200,
	200, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 213, 213, 213, 213, 213,
	201, 201, 208, 208, 209, 209, 210, 211, 202, 202,
	203, 203, 204, 205, 212, 212, 212, 212, 216, 216,
	206, 206, 206, 206, 206, 207, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	128, 128, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 158, 158, 158, 158, 158, 158,
	158, 158, 158, 158, 159, 159, 159, 159, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 161, 161, 245,
	245, 245, 245, 245, 245, 245, 247, 247, 248, 248,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 254, 254, 255,
	255, 257, 257, 258, 258, 259, 260, 260, 260, 261,
	262, 262, 256, 256, 263, 263, 263, 264, 264, 265,
	265, 265, 265, 265, 171, 171, 171, 172, 172, 173,
	179, 179, 179, 78, 78, 78, 78, 78, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 70,
	70, 70, 70, 70, 102, 102, 168, 168, 166, 166,
	166, 170, 170, 121, 121, 215, 215, 215, 215, 215,
	215, 215, 122, 122, 122, 129, 123, 123, 124, 124,
	124, 124, 124, 124, 162, 163, 125, 125, 125, 164,
	164, 174, 178, 178, 177, 176, 176, 175, 175, 152,
	152, 153, 153, 151, 150, 110, 110, 109, 109, 108,
	108, 279, 279, 180, 180, 111, 111, 112, 104, 104,
	191, 191, 191, 191, 98, 98, 77, 77, 99, 99,
	73, 73, 76, 76, 74, 74, 74, 74, 92, 92,
	93, 93, 71, 71, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 217, 217, 217, 167, 65,
	65, 65, 66, 66, 67, 67, 222, 222, 222, 223,
	223, 223, 223, 221, 221, 221, 221, 221, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 230, 230, 230, 230, 230, 230,
	230, 230, 230, 230, 230, 230, 230, 230, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 4, 6, 1, 3, 2, 5, 3, 6,
	4, 6, 6, 6, 4, 8, 3, 3, 3, 6,
	4, 3, 2, 1, 1, 0, 2, 0, 2, 0,
	2, 0, 7, 6, 1, 1, 1, 3, 3, 0,
	2, 0, 2, 1, 3, 5, 0, 4, 6, 7,
	1, 1, 1, 1, 1, 1, 6, 3, 5, 4,
	6, 4, 6, 4, 6, 1, 3, 1, 2, 2,
	3, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 1, 1, 3, 3, 2, 3, 3, 3, 3,
	1, 3, 3, 2, 1, 1, 3, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 2, 2, 4, 2, 4, 2, 4,
	4, 4, 4, 4, 4, 4, 2, 3, 4, 3,
	3, 4, 4, 2, 5, 5, 2, 2, 0, 2,
	0, 6, 6, 5, 5, 4, 12, 4, 12, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 5, 2, 0,
	6, 11, 14, 1, 0, 1, 3, 3, 3, 5,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 8, 10, 8, 10, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 1, 3, 3, 0,
	3, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 7, 4, 6, 3, 1, 5, 6, 9,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 3, 4, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 4, 1, 1, 1,
	5, 1, 3, 1, 3, 1, 1, 1, 1, 6,
	6, 4, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 3, 3, 3,
	2, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 3, 1, 2, 3, 0, 3, 3,
	2, 2, 1, 0, 2, 2, 3, 2, 1, 1,
	3, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 2, 2, 1, 1, 1, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 1, 2, 2, 1, 3,
	3, 0, 1, 2, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, 23, 34, 223, 66, -8, -9, -10, -11, -12,
	-13, -252, 94, 102, 124, 205, 101, 87, 118, 226,
	233, -44, -46, 242, -145, 244, 35, 253, 60, 97,
	228, 221, 222, 278, 68, -250, -47, -45, 326, 301,
	307, 237, -48, 262, 293, 329, 262, 133, 80, 296,
	-268, -99, 262, 80, -74, -65, 319, 4, -229, -231,
	20, 21, 23, 33, 34, 35, 40, 44, 47, 54,
	59, 60, 61, 63, 65, 66, 67, 70, 71, 78,
	79, 81, 83, 87, 89, 93, 94, 96, 101, 102,
	108, 109, 112, 114, 119, 124, 125, 126, 127, 134,
	137, 139, 132, 147, 149, 150, 153, 152, 157, 160,
	163, 165, 166, 167, 170, 168, 172, 173, 175, 174,
	180, 182, 183, 185, 188, 191, 194, 197, 198, 199,
	200, 203, 205, 207, 208, 209, 211, 212, 214, 215,
	216, 217, 218, 221, 219, 220, 222, 223, 224, 226,
	228, 229, 231, 243, 254, 233, 234, 235, 236, 239,
	240, 242, 244, 246, 249, 252, 253, 255, 258, 256,
	251, 261, 263, 264, 265, 266, 267, 274, 278, 279,
	280, 281, 284, 285, 286, 288, 290, 291, 292, 297,
	302, 303, 304, 305, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 50, 51, 52, 55, 82, 84, 85,
	100, 103, 104, 110, 120, 122, 128, 129, 138, 140,
	141, 142, 144, 155, 169, 179, 181, 192, 196, 202,
	204, 210, 230, 238, 247, 248, 257, 259, 269, 270,
	271, 275, 276, 293, 294, -268, -73, -65, 80, 89,
	137, 286, 285, 80, 133, 262, 296, -17, 326, -29,
	-7, -15, -4, -24, -38, -14, -32, -18, -33, -34,
	-35, -16, 23, -221, 4, -229, -231, -230, -232, 57,
	69, 117, 136, 130, 146, 148, 156, 158, 171, 193,
	195, 227, 245, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 56, 58, 64, 68,
	72, 73, 74, 75, 76, 77, 86, 88, 90, 91,
	92, 95, 97, 99, 105, 106, 107, 113, 115, 116,
	118, 121, 123, 131, 133, 135, 143, 145, 151, 154,
	159, 161, 162, 176, 177, 178, 184, 186, 187, 189,
	190, 201, 206, 213, 225, 237, 241, 250, 260, 262,
	268, 272, 273, 277, 282, 283, 287, 289, 295, 296,
	298, 299, 300, 301, -65, -65, -65, 205, 22, -272,
	22, -273, -274, 68, 94, 118, 237, 137, 89, 285,
	-272, -69, 233, -65, -141, 160, 240, 54, 230, 274,
	-142, -140, -220, 269, 170, -100, -65, 4, 22, 54,
	80, 59, 81, 119, 133, 134, 64, 65, 150, 263,
	269, 274, 68, 288, 265, -277, 274, 274, -277, -277,
	-68, 274, 272, -69, -220, -276, 262, 262, 287, 296,
	-130, 80, 283, -45, -47, -46, -88, -89, 282, 143,
	99, 190, -44, -46, -250, -253, 211, -249, -65, -253,
	-85, -86, 22, 91, 330, -189, -73, 187, -112, 326,
	-3, -189, 128, -73, -76, 128, -73, -65, -189, 128,
	272, 330, -99, -92, -65, -151, -150, 328, 116, 116,
	326, -109, -110, -150, -151, 116, 145, 145, -190, -189,
	-65, 128, -77, 128, -76, -101, 128, -100, -101, 128,
	-195, -194, -223, 4, -229, -231, -230, 293, 262, 133,
	-169, 326, -126, 326, -65, 22, 186, 330, 186, -65,
	-141, 52, -141, 243, 326, -143, -63, -64, 147, 207,
	272, 311, 116, 305, -81, 5, 86, -103, 328, 243,
	116, -269, 186, 116, 116, 116, 116, 116, 116, 305,
	147, 207, 254, 262, 296, 116, -144, -63, -64, -144,
	272, -69, -115, -189, -100, 128, -65, -100, 133, -65,
	128, -88, -89, -114, -133, -134, 159, 184, -117, 22,
	91, -117, -117, 44, 327, 327, 330, -253, -93, 326,
	-104, -191, -157, 319, -159, 317, 318, 323, 176, 306,
	-171, -161, -174, 100, 230, 326, -73, -160, 331, 9,
	-247, -46, 29, -172, -173, 48, -65, 7, 8, 5,
	6, -71, -198, -167, -207, 277, 105, 178, -245, -246,
	4, -229, -222, -199, -209, -203, -206, 144, 57, 73,
	76, 74, 77, 241, 287, 49, 28, 103, 104, 196,
	202, 259, 275, 276, 128, 179, 129, 55, 120, 155,
	93, 37, 39, 41, 42, 50, 51, 82, 84, 85,
	110, 138, 140, 141, 142, 181, 210, 247, 257, 270,
	271, 294, -230, -210, -211, -204, -205, -212, -104, -112,
	319, -73, 326, -111, -180, -157, 86, -53, 219, -52,
	21, 23, 94, 291, 100, 251, 266, 234, 251, 266,
	234, 219, 100, 331, 219, 219, 100, -227, -224, 9,
	-223, 5, -74, 330, -221, 319, -228, -227, 255, 327,
	-98, -73, -110, -190, -75, -73, -75, 242, -65, 30,
	100, -55, 330, 47, 224, 100, -55, 330, 100, -55,
	100, 327, 330, -189, 128, -76, 30, -168, -196, -197,
	-199, -208, -202, -206, -207, 40, 46, 45, 267, 169,
	238, 248, 38, 185, 139, 138, 140, 141, 142, 247,
	37, 210, 110, 93, 85, 84, 181, 42, 41, -210,
	-211, -204, -205, 82, 270, 271, 144, 39, 51, 50,
	294, 257, -102, -157, -268, -274, -268, 30, -140, -220,
	-102, 330, 330, 157, -80, 163, 175, 125, -219, 86,
	-225, -218, -181, 9, 277, 105, 186, -224, 8, 318,
	-217, 7, 317, -219, 86, 71, -226, 5, 4, -167,
	-181, 86, 160, -207, 328, -221, -100, -220, -271, 113,
	-268, -220, -220, -220, -220, -220, -65, 157, -220, -220,
	262, 133, 330, 330, -69, -55, 330, 326, -87, 176,
	-251, 301, -87, 326, -66, 128, -65, -251, 176, -114,
	-134, -133, -135, -157, 22, -157, -159, -45, -45, -45,
	-90, -185, -157, -249, 30, -92, -95, 330, 116, 10,
	11, 56, 33, 317, 318, 319, 320, 111, 321, 314,
	315, 316, 313, 309, 310, 311, 62, 164, 232, 13,
	14, 15, 26, 189, 158, 306, 130, 245, 323, 16,
	17, 18, 146, 36, 131, -70, 30, 4, -78, -157,
	-157, -157, -157, -157, 195, -108, -152, 324, -46, 326,
	-46, -157, -102, 7, -46, -166, 324, -175, -157, -109,
	326, 5, 326, 5, -254, 302, 113, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 204, -216, 297, -216, -216, -200,
	326, -200, -201, 326, -200, 303, 307, 326, -95, -73,
	330, 327, 330, 272, -131, 64, 58, -147, 128, 58,
	-233, -65, 64, -234, 53, 283, 206, 115, -131, 64,
	-131, 64, 64, -189, 33, -29, 116, 33, -29, 116,
	272, -76, -65, 272, 272, -189, -193, 308, -65, -193,
	330, 116, 327, 330, -149, 299, -137, -29, 326, 86,
	30, -137, -105, -106, -192, -107, -73, 326, -65, -65,
	-76, -77, -100, -101, -101, -17, -194, 100, -20, -29,
	-24, -38, -14, 327, 330, -94, 29, -127, 326, 304,
	167, 83, 126, 166, -128, 236, 327, 330, 272, 116,
	274, 327, -64, -63, -79, 209, 249, 220, 239, 330,
	8, 7, 7, -221, -270, -65, -73, -76, -64, -63,
	-189, -82, -92, -83, -65, -148, -147, -235, -236, -233,
	133, 283, 106, 30, 100, -62, 200, 30, 186, 176,
	-58, 264, 100, -136, 230, 231, 330, -51, 31, 90,
	326, 327, -149, -191, -97, -187, 324, -189, -73, -46,
	-188, 326, -214, -196, -213, 215, 216, 214, 218, 217,
	-196, -100, 269, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
	-157, -157, -157, -157, -157, 158, 130, 245, 36, 131,
	-157, 272, -157, -157, -157, -157, 168, 176, 178, 277,
	105, 284, 91, 182, -279, 260, 32, -164, -46, 326,
	-179, 27, 250, 22, -221, -171, 230, 326, -152, -157,
	-153, -102, 327, 327, 330, -102, -170, 325, -166, -178,
	-177, 298, 327, -102, 295, 22, 91, 319, 7, -127,
	-255, 108, 121, 326, 327, 327, -157, -157, -121, -215,
	-102, 4, 304, 167, 83, 126, 166, 236, -121, -122,
	-157, -102, -123, -158, -159, 317, 318, 323, 326, 230,
	-124, -157, -102, -157, 43, 154, 273, -125, -157, 116,
	-102, -157, -157, -157, -102, -102, -102, 326, 7, 7,
	269, 269, 7, -149, 327, -180, -52, -73, -65, -65,
	176, -147, 128, -57, 176, -196, -65, 326, 326, 149,
	149, -65, -65, 128, -65, 128, -65, -65, -53, 219,
	-29, 326, -29, 326, -65, 219, -65, -73, 219, -39,
	127, 182, -42, 301, -227, 255, 116, -73, -116, 225,
	-157, -116, -139, 186, -98, 293, -65, -116, -96, 330,
	116, 311, -98, -55, -55, -55, -189, -196, 324, 324,
	7, 272, 272, 272, 272, 326, -157, -270, -270, -63,
	281, 61, 209, -225, 330, 327, 327, 330, -66, 133,
	-66, -29, -100, 5, -29, -73, 100, -59, 96, -278,
	311, -65, -185, -20, -113, 121, -193, 330, 69, -120,
	148, 171, 117, 156, 227, 136, 7, 102, -154, 331,
	326, -184, 307, -46, -188, -187, 305, -157, -157, 272,
	-279, 260, -164, -157, 168, 178, 277, 105, 284, 91,
	182, 116, 326, -158, -158, -102, -161, 326, -102, 325,
	334, 327, -157, 325, 325, 330, -176, -177, 95, -157,
	-89, 330, -88, -157, -102, -102, 327, 327, -260, 194,
	326, 326, -157, 30, 330, 327, 116, 327, 327, -129,
	201, 327, 10, 11, 317, 318, 319, 320, 111, 321,
	314, 315, 316, 313, 309, 310, 311, 62, 164, 232,
	13, 14, 15, 146, 131, -158, -158, -158, -102, 326,
	327, -162, -163, 116, 113, 30, -125, -125, -125, 327,
	116, -102, 330, 330, 330, 327, 327, 327, 7, 327,
	330, 327, 305, 305, 327, -113, 272, 272, 100, 176,
	290, -237, -234, -157, -91, -186, -65, -248, 326, -245,
	-246, -71, 326, 326, -50, 94, 242, -132, 100, -55,
	100, -55, 272, -131, 64, -102, -102, 272, 272, -42,
	116, 261, 188, 255, -104, 177, -116, 63, 327, -149,
	-106, -97, -180, 327, 325, 7, 7, 327, 167, 126,
	166, -128, 166, -128, -128, 7, -65, -84, 132, -148,
	326, -66, 326, 326, -87, 326, -65, -60, 153, -278,
	-224, -251, 327, -165, 123, 44, -187, 148, 148, -187,
	-120, 148, -118, 193, -118, -118, -266, 326, -17, 326,
	-184, -221, 324, 332, -102, -183, -182, 30, -65, 191,
	327, -157, -157, -158, -158, 116, 326, -157, -168, 26,
	26, 327, -102, 327, 330, -153, -157, 327, -166, 97,
	-157, 268, 327, 295, -89, -89, -89, 5, -261, -65,
	326, 299, -88, 327, -214, -196, -157, -162, -157, -214,
	-196, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	-158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
	91, 176, 182, -158, 330, -102, 327, -163, -162, -157,
	-157, -196, 327, 327, 327, -102, -157, -157, -157, 327,
	7, -165, -65, -65, -147, 100, -238, 64, -239, 56,
	106, 68, 176, 178, 283, 206, 53, 86, 213, 327,
	327, 330, -72, -109, 56, -72, -157, 326, -91, -92,
	176, 86, 176, 86, 79, 279, -65, -65, -73, -65,
	-65, 327, 327, -65, -73, -228, 269, 326, -138, 326,
	186, -29, -116, 311, 325, 325, 327, 131, -91, 326,
	-92, -82, 30, -91, 186, -61, 152, -278, -224, -58,
	-257, 300, -157, -102, -187, -187, -119, 289, 186, 148,
	-187, 325, 327, -267, 7, 325, -195, -183, 7, -156,
	-155, 114, 174, 327, -65, 326, -184, 26, 26, -157,
	-168, 327, -157, -157, 327, -157, 325, -157, 5, -157,
	327, 327, 327, -262, -65, -157, 327, 327, 327, -163,
	116, 91, 182, 326, -157, 327, 327, 330, 327, 327,
	327, -257, -147, -65, -100, -65, 106, 128, 178, 149,
	326, -158, -73, -146, -275, 67, 258, -186, -51, -100,
	-51, 327, -102, 327, 327, 178, 178, -157, -196, -55,
	-55, 272, 272, 272, 272, -160, -71, -65, -41, -40,
	5, 92, -92, 64, -112, -46, 326, 197, 327, -91,
	327, 327, -29, 327, -73, -278, -224, -59, -258, -259,
	-65, -119, 326, -157, -187, -154, 327, 330, -184, 327,
	325, 330, 333, 311, -184, 326, -92, -182, -157, -157,
	327, 327, -89, -256, 199, 327, -158, 116, 326, -168,
	327, -157, -239, -66, 176, -157, -67, 326, -84, 326,
	-72, -89, 213, -54, 56, -65, -65, 326, 326, 326,
	330, 327, -43, 311, 285, 177, 327, -65, -65, -146,
	327, -84, -146, 326, -224, -60, 330, 30, -92, -184,
	7, -183, -17, -155, -221, 324, -183, -92, 327, 327,
	-89, 44, -158, -168, 327, 327, 100, 327, -242, 165,
	-65, -92, -51, 327, -73, -49, 289, -100, -102, -102,
	-102, -40, 5, 242, -149, 326, -84, -146, -84, -91,
	-61, -259, -261, 327, -182, 325, 7, 327, -263, 208,
	231, -102, 327, 106, -240, -243, -241, 186, 117, 198,
	246, 327, 327, -87, -157, 327, 327, -89, -105, -92,
	-84, 327, -184, 325, 327, -264, -265, 36, 280, 71,
	-157, -264, -65, -241, 186, -243, 186, 285, 89, -242,
	327, -149, 327, -146, -183, -265, 203, 112, 230, 203,
	112, -244, 173, 224, 47, 242, -244, -240, -56, 47,
	224, -84, 26, 20, 178, 86, -265,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 0, 0, 0, 0, 80, 81, 82, 83, 84,
	85, 0, 0, 427, 0, 0, 0, 0, 0, 0,
	0, 399, -2, 0, 157, 0, 348, 0, 348, 348,
	352, 0, 0, 429, 314, 426, -2, 437, 0, 0,
	0, 435, 413, 0, 0, -2, 0, 0, 0, 0,
	0, 135, 0, 959, 888, 894, 895, 919, 920, 921,
	938, 939, 940, 941, 942, 943, 944, 945, 946, 947,
	948, 949, 950, 951, 952, 953, 954, 955, 956, 957,
	958, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078,
	1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
	1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098,
	1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108,
	1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
	1119, 1120, 1121, 1122, 1123, 0, 0, 890, 959, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 0, 226, 933, 934, 935, 936, 937, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
	1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
	1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
	1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
	1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
	1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
	1215, 1216, 1217, 1218, 121, 128, 129, 1011, 131, 0,
	138, 139, 140, 142, 143, 144, 145, 146, 147, 148,
	0, 341, 1034, 354, 152, 988, 1039, 947, 1111, 1056,
	160, 170, 0, 1117, -2, 174, 97, 203, 204, 0,
	206, 0, 208, 228, 0, 0, 0, 0, 0, 216,
	0, 0, 0, 223, 0, 359, 347, 359, 344, 345,
	346, 349, 0, 340, 151, 0, 428, 0, 0, 0,
	0, 0, 313, -2, 409, 410, -2, 0, 432, 432,
	432, 0, 0, 410, 0, 418, 1015, 421, 901, 419,
	0, 0, 434, 433, 0, 414, 509, 0, 457, 0,
	2, 0, 1095, 509, 0, 1095, 893, 0, 0, 1095,
	0, 0, 136, 137, 898, 896, 897, 0, 0, 0,
	0, 891, 867, 865, 866, 0, 0, 0, 0, 515,
	87, 1095, 55, 1095, 886, 55, 1095, 95, 55, 1095,
	0, 116, 118, 929, 930, 931, 932, 1122, 0, 0,
	0, 0, 126, 0, 130, 132, 0, 0, 0, 353,
	153, 1084, 155, 0, 0, 159, 161, 162, 0, 0,
	0, 0, 0, 0, 173, 198, 199, 98, 0, 0,
	0, 230, 0, 0, 0, 0, 0, 0, 0, 217,
	0, 219, 220, 0, 0, 0, 342, 355, 356, 343,
	0, 351, 55, 513, 286, 1095, 425, 286, 923, 425,
	1095, -2, 0, 405, 444, 445, 0, 0, 0, 430,
	431, 0, 0, 0, 401, 402, 0, 420, 0, 0,
	460, 878, 882, 883, 612, 0, 0, 0, 0, 0,
	0, 704, 706, 1089, 1111, 0, 708, 709, 0, 711,
	713, 714, 0, 717, 718, 858, 890, 904, 905, 906,
	907, 0, 0, 910, 0, 912, 913, 914, 758, 727,
	-2, -2, 902, 544, 545, 546, 547, -2, 1124, 731,
	733, 735, 736, 737, 738, 0, 1073, 1090, 1091, 1107,
	1108, 1116, 1120, 1121, 1095, 1104, 1096, 1085, 1093, 1102,
	964, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 928, 574, 575, 580, 581, 583, 460, 458,
	510, 511, 0, 0, 875, 873, 874, 32, 337, 34,
	0, 337, 337, 0, 0, 0, 0, 235, 0, 0,
	237, 0, 0, 0, 0, 0, 0, 500, 64, 65,
	201, 202, 889, 0, 863, 864, 500, 66, 77, 0,
	0, 884, 868, 519, 0, 376, 0, 0, 516, 0,
	0, 89, 0, 53, 54, 0, 91, 0, 0, 93,
	0, 427, 0, 0, 1095, 0, 427, 0, 816, 527,
	528, 529, 530, 531, 609, 534, 535, 536, 537, 538,
	539, 540, 541, 542, 543, 551, 552, 553, 554, 555,
	556, 557, 571, 0, 550, 550, 550, 563, 564, 572,
	573, 578, 579, 590, 591, 593, 595, 589, 589, 589,
	586, 587, 0, 814, 0, 141, 0, 0, 156, 0,
	0, 0, 0, 0, 165, 185, 186, 187, 166, 168,
	175, 177, 178, 179, 188, 189, 190, 191, 303, 0,
	305, 915, 0, 167, 169, 171, 172, 192, 193, 194,
	195, 196, 197, 0, 0, 99, 205, 207, 209, 0,
	227, 210, 211, 212, 213, 214, 215, 218, 221, 222,
	0, 0, 0, 0, 350, 306, 0, 244, 0, 0,
	309, 424, 0, 0, 0, 1095, 922, 364, 0, 408,
	442, 443, 446, 449, 450, 447, 612, 415, 416, 417,
	438, 439, 324, 422, 0, 0, 519, 0, 0, 0,
	0, 0, 0, 793, 794, 795, 796, 797, 798, 801,
	802, 799, 800, 803, 804, 805, 0, 0, 0, 806,
	807, 808, 0, 0, 810, 0, 812, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 881, 809, 617,
	618, 619, 641, 642, 0, 705, 869, 862, 707, 0,
	-2, 814, 0, 710, 715, 716, 0, 0, 857, -2,
	0, 909, 0, 609, 760, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 837, 843, 0, 0, 0, 0,
	0, 0, 0, 0, 559, 577, 588, 585, 584, 561,
	0, 560, 558, 0, 562, 0, 0, 0, 519, 0,
	0, 877, 0, 0, 0, 0, 336, 36, 1095, 0,
	57, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 233, 0, 0, 234, 0,
	0, 0, 892, 0, 0, 0, 69, 0, 899, 76,
	0, 0, 0, 0, 388, 0, 388, 378, 0, 0,
	0, 388, 391, 392, 394, 395, 0, 0, 517, 88,
	887, 55, 96, 55, 55, 102, 117, 0, 119, 122,
	123, 124, 125, 120, 0, 520, 522, 532, 0, 596,
	597, 598, 599, 600, 601, 610, 127, 0, 0, 0,
	0, 158, 163, 164, 360, 0, 182, 0, 184, 0,
	304, 917, 916, 100, 229, 149, 224, 225, 357, 358,
	514, 0, 0, 243, 898, 245, 247, 248, 249, 250,
	923, 0, 923, 0, 0, 307, 0, 0, 0, 0,
	366, 372, 0, 448, 451, 452, 0, 441, 322, 323,
	427, 900, 454, 879, 500, 461, 0, 471, 509, 486,
	476, 0, 613, 523, 524, 565, 566, 567, 568, 569,
	614, 615, 0, 620, 621, 622, 623, 624, 625, 626,
	627, 628, 629, -2, -2, -2, 633, 634, 635, -2,
	-2, -2, 639, 640, -2, 811, 813, 0, 872, 0,
	-2, 0, 649, -2, -2, -2, 653, 0, 655, 658,
	660, 662, 0, 0, 0, 0, 871, 672, 849, 0,
	0, 790, 791, 792, 880, 657, 0, 0, 870, 861,
	0, 0, -2, 712, 0, 0, 0, 820, 821, 856,
	852, 0, 719, 437, 0, 0, 0, 0, 0, 918,
	768, 0, 0, 0, 732, 734, 0, 0, 0, 0,
	824, -2, -2, -2, -2, -2, -2, -2, 0, 0,
	814, 834, 0, 0, 675, 0, 0, 0, 0, 1111,
	0, 814, 842, 0, 0, 0, 0, 0, 814, 0,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 454, 512, 876, 35, 326, 0, 0,
	0, 38, 1095, 46, 0, 258, 0, 0, 0, 0,
	0, 339, 47, 1095, 55, 1095, 55, 48, 33, 337,
	231, 0, 232, 0, 330, 0, 325, 328, 0, 76,
	0, 0, 63, 0, 67, 78, 0, 885, 86, 0,
	518, 373, 388, 0, 0, 380, 377, 375, 519, 0,
	0, 0, 0, 90, 92, 94, 0, 817, 0, 0,
	0, 0, 0, 0, 0, 0, 815, 133, 134, 154,
	180, 181, 183, 176, 0, 252, 285, 0, 0, 923,
	0, 241, 286, 308, 310, 0, 0, 368, 372, 0,
	371, 425, 440, 0, 456, 0, 459, 0, 0, 0,
	0, 0, 506, 506, 506, 504, 480, 427, 486, 0,
	0, 498, 0, -2, 476, 0, 0, -2, -2, 0,
	0, 0, 673, -2, 654, 656, 659, 661, 663, 0,
	0, 0, 0, 0, 0, 0, 674, 0, 0, 859,
	862, -2, 815, 818, 819, 0, 0, 853, 0, 0,
	0, 0, 436, 437, 437, 437, 725, 0, 726, 0,
	0, 0, 0, 0, 0, 741, 0, 742, 743, 0,
	0, 744, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 678, 679, 680, 0, 0,
	745, 840, 841, 0, 0, 0, 0, 0, 0, 750,
	0, 847, 0, 0, 0, 754, 755, 756, 0, 548,
	0, 570, 592, 594, 582, 456, 0, 0, 0, 0,
	56, 256, 275, 0, 0, 315, 321, 321, 0, 728,
	729, 0, 0, 0, 40, 0, 0, 0, 0, 44,
	0, 50, 0, 0, 0, 0, 0, 0, 0, 62,
	0, 0, 0, 79, 386, 387, 374, 385, 0, 388,
	393, 390, 396, 0, 525, 0, 0, 533, 602, 603,
	604, 605, 606, 607, 608, 0, 150, 239, 0, 246,
	0, 0, 0, 244, 0, 0, 0, 370, 372, 0,
	363, 364, 423, 762, 0, 0, 462, 0, 0, 0,
	0, 0, 501, 505, 502, 503, 0, 0, 0, 0,
	498, 468, 0, 0, 0, 475, 497, 0, 496, 485,
	-2, 616, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 850, 0, 785, 0, 0, 861, -2, 822, 851,
	855, 0, 720, 0, 0, 0, 0, 911, 766, 767,
	771, 0, 0, 730, 0, 0, 823, 833, 835, 676,
	677, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, -2, -2, -2, 694, 695, 696, -2, -2, -2,
	0, 0, 0, 836, 0, 0, 788, 838, 839, 844,
	845, 0, 747, 748, 749, 846, 0, 0, 0, 576,
	0, 762, 332, 334, 37, 0, 257, 0, 260, 0,
	0, 0, 0, 266, 267, 0, 0, 0, 0, 277,
	284, 0, 324, 903, 0, 324, 0, 0, 0, 0,
	0, 52, 0, 0, 338, 0, 55, 55, 327, 0,
	0, 0, 0, 331, 329, 68, 0, 0, 0, 0,
	0, 379, 389, 0, 526, 521, 611, 0, 0, 0,
	0, 0, 0, 0, 0, 361, 372, 0, 365, 366,
	411, 0, 455, 453, 488, 0, 490, 0, 0, 0,
	492, 471, 481, 0, 483, 486, 0, 473, 0, 0,
	466, 0, 465, 486, 494, 0, 0, 0, 0, -2,
	0, 666, -2, -2, 784, 815, 860, 854, 908, 437,
	721, 723, 724, 773, 770, 0, 757, 739, 740, 832,
	0, 0, 0, 0, 815, 787, 746, 0, 752, 753,
	549, 412, 39, 0, 261, 262, 923, 0, 265, 268,
	0, 270, 925, 252, 0, 281, 282, 316, 317, 320,
	318, 321, 437, 279, 0, 41, 42, 51, 59, 43,
	49, 0, 0, 0, 0, 499, 0, 0, 0, 73,
	71, 0, 0, 0, 397, 398, 0, 0, 284, 0,
	274, 252, 242, 284, 0, 0, 367, 368, 761, 763,
	0, 489, 0, 508, 491, 486, 482, 0, 498, 427,
	469, 0, 470, 0, 498, 0, 0, 477, -2, -2,
	667, 786, 0, 437, 0, 759, -2, 0, 0, 0,
	789, 0, 259, 263, 0, 0, 290, 0, 278, 0,
	324, 0, 0, 61, 0, 333, 335, 0, 0, 0,
	0, 75, 72, 0, 0, 382, 519, 384, 0, 252,
	284, 240, 252, 0, 369, 370, 0, 0, 0, 0,
	484, 478, 0, 467, 463, 0, 474, 0, 495, 722,
	776, 0, -2, 0, 702, 751, 0, 269, 295, 0,
	0, 0, 319, 720, 286, 45, 0, 58, 0, 0,
	437, 74, 70, 0, 383, 0, 272, 252, 311, 0,
	362, 764, 765, 507, 472, 486, 0, 493, 0, 0,
	0, 772, 703, 0, 271, 291, 292, 0, 287, 288,
	289, 924, 283, 290, 60, 236, 238, 0, 519, 0,
	273, 284, 498, 464, 769, 774, 777, -2, 1059, 956,
	0, 775, 264, 293, 0, 294, 0, 0, 0, 295,
	0, 381, 255, 252, 479, 0, 779, 780, 781, 782,
	783, 296, 0, 299, 300, 0, 297, 280, 251, 253,
	254, 312, 0, 298, 301, 302, 778,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 315, 3, 321, 316, 3,
	326, 327, 319, 317, 330, 318, 328, 320, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 334, 329,
	309, 311, 310, 3, 331, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 324, 3, 325, 314, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 332, 313, 333, 323,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 312, 57652, 322, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:785
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:791
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:797
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 31:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:837
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 32:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:843
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:847
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:864
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:874
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:884
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:889
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			return unimplemented(sqllex)
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:896
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:906
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:916
		{
			return unimplemented(sqllex)
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:926
		{
			return unimplemented(sqllex)
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:955
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = nil
		}
	case 53:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:965
		{
			sqlVAL.union.val = DropCascade
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = DropRestrict
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = DropDefault
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 57:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:989
		{
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:992
		{
			return unimplemented(sqllex)
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:993
		{
		}
	case 62:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 69:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 71:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.str = ""
		}
	case 72:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 76:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1066
		{
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1070
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1074
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1094
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1101
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1198
		{ /* SKIP DOC */
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1202
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1206
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1230
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1280
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1298
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1323
		{
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[2].union.unresolvedName(), SetMode: SetModeReset}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1389
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			return unimplemented(sqllex)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1394
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 156:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{ /* SKIP DOC */
		}
	case 158:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1469
		{
			return unimplemented(sqllex)
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1475
		{
			return unimplemented(sqllex)
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1482
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1494
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1500
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1516
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = Low
		}
	case 186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1526
		{
			sqlVAL.union.val = Normal
		}
	case 187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = High
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1575
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1584
		{
			return unimplemented(sqllex)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1585
		{
			return unimplemented(sqllex)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1586
		{
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1614
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1626
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1678
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1682
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1725
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1729
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1735
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1739
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1743
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1747
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1775
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1818
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1822
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = DropDefault
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1832
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 258:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].union.unresolvedName().String())}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1895
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1903
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1924
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1946
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1958
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			return unimplemented(sqllex)
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return unimplemented(sqllex)
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			return unimplemented(sqllex)
		}
	case 290:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2040
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			return unimplemented(sqllex)
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2048
		{
			return unimplemented(sqllex)
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2049
		{
			return unimplemented(sqllex)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2050
		{
			return unimplemented(sqllex)
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2051
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2054
		{
			return unimplemented(sqllex)
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2057
		{
			return unimplemented(sqllex)
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2060
		{
			return unimplemented(sqllex)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2061
		{
			return unimplemented(sqllex)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2062
		{
			return unimplemented(sqllex)
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2063
		{
			return unimplemented(sqllex)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2064
		{
			return unimplemented(sqllex)
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2096
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 310:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = true
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = false
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2159
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2171
		{
			return unimplemented(sqllex)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2172
		{
			return unimplemented(sqllex)
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			return unimplemented(sqllex)
		}
	case 321:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2176
		{
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = Ascending
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = Descending
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2188
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2203
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2207
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2211
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2215
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2219
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2223
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2227
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 334:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2230
		{
			return unimplemented(sqllex)
		}
	case 335:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2231
		{
			return unimplemented(sqllex)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2235
		{
			sqlVAL.union.val = true
		}
	case 337:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = false
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2244
		{
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2245
		{
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2255
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2287
		{
		}
	case 348:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2288
		{
		}
	case 349:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.str = ""
		}
	case 350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.str = ""
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2336
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 364:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.str = ""
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2385
		{
			sqlVAL.str = ""
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2395
		{
			sqlVAL.str = ""
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2401
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2405
		{
			sqlVAL.str = ""
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2410
		{
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2411
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 374:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2475
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
			return unimplemented(sqllex)
		}
	case 385:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 389:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2509
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2510
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2514
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2518
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2540
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2544
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2588
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2598
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2625
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2680
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2701
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2719
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2737
		{
			return unimplemented(sqllex)
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2738
		{
			return unimplemented(sqllex)
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2739
		{
			return unimplemented(sqllex)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			return unimplemented(sqllex)
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2743
		{
			return unimplemented(sqllex)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2746
		{
			return unimplemented(sqllex)
		}
	case 424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2750
		{
		}
	case 426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2753
		{
			return unimplemented(sqllex)
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2754
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2757
		{
		}
	case 429:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2758
		{
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.union.val = true
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = false
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = false
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = true
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2781
		{
		}
	case 435:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2782
		{
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2802
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2812
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2840
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2853
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
		}
	case 452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2882
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 456:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2940
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2952
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2956
		{
			sqlVAL.union.val = &From{}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2962
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2966
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2976
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 467:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3021
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3027
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 471:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3031
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3038
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3093
		{
			sqlVAL.union.val = nil
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = true
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = false
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3157
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3163
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3167
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3171
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3182
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.str = astFullJoin
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.str = astLeftJoin
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.str = astRightJoin
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.str = astInnerJoin
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3216
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3217
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3250
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3273
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3277
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3287
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3303
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3316
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3317
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3331
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3340
		{
			return unimplemented(sqllex)
		}
	case 534:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3342
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 535:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3346
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3358
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3370
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3374
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3399
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3408
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = nil
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3457
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3471
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3489
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3509
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3513
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3517
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3531
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3535
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3553
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3625
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3630
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = year
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = month
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3665
		{
			sqlVAL.union.val = day
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3669
		{
			sqlVAL.union.val = hour
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3673
		{
			sqlVAL.union.val = minute
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = month
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = hour
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = minute
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3699
		{
			sqlVAL.union.val = minute
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3703
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3707
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = nil
		}
	case 610:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = second
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3720
		{
			return unimplemented(sqllex)
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3748
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].union.unresolvedName().String()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3755
		{
			return unimplemented(sqllex)
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3788
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3792
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3796
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3804
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3808
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3812
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3824
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3828
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3920
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3923
		{
			return unimplemented(sqllex)
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3989
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4097
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4117
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4121
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4125
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4157
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4162
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4208
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4215
		{
			return unimplemented(sqllex)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4216
		{
			return unimplemented(sqllex)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4239
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4255
		{
			return unimplemented(sqllex)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4256
		{
			return unimplemented(sqllex)
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4260
		{
			return unimplemented(sqllex)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4277
		{
			return unimplemented(sqllex)
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4278
		{
			return unimplemented(sqllex)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
			return unimplemented(sqllex)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
			return unimplemented(sqllex)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4282
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4290
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4294
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4309
		{
			return unimplemented(sqllex)
		}
	case 747:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4327
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4335
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4339
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4343
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4347
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4353
		{
			return unimplemented(sqllex)
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4354
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = Window(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4379
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4383
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4389
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 766:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4401
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4405
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 769:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.str = ""
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4451
		{
			return unimplemented(sqllex)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4452
		{
			return unimplemented(sqllex)
		}
	case 776:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4453
		{
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4456
		{
			return unimplemented(sqllex)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4457
		{
			return unimplemented(sqllex)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4463
		{
			return unimplemented(sqllex)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4464
		{
			return unimplemented(sqllex)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4465
		{
			return unimplemented(sqllex)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4466
		{
			return unimplemented(sqllex)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4467
		{
			return unimplemented(sqllex)
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4508
		{
			sqlVAL.union.val = Any
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4512
		{
			sqlVAL.union.val = Some
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4516
		{
			sqlVAL.union.val = All
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = Plus
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = Minus
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = Mult
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4524
		{
			sqlVAL.union.val = Div
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4525
		{
			sqlVAL.union.val = FloorDiv
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4526
		{
			sqlVAL.union.val = Mod
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = Bitand
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = Bitor
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = Bitxor
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = Bitxor
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = LT
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = GT
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4533
		{
			sqlVAL.union.val = EQ
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = LE
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = GE
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4536
		{
			sqlVAL.union.val = NE
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4540
		{
			sqlVAL.union.val = Like
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.union.val = NotLike
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = ILike
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4543
		{
			sqlVAL.union.val = NotILike
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4558
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4574
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4578
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4582
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4592
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4624
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4632
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 835:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4744
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 854:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4756
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4760
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4784
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 871:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4831
		{
		}
	case 872:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4832
		{
		}
	case 874:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4851
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4860
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4963
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4994
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5004
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5008
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5023
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5030
		{
			return unimplemented(sqllex)
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5032
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5036
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5040
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5044
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 913:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5048
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5052
		{
			sqlVAL.union.val = DNull
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5059
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5063
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 923:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.str = ""
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
