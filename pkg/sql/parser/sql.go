// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_ROLE = 57417
const CURRENT_TIME = 57418
const CURRENT_TIMESTAMP = 57419
const CURRENT_USER = 57420
const CYCLE = 57421
const DATA = 57422
const DATABASE = 57423
const DATABASES = 57424
const DATE = 57425
const DAY = 57426
const DEC = 57427
const DECIMAL = 57428
const DEFAULT = 57429
const DEALLOCATE = 57430
const DEFERRABLE = 57431
const DELETE = 57432
const DESC = 57433
const DISTINCT = 57434
const DO = 57435
const DOUBLE = 57436
const DROP = 57437
const ELSE = 57438
const ENCODING = 57439
const END = 57440
const ESCAPE = 57441
const EXCEPT = 57442
const EXISTS = 57443
const EXECUTE = 57444
const EXPERIMENTAL_FINGERPRINTS = 57445
const EXPLAIN = 57446
const EXTRACT = 57447
const EXTRACT_DURATION = 57448
const FALSE = 57449
const FAMILY = 57450
const FETCH = 57451
const FILTER = 57452
const FIRST = 57453
const FLOAT = 57454
const FLOORDIV = 57455
const FOLLOWING = 57456
const FOR = 57457
const FORCE_INDEX = 57458
const FOREIGN = 57459
const FROM = 57460
const FULL = 57461
const GRANT = 57462
const GRANTS = 57463
const GREATEST = 57464
const GROUP = 57465
const GROUPING = 57466
const HAVING = 57467
const HELP = 57468
const HIGH = 57469
const HOUR = 57470
const INCREMENTAL = 57471
const IF = 57472
const IFNULL = 57473
const ILIKE = 57474
const IN = 57475
const INTERLEAVE = 57476
const INDEX = 57477
const INDEXES = 57478
const INITIALLY = 57479
const INNER = 57480
const INSERT = 57481
const INT = 57482
const INT2VECTOR = 57483
const INT8 = 57484
const INT64 = 57485
const INTEGER = 57486
const INTERSECT = 57487
const INTERVAL = 57488
const INTO = 57489
const IS = 57490
const ISOLATION = 57491
const JOB = 57492
const JOIN = 57493
const KEY = 57494
const KEYS = 57495
const LATERAL = 57496
const LC_CTYPE = 57497
const LC_COLLATE = 57498
const LEADING = 57499
const LEAST = 57500
const LEFT = 57501
const LEVEL = 57502
const LIKE = 57503
const LIMIT = 57504
const LOCAL = 57505
const LOCALTIME = 57506
const LOCALTIMESTAMP = 57507
const LOW = 57508
const LSHIFT = 57509
const MATCH = 57510
const MINUTE = 57511
const MONTH = 57512
const NAN = 57513
const NAME = 57514
const NAMES = 57515
const NATURAL = 57516
const NEXT = 57517
const NO = 57518
const NO_INDEX_JOIN = 57519
const NORMAL = 57520
const NOT = 57521
const NOTHING = 57522
const NULL = 57523
const NULLIF = 57524
const NULLS = 57525
const NUMERIC = 57526
const OF = 57527
const OFF = 57528
const OFFSET = 57529
const OID = 57530
const ON = 57531
const ONLY = 57532
const OPTIONS = 57533
const OR = 57534
const ORDER = 57535
const ORDINALITY = 57536
const OUT = 57537
const OUTER = 57538
const OVER = 57539
const OVERLAPS = 57540
const OVERLAY = 57541
const PARENT = 57542
const PARTIAL = 57543
const PARTITION = 57544
const PASSWORD = 57545
const PAUSE = 57546
const PLACING = 57547
const POSITION = 57548
const PRECEDING = 57549
const PRECISION = 57550
const PREPARE = 57551
const PRIMARY = 57552
const PRIORITY = 57553
const QUERIES = 57554
const QUERY = 57555
const RANGE = 57556
const READ = 57557
const REAL = 57558
const RECURSIVE = 57559
const REF = 57560
const REFERENCES = 57561
const REGCLASS = 57562
const REGPROC = 57563
const REGPROCEDURE = 57564
const REGNAMESPACE = 57565
const REGTYPE = 57566
const RENAME = 57567
const REPEATABLE = 57568
const RELEASE = 57569
const RESET = 57570
const RESTORE = 57571
const RESTRICT = 57572
const RESUME = 57573
const RETURNING = 57574
const REVOKE = 57575
const RIGHT = 57576
const ROLLBACK = 57577
const ROLLUP = 57578
const ROW = 57579
const ROWS = 57580
const RSHIFT = 57581
const SAVEPOINT = 57582
const SCATTER = 57583
const SEARCH = 57584
const SECOND = 57585
const SELECT = 57586
const SERIAL = 57587
const SERIALIZABLE = 57588
const SESSION = 57589
const SESSIONS = 57590
const SESSION_USER = 57591
const SET = 57592
const SETTING = 57593
const SETTINGS = 57594
const SHOW = 57595
const SIMILAR = 57596
const SIMPLE = 57597
const SMALLINT = 57598
const SMALLSERIAL = 57599
const SNAPSHOT = 57600
const SOME = 57601
const SPLIT = 57602
const SQL = 57603
const START = 57604
const STATUS = 57605
const STDIN = 57606
const STRICT = 57607
const STRING = 57608
const STORING = 57609
const SUBSTRING = 57610
const SYMMETRIC = 57611
const SYSTEM = 57612
const TABLE = 57613
const TABLES = 57614
const TEMPLATE = 57615
const TESTING_RANGES = 57616
const TESTING_RELOCATE = 57617
const TEXT = 57618
const THEN = 57619
const TIME = 57620
const TIMESTAMP = 57621
const TIMESTAMPTZ = 57622
const TO = 57623
const TRAILING = 57624
const TRANSACTION = 57625
const TREAT = 57626
const TRIM = 57627
const TRUE = 57628
const TRUNCATE = 57629
const TYPE = 57630
const UNBOUNDED = 57631
const UNCOMMITTED = 57632
const UNION = 57633
const UNIQUE = 57634
const UNKNOWN = 57635
const UPDATE = 57636
const UPSERT = 57637
const USE = 57638
const USER = 57639
const USERS = 57640
const USING = 57641
const UUID = 57642
const VALID = 57643
const VALIDATE = 57644
const VALUE = 57645
const VALUES = 57646
const VARCHAR = 57647
const VARIADIC = 57648
const VIEW = 57649
const VARYING = 57650
const WHEN = 57651
const WHERE = 57652
const WINDOW = 57653
const WITH = 57654
const WITHIN = 57655
const WITHOUT = 57656
const WRITE = 57657
const YEAR = 57658
const ZONE = 57659
const NOT_LA = 57660
const WITH_LA = 57661
const AS_LA = 57662
const POSTFIXOP = 57663
const UMINUS = 57664

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5621

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 35,
	341, 35,
	-2, 452,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 59,
	1, 425,
	189, 425,
	232, 425,
	337, 425,
	339, 425,
	341, 425,
	-2, 435,
	-1, 74,
	1, 428,
	189, 428,
	232, 428,
	337, 428,
	339, 428,
	341, 428,
	-2, 434,
	-1, 83,
	1, 35,
	341, 35,
	-2, 452,
	-1, 460,
	1, 182,
	341, 182,
	-2, 1029,
	-1, 527,
	109, 462,
	162, 462,
	187, 462,
	-2, 431,
	-1, 530,
	109, 461,
	162, 461,
	187, 461,
	-2, 429,
	-1, 679,
	109, 461,
	162, 461,
	187, 461,
	-2, 432,
	-1, 739,
	338, 959,
	-2, 952,
	-1, 740,
	338, 960,
	-2, 953,
	-1, 746,
	5, 628,
	338, 628,
	-2, 1145,
	-1, 770,
	5, 589,
	-2, 1119,
	-1, 771,
	5, 622,
	338, 622,
	-2, 1121,
	-1, 772,
	5, 597,
	-2, 1122,
	-1, 773,
	5, 596,
	-2, 1123,
	-1, 774,
	5, 622,
	338, 622,
	-2, 1126,
	-1, 775,
	5, 622,
	338, 622,
	-2, 1127,
	-1, 776,
	5, 623,
	-2, 1130,
	-1, 777,
	5, 583,
	-2, 1131,
	-1, 778,
	5, 583,
	-2, 1132,
	-1, 779,
	5, 604,
	-2, 1136,
	-1, 780,
	5, 584,
	-2, 1141,
	-1, 781,
	5, 585,
	-2, 1142,
	-1, 782,
	5, 586,
	-2, 1143,
	-1, 783,
	5, 587,
	-2, 1144,
	-1, 784,
	5, 583,
	-2, 1149,
	-1, 785,
	5, 590,
	-2, 1154,
	-1, 786,
	5, 588,
	-2, 1157,
	-1, 787,
	5, 620,
	338, 620,
	-2, 1159,
	-1, 788,
	5, 624,
	-2, 1162,
	-1, 789,
	5, 626,
	-2, 1163,
	-1, 790,
	5, 619,
	338, 619,
	-2, 1168,
	-1, 1049,
	100, 435,
	109, 435,
	145, 435,
	162, 435,
	187, 435,
	193, 435,
	291, 435,
	-2, 747,
	-1, 1058,
	338, 936,
	-2, 924,
	-1, 1271,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 663,
	-1, 1272,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 664,
	-1, 1273,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 665,
	-1, 1277,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 669,
	-1, 1278,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 670,
	-1, 1279,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 671,
	-1, 1282,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 676,
	-1, 1288,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 678,
	-1, 1290,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 682,
	-1, 1291,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 683,
	-1, 1292,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 684,
	-1, 1293,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 685,
	-1, 1320,
	198, 818,
	-2, 821,
	-1, 1349,
	118, 858,
	338, 959,
	-2, 952,
	-1, 1350,
	118, 859,
	-2, 1115,
	-1, 1351,
	118, 860,
	-2, 1028,
	-1, 1352,
	118, 861,
	-2, 995,
	-1, 1353,
	118, 862,
	-2, 1011,
	-1, 1354,
	118, 863,
	-2, 1027,
	-1, 1355,
	118, 864,
	-2, 1078,
	-1, 1515,
	100, 435,
	109, 435,
	145, 435,
	162, 435,
	187, 435,
	193, 435,
	291, 435,
	-2, 518,
	-1, 1519,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 677,
	-1, 1520,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 679,
	-1, 1525,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 680,
	-1, 1543,
	198, 817,
	-2, 820,
	-1, 1735,
	1, 519,
	70, 519,
	100, 519,
	109, 519,
	119, 519,
	123, 519,
	125, 519,
	138, 519,
	145, 519,
	151, 519,
	159, 519,
	162, 519,
	174, 519,
	187, 519,
	189, 519,
	193, 519,
	232, 519,
	234, 519,
	291, 519,
	299, 519,
	310, 519,
	311, 519,
	320, 519,
	337, 519,
	339, 519,
	341, 519,
	342, 519,
	-2, 518,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 681,
	-1, 1742,
	148, 0,
	-2, 697,
	-1, 1752,
	198, 819,
	-2, 822,
	-1, 1786,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 724,
	-1, 1787,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 725,
	-1, 1788,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 726,
	-1, 1792,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 730,
	-1, 1793,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 731,
	-1, 1794,
	13, 0,
	14, 0,
	15, 0,
	321, 0,
	322, 0,
	323, 0,
	-2, 732,
	-1, 1915,
	148, 0,
	-2, 698,
	-1, 1918,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 701,
	-1, 1919,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 703,
	-1, 2025,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 702,
	-1, 2026,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	132, 0,
	133, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 704,
	-1, 2033,
	148, 0,
	-2, 733,
	-1, 2089,
	148, 0,
	-2, 734,
	-1, 2154,
	36, 0,
	132, 0,
	161, 0,
	254, 0,
	318, 0,
	324, 0,
	-2, 1118,
}

const sqlPrivate = 57344

const sqlLast = 31355

var sqlAct = [...]int{

	740, 2153, 2131, 1730, 2178, 1689, 2095, 2132, 2152, 1143,
	1959, 2133, 1151, 738, 964, 1731, 1513, 2005, 1763, 862,
	1206, 1985, 1880, 1906, 538, 73, 1699, 1636, 309, 1486,
	1837, 970, 1235, 58, 730, 1823, 1891, 96, 96, 552,
	96, 513, 716, 578, 1637, 846, 1885, 1488, 1510, 596,
	327, 96, 96, 96, 1224, 1205, 1210, 1707, 96, 1250,
	1603, 96, 1554, 1604, 1318, 831, 531, 1243, 1054, 96,
	1716, 1209, 518, 73, 1436, 1242, 1500, 966, 96, 96,
	1183, 699, 96, 1152, 803, 96, 96, 96, 96, 806,
	1430, 96, 96, 737, 1328, 1103, 1112, 1375, 1495, 710,
	1305, 1167, 1302, 1135, 1248, 1231, 927, 990, 73, 325,
	536, 1199, 567, 318, 25, 1346, 316, 33, 835, 621,
	808, 315, 17, 317, 9, 1045, 512, 832, 1176, 709,
	700, 590, 597, 1084, 620, 1213, 1088, 588, 530, 1145,
	459, 995, 733, 591, 541, 1838, 74, 682, 456, 683,
	445, 504, 681, 732, 88, 434, 925, 455, 1378, 839,
	1245, 92, 584, 687, 448, 509, 662, 1542, 539, 75,
	663, 2018, 848, 848, 2019, 1148, 2169, 1144, 502, 828,
	1180, 324, 848, 1511, 311, 23, 1574, 1575, 535, 1592,
	1593, 1594, 295, 2148, 822, 1186, 1836, 25, 324, 535,
	33, 2143, 793, 2142, 1186, 17, 1186, 9, 1448, 1447,
	2139, 998, 999, 828, 2073, 2129, 1546, 558, 1173, 495,
	528, 1547, 2124, 2120, 1181, 828, 828, 72, 2091, 2085,
	2067, 1173, 828, 1836, 1001, 2063, 1545, 2058, 828, 1589,
	2057, 1186, 549, 527, 72, 555, 2027, 543, 562, 1173,
	997, 2015, 2012, 47, 857, 2013, 1999, 1996, 1000, 1836,
	828, 1139, 48, 79, 1015, 1182, 1179, 1498, 23, 1994,
	47, 1970, 1836, 1969, 828, 1941, 1836, 1920, 1186, 48,
	1186, 996, 1917, 1909, 49, 1173, 1186, 1799, 1857, 1580,
	81, 1186, 1856, 1835, 1749, 1186, 1836, 518, 518, 1746,
	1675, 49, 1186, 1142, 1472, 96, 96, 96, 96, 96,
	1670, 518, 1136, 1142, 1006, 324, 1621, 1619, 1618, 1622,
	1186, 1186, 1617, 82, 1595, 1186, 1543, 1475, 1101, 1186,
	828, 77, 79, 1239, 1498, 1476, 828, 1186, 78, 1184,
	1136, 1322, 1190, 1590, 536, 1186, 1185, 1234, 1553, 1186,
	998, 999, 598, 1172, 849, 849, 1173, 76, 1197, 81,
	1141, 72, 1139, 1142, 849, 695, 1100, 856, 1016, 1099,
	857, 917, 828, 1001, 565, 609, 548, 83, 571, 79,
	1839, 1514, 1899, 1574, 1575, 939, 635, 47, 2167, 515,
	2151, 2138, 82, 2100, 2086, 1997, 48, 1000, 1946, 1942,
	77, 694, 79, 573, 574, 1934, 81, 78, 1933, 1932,
	1928, 62, 1178, 1927, 1926, 1591, 1871, 1814, 49, 79,
	1865, 1809, 1808, 1807, 1757, 1735, 1147, 969, 62, 81,
	96, 1706, 1447, 1679, 1177, 1478, 1626, 1623, 1611, 82,
	1017, 1602, 1573, 518, 518, 577, 81, 96, 593, 593,
	96, 96, 594, 1006, 1570, 1569, 1567, 1559, 1558, 1474,
	1392, 518, 82, 1314, 575, 585, 852, 847, 518, 1343,
	77, 715, 1342, 76, 996, 799, 962, 78, 694, 82,
	1062, 1055, 1512, 76, 2150, 693, 1580, 77, 1765, 2112,
	2070, 2056, 2055, 2054, 78, 96, 76, 1586, 1587, 1588,
	2046, 96, 1585, 1583, 1584, 1576, 1577, 1578, 1579, 1581,
	1582, 298, 2044, 1723, 2060, 2035, 2022, 2008, 1992, 1956,
	1939, 1911, 96, 96, 96, 1874, 96, 1011, 1009, 1010,
	1002, 1003, 1004, 1005, 1007, 1008, 79, 1862, 1842, 1677,
	1590, 96, 1741, 1721, 1697, 62, 1695, 1694, 1692, 610,
	611, 1645, 96, 550, 1644, 1601, 557, 560, 1563, 550,
	1562, 1539, 1534, 81, 1315, 518, 96, 631, 1307, 1864,
	998, 999, 327, 518, 1463, 1421, 1419, 96, 1406, 1574,
	1575, 1405, 96, 96, 96, 1385, 96, 1341, 798, 1238,
	679, 1089, 1092, 1001, 680, 637, 82, 1096, 1082, 1081,
	1080, 96, 96, 1079, 77, 1078, 1077, 97, 1076, 96,
	1075, 78, 1591, 96, 614, 616, 1074, 1000, 96, 1073,
	1072, 837, 1071, 1070, 619, 1069, 1068, 797, 518, 518,
	310, 1067, 1066, 638, 1059, 1048, 327, 851, 1406, 76,
	854, 96, 963, 553, 96, 666, 96, 96, 96, 96,
	96, 96, 698, 618, 96, 605, 664, 328, 603, 96,
	96, 668, 672, 571, 675, 2122, 96, 2017, 1922, 1002,
	1003, 1004, 1005, 1007, 1008, 1900, 1896, 96, 1870, 519,
	1869, 829, 1580, 1055, 576, 528, 1724, 998, 999, 1457,
	968, 1456, 826, 1574, 1575, 1046, 96, 690, 691, 96,
	1583, 1584, 1576, 1577, 1578, 1579, 1581, 1582, 527, 696,
	1001, 516, 1230, 961, 1897, 799, 627, 629, 2020, 994,
	1229, 1489, 816, 1868, 1449, 1136, 1094, 827, 1514, 1064,
	638, 1095, 1625, 860, 1000, 1624, 1518, 654, 638, 998,
	999, 814, 585, 841, 838, 940, 869, 630, 536, 967,
	1431, 923, 1886, 1144, 1766, 973, 815, 1329, 628, 1574,
	1575, 858, 1001, 910, 908, 911, 915, 912, 1085, 1443,
	1632, 1550, 2103, 938, 2164, 914, 550, 916, 560, 658,
	1850, 942, 935, 2165, 934, 928, 1000, 301, 1189, 809,
	1006, 810, 944, 488, 489, 948, 949, 950, 951, 952,
	947, 1980, 96, 1180, 1469, 305, 896, 955, 956, 2062,
	96, 1979, 799, 1061, 96, 659, 960, 809, 809, 810,
	810, 1978, 96, 96, 1977, 494, 96, 493, 1660, 96,
	1659, 977, 976, 975, 528, 1629, 302, 528, 528, 534,
	992, 1861, 1006, 96, 1016, 96, 96, 1181, 96, 1105,
	1389, 96, 1628, 96, 96, 1656, 96, 986, 518, 306,
	987, 988, 1580, 811, 1105, 1521, 1106, 1462, 1461, 1676,
	1104, 1058, 1460, 1051, 933, 932, 924, 515, 510, 1459,
	627, 73, 1289, 1187, 533, 1164, 73, 86, 1182, 1179,
	1133, 811, 811, 1132, 1008, 1129, 1016, 665, 564, 598,
	1578, 1579, 1581, 1582, 519, 519, 1117, 1119, 1086, 1087,
	435, 1388, 1260, 1225, 819, 1090, 1017, 959, 519, 501,
	1663, 1093, 628, 2061, 1665, 792, 1304, 1961, 958, 601,
	1433, 440, 535, 817, 1304, 1138, 436, 1574, 1575, 1097,
	327, 85, 525, 833, 1507, 1109, 1311, 96, 818, 2110,
	941, 1309, 655, 1130, 617, 1113, 842, 936, 96, 96,
	96, 437, 1184, 96, 96, 1184, 998, 999, 1017, 1684,
	96, 2175, 550, 1647, 1122, 1437, 641, 863, 1170, 1159,
	439, 1150, 703, 1169, 1329, 1171, 1134, 2164, 1160, 1001,
	1165, 304, 303, 1161, 593, 307, 593, 1162, 96, 1163,
	1124, 327, 2135, 1127, 1441, 1240, 1002, 1003, 1004, 1005,
	1007, 1008, 642, 1000, 656, 640, 902, 1582, 1116, 1232,
	1233, 1417, 807, 800, 1146, 1470, 1146, 1090, 2186, 1093,
	532, 308, 1468, 937, 1426, 1178, 327, 1423, 1087, 1086,
	1580, 1508, 824, 1184, 848, 823, 1168, 1437, 836, 1198,
	519, 519, 1191, 550, 840, 840, 1009, 1010, 1002, 1003,
	1004, 1005, 1007, 1008, 957, 600, 657, 2126, 519, 1006,
	812, 1654, 557, 560, 2049, 519, 296, 84, 1576, 1577,
	1578, 1579, 1581, 1582, 2136, 438, 1102, 1083, 1681, 651,
	1202, 2127, 1220, 624, 1590, 2031, 1993, 1043, 812, 812,
	1561, 820, 837, 96, 96, 96, 1717, 1391, 1228, 96,
	1259, 1115, 96, 87, 1734, 535, 1664, 819, 96, 96,
	96, 96, 96, 1204, 1326, 652, 1962, 1241, 1648, 1682,
	96, 1704, 521, 96, 96, 441, 817, 1503, 2137, 297,
	518, 869, 869, 96, 2134, 1312, 2181, 2163, 96, 686,
	96, 818, 2174, 526, 2161, 625, 1506, 96, 522, 626,
	1879, 1574, 1575, 1523, 432, 1399, 1591, 96, 523, 1715,
	1316, 1303, 519, 1313, 1222, 645, 612, 1504, 608, 328,
	519, 536, 1429, 1310, 1393, 1193, 1937, 1356, 96, 96,
	62, 1337, 2192, 1114, 1972, 496, 1195, 1971, 518, 516,
	511, 896, 896, 1184, 1954, 2041, 1451, 1319, 1452, 1453,
	2187, 435, 1416, 1631, 1323, 96, 1196, 96, 1331, 96,
	1439, 1402, 1394, 96, 1286, 1445, 849, 96, 1194, 1348,
	1348, 1359, 440, 1370, 1846, 519, 519, 436, 1831, 1382,
	1383, 1384, 745, 328, 795, 2173, 1477, 1398, 1479, 1223,
	96, 974, 1505, 869, 965, 1584, 1576, 1577, 1578, 1579,
	1581, 1582, 437, 73, 1580, 1680, 1442, 1432, 2096, 1574,
	1575, 1832, 497, 1098, 2179, 1450, 1907, 954, 685, 1938,
	918, 439, 1795, 536, 922, 550, 2191, 1004, 1005, 1007,
	1008, 1700, 725, 560, 1849, 1881, 1955, 550, 1361, 1465,
	1466, 1848, 1408, 982, 1471, 638, 1407, 1473, 1418, 1467,
	1894, 1420, 1712, 896, 1155, 685, 869, 1517, 1590, 560,
	1284, 1287, 560, 920, 1499, 1711, 1845, 1454, 2180, 93,
	93, 684, 299, 1491, 624, 921, 443, 1908, 533, 442,
	1494, 536, 1493, 426, 427, 428, 1497, 583, 2182, 1283,
	447, 869, 582, 461, 1516, 1170, 686, 676, 1509, 1481,
	1169, 447, 1171, 1827, 499, 1828, 1300, 983, 684, 1796,
	542, 542, 1580, 1503, 299, 1797, 896, 299, 299, 561,
	299, 1298, 1690, 93, 568, 1872, 438, 1952, 1524, 1522,
	1591, 1428, 1506, 1847, 1830, 1708, 1496, 1606, 1552, 1340,
	536, 2034, 1480, 1833, 1936, 1501, 1483, 1605, 1538, 1953,
	1740, 896, 1662, 1504, 1568, 1533, 1434, 1188, 1140, 1128,
	1642, 1125, 1549, 1168, 661, 660, 1590, 653, 1502, 1201,
	560, 1203, 650, 649, 550, 648, 441, 647, 646, 643,
	498, 1643, 1285, 1893, 581, 1294, 572, 1065, 96, 96,
	946, 1339, 2130, 1295, 2093, 1296, 1671, 1820, 1651, 1301,
	1653, 1652, 1650, 1630, 1485, 519, 1537, 1226, 1218, 1246,
	1608, 1609, 1610, 96, 1540, 1166, 1829, 96, 855, 96,
	1576, 1577, 1578, 1579, 1581, 1582, 96, 853, 1505, 518,
	1627, 850, 1556, 1557, 845, 825, 1696, 821, 1591, 96,
	1641, 1634, 96, 813, 1754, 1487, 1987, 688, 580, 579,
	1693, 546, 327, 1655, 96, 1668, 2165, 1831, 1661, 1666,
	1824, 89, 1236, 930, 1673, 1600, 1989, 1725, 1822, 895,
	1121, 1672, 1826, 73, 1674, 1701, 1613, 1722, 1669, 1105,
	1105, 1683, 1685, 1686, 1416, 1120, 1118, 328, 1691, 3,
	1832, 322, 28, 1892, 1743, 321, 27, 320, 26, 2051,
	1297, 1839, 96, 319, 12, 636, 1710, 1299, 1703, 1713,
	487, 1825, 2088, 1709, 1395, 1718, 1719, 689, 1657, 1714,
	1658, 547, 1237, 431, 692, 1585, 1583, 1584, 1576, 1577,
	1578, 1579, 1581, 1582, 1126, 1531, 1123, 299, 586, 299,
	461, 461, 569, 570, 2074, 1425, 1877, 1750, 328, 1221,
	1529, 1217, 566, 1149, 1435, 993, 1753, 323, 11, 836,
	913, 1726, 1759, 1760, 1761, 1769, 1767, 909, 836, 96,
	96, 96, 1772, 554, 1774, 28, 490, 491, 550, 27,
	444, 26, 1827, 328, 1828, 861, 96, 12, 1175, 2189,
	2190, 96, 2123, 96, 1702, 96, 96, 96, 1642, 2077,
	96, 96, 1904, 518, 1815, 1803, 1844, 1802, 1687, 985,
	1840, 1729, 1843, 1830, 1526, 313, 10, 869, 1678, 1643,
	1620, 1499, 1833, 670, 1527, 1816, 1458, 1819, 1532, 1390,
	312, 8, 314, 4, 1484, 96, 96, 1387, 1747, 1574,
	1575, 11, 518, 998, 999, 1386, 1642, 1336, 869, 869,
	1052, 1642, 96, 96, 671, 1875, 96, 869, 869, 1924,
	1873, 1246, 606, 794, 518, 1878, 96, 1643, 1860, 1903,
	1503, 2109, 1643, 96, 998, 999, 1986, 896, 1641, 613,
	1762, 1902, 461, 461, 670, 669, 1867, 519, 1882, 1506,
	869, 1876, 1912, 1482, 1062, 1829, 1060, 536, 1884, 10,
	1800, 1916, 1501, 500, 1960, 598, 96, 433, 896, 896,
	1504, 1810, 945, 1901, 8, 644, 4, 896, 896, 1889,
	1890, 1000, 1898, 1895, 1720, 1502, 1641, 447, 2125, 1528,
	1929, 1641, 1560, 299, 998, 999, 1530, 2004, 2030, 1338,
	1063, 46, 1639, 719, 1821, 519, 1633, 1212, 1211, 330,
	896, 931, 741, 503, 461, 674, 461, 1001, 677, 1347,
	1252, 96, 796, 96, 743, 327, 96, 866, 638, 744,
	867, 1091, 731, 542, 96, 864, 1935, 1153, 1308, 1327,
	327, 1000, 1548, 1056, 299, 1505, 868, 711, 898, 723,
	1642, 722, 1324, 602, 1905, 1866, 458, 61, 93, 454,
	1440, 1863, 981, 1947, 742, 96, 1227, 1883, 1888, 299,
	1964, 1643, 978, 1966, 299, 299, 299, 1948, 843, 1649,
	96, 1963, 837, 518, 869, 1988, 524, 96, 1642, 1571,
	604, 1368, 1360, 299, 299, 96, 1982, 1975, 1976, 1357,
	791, 93, 1995, 96, 1981, 93, 2016, 667, 1990, 1643,
	461, 802, 96, 96, 2003, 1044, 1154, 2014, 634, 1155,
	1246, 1446, 1174, 697, 895, 895, 2021, 2007, 2024, 2001,
	1641, 989, 2023, 461, 1950, 545, 461, 544, 93, 461,
	461, 461, 461, 461, 896, 2011, 953, 1207, 632, 1965,
	329, 461, 461, 96, 919, 1192, 1037, 1034, 447, 2036,
	998, 999, 2010, 492, 2043, 2045, 623, 622, 1641, 972,
	1246, 1219, 520, 1246, 1401, 2185, 1251, 1258, 96, 96,
	2050, 1646, 2102, 1001, 2040, 2039, 80, 2059, 542, 1984,
	96, 568, 2029, 869, 96, 1427, 34, 32, 2047, 29,
	24, 1968, 518, 2068, 22, 2066, 21, 1000, 20, 96,
	2069, 31, 19, 30, 18, 96, 16, 15, 2078, 14,
	13, 327, 96, 96, 45, 2083, 536, 44, 2076, 2075,
	2072, 43, 42, 41, 40, 2048, 895, 7, 6, 5,
	73, 2, 2080, 2084, 2079, 96, 1, 96, 2002, 0,
	96, 0, 327, 896, 0, 2090, 1362, 0, 0, 1574,
	1575, 0, 1998, 1006, 0, 0, 0, 2098, 0, 0,
	0, 0, 2113, 2111, 96, 2115, 0, 96, 2114, 2108,
	2099, 0, 869, 0, 1642, 0, 0, 0, 1403, 0,
	0, 2118, 2121, 2119, 299, 2117, 519, 2087, 2116, 895,
	0, 0, 1110, 0, 0, 1643, 299, 0, 0, 0,
	0, 96, 1589, 96, 299, 1131, 2140, 1016, 299, 328,
	2147, 1137, 0, 2145, 0, 0, 1853, 0, 0, 0,
	2081, 96, 1859, 2146, 895, 299, 2158, 1157, 1158, 2149,
	299, 2162, 896, 299, 2160, 461, 461, 2166, 461, 0,
	96, 1455, 0, 2171, 0, 2168, 2172, 0, 0, 2170,
	0, 2104, 1580, 0, 1641, 998, 999, 2071, 0, 2184,
	2183, 0, 701, 701, 2144, 0, 2188, 0, 869, 0,
	0, 804, 0, 1246, 1246, 0, 1403, 1246, 1001, 1017,
	0, 2193, 0, 0, 0, 0, 0, 520, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 520, 1000, 2105, 2106, 2107, 1590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 896, 1200,
	0, 868, 868, 898, 898, 0, 0, 2128, 0, 0,
	299, 299, 299, 0, 0, 299, 1208, 0, 0, 0,
	0, 0, 568, 0, 0, 0, 0, 0, 1006, 0,
	519, 0, 0, 0, 0, 0, 1011, 1009, 1010, 1002,
	1003, 1004, 1005, 1007, 1008, 1362, 1362, 0, 1591, 0,
	299, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1958, 0, 0, 0, 519,
	0, 0, 979, 0, 984, 0, 0, 0, 0, 0,
	991, 0, 1016, 0, 0, 0, 0, 897, 0, 0,
	0, 519, 1038, 1039, 1040, 1041, 1042, 0, 0, 0,
	0, 0, 1050, 520, 520, 0, 1362, 1362, 1362, 0,
	0, 2000, 1057, 868, 0, 898, 0, 720, 59, 0,
	0, 520, 0, 0, 0, 0, 1246, 0, 520, 0,
	0, 0, 0, 0, 0, 1585, 1583, 1584, 1576, 1577,
	1578, 1579, 1581, 1582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 299, 1396, 1397, 0, 0,
	0, 1110, 0, 0, 1404, 0, 59, 0, 0, 0,
	1409, 1410, 1412, 1414, 1415, 0, 868, 0, 898, 0,
	0, 0, 1422, 0, 0, 1424, 299, 0, 0, 0,
	0, 529, 328, 0, 537, 299, 0, 0, 0, 0,
	299, 59, 1444, 0, 0, 0, 0, 328, 0, 299,
	0, 868, 0, 898, 0, 0, 0, 0, 0, 299,
	895, 0, 0, 0, 0, 520, 0, 0, 865, 0,
	0, 0, 329, 520, 0, 0, 0, 0, 0, 0,
	1200, 1200, 0, 1010, 1002, 1003, 1004, 1005, 1007, 1008,
	519, 895, 895, 0, 0, 0, 0, 0, 0, 0,
	895, 895, 0, 0, 0, 1362, 1362, 972, 0, 972,
	0, 461, 0, 0, 0, 299, 0, 0, 0, 1490,
	0, 2101, 0, 0, 0, 0, 0, 0, 520, 520,
	0, 0, 0, 895, 0, 0, 329, 0, 0, 0,
	0, 0, 299, 1251, 1770, 0, 0, 0, 0, 0,
	0, 0, 1251, 1775, 0, 0, 0, 0, 0, 1362,
	1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
	1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 0, 1362,
	0, 0, 1155, 0, 0, 1806, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1535, 1536, 0, 0, 0, 0, 0, 0, 519,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 701, 0, 0, 0, 328, 0,
	1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
	1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 0, 1288, 0, 1290, 1291, 1292, 1293, 328,
	0, 0, 1597, 1598, 1599, 0, 0, 895, 537, 0,
	0, 0, 0, 0, 1317, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1344, 1345, 0, 1638,
	1358, 0, 1369, 1371, 1376, 1379, 1380, 1381, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 897, 0, 0, 0, 804, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 299, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 520, 0,
	0, 0, 0, 0, 0, 1688, 0, 0, 0, 1110,
	0, 972, 1438, 0, 0, 0, 895, 868, 1698, 898,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 0, 0, 299, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1733, 0, 868, 868,
	898, 898, 0, 0, 1464, 1362, 0, 868, 868, 898,
	898, 1738, 1739, 0, 0, 0, 0, 0, 1974, 0,
	0, 0, 0, 0, 897, 0, 0, 0, 0, 0,
	329, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 898, 0, 1764, 0, 0, 1492, 0, 0,
	0, 0, 991, 865, 865, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 0, 1798, 529, 897, 0, 0,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1519, 1520, 0, 0, 0, 0, 1525, 0, 1362,
	0, 1817, 1818, 1110, 0, 0, 0, 0, 0, 0,
	0, 0, 897, 0, 0, 0, 329, 1638, 568, 0,
	0, 0, 0, 1851, 0, 1852, 0, 299, 1854, 1855,
	1544, 0, 1858, 299, 0, 0, 0, 1551, 0, 0,
	1555, 895, 0, 0, 0, 0, 0, 0, 0, 1564,
	0, 0, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 1638, 898, 568, 1208, 0,
	1638, 0, 0, 0, 1050, 0, 0, 0, 0, 0,
	1376, 1376, 1376, 0, 299, 299, 0, 0, 299, 0,
	0, 0, 0, 0, 0, 0, 0, 1362, 1733, 0,
	0, 0, 0, 0, 0, 1910, 0, 0, 0, 0,
	0, 0, 0, 1635, 0, 0, 0, 0, 865, 0,
	520, 0, 0, 0, 0, 529, 0, 0, 529, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 1930, 0,
	0, 0, 0, 0, 0, 701, 0, 0, 0, 0,
	1047, 0, 1049, 865, 0, 0, 0, 804, 0, 1053,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 898, 0, 0, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1110, 0, 1949, 0, 0, 1951, 0,
	0, 0, 0, 0, 0, 0, 299, 0, 0, 1638,
	0, 1957, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1736, 0, 0, 1737,
	0, 0, 0, 0, 1983, 0, 0, 568, 0, 0,
	0, 1742, 0, 0, 0, 0, 0, 1638, 0, 0,
	1751, 0, 299, 59, 0, 0, 59, 0, 1755, 2006,
	0, 1464, 868, 0, 898, 0, 0, 299, 0, 0,
	0, 0, 0, 0, 0, 1733, 1771, 59, 0, 59,
	1773, 0, 0, 0, 568, 1733, 0, 1574, 1575, 0,
	1592, 1593, 1594, 0, 59, 0, 0, 0, 0, 59,
	0, 0, 0, 1914, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1804, 1805, 2033, 0, 0, 0, 0,
	0, 0, 1811, 1812, 1813, 972, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 897, 0,
	1589, 0, 0, 0, 0, 0, 0, 0, 1841, 0,
	2052, 2053, 0, 0, 0, 0, 0, 0, 868, 0,
	898, 0, 2064, 0, 0, 0, 2065, 0, 0, 897,
	897, 0, 0, 0, 0, 0, 0, 0, 897, 897,
	0, 568, 0, 0, 0, 0, 0, 1733, 0, 0,
	1580, 0, 0, 0, 1733, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 897, 0, 2089, 0, 0, 1887, 2097, 0, 568,
	0, 0, 299, 0, 0, 1595, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1247, 0, 0, 0, 0,
	0, 0, 0, 1638, 1590, 0, 2006, 0, 1915, 1733,
	0, 0, 1918, 1919, 0, 0, 0, 1921, 0, 0,
	0, 0, 0, 0, 1923, 0, 1925, 0, 0, 520,
	0, 1306, 0, 0, 1931, 0, 0, 0, 0, 865,
	0, 0, 0, 299, 0, 568, 0, 0, 0, 0,
	0, 0, 329, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2159, 0, 0, 0, 1940, 0, 0,
	865, 865, 0, 0, 0, 0, 1591, 0, 0, 865,
	865, 0, 1733, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 998, 999, 0, 1018, 1019, 1020,
	1028, 1029, 1030, 0, 0, 897, 0, 0, 0, 0,
	1021, 0, 865, 0, 0, 0, 1973, 1001, 0, 0,
	1032, 59, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1000, 0, 0, 0, 537, 0, 1015, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1586, 1587,
	1588, 2009, 0, 1585, 1583, 1584, 1576, 1577, 1578, 1579,
	1581, 1582, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2025, 2026, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1006, 0, 0,
	0, 0, 0, 520, 0, 0, 0, 0, 0, 0,
	0, 2038, 0, 0, 897, 59, 1025, 1033, 0, 59,
	0, 0, 0, 0, 2042, 0, 0, 0, 0, 0,
	0, 0, 1031, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 520, 0, 0, 1023, 865, 1515, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	804, 0, 0, 0, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1022, 0, 0, 0,
	0, 0, 0, 0, 0, 1306, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 897, 0, 1049, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 998, 999, 0, 1018, 1019,
	1020, 1028, 1029, 1030, 0, 0, 0, 0, 1026, 0,
	0, 1021, 0, 0, 0, 0, 0, 0, 1001, 0,
	0, 1032, 0, 0, 0, 865, 0, 0, 0, 0,
	0, 0, 0, 0, 1049, 329, 0, 0, 0, 0,
	0, 2141, 1000, 0, 0, 0, 0, 0, 1015, 0,
	329, 0, 1574, 1575, 0, 1592, 1593, 1594, 0, 0,
	0, 0, 0, 0, 2157, 2157, 0, 0, 1913, 897,
	0, 0, 1024, 0, 0, 1012, 1013, 1014, 1027, 0,
	1011, 1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008, 0,
	0, 0, 2157, 520, 0, 0, 1943, 0, 1006, 0,
	0, 0, 0, 998, 999, 1589, 1018, 1019, 1020, 1028,
	1029, 1030, 0, 0, 865, 0, 1247, 1025, 1033, 1021,
	0, 0, 0, 0, 0, 0, 1001, 2157, 0, 1032,
	0, 0, 0, 1031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	1000, 0, 1016, 0, 0, 1580, 1015, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1247, 0, 0, 1247,
	0, 0, 0, 0, 0, 0, 59, 1022, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1595, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 1590,
	865, 0, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 1025, 1033, 0, 0, 0,
	0, 329, 0, 0, 0, 0, 0, 0, 0, 1026,
	0, 1031, 0, 0, 0, 0, 0, 1574, 1575, 0,
	1592, 1593, 1594, 0, 1023, 0, 0, 0, 35, 0,
	1016, 0, 329, 1745, 0, 0, 0, 0, 0, 36,
	63, 0, 0, 0, 0, 1574, 1575, 0, 1592, 1593,
	1594, 1591, 38, 0, 0, 1022, 0, 0, 0, 1574,
	1575, 1744, 1592, 1593, 1594, 0, 65, 0, 0, 0,
	1589, 0, 39, 1024, 72, 0, 1012, 1013, 1014, 1027,
	0, 1011, 1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008,
	0, 0, 0, 52, 0, 0, 0, 1616, 1589, 0,
	47, 0, 1017, 66, 0, 0, 0, 51, 59, 48,
	0, 0, 1589, 0, 0, 0, 0, 1026, 0, 0,
	1580, 0, 0, 0, 0, 53, 0, 0, 0, 0,
	0, 49, 0, 1586, 1587, 1588, 0, 0, 1585, 1583,
	1584, 1576, 1577, 1578, 1579, 1581, 1582, 0, 1580, 1247,
	1247, 0, 0, 1247, 0, 1595, 0, 0, 0, 0,
	0, 537, 1580, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1590, 0, 0, 0, 0, 0,
	0, 1024, 0, 1595, 1012, 1013, 1014, 1027, 0, 1011,
	1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008, 0, 0,
	0, 0, 1590, 0, 0, 1615, 0, 0, 0, 54,
	0, 0, 0, 0, 50, 0, 1590, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 69, 37, 0, 55, 0, 56, 0,
	67, 0, 0, 0, 0, 57, 1591, 0, 0, 79,
	0, 0, 0, 0, 0, 60, 0, 0, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 1591, 0, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1591, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 0, 0, 1991, 0, 0, 82,
	0, 0, 0, 0, 0, 59, 0, 77, 0, 0,
	0, 0, 0, 0, 78, 0, 0, 0, 1586, 1587,
	1588, 0, 1247, 1585, 1583, 1584, 1576, 1577, 1578, 1579,
	1581, 1582, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1586, 1587, 1588, 0,
	0, 1585, 1583, 1584, 1576, 1577, 1578, 1579, 1581, 1582,
	1586, 1587, 1588, 0, 0, 1585, 1583, 1584, 1576, 1577,
	1578, 1579, 1581, 1582, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1049, 0, 0, 0, 0, 0, 0, 0, 326, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 98, 99, 345, 100, 346, 347,
	348, 349, 243, 350, 351, 352, 353, 101, 102, 103,
	244, 245, 246, 247, 104, 248, 249, 354, 105, 250,
	251, 106, 107, 355, 356, 252, 253, 254, 357, 108,
	255, 358, 331, 359, 109, 110, 111, 0, 112, 360,
	113, 114, 115, 361, 332, 116, 117, 362, 363, 364,
	365, 366, 367, 118, 119, 300, 120, 256, 121, 257,
	258, 368, 122, 369, 123, 370, 371, 372, 124, 125,
	373, 126, 374, 0, 375, 259, 127, 128, 129, 260,
	261, 376, 377, 378, 130, 131, 262, 0, 132, 379,
	133, 380, 381, 333, 382, 134, 263, 383, 264, 384,
	135, 136, 137, 138, 265, 266, 335, 385, 142, 386,
	139, 387, 334, 140, 267, 141, 268, 269, 270, 388,
	271, 389, 336, 143, 144, 337, 145, 146, 390, 148,
	147, 391, 272, 338, 149, 339, 392, 150, 393, 394,
	151, 0, 152, 153, 154, 156, 273, 155, 340, 157,
	158, 160, 159, 395, 396, 397, 274, 161, 275, 162,
	163, 398, 164, 399, 400, 165, 401, 402, 166, 276,
	341, 167, 342, 277, 168, 169, 170, 171, 172, 403,
	278, 173, 279, 174, 404, 175, 176, 177, 178, 179,
	280, 180, 181, 405, 182, 183, 184, 185, 186, 188,
	189, 187, 190, 191, 192, 193, 406, 194, 343, 195,
	196, 281, 197, 0, 201, 202, 203, 204, 407, 282,
	205, 206, 207, 408, 208, 198, 199, 209, 344, 210,
	283, 284, 211, 409, 217, 212, 213, 200, 214, 216,
	285, 215, 286, 410, 218, 411, 219, 220, 221, 222,
	223, 412, 287, 288, 289, 413, 414, 224, 290, 291,
	415, 225, 226, 227, 228, 416, 417, 229, 230, 231,
	232, 418, 233, 419, 292, 234, 235, 236, 293, 294,
	420, 421, 237, 422, 423, 424, 425, 238, 239, 240,
	241, 242, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 326, 0, 0, 0, 0, 0, 0,
	1727, 0, 0, 0, 0, 0, 0, 0, 1728, 98,
	99, 345, 100, 346, 347, 348, 349, 243, 350, 351,
	352, 353, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 354, 105, 250, 251, 106, 107, 355, 356,
	252, 253, 254, 357, 108, 255, 358, 331, 359, 109,
	110, 111, 0, 112, 360, 113, 114, 115, 361, 332,
	116, 117, 362, 363, 364, 365, 366, 367, 118, 119,
	300, 120, 256, 121, 257, 258, 368, 122, 369, 123,
	370, 371, 372, 124, 125, 373, 126, 374, 0, 375,
	259, 127, 128, 129, 260, 261, 376, 377, 378, 130,
	131, 262, 0, 132, 379, 133, 380, 381, 333, 382,
	134, 263, 383, 264, 384, 135, 136, 137, 138, 265,
	266, 335, 385, 142, 386, 139, 387, 334, 140, 267,
	141, 268, 269, 270, 388, 271, 389, 336, 143, 144,
	337, 145, 146, 390, 148, 147, 391, 272, 338, 149,
	339, 392, 150, 393, 394, 151, 0, 152, 153, 154,
	156, 273, 155, 340, 157, 158, 160, 159, 395, 396,
	397, 274, 161, 275, 162, 163, 398, 164, 399, 400,
	165, 401, 402, 166, 276, 341, 167, 342, 277, 168,
	169, 170, 171, 172, 403, 278, 173, 279, 174, 404,
	175, 176, 177, 178, 179, 280, 180, 181, 405, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 406, 194, 343, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 407, 282, 205, 206, 207, 408, 208,
	198, 199, 209, 344, 210, 283, 284, 211, 409, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 410, 218,
	411, 219, 220, 221, 222, 223, 412, 287, 288, 289,
	413, 414, 224, 290, 291, 415, 225, 226, 227, 228,
	416, 417, 229, 230, 231, 232, 418, 233, 419, 292,
	234, 235, 236, 293, 294, 420, 421, 237, 422, 423,
	424, 425, 238, 239, 240, 241, 242, 0, 0, 0,
	326, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2082, 98, 99, 345, 100,
	346, 347, 348, 349, 243, 350, 351, 352, 353, 101,
	102, 103, 244, 245, 246, 247, 104, 248, 249, 354,
	105, 250, 251, 106, 107, 355, 356, 252, 253, 254,
	357, 108, 255, 358, 331, 359, 109, 110, 111, 0,
	112, 360, 113, 114, 115, 361, 332, 116, 117, 362,
	363, 364, 365, 366, 367, 118, 119, 300, 120, 256,
	121, 257, 258, 368, 122, 369, 123, 370, 371, 372,
	124, 125, 373, 126, 374, 0, 375, 259, 127, 128,
	129, 260, 261, 376, 377, 378, 130, 131, 262, 0,
	132, 379, 133, 380, 381, 333, 382, 134, 263, 383,
	264, 384, 135, 136, 137, 138, 265, 266, 335, 385,
	142, 386, 139, 387, 334, 140, 267, 141, 268, 269,
	270, 388, 271, 389, 336, 143, 144, 337, 145, 146,
	390, 148, 147, 391, 272, 338, 149, 339, 392, 150,
	393, 394, 151, 0, 152, 153, 154, 156, 273, 155,
	340, 157, 158, 160, 159, 395, 396, 397, 274, 161,
	275, 162, 163, 398, 164, 399, 400, 165, 401, 402,
	166, 276, 341, 167, 342, 277, 168, 169, 170, 171,
	172, 403, 278, 173, 279, 174, 404, 175, 176, 177,
	178, 179, 280, 180, 181, 405, 182, 183, 184, 185,
	186, 188, 189, 187, 190, 191, 192, 193, 406, 194,
	343, 195, 196, 281, 197, 0, 201, 202, 203, 204,
	407, 282, 205, 206, 207, 408, 208, 198, 199, 209,
	344, 210, 283, 284, 211, 409, 217, 212, 213, 200,
	214, 216, 285, 215, 286, 410, 218, 411, 219, 220,
	221, 222, 223, 412, 287, 288, 289, 413, 414, 224,
	290, 291, 415, 225, 226, 227, 228, 416, 417, 229,
	230, 231, 232, 418, 233, 419, 292, 234, 235, 236,
	293, 294, 420, 421, 237, 422, 423, 424, 425, 238,
	239, 240, 241, 242, 326, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 830, 0, 0,
	98, 99, 345, 100, 346, 347, 348, 349, 243, 350,
	351, 352, 353, 101, 102, 103, 244, 245, 246, 247,
	104, 248, 249, 354, 105, 250, 251, 106, 107, 355,
	356, 252, 253, 254, 357, 108, 255, 358, 331, 359,
	109, 110, 111, 0, 112, 360, 113, 114, 115, 361,
	332, 116, 117, 362, 363, 364, 365, 366, 367, 118,
	119, 300, 120, 256, 121, 257, 258, 368, 122, 369,
	123, 370, 371, 372, 124, 125, 373, 126, 374, 0,
	375, 259, 127, 128, 129, 260, 261, 376, 377, 378,
	130, 131, 262, 0, 132, 379, 133, 380, 381, 333,
	382, 134, 263, 383, 264, 384, 135, 136, 137, 138,
	265, 266, 335, 385, 142, 386, 139, 387, 334, 140,
	267, 141, 268, 269, 270, 388, 271, 389, 336, 143,
	144, 337, 145, 146, 390, 148, 147, 391, 272, 338,
	149, 339, 392, 150, 393, 394, 151, 0, 152, 153,
	154, 156, 273, 155, 340, 157, 158, 160, 159, 395,
	396, 397, 274, 161, 275, 162, 163, 398, 164, 399,
	400, 165, 401, 402, 166, 276, 341, 167, 342, 277,
	168, 169, 170, 171, 172, 403, 278, 173, 279, 174,
	404, 175, 176, 177, 178, 179, 280, 180, 181, 405,
	182, 183, 184, 185, 186, 188, 189, 187, 190, 191,
	192, 193, 406, 194, 343, 195, 196, 281, 197, 0,
	201, 202, 203, 204, 407, 282, 205, 206, 207, 408,
	208, 198, 199, 209, 344, 210, 283, 284, 211, 409,
	217, 212, 213, 200, 214, 216, 285, 215, 286, 410,
	218, 411, 219, 220, 221, 222, 223, 412, 287, 288,
	289, 413, 414, 224, 290, 291, 415, 225, 226, 227,
	228, 416, 417, 229, 230, 231, 232, 418, 233, 419,
	292, 234, 235, 236, 293, 294, 420, 421, 237, 422,
	423, 424, 425, 238, 239, 240, 241, 242, 739, 728,
	729, 726, 727, 718, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 0, 755, 721, 0, 0, 0, 101, 102, 103,
	244, 770, 246, 771, 104, 772, 773, 0, 105, 250,
	251, 106, 107, 724, 754, 774, 775, 254, 0, 108,
	766, 0, 747, 0, 109, 110, 111, 0, 112, 0,
	113, 114, 115, 0, 332, 116, 117, 0, 748, 750,
	0, 749, 751, 118, 119, 300, 120, 776, 121, 777,
	778, 805, 122, 0, 123, 0, 0, 0, 769, 125,
	0, 126, 0, 0, 0, 712, 127, 128, 129, 756,
	757, 735, 0, 0, 130, 131, 779, 0, 132, 0,
	133, 0, 0, 333, 0, 134, 767, 0, 264, 0,
	135, 136, 137, 138, 763, 765, 335, 0, 142, 0,
	139, 0, 334, 140, 780, 141, 781, 782, 783, 0,
	746, 0, 336, 143, 144, 337, 145, 146, 0, 148,
	147, 0, 768, 338, 149, 339, 0, 150, 0, 0,
	151, 0, 152, 153, 154, 156, 273, 155, 340, 157,
	158, 160, 159, 707, 0, 736, 764, 161, 784, 162,
	163, 0, 164, 0, 0, 165, 0, 0, 166, 276,
	341, 167, 342, 758, 168, 169, 170, 171, 172, 0,
	759, 173, 279, 174, 0, 175, 176, 177, 178, 179,
	785, 180, 181, 0, 182, 183, 184, 185, 186, 188,
	189, 187, 190, 191, 192, 193, 0, 194, 343, 195,
	196, 713, 197, 0, 201, 202, 203, 204, 79, 282,
	205, 206, 207, 752, 208, 198, 199, 209, 344, 210,
	786, 284, 211, 0, 217, 212, 213, 200, 214, 216,
	787, 215, 760, 0, 218, 81, 219, 220, 221, 222,
	223, 0, 287, 788, 789, 0, 0, 224, 761, 762,
	734, 225, 226, 227, 228, 0, 0, 229, 230, 231,
	232, 753, 233, 0, 292, 234, 235, 236, 599, 790,
	0, 0, 237, 0, 0, 0, 77, 238, 239, 240,
	241, 242, 708, 78, 0, 0, 0, 0, 706, 0,
	0, 0, 0, 704, 705, 739, 728, 729, 726, 727,
	718, 0, 714, 0, 0, 0, 0, 717, 0, 0,
	0, 98, 99, 1333, 100, 0, 0, 0, 0, 755,
	721, 0, 0, 0, 101, 102, 103, 244, 770, 246,
	771, 104, 772, 773, 0, 105, 250, 251, 106, 107,
	724, 754, 774, 775, 254, 0, 108, 766, 0, 747,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 332, 116, 117, 0, 748, 750, 0, 749, 751,
	118, 119, 300, 120, 776, 121, 777, 778, 0, 122,
	0, 123, 0, 1334, 0, 769, 125, 0, 126, 0,
	0, 0, 712, 127, 128, 129, 756, 757, 735, 0,
	0, 130, 131, 779, 0, 132, 0, 133, 0, 0,
	333, 0, 134, 767, 0, 264, 0, 135, 136, 137,
	138, 763, 765, 335, 0, 142, 0, 139, 0, 334,
	140, 780, 141, 781, 782, 783, 0, 746, 0, 336,
	143, 144, 337, 145, 146, 0, 148, 147, 0, 768,
	338, 149, 339, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 340, 157, 158, 160, 159,
	707, 0, 736, 764, 161, 784, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 341, 167, 342,
	758, 168, 169, 170, 171, 172, 0, 759, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 785, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 343, 195, 196, 713, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	752, 208, 198, 199, 209, 344, 210, 786, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 787, 215, 760,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	788, 789, 0, 0, 224, 761, 762, 734, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 753, 233,
	0, 292, 234, 235, 236, 293, 790, 1332, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 708,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	704, 705, 1335, 739, 728, 729, 726, 727, 718, 714,
	1330, 0, 0, 0, 717, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 755, 721, 0,
	0, 0, 101, 102, 103, 244, 770, 246, 771, 104,
	772, 773, 0, 105, 250, 251, 106, 107, 724, 754,
	774, 775, 254, 0, 108, 766, 0, 747, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 332,
	116, 117, 0, 748, 750, 0, 749, 751, 118, 119,
	300, 120, 776, 121, 777, 778, 0, 122, 0, 123,
	0, 0, 0, 769, 125, 0, 126, 0, 0, 0,
	712, 127, 128, 129, 756, 757, 735, 0, 0, 130,
	131, 779, 0, 132, 0, 133, 0, 0, 333, 0,
	134, 767, 0, 264, 0, 135, 136, 137, 138, 763,
	765, 335, 0, 142, 0, 139, 0, 334, 140, 780,
	141, 781, 782, 783, 0, 746, 0, 336, 143, 144,
	337, 145, 146, 0, 148, 147, 0, 768, 338, 149,
	339, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 340, 157, 158, 160, 159, 707, 0,
	736, 764, 161, 784, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 341, 167, 342, 758, 168,
	169, 170, 171, 172, 0, 759, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 785, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 343, 195, 196, 713, 197, 0, 201,
	202, 203, 204, 79, 282, 205, 206, 207, 752, 208,
	198, 199, 209, 344, 210, 786, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 787, 215, 760, 0, 218,
	81, 219, 220, 221, 222, 223, 0, 287, 788, 789,
	0, 0, 224, 761, 762, 734, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 753, 233, 0, 292,
	234, 235, 236, 599, 790, 0, 0, 237, 0, 0,
	0, 77, 238, 239, 240, 241, 242, 708, 78, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 704, 705,
	739, 728, 729, 726, 727, 718, 0, 714, 0, 0,
	0, 0, 717, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 755, 721, 0, 0, 0, 101,
	102, 103, 244, 770, 246, 771, 104, 772, 773, 1372,
	105, 250, 251, 106, 107, 724, 754, 774, 775, 254,
	0, 108, 766, 0, 747, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 332, 116, 117, 0,
	748, 750, 0, 749, 751, 118, 119, 300, 120, 776,
	121, 777, 778, 0, 122, 0, 123, 0, 0, 0,
	769, 125, 0, 126, 0, 0, 0, 712, 127, 128,
	129, 756, 757, 735, 0, 0, 130, 131, 779, 0,
	132, 0, 133, 0, 1377, 333, 0, 134, 767, 0,
	264, 0, 135, 136, 137, 138, 763, 765, 335, 0,
	142, 0, 139, 0, 334, 140, 780, 141, 781, 782,
	783, 0, 746, 0, 336, 143, 144, 337, 145, 146,
	0, 148, 147, 1373, 768, 338, 149, 339, 0, 150,
	0, 0, 151, 0, 152, 153, 154, 156, 273, 155,
	340, 157, 158, 160, 159, 707, 0, 736, 764, 161,
	784, 162, 163, 0, 164, 0, 0, 165, 0, 0,
	166, 276, 341, 167, 342, 758, 168, 169, 170, 171,
	172, 0, 759, 173, 279, 174, 0, 175, 176, 177,
	178, 179, 785, 180, 181, 0, 182, 183, 184, 185,
	186, 188, 189, 187, 190, 191, 192, 193, 0, 194,
	343, 195, 196, 713, 197, 0, 201, 202, 203, 204,
	0, 282, 205, 206, 207, 752, 208, 198, 199, 209,
	344, 210, 786, 284, 211, 0, 217, 212, 213, 200,
	214, 216, 787, 215, 760, 0, 218, 0, 219, 220,
	221, 222, 223, 0, 287, 788, 789, 0, 1374, 224,
	761, 762, 734, 225, 226, 227, 228, 0, 0, 229,
	230, 231, 232, 753, 233, 0, 292, 234, 235, 236,
	293, 790, 0, 0, 237, 0, 0, 0, 0, 238,
	239, 240, 241, 242, 708, 0, 0, 0, 0, 0,
	706, 0, 0, 0, 0, 704, 705, 739, 728, 729,
	726, 727, 718, 0, 714, 0, 0, 0, 0, 717,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 755, 721, 0, 0, 0, 101, 102, 103, 244,
	770, 246, 771, 104, 772, 773, 0, 105, 250, 251,
	106, 107, 724, 754, 774, 775, 254, 0, 108, 766,
	0, 747, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 332, 116, 117, 0, 748, 750, 0,
	749, 751, 118, 119, 300, 120, 776, 121, 777, 778,
	0, 122, 0, 123, 0, 0, 0, 769, 125, 0,
	126, 0, 0, 0, 712, 127, 128, 129, 756, 757,
	735, 0, 0, 130, 131, 779, 0, 132, 0, 133,
	0, 0, 333, 0, 134, 767, 0, 264, 0, 135,
	136, 137, 138, 763, 765, 335, 0, 142, 0, 139,
	0, 334, 140, 780, 141, 781, 782, 783, 0, 746,
	0, 336, 143, 144, 337, 145, 146, 0, 148, 147,
	0, 768, 338, 149, 339, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 340, 157, 158,
	160, 159, 707, 1667, 736, 764, 161, 784, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 341,
	167, 342, 758, 168, 169, 170, 171, 172, 0, 759,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 785,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 343, 195, 196,
	713, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 752, 208, 198, 199, 209, 344, 210, 786,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 787,
	215, 760, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 788, 789, 0, 0, 224, 761, 762, 734,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	753, 233, 0, 292, 234, 235, 236, 293, 790, 0,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 708, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 704, 705, 702, 739, 728, 729, 726, 727,
	718, 714, 0, 0, 0, 0, 717, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 755,
	721, 0, 0, 0, 101, 102, 103, 244, 770, 246,
	771, 104, 772, 773, 0, 105, 250, 251, 106, 107,
	724, 754, 774, 775, 254, 0, 108, 766, 0, 747,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 332, 116, 117, 0, 748, 750, 0, 749, 751,
	118, 119, 300, 120, 776, 121, 777, 778, 0, 122,
	0, 123, 0, 0, 0, 769, 125, 0, 126, 0,
	0, 0, 712, 127, 128, 129, 756, 757, 735, 0,
	0, 130, 131, 779, 0, 132, 0, 133, 0, 0,
	333, 0, 134, 767, 0, 264, 0, 135, 136, 137,
	138, 763, 765, 335, 0, 142, 0, 139, 0, 334,
	140, 780, 141, 781, 782, 783, 0, 746, 0, 336,
	143, 144, 337, 145, 146, 0, 148, 147, 0, 768,
	338, 149, 339, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 340, 157, 158, 160, 159,
	707, 0, 736, 764, 161, 784, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 341, 167, 342,
	758, 168, 169, 170, 171, 172, 0, 759, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 785, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 343, 195, 196, 713, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	752, 208, 198, 199, 209, 344, 210, 786, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 787, 215, 760,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	788, 789, 0, 0, 224, 761, 762, 734, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 753, 233,
	0, 292, 234, 235, 236, 293, 790, 0, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 708,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	704, 705, 0, 0, 0, 0, 0, 1055, 1325, 714,
	0, 0, 0, 0, 717, 739, 728, 729, 726, 727,
	718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 755,
	721, 0, 0, 0, 101, 102, 103, 244, 770, 246,
	771, 104, 772, 773, 0, 105, 250, 251, 106, 107,
	724, 754, 774, 775, 254, 0, 108, 766, 0, 747,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 332, 116, 117, 0, 748, 750, 0, 749, 751,
	118, 119, 300, 120, 776, 121, 777, 778, 0, 122,
	0, 123, 0, 0, 0, 769, 125, 0, 126, 0,
	0, 0, 712, 127, 128, 129, 756, 757, 735, 0,
	0, 130, 131, 779, 0, 132, 0, 133, 0, 0,
	333, 0, 134, 767, 0, 264, 0, 135, 136, 137,
	138, 763, 765, 335, 0, 142, 0, 139, 0, 334,
	140, 780, 141, 781, 782, 783, 0, 746, 0, 336,
	143, 144, 337, 145, 146, 0, 148, 147, 0, 768,
	338, 149, 339, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 340, 157, 158, 160, 159,
	707, 0, 736, 764, 161, 784, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 341, 167, 342,
	758, 168, 169, 170, 171, 172, 0, 759, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 785, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 343, 195, 196, 713, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	752, 208, 198, 199, 209, 344, 210, 786, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 787, 215, 760,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	788, 789, 0, 0, 224, 761, 762, 734, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 753, 233,
	0, 292, 234, 235, 236, 293, 790, 0, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 708,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	704, 705, 739, 728, 729, 726, 727, 718, 0, 714,
	1801, 0, 0, 0, 717, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 755, 721, 0, 0,
	0, 101, 102, 103, 244, 770, 246, 771, 104, 772,
	773, 0, 105, 250, 251, 106, 107, 724, 754, 774,
	775, 254, 0, 108, 766, 0, 747, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 332, 116,
	117, 0, 748, 750, 0, 749, 751, 118, 119, 300,
	120, 776, 121, 777, 778, 0, 122, 0, 123, 0,
	0, 0, 769, 125, 0, 126, 0, 0, 0, 712,
	127, 128, 129, 756, 757, 735, 0, 0, 130, 131,
	779, 0, 132, 0, 133, 0, 0, 333, 0, 134,
	767, 0, 264, 0, 135, 136, 137, 138, 763, 765,
	335, 0, 142, 0, 139, 0, 334, 140, 780, 141,
	781, 782, 783, 0, 746, 0, 336, 143, 144, 337,
	145, 146, 0, 148, 147, 0, 768, 338, 149, 339,
	0, 150, 0, 0, 151, 0, 152, 153, 154, 156,
	273, 155, 340, 157, 158, 160, 159, 707, 0, 736,
	764, 161, 784, 162, 163, 0, 164, 0, 0, 165,
	0, 0, 166, 276, 341, 167, 342, 758, 168, 169,
	170, 171, 172, 0, 759, 173, 279, 174, 0, 175,
	176, 177, 178, 179, 785, 180, 181, 0, 182, 183,
	184, 185, 186, 188, 189, 187, 190, 191, 192, 193,
	0, 194, 343, 195, 196, 713, 197, 0, 201, 202,
	203, 204, 0, 282, 205, 206, 207, 752, 208, 198,
	199, 209, 344, 210, 786, 284, 211, 0, 217, 212,
	213, 200, 214, 216, 787, 215, 760, 0, 218, 0,
	219, 220, 221, 222, 223, 0, 287, 788, 789, 0,
	0, 224, 761, 762, 734, 225, 226, 227, 228, 0,
	0, 229, 230, 231, 232, 753, 233, 0, 292, 234,
	235, 236, 293, 790, 1758, 0, 237, 0, 0, 0,
	0, 238, 239, 240, 241, 242, 708, 0, 0, 0,
	0, 0, 706, 0, 0, 0, 0, 704, 705, 739,
	728, 729, 726, 727, 718, 0, 714, 0, 0, 0,
	0, 717, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 755, 721, 0, 0, 0, 101, 102,
	103, 244, 770, 246, 771, 104, 772, 773, 0, 105,
	250, 251, 106, 107, 724, 754, 774, 775, 254, 0,
	108, 766, 0, 747, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 332, 116, 117, 0, 748,
	750, 0, 749, 751, 118, 119, 300, 120, 776, 121,
	777, 778, 0, 122, 0, 123, 0, 0, 0, 769,
	125, 0, 126, 0, 0, 0, 712, 127, 128, 129,
	756, 757, 735, 0, 0, 130, 131, 779, 0, 132,
	0, 133, 0, 0, 333, 0, 134, 767, 0, 264,
	0, 135, 136, 137, 138, 763, 765, 335, 0, 142,
	0, 139, 0, 334, 140, 780, 141, 781, 782, 783,
	0, 746, 0, 336, 143, 144, 337, 145, 146, 0,
	148, 147, 0, 768, 338, 149, 339, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 340,
	157, 158, 160, 159, 707, 0, 736, 764, 161, 784,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 341, 167, 342, 758, 168, 169, 170, 171, 172,
	0, 759, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 785, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 343,
	195, 196, 713, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 752, 208, 198, 199, 209, 344,
	210, 786, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 787, 215, 760, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 788, 789, 0, 0, 224, 761,
	762, 734, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 753, 233, 0, 292, 234, 235, 236, 293,
	790, 0, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 708, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 704, 705, 739, 728, 729, 726,
	727, 718, 0, 714, 1748, 0, 0, 0, 717, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	755, 721, 0, 0, 0, 101, 102, 103, 244, 770,
	246, 771, 104, 772, 773, 0, 105, 250, 251, 106,
	107, 724, 754, 774, 775, 254, 0, 108, 766, 0,
	747, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 332, 116, 117, 0, 748, 750, 0, 749,
	751, 118, 119, 300, 120, 776, 121, 777, 778, 805,
	122, 0, 123, 0, 0, 0, 769, 125, 0, 126,
	0, 0, 0, 712, 127, 128, 129, 756, 757, 735,
	0, 0, 130, 131, 779, 0, 132, 0, 133, 0,
	0, 333, 0, 134, 767, 0, 264, 0, 135, 136,
	137, 138, 763, 765, 335, 0, 142, 0, 139, 0,
	334, 140, 780, 141, 781, 782, 783, 0, 746, 0,
	336, 143, 144, 337, 145, 146, 0, 148, 147, 0,
	768, 338, 149, 339, 0, 150, 0, 0, 151, 0,
	152, 153, 154, 156, 273, 155, 340, 157, 158, 160,
	159, 707, 0, 736, 764, 161, 784, 162, 163, 0,
	164, 0, 0, 165, 0, 0, 166, 276, 341, 167,
	342, 758, 168, 169, 170, 171, 172, 0, 759, 173,
	279, 174, 0, 175, 176, 177, 178, 179, 785, 180,
	181, 0, 182, 183, 184, 185, 186, 188, 189, 187,
	190, 191, 192, 193, 0, 194, 343, 195, 196, 713,
	197, 0, 201, 202, 203, 204, 0, 282, 205, 206,
	207, 752, 208, 198, 199, 209, 344, 210, 786, 284,
	211, 0, 217, 212, 213, 200, 214, 216, 787, 215,
	760, 0, 218, 0, 219, 220, 221, 222, 223, 0,
	287, 788, 789, 0, 0, 224, 761, 762, 734, 225,
	226, 227, 228, 0, 0, 229, 230, 231, 232, 753,
	233, 0, 292, 234, 235, 236, 293, 790, 0, 0,
	237, 0, 0, 0, 0, 238, 239, 240, 241, 242,
	708, 0, 0, 0, 0, 0, 706, 0, 0, 0,
	0, 704, 705, 739, 728, 729, 726, 727, 718, 0,
	714, 0, 0, 0, 0, 717, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 755, 721, 0,
	0, 0, 101, 102, 103, 244, 770, 246, 771, 104,
	772, 773, 0, 105, 250, 251, 106, 107, 724, 754,
	774, 775, 254, 0, 108, 766, 0, 747, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 332,
	116, 117, 0, 748, 750, 0, 749, 751, 118, 119,
	300, 120, 776, 121, 777, 778, 0, 122, 0, 123,
	0, 0, 0, 769, 125, 0, 126, 0, 0, 0,
	712, 127, 128, 129, 756, 757, 735, 0, 0, 130,
	131, 779, 0, 132, 0, 133, 0, 1377, 333, 0,
	134, 767, 0, 264, 0, 135, 136, 137, 138, 763,
	765, 335, 0, 142, 0, 139, 0, 334, 140, 780,
	141, 781, 782, 783, 0, 746, 0, 336, 143, 144,
	337, 145, 146, 0, 148, 147, 0, 768, 338, 149,
	339, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 340, 157, 158, 160, 159, 707, 0,
	736, 764, 161, 784, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 341, 167, 342, 758, 168,
	169, 170, 171, 172, 0, 759, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 785, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 343, 195, 196, 713, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 752, 208,
	198, 199, 209, 344, 210, 786, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 787, 215, 760, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 788, 789,
	0, 0, 224, 761, 762, 734, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 753, 233, 0, 292,
	234, 235, 236, 293, 790, 0, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 708, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 704, 705,
	739, 728, 729, 726, 727, 718, 0, 714, 0, 0,
	0, 0, 717, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 755, 721, 0, 0, 0, 101,
	102, 103, 244, 770, 246, 771, 104, 772, 773, 0,
	105, 250, 251, 106, 107, 724, 754, 774, 775, 254,
	0, 108, 766, 0, 747, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 332, 116, 117, 0,
	748, 750, 0, 749, 751, 118, 119, 300, 120, 776,
	121, 777, 778, 0, 122, 0, 123, 0, 0, 0,
	769, 125, 0, 126, 0, 0, 0, 712, 127, 128,
	129, 756, 757, 735, 0, 0, 130, 131, 779, 0,
	132, 0, 133, 0, 0, 333, 0, 134, 767, 0,
	264, 0, 135, 136, 137, 138, 763, 765, 335, 0,
	142, 0, 139, 0, 334, 140, 780, 141, 781, 782,
	783, 0, 746, 0, 336, 143, 144, 337, 145, 146,
	0, 148, 147, 0, 768, 338, 149, 339, 0, 150,
	0, 0, 151, 0, 152, 153, 154, 156, 273, 155,
	340, 157, 158, 160, 159, 707, 0, 736, 764, 161,
	784, 162, 163, 0, 164, 0, 0, 165, 0, 0,
	166, 276, 341, 167, 342, 758, 168, 169, 170, 171,
	172, 0, 759, 173, 279, 174, 0, 175, 176, 177,
	178, 179, 785, 180, 181, 0, 182, 183, 184, 185,
	186, 188, 189, 187, 190, 191, 192, 193, 0, 194,
	343, 195, 196, 713, 197, 0, 201, 202, 203, 204,
	0, 282, 205, 206, 207, 752, 208, 198, 199, 209,
	344, 210, 786, 284, 211, 0, 217, 212, 213, 200,
	214, 216, 787, 215, 760, 0, 218, 0, 219, 220,
	221, 222, 223, 0, 287, 788, 789, 0, 0, 224,
	761, 762, 734, 225, 226, 227, 228, 0, 0, 229,
	230, 231, 232, 753, 233, 0, 292, 234, 235, 236,
	293, 790, 0, 0, 237, 0, 0, 0, 0, 238,
	239, 240, 241, 242, 708, 0, 0, 0, 0, 0,
	706, 0, 0, 0, 0, 704, 705, 739, 728, 729,
	726, 727, 718, 0, 714, 1320, 0, 0, 0, 717,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 755, 721, 0, 0, 0, 101, 102, 103, 244,
	770, 246, 771, 104, 772, 773, 0, 105, 250, 251,
	106, 107, 724, 754, 774, 775, 254, 0, 108, 766,
	0, 747, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 332, 116, 117, 0, 748, 750, 0,
	749, 751, 118, 119, 300, 120, 776, 121, 777, 778,
	0, 122, 0, 123, 0, 0, 0, 769, 125, 0,
	126, 0, 0, 0, 712, 127, 128, 129, 756, 757,
	735, 0, 0, 130, 131, 779, 0, 132, 0, 133,
	0, 0, 333, 0, 134, 767, 0, 264, 0, 135,
	136, 137, 138, 763, 765, 335, 0, 142, 0, 139,
	0, 334, 140, 780, 141, 781, 782, 783, 0, 746,
	0, 336, 143, 144, 337, 145, 146, 0, 148, 147,
	0, 768, 338, 149, 339, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 340, 157, 158,
	160, 159, 707, 0, 736, 764, 161, 784, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 341,
	167, 342, 758, 168, 169, 170, 171, 172, 0, 759,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 785,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 343, 195, 196,
	713, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 752, 208, 198, 199, 209, 344, 210, 786,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 787,
	215, 760, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 788, 789, 0, 0, 224, 761, 762, 734,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	753, 233, 0, 292, 234, 235, 236, 293, 790, 0,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 708, 0, 0, 0, 0, 0, 706, 0, 0,
	0, 0, 704, 705, 702, 739, 728, 729, 726, 727,
	718, 714, 0, 0, 0, 0, 717, 0, 0, 0,
	0, 98, 99, 980, 100, 0, 0, 0, 0, 755,
	721, 0, 0, 0, 101, 102, 103, 244, 770, 246,
	771, 104, 772, 773, 0, 105, 250, 251, 106, 107,
	724, 754, 774, 775, 254, 0, 108, 766, 0, 747,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 332, 116, 117, 0, 748, 750, 0, 749, 751,
	118, 119, 300, 120, 776, 121, 777, 778, 0, 122,
	0, 123, 0, 0, 0, 769, 125, 0, 126, 0,
	0, 0, 712, 127, 128, 129, 756, 757, 735, 0,
	0, 130, 131, 779, 0, 132, 0, 133, 0, 0,
	333, 0, 134, 767, 0, 264, 0, 135, 136, 137,
	138, 763, 765, 335, 0, 142, 0, 139, 0, 334,
	140, 780, 141, 781, 782, 783, 0, 746, 0, 336,
	143, 144, 337, 145, 146, 0, 148, 147, 0, 768,
	338, 149, 339, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 340, 157, 158, 160, 159,
	707, 0, 736, 764, 161, 784, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 341, 167, 342,
	758, 168, 169, 170, 171, 172, 0, 759, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 785, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 343, 195, 196, 713, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	752, 208, 198, 199, 209, 344, 210, 786, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 787, 215, 760,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	788, 789, 0, 0, 224, 761, 762, 734, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 753, 233,
	0, 292, 234, 235, 236, 293, 790, 0, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 708,
	0, 0, 0, 0, 0, 706, 0, 0, 0, 0,
	704, 705, 739, 728, 729, 726, 727, 718, 0, 714,
	0, 0, 0, 0, 717, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 755, 721, 0, 0,
	0, 101, 102, 103, 244, 770, 246, 771, 104, 772,
	773, 0, 105, 250, 251, 106, 107, 724, 754, 774,
	775, 254, 0, 108, 766, 0, 747, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 332, 116,
	2156, 0, 748, 750, 0, 749, 751, 118, 119, 300,
	120, 776, 121, 777, 778, 0, 122, 0, 123, 0,
	0, 0, 769, 125, 0, 126, 0, 0, 0, 712,
	127, 128, 129, 756, 757, 735, 0, 0, 130, 131,
	779, 0, 132, 0, 133, 0, 0, 333, 0, 134,
	767, 0, 264, 0, 135, 136, 137, 138, 763, 765,
	335, 0, 142, 0, 139, 0, 334, 140, 780, 141,
	781, 782, 783, 0, 746, 0, 336, 143, 144, 337,
	145, 146, 0, 148, 147, 0, 768, 338, 149, 339,
	0, 150, 0, 0, 151, 0, 152, 153, 154, 156,
	273, 155, 340, 157, 158, 160, 159, 707, 0, 736,
	764, 161, 784, 162, 163, 0, 164, 0, 0, 165,
	0, 0, 166, 276, 341, 167, 342, 758, 168, 169,
	170, 171, 172, 0, 759, 173, 279, 174, 0, 175,
	176, 177, 178, 179, 785, 180, 181, 0, 182, 183,
	184, 185, 186, 188, 189, 187, 190, 191, 192, 193,
	0, 194, 343, 195, 196, 713, 197, 0, 201, 202,
	203, 204, 0, 282, 205, 206, 207, 752, 208, 198,
	199, 209, 344, 210, 786, 284, 211, 0, 217, 212,
	213, 200, 214, 216, 787, 215, 760, 0, 218, 0,
	219, 220, 221, 222, 223, 0, 287, 788, 789, 0,
	0, 224, 761, 762, 734, 225, 226, 2155, 228, 0,
	0, 229, 230, 231, 232, 753, 233, 0, 292, 234,
	235, 236, 293, 790, 0, 0, 237, 0, 0, 0,
	0, 238, 239, 240, 241, 242, 708, 0, 0, 0,
	0, 0, 706, 0, 0, 0, 0, 704, 705, 739,
	728, 729, 726, 727, 718, 0, 714, 0, 0, 0,
	0, 717, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 755, 721, 0, 0, 0, 101, 102,
	103, 2154, 770, 246, 771, 104, 772, 773, 0, 105,
	250, 251, 106, 107, 724, 754, 774, 775, 254, 0,
	108, 766, 0, 747, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 332, 116, 2156, 0, 748,
	750, 0, 749, 751, 118, 119, 300, 120, 776, 121,
	777, 778, 0, 122, 0, 123, 0, 0, 0, 769,
	125, 0, 126, 0, 0, 0, 712, 127, 128, 129,
	756, 757, 735, 0, 0, 130, 131, 779, 0, 132,
	0, 133, 0, 0, 333, 0, 134, 767, 0, 264,
	0, 135, 136, 137, 138, 763, 765, 335, 0, 142,
	0, 139, 0, 334, 140, 780, 141, 781, 782, 783,
	0, 746, 0, 336, 143, 144, 337, 145, 146, 0,
	148, 147, 0, 768, 338, 149, 339, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 340,
	157, 158, 160, 159, 707, 0, 736, 764, 161, 784,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 341, 167, 342, 758, 168, 169, 170, 171, 172,
	0, 759, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 785, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 343,
	195, 196, 713, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 752, 208, 198, 199, 209, 344,
	210, 786, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 787, 215, 760, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 788, 789, 0, 0, 224, 761,
	762, 734, 225, 226, 2155, 228, 0, 0, 229, 230,
	231, 232, 753, 233, 0, 292, 234, 235, 236, 293,
	790, 0, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 708, 0, 0, 0, 0, 0, 706,
	0, 0, 0, 0, 704, 705, 739, 728, 729, 726,
	727, 718, 0, 714, 0, 0, 0, 0, 717, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	755, 721, 0, 0, 0, 101, 102, 103, 244, 770,
	246, 771, 104, 772, 773, 0, 105, 250, 251, 106,
	107, 724, 754, 774, 775, 254, 0, 108, 766, 0,
	747, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 332, 116, 117, 0, 748, 750, 0, 749,
	751, 118, 119, 300, 120, 776, 121, 777, 778, 0,
	122, 0, 123, 0, 0, 0, 769, 125, 0, 126,
	0, 0, 0, 712, 127, 128, 129, 756, 757, 735,
	0, 0, 130, 131, 779, 0, 132, 0, 133, 0,
	0, 333, 0, 134, 767, 0, 264, 0, 135, 136,
	137, 138, 763, 765, 335, 0, 142, 0, 139, 0,
	334, 140, 780, 141, 781, 782, 783, 0, 746, 0,
	336, 143, 144, 337, 145, 146, 0, 148, 147, 0,
	768, 338, 149, 339, 0, 150, 0, 0, 151, 0,
	152, 153, 154, 156, 273, 155, 340, 157, 158, 160,
	159, 707, 0, 736, 764, 161, 784, 162, 163, 0,
	164, 0, 0, 165, 0, 0, 166, 276, 341, 167,
	342, 758, 168, 169, 170, 171, 172, 0, 759, 173,
	279, 174, 0, 175, 176, 177, 178, 179, 785, 180,
	181, 0, 182, 183, 184, 185, 186, 188, 189, 187,
	190, 191, 192, 193, 0, 194, 343, 195, 196, 713,
	197, 0, 201, 202, 203, 204, 0, 282, 205, 206,
	207, 752, 208, 198, 199, 209, 344, 210, 786, 284,
	211, 0, 217, 212, 213, 200, 214, 216, 787, 215,
	760, 0, 218, 0, 219, 220, 221, 222, 223, 0,
	287, 788, 789, 0, 0, 224, 761, 762, 734, 225,
	226, 227, 228, 0, 0, 229, 230, 231, 232, 753,
	233, 0, 292, 234, 235, 236, 293, 790, 0, 0,
	237, 0, 0, 0, 0, 238, 239, 240, 241, 242,
	708, 0, 0, 0, 0, 0, 706, 0, 0, 0,
	0, 704, 705, 1349, 728, 729, 726, 727, 718, 0,
	714, 0, 0, 0, 0, 717, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 755, 721, 0,
	0, 0, 101, 102, 103, 244, 770, 246, 771, 104,
	772, 773, 0, 105, 250, 251, 106, 107, 724, 754,
	774, 775, 254, 0, 108, 766, 0, 747, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 332,
	116, 117, 0, 748, 750, 0, 749, 751, 118, 119,
	300, 120, 776, 1352, 777, 778, 0, 122, 0, 123,
	0, 0, 0, 769, 125, 0, 126, 0, 0, 0,
	712, 127, 128, 129, 756, 757, 735, 0, 0, 130,
	131, 779, 0, 132, 0, 133, 0, 0, 333, 0,
	134, 767, 0, 264, 0, 135, 136, 1353, 138, 763,
	765, 335, 0, 142, 0, 139, 0, 334, 140, 780,
	141, 781, 782, 783, 0, 746, 0, 336, 143, 144,
	337, 145, 146, 0, 148, 147, 0, 768, 338, 149,
	339, 0, 150, 0, 0, 151, 0, 152, 1354, 1351,
	156, 273, 155, 340, 157, 158, 160, 159, 707, 0,
	736, 764, 161, 784, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 341, 167, 342, 758, 168,
	169, 170, 171, 172, 0, 759, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 785, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 343, 195, 196, 713, 197, 0, 201,
	202, 203, 1355, 0, 282, 205, 206, 207, 752, 208,
	198, 199, 209, 344, 210, 786, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 787, 215, 760, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 788, 789,
	0, 0, 224, 761, 762, 734, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 753, 233, 0, 292,
	234, 235, 236, 293, 790, 0, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 1350, 242, 708, 0, 0,
	0, 0, 0, 706, 0, 0, 0, 0, 704, 705,
	739, 728, 729, 726, 727, 718, 0, 714, 0, 0,
	0, 0, 717, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 755, 721, 0, 0, 0, 101,
	102, 103, 244, 770, 246, 771, 104, 772, 773, 0,
	105, 250, 251, 106, 107, 724, 754, 774, 775, 254,
	0, 108, 766, 0, 747, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 332, 116, 117, 0,
	748, 750, 0, 749, 751, 118, 119, 300, 120, 776,
	121, 777, 778, 0, 122, 0, 123, 0, 0, 0,
	769, 125, 0, 126, 0, 0, 0, 712, 127, 128,
	129, 756, 757, 735, 0, 0, 130, 131, 779, 0,
	132, 0, 133, 0, 0, 333, 0, 134, 767, 0,
	264, 0, 135, 136, 137, 138, 763, 765, 335, 0,
	142, 0, 139, 0, 334, 140, 780, 141, 781, 782,
	783, 0, 746, 0, 336, 143, 144, 337, 145, 146,
	0, 148, 147, 0, 768, 338, 149, 339, 0, 150,
	0, 0, 151, 0, 152, 153, 154, 156, 273, 155,
	340, 157, 158, 160, 159, 0, 0, 736, 764, 161,
	784, 162, 163, 0, 164, 0, 0, 165, 0, 0,
	166, 276, 341, 167, 342, 758, 168, 169, 170, 171,
	172, 0, 759, 173, 279, 174, 0, 175, 176, 177,
	178, 179, 785, 180, 181, 0, 182, 183, 184, 185,
	186, 188, 189, 187, 190, 191, 192, 193, 0, 194,
	343, 195, 196, 1367, 197, 0, 201, 202, 203, 204,
	0, 282, 205, 206, 207, 752, 208, 198, 199, 209,
	344, 210, 786, 284, 211, 0, 217, 212, 213, 200,
	214, 216, 787, 215, 760, 0, 218, 0, 219, 220,
	221, 222, 223, 0, 287, 788, 789, 0, 0, 224,
	761, 762, 734, 225, 226, 227, 228, 0, 0, 229,
	230, 231, 232, 753, 233, 0, 292, 234, 235, 236,
	293, 790, 0, 0, 237, 0, 0, 0, 0, 238,
	239, 240, 241, 242, 0, 0, 0, 0, 0, 0,
	1365, 0, 0, 0, 0, 1363, 1364, 739, 728, 729,
	726, 727, 718, 0, 1366, 0, 0, 0, 0, 717,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 755, 721, 0, 0, 0, 101, 102, 103, 244,
	770, 246, 771, 104, 772, 773, 0, 105, 250, 251,
	106, 107, 0, 754, 774, 775, 254, 0, 108, 766,
	0, 747, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 332, 116, 117, 0, 748, 750, 0,
	749, 751, 118, 119, 300, 120, 776, 121, 777, 778,
	0, 122, 0, 123, 0, 0, 0, 769, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 756, 757,
	735, 0, 0, 130, 131, 779, 0, 132, 0, 133,
	0, 0, 333, 0, 134, 767, 0, 264, 0, 135,
	136, 137, 138, 763, 765, 335, 0, 142, 0, 139,
	0, 334, 140, 780, 141, 781, 782, 783, 0, 746,
	0, 336, 143, 144, 337, 145, 146, 0, 148, 147,
	0, 768, 338, 149, 339, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 340, 157, 158,
	160, 159, 0, 0, 736, 764, 161, 784, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 341,
	167, 342, 758, 168, 169, 170, 171, 172, 0, 759,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 785,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 343, 195, 196,
	1367, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 752, 208, 198, 199, 209, 344, 210, 786,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 787,
	215, 760, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 788, 789, 0, 0, 224, 761, 762, 734,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	753, 233, 0, 292, 234, 235, 236, 293, 790, 0,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 739, 728, 729, 726, 727, 718, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 1366, 100, 0, 0, 0, 717, 755, 721, 0,
	0, 0, 101, 102, 103, 0, 770, 246, 771, 104,
	772, 773, 0, 105, 250, 251, 106, 107, 724, 754,
	774, 775, 254, 0, 108, 766, 0, 747, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 332,
	116, 2156, 0, 748, 750, 0, 749, 751, 118, 119,
	300, 120, 776, 121, 777, 778, 0, 122, 0, 123,
	0, 0, 0, 769, 125, 0, 126, 0, 0, 0,
	712, 127, 128, 129, 756, 757, 735, 0, 0, 130,
	131, 779, 0, 132, 0, 133, 0, 0, 333, 0,
	134, 767, 0, 264, 0, 135, 136, 137, 138, 763,
	765, 0, 0, 142, 0, 139, 0, 334, 140, 780,
	141, 781, 782, 783, 0, 746, 0, 0, 143, 144,
	337, 145, 146, 0, 148, 147, 0, 768, 338, 149,
	0, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 340, 157, 158, 160, 159, 707, 0,
	736, 764, 161, 784, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 341, 167, 342, 758, 168,
	169, 170, 171, 172, 0, 759, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 785, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 343, 195, 196, 713, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 752, 208,
	198, 199, 209, 0, 210, 786, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 787, 215, 760, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 788, 789,
	0, 0, 224, 761, 762, 734, 225, 226, 2155, 228,
	0, 0, 229, 230, 231, 232, 753, 233, 0, 292,
	234, 235, 236, 293, 790, 0, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 739, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 704, 705,
	0, 0, 0, 98, 99, 0, 100, 714, 0, 0,
	0, 755, 717, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 754, 252, 253, 254, 0, 108, 766,
	0, 747, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 332, 116, 117, 0, 748, 750, 0,
	749, 751, 118, 119, 300, 120, 256, 121, 257, 258,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 756, 757,
	0, 0, 0, 130, 131, 262, 0, 132, 0, 133,
	0, 0, 333, 0, 134, 767, 0, 264, 0, 135,
	136, 137, 138, 763, 765, 335, 0, 142, 0, 139,
	0, 334, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 336, 143, 144, 337, 145, 146, 0, 148, 147,
	0, 768, 338, 149, 339, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 340, 157, 158,
	160, 159, 0, 0, 0, 764, 161, 275, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 341,
	167, 342, 758, 168, 169, 170, 171, 172, 0, 759,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 343, 195, 196,
	281, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 752, 208, 198, 199, 209, 344, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 760, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 288, 289, 0, 0, 224, 761, 762, 0,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	753, 233, 0, 292, 234, 235, 236, 293, 294, 0,
	0, 237, 0, 517, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 1640, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 331, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 332,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 0, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 333, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 265,
	266, 335, 0, 142, 0, 139, 0, 334, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 336, 143, 144,
	337, 145, 146, 0, 148, 147, 0, 272, 338, 149,
	339, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 340, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 341, 167, 342, 277, 168,
	169, 170, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 343, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 79, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 344, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	81, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 0, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 599, 294, 0, 0, 237, 0, 0,
	0, 77, 238, 239, 240, 241, 242, 0, 78, 517,
	514, 0, 515, 510, 505, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 76, 100, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 0,
	108, 255, 0, 331, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 332, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 300, 120, 256, 121,
	257, 258, 929, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 507, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 0, 0, 333, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 265, 266, 335, 0, 142,
	0, 139, 0, 334, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 336, 143, 144, 337, 145, 146, 0,
	148, 147, 0, 272, 338, 149, 339, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 340,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 508, 0, 165, 0, 0, 166,
	276, 341, 167, 342, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 280, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 343,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 208, 198, 199, 209, 344,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 506, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 0, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 517, 514, 0, 515, 510, 505, 0,
	0, 0, 0, 0, 516, 511, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 331, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 332,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 926, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 507, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 333, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 265,
	266, 335, 0, 142, 0, 139, 0, 334, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 336, 143, 144,
	337, 145, 146, 0, 148, 147, 0, 272, 338, 149,
	339, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 340, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 508, 0,
	165, 0, 0, 166, 276, 341, 167, 342, 277, 168,
	169, 170, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 343, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 344, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 506, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 293, 294, 0, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 517, 514, 0,
	515, 510, 505, 0, 0, 0, 0, 0, 516, 511,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 0, 252, 253, 254, 0, 108, 255,
	0, 331, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 332, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 300, 120, 256, 121, 257, 258,
	633, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 260, 261,
	507, 0, 0, 130, 131, 262, 0, 132, 0, 133,
	0, 0, 333, 0, 134, 263, 0, 264, 0, 135,
	136, 137, 138, 265, 266, 335, 0, 142, 0, 139,
	0, 334, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 336, 143, 144, 337, 145, 146, 0, 148, 147,
	0, 272, 338, 149, 339, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 340, 157, 158,
	160, 159, 0, 0, 0, 274, 161, 275, 162, 163,
	0, 164, 508, 0, 165, 0, 0, 166, 276, 341,
	167, 342, 277, 168, 169, 170, 171, 172, 0, 278,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 343, 195, 196,
	281, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 0, 208, 198, 199, 209, 344, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 286, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 288, 289, 0, 0, 224, 290, 291, 506,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	0, 233, 0, 292, 234, 235, 236, 293, 294, 0,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 517, 514, 0, 515, 510, 505, 0, 0, 0,
	0, 0, 516, 511, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 108, 255, 0, 331, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 332, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 507, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 333, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 265, 266, 335,
	0, 142, 0, 139, 0, 334, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 336, 143, 144, 337, 145,
	146, 0, 148, 147, 0, 272, 338, 149, 339, 0,
	150, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	155, 340, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 508, 0, 165, 0,
	0, 166, 276, 341, 167, 342, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 343, 195, 196, 281, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 206, 207, 0, 208, 198, 199,
	209, 344, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 287, 288, 289, 0, 0,
	224, 290, 291, 506, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 0, 95, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 516, 511, 243, 0,
	0, 0, 0, 101, 102, 103, 244, 245, 246, 247,
	104, 248, 249, 0, 105, 250, 251, 106, 107, 0,
	0, 252, 253, 254, 0, 108, 255, 0, 0, 0,
	109, 110, 111, 0, 112, 0, 113, 114, 115, 0,
	0, 116, 117, 0, 0, 0, 0, 0, 0, 118,
	119, 300, 120, 256, 121, 257, 258, 0, 122, 0,
	123, 0, 0, 0, 124, 125, 0, 126, 0, 0,
	0, 259, 127, 128, 129, 260, 261, 0, 0, 0,
	130, 131, 262, 0, 132, 0, 133, 0, 0, 0,
	0, 134, 263, 0, 264, 0, 135, 136, 137, 138,
	265, 266, 0, 0, 142, 0, 139, 0, 0, 140,
	267, 141, 268, 269, 270, 0, 271, 0, 0, 143,
	144, 0, 145, 146, 0, 148, 147, 0, 272, 0,
	149, 0, 0, 150, 0, 0, 151, 0, 152, 153,
	154, 156, 273, 155, 0, 157, 158, 160, 159, 0,
	0, 0, 274, 161, 275, 162, 163, 0, 164, 0,
	551, 165, 0, 0, 166, 276, 0, 167, 0, 277,
	168, 169, 170, 171, 172, 0, 278, 173, 279, 174,
	0, 175, 176, 177, 178, 179, 280, 180, 181, 0,
	182, 183, 184, 185, 186, 188, 189, 187, 190, 191,
	192, 193, 0, 194, 0, 195, 196, 281, 197, 0,
	201, 202, 203, 204, 79, 282, 205, 206, 207, 0,
	208, 198, 199, 209, 0, 210, 283, 284, 211, 0,
	217, 212, 213, 200, 214, 216, 285, 215, 286, 0,
	218, 81, 219, 220, 221, 222, 223, 0, 287, 288,
	289, 0, 0, 224, 290, 291, 0, 225, 226, 227,
	228, 0, 0, 229, 230, 231, 232, 0, 233, 0,
	292, 234, 235, 236, 599, 294, 0, 0, 237, 0,
	95, 0, 77, 238, 239, 240, 241, 242, 0, 78,
	0, 0, 0, 0, 0, 0, 98, 99, 0, 100,
	0, 0, 0, 0, 243, 0, 1244, 0, 1249, 101,
	102, 103, 244, 245, 246, 247, 104, 248, 249, 0,
	105, 250, 251, 106, 107, 0, 0, 252, 253, 254,
	0, 108, 255, 0, 0, 0, 109, 110, 111, 0,
	112, 0, 113, 114, 115, 0, 0, 116, 117, 0,
	0, 0, 0, 0, 0, 118, 119, 300, 120, 256,
	121, 257, 258, 0, 122, 0, 123, 0, 0, 0,
	124, 125, 0, 126, 0, 0, 0, 259, 127, 128,
	129, 260, 261, 0, 0, 0, 130, 131, 262, 0,
	132, 0, 133, 0, 0, 0, 0, 134, 263, 0,
	264, 0, 135, 136, 137, 138, 265, 266, 0, 0,
	142, 0, 139, 0, 0, 140, 267, 141, 268, 269,
	270, 0, 271, 0, 0, 143, 144, 0, 145, 146,
	0, 148, 147, 0, 272, 0, 149, 0, 0, 150,
	0, 0, 151, 0, 152, 153, 154, 156, 273, 155,
	0, 157, 158, 160, 159, 0, 0, 0, 274, 161,
	275, 162, 163, 0, 164, 0, 0, 165, 0, 0,
	166, 276, 0, 167, 0, 277, 168, 169, 170, 171,
	172, 0, 278, 173, 279, 174, 0, 175, 176, 177,
	178, 179, 280, 180, 181, 0, 182, 183, 184, 185,
	186, 188, 189, 187, 190, 191, 192, 193, 0, 194,
	0, 195, 196, 281, 197, 0, 201, 202, 203, 204,
	79, 282, 205, 206, 207, 0, 208, 198, 199, 209,
	0, 210, 283, 284, 211, 0, 217, 212, 213, 200,
	214, 216, 285, 215, 286, 0, 218, 81, 219, 220,
	221, 222, 223, 0, 287, 288, 289, 0, 0, 224,
	290, 291, 0, 225, 226, 227, 228, 0, 0, 229,
	230, 231, 232, 0, 233, 0, 292, 234, 235, 236,
	599, 294, 0, 0, 237, 0, 95, 0, 77, 238,
	239, 240, 241, 242, 0, 78, 0, 0, 0, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 0,
	243, 0, 0, 0, 76, 101, 102, 103, 244, 245,
	246, 247, 104, 248, 249, 0, 105, 250, 251, 106,
	107, 0, 0, 252, 253, 254, 0, 108, 255, 0,
	0, 0, 109, 110, 111, 0, 112, 0, 113, 114,
	115, 0, 0, 116, 117, 0, 0, 0, 0, 0,
	0, 118, 119, 300, 120, 256, 121, 257, 258, 0,
	122, 0, 123, 0, 0, 0, 124, 125, 0, 126,
	0, 0, 0, 259, 127, 128, 129, 260, 261, 0,
	0, 0, 130, 131, 262, 0, 132, 0, 133, 0,
	0, 0, 0, 134, 263, 0, 264, 0, 135, 136,
	137, 138, 265, 266, 0, 0, 142, 0, 139, 0,
	0, 140, 267, 141, 268, 269, 270, 0, 271, 0,
	0, 143, 144, 0, 145, 146, 0, 148, 147, 0,
	272, 0, 149, 0, 0, 150, 0, 0, 151, 0,
	152, 153, 154, 156, 273, 155, 0, 157, 158, 160,
	159, 0, 0, 0, 274, 161, 275, 162, 163, 0,
	164, 0, 551, 165, 0, 0, 166, 276, 0, 167,
	0, 277, 168, 169, 170, 171, 172, 0, 278, 173,
	279, 174, 0, 175, 176, 177, 178, 179, 280, 180,
	181, 0, 182, 183, 184, 185, 186, 188, 189, 187,
	190, 191, 192, 193, 0, 194, 0, 195, 196, 281,
	197, 0, 201, 202, 203, 204, 0, 282, 205, 206,
	207, 0, 208, 198, 199, 209, 0, 210, 283, 284,
	211, 0, 217, 212, 213, 200, 214, 216, 285, 215,
	286, 0, 218, 0, 219, 220, 221, 222, 223, 0,
	287, 288, 289, 0, 0, 224, 290, 291, 0, 225,
	226, 227, 228, 0, 0, 229, 230, 231, 232, 0,
	233, 0, 292, 234, 235, 236, 293, 294, 0, 0,
	237, 0, 95, 0, 0, 238, 239, 240, 241, 242,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 0, 243, 0, 1244, 0,
	1249, 101, 102, 103, 244, 245, 246, 247, 104, 248,
	249, 0, 105, 250, 251, 106, 107, 0, 0, 252,
	253, 254, 0, 108, 255, 0, 0, 0, 109, 110,
	111, 0, 112, 0, 113, 114, 115, 0, 0, 116,
	117, 0, 0, 0, 0, 0, 0, 118, 119, 300,
	120, 256, 121, 257, 258, 0, 122, 0, 123, 0,
	0, 0, 124, 125, 0, 126, 0, 0, 0, 259,
	127, 128, 129, 260, 261, 0, 0, 0, 130, 131,
	262, 0, 132, 0, 133, 0, 0, 0, 0, 134,
	263, 0, 264, 0, 135, 136, 137, 138, 265, 266,
	0, 0, 142, 0, 139, 0, 0, 140, 267, 141,
	268, 269, 270, 0, 271, 0, 0, 143, 144, 0,
	145, 146, 0, 148, 147, 0, 272, 0, 149, 0,
	0, 150, 0, 0, 151, 0, 152, 153, 154, 156,
	273, 155, 0, 157, 158, 160, 159, 0, 0, 0,
	274, 161, 275, 162, 163, 0, 164, 0, 0, 165,
	0, 0, 166, 276, 0, 167, 0, 277, 168, 169,
	170, 171, 172, 0, 278, 173, 279, 174, 0, 175,
	176, 177, 178, 179, 280, 180, 181, 0, 182, 183,
	184, 185, 186, 188, 189, 187, 190, 191, 192, 193,
	0, 194, 0, 195, 196, 281, 197, 0, 201, 202,
	203, 204, 0, 282, 205, 206, 207, 0, 208, 198,
	199, 209, 0, 210, 283, 284, 211, 0, 217, 212,
	213, 200, 214, 216, 285, 215, 286, 0, 218, 0,
	219, 220, 221, 222, 223, 0, 287, 288, 289, 0,
	0, 224, 290, 291, 0, 225, 226, 227, 228, 0,
	0, 229, 230, 231, 232, 0, 233, 0, 292, 234,
	235, 236, 293, 294, 0, 0, 237, 0, 0, 95,
	0, 238, 239, 240, 241, 242, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 243, 0, 0, 0, 834, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 0,
	108, 255, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 300, 120, 256, 121,
	257, 258, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 0, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 265, 266, 0, 0, 142,
	0, 139, 0, 0, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 0, 143, 144, 0, 145, 146, 0,
	148, 147, 0, 272, 0, 149, 0, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 0,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 0, 167, 0, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 280, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 0,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 208, 198, 199, 209, 0,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 0, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 0, 0, 237, 0, 95, 0, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 243,
	0, 0, 0, 1156, 101, 102, 103, 244, 245, 246,
	247, 104, 248, 249, 0, 105, 250, 251, 106, 107,
	0, 0, 252, 253, 254, 0, 108, 255, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 300, 120, 256, 121, 257, 258, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 259, 127, 128, 129, 260, 261, 0, 0,
	0, 130, 131, 262, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 263, 0, 264, 0, 135, 136, 137,
	138, 265, 266, 0, 0, 142, 0, 139, 0, 0,
	140, 267, 141, 268, 269, 270, 0, 271, 0, 0,
	143, 144, 0, 145, 146, 0, 148, 147, 0, 272,
	0, 149, 0, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 0, 157, 158, 160, 159,
	0, 0, 0, 274, 161, 275, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 0, 167, 0,
	277, 168, 169, 170, 171, 172, 0, 278, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 280, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 0, 195, 196, 281, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	0, 208, 198, 199, 209, 0, 210, 283, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 285, 215, 286,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	288, 289, 0, 0, 224, 290, 291, 0, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 0, 233,
	0, 292, 234, 235, 236, 293, 294, 0, 0, 237,
	0, 95, 0, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 0, 0, 0, 1765,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 108, 255, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 0, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 265, 266, 0,
	0, 142, 0, 139, 0, 0, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 0, 143, 144, 0, 145,
	146, 0, 148, 147, 0, 272, 0, 149, 0, 0,
	150, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	155, 0, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 0, 0, 165, 0,
	0, 166, 276, 0, 167, 0, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 0, 195, 196, 281, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 206, 207, 0, 208, 198, 199,
	209, 0, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 287, 288, 289, 0, 0,
	224, 290, 291, 0, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 0, 0, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 739, 728, 729, 726, 727,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 99, 0, 100, 801, 0, 0, 0, 243,
	0, 0, 0, 0, 101, 102, 103, 244, 770, 246,
	771, 104, 772, 773, 0, 105, 250, 251, 106, 107,
	0, 0, 774, 775, 254, 0, 108, 255, 0, 331,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 332, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 300, 120, 776, 121, 777, 778, 0, 122,
	0, 123, 0, 0, 0, 769, 125, 0, 126, 0,
	0, 0, 259, 127, 128, 129, 260, 261, 735, 0,
	0, 130, 131, 779, 0, 132, 0, 133, 0, 0,
	333, 0, 134, 263, 0, 264, 0, 135, 136, 137,
	138, 265, 266, 335, 0, 142, 0, 139, 0, 334,
	140, 780, 141, 781, 782, 783, 0, 746, 0, 336,
	143, 144, 337, 145, 146, 0, 148, 147, 0, 272,
	338, 149, 339, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 340, 157, 158, 160, 159,
	0, 0, 736, 274, 161, 784, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 341, 167, 342,
	277, 168, 169, 170, 171, 172, 0, 278, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 785, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 343, 195, 196, 281, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	0, 208, 198, 199, 209, 344, 210, 786, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 787, 215, 286,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	788, 789, 0, 0, 224, 290, 291, 734, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 0, 233,
	0, 292, 234, 235, 236, 293, 790, 517, 514, 237,
	0, 0, 639, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 0, 252, 253, 254, 0, 108, 255,
	0, 331, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 332, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 300, 120, 256, 121, 257, 258,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 260, 261,
	0, 0, 0, 130, 131, 262, 0, 132, 0, 133,
	0, 0, 333, 0, 134, 263, 0, 264, 0, 135,
	136, 137, 138, 265, 266, 335, 0, 142, 0, 139,
	0, 334, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 336, 143, 144, 337, 145, 146, 0, 148, 147,
	0, 272, 338, 149, 339, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 340, 157, 158,
	160, 159, 0, 0, 0, 274, 161, 275, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 341,
	167, 342, 277, 168, 169, 170, 171, 172, 0, 278,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 343, 195, 196,
	281, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 0, 208, 198, 199, 209, 344, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 286, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 288, 289, 0, 0, 224, 290, 291, 0,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	0, 233, 0, 292, 234, 235, 236, 293, 294, 95,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 0,
	108, 255, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 91, 120, 256, 121,
	257, 258, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 0, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 265, 266, 0, 0, 142,
	0, 139, 0, 0, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 0, 143, 144, 0, 145, 146, 0,
	148, 147, 0, 272, 0, 149, 0, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 0,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 0, 167, 0, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 280, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 0,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 208, 198, 199, 209, 0,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 90, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 0, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 517, 514, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 94, 0, 0, 0,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 108, 255, 0, 331, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 332, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 0, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 333, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 265, 266, 335,
	0, 142, 0, 139, 0, 334, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 336, 143, 144, 337, 145,
	146, 0, 148, 147, 0, 272, 338, 149, 339, 0,
	150, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	155, 340, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 0, 0, 165, 0,
	0, 166, 276, 341, 167, 342, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 343, 195, 196, 281, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 206, 207, 0, 208, 198, 199,
	209, 344, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 287, 288, 289, 0, 0,
	224, 290, 291, 0, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 95, 0, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 0, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 265,
	266, 0, 0, 142, 0, 139, 0, 0, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 0, 143, 144,
	0, 145, 146, 0, 148, 147, 0, 272, 0, 149,
	0, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 0, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 0, 167, 0, 277, 168,
	169, 170, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 0, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 0, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 0, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 293, 294, 517, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 243,
	94, 0, 0, 0, 101, 102, 103, 244, 245, 246,
	247, 104, 248, 249, 0, 105, 250, 251, 106, 107,
	0, 0, 252, 253, 254, 0, 108, 255, 0, 331,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 332, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 300, 120, 256, 121, 257, 258, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 259, 127, 128, 129, 260, 261, 0, 0,
	0, 130, 131, 262, 0, 132, 0, 133, 0, 0,
	333, 0, 134, 263, 0, 264, 0, 135, 136, 137,
	138, 265, 266, 335, 0, 142, 0, 139, 0, 334,
	140, 267, 141, 268, 269, 270, 0, 271, 0, 336,
	143, 144, 337, 145, 146, 0, 148, 147, 0, 272,
	338, 149, 339, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 340, 157, 158, 160, 159,
	0, 0, 0, 274, 161, 275, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 341, 167, 342,
	277, 168, 169, 170, 171, 172, 0, 278, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 280, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 343, 195, 196, 281, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	0, 208, 198, 199, 209, 344, 210, 283, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 285, 215, 286,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	288, 289, 0, 0, 224, 290, 291, 0, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 0, 233,
	0, 292, 234, 235, 236, 293, 294, 95, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 0, 252, 253, 254, 1113, 108, 255,
	0, 0, 0, 109, 110, 111, 0, 112, 1111, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 300, 120, 256, 121, 257, 258,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 260, 261,
	0, 1216, 0, 130, 131, 262, 0, 132, 0, 133,
	1116, 0, 0, 0, 134, 263, 0, 264, 0, 135,
	136, 137, 138, 265, 266, 0, 0, 142, 1214, 139,
	0, 0, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 0, 143, 144, 0, 145, 146, 0, 148, 147,
	0, 272, 0, 149, 0, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 0, 157, 158,
	160, 159, 0, 0, 0, 274, 161, 275, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 0,
	167, 0, 277, 168, 169, 170, 171, 172, 0, 278,
	173, 279, 174, 1115, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 0, 195, 196,
	281, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 0, 208, 198, 199, 209, 0, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 286, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 288, 289, 0, 0, 224, 290, 291, 0,
	225, 226, 227, 228, 0, 1215, 229, 230, 231, 232,
	0, 233, 0, 292, 234, 235, 236, 293, 294, 95,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 1113,
	108, 255, 0, 0, 1108, 109, 110, 111, 0, 112,
	1111, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 300, 120, 256, 121,
	257, 258, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 0, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 1116, 0, 0, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 1107, 266, 0, 0, 142,
	0, 139, 0, 0, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 0, 143, 144, 0, 145, 146, 0,
	148, 147, 0, 272, 0, 149, 0, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 0,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 0, 167, 0, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 1115, 175, 176, 177, 178,
	179, 280, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 0,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 208, 198, 199, 209, 0,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 0, 225, 226, 227, 228, 0, 1114, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 95, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 0, 1732, 0, 0,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 108, 255, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 0, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 265, 266, 0,
	0, 142, 0, 139, 0, 0, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 0, 143, 144, 0, 145,
	146, 0, 148, 147, 0, 272, 0, 149, 0, 0,
	150, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	155, 0, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 0, 0, 165, 0,
	0, 166, 276, 0, 167, 0, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 0, 195, 196, 281, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 206, 207, 0, 208, 198, 199,
	209, 0, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 287, 288, 289, 0, 0,
	224, 290, 291, 0, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 95, 0, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 0, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 265,
	266, 0, 0, 142, 0, 139, 0, 0, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 0, 143, 144,
	0, 145, 146, 0, 148, 147, 0, 272, 0, 149,
	0, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 0, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 0, 551,
	165, 0, 0, 166, 276, 0, 167, 0, 277, 168,
	169, 170, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 0, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 0, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 0, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 293, 294, 95, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	0, 98, 99, 943, 100, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 101, 102, 103, 244, 245, 246,
	247, 104, 248, 249, 0, 105, 250, 251, 106, 107,
	0, 0, 252, 253, 254, 0, 108, 255, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 300, 120, 256, 121, 257, 258, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 259, 127, 128, 129, 260, 261, 0, 0,
	0, 130, 131, 262, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 263, 0, 264, 0, 135, 136, 137,
	138, 265, 266, 0, 0, 142, 0, 139, 0, 0,
	140, 267, 141, 268, 269, 270, 0, 271, 0, 0,
	143, 144, 0, 145, 146, 0, 148, 147, 0, 272,
	0, 149, 0, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 0, 157, 158, 160, 159,
	0, 0, 0, 274, 161, 275, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 0, 167, 0,
	277, 168, 169, 170, 171, 172, 0, 278, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 280, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 0, 195, 196, 281, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	0, 208, 198, 199, 209, 0, 210, 283, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 285, 215, 286,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	288, 289, 0, 0, 224, 290, 291, 0, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 0, 233,
	0, 292, 234, 235, 236, 293, 294, 95, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 0, 252, 253, 254, 0, 108, 255,
	0, 0, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 300, 120, 256, 121, 257, 258,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 260, 261,
	0, 0, 0, 130, 131, 262, 0, 132, 0, 133,
	0, 0, 0, 0, 134, 263, 0, 264, 0, 135,
	136, 137, 138, 859, 266, 0, 0, 142, 0, 139,
	0, 0, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 0, 143, 144, 0, 145, 146, 0, 148, 147,
	0, 272, 0, 149, 0, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 0, 157, 158,
	160, 159, 0, 0, 0, 274, 161, 275, 162, 163,
	0, 164, 0, 551, 165, 0, 0, 166, 276, 0,
	167, 0, 277, 168, 169, 170, 171, 172, 0, 278,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 0, 195, 196,
	281, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 0, 208, 198, 199, 209, 0, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 286, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 288, 289, 0, 0, 224, 290, 291, 0,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	0, 233, 0, 292, 234, 235, 236, 293, 294, 95,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 0, 98, 99, 607, 100, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 0,
	108, 255, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 300, 120, 256, 121,
	257, 258, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 0, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 265, 266, 0, 0, 142,
	0, 139, 0, 0, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 0, 143, 144, 0, 145, 146, 0,
	148, 147, 0, 272, 0, 149, 0, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 0,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 0, 167, 0, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 280, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 0,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 208, 198, 199, 209, 0,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 0, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 95, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 108, 255, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 0, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 563, 266, 0,
	0, 142, 0, 139, 0, 0, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 0, 143, 144, 0, 145,
	146, 0, 148, 147, 0, 272, 0, 149, 0, 0,
	150, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	155, 0, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 0, 551, 165, 0,
	0, 166, 276, 0, 167, 0, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 0, 195, 196, 281, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 206, 207, 0, 208, 198, 199,
	209, 0, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 287, 288, 289, 0, 0,
	224, 290, 291, 0, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 95, 0, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 0, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 556,
	266, 0, 0, 142, 0, 139, 0, 0, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 0, 143, 144,
	0, 145, 146, 0, 148, 147, 0, 272, 0, 149,
	0, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 0, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 0, 551,
	165, 0, 0, 166, 276, 0, 167, 0, 277, 168,
	169, 170, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 0, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 0, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 0, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 293, 294, 95, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	0, 98, 99, 430, 100, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 101, 102, 103, 244, 245, 246,
	247, 104, 248, 249, 0, 105, 250, 251, 106, 107,
	0, 0, 252, 253, 254, 0, 108, 255, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 300, 120, 256, 121, 257, 258, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 259, 127, 128, 129, 260, 261, 0, 0,
	0, 130, 131, 262, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 263, 0, 264, 0, 135, 136, 137,
	138, 265, 266, 0, 0, 142, 0, 139, 0, 0,
	140, 267, 141, 268, 269, 270, 0, 271, 0, 0,
	143, 144, 0, 145, 146, 0, 148, 147, 0, 272,
	0, 149, 0, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 0, 157, 158, 160, 159,
	0, 0, 0, 274, 161, 275, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 0, 167, 0,
	277, 168, 169, 170, 171, 172, 0, 278, 173, 279,
	429, 0, 175, 176, 177, 178, 179, 280, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 0, 195, 196, 281, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	0, 208, 198, 199, 209, 0, 210, 283, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 285, 215, 286,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	288, 289, 0, 0, 224, 290, 291, 0, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 0, 233,
	0, 292, 234, 235, 236, 293, 294, 95, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 0, 252, 253, 254, 0, 108, 255,
	0, 0, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 300, 120, 256, 121, 257, 258,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 260, 261,
	0, 0, 0, 130, 131, 262, 0, 132, 0, 133,
	0, 0, 0, 0, 134, 263, 0, 264, 0, 135,
	136, 137, 138, 265, 266, 0, 0, 142, 0, 139,
	0, 0, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 0, 143, 144, 0, 145, 146, 0, 148, 147,
	0, 272, 0, 149, 0, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 0, 157, 158,
	160, 159, 0, 0, 0, 274, 161, 275, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 0,
	167, 0, 277, 168, 169, 170, 171, 172, 0, 278,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 0, 195, 196,
	281, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 0, 208, 198, 199, 209, 0, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 286, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 288, 289, 0, 0, 224, 290, 291, 0,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	0, 233, 0, 292, 234, 235, 236, 293, 294, 95,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 0,
	108, 255, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 300, 120, 256, 121,
	257, 258, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 0, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 1413, 266, 0, 0, 142,
	0, 139, 0, 0, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 0, 143, 144, 0, 145, 146, 0,
	148, 147, 0, 272, 0, 149, 0, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 0,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 0, 167, 0, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 280, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 0,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 208, 198, 199, 209, 0,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 0, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 95, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 108, 255, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 0, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 1411, 266, 0,
	0, 142, 0, 139, 0, 0, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 0, 143, 144, 0, 145,
	146, 0, 148, 147, 0, 272, 0, 149, 0, 0,
	150, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	155, 0, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 0, 0, 165, 0,
	0, 166, 276, 0, 167, 0, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 0, 195, 196, 281, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 206, 207, 0, 208, 198, 199,
	209, 0, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 287, 288, 289, 0, 0,
	224, 290, 291, 0, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 95, 0, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 0, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 1400,
	266, 0, 0, 142, 0, 139, 0, 0, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 0, 143, 144,
	0, 145, 146, 0, 148, 147, 0, 272, 0, 149,
	0, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 0, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 0, 167, 0, 277, 168,
	169, 170, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 0, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 0, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 0, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 293, 294, 95, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 101, 102, 103, 244, 245, 246,
	247, 104, 248, 249, 0, 105, 250, 251, 106, 107,
	0, 0, 252, 253, 254, 0, 108, 255, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 300, 120, 256, 121, 257, 258, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 259, 127, 128, 129, 260, 261, 0, 0,
	0, 130, 131, 262, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 263, 0, 264, 0, 135, 136, 137,
	138, 971, 266, 0, 0, 142, 0, 139, 0, 0,
	140, 267, 141, 268, 269, 270, 0, 271, 0, 0,
	143, 144, 0, 145, 146, 0, 148, 147, 0, 272,
	0, 149, 0, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 0, 157, 158, 160, 159,
	0, 0, 0, 274, 161, 275, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 0, 167, 0,
	277, 168, 169, 170, 171, 172, 0, 278, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 280, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 0, 195, 196, 281, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	0, 208, 198, 199, 209, 0, 210, 283, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 285, 215, 286,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	288, 289, 0, 0, 224, 290, 291, 0, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 0, 233,
	0, 292, 234, 235, 236, 293, 294, 95, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 0, 252, 253, 254, 0, 108, 255,
	0, 0, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 300, 120, 256, 121, 257, 258,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 260, 261,
	0, 0, 0, 130, 131, 262, 0, 132, 0, 133,
	0, 0, 0, 0, 134, 263, 0, 264, 0, 135,
	136, 137, 138, 265, 266, 0, 0, 142, 0, 139,
	0, 0, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 0, 143, 144, 0, 145, 146, 0, 148, 147,
	0, 272, 0, 149, 0, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 0, 157, 158,
	160, 159, 0, 0, 0, 274, 161, 275, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 0,
	167, 0, 277, 168, 169, 170, 171, 172, 0, 278,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 0, 195, 196,
	281, 197, 0, 446, 202, 203, 204, 0, 282, 205,
	206, 207, 0, 208, 198, 199, 209, 0, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 286, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 288, 289, 0, 0, 224, 290, 291, 0,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	0, 233, 0, 292, 234, 235, 236, 293, 294, 95,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 243, 0, 844, 0, 0, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 0,
	108, 255, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 300, 120, 256, 121,
	257, 258, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 0, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 265, 266, 0, 0, 142,
	0, 139, 0, 0, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 0, 143, 144, 0, 145, 146, 0,
	148, 147, 0, 272, 0, 149, 0, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 0,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 0, 167, 0, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 280, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 0,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 0, 198, 199, 209, 0,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 0, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 95, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 108, 255, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 0, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 678, 266, 0,
	0, 142, 0, 139, 0, 0, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 0, 143, 144, 0, 145,
	146, 0, 148, 147, 0, 272, 0, 149, 0, 0,
	150, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	155, 0, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 0, 0, 165, 0,
	0, 166, 276, 0, 167, 0, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 0, 195, 196, 281, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 206, 207, 0, 208, 198, 199,
	209, 0, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 287, 288, 289, 0, 0,
	224, 290, 291, 0, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 95, 0, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 0, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 673,
	266, 0, 0, 142, 0, 139, 0, 0, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 0, 143, 144,
	0, 145, 146, 0, 148, 147, 0, 272, 0, 149,
	0, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 0, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 0, 167, 0, 277, 168,
	169, 170, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 0, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 0, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 0, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 293, 294, 95, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 101, 102, 103, 244, 245, 246,
	247, 104, 248, 249, 0, 105, 250, 251, 106, 107,
	0, 0, 252, 253, 615, 0, 108, 255, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 300, 120, 256, 121, 257, 258, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 259, 127, 128, 129, 260, 261, 0, 0,
	0, 130, 131, 262, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 263, 0, 264, 0, 135, 136, 137,
	138, 265, 266, 0, 0, 142, 0, 139, 0, 0,
	140, 267, 141, 268, 269, 270, 0, 271, 0, 0,
	143, 144, 0, 145, 146, 0, 148, 147, 0, 272,
	0, 149, 0, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 460, 0, 157, 158, 160, 159,
	0, 0, 0, 274, 161, 275, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 0, 167, 0,
	277, 168, 169, 170, 171, 172, 0, 278, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 280, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 0, 195, 196, 281, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	0, 208, 198, 199, 209, 0, 210, 283, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 285, 215, 286,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 457,
	288, 289, 0, 0, 453, 290, 291, 0, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 0, 233,
	0, 292, 234, 235, 236, 293, 294, 95, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 0, 252, 253, 254, 0, 108, 255,
	0, 0, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 300, 120, 256, 121, 257, 258,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 260, 261,
	0, 0, 0, 130, 131, 262, 0, 132, 0, 133,
	0, 0, 0, 0, 134, 263, 0, 264, 0, 135,
	136, 137, 138, 265, 266, 0, 0, 142, 0, 139,
	0, 0, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 0, 143, 144, 0, 145, 146, 0, 148, 147,
	0, 272, 0, 149, 0, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 460, 0, 157, 158,
	160, 159, 0, 0, 0, 274, 161, 275, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 0,
	167, 0, 277, 168, 169, 170, 171, 172, 0, 278,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 0, 195, 196,
	281, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 0, 208, 198, 199, 209, 0, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 286, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 457, 288, 289, 0, 0, 453, 290, 291, 0,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	0, 233, 0, 292, 234, 235, 236, 293, 294, 95,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 0,
	108, 255, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 300, 120, 256, 121,
	257, 258, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 0, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 595, 266, 0, 0, 142,
	0, 139, 0, 0, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 0, 143, 144, 0, 145, 146, 0,
	148, 147, 0, 272, 0, 149, 0, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 0,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 0, 167, 0, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 280, 180, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 0,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 208, 198, 199, 209, 0,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 0, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 95, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 108, 255, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 0, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 592, 266, 0,
	0, 142, 0, 139, 0, 0, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 0, 143, 144, 0, 145,
	146, 0, 148, 147, 0, 272, 0, 149, 0, 0,
	150, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	155, 0, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 0, 0, 165, 0,
	0, 166, 276, 0, 167, 0, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 0, 195, 196, 281, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 206, 207, 0, 208, 198, 199,
	209, 0, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 287, 288, 289, 0, 0,
	224, 290, 291, 0, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 95, 0, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 0, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 589,
	266, 0, 0, 142, 0, 139, 0, 0, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 0, 143, 144,
	0, 145, 146, 0, 148, 147, 0, 272, 0, 149,
	0, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 0, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 0, 167, 0, 277, 168,
	169, 170, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 178, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 0, 195, 196, 281, 197, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 0, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 0, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 293, 294, 95, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 0, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 0, 243,
	0, 0, 0, 0, 101, 102, 103, 244, 245, 246,
	247, 104, 248, 249, 0, 105, 250, 251, 106, 107,
	0, 0, 252, 253, 254, 0, 108, 255, 0, 0,
	0, 109, 110, 111, 0, 112, 0, 113, 114, 115,
	0, 0, 116, 117, 0, 0, 0, 0, 0, 0,
	118, 119, 300, 120, 256, 121, 257, 258, 0, 122,
	0, 123, 0, 0, 0, 124, 125, 0, 126, 0,
	0, 0, 259, 127, 128, 129, 260, 261, 0, 0,
	0, 130, 131, 262, 0, 132, 0, 133, 0, 0,
	0, 0, 134, 263, 0, 264, 0, 135, 136, 137,
	138, 587, 266, 0, 0, 142, 0, 139, 0, 0,
	140, 267, 141, 268, 269, 270, 0, 271, 0, 0,
	143, 144, 0, 145, 146, 0, 148, 147, 0, 272,
	0, 149, 0, 0, 150, 0, 0, 151, 0, 152,
	153, 154, 156, 273, 155, 0, 157, 158, 160, 159,
	0, 0, 0, 274, 161, 275, 162, 163, 0, 164,
	0, 0, 165, 0, 0, 166, 276, 0, 167, 0,
	277, 168, 169, 170, 171, 172, 0, 278, 173, 279,
	174, 0, 175, 176, 177, 178, 179, 280, 180, 181,
	0, 182, 183, 184, 185, 186, 188, 189, 187, 190,
	191, 192, 193, 0, 194, 0, 195, 196, 281, 197,
	0, 201, 202, 203, 204, 0, 282, 205, 206, 207,
	0, 208, 198, 199, 209, 0, 210, 283, 284, 211,
	0, 217, 212, 213, 200, 214, 216, 285, 215, 286,
	0, 218, 0, 219, 220, 221, 222, 223, 0, 287,
	288, 289, 0, 0, 224, 290, 291, 0, 225, 226,
	227, 228, 0, 0, 229, 230, 231, 232, 0, 233,
	0, 292, 234, 235, 236, 293, 294, 95, 0, 237,
	0, 0, 0, 0, 238, 239, 240, 241, 242, 0,
	0, 0, 0, 98, 99, 0, 100, 0, 0, 0,
	0, 243, 0, 0, 0, 0, 101, 102, 103, 244,
	245, 246, 247, 104, 248, 249, 0, 105, 250, 251,
	106, 107, 0, 0, 252, 253, 254, 0, 108, 255,
	0, 0, 0, 109, 110, 111, 0, 112, 0, 113,
	114, 115, 0, 0, 116, 117, 0, 0, 0, 0,
	0, 0, 118, 119, 300, 120, 256, 121, 257, 258,
	0, 122, 0, 123, 0, 0, 0, 124, 125, 0,
	126, 0, 0, 0, 259, 127, 128, 129, 260, 261,
	0, 0, 0, 130, 131, 262, 0, 132, 0, 133,
	0, 0, 0, 0, 134, 263, 0, 264, 0, 135,
	136, 137, 138, 559, 266, 0, 0, 142, 0, 139,
	0, 0, 140, 267, 141, 268, 269, 270, 0, 271,
	0, 0, 143, 144, 0, 145, 146, 0, 148, 147,
	0, 272, 0, 149, 0, 0, 150, 0, 0, 151,
	0, 152, 153, 154, 156, 273, 155, 0, 157, 158,
	160, 159, 0, 0, 0, 274, 161, 275, 162, 163,
	0, 164, 0, 0, 165, 0, 0, 166, 276, 0,
	167, 0, 277, 168, 169, 170, 171, 172, 0, 278,
	173, 279, 174, 0, 175, 176, 177, 178, 179, 280,
	180, 181, 0, 182, 183, 184, 185, 186, 188, 189,
	187, 190, 191, 192, 193, 0, 194, 0, 195, 196,
	281, 197, 0, 201, 202, 203, 204, 0, 282, 205,
	206, 207, 0, 208, 198, 199, 209, 0, 210, 283,
	284, 211, 0, 217, 212, 213, 200, 214, 216, 285,
	215, 286, 0, 218, 0, 219, 220, 221, 222, 223,
	0, 287, 288, 289, 0, 0, 224, 290, 291, 0,
	225, 226, 227, 228, 0, 0, 229, 230, 231, 232,
	0, 233, 0, 292, 234, 235, 236, 293, 294, 95,
	0, 237, 0, 0, 0, 0, 238, 239, 240, 241,
	242, 0, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 0, 243, 0, 0, 0, 0, 101, 102,
	103, 244, 245, 246, 247, 104, 248, 249, 0, 105,
	250, 251, 106, 107, 0, 0, 252, 253, 254, 0,
	108, 255, 0, 0, 0, 109, 110, 111, 0, 112,
	0, 113, 114, 115, 0, 0, 116, 117, 0, 0,
	0, 0, 0, 0, 118, 119, 300, 120, 256, 121,
	257, 258, 0, 122, 0, 123, 0, 0, 0, 124,
	125, 0, 126, 0, 0, 0, 259, 127, 128, 129,
	260, 261, 0, 0, 0, 130, 131, 262, 0, 132,
	0, 133, 0, 0, 0, 0, 134, 263, 0, 264,
	0, 135, 136, 137, 138, 265, 266, 0, 0, 142,
	0, 139, 0, 0, 140, 267, 141, 268, 269, 270,
	0, 271, 0, 0, 143, 144, 0, 145, 146, 0,
	148, 147, 0, 272, 0, 149, 0, 0, 150, 0,
	0, 151, 0, 152, 153, 154, 156, 273, 155, 0,
	157, 158, 160, 159, 0, 0, 0, 274, 161, 275,
	162, 163, 0, 164, 0, 0, 165, 0, 0, 166,
	276, 0, 167, 0, 277, 168, 169, 170, 171, 172,
	0, 278, 173, 279, 174, 0, 175, 176, 177, 178,
	179, 280, 540, 181, 0, 182, 183, 184, 185, 186,
	188, 189, 187, 190, 191, 192, 193, 0, 194, 0,
	195, 196, 281, 197, 0, 201, 202, 203, 204, 0,
	282, 205, 206, 207, 0, 208, 198, 199, 209, 0,
	210, 283, 284, 211, 0, 217, 212, 213, 200, 214,
	216, 285, 215, 286, 0, 218, 0, 219, 220, 221,
	222, 223, 0, 287, 288, 289, 0, 0, 224, 290,
	291, 0, 225, 226, 227, 228, 0, 0, 229, 230,
	231, 232, 0, 233, 0, 292, 234, 235, 236, 293,
	294, 95, 0, 237, 0, 0, 0, 0, 238, 239,
	240, 241, 242, 0, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 0, 243, 0, 0, 0, 0,
	101, 102, 103, 244, 245, 246, 247, 104, 248, 249,
	0, 105, 250, 251, 106, 107, 0, 0, 252, 253,
	254, 0, 451, 255, 0, 0, 0, 109, 110, 111,
	0, 112, 0, 113, 114, 115, 0, 0, 116, 117,
	0, 0, 0, 0, 0, 0, 118, 119, 300, 120,
	256, 121, 257, 258, 0, 122, 0, 123, 0, 0,
	0, 124, 125, 0, 126, 0, 0, 0, 259, 127,
	128, 129, 260, 261, 0, 0, 0, 130, 131, 262,
	0, 132, 0, 133, 0, 0, 0, 0, 134, 263,
	0, 264, 0, 135, 136, 137, 138, 265, 266, 0,
	0, 142, 0, 139, 0, 0, 140, 267, 141, 268,
	269, 270, 0, 271, 0, 0, 143, 144, 0, 145,
	146, 0, 148, 147, 0, 272, 0, 149, 0, 0,
	449, 0, 0, 151, 0, 152, 153, 154, 156, 273,
	460, 0, 157, 158, 160, 159, 0, 0, 0, 274,
	161, 275, 162, 163, 0, 164, 0, 0, 165, 0,
	0, 166, 276, 0, 167, 0, 277, 168, 169, 170,
	171, 172, 0, 278, 173, 279, 174, 0, 175, 176,
	177, 178, 179, 280, 180, 181, 0, 182, 183, 184,
	185, 186, 188, 189, 187, 190, 191, 192, 193, 0,
	194, 0, 195, 196, 452, 197, 0, 201, 202, 203,
	204, 0, 282, 205, 450, 207, 0, 208, 198, 199,
	209, 0, 210, 283, 284, 211, 0, 217, 212, 213,
	200, 214, 216, 285, 215, 286, 0, 218, 0, 219,
	220, 221, 222, 223, 0, 457, 288, 289, 0, 0,
	453, 290, 291, 0, 225, 226, 227, 228, 0, 0,
	229, 230, 231, 232, 0, 233, 0, 292, 234, 235,
	236, 293, 294, 95, 0, 237, 0, 0, 0, 0,
	238, 239, 240, 241, 242, 0, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 0, 243, 0, 0,
	0, 0, 101, 102, 103, 244, 245, 246, 247, 104,
	248, 249, 0, 105, 250, 251, 106, 107, 0, 0,
	252, 253, 254, 0, 108, 255, 0, 0, 0, 109,
	110, 111, 0, 112, 0, 113, 114, 115, 0, 0,
	116, 117, 0, 0, 0, 0, 0, 0, 118, 119,
	300, 120, 256, 121, 257, 258, 0, 122, 0, 123,
	0, 0, 0, 124, 125, 0, 126, 0, 0, 0,
	259, 127, 128, 129, 260, 261, 0, 0, 0, 130,
	131, 262, 0, 132, 0, 133, 0, 0, 0, 0,
	134, 263, 0, 264, 0, 135, 136, 137, 138, 265,
	266, 0, 0, 142, 0, 139, 0, 0, 140, 267,
	141, 268, 269, 270, 0, 271, 0, 0, 143, 144,
	0, 145, 146, 0, 148, 147, 0, 272, 0, 149,
	0, 0, 150, 0, 0, 151, 0, 152, 153, 154,
	156, 273, 155, 0, 157, 158, 160, 159, 0, 0,
	0, 274, 161, 275, 162, 163, 0, 164, 0, 0,
	165, 0, 0, 166, 276, 0, 167, 0, 277, 168,
	169, 0, 171, 172, 0, 278, 173, 279, 174, 0,
	175, 176, 177, 0, 179, 280, 180, 181, 0, 182,
	183, 184, 185, 186, 188, 189, 187, 190, 191, 192,
	193, 0, 194, 0, 195, 196, 281, 0, 0, 201,
	202, 203, 204, 0, 282, 205, 206, 207, 0, 208,
	198, 199, 209, 0, 210, 283, 284, 211, 0, 217,
	212, 213, 200, 214, 216, 285, 215, 286, 0, 218,
	0, 219, 220, 221, 222, 223, 0, 287, 288, 289,
	0, 0, 224, 290, 291, 0, 225, 226, 227, 228,
	0, 0, 229, 230, 231, 232, 0, 233, 0, 292,
	234, 235, 236, 293, 294, 0, 0, 237, 0, 0,
	0, 0, 238, 239, 240, 241, 242, 998, 999, 0,
	1018, 1019, 1020, 1028, 1029, 1030, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	1001, 0, 0, 1032, 0, 0, 0, 0, 0, 998,
	999, 0, 1018, 1019, 1020, 1028, 1029, 1030, 0, 0,
	0, 0, 0, 0, 1000, 1021, 0, 0, 0, 0,
	1015, 0, 1001, 0, 0, 1032, 0, 0, 0, 0,
	0, 0, 998, 999, 0, 1018, 1019, 1020, 1028, 1029,
	1030, 0, 0, 0, 0, 0, 1000, 0, 1021, 0,
	0, 0, 1015, 0, 0, 1001, 0, 0, 1032, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 0, 1000,
	0, 0, 0, 0, 0, 1015, 0, 0, 0, 1025,
	1033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 0, 0, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 1025, 1033, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1006, 0, 1031, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	1023, 0, 0, 0, 1025, 1033, 1016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1031, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1022, 0, 1023, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1026, 0, 0, 1022, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1026, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1024, 1026, 0, 1012, 1013,
	1014, 1027, 0, 1011, 1009, 1010, 1002, 1003, 1004, 1005,
	1007, 1008, 0, 0, 0, 0, 0, 0, 0, 1614,
	0, 0, 0, 0, 0, 0, 0, 1024, 0, 0,
	1012, 1013, 1014, 1027, 0, 1011, 1009, 1010, 1002, 1003,
	1004, 1005, 1007, 1008, 0, 0, 0, 0, 0, 0,
	0, 1566, 0, 0, 0, 0, 0, 0, 0, 0,
	1024, 0, 0, 1012, 1013, 1014, 1027, 0, 1011, 1009,
	1010, 1002, 1003, 1004, 1005, 1007, 1008, 0, 0, 998,
	999, 2094, 1018, 1019, 1020, 1028, 1029, 1030, 0, 0,
	0, 0, 0, 1574, 1575, 1021, 1592, 1593, 1594, 0,
	0, 0, 1001, 0, 0, 1032, 0, 0, 0, 0,
	0, 998, 999, 0, 1018, 1019, 1020, 1028, 1029, 1030,
	0, 0, 0, 0, 0, 0, 1000, 1021, 0, 0,
	0, 0, 1015, 0, 1001, 0, 0, 1032, 0, 0,
	0, 0, 0, 0, 998, 999, 1589, 1018, 1019, 1020,
	1028, 1029, 1030, 0, 0, 0, 0, 0, 1000, 0,
	1021, 0, 0, 0, 1015, 0, 0, 1001, 0, 0,
	1032, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 1000, 0, 0, 0, 0, 1580, 1015, 0, 0,
	0, 1025, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 1596, 1031, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1023, 1595, 0, 1025, 1033, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1006, 0, 1031,
	1590, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1022, 1023, 0, 0, 0, 1025, 1033, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1031, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 0, 1023, 0, 0, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1591, 1026, 0, 0, 1022, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1026, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1017, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1024, 1026, 0,
	1012, 1013, 1014, 1027, 0, 1011, 1009, 1010, 1002, 1003,
	1004, 1005, 1007, 1008, 1586, 1587, 1588, 0, 2092, 1585,
	1583, 1584, 1576, 1577, 1578, 1579, 1581, 1582, 0, 1024,
	0, 0, 1012, 1013, 1014, 1027, 0, 1011, 1009, 1010,
	1002, 1003, 1004, 1005, 1007, 1008, 0, 0, 0, 0,
	2037, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1024, 0, 0, 1012, 1013, 1014, 1027, 0,
	1011, 1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008, 0,
	0, 998, 999, 2032, 1018, 1019, 1020, 1028, 1029, 1030,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	0, 0, 0, 0, 1001, 0, 0, 1032, 0, 0,
	0, 0, 0, 998, 999, 0, 1018, 1019, 1020, 1028,
	1029, 1030, 0, 0, 0, 0, 0, 0, 1000, 1021,
	0, 0, 0, 0, 1015, 0, 1001, 0, 0, 1032,
	0, 0, 0, 0, 0, 0, 998, 999, 0, 1018,
	1019, 1020, 1028, 1029, 1030, 0, 0, 0, 0, 0,
	1000, 0, 1021, 0, 0, 0, 1015, 0, 0, 1001,
	0, 0, 1032, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 0, 1000, 0, 0, 0, 0, 0, 1015,
	0, 0, 0, 1025, 1033, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 1031,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 1025, 1033, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1006,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 1023, 0, 0, 0, 1025, 1033,
	1016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1031, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1022, 0, 1023, 0, 0,
	0, 0, 0, 1016, 0, 0, 0, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1026, 0, 0, 1022, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1026, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1017, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1024,
	1026, 0, 1012, 1013, 1014, 1027, 0, 1011, 1009, 1010,
	1002, 1003, 1004, 1005, 1007, 1008, 0, 0, 0, 0,
	2028, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1024, 0, 0, 1012, 1013, 1014, 1027, 0, 1011,
	1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008, 0, 0,
	0, 0, 1967, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1024, 0, 0, 1012, 1013, 1014,
	1027, 0, 1011, 1009, 1010, 1002, 1003, 1004, 1005, 1007,
	1008, 0, 0, 998, 999, 1945, 1018, 1019, 1020, 1028,
	1029, 1030, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 0, 0, 0, 1001, 0, 0, 1032,
	0, 0, 0, 0, 0, 998, 999, 0, 1018, 1019,
	1020, 1028, 1029, 1030, 0, 0, 0, 0, 0, 0,
	1000, 1021, 0, 0, 0, 0, 1015, 0, 1001, 0,
	0, 1032, 0, 0, 0, 0, 0, 0, 998, 999,
	0, 1018, 1019, 1020, 1028, 1029, 1030, 0, 0, 0,
	0, 0, 1000, 0, 1021, 0, 0, 0, 1015, 0,
	0, 1001, 0, 0, 1032, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 0, 0, 1000, 0, 0, 0, 0,
	0, 1015, 0, 0, 0, 1025, 1033, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 1025, 1033, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1006, 0, 1031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1022, 1023, 0, 0, 0,
	1025, 1033, 1016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1031, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 0, 1023,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1026, 0, 0,
	1022, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1026,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1024, 1026, 0, 1012, 1013, 1014, 1027, 0, 1011,
	1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008, 0, 0,
	0, 0, 1944, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1024, 0, 0, 1012, 1013, 1014, 1027,
	0, 1011, 1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008,
	0, 0, 0, 0, 1834, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1024, 0, 0, 1012,
	1013, 1014, 1027, 0, 1011, 1009, 1010, 1002, 1003, 1004,
	1005, 1007, 1008, 0, 0, 998, 999, 1768, 1018, 1019,
	1020, 1028, 1029, 1030, 0, 0, 0, 0, 0, 0,
	0, 1021, 0, 0, 0, 0, 0, 0, 1001, 0,
	0, 1032, 0, 0, 0, 0, 0, 998, 999, 0,
	1018, 1019, 1020, 1028, 1029, 1030, 0, 0, 0, 0,
	0, 0, 1000, 1021, 0, 0, 0, 0, 1015, 0,
	1001, 0, 0, 1032, 0, 0, 0, 0, 0, 0,
	998, 999, 0, 1018, 1019, 1020, 1028, 1029, 1030, 0,
	0, 0, 0, 0, 1000, 0, 1021, 0, 0, 0,
	1015, 0, 0, 1001, 0, 0, 1032, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 0, 0, 0, 0, 0, 1000, 0, 0,
	0, 0, 0, 1015, 0, 0, 0, 1025, 1033, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 1031, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 1025,
	1033, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1006, 0, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1022, 1023, 0,
	0, 0, 1025, 1033, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1031, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 1023, 0, 0, 0, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1026,
	0, 0, 1022, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1026, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1024, 1026, 0, 1012, 1013, 1014, 1027,
	0, 1011, 1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008,
	0, 0, 0, 0, 1752, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1024, 0, 0, 1012, 1013,
	1014, 1027, 0, 1011, 1009, 1010, 1002, 1003, 1004, 1005,
	1007, 1008, 0, 0, 0, 0, 1705, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1024, 0,
	0, 1012, 1013, 1014, 1027, 0, 1011, 1009, 1010, 1002,
	1003, 1004, 1005, 1007, 1008, 0, 0, 998, 999, 1321,
	1018, 1019, 1020, 1028, 1029, 1030, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 0, 0, 0, 0,
	1001, 0, 0, 1032, 0, 0, 0, 0, 0, 0,
	998, 999, 0, 1018, 1019, 1020, 1028, 1029, 1030, 0,
	0, 0, 0, 0, 1000, 0, 1021, 0, 0, 0,
	1015, 0, 0, 1001, 0, 0, 1032, 0, 0, 0,
	0, 0, 998, 999, 0, 1018, 1019, 1020, 1028, 1029,
	1030, 0, 0, 0, 0, 0, 0, 1000, 1021, 0,
	0, 0, 0, 1015, 0, 1001, 0, 0, 1032, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 0, 0, 1000,
	0, 0, 0, 0, 0, 1015, 0, 0, 0, 1025,
	1033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1006, 2177, 1031, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 1025, 1033, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1006, 0, 1606, 1031, 0,
	1605, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 1023, 0, 0, 1025, 1033, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1031, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1022, 1023, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 1017, 2176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1026, 0, 0, 1022, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1017,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1026, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1017, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1024, 1026, 0, 1012, 1013,
	1014, 1027, 0, 1011, 1009, 1010, 1002, 1003, 1004, 1005,
	1007, 1008, 0, 0, 1541, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1024, 0,
	0, 1012, 1013, 1014, 1027, 0, 1011, 1009, 1010, 1002,
	1003, 1004, 1005, 1007, 1008, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1024, 0, 0, 1012, 1013, 1014, 1027, 0, 1011, 1009,
	1010, 1002, 1003, 1004, 1005, 1007, 1008, 998, 999, 0,
	1018, 1019, 1020, 1028, 1029, 1030, 0, 0, 0, 0,
	0, 0, 0, 1021, 0, 0, 0, 0, 1236, 0,
	1001, 0, 0, 1032, 0, 0, 0, 1036, 0, 0,
	0, 0, 0, 998, 999, 0, 1018, 1019, 1020, 1028,
	1029, 1030, 0, 0, 1000, 0, 0, 0, 0, 1021,
	1015, 0, 0, 1035, 0, 0, 1001, 0, 0, 1032,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1237, 0,
	1000, 0, 0, 0, 0, 0, 1015, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 998, 999,
	1006, 1018, 1019, 1020, 1028, 1029, 1030, 0, 0, 0,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 1025,
	1033, 1001, 0, 0, 1032, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1031, 1006, 0, 0, 0,
	0, 0, 0, 0, 0, 1000, 0, 0, 1023, 0,
	0, 1015, 0, 0, 1016, 1025, 1033, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1006, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1022, 0, 0, 0, 0,
	1025, 1033, 0, 0, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1031, 0, 0, 0,
	0, 1026, 0, 0, 0, 0, 0, 0, 0, 1023,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1026, 0, 0,
	1022, 535, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1024, 0, 0, 1012, 1013,
	1014, 1027, 0, 1011, 1009, 1010, 1002, 1003, 1004, 1005,
	1007, 1008, 0, 0, 0, 0, 0, 1017, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1024, 1026, 0, 1012, 1013, 1014, 1027, 0, 1011,
	1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008, 0, 0,
	998, 999, 0, 1018, 1019, 1020, 1028, 1029, 1030, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 0,
	0, 0, 0, 1001, 0, 0, 1032, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1024, 1000, 0, 1012,
	1013, 1014, 1027, 1015, 1011, 1009, 1010, 1002, 1003, 1004,
	1005, 1007, 1008, 998, 999, 0, 1018, 1019, 1020, 1028,
	1029, 1030, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 0, 0, 0, 1001, 0, 0, 1032,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 998, 999, 1006, 1018, 1019, 1020, 1028, 1029, 1030,
	1000, 0, 0, 0, 0, 0, 1015, 1021, 0, 0,
	0, 1607, 1025, 1033, 1001, 0, 0, 1032, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1031, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1000, 0,
	0, 1023, 0, 0, 1015, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 0,
	0, 1612, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1022, 0, 0, 1025, 1033, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1031, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	1016, 0, 0, 1025, 1033, 0, 0, 0, 0, 1017,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1031,
	0, 0, 0, 0, 1026, 1022, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 1016, 0,
	0, 0, 0, 0, 0, 0, 0, 1756, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1022, 0, 0, 0, 0, 0, 0,
	0, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1026, 1024, 0,
	0, 1012, 1013, 1014, 1027, 0, 1011, 1009, 1010, 1002,
	1003, 1004, 1005, 1007, 1008, 0, 0, 0, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 998, 999, 1026, 1018, 1019, 1020, 1028,
	1029, 1030, 0, 0, 0, 0, 0, 0, 0, 1021,
	0, 0, 0, 0, 0, 0, 1001, 0, 0, 1032,
	0, 1024, 0, 0, 1012, 1013, 1014, 1027, 0, 1011,
	1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008, 0, 0,
	1000, 0, 0, 0, 0, 0, 1015, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1024,
	0, 0, 1012, 1013, 1014, 1027, 0, 1011, 1009, 1010,
	1002, 1003, 1004, 1005, 1007, 1008, 0, 0, 0, 998,
	999, 0, 1018, 1019, 1020, 1028, 1029, 1030, 0, 0,
	0, 0, 0, 0, 0, 1021, 1006, 0, 0, 1565,
	0, 0, 1001, 0, 0, 1032, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1025, 1033, 998, 999, 0,
	1018, 1019, 1020, 1028, 1029, 1030, 1000, 0, 0, 0,
	0, 1031, 1015, 1021, 0, 0, 0, 0, 0, 0,
	1001, 0, 0, 1032, 1023, 0, 0, 0, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	1015, 0, 0, 0, 0, 1022, 0, 0, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 1572, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1025, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1031, 0, 0,
	1006, 0, 1017, 0, 0, 0, 0, 0, 0, 0,
	1023, 0, 0, 0, 0, 0, 1016, 1026, 0, 1025,
	1033, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1031, 0, 0, 0, 0,
	0, 1022, 0, 0, 0, 0, 0, 0, 1023, 0,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1022,
	0, 1024, 0, 0, 1012, 1013, 1014, 1027, 1017, 1011,
	1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008, 0, 0,
	0, 998, 999, 1026, 1018, 1019, 1020, 1028, 1029, 1030,
	0, 0, 0, 0, 0, 0, 0, 1021, 0, 0,
	0, 0, 0, 0, 1001, 0, 1017, 1032, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 998,
	999, 1026, 1018, 1019, 1020, 1028, 1029, 1030, 1000, 0,
	0, 0, 0, 0, 1015, 0, 0, 0, 0, 0,
	0, 0, 1001, 0, 0, 1032, 0, 1024, 0, 0,
	1012, 1013, 1014, 1027, 0, 1011, 1009, 1010, 1002, 1003,
	1004, 1005, 1007, 1008, 0, 0, 1000, 0, 0, 0,
	0, 0, 1015, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1006, 1024, 0, 0, 1012, 1013,
	1014, 1027, 0, 1011, 1009, 1010, 1002, 1003, 1004, 1005,
	1007, 1008, 0, 1025, 1033, 998, 999, 0, 1018, 1019,
	1020, 1028, 1029, 1030, 0, 0, 0, 0, 0, 1031,
	0, 0, 1006, 0, 0, 0, 0, 0, 1001, 0,
	0, 1032, 1023, 0, 0, 0, 0, 0, 1016, 0,
	0, 1025, 1033, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1000, 0, 0, 0, 0, 1031, 1015, 0,
	0, 0, 0, 0, 0, 998, 999, 0, 0, 0,
	1023, 1028, 1029, 1030, 0, 0, 1016, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1001, 0,
	0, 1032, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	1017, 0, 1000, 0, 0, 0, 0, 0, 1015, 0,
	0, 0, 0, 0, 0, 1026, 0, 1025, 1033, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 1016, 1026, 0, 0, 0, 0, 1006, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1025, 1033, 1024,
	0, 0, 1012, 1013, 1014, 1027, 0, 1011, 1009, 1010,
	1002, 1003, 1004, 1005, 1007, 1008, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1023, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 1024, 0, 0,
	1012, 1013, 1014, 1027, 1017, 1011, 1009, 1010, 1002, 1003,
	1004, 1005, 1007, 1008, 0, 0, 0, 0, 0, 1026,
	0, 0, 0, 0, 0, 886, 878, 903, 870, 894,
	893, 0, 0, 872, 871, 0, 0, 0, 0, 905,
	904, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 899, 0, 891, 890, 0, 0, 0, 0, 1026,
	0, 0, 889, 1024, 0, 0, 1012, 1013, 1014, 1027,
	0, 1011, 1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008,
	888, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 881, 880,
	882, 883, 884, 0, 902, 0, 0, 0, 0, 0,
	0, 0, 0, 1024, 0, 0, 0, 0, 0, 1027,
	0, 1011, 1009, 1010, 1002, 1003, 1004, 1005, 1007, 1008,
	874, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 879, 886, 878, 903,
	870, 894, 893, 0, 0, 872, 871, 0, 0, 0,
	0, 905, 904, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 887, 0, 0, 0, 1255, 1253,
	1254, 1257, 1256, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 899, 0, 891, 890, 0, 0, 0,
	0, 0, 0, 875, 889, 0, 0, 0, 0, 0,
	462, 0, 0, 0, 885, 876, 0, 0, 0, 0,
	0, 0, 888, 0, 907, 0, 0, 0, 466, 0,
	0, 0, 0, 0, 873, 0, 0, 900, 901, 0,
	467, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	881, 880, 882, 883, 884, 0, 902, 0, 877, 0,
	0, 468, 0, 906, 0, 0, 469, 0, 0, 0,
	0, 474, 475, 0, 0, 483, 0, 0, 0, 0,
	0, 0, 874, 0, 0, 0, 0, 465, 470, 0,
	0, 0, 0, 0, 892, 0, 0, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 887, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 472, 473, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 875, 0, 0, 0, 476,
	0, 0, 0, 0, 0, 0, 885, 876, 0, 478,
	0, 0, 0, 0, 0, 0, 907, 0, 0, 463,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 900,
	901, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	877, 0, 0, 0, 0, 906, 0, 0, 477, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 479, 464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 480, 0,
	485, 0, 0, 0, 481, 0, 0, 0, 0, 482,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 484,
}
var sqlPact = [...]int{

	3925, -1000, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 806, 17105, 17105, 926, 21333,
	-1000, -1000, -1000, -1000, -1000, -1000, 697, 724, 292, 5310,
	21333, 21333, 21031, 1142, 1189, 1186, 1142, 22843, -1000, -1000,
	26467, -1000, 31056, 510, 511, 510, 510, 544, 22843, 1191,
	648, 14047, 861, 135, -1000, 739, 19, 26165, 21333, 1489,
	34, 19219, 305, 3925, 20729, 25863, 21333, 20427, 617, 32,
	17709, 21333, -1000, 38, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1328, 14047, 14047, 346, 38,
	-1000, 1326, 1205, 1200, 19219, 25561, 25259, 24957, 24655, -1000,
	12789, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 794, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 320, 317, -1000, 20125,
	-1000, 989, -1000, 33, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 14047, 14047, 987, -1000, 21333, -1000, -1000, 24353,
	24051, 703, 315, 944, -1000, -1000, 599, 430, -1000, -1000,
	13733, 46, -1000, -1000, -1000, -1000, 1510, 16803, 764, 1321,
	-1000, 986, 1320, 1319, 1317, 1315, 1314, -1000, 877, -1000,
	1309, 420, 803, 508, -1000, 1307, 1306, 944, -1000, 944,
	-1000, -1000, -1000, 616, 22843, -1000, -1000, -1000, -1000, -1000,
	19219, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1737, -1000, -1000, -1000, -1000, 1707, -1000, -1000, -1000,
	-1000, 23749, 21333, 21333, 1222, 23447, -1000, 739, -1000, -1000,
	-1000, 1169, 1485, 1485, 1485, 1540, 146, 139, 135, 23,
	21333, -1000, 314, 23, 9563, 9563, -1000, -1000, 305, -1000,
	384, 16187, -1000, 8582, -1000, 797, 1402, 481, 876, 1396,
	-149, 820, 817, 1394, 16803, 17709, 32, 30, -1000, -1000,
	-1000, 4996, 16803, -1000, -1000, 679, 15268, 38, -1000, -1000,
	-1000, 19219, 21333, 21333, 706, 23145, -1000, 1393, 125, 1390,
	-1000, 124, 1386, -1000, 124, 1377, 28, -1000, -1000, 305,
	19823, 21333, 1615, 30960, -1000, 10872, -1000, -1000, 17105, 841,
	-1000, -1000, 17105, -1000, -1000, 1590, -1000, 21333, 10872, 29,
	-1000, -1000, -1000, -1000, 1120, 1157, 561, 13419, 13105, 1451,
	870, -1000, -1000, -1000, 45, 5310, 698, -1000, -1000, -1000,
	19521, -1000, -1000, 21333, 1335, 17105, 21333, 21333, 21333, 21333,
	21333, -1000, -1000, 21333, -1000, 1117, -1000, -1000, 21333, 21333,
	793, 646, -1000, 29, -1000, 22843, -1000, 134, -1000, -1000,
	-1000, -1000, 304, 1075, 437, 89, 22541, 437, 1072, -1000,
	1169, -1000, 962, 1206, 9891, 1192, 10872, 135, -1000, -1000,
	135, 135, 10872, -1000, -1000, 21333, 23, 1585, 21333, 132,
	-1000, 29463, -1000, -1000, 10872, 10872, 10872, 10872, 10872, 899,
	359, -1000, 301, 297, 6279, -1000, -1000, 1703, -1000, -1000,
	-1000, 145, -1000, -1000, 10872, 38, -1000, -1000, -1000, -1000,
	296, 1751, -1000, 475, -1000, -1000, -1000, 416, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1332, 294, 293,
	-1000, -1000, -1000, -1000, 288, 287, 285, 284, 282, 281,
	278, 272, 270, 268, 267, 265, 262, 261, 260, 879,
	-1000, 460, -1000, -1000, 460, 460, -1000, 253, 253, 254,
	-1000, -1000, -1000, -1000, 253, -1000, -1000, -1000, 412, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 259, 132, -1000, -1000,
	-1000, 21333, 27, -1000, 30257, -1000, -14, 805, -1000, 18615,
	1481, 1480, 1465, 19219, 1563, 19, 1303, 1561, 19, 1301,
	614, 21333, 21333, 612, 609, 19219, 405, -1000, 21333, -1000,
	-1000, 20, -1000, -1000, 1300, 21, -1000, -1000, 443, 88,
	1583, 88, 15575, -1000, 21333, 21333, -1000, 21333, -1000, -1000,
	21333, -1000, 21333, 21333, -1000, 21333, 158, 18011, 768, 1374,
	673, 19, 14, -1000, 1619, -1000, -1000, -1000, -1000, 96,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 254, 879,
	253, 253, 253, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	412, -1000, -1000, 460, 460, 460, -1000, -1000, 7, 30257,
	602, -1000, 1299, 505, -1000, 435, 3, 944, 970, -1000,
	-1000, -1000, -1000, -1000, -1000, 16, -1000, -1000, 16, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1749, 5310,
	-1000, -1000, -1000, -1000, -1000, -1000, 21333, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 21333, 21333, 21333,
	-1000, -1000, 19219, 18313, 1581, 1367, 889, -1000, 1579, 21333,
	985, 1070, -1000, 640, 1366, -1000, -1000, -1000, -1000, 30257,
	-1000, 382, -1000, -1000, 30257, 782, 1193, -1000, 1193, 5,
	-1000, 29427, -1000, 251, -6, 443, 9563, 14962, 30808, 30960,
	5310, 634, 10872, 10872, 10872, 10872, 10872, 10872, 10872, 10872,
	10872, 10872, 10872, 10872, 10872, 10872, 10872, 10872, 10872, 10872,
	10872, 10872, 10872, 10872, 1188, 10872, 601, 10872, 10872, 10872,
	10872, 1274, 902, 230, 924, 5310, -1000, -1000, 1693, 1693,
	1693, 30499, 30499, 226, 359, -1000, 10872, -1000, 9236, 139,
	28710, -1, -1000, -1000, -1000, 7261, 448, 30257, 38, 5951,
	-1000, 1700, 719, 1341, 1276, 249, 133, 130, 10872, 10872,
	11199, 11199, 10872, 11526, 10872, 10872, 6606, 10872, 10872, 10872,
	10872, 10872, 10872, -1000, 247, -1000, -1000, -1000, -1000, 1698,
	-1000, -1000, 1690, -1000, 633, 572, 1682, 443, 121, 8582,
	-1000, 768, 21333, 21333, 21333, -1000, -1000, 1068, 22239, 1042,
	30960, 21333, -1000, 243, 240, 1154, 1150, 21333, 21333, 21937,
	21635, 21333, 796, 19, -1000, 238, 19, -1000, 237, 21333,
	812, -1000, 21333, 21333, 809, 1262, 997, -1000, 438, 16803,
	666, 1298, 21333, 743, 10872, 815, -1000, 14656, 465, 21333,
	743, 90, -1000, -1000, -1000, 401, 21333, -1000, -1000, -1000,
	125, -1000, 124, 124, -1000, -1000, 19219, -1000, -1000, -1000,
	-1000, -1000, -1000, 30960, 355, 353, -1000, 1679, 598, -1000,
	591, 587, 586, -1000, 236, -1000, 10872, 21333, 21333, 1185,
	-1000, -1000, -1000, 742, -1000, 810, -1000, 14047, -1000, -38,
	-1000, -1000, -1000, 405, -1000, 120, -12, -7, 30960, -1000,
	-1000, -1000, -1000, -1000, 21333, 300, 21333, 19, 21333, -1000,
	1748, 19, 21333, 1363, 1408, 398, 21333, 782, -1000, 10872,
	1676, -1000, -1000, -1000, 10872, -1000, -1000, -1000, 19, -1000,
	1273, -1000, -8, 1611, 937, -160, 144, 409, -1000, 14350,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	419, 956, 956, 560, 560, 560, 560, 1784, 2155, 677,
	729, 30645, 30645, 30645, 1950, 340, 340, 30645, 30645, 30645,
	30499, 30461, 201, 10872, 10872, 584, 894, 230, 201, 10872,
	201, 201, 201, 201, -1000, 1503, -1000, -1000, -1000, -1000,
	1297, 224, 11526, 11526, -1000, -1000, -1000, 6279, 11853, -1000,
	-1000, -1000, -1000, -1000, 223, 10872, -1000, 29037, -179, -13,
	-1000, -1000, 10872, -101, -121, -1000, -1000, 675, -1000, 10872,
	-1000, 6, 10872, 10872, 10872, 119, 118, -1000, 903, 222,
	220, 10872, -1000, -1000, 30219, 27109, 117, 1296, -147, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 116, 115, 30133, -147,
	103, 27483, -1000, 11526, 11526, 11526, 6279, 217, 102, 29102,
	-147, 29891, 8909, 8909, 8909, 99, 29853, 10872, -147, 27077,
	3783, 3675, -17, -21, -22, 1673, -23, 98, 418, 415,
	97, 1273, -1000, -1000, -1000, -1000, 571, 554, 1362, -1000,
	1034, -1000, 469, -1000, 901, 10872, 12483, 216, 213, 878,
	-1000, 1361, 996, 1360, 996, -1000, -14, 790, -1000, 10872,
	-1000, 10872, -1000, 549, -1000, -1000, 547, 438, 1294, 650,
	-1000, 925, -1000, -1000, 660, -1000, -1000, 6933, 30257, -1000,
	743, 1474, -29, -1000, -1000, -1000, 443, 15575, 14962, 8582,
	-39, -1000, -1000, -1000, 768, -1000, 532, 1671, 94, 1095,
	960, 800, 722, 1661, 30257, -38, -38, -1000, -1000, -1000,
	-1000, -1000, 21333, -1000, 1248, -1000, 18313, 210, 21333, 209,
	-1000, 208, -1000, -1000, 206, 21333, 1135, 398, 17407, -1000,
	437, 941, 28677, -1000, 92, 1270, 1529, -1000, 14962, 1174,
	1161, 14962, 1018, 910, 910, 910, -1000, 205, 175, 349,
	409, 4354, 10872, 18917, 920, 62, 86, 1611, 10872, 201,
	201, 10872, 11526, 11526, -1000, 201, -1000, -1000, -1000, -1000,
	-1000, 1292, 204, 10872, 30960, 3955, 3927, -40, -1000, 8255,
	-48, -1000, 10872, -1000, 28645, -1000, -1000, 347, 1406, -1000,
	10872, 29790, 85, 7928, -1000, 29528, -5, -5, -1000, 1735,
	-1000, 15881, 444, 922, 28318, 30808, 30960, -1000, 10872, -1000,
	-1000, 1289, 10872, -1000, 30808, 30960, 11526, 11526, 11526, 11526,
	11526, 11526, 11526, 11526, 11526, 11526, 11526, 11526, 11526, 11526,
	11526, 11526, 11526, 11526, 11526, 1190, 11526, 1689, 1689, 1689,
	-55, 7601, -1000, 1282, 1289, 10872, 10872, 30960, 84, 83,
	82, -1000, 10872, -147, 10872, 10872, 10872, -1000, -1000, -1000,
	78, -1000, 1657, -1000, -1000, -1000, -1000, 1270, 21333, 21333,
	21333, 1356, -1000, 1463, -1000, 28285, -46, -1000, 323, 1504,
	10872, -1000, -1000, 200, 12483, 21333, -1000, 1147, 1214, 492,
	21333, -1000, 21333, -1000, 21333, 21333, 21333, -47, -51, 21333,
	21333, -1000, 16803, 563, 199, -1000, -61, -1000, -1000, 231,
	19, 743, -1000, -75, -1000, 400, -1000, 343, 341, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 77, -1000, -1000,
	1252, -1000, 12483, 187, 21333, 18313, 1576, 12483, 971, 1140,
	398, 17407, -1000, 640, -1000, -1000, -1000, 441, 10872, 10872,
	1611, 14962, 14962, 1254, 1159, 14962, -1000, -1000, -1000, -1000,
	339, 375, 338, 12789, 409, 18917, -1000, 1655, 1160, -56,
	-1000, -1000, 21333, 183, -1000, 409, 1724, 201, 3732, 3197,
	10872, 30960, 30585, -57, 10872, 10872, -1000, -62, -1000, 10872,
	331, 30257, -1000, -1000, -1000, 30257, 10872, 1714, 10872, 75,
	74, 71, -1000, -1000, -1000, 26769, 10872, 70, -1000, 69,
	66, 30257, 1282, 30257, -1000, -1000, 569, 569, 683, 683,
	683, 683, 1689, 927, 1151, 373, 2049, 2049, 2049, 1259,
	749, 749, 2049, 2049, 2049, 1286, 1094, 182, 176, 10872,
	-64, -1000, -1000, -1000, 30257, 30257, 60, -1000, -1000, -1000,
	-147, 3444, 28253, 27926, -1000, 59, 441, -1000, -1000, -1000,
	21333, -1000, 21333, -1000, 5310, 21333, 1279, 1023, -1000, -1000,
	1144, 181, 11526, 21333, -1000, 859, 12483, 1491, 38, 5310,
	1491, 27893, 5951, -66, -68, 1016, -1000, 1013, 10872, -1000,
	30960, 996, 996, -1000, 543, 540, 530, 520, -1000, -1000,
	-81, 16501, 1731, 1413, 21333, 1461, -1000, -1000, 180, -1000,
	-1000, -1000, 896, -70, 12483, -82, 56, 19, -83, 21333,
	-1000, 398, 17407, -1000, 1408, -1000, 21333, 30257, -147, -1000,
	1254, -1000, 179, 10872, 14962, -1000, -160, -1000, -87, -1000,
	409, -88, 18917, -1000, 330, -171, -1000, 395, -1000, 409,
	178, 21333, 18917, 10872, 10872, 30585, -93, -1000, 201, 201,
	-1000, 27861, -1000, 30257, -1000, 29528, -1000, -1000, -1000, 893,
	-1000, 27534, -1000, -1000, -1000, -1000, 11526, 1283, 177, 30960,
	27501, -1000, -1000, 10872, -1000, -1000, -1000, -1000, -1000, 1184,
	-1000, -1000, 21333, 1026, -1000, -1000, 10872, 176, 174, 1248,
	162, -1000, -1000, -1000, -1000, -1000, -1000, 1504, 6, -1000,
	855, -1000, -1000, 30257, 1502, -1000, -1000, 21333, 21333, 155,
	154, -1000, 153, 38, -102, -1000, 191, 629, -104, 21333,
	-1000, -1000, 5624, 21333, 859, -109, -1000, 1248, -1000, 859,
	152, 17407, -1000, 1135, -128, -1000, 1574, -1000, 21333, 30257,
	-1000, 409, -1000, 1652, 18917, 158, -1000, -1000, 1160, -1000,
	4679, 18917, 21333, -110, -1000, 201, 201, -1000, -1000, 55,
	922, 1528, -1000, 3969, 11526, 30960, -111, -1000, 27469, -1000,
	-1000, 1353, 27142, 1100, 21333, -1000, 21333, 1491, 54, 21333,
	473, 5310, -1000, -1000, 10872, 10872, 10872, 1731, -1000, -1000,
	1726, 699, -1000, 443, -1000, 151, 1248, 859, -1000, 1248,
	12483, -1000, 1140, 21333, 150, -116, 18917, -1000, -1000, 328,
	-1000, -1000, 1645, -1000, -117, -1000, -1000, 853, 10872, 3969,
	-124, -1000, -1000, 1344, -1000, 955, 883, 52, -129, -1000,
	-1000, 89, -1000, 10872, -1000, -136, -138, -5, -1000, -1000,
	15575, -1000, 21333, -1000, 1248, -1000, -146, -1000, -1000, -1000,
	-1000, -1000, 409, 147, -1000, 51, 10545, 10545, -147, -1000,
	21333, -1000, 965, 958, 693, -1000, -1000, -1000, -1000, -1000,
	1100, 30257, -1000, -1000, 49, -133, -163, -1000, 859, 18917,
	-1000, -1000, -1000, -1000, 12169, 1038, 734, 29070, -1000, -1000,
	-1000, 1426, -1000, 480, 1098, 1098, 955, 1714, -1000, 980,
	1248, -1000, 1623, -1000, -1000, -1000, -1000, -1000, -1000, 1630,
	-1000, -1000, 1105, -1000, -1000, -1000, -1000, -1000, -1000, 10218,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2046, 2041, 1549, 1692, 2039, 2038, 2037, 1690, 2034,
	2033, 2032, 2031, 2027, 2024, 123, 1675, 1617, 28, 1563,
	2020, 101, 2019, 2017, 2016, 121, 2014, 2013, 2012, 2011,
	2008, 2006, 184, 2004, 2000, 113, 1557, 1555, 1551, 1999,
	1997, 116, 1996, 1995, 21, 1989, 90, 1987, 33, 169,
	2357, 146, 1986, 1982, 1981, 32, 120, 89, 1980, 45,
	1975, 1974, 54, 29, 26, 22, 1971, 119, 1967, 1966,
	1292, 31, 1964, 1963, 150, 1957, 34, 30, 471, 161,
	159, 131, 137, 1956, 1955, 1954, 1948, 55, 1947, 5,
	1937, 1935, 14, 62, 66, 1931, 27, 20, 1923, 1922,
	141, 1921, 75, 118, 1521, 140, 143, 158, 1918, 81,
	12, 83, 1916, 1915, 145, 43, 1911, 39, 98, 152,
	1907, 74, 163, 70, 36, 76, 115, 1899, 1892, 1891,
	97, 1890, 128, 80, 1889, 1886, 95, 1879, 147, 149,
	1872, 1866, 105, 1862, 139, 1861, 1860, 157, 164, 1859,
	166, 1857, 1856, 170, 134, 10, 56, 71, 9, 1509,
	1508, 125, 64, 48, 23, 1854, 1627, 1298, 982, 42,
	99, 60, 63, 100, 57, 68, 153, 19, 1853, 1852,
	129, 1851, 1849, 1847, 1843, 1842, 94, 1839, 1838, 84,
	151, 15, 3, 16, 107, 44, 67, 104, 160, 162,
	130, 1837, 103, 132, 49, 977, 1835, 1832, 1864, 136,
	1831, 1830, 1829, 1723, 1244, 1242, 142, 1827, 1824, 925,
	202, 1822, 1820, 59, 1819, 133, 126, 1813, 156, 148,
	109, 1812, 41, 165, 106, 1811, 127, 65, 0, 1900,
	607, 1809, 135, 96, 1808, 1807, 1806, 1804, 35, 2,
	11, 6, 7, 4, 93, 13, 1803, 1802, 144, 24,
	77, 1801, 168, 1800, 1799, 1798, 46, 1797, 17, 1792,
	18, 1790, 1788, 8, 1, 1784, 1782, 154, 1775, 111,
	1772, 1583, 1767, 155, 1764, 1763, 1570, 47, 102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 4, 57, 57,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 54, 54, 59, 59, 59,
	61, 61, 58, 58, 53, 53, 5, 5, 236, 236,
	237, 237, 43, 43, 47, 47, 44, 45, 45, 46,
	46, 7, 7, 7, 6, 6, 8, 8, 8, 8,
	8, 8, 15, 16, 16, 16, 16, 16, 16, 16,
	16, 106, 106, 105, 105, 108, 108, 17, 17, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 204, 204, 203, 20, 178, 178, 21, 21,
	21, 21, 22, 131, 131, 23, 23, 23, 23, 24,
	31, 277, 277, 277, 281, 281, 282, 282, 283, 283,
	283, 283, 283, 283, 283, 279, 279, 29, 29, 29,
	29, 42, 34, 34, 34, 34, 34, 34, 151, 148,
	148, 147, 147, 147, 147, 149, 149, 149, 149, 152,
	152, 86, 86, 229, 228, 228, 234, 234, 234, 84,
	84, 84, 84, 84, 85, 85, 85, 227, 227, 227,
	227, 235, 235, 235, 235, 235, 235, 233, 233, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 19, 278, 278, 280, 280, 26,
	36, 36, 37, 37, 38, 38, 38, 38, 11, 11,
	12, 12, 87, 87, 88, 88, 157, 157, 157, 157,
	89, 89, 60, 60, 60, 156, 246, 246, 247, 247,
	247, 247, 247, 247, 248, 248, 248, 248, 248, 248,
	248, 244, 244, 245, 242, 242, 243, 243, 243, 243,
	284, 284, 155, 155, 92, 92, 251, 251, 251, 251,
	249, 249, 249, 249, 249, 252, 250, 253, 253, 253,
	253, 253, 190, 190, 190, 40, 13, 66, 66, 14,
	10, 10, 135, 135, 96, 96, 195, 195, 195, 77,
	77, 55, 55, 55, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 136, 136, 137, 137, 27,
	30, 33, 39, 39, 39, 39, 39, 286, 286, 73,
	73, 73, 73, 74, 74, 150, 150, 153, 153, 154,
	154, 154, 68, 67, 69, 69, 9, 9, 62, 62,
	63, 63, 64, 64, 65, 65, 287, 287, 25, 25,
	25, 80, 80, 144, 144, 144, 146, 146, 145, 145,
	145, 121, 121, 121, 41, 101, 101, 110, 110, 111,
	111, 201, 112, 112, 32, 32, 50, 50, 48, 48,
	48, 48, 48, 48, 49, 49, 51, 51, 51, 51,
	51, 51, 51, 259, 259, 259, 262, 262, 258, 260,
	260, 261, 261, 285, 285, 122, 122, 122, 91, 90,
	90, 94, 94, 93, 95, 95, 194, 119, 119, 119,
	119, 138, 138, 139, 139, 140, 140, 141, 141, 141,
	142, 142, 143, 143, 118, 118, 174, 174, 52, 52,
	100, 100, 102, 102, 164, 164, 164, 165, 165, 163,
	163, 163, 163, 196, 196, 196, 196, 196, 196, 196,
	196, 196, 275, 275, 275, 276, 276, 193, 193, 197,
	197, 197, 197, 197, 197, 191, 191, 191, 191, 192,
	192, 202, 202, 125, 125, 125, 125, 123, 123, 124,
	124, 198, 198, 198, 198, 120, 120, 199, 199, 199,
	158, 158, 205, 205, 205, 223, 223, 99, 99, 99,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 206, 207, 207, 207,
	207, 209, 209, 209, 208, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 222, 222,
	222, 222, 222, 210, 210, 217, 217, 218, 218, 219,
	220, 211, 211, 212, 212, 213, 214, 221, 221, 221,
	221, 225, 225, 215, 215, 215, 215, 215, 216, 132,
	132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
	132, 132, 132, 133, 133, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 166, 166, 166, 166, 166, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 168, 168, 168,
	168, 170, 170, 170, 170, 170, 170, 170, 170, 170,
	170, 170, 254, 254, 254, 254, 254, 254, 254, 256,
	256, 257, 257, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	263, 263, 264, 264, 266, 266, 267, 267, 268, 269,
	269, 269, 270, 271, 271, 265, 265, 272, 272, 272,
	273, 273, 274, 274, 274, 274, 274, 180, 180, 180,
	181, 181, 182, 188, 188, 188, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 75, 75, 75, 75, 75, 107, 107, 177,
	177, 175, 175, 175, 179, 179, 126, 126, 224, 224,
	224, 224, 224, 224, 224, 127, 127, 127, 134, 128,
	128, 129, 129, 129, 129, 129, 129, 171, 172, 130,
	130, 130, 173, 173, 183, 187, 187, 186, 185, 185,
	184, 184, 161, 161, 162, 162, 160, 159, 115, 115,
	114, 114, 113, 113, 288, 288, 189, 189, 116, 116,
	117, 109, 109, 200, 200, 200, 200, 103, 103, 82,
	82, 104, 104, 78, 78, 81, 81, 79, 79, 79,
	79, 97, 97, 98, 98, 76, 76, 169, 169, 169,
	169, 169, 169, 169, 169, 169, 169, 169, 226, 226,
	226, 176, 70, 70, 70, 71, 71, 72, 72, 231,
	231, 231, 232, 232, 232, 232, 230, 230, 230, 230,
	230, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 239,
	239, 239, 239, 239, 239, 239, 239, 239, 239, 239,
	239, 239, 239, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 4, 6, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 6, 1, 1,
	1, 3, 3, 0, 2, 0, 2, 1, 3, 5,
	0, 4, 6, 7, 3, 3, 1, 1, 1, 1,
	1, 1, 6, 3, 5, 4, 6, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 5, 3, 0, 1, 1,
	1, 1, 3, 3, 0, 2, 3, 2, 3, 6,
	6, 1, 2, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 3, 6, 3, 4, 1, 5, 2,
	1, 3, 3, 3, 3, 1, 3, 3, 1, 2,
	2, 1, 0, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 3, 4, 4, 4, 4, 2,
	4, 4, 4, 4, 4, 4, 2, 3, 3, 2,
	3, 3, 4, 2, 3, 4, 3, 3, 4, 4,
	2, 5, 5, 6, 2, 2, 0, 2, 0, 3,
	6, 6, 5, 5, 4, 12, 4, 12, 7, 10,
	6, 9, 1, 0, 1, 3, 1, 1, 1, 1,
	8, 0, 1, 1, 0, 3, 2, 0, 3, 1,
	2, 2, 3, 6, 2, 1, 1, 2, 4, 2,
	5, 7, 8, 5, 3, 1, 4, 6, 5, 10,
	1, 1, 4, 0, 3, 0, 2, 2, 2, 0,
	1, 1, 2, 2, 0, 3, 3, 2, 1, 1,
	2, 2, 1, 2, 1, 4, 5, 2, 0, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	3, 2, 3, 3, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 0,
	3, 0, 3, 0, 3, 0, 1, 0, 6, 7,
	6, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 2, 0, 1, 3, 1,
	1, 3, 5, 5, 1, 1, 3, 3, 1, 2,
	3, 2, 3, 4, 1, 1, 8, 8, 1, 2,
	4, 4, 4, 2, 2, 3, 1, 3, 6, 1,
	0, 1, 0, 1, 0, 1, 1, 0, 1, 1,
	0, 1, 0, 3, 1, 3, 2, 2, 2, 1,
	1, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 2, 3,
	3, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 7, 4, 6, 3, 1, 5, 6,
	9, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 3, 4, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 5,
	2, 1, 1, 1, 1, 4, 1, 2, 2, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 0, 1, 4, 1, 3, 3, 3, 5,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 4, 3, 4,
	4, 5, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	3, 2, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 6, 6, 7, 1, 2, 1,
	2, 1, 1, 2, 1, 3, 1, 1, 2, 2,
	1, 1, 3, 5, 6, 8, 6, 6, 4, 4,
	1, 1, 1, 5, 1, 3, 1, 3, 1, 1,
	1, 1, 6, 6, 4, 4, 4, 4, 4, 6,
	5, 5, 5, 4, 8, 6, 6, 4, 4, 4,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 3, 5,
	4, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 2, 1, 3, 1,
	3, 3, 3, 2, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 0, 2, 2, 3,
	2, 1, 1, 3, 5, 1, 2, 4, 2, 0,
	1, 0, 3, 5, 1, 0, 2, 2, 1, 1,
	1, 2, 1, 2, 1, 0, 1, 1, 1, 3,
	3, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -15,
	-16, -17, -19, -20, -22, -23, -24, -25, -26, -28,
	-30, -31, -33, -32, -34, -35, -36, -37, -38, -39,
	-27, -29, -40, -41, -42, 23, 34, 229, 47, 67,
	-9, -10, -11, -12, -13, -14, -261, 95, 104, 126,
	209, 102, 88, 120, 204, 231, 233, 240, -48, -50,
	250, -151, 253, 35, 262, 61, 98, 235, 227, 228,
	287, 296, 69, -259, -51, -49, 338, 312, 319, 244,
	-52, 271, 304, 341, 271, 135, 81, 307, -277, -104,
	271, 81, -79, -70, 331, 4, -238, -240, 20, 21,
	23, 33, 34, 35, 40, 44, 47, 48, 55, 60,
	61, 62, 64, 66, 67, 68, 71, 72, 79, 80,
	82, 84, 88, 90, 94, 95, 97, 102, 103, 104,
	110, 111, 114, 116, 121, 126, 127, 128, 129, 136,
	139, 141, 134, 149, 150, 152, 153, 156, 155, 160,
	163, 166, 168, 169, 170, 173, 171, 175, 176, 178,
	177, 183, 185, 186, 188, 191, 194, 197, 200, 201,
	202, 203, 204, 207, 209, 211, 212, 213, 214, 215,
	217, 218, 220, 221, 222, 223, 224, 227, 225, 226,
	228, 229, 230, 231, 233, 235, 236, 238, 251, 252,
	263, 240, 241, 242, 243, 246, 247, 248, 250, 253,
	255, 258, 261, 262, 264, 267, 265, 260, 270, 272,
	273, 274, 275, 276, 283, 287, 288, 289, 290, 293,
	294, 295, 296, 298, 301, 302, 303, 308, 313, 314,
	315, 316, 317, 28, 36, 37, 38, 39, 41, 42,
	45, 46, 51, 52, 53, 56, 83, 85, 86, 101,
	105, 106, 112, 122, 124, 130, 131, 140, 142, 143,
	144, 146, 158, 172, 182, 184, 195, 199, 206, 208,
	216, 237, 245, 256, 257, 266, 268, 278, 279, 280,
	284, 285, 300, 304, 305, -277, 150, 213, -78, -70,
	81, 90, 139, 295, 294, 81, 135, 271, 307, -18,
	338, -32, -8, -16, -4, -25, -41, -15, -35, -19,
	-36, -37, -38, -17, 23, -230, 4, -238, -240, -239,
	-241, 58, 70, 119, 138, 132, 148, 151, 159, 161,
	174, 196, 198, 234, 254, 22, 24, 25, 26, 27,
	29, 30, 31, 32, 43, 49, 50, 54, 57, 59,
	65, 69, 73, 74, 75, 76, 77, 78, 87, 89,
	91, 92, 93, 96, 98, 100, 107, 108, 109, 115,
	117, 118, 120, 123, 125, 133, 135, 137, 145, 147,
	154, 157, 162, 164, 165, 179, 180, 181, 187, 189,
	190, 192, 193, 205, 210, 219, 232, 244, 249, 259,
	269, 271, 277, 281, 282, 286, 291, 292, 297, 299,
	306, 307, 309, 310, 311, 312, -70, -70, -70, 209,
	22, -281, 22, -282, -283, 69, 95, 120, 244, 139,
	90, 294, 150, 150, -281, -74, 240, -70, -148, 163,
	247, 55, 237, 283, -149, -147, -229, 278, -152, -105,
	173, -70, 4, 173, 249, 81, 22, 34, 55, 60,
	82, 121, 135, 136, 65, 66, 153, 212, 163, 248,
	272, 278, 283, 69, 298, 274, 103, -286, 283, 283,
	-286, -286, -73, 283, 281, -74, 4, 81, 249, 173,
	-285, 271, -234, -227, -190, 9, 286, 107, 189, -233,
	8, 330, -226, -232, 5, 7, 329, 4, -238, -240,
	-239, 271, 297, 307, -135, 81, 292, -49, -51, -50,
	-93, -94, 291, 145, 100, 193, -48, -50, -259, -262,
	217, -258, -70, -262, -90, -91, 22, 92, 342, -198,
	-78, 190, -117, 338, -3, -198, 130, -78, -81, 130,
	-78, -70, -198, 130, 281, 342, -104, -97, -70, -160,
	-159, 340, 118, -234, -234, 118, 338, -114, -115, -159,
	-160, 118, 147, 147, -199, -198, -70, 130, -82, 130,
	-81, -106, 130, -105, -106, 130, -204, -203, -232, 304,
	271, 135, -178, 338, -131, 338, -70, 22, 189, 342,
	-234, -234, 189, -70, -148, 53, -148, 251, 338, -153,
	-154, -67, -68, -69, 149, 211, 215, 281, 323, 118,
	317, -234, -86, 87, -108, 340, 55, -236, -233, 9,
	251, 212, 248, 118, -278, 189, 118, 118, 118, 118,
	118, 212, 248, 118, 317, 149, 211, 263, 271, 307,
	118, 118, -150, -153, -150, 281, -74, -120, -198, 8,
	7, 7, -105, 130, -70, -105, 135, -70, 130, -93,
	-94, -119, -138, -139, 162, 109, 187, -122, 22, 92,
	-122, -122, 44, 339, 339, 342, -262, -98, 338, -109,
	-200, -166, 331, -168, 329, 330, 324, 179, 318, -180,
	-170, -183, 101, 237, 338, -78, -169, 343, 9, -256,
	-50, 29, -181, -182, 49, -70, 7, 8, 5, 6,
	-76, -207, -176, -216, 286, 107, 181, -254, -255, 4,
	-238, -231, -208, -218, -212, -215, 146, 58, 74, 77,
	75, 78, 249, 297, 50, 28, 105, 106, 199, 206,
	268, 284, 285, 130, 182, 131, 56, 122, 158, 94,
	37, 39, 41, 42, 51, 52, 83, 85, 86, 112,
	140, 142, 143, 144, 184, 216, 256, 266, 279, 280,
	305, -239, -219, -220, -213, -214, -221, -109, -117, 331,
	-78, 338, -116, -189, -166, 87, -57, 225, -56, 21,
	23, 95, 302, 101, 260, 275, 241, 260, 275, 241,
	225, 101, 343, 225, 225, 101, -236, -79, 342, -230,
	331, -237, -236, 264, 339, -103, -78, -115, -199, -80,
	-78, -80, 250, -70, 30, 101, -59, 342, 48, 230,
	101, -59, 342, 101, -59, 101, 339, 342, -198, 130,
	-81, 30, -177, -205, -206, -208, -217, -211, -215, -216,
	40, 46, 45, 276, 172, 245, 257, 300, 38, 188,
	141, 140, 142, 143, 144, 256, 37, 216, 112, 94,
	86, 85, 184, 42, 41, -219, -220, -213, -214, 83,
	279, 280, 146, 39, 52, 51, 305, 266, -107, -166,
	-277, -283, -277, 30, -147, -229, -107, 342, 160, -85,
	166, 178, 127, 190, 315, -228, 87, -234, -228, 87,
	72, -235, 5, 4, -176, -190, 87, 163, -216, 340,
	-230, 252, -105, 22, -229, -280, 115, -277, -229, -229,
	-229, -229, -229, -70, 160, -229, -229, 271, 135, 271,
	-74, -59, 342, 338, -92, 179, -260, 312, -92, 338,
	-71, 130, -70, -260, 179, -119, -139, -138, -140, -166,
	22, -143, 111, 175, -166, -168, -49, -49, -49, -95,
	-194, -166, -258, 30, -97, -100, 342, 118, 10, 11,
	57, 33, 329, 330, 331, 332, 113, 333, 334, 327,
	328, 326, 321, 322, 323, 63, 167, 239, 13, 14,
	15, 26, 192, 161, 318, 132, 254, 324, 16, 17,
	18, 148, 36, 133, -75, 30, 4, -83, -166, -166,
	-166, -166, -166, 198, -113, -161, 336, -50, 338, -50,
	-166, -107, 7, -50, -175, 336, -184, -166, -114, 338,
	5, 338, 5, -263, 313, 115, 338, 338, 338, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 338, 338,
	338, 338, 338, 208, -225, 308, -225, -225, -209, 338,
	-209, -210, 338, -209, 314, 319, 338, -100, -78, 342,
	339, 342, 281, -136, 65, 59, -156, 130, 59, -242,
	-70, 65, -243, 54, 292, 210, 117, -136, 65, -136,
	65, 65, -198, 33, -32, 118, 33, -32, 118, 281,
	-81, -70, 281, 281, -198, -202, 320, -70, -202, 342,
	118, 339, 342, -158, 310, -144, -32, 338, 87, 30,
	-144, -110, -111, -201, -112, -78, 338, -70, -70, -81,
	-82, -105, -106, -106, -18, -203, 101, -21, -32, -25,
	-41, -15, 339, 342, -99, 29, -132, 338, 316, 170,
	84, 128, 169, -133, 243, 339, 342, 281, 118, 283,
	339, -154, -84, 215, 258, 226, 246, 342, -230, -279,
	-70, -78, -81, -78, -198, -87, -97, -88, -70, -157,
	-156, -244, -245, -242, 135, 292, 108, 30, 101, -66,
	203, 30, 189, 179, -62, 273, 101, -141, -226, 338,
	330, -142, 237, 238, 342, -55, 31, 91, 338, 339,
	-158, -200, -102, -196, 336, -198, -78, -50, -197, 338,
	-223, -205, -222, 221, 222, 220, 224, 223, -205, -230,
	278, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
	-166, -166, -166, 161, 132, 254, 36, 133, -166, 281,
	-166, -166, -166, -166, 171, 179, 181, 286, 107, 293,
	92, 185, -288, 269, 32, -173, -50, 338, -188, 27,
	259, 22, -230, -180, 237, 338, -161, -166, -162, -107,
	339, 339, 342, -107, -179, 337, -175, -187, -186, 309,
	339, -107, 306, 22, 92, 331, 7, -132, -264, 110,
	123, 338, 339, 339, -166, -166, -126, -224, -107, 4,
	316, 170, 84, 128, 169, 243, -126, -127, -166, -107,
	-128, -167, -168, 329, 330, 324, 338, 237, -129, -166,
	-107, -166, 43, 157, 282, -130, -166, 118, -107, -166,
	-166, -166, -107, -107, -107, 338, 7, 7, 278, 278,
	7, -158, 339, -189, -56, -78, -70, -70, 179, -156,
	130, -61, 179, -205, -70, 338, 338, 152, 152, -70,
	-70, 130, -70, 130, -70, -70, -57, 225, -32, 338,
	-32, 338, -70, 225, -70, -78, 225, -43, 129, 185,
	-46, 312, -236, 264, 118, -78, -121, 232, -166, -121,
	-146, 189, -103, 304, -70, -121, -101, 342, 118, 323,
	-103, -59, -59, -59, -198, -205, 336, 336, 7, 281,
	281, 281, 281, 338, -166, -279, -279, -67, 290, 62,
	215, -234, 342, -202, 339, 339, 342, -71, 135, -71,
	-32, -105, 5, -32, -78, 101, -63, 97, -287, 323,
	-70, -142, -166, -194, -21, -118, 123, -202, 342, 70,
	-125, 151, 174, 119, 159, 234, 138, 7, 104, -35,
	-163, 343, 338, -193, 319, -50, -197, -196, 317, -166,
	-166, 281, -288, 269, -173, -166, 171, 181, 286, 107,
	293, 92, 185, 118, 338, -167, -167, -107, -170, 338,
	-107, 337, 346, 339, -166, 337, 337, 342, -185, -186,
	96, -166, -94, 342, -93, -166, -107, -107, 339, 339,
	-269, 197, 338, 338, -166, 30, 342, 339, 118, 339,
	339, -134, 205, 339, 10, 11, 329, 330, 331, 332,
	113, 333, 334, 327, 328, 326, 321, 322, 323, 63,
	167, 239, 13, 14, 15, 148, 133, -167, -167, -167,
	-107, 338, 339, -171, -172, 118, 115, 30, -130, -130,
	-130, 339, 118, -107, 342, 342, 342, 339, 339, 339,
	7, 339, 342, 339, 317, 317, 339, -118, 281, 281,
	101, 179, 301, -246, -243, -166, -96, -195, -70, -257,
	338, -254, -255, -76, 338, 338, -54, 95, 250, -137,
	101, -59, 101, -59, 281, -136, 65, -107, -107, 281,
	281, -46, 118, 270, 191, 264, -109, 180, -121, 64,
	339, -158, -111, -102, -189, 339, 337, 7, 7, 339,
	170, 128, 169, -133, 169, -133, -133, 7, -70, -89,
	134, -157, 338, -71, 338, 338, -92, 338, -70, -64,
	156, -287, -233, -260, 190, 339, 339, -174, 125, 44,
	-196, 151, 151, -196, -125, 151, -123, 196, -123, -123,
	-275, 338, -18, 338, 337, -193, -230, 336, 344, -107,
	-192, -191, 30, -70, 194, 339, -166, -166, -167, -167,
	118, 338, -166, -177, 26, 26, 339, -107, 339, 342,
	-162, -166, 339, -175, 98, -166, 277, 339, 306, -94,
	-94, -94, 5, -270, -70, 338, 310, -93, 339, -223,
	-205, -166, -171, -166, -223, -205, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
	-167, -167, -167, -167, -167, 92, 179, 185, -167, 342,
	-107, 339, -172, -171, -166, -166, -205, 339, 339, 339,
	-107, -166, -166, -166, 339, 7, -174, -70, -70, -156,
	101, -247, 65, -248, 57, 108, 69, 179, 181, 292,
	210, 54, 87, 219, 339, 339, 342, -77, -114, 57,
	-77, -166, 338, -96, -97, 179, 87, 179, 87, 80,
	288, -70, -70, -78, -70, -70, 339, 339, -70, -78,
	-237, 278, 338, -145, 338, 189, -32, -121, 323, 337,
	337, 339, 133, -96, 338, -97, -87, 30, -96, 189,
	-65, 155, -287, -233, -62, -266, 311, -166, -107, -196,
	-196, -124, 299, 189, 151, -196, 337, 339, -276, 7,
	337, -204, -193, -192, 7, -165, -164, 116, 177, 339,
	-70, 338, -193, 26, 26, -166, -177, 339, -166, -166,
	339, -166, 337, -166, 5, -166, 339, 339, 339, -271,
	-70, -166, 339, 339, 339, -172, 118, 92, 185, 338,
	-166, 339, 339, 342, 339, 339, 339, -266, -156, -70,
	-230, -70, 108, 130, 181, 152, 338, -167, -78, -155,
	-284, 68, 267, -195, -55, -230, -55, 339, -107, 339,
	339, 181, 181, -166, -205, -59, -59, 281, 281, 281,
	281, -169, -76, -70, -45, -44, 5, 93, -97, 65,
	-117, -50, 338, 200, 339, -96, 339, 339, -32, 339,
	-78, -287, -233, -63, -267, -268, -70, -124, 338, -166,
	-196, -163, 339, 342, -193, 339, -192, 337, 342, 345,
	323, -193, 338, -97, -191, -166, -166, 339, 339, -94,
	-265, 202, 339, -167, 118, 338, -177, 339, -166, -248,
	-71, 179, -166, -72, 338, -89, 338, -77, -94, 219,
	-58, 57, -70, -70, 338, 338, 338, 342, 339, -47,
	323, 294, 180, 339, -70, -70, -155, 339, -89, -155,
	338, -233, -64, 342, 30, -97, -193, 7, -192, -18,
	-164, -230, 336, -192, -97, 339, 339, -94, 44, -167,
	-177, 339, 339, 101, 339, -251, 168, -70, -97, -55,
	339, -78, -53, 299, -230, -107, -107, -107, -44, 5,
	250, -158, 338, -89, -155, -89, -96, -65, -268, -270,
	339, -191, 337, 7, 339, -272, 214, 238, -107, 339,
	108, -249, -252, -250, 189, 119, 201, 255, 339, 339,
	-92, -166, 339, 339, -94, -110, -97, -89, 339, -193,
	337, 339, -273, -274, 36, 289, 72, -166, -273, -70,
	-250, 189, -252, 189, 294, 90, -251, 339, -158, 339,
	-155, -192, -274, 207, 114, 237, 207, 114, -253, 176,
	230, 48, 250, -253, -249, -60, 48, 230, -89, 26,
	20, 181, 87, -274,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 0, 0, 0, 0,
	86, 87, 88, 89, 90, 91, 0, 0, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 424, -2,
	0, 167, 0, 368, 0, 368, 368, 372, 0, 0,
	454, 0, 333, 451, -2, 462, 0, 0, 0, 460,
	438, 0, 0, -2, 0, 0, 0, 0, 0, 141,
	0, 993, 921, 927, 928, 952, 953, 954, 971, 972,
	973, 974, 975, 976, 977, 978, 979, 980, 981, 982,
	983, 984, 985, 986, 987, 988, 989, 990, 991, 992,
	994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003,
	1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013,
	1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
	1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
	1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
	1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
	1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
	1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
	1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
	1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
	1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
	1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
	1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
	1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
	1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
	1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
	1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
	1164, 1165, 1166, 1167, 1168, 0, 0, 0, 0, 923,
	993, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 109, 110, 111, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 0, 244, 966, 967, 968, 969,
	970, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
	1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,
	1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
	1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
	1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
	1258, 1259, 1260, 1261, 1262, 1263, 127, 134, 135, 1048,
	137, 0, 144, 145, 146, 148, 149, 150, 151, 152,
	153, 154, 0, 0, 0, 361, 1075, 374, 162, 1024,
	1080, 981, 1155, 1098, 170, 175, 0, 1161, 178, 183,
	-2, 103, 209, 210, 211, 212, 213, 0, 0, 0,
	219, 246, 0, 0, 0, 0, 0, 226, 0, 229,
	233, 0, 0, 0, 240, 0, 0, 376, 367, 376,
	364, 365, 366, 369, 0, 359, 157, 158, 159, 160,
	0, 453, 161, 186, 187, 188, 197, 198, 199, 200,
	322, 0, 324, 207, 208, 948, 0, 962, 963, 964,
	965, 0, 0, 0, 0, 0, 332, -2, 434, 435,
	-2, 0, 457, 457, 457, 0, 0, 435, 0, 443,
	1054, 446, 934, 444, 0, 0, 459, 458, 0, 439,
	541, 0, 488, 0, 2, 0, 1139, 541, 0, 1139,
	926, 0, 0, 1139, 0, 0, 142, 143, 931, 929,
	930, 0, 0, 84, 85, 0, 0, 924, 900, 898,
	899, 0, 0, 0, 0, 547, 93, 1139, 59, 1139,
	919, 59, 1139, 101, 59, 1139, 0, 122, 124, 1167,
	0, 0, 0, 0, 132, 0, 136, 138, 0, 0,
	249, 360, 0, 373, 163, 1128, 165, 0, 0, 169,
	377, 379, 380, 381, 0, 0, 0, 0, 0, 0,
	0, 179, 180, 181, 104, 0, 0, 214, 68, 69,
	0, 227, 230, 0, 248, 0, 0, 0, 0, 0,
	0, 228, 231, 0, 234, 0, 236, 237, 0, 0,
	0, 0, 362, 375, 363, 0, 371, 59, 545, 323,
	950, 949, 305, 1139, 450, 305, 956, 450, 1139, -2,
	0, 430, 469, 470, 0, 0, 0, 0, 455, 456,
	0, 0, 0, 426, 427, 0, 445, 0, 0, 491,
	911, 915, 916, 645, 0, 0, 0, 0, 0, 0,
	737, 739, 1133, 1155, 0, 741, 742, 0, 744, 746,
	747, 0, 750, 751, 891, 923, 937, 938, 939, 940,
	0, 0, 943, 0, 945, 946, 947, 791, 760, -2,
	-2, 935, 577, 578, 579, 580, -2, 1169, 764, 766,
	768, 769, 770, 771, 0, 1117, 1134, 1135, 1151, 1152,
	1160, 1164, 1165, 1139, 1148, 1140, 1129, 1137, 1146, 998,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 961, 607, 608, 613, 614, 616, 491, 489, 542,
	543, 0, 0, 908, 906, 907, 36, 356, 38, 0,
	356, 356, 0, 0, 0, 0, 254, 0, 0, 256,
	0, 0, 0, 0, 0, 0, 532, 922, 0, 896,
	897, 532, 70, 81, 0, 0, 917, 901, 551, 0,
	401, 0, 0, 548, 0, 0, 95, 0, 57, 58,
	0, 97, 0, 0, 99, 0, 452, 0, 0, 1139,
	0, 452, 0, 849, 559, 560, 561, 562, 563, 642,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 584, 585, 586, 587, 588, 589, 590, 604, 0,
	583, 583, 583, 596, 597, 605, 606, 611, 612, 623,
	624, 626, 628, 622, 622, 622, 619, 620, 0, 847,
	0, 147, 0, 0, 166, 0, 0, 0, 0, 382,
	194, 195, 196, 384, 385, 171, 173, 184, 172, 174,
	176, 177, 201, 202, 203, 204, 205, 206, 0, 0,
	105, 217, 215, 216, 218, 220, 0, 245, 221, 222,
	223, 224, 225, 232, 235, 238, 239, 0, 0, 0,
	370, 325, 0, 263, 0, 0, 328, 449, 0, 0,
	0, 1139, 955, 389, 0, 433, 467, 468, 471, 475,
	476, 479, 482, 483, 473, 645, 440, 441, 442, 463,
	464, 343, 447, 0, 0, 551, 0, 0, 0, 0,
	0, 0, 826, 827, 828, 829, 830, 831, 834, 835,
	832, 833, 836, 837, 838, 0, 0, 0, 839, 840,
	841, 0, 0, 843, 0, 845, 0, 0, 0, 0,
	0, 0, 905, 0, 0, 0, 914, 842, 650, 651,
	652, 674, 675, 0, 738, 902, 895, 740, 0, -2,
	847, 0, 743, 748, 749, 0, 0, 890, -2, 0,
	942, 0, 642, 793, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 592, 610, 621, 618, 617, 594, 0,
	593, 591, 0, 595, 0, 0, 0, 551, 0, 0,
	910, 0, 0, 0, 0, 355, 40, 1139, 0, 61,
	0, 0, 295, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 252, 0, 0, 253, 0, 0,
	0, 925, 0, 0, 0, 73, 0, 932, 80, 0,
	0, 0, 0, 413, 0, 413, 403, 0, 0, 0,
	413, 416, 417, 419, 420, 0, 0, 549, 94, 920,
	59, 102, 59, 59, 108, 123, 0, 125, 128, 129,
	130, 131, 126, 0, 552, 554, 564, 0, 629, 630,
	631, 632, 633, 634, 643, 133, 0, 0, 0, 0,
	168, 378, 383, 0, 191, 0, 193, 0, 106, 247,
	155, 241, 242, 532, 546, 0, 0, 262, 931, 264,
	266, 267, 268, 269, 956, 0, 956, 0, 0, 326,
	0, 0, 0, 0, 391, 397, 0, 0, 477, 0,
	0, 474, 480, 481, 0, 466, 341, 342, 452, 933,
	485, 912, 532, 492, 0, 502, 541, 518, 507, 0,
	646, 555, 556, 598, 599, 600, 601, 602, 647, 648,
	0, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, -2, -2, -2, 666, 667, 668, -2, -2, -2,
	672, 673, -2, 844, 846, 0, 905, 0, -2, 0,
	-2, -2, -2, -2, 686, 0, 688, 691, 693, 695,
	0, 0, 0, 0, 904, 705, 882, 0, 0, 823,
	824, 825, 913, 690, 0, 0, 903, 894, 0, 0,
	-2, 745, 0, 0, 0, 853, 854, 889, 885, 0,
	752, 462, 0, 0, 0, 0, 0, 951, 801, 0,
	0, 0, 765, 767, 0, 0, 0, 0, 857, -2,
	-2, -2, -2, -2, -2, -2, 0, 0, 847, 867,
	0, 0, 708, 0, 0, 0, 0, 1155, 0, 847,
	875, 0, 0, 0, 0, 0, 847, 0, 881, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 485, 544, 909, 39, 345, 0, 0, 0, 42,
	1139, 50, 0, 277, 0, 0, 0, 0, 0, 358,
	51, 1139, 59, 1139, 59, 52, 37, 356, 250, 0,
	251, 0, 349, 0, 344, 347, 0, 80, 0, 0,
	67, 0, 71, 82, 0, 918, 92, 0, 550, 398,
	413, 0, 0, 405, 402, 400, 551, 0, 0, 0,
	0, 96, 98, 100, 0, 850, 0, 0, 0, 0,
	0, 0, 0, 0, 848, 139, 140, 164, 189, 190,
	192, 185, 0, 243, 271, 304, 0, 0, 956, 0,
	260, 305, 327, 329, 0, 0, 393, 397, 0, 396,
	450, 0, 0, 465, 0, 487, 0, 490, 0, 0,
	0, 0, 0, 538, 538, 538, 536, 512, 452, 0,
	518, 0, 0, 530, 0, -2, 507, 0, 0, -2,
	-2, 0, 0, 0, 706, -2, 687, 689, 692, 694,
	696, 0, 0, 0, 0, 0, 0, 0, 707, 0,
	0, 892, 895, -2, 848, 851, 852, 0, 0, 886,
	0, 0, 0, 0, 461, 462, 462, 462, 758, 0,
	759, 0, 0, 0, 0, 0, 0, 774, 0, 775,
	776, 0, 0, 777, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 711, 712, 713,
	0, 0, 778, 873, 874, 0, 0, 0, 0, 0,
	0, 783, 0, 880, 0, 0, 0, 787, 788, 789,
	0, 581, 0, 603, 625, 627, 615, 487, 0, 0,
	0, 0, 60, 275, 294, 0, 0, 334, 340, 340,
	0, 761, 762, 0, 0, 0, 44, 0, 0, 0,
	0, 48, 0, 54, 0, 0, 0, 0, 0, 0,
	0, 66, 0, 0, 0, 83, 411, 412, 399, 410,
	0, 413, 418, 415, 421, 0, 557, 0, 0, 565,
	635, 636, 637, 638, 639, 640, 641, 0, 156, 258,
	0, 265, 0, 0, 0, 263, 0, 0, 0, 395,
	397, 0, 388, 389, 472, 478, 448, 795, 0, 0,
	493, 0, 0, 0, 0, 0, 533, 537, 534, 535,
	0, 0, 0, 0, 518, 530, 499, 0, 0, 0,
	506, 529, 0, 528, 517, -2, 649, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 883, 0, 818, 0,
	0, 894, -2, 855, 884, 888, 0, 753, 0, 0,
	0, 0, 944, 799, 800, 804, 0, 0, 763, 0,
	0, 856, 866, 868, 709, 710, 714, 715, 716, 717,
	718, 719, 720, 721, 722, 723, -2, -2, -2, 727,
	728, 729, -2, -2, -2, 0, 0, 0, 869, 0,
	0, 821, 871, 872, 877, 878, 0, 780, 781, 782,
	879, 0, 0, 0, 609, 0, 795, 351, 353, 41,
	0, 276, 0, 279, 0, 0, 0, 0, 285, 286,
	0, 0, 0, 0, 296, 303, 0, 343, 936, 0,
	343, 0, 0, 0, 0, 0, 56, 0, 0, 357,
	0, 59, 59, 346, 0, 0, 0, 0, 350, 348,
	72, 0, 0, 0, 0, 0, 404, 414, 0, 558,
	553, 644, 0, 0, 0, 0, 0, 0, 0, 0,
	386, 397, 0, 390, 391, 436, 0, 486, 484, 520,
	0, 522, 0, 0, 0, 524, 502, 513, 0, 515,
	518, 0, 530, 504, 0, 0, 497, 0, 496, 518,
	526, 0, 0, 0, 0, -2, 0, 699, -2, -2,
	817, 848, 893, 887, 941, 462, 754, 756, 757, 806,
	803, 0, 790, 772, 773, 865, 0, 0, 0, 0,
	848, 820, 779, 0, 785, 786, 582, 437, 43, 0,
	280, 281, 956, 0, 284, 287, 0, 289, 958, 271,
	0, 300, 301, 335, 336, 339, 337, 340, 462, 298,
	0, 45, 46, 55, 63, 47, 53, 0, 0, 0,
	0, 531, 0, 0, 0, 77, 75, 0, 0, 0,
	422, 423, 0, 0, 303, 0, 293, 271, 261, 303,
	0, 0, 392, 393, 794, 796, 0, 521, 0, 540,
	523, 518, 514, 0, 530, 452, 511, 500, 0, 501,
	0, 530, 0, 0, 508, -2, -2, 700, 819, 0,
	462, 0, 792, -2, 0, 0, 0, 822, 0, 278,
	282, 0, 0, 309, 0, 297, 0, 343, 0, 0,
	65, 0, 352, 354, 0, 0, 0, 0, 79, 76,
	0, 0, 407, 551, 409, 0, 271, 303, 259, 271,
	0, 394, 395, 0, 0, 0, 0, 516, 509, 0,
	498, 494, 0, 505, 0, 527, 755, 809, 0, -2,
	0, 735, 784, 0, 288, 314, 0, 0, 0, 338,
	753, 305, 49, 0, 62, 0, 0, 462, 78, 74,
	0, 408, 0, 291, 271, 330, 0, 387, 797, 798,
	539, 503, 518, 0, 525, 0, 0, 0, 805, 736,
	0, 290, 310, 311, 0, 306, 307, 308, 957, 302,
	309, 64, 255, 257, 0, 551, 0, 292, 303, 530,
	495, 802, 807, 810, -2, 1101, 990, 0, 808, 283,
	312, 0, 313, 0, 0, 0, 314, 0, 406, 274,
	271, 510, 0, 812, 813, 814, 815, 816, 315, 0,
	318, 319, 0, 316, 299, 270, 272, 273, 331, 0,
	317, 320, 321, 811,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 327, 3, 333, 328, 3,
	338, 339, 331, 329, 342, 330, 340, 332, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 346, 341,
	321, 323, 322, 3, 343, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 336, 3, 337, 334, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 344, 326, 345, 324,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 325, 57664, 335,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:795
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:801
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:807
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:836
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 36:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:878
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:888
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:893
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:898
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:907
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:910
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:920
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:930
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:940
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:943
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:950
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:959
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:969
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = nil
		}
	case 57:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = DropCascade
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = DropRestrict
		}
	case 59:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = DropDefault
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:993
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 61:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1002
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 63:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1003
		{
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1006
		{
			return unimplemented(sqllex, "alter using")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1007
		{
		}
	case 66:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1011
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 73:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 75:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.str = ""
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 79:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1077
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 80:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1080
		{
		}
	case 81:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1084
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1119
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1130
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1134
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1150
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1162
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1223
		{ /* SKIP DOC */
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1255
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1261
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1282
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1334
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1338
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1348
		{
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1379
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1399
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1410
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1439
		{
			return unimplemented(sqllex, "set local")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1441
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1453
		{ /* SKIP DOC */
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1476
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1480
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1491
		{
			return unimplemented(sqllex, "set from current")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1494
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1503
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1507
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1511
		{
		}
	case 182:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1511
		{
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1518
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1536
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1548
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = Low
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = Normal
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1566
		{
			sqlVAL.union.val = High
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1572
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1580
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1611
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1635
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1655
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1667
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1675
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1683
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1687
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1703
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1723
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1727
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1731
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1735
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1739
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1743
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1747
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1755
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1759
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1763
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 246:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1813
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1817
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1823
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1827
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1831
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1835
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1842
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1846
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1856
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1879
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1885
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1899
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1906
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = DropDefault
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1920
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1991
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2003
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2012
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 296:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 303:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2116
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			return unimplemented(sqllex, "match full")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2126
		{
			return unimplemented(sqllex, "match partial")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2127
		{
			return unimplemented(sqllex, "match simple")
		}
	case 309:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2128
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2134
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2138
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2141
		{
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2144
		{
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			return unimplemented(sqllex, "no action")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2150
		{
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2152
		{
			return unimplemented(sqllex, "action set null")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2153
		{
			return unimplemented(sqllex, "action set default")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2165
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2189
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = true
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2238
		{
			sqlVAL.union.val = false
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2260
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2261
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2264
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 340:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2265
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = Ascending
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2273
		{
			sqlVAL.union.val = Descending
		}
	case 343:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2277
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 344:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2304
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2316
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2319
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2320
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2324
		{
			sqlVAL.union.val = true
		}
	case 356:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = false
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
		}
	case 358:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2334
		{
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2351
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2358
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2370
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2374
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2383
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2384
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2388
		{
			sqlVAL.str = ""
		}
	case 370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2400
		{
			sqlVAL.str = ""
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2406
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2410
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2416
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2420
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2426
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2430
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2444
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2466
		{
			sqlVAL.union.val = ReadOnly
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2470
		{
			sqlVAL.union.val = ReadWrite
		}
	case 386:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2499
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 389:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2503
		{
			sqlVAL.str = ""
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 391:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.str = ""
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 393:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.str = ""
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2529
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 395:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.str = ""
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2538
		{
		}
	case 397:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2539
		{
		}
	case 398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2543
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 399:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2549
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2569
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2579
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2603
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 410:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2609
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2615
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 413:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 414:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2631
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2637
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2638
		{
		}
	case 417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2642
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2656
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2668
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2672
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2749
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2753
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2808
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2821
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2847
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2865
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2866
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2867
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2871
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2874
		{
			return unimplemented(sqllex, "cte")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2877
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2878
		{
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2882
		{
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2885
		{
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2886
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.union.val = true
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2894
		{
			sqlVAL.union.val = false
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2898
		{
			sqlVAL.union.val = false
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = true
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2909
		{
		}
	case 460:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2910
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2914
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2918
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2948
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2968
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2990
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3006
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 478:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3010
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 479:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3020
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3021
		{
		}
	case 482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3024
		{
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3025
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 485:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3057
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 488:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3075
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3079
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3091
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3095
		{
			sqlVAL.union.val = &From{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3115
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3122
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3133
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3160
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 503:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3177
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3192
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3200
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3238
		{
			sqlVAL.union.val = nil
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3244
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3250
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = true
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3262
		{
			sqlVAL.union.val = false
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3282
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3286
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3294
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3298
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3302
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			sqlVAL.str = astFullJoin
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3347
		{
			sqlVAL.str = astLeftJoin
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.str = astRightJoin
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3355
		{
			sqlVAL.str = astInnerJoin
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3361
		{
		}
	case 538:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3362
		{
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3383
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3387
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3391
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 547:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3426
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3436
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3448
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3461
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3462
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3476
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3477
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3485
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 573:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3523
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 576:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3548
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3557
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = nil
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 586:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3590
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 598:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 600:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3666
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 601:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 602:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3702
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 615:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3734
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3773
		{
		}
	case 622:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3774
		{
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3800
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = year
		}
	case 630:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = month
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = day
		}
	case 632:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3818
		{
			sqlVAL.union.val = hour
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3822
		{
			sqlVAL.union.val = minute
		}
	case 634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3832
		{
			sqlVAL.union.val = month
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3836
		{
			sqlVAL.union.val = hour
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3840
		{
			sqlVAL.union.val = minute
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3844
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3848
		{
			sqlVAL.union.val = minute
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3860
		{
			sqlVAL.union.val = nil
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = second
		}
	case 644:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3869
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3893
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3901
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3904
		{
			return unimplemented(sqllex, "at tz")
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3913
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3917
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3953
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3957
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3985
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3989
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3993
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4001
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4005
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4072
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4074
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4078
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4082
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4086
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4090
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4094
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4098
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4102
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4106
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4114
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4118
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4122
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4138
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4178
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4182
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4186
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4214
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4218
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4222
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4226
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4230
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4234
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4238
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4242
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4246
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4287
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4295
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4311
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4324
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4364
		{
			return unimplemented(sqllex, "variadic")
		}
	case 755:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4365
		{
			return unimplemented(sqllex, "variadic")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4367
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4371
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4388
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4395
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			return unimplemented(sqllex, "func_application")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 763:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4409
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4411
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4415
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4423
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4426
		{
			return unimplemented(sqllex, "current role")
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4427
		{
			return unimplemented(sqllex, "current user")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4428
		{
			return unimplemented(sqllex, "session user")
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4429
		{
			return unimplemented(sqllex, "user")
		}
	case 772:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4431
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4439
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4451
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4455
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4458
		{
			return unimplemented(sqllex, "treat")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4460
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4464
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4468
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4472
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4502
		{
			return unimplemented(sqllex, "within group")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4503
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4522
		{
			sqlVAL.union.val = Window(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4532
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 798:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4538
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4561
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.str = ""
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4586
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4590
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4600
		{
			return unimplemented(sqllex, "frame range")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4601
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4602
		{
		}
	case 810:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4605
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4606
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4612
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4613
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4614
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 815:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4615
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4616
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 817:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4645
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = Any
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = Some
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4665
		{
			sqlVAL.union.val = All
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4670
		{
			sqlVAL.union.val = Plus
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = Minus
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4672
		{
			sqlVAL.union.val = Mult
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = Div
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4674
		{
			sqlVAL.union.val = FloorDiv
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = Mod
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4676
		{
			sqlVAL.union.val = Bitand
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = Bitor
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4678
		{
			sqlVAL.union.val = Pow
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = Bitxor
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = LT
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = GT
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4682
		{
			sqlVAL.union.val = EQ
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4683
		{
			sqlVAL.union.val = LE
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = GE
		}
	case 841:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4685
		{
			sqlVAL.union.val = NE
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4689
		{
			sqlVAL.union.val = Like
		}
	case 844:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = NotLike
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = ILike
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = NotILike
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4703
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4707
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4723
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4727
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4731
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4747
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4751
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4787
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4815
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4819
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4823
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4827
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4831
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4847
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4867
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 887:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4939
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4975
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
		}
	case 905:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4981
		{
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4990
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5000
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5060
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5120
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5143
		{
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5179
		{
			return unimplemented(sqllex, "func const")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 944:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5188
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5198
		{
			sqlVAL.union.val = DNull
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5215
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.str = ""
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5256
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5260
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
