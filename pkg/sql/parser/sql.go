// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:47

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() SequenceOption {
	return u.val.(SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []SequenceOption {
	return u.val.([]SequenceOption)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:504
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ACTION = lex.ACTION
const ADD = lex.ADD
const ALL = lex.ALL
const ALL_EXISTENCE = lex.ALL_EXISTENCE
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CSV = lex.CSV
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPLAIN = lex.EXPLAIN
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const HAVING = lex.HAVING
const HELP = lex.HELP
const HIGH = lex.HIGH
const HOUR = lex.HOUR
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const INET = lex.INET
const INTERLEAVE = lex.INTERLEAVE
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const IS = lex.IS
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NULLS = lex.NULLS
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const ON = lex.ON
const ONLY = lex.ONLY
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIALIZABLE = lex.SERIALIZABLE
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SOME_EXISTENCE = lex.SOME_EXISTENCE
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYSTEM = lex.SYSTEM
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const TEXT = lex.TEXT
const THAN = lex.THAN
const THEN = lex.THEN
const TIME = lex.TIME
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TYPE = lex.TYPE
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:7032

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	386, 54,
	-2, 756,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	154, 605,
	-2, 0,
	-1, 54,
	98, 756,
	158, 756,
	336, 756,
	337, 756,
	-2, 0,
	-1, 64,
	1, 718,
	218, 718,
	265, 718,
	381, 718,
	383, 718,
	385, 718,
	386, 718,
	-2, 731,
	-1, 97,
	4, 758,
	20, 758,
	21, 758,
	24, 758,
	29, 758,
	34, 758,
	35, 758,
	36, 758,
	37, 758,
	38, 758,
	39, 758,
	40, 758,
	41, 758,
	42, 758,
	43, 758,
	45, 758,
	46, 758,
	47, 758,
	48, 758,
	49, 758,
	50, 758,
	53, 758,
	54, 758,
	55, 758,
	57, 758,
	58, 758,
	62, 758,
	63, 758,
	64, 758,
	66, 758,
	67, 758,
	68, 758,
	69, 758,
	71, 758,
	73, 758,
	74, 758,
	77, 758,
	78, 758,
	79, 758,
	87, 758,
	88, 758,
	89, 758,
	90, 758,
	91, 758,
	92, 758,
	93, 758,
	94, 758,
	96, 758,
	98, 758,
	100, 758,
	103, 758,
	104, 758,
	106, 758,
	110, 758,
	111, 758,
	112, 758,
	113, 758,
	114, 758,
	115, 758,
	116, 758,
	124, 758,
	125, 758,
	126, 758,
	127, 758,
	128, 758,
	130, 758,
	132, 758,
	137, 758,
	138, 758,
	140, 758,
	143, 758,
	144, 758,
	145, 758,
	146, 758,
	147, 758,
	148, 758,
	149, 758,
	152, 758,
	153, 758,
	155, 758,
	158, 758,
	159, 758,
	160, 758,
	161, 758,
	162, 758,
	163, 758,
	164, 758,
	165, 758,
	167, 758,
	170, 758,
	171, 758,
	172, 758,
	174, 758,
	175, 758,
	176, 758,
	177, 758,
	178, 758,
	180, 758,
	181, 758,
	183, 758,
	185, 758,
	186, 758,
	189, 758,
	190, 758,
	193, 758,
	195, 758,
	196, 758,
	198, 758,
	199, 758,
	200, 758,
	201, 758,
	202, 758,
	204, 758,
	205, 758,
	206, 758,
	207, 758,
	211, 758,
	212, 758,
	213, 758,
	214, 758,
	215, 758,
	217, 758,
	219, 758,
	220, 758,
	223, 758,
	224, 758,
	226, 758,
	228, 758,
	229, 758,
	230, 758,
	231, 758,
	232, 758,
	233, 758,
	234, 758,
	235, 758,
	237, 758,
	238, 758,
	239, 758,
	240, 758,
	241, 758,
	243, 758,
	244, 758,
	245, 758,
	246, 758,
	247, 758,
	248, 758,
	249, 758,
	250, 758,
	252, 758,
	253, 758,
	254, 758,
	255, 758,
	256, 758,
	258, 758,
	259, 758,
	260, 758,
	261, 758,
	262, 758,
	263, 758,
	264, 758,
	266, 758,
	268, 758,
	269, 758,
	270, 758,
	271, 758,
	273, 758,
	274, 758,
	275, 758,
	276, 758,
	277, 758,
	279, 758,
	280, 758,
	281, 758,
	282, 758,
	283, 758,
	284, 758,
	286, 758,
	287, 758,
	288, 758,
	289, 758,
	291, 758,
	292, 758,
	293, 758,
	294, 758,
	297, 758,
	298, 758,
	299, 758,
	300, 758,
	301, 758,
	302, 758,
	303, 758,
	304, 758,
	305, 758,
	306, 758,
	308, 758,
	310, 758,
	311, 758,
	312, 758,
	313, 758,
	314, 758,
	315, 758,
	316, 758,
	317, 758,
	319, 758,
	320, 758,
	321, 758,
	324, 758,
	325, 758,
	326, 758,
	327, 758,
	329, 758,
	330, 758,
	331, 758,
	332, 758,
	335, 758,
	336, 758,
	337, 758,
	338, 758,
	340, 758,
	342, 758,
	343, 758,
	344, 758,
	345, 758,
	346, 758,
	347, 758,
	350, 758,
	355, 758,
	356, 758,
	357, 758,
	358, 758,
	359, 758,
	-2, 0,
	-1, 116,
	1, 721,
	218, 721,
	265, 721,
	381, 721,
	383, 721,
	385, 721,
	386, 721,
	-2, 730,
	-1, 121,
	1, 656,
	170, 656,
	243, 656,
	247, 656,
	385, 656,
	386, 656,
	-2, 0,
	-1, 123,
	1, 656,
	385, 656,
	386, 656,
	-2, 0,
	-1, 124,
	1, 656,
	385, 656,
	386, 656,
	-2, 0,
	-1, 125,
	1, 660,
	385, 660,
	386, 660,
	-2, 0,
	-1, 147,
	4, 764,
	5, 764,
	6, 764,
	7, 764,
	8, 764,
	9, 764,
	20, 764,
	21, 764,
	24, 764,
	29, 764,
	30, 764,
	34, 764,
	35, 764,
	36, 764,
	37, 764,
	38, 764,
	39, 764,
	40, 764,
	41, 764,
	42, 764,
	43, 764,
	45, 764,
	46, 764,
	47, 764,
	48, 764,
	49, 764,
	50, 764,
	51, 764,
	52, 764,
	53, 764,
	54, 764,
	55, 764,
	57, 764,
	58, 764,
	60, 764,
	62, 764,
	63, 764,
	64, 764,
	66, 764,
	67, 764,
	68, 764,
	69, 764,
	71, 764,
	73, 764,
	74, 764,
	76, 764,
	77, 764,
	78, 764,
	79, 764,
	81, 764,
	82, 764,
	83, 764,
	85, 764,
	86, 764,
	87, 764,
	88, 764,
	89, 764,
	90, 764,
	91, 764,
	92, 764,
	93, 764,
	94, 764,
	95, 764,
	96, 764,
	98, 764,
	100, 764,
	103, 764,
	104, 764,
	106, 764,
	110, 764,
	111, 764,
	112, 764,
	113, 764,
	114, 764,
	115, 764,
	116, 764,
	117, 764,
	118, 764,
	124, 764,
	125, 764,
	126, 764,
	127, 764,
	128, 764,
	130, 764,
	132, 764,
	135, 764,
	137, 764,
	138, 764,
	140, 764,
	143, 764,
	144, 764,
	145, 764,
	146, 764,
	147, 764,
	148, 764,
	149, 764,
	150, 764,
	152, 764,
	153, 764,
	155, 764,
	157, 764,
	158, 764,
	159, 764,
	160, 764,
	161, 764,
	162, 764,
	163, 764,
	164, 764,
	165, 764,
	167, 764,
	169, 764,
	170, 764,
	171, 764,
	172, 764,
	173, 764,
	174, 764,
	175, 764,
	176, 764,
	177, 764,
	178, 764,
	180, 764,
	181, 764,
	183, 764,
	184, 764,
	185, 764,
	186, 764,
	187, 764,
	189, 764,
	190, 764,
	193, 764,
	195, 764,
	196, 764,
	197, 764,
	198, 764,
	199, 764,
	200, 764,
	201, 764,
	202, 764,
	203, 764,
	204, 764,
	205, 764,
	206, 764,
	207, 764,
	208, 764,
	210, 764,
	211, 764,
	212, 764,
	213, 764,
	214, 764,
	215, 764,
	217, 764,
	220, 764,
	223, 764,
	224, 764,
	225, 764,
	226, 764,
	227, 764,
	228, 764,
	229, 764,
	230, 764,
	231, 764,
	232, 764,
	233, 764,
	234, 764,
	235, 764,
	237, 764,
	238, 764,
	239, 764,
	240, 764,
	241, 764,
	243, 764,
	244, 764,
	245, 764,
	246, 764,
	247, 764,
	248, 764,
	249, 764,
	250, 764,
	252, 764,
	253, 764,
	254, 764,
	255, 764,
	256, 764,
	258, 764,
	259, 764,
	260, 764,
	261, 764,
	262, 764,
	263, 764,
	264, 764,
	266, 764,
	267, 764,
	268, 764,
	269, 764,
	270, 764,
	271, 764,
	273, 764,
	274, 764,
	275, 764,
	276, 764,
	277, 764,
	279, 764,
	280, 764,
	281, 764,
	282, 764,
	283, 764,
	284, 764,
	285, 764,
	286, 764,
	287, 764,
	288, 764,
	289, 764,
	290, 764,
	291, 764,
	292, 764,
	293, 764,
	294, 764,
	297, 764,
	298, 764,
	299, 764,
	300, 764,
	301, 764,
	302, 764,
	303, 764,
	304, 764,
	305, 764,
	306, 764,
	308, 764,
	310, 764,
	311, 764,
	312, 764,
	313, 764,
	314, 764,
	315, 764,
	316, 764,
	317, 764,
	319, 764,
	320, 764,
	321, 764,
	324, 764,
	325, 764,
	326, 764,
	327, 764,
	328, 764,
	329, 764,
	330, 764,
	331, 764,
	332, 764,
	335, 764,
	336, 764,
	337, 764,
	338, 764,
	339, 764,
	340, 764,
	342, 764,
	343, 764,
	344, 764,
	345, 764,
	346, 764,
	347, 764,
	350, 764,
	355, 764,
	356, 764,
	357, 764,
	358, 764,
	359, 764,
	360, 764,
	368, 764,
	373, 764,
	374, 764,
	375, 764,
	382, 764,
	388, 764,
	-2, 0,
	-1, 150,
	1, 54,
	386, 54,
	-2, 756,
	-1, 524,
	134, 1378,
	322, 1378,
	365, 1378,
	384, 1378,
	-2, 0,
	-1, 525,
	134, 1324,
	322, 1324,
	365, 1324,
	384, 1324,
	-2, 0,
	-1, 527,
	134, 1441,
	322, 1441,
	365, 1441,
	384, 1441,
	-2, 0,
	-1, 529,
	134, 1464,
	322, 1464,
	365, 1464,
	384, 1464,
	-2, 0,
	-1, 536,
	134, 1384,
	322, 1384,
	365, 1384,
	384, 1384,
	-2, 350,
	-1, 562,
	1, 428,
	381, 428,
	383, 428,
	385, 428,
	386, 428,
	-2, 0,
	-1, 563,
	1, 481,
	131, 481,
	381, 481,
	383, 481,
	385, 481,
	386, 481,
	-2, 0,
	-1, 569,
	1, 442,
	381, 442,
	383, 442,
	385, 442,
	386, 442,
	-2, 0,
	-1, 571,
	1, 446,
	381, 446,
	383, 446,
	385, 446,
	386, 446,
	-2, 0,
	-1, 574,
	1, 454,
	381, 454,
	383, 454,
	385, 454,
	386, 454,
	-2, 0,
	-1, 575,
	1, 459,
	381, 459,
	383, 459,
	385, 459,
	386, 459,
	-2, 0,
	-1, 578,
	1, 469,
	381, 469,
	383, 469,
	385, 469,
	386, 469,
	-2, 0,
	-1, 604,
	119, 766,
	131, 766,
	188, 766,
	216, 766,
	-2, 725,
	-1, 611,
	119, 765,
	131, 765,
	188, 765,
	216, 765,
	-2, 722,
	-1, 667,
	382, 1301,
	-2, 1294,
	-1, 668,
	382, 1302,
	-2, 1295,
	-1, 674,
	5, 950,
	382, 950,
	-2, 1516,
	-1, 699,
	5, 909,
	-2, 1485,
	-1, 700,
	5, 944,
	382, 944,
	-2, 1487,
	-1, 701,
	5, 919,
	-2, 1488,
	-1, 702,
	5, 918,
	-2, 1489,
	-1, 703,
	5, 944,
	382, 944,
	-2, 1492,
	-1, 704,
	5, 944,
	382, 944,
	-2, 1493,
	-1, 705,
	5, 945,
	-2, 1496,
	-1, 706,
	5, 901,
	-2, 1497,
	-1, 707,
	5, 901,
	-2, 1498,
	-1, 708,
	5, 926,
	-2, 1502,
	-1, 709,
	5, 911,
	-2, 1503,
	-1, 710,
	5, 912,
	-2, 1504,
	-1, 711,
	5, 902,
	-2, 1510,
	-1, 712,
	5, 903,
	-2, 1511,
	-1, 713,
	5, 904,
	-2, 1512,
	-1, 714,
	5, 905,
	-2, 1513,
	-1, 715,
	5, 906,
	-2, 1514,
	-1, 716,
	5, 907,
	-2, 1515,
	-1, 717,
	5, 901,
	-2, 1522,
	-1, 718,
	5, 910,
	-2, 1527,
	-1, 719,
	5, 908,
	-2, 1530,
	-1, 720,
	5, 942,
	382, 942,
	-2, 1532,
	-1, 721,
	5, 946,
	-2, 1535,
	-1, 722,
	5, 948,
	-2, 1536,
	-1, 723,
	5, 941,
	382, 941,
	-2, 1541,
	-1, 787,
	113, 505,
	-2, 855,
	-1, 921,
	233, 754,
	-2, 598,
	-1, 926,
	218, 1298,
	-2, 0,
	-1, 962,
	1, 227,
	381, 227,
	383, 227,
	385, 227,
	386, 227,
	-2, 729,
	-1, 965,
	4, 1540,
	10, 1540,
	11, 1540,
	13, 1540,
	14, 1540,
	15, 1540,
	16, 1540,
	17, 1540,
	18, 1540,
	20, 1540,
	21, 1540,
	23, 1540,
	24, 1540,
	27, 1540,
	29, 1540,
	31, 1540,
	34, 1540,
	35, 1540,
	36, 1540,
	37, 1540,
	38, 1540,
	39, 1540,
	40, 1540,
	41, 1540,
	42, 1540,
	43, 1540,
	45, 1540,
	46, 1540,
	47, 1540,
	48, 1540,
	49, 1540,
	50, 1540,
	53, 1540,
	54, 1540,
	55, 1540,
	57, 1540,
	58, 1540,
	59, 1540,
	62, 1540,
	63, 1540,
	64, 1540,
	65, 1540,
	66, 1540,
	67, 1540,
	68, 1540,
	69, 1540,
	71, 1540,
	72, 1540,
	73, 1540,
	74, 1540,
	76, 1540,
	77, 1540,
	78, 1540,
	79, 1540,
	87, 1540,
	88, 1540,
	89, 1540,
	90, 1540,
	91, 1540,
	92, 1540,
	93, 1540,
	94, 1540,
	96, 1540,
	98, 1540,
	100, 1540,
	103, 1540,
	104, 1540,
	106, 1540,
	110, 1540,
	111, 1540,
	112, 1540,
	113, 1540,
	114, 1540,
	115, 1540,
	116, 1540,
	120, 1540,
	121, 1540,
	122, 1540,
	123, 1540,
	124, 1540,
	125, 1540,
	126, 1540,
	127, 1540,
	128, 1540,
	129, 1540,
	130, 1540,
	132, 1540,
	135, 1540,
	137, 1540,
	138, 1540,
	140, 1540,
	143, 1540,
	144, 1540,
	145, 1540,
	146, 1540,
	147, 1540,
	148, 1540,
	149, 1540,
	150, 1540,
	151, 1540,
	152, 1540,
	153, 1540,
	155, 1540,
	157, 1540,
	158, 1540,
	159, 1540,
	160, 1540,
	161, 1540,
	162, 1540,
	163, 1540,
	164, 1540,
	165, 1540,
	167, 1540,
	169, 1540,
	170, 1540,
	171, 1540,
	172, 1540,
	173, 1540,
	174, 1540,
	175, 1540,
	176, 1540,
	177, 1540,
	178, 1540,
	180, 1540,
	181, 1540,
	183, 1540,
	184, 1540,
	185, 1540,
	186, 1540,
	187, 1540,
	189, 1540,
	190, 1540,
	193, 1540,
	194, 1540,
	195, 1540,
	196, 1540,
	198, 1540,
	199, 1540,
	200, 1540,
	201, 1540,
	202, 1540,
	203, 1540,
	204, 1540,
	205, 1540,
	206, 1540,
	207, 1540,
	211, 1540,
	212, 1540,
	213, 1540,
	214, 1540,
	215, 1540,
	217, 1540,
	220, 1540,
	221, 1540,
	223, 1540,
	224, 1540,
	226, 1540,
	228, 1540,
	229, 1540,
	230, 1540,
	231, 1540,
	232, 1540,
	233, 1540,
	234, 1540,
	235, 1540,
	237, 1540,
	238, 1540,
	239, 1540,
	240, 1540,
	241, 1540,
	243, 1540,
	244, 1540,
	245, 1540,
	246, 1540,
	247, 1540,
	248, 1540,
	249, 1540,
	250, 1540,
	252, 1540,
	253, 1540,
	254, 1540,
	255, 1540,
	256, 1540,
	257, 1540,
	258, 1540,
	259, 1540,
	260, 1540,
	261, 1540,
	262, 1540,
	263, 1540,
	264, 1540,
	266, 1540,
	267, 1540,
	268, 1540,
	269, 1540,
	270, 1540,
	271, 1540,
	272, 1540,
	273, 1540,
	274, 1540,
	275, 1540,
	276, 1540,
	277, 1540,
	279, 1540,
	280, 1540,
	281, 1540,
	282, 1540,
	283, 1540,
	284, 1540,
	286, 1540,
	287, 1540,
	288, 1540,
	289, 1540,
	290, 1540,
	291, 1540,
	292, 1540,
	293, 1540,
	294, 1540,
	296, 1540,
	297, 1540,
	298, 1540,
	299, 1540,
	300, 1540,
	301, 1540,
	302, 1540,
	303, 1540,
	304, 1540,
	305, 1540,
	306, 1540,
	308, 1540,
	310, 1540,
	311, 1540,
	312, 1540,
	313, 1540,
	314, 1540,
	315, 1540,
	316, 1540,
	317, 1540,
	319, 1540,
	320, 1540,
	321, 1540,
	324, 1540,
	325, 1540,
	326, 1540,
	327, 1540,
	329, 1540,
	330, 1540,
	331, 1540,
	332, 1540,
	335, 1540,
	336, 1540,
	337, 1540,
	338, 1540,
	340, 1540,
	342, 1540,
	343, 1540,
	344, 1540,
	345, 1540,
	346, 1540,
	347, 1540,
	350, 1540,
	355, 1540,
	356, 1540,
	357, 1540,
	358, 1540,
	359, 1540,
	360, 1540,
	361, 1540,
	363, 1540,
	364, 1540,
	365, 1540,
	366, 1540,
	367, 1540,
	368, 1540,
	370, 1540,
	371, 1540,
	372, 1540,
	373, 1540,
	374, 1540,
	375, 1540,
	376, 1540,
	377, 1540,
	378, 1540,
	380, 1540,
	383, 1540,
	384, 1540,
	387, 1540,
	388, 1540,
	-2, 0,
	-1, 981,
	134, 1441,
	322, 1441,
	365, 1441,
	384, 1441,
	-2, 0,
	-1, 998,
	134, 1464,
	322, 1464,
	365, 1464,
	384, 1464,
	-2, 0,
	-1, 999,
	170, 668,
	243, 668,
	247, 668,
	-2, 338,
	-1, 1067,
	119, 765,
	131, 765,
	188, 765,
	216, 765,
	-2, 726,
	-1, 1148,
	109, 731,
	119, 731,
	131, 731,
	166, 731,
	188, 731,
	216, 731,
	222, 731,
	333, 731,
	-2, 1080,
	-1, 1159,
	382, 1276,
	-2, 1264,
	-1, 1177,
	383, 1193,
	-2, 0,
	-1, 1201,
	170, 668,
	243, 668,
	247, 668,
	-2, 663,
	-1, 1229,
	383, 1193,
	-2, 0,
	-1, 1233,
	109, 731,
	119, 731,
	131, 731,
	166, 731,
	188, 731,
	216, 731,
	222, 731,
	333, 731,
	-2, 832,
	-1, 1393,
	170, 668,
	243, 668,
	247, 668,
	-2, 340,
	-1, 1501,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 985,
	-1, 1502,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 986,
	-1, 1503,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 987,
	-1, 1504,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 988,
	-1, 1505,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 989,
	-1, 1506,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 990,
	-1, 1507,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 991,
	-1, 1508,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 992,
	-1, 1517,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 1001,
	-1, 1518,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 1002,
	-1, 1519,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	72, 0,
	296, 0,
	363, 0,
	364, 0,
	365, 0,
	366, 0,
	367, 0,
	-2, 1003,
	-1, 1522,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1008,
	-1, 1528,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1010,
	-1, 1530,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1014,
	-1, 1531,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1015,
	-1, 1532,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1016,
	-1, 1533,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1017,
	-1, 1602,
	134, 1204,
	382, 1301,
	-2, 1294,
	-1, 1603,
	134, 1205,
	-2, 1481,
	-1, 1604,
	134, 1206,
	-2, 1383,
	-1, 1605,
	134, 1207,
	-2, 1342,
	-1, 1606,
	134, 1208,
	-2, 1359,
	-1, 1607,
	134, 1209,
	-2, 1381,
	-1, 1608,
	134, 1210,
	-2, 1437,
	-1, 1685,
	1, 833,
	76, 833,
	109, 833,
	119, 833,
	131, 833,
	135, 833,
	139, 833,
	141, 833,
	157, 833,
	166, 833,
	173, 833,
	184, 833,
	188, 833,
	203, 833,
	216, 833,
	218, 833,
	222, 833,
	265, 833,
	267, 833,
	333, 833,
	341, 833,
	352, 833,
	353, 833,
	362, 833,
	381, 833,
	383, 833,
	385, 833,
	386, 833,
	387, 833,
	-2, 832,
	-1, 1855,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1009,
	-1, 1856,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1011,
	-1, 1861,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1012,
	-1, 1879,
	227, 1164,
	-2, 1166,
	-1, 2060,
	233, 754,
	-2, 598,
	-1, 2119,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1013,
	-1, 2124,
	169, 0,
	-2, 1029,
	-1, 2133,
	227, 1165,
	-2, 1167,
	-1, 2175,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1057,
	-1, 2176,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1058,
	-1, 2177,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1059,
	-1, 2181,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1063,
	-1, 2182,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1064,
	-1, 2183,
	13, 0,
	14, 0,
	15, 0,
	363, 0,
	364, 0,
	365, 0,
	-2, 1065,
	-1, 2324,
	169, 0,
	-2, 1030,
	-1, 2327,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1033,
	-1, 2328,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1035,
	-1, 2456,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1034,
	-1, 2457,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	150, 0,
	151, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1036,
	-1, 2464,
	169, 0,
	-2, 1066,
	-1, 2541,
	169, 0,
	-2, 1067,
	-1, 2623,
	37, 0,
	150, 0,
	187, 0,
	290, 0,
	360, 0,
	368, 0,
	-2, 1484,
	-1, 2706,
	382, 1552,
	-2, 518,
}

const sqlPrivate = 57344

const sqlLast = 45227

var sqlAct = [...]int{

	668, 1251, 2691, 2703, 2689, 2422, 2622, 2672, 2421, 2631,
	2270, 2704, 2632, 1772, 2595, 2633, 2490, 2097, 1735, 2432,
	1278, 1780, 2152, 2282, 2546, 2621, 795, 2234, 2392, 666,
	2304, 2066, 2378, 2306, 1849, 612, 1299, 955, 1334, 187,
	478, 26, 2311, 644, 187, 958, 1680, 1545, 187, 2235,
	2064, 912, 2470, 1231, 187, 1769, 1227, 2358, 1734, 187,
	187, 1739, 1994, 187, 2298, 1781, 187, 1973, 1280, 1249,
	1945, 665, 951, 1738, 187, 1681, 1698, 1210, 460, 2205,
	1294, 658, 1981, 1689, 1890, 620, 111, 1155, 1728, 1944,
	1845, 1480, 1293, 1557, 1239, 1002, 1418, 1542, 1752, 1211,
	1475, 810, 1558, 1829, 1241, 1566, 1458, 1631, 2072, 1335,
	1001, 1456, 1582, 1274, 777, 457, 1187, 1191, 1576, 1736,
	797, 1236, 1072, 1774, 963, 941, 1282, 1667, 780, 948,
	1742, 1218, 760, 1654, 1598, 636, 515, 1073, 1459, 1143,
	111, 116, 187, 187, 532, 1417, 1457, 1201, 178, 1306,
	187, 493, 117, 660, 528, 938, 535, 758, 1200, 183,
	1077, 556, 2393, 2219, 1878, 1312, 2220, 1228, 2423, 1314,
	1314, 1314, 616, 187, 187, 800, 187, 187, 812, 1773,
	2719, 2718, 187, 187, 2712, 2712, 2711, 63, 2423, 2668,
	2712, 26, 2667, 1269, 2666, 2648, 1269, 616, 1269, 2391,
	2643, 900, 611, 2117, 1661, 2642, 2082, 1751, 507, 1661,
	630, 2639, 2619, 1656, 2081, 1269, 1324, 626, 2618, 2590,
	793, 2585, 1324, 1806, 2724, 1269, 2584, 2580, 1088, 1089,
	2446, 1269, 2710, 2572, 2543, 2521, 111, 2391, 1806, 2391,
	2518, 2516, 2501, 2500, 1269, 2391, 1269, 2391, 1729, 807,
	2478, 2475, 1091, 605, 1269, 1269, 2458, 2417, 2412, 2390,
	1806, 1661, 1661, 2391, 604, 2371, 2326, 1265, 2297, 1269,
	1806, 774, 1733, 2208, 2292, 2215, 2128, 1090, 1733, 2216,
	1661, 621, 2091, 37, 1882, 2048, 2049, 785, 789, 1269,
	1883, 1661, 1970, 1969, 38, 121, 1661, 1269, 1962, 1729,
	762, 1960, 1963, 1088, 1089, 1661, 617, 2591, 41, 1128,
	1129, 1130, 1959, 1579, 1958, 1816, 1661, 1152, 1661, 1661,
	147, 1805, 123, 2720, 1324, 1806, 764, 1091, 765, 1795,
	1132, 1732, 43, 1661, 46, 1733, 1660, 1661, 1327, 1324,
	1661, 619, 1328, 2700, 2450, 1088, 1089, 1096, 2446, 2208,
	1655, 149, 1090, 2107, 1687, 47, 2188, 2130, 1110, 49,
	2049, 1848, 1889, 52, 1777, 1580, 124, 1915, 1916, 1091,
	53, 1827, 104, 54, 1396, 1559, 1205, 1561, 1269, 898,
	1915, 1916, 1315, 1315, 1315, 983, 150, 980, 148, 2394,
	147, 979, 978, 977, 1090, 55, 141, 976, 975, 1415,
	974, 973, 972, 142, 56, 971, 970, 969, 968, 967,
	966, 766, 1111, 1113, 1114, 1115, 1116, 763, 610, 1581,
	1578, 149, 1096, 609, 118, 1088, 1089, 904, 187, 187,
	800, 187, 608, 187, 1915, 1916, 187, 607, 603, 602,
	601, 600, 187, 1125, 1133, 599, 598, 1088, 1089, 1091,
	595, 187, 187, 187, 187, 800, 594, 661, 148, 2081,
	800, 593, 592, 588, 1096, 587, 1655, 586, 554, 553,
	552, 1091, 551, 550, 1090, 921, 549, 548, 547, 546,
	1123, 545, 544, 543, 542, 541, 1921, 1111, 187, 540,
	1112, 539, 538, 57, 118, 523, 1090, 1421, 1583, 1921,
	58, 522, 187, 521, 1153, 1252, 1320, 1313, 1449, 520,
	519, 448, 425, 418, 417, 170, 169, 168, 187, 65,
	119, 59, 167, 60, 166, 61, 165, 125, 187, 164,
	163, 162, 62, 161, 160, 159, 158, 147, 157, 156,
	155, 154, 153, 152, 1096, 73, 151, 147, 93, 1232,
	1117, 1931, 1014, 1921, 2695, 1595, 940, 2693, 122, 800,
	2638, 2620, 2606, 1593, 1931, 1112, 1096, 1591, 149, 1589,
	2600, 1084, 2538, 2519, 2451, 2357, 2439, 945, 149, 1577,
	964, 2356, 2352, 1126, 916, 918, 911, 924, 97, 2351,
	187, 1092, 1093, 1094, 1095, 1097, 1098, 120, 2344, 2343,
	2342, 485, 2338, 1811, 1017, 148, 2337, 944, 944, 1111,
	2336, 2335, 38, 141, 2329, 148, 2303, 147, 1931, 2202,
	142, 2197, 2196, 141, 2195, 2138, 41, 2047, 2051, 1932,
	142, 1915, 1916, 1012, 2001, 1802, 1997, 1967, 1964, 1952,
	1068, 118, 1932, 1943, 4, 1914, 38, 617, 149, 1911,
	1910, 1776, 484, 1124, 1908, 2709, 1553, 1895, 984, 1894,
	41, 1127, 1879, 1101, 1099, 1100, 1092, 1093, 1094, 1095,
	1097, 1098, 1685, 1084, 773, 1163, 1230, 999, 1331, 1083,
	909, 486, 996, 1229, 2713, 148, 1803, 1112, 53, 1067,
	488, 54, 1156, 141, 1146, 2698, 1932, 2680, 2679, 1298,
	142, 2154, 2610, 188, 1063, 2609, 2608, 2575, 1092, 1093,
	1094, 1095, 1097, 1098, 904, 1804, 485, 1915, 1916, 1015,
	2567, 118, 56, 2565, 488, 2557, 2555, 38, 1924, 1925,
	1917, 1918, 1919, 1920, 1922, 1923, 2531, 2530, 1547, 2095,
	2438, 41, 1925, 1917, 1918, 1919, 1920, 1922, 1923, 2487,
	1921, 1069, 1230, 2466, 2447, 2426, 56, 2415, 187, 1070,
	187, 2397, 605, 1216, 2349, 1416, 1753, 484, 1554, 2280,
	2276, 2275, 1930, 604, 1844, 1080, 1081, 2273, 2243, 2242,
	2223, 2211, 187, 187, 1085, 1101, 1099, 1100, 1092, 1093,
	1094, 1095, 1097, 1098, 2123, 2037, 486, 1917, 1918, 1919,
	1920, 1922, 1923, 53, 2028, 488, 54, 2014, 2013, 1999,
	1968, 57, 1094, 1095, 1097, 1098, 1159, 1942, 1904, 2549,
	1189, 1190, 1903, 1915, 1916, 1193, 1900, 1875, 1870, 1192,
	617, 1195, 1672, 1643, 1587, 1196, 1921, 56, 119, 59,
	1277, 60, 1209, 1208, 1199, 57, 1214, 1185, 1184, 1183,
	1182, 1181, 1180, 1179, 1178, 147, 2014, 1177, 1176, 1175,
	1831, 1174, 111, 487, 1173, 1172, 93, 1088, 1089, 1171,
	1170, 1169, 119, 59, 1168, 60, 1167, 1261, 801, 2445,
	1987, 813, 1160, 1147, 628, 1146, 149, 995, 987, 147,
	960, 1091, 1226, 2331, 1204, 2302, 2218, 487, 800, 187,
	93, 1931, 2214, 1881, 1808, 812, 1673, 1202, 1915, 1916,
	1234, 187, 1156, 2093, 1144, 1815, 1090, 1206, 1011, 1252,
	149, 2067, 2449, 148, 1415, 2448, 57, 187, 910, 2442,
	1415, 141, 1729, 187, 2452, 187, 1594, 187, 142, 1415,
	2221, 187, 1921, 1267, 1592, 1297, 2083, 1197, 1590, 1232,
	1588, 1066, 1198, 119, 59, 2262, 60, 148, 1814, 118,
	2255, 1250, 1755, 1276, 2040, 141, 1061, 2033, 1966, 617,
	147, 726, 142, 1965, 1854, 1436, 1453, 1008, 487, 1932,
	1165, 93, 187, 187, 1247, 1332, 2098, 1402, 1295, 800,
	2032, 187, 1837, 118, 187, 1255, 1919, 1920, 1922, 1923,
	2471, 149, 1248, 1773, 2155, 1886, 1270, 1567, 1303, 1406,
	1405, 1188, 1415, 1412, 2696, 812, 2230, 1579, 1150, 1055,
	187, 1242, 2694, 2077, 1243, 187, 1388, 2603, 454, 1799,
	187, 187, 429, 187, 174, 187, 2664, 187, 148, 187,
	2579, 2663, 1460, 2104, 615, 2405, 141, 940, 1817, 2512,
	187, 753, 1162, 142, 772, 438, 187, 187, 1268, 1056,
	755, 1242, 1230, 2510, 1243, 187, 751, 2509, 725, 1580,
	2508, 2264, 2257, 2227, 118, 2226, 1899, 1926, 1924, 1925,
	1917, 1918, 1919, 1920, 1922, 1923, 1308, 187, 1305, 1047,
	673, 812, 1898, 1897, 1225, 749, 453, 746, 1896, 1691,
	1409, 614, 728, 1857, 1244, 1798, 1009, 1414, 2254, 1724,
	1719, 1317, 1714, 2094, 1319, 439, 1422, 1529, 1322, 1088,
	1089, 1203, 897, 1581, 1578, 1403, 2420, 426, 727, 1647,
	111, 1329, 1770, 801, 1646, 1330, 996, 1490, 1390, 1389,
	2707, 1691, 1242, 1091, 1244, 1243, 1393, 1447, 1215, 1010,
	1690, 590, 1446, 1064, 2268, 1544, 1419, 616, 801, 2269,
	1437, 452, 1407, 801, 502, 432, 2044, 2578, 1090, 1427,
	2492, 1272, 1382, 597, 2616, 1431, 1423, 1432, 1430, 1433,
	596, 1434, 1309, 1435, 905, 907, 1917, 1918, 1919, 1920,
	1922, 1923, 1489, 1544, 597, 1410, 1462, 1041, 1481, 1488,
	1441, 1443, 1583, 1583, 187, 449, 187, 1454, 670, 187,
	1461, 1276, 2655, 1426, 432, 1455, 1915, 1916, 1551, 605,
	187, 2245, 605, 605, 1549, 1244, 447, 1652, 1448, 812,
	1471, 1479, 187, 1472, 1473, 1098, 187, 1042, 1096, 187,
	2386, 1846, 1847, 187, 1564, 1087, 442, 187, 2074, 2635,
	1616, 1567, 2148, 812, 1809, 187, 994, 800, 2025, 1562,
	2039, 2075, 801, 2682, 1257, 187, 812, 985, 613, 2030,
	187, 1088, 1089, 989, 2663, 1253, 1923, 1552, 187, 2387,
	1626, 1674, 1555, 1577, 187, 171, 1762, 1470, 1065, 1710,
	1416, 1753, 453, 441, 440, 1091, 1416, 1753, 1240, 187,
	628, 1721, 1717, 1111, 1692, 1416, 1753, 1445, 2074, 1609,
	187, 2103, 187, 2560, 187, 2105, 451, 187, 2587, 187,
	1090, 187, 187, 1060, 187, 800, 800, 1703, 1705, 800,
	1675, 1583, 1678, 187, 617, 1921, 1326, 1725, 1650, 617,
	1649, 1664, 1186, 2588, 1245, 2636, 454, 1775, 1659, 1775,
	1669, 1670, 1665, 494, 1713, 428, 450, 452, 1054, 2258,
	2252, 1708, 1020, 1794, 1234, 1764, 512, 1726, 175, 1715,
	1793, 1391, 175, 1695, 747, 1716, 499, 1699, 1416, 1413,
	757, 1112, 495, 756, 1245, 427, 491, 1617, 2312, 747,
	1096, 2110, 2382, 1790, 2383, 1136, 1137, 1138, 1139, 1140,
	1931, 2493, 1688, 2246, 428, 2637, 1149, 1526, 1748, 1258,
	433, 1046, 1801, 111, 496, 429, 1158, 1314, 748, 111,
	747, 1394, 812, 617, 1252, 430, 2385, 2462, 2515, 1859,
	187, 2423, 1779, 176, 427, 2388, 498, 176, 2675, 494,
	1749, 1141, 1788, 1796, 1789, 1341, 187, 187, 187, 964,
	187, 1791, 1800, 1797, 1702, 1111, 2112, 2145, 591, 433,
	1810, 443, 499, 1902, 429, 1245, 1411, 1543, 495, 2313,
	1787, 501, 1668, 944, 430, 944, 2683, 1812, 1932, 187,
	1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 1193, 581,
	1196, 1550, 1684, 1820, 1754, 1756, 1005, 1760, 1761, 1425,
	496, 1190, 1189, 2654, 444, 1822, 1818, 625, 616, 419,
	1644, 2146, 451, 2108, 490, 2318, 1028, 1648, 2384, 1834,
	1524, 1527, 498, 1828, 111, 177, 1051, 1150, 1823, 177,
	1086, 1212, 1212, 1112, 491, 445, 1569, 446, 2568, 2184,
	1821, 993, 454, 2634, 1252, 2662, 1341, 1341, 2109, 1601,
	1601, 1614, 450, 2660, 1832, 1634, 497, 1523, 2431, 1638,
	1639, 1641, 1841, 1701, 1836, 1843, 1840, 1076, 1767, 1006,
	1263, 990, 1217, 1007, 582, 1860, 1926, 1924, 1925, 1917,
	1918, 1919, 1920, 1922, 1923, 1653, 1262, 494, 172, 1005,
	1583, 1221, 172, 2673, 982, 2569, 1075, 2043, 2347, 1052,
	2503, 801, 2502, 2485, 1021, 1888, 2401, 2552, 813, 1259,
	499, 2111, 2653, 1224, 500, 2688, 495, 2229, 174, 2010,
	2006, 1768, 174, 1304, 1858, 1296, 1292, 1260, 173, 1666,
	1315, 1221, 173, 1100, 1092, 1093, 1094, 1095, 1097, 1098,
	1222, 1279, 497, 2144, 1022, 2596, 2185, 1019, 496, 1467,
	1995, 2674, 2186, 1224, 1440, 1700, 1053, 187, 812, 1397,
	1525, 2699, 1006, 187, 187, 1074, 1007, 187, 1971, 1219,
	498, 1885, 187, 1977, 2676, 187, 1401, 2486, 420, 2283,
	1222, 1000, 2433, 187, 2016, 2015, 1759, 583, 1075, 187,
	187, 187, 801, 1076, 2271, 187, 2404, 1852, 187, 1220,
	500, 1984, 1663, 2403, 187, 187, 187, 187, 187, 1662,
	1005, 2348, 914, 913, 1983, 187, 614, 800, 813, 2400,
	187, 1991, 926, 1223, 1996, 812, 1399, 1990, 1468, 2424,
	2687, 510, 1029, 2042, 187, 617, 1949, 1950, 1951, 2000,
	1400, 2359, 2206, 180, 187, 504, 187, 1986, 187, 1586,
	2026, 187, 421, 1617, 1617, 1972, 2007, 1074, 2465, 1976,
	2346, 2035, 2031, 1223, 187, 800, 800, 3, 187, 1050,
	584, 937, 187, 628, 628, 2483, 2267, 187, 1975, 187,
	2050, 1946, 2052, 2122, 1979, 1980, 187, 2053, 1985, 1039,
	497, 1947, 2002, 2045, 813, 1757, 1758, 1867, 1909, 187,
	800, 935, 1037, 2024, 585, 2484, 2011, 2061, 1035, 617,
	2059, 2060, 1869, 1865, 187, 1813, 2402, 483, 34, 1731,
	1723, 1712, 482, 33, 481, 30, 2038, 1059, 1058, 1617,
	1617, 1617, 480, 69, 1033, 988, 1045, 1982, 1464, 1071,
	1469, 479, 68, 1838, 1031, 2090, 1476, 2011, 500, 1005,
	1025, 1438, 933, 187, 1429, 1166, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 2079, 1528,
	2076, 1530, 1531, 1532, 1533, 2070, 1862, 902, 903, 2084,
	509, 1049, 2089, 187, 2054, 1585, 1863, 2055, 1556, 2125,
	1868, 2100, 2101, 2102, 503, 1149, 2092, 2099, 783, 2630,
	2058, 1038, 1006, 1873, 2106, 899, 1007, 2140, 2141, 2142,
	1876, 1722, 813, 2113, 1036, 1596, 1597, 936, 1711, 1613,
	1034, 1625, 1627, 1632, 1635, 1636, 1637, 1892, 1893, 2115,
	476, 22, 477, 23, 2085, 2086, 813, 2087, 2088, 1376,
	801, 1961, 1266, 2056, 617, 1044, 1032, 934, 34, 813,
	2057, 2134, 2131, 33, 1075, 30, 1030, 2593, 2129, 2375,
	745, 2250, 1024, 69, 932, 187, 1071, 2248, 2228, 2156,
	1989, 187, 68, 2063, 1992, 1771, 1765, 1941, 2158, 1763,
	187, 187, 2161, 1747, 1634, 1634, 1634, 2163, 1325, 1954,
	2147, 2149, 2150, 475, 28, 2190, 1481, 2159, 2224, 474,
	20, 472, 19, 1323, 1864, 1481, 2164, 1321, 801, 801,
	1318, 1866, 801, 473, 18, 2191, 1316, 2217, 464, 15,
	1264, 1256, 1254, 1074, 2240, 2189, 1246, 2204, 465, 16,
	187, 2222, 187, 2135, 111, 2065, 1375, 2209, 2194, 2266,
	1376, 1376, 2207, 2210, 187, 471, 51, 800, 2526, 1617,
	1617, 1076, 769, 2664, 2444, 2277, 2225, 2259, 1340, 2443,
	463, 50, 187, 187, 2265, 1420, 2239, 2299, 2274, 2232,
	1378, 1691, 770, 2285, 2293, 1078, 2241, 2284, 1691, 187,
	1706, 22, 2528, 23, 750, 752, 2213, 1704, 187, 2253,
	812, 187, 187, 187, 1850, 2260, 1377, 1707, 812, 2291,
	2036, 2027, 2260, 2272, 1727, 813, 1718, 2278, 1617, 1617,
	1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
	1617, 1617, 1617, 1617, 1617, 1617, 1617, 2294, 1617, 2286,
	2295, 2320, 2289, 2279, 1341, 187, 2300, 1375, 1375, 1451,
	1452, 1839, 2325, 2562, 28, 470, 12, 469, 44, 2394,
	20, 771, 19, 489, 1079, 462, 45, 1023, 2287, 1340,
	1340, 1851, 2288, 2540, 18, 2317, 2249, 2514, 2251, 15,
	2360, 1378, 1378, 1750, 1082, 1341, 1337, 1720, 1709, 16,
	2592, 1088, 1089, 2429, 1975, 1016, 1778, 581, 1766, 187,
	1746, 2314, 187, 1651, 1088, 1089, 51, 1377, 1377, 2321,
	468, 7, 812, 187, 187, 625, 1392, 187, 187, 187,
	2363, 50, 2345, 467, 6, 511, 1333, 2671, 1091, 466,
	36, 2686, 2370, 1153, 187, 461, 35, 1915, 1916, 187,
	1090, 187, 2301, 187, 187, 187, 1088, 1089, 187, 800,
	1825, 1824, 2399, 1090, 1341, 812, 2395, 2362, 800, 2369,
	2398, 2364, 2240, 2151, 2096, 1825, 187, 187, 1826, 1645,
	1575, 2203, 2366, 2333, 2143, 800, 1163, 1855, 1856, 1161,
	2374, 1057, 582, 1861, 2427, 1048, 1043, 1337, 1337, 2411,
	1040, 2425, 1026, 2240, 2414, 2419, 2416, 992, 2430, 653,
	2240, 2435, 1874, 1395, 2239, 2434, 12, 589, 44, 2491,
	492, 1428, 1027, 2367, 2241, 1880, 45, 1988, 1341, 2198,
	2361, 1887, 1671, 2440, 1891, 2428, 2586, 2260, 2339, 1901,
	2545, 2461, 2436, 1584, 2260, 2239, 1164, 48, 184, 2237,
	647, 1905, 2239, 423, 2376, 2241, 2455, 434, 2231, 1741,
	1740, 813, 2241, 455, 1341, 1341, 2418, 815, 505, 184,
	2460, 7, 513, 1341, 1341, 518, 187, 1404, 187, 669,
	812, 187, 1600, 537, 6, 1149, 2453, 2454, 2467, 187,
	36, 1482, 1632, 1632, 1632, 812, 35, 744, 671, 1338,
	672, 1339, 2441, 1194, 2256, 583, 1341, 659, 1336, 961,
	1782, 1408, 1548, 2263, 1565, 2474, 1884, 1157, 2476, 1212,
	801, 2240, 639, 651, 650, 1978, 1563, 2495, 813, 986,
	2497, 638, 187, 1993, 2073, 800, 2437, 2479, 1466, 187,
	1842, 2494, 1463, 2069, 2247, 1276, 431, 187, 187, 800,
	800, 761, 761, 187, 2517, 1912, 2240, 2527, 959, 423,
	1623, 2524, 1615, 2239, 2513, 2523, 1611, 1281, 801, 801,
	2520, 2537, 187, 2241, 1062, 1142, 1783, 187, 2533, 1013,
	2532, 2481, 423, 423, 187, 805, 423, 2525, 584, 2080,
	2529, 184, 901, 2536, 2534, 2535, 2496, 2539, 2239, 1807,
	1207, 2556, 2260, 801, 1474, 2542, 768, 767, 2241, 187,
	187, 643, 724, 2550, 2697, 2505, 187, 1398, 1819, 1135,
	2551, 1134, 585, 2548, 800, 754, 2554, 2558, 1004, 187,
	2573, 800, 800, 2571, 2365, 2559, 1003, 2071, 2574, 2009,
	2681, 2561, 2244, 1217, 2602, 146, 143, 2566, 145, 2577,
	2576, 144, 2041, 72, 32, 422, 187, 1617, 187, 31,
	92, 187, 91, 812, 90, 89, 88, 87, 2582, 2583,
	86, 85, 2506, 2507, 84, 83, 2598, 82, 628, 628,
	81, 1341, 2611, 80, 79, 2613, 78, 77, 76, 2612,
	75, 628, 187, 2599, 2617, 74, 533, 2615, 1617, 530,
	71, 70, 1221, 2614, 29, 2240, 25, 96, 2114, 187,
	187, 187, 1476, 24, 2627, 2629, 2628, 187, 2118, 67,
	66, 2119, 2640, 2647, 1224, 27, 17, 2644, 2645, 2646,
	2652, 187, 11, 2124, 21, 115, 2650, 2651, 2649, 114,
	1219, 113, 2132, 1283, 112, 14, 2661, 2239, 2659, 13,
	2136, 1222, 110, 1978, 109, 2665, 108, 2241, 107, 106,
	1285, 778, 105, 2670, 2604, 2669, 10, 9, 1376, 95,
	1220, 2310, 2677, 2160, 42, 2678, 1617, 2162, 2685, 8,
	2684, 2690, 2692, 40, 787, 791, 2477, 802, 809, 39,
	814, 94, 137, 1915, 1916, 136, 1933, 1934, 1935, 1291,
	133, 135, 2690, 2701, 132, 2708, 2702, 134, 103, 1376,
	2192, 2193, 2690, 2714, 139, 2715, 138, 2717, 130, 2199,
	2200, 2201, 2692, 2723, 2716, 2721, 2692, 2725, 2722, 128,
	129, 131, 127, 623, 1223, 581, 2473, 537, 537, 126,
	537, 140, 927, 102, 101, 930, 100, 2212, 1930, 99,
	98, 423, 1540, 625, 5, 2, 1, 0, 1286, 0,
	537, 537, 423, 952, 0, 1375, 0, 0, 1538, 0,
	801, 0, 0, 2499, 0, 0, 0, 2233, 1376, 1915,
	1916, 0, 1933, 1934, 1935, 0, 0, 1340, 624, 0,
	0, 2511, 0, 1871, 1872, 0, 2323, 537, 0, 1378,
	0, 0, 0, 0, 0, 0, 1375, 1341, 1287, 1289,
	0, 537, 1921, 813, 0, 0, 0, 1288, 0, 0,
	582, 813, 0, 0, 0, 1377, 0, 991, 1340, 0,
	0, 0, 0, 0, 1930, 0, 0, 537, 1212, 0,
	1378, 1284, 1376, 0, 0, 0, 0, 2296, 0, 0,
	0, 1534, 1936, 0, 0, 0, 0, 0, 0, 1535,
	0, 1536, 0, 1341, 0, 1541, 1377, 0, 0, 1938,
	1939, 1940, 0, 0, 0, 1375, 0, 1931, 1376, 1376,
	0, 0, 0, 0, 0, 0, 2324, 1376, 1376, 0,
	2327, 2328, 0, 0, 2330, 0, 0, 1340, 1921, 423,
	0, 2332, 0, 2334, 0, 1337, 0, 0, 0, 1378,
	0, 1290, 0, 0, 0, 0, 2589, 0, 2386, 2341,
	1376, 2379, 0, 0, 1341, 813, 0, 0, 0, 0,
	0, 0, 2377, 583, 0, 1377, 0, 2381, 1936, 1375,
	0, 2605, 802, 2607, 0, 0, 1337, 0, 0, 0,
	0, 0, 2350, 791, 0, 1932, 0, 2387, 0, 0,
	0, 1340, 801, 1931, 809, 0, 0, 802, 813, 0,
	0, 801, 802, 1378, 0, 1375, 1375, 0, 0, 1537,
	2380, 0, 0, 0, 1375, 1375, 1539, 0, 801, 0,
	0, 0, 0, 0, 0, 0, 0, 1340, 1340, 1377,
	0, 0, 2396, 0, 0, 0, 1340, 1340, 0, 1378,
	1378, 0, 0, 0, 622, 1337, 584, 1375, 1378, 1378,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1377, 1377, 0, 0, 1340,
	0, 1932, 0, 0, 1377, 1377, 1927, 1928, 1929, 0,
	585, 1378, 0, 1926, 1924, 1925, 1917, 1918, 1919, 1920,
	1922, 1923, 0, 0, 0, 0, 0, 518, 0, 761,
	2382, 802, 2383, 0, 0, 0, 0, 1377, 0, 1337,
	0, 0, 0, 813, 0, 0, 2456, 2457, 0, 0,
	0, 423, 423, 0, 0, 1376, 0, 0, 813, 0,
	0, 791, 0, 0, 2385, 0, 0, 0, 0, 2120,
	2121, 0, 0, 2388, 0, 1337, 1337, 2469, 0, 0,
	0, 0, 0, 2472, 1337, 1337, 0, 0, 0, 0,
	0, 0, 1927, 1928, 1929, 0, 0, 0, 801, 1926,
	1924, 1925, 1917, 1918, 1919, 1920, 1922, 1923, 0, 0,
	0, 0, 801, 801, 0, 0, 0, 1337, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2504, 2165, 2166,
	2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
	2177, 2178, 2179, 2180, 2181, 2182, 2183, 0, 2187, 0,
	0, 0, 1375, 0, 0, 0, 2384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 0, 0,
	423, 0, 0, 0, 0, 0, 1378, 801, 0, 0,
	0, 0, 0, 0, 801, 801, 1302, 0, 0, 0,
	0, 0, 423, 0, 423, 0, 423, 0, 0, 0,
	1310, 2553, 1377, 0, 0, 0, 0, 1153, 0, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 0, 0,
	0, 0, 0, 0, 485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 537, 184, 778, 1237, 0, 0, 0, 0, 41,
	184, 0, 0, 537, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1376, 0, 0, 0, 484, 0, 0, 0, 537,
	0, 0, 1337, 0, 537, 0, 0, 0, 0, 184,
	537, 0, 537, 0, 537, 0, 537, 0, 537, 0,
	0, 2626, 2626, 0, 486, 0, 0, 0, 0, 1439,
	0, 53, 0, 488, 54, 537, 537, 2641, 0, 0,
	0, 0, 0, 0, 423, 0, 0, 1376, 0, 0,
	0, 458, 0, 0, 0, 0, 0, 2626, 0, 0,
	0, 0, 0, 0, 0, 56, 537, 0, 0, 0,
	0, 0, 0, 485, 0, 0, 0, 0, 0, 0,
	802, 0, 0, 0, 38, 0, 0, 814, 1375, 0,
	0, 0, 1275, 0, 0, 0, 0, 0, 41, 0,
	0, 0, 0, 0, 0, 2626, 0, 0, 1376, 0,
	1340, 0, 0, 0, 791, 0, 1307, 0, 1307, 0,
	0, 0, 1378, 0, 484, 0, 0, 0, 0, 0,
	0, 0, 2705, 0, 0, 0, 648, 64, 0, 0,
	0, 0, 0, 2705, 1375, 0, 2705, 2705, 1377, 0,
	0, 0, 0, 486, 57, 0, 0, 0, 0, 0,
	53, 0, 488, 54, 0, 0, 1340, 0, 0, 0,
	0, 802, 0, 0, 0, 0, 0, 0, 1378, 0,
	0, 119, 59, 518, 60, 761, 0, 0, 901, 0,
	0, 64, 0, 0, 56, 0, 0, 814, 147, 423,
	0, 0, 0, 0, 1377, 1375, 487, 0, 0, 93,
	0, 1683, 0, 0, 0, 423, 0, 0, 423, 0,
	0, 0, 1696, 0, 0, 0, 423, 1340, 1337, 149,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 1378,
	0, 0, 0, 0, 423, 0, 1450, 0, 606, 1730,
	0, 0, 0, 0, 0, 618, 0, 1737, 0, 0,
	0, 0, 0, 537, 0, 1377, 148, 2464, 0, 0,
	0, 0, 0, 814, 141, 0, 0, 0, 901, 0,
	0, 142, 0, 57, 1337, 0, 779, 64, 0, 423,
	0, 1786, 0, 537, 0, 485, 537, 0, 537, 0,
	423, 423, 118, 1792, 0, 0, 38, 0, 2488, 0,
	119, 59, 1696, 60, 0, 0, 0, 0, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 147, 0, 0,
	0, 0, 0, 0, 0, 487, 0, 0, 93, 0,
	0, 0, 0, 0, 0, 1337, 484, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 486, 0, 0, 0, 0,
	0, 0, 53, 0, 488, 54, 2541, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 0, 0, 0, 0,
	0, 778, 0, 141, 0, 0, 0, 0, 0, 1830,
	142, 814, 0, 0, 0, 0, 56, 778, 0, 0,
	1686, 0, 0, 0, 0, 423, 423, 423, 791, 423,
	0, 459, 0, 0, 0, 814, 791, 0, 0, 802,
	0, 0, 0, 0, 0, 0, 809, 0, 814, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 423, 0,
	1088, 1089, 0, 1118, 1119, 1120, 1128, 1129, 1130, 0,
	0, 0, 0, 1106, 0, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 1132, 0, 0,
	0, 1784, 0, 0, 0, 0, 0, 1088, 1089, 0,
	0, 0, 809, 809, 0, 57, 0, 802, 802, 1090,
	0, 802, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 1091, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 59, 0, 60, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 147,
	0, 0, 1110, 0, 0, 0, 0, 487, 0, 0,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1114, 1115, 1116, 0, 0, 0, 0, 0, 1096,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 618, 0, 0, 0,
	1125, 1133, 0, 0, 814, 0, 0, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 148, 0, 1131,
	0, 0, 0, 0, 0, 141, 0, 1833, 809, 1835,
	0, 791, 142, 0, 0, 0, 423, 1123, 0, 0,
	0, 0, 423, 423, 1111, 0, 423, 0, 0, 0,
	0, 1683, 0, 118, 1683, 0, 0, 0, 0, 0,
	1853, 0, 1998, 0, 0, 0, 0, 0, 423, 2004,
	2005, 1122, 0, 0, 1696, 0, 0, 2012, 0, 0,
	0, 1111, 0, 2017, 2018, 2020, 2022, 2023, 0, 0,
	0, 0, 0, 0, 423, 0, 0, 0, 0, 2034,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 0, 423, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 1302, 0, 1302, 0, 537, 0, 0,
	537, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 537, 1117, 0, 1105, 423, 0, 1915,
	1916, 2068, 1933, 1934, 1935, 0, 423, 606, 2078, 1112,
	0, 0, 0, 0, 0, 423, 2322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1145, 1830, 1148,
	0, 0, 0, 0, 1915, 1916, 1154, 1933, 1934, 1935,
	0, 0, 0, 1830, 0, 0, 0, 0, 0, 0,
	0, 2127, 0, 0, 1930, 0, 0, 0, 0, 0,
	1124, 0, 0, 1102, 1103, 1109, 1108, 1104, 1127, 0,
	1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 0,
	0, 0, 423, 0, 0, 0, 0, 2353, 778, 1930,
	814, 0, 0, 0, 778, 778, 0, 0, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 1921, 0,
	2003, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2153, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2029, 0, 0, 802,
	0, 0, 0, 1921, 0, 0, 0, 814, 1936, 0,
	0, 0, 0, 64, 0, 2046, 0, 0, 1233, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1931, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1936, 0, 0, 0, 802, 802, 2062,
	0, 0, 0, 0, 0, 0, 0, 0, 1275, 0,
	0, 0, 0, 0, 423, 0, 0, 1275, 1931, 0,
	1683, 0, 0, 0, 0, 0, 0, 0, 0, 901,
	1683, 0, 802, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2236, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1932, 0, 2261, 0, 0, 0, 0, 0, 0,
	2261, 0, 0, 0, 0, 0, 0, 0, 0, 1696,
	0, 1302, 0, 0, 2116, 0, 0, 0, 0, 0,
	0, 0, 0, 2281, 0, 0, 1932, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 423, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2307, 0,
	0, 0, 0, 0, 0, 0, 0, 2309, 0, 0,
	2315, 423, 423, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1927, 1928, 1929, 0, 0, 0, 0, 1926,
	1924, 1925, 1917, 1918, 1919, 1920, 1922, 1923, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2340, 0, 0, 1927, 1928, 1929,
	0, 0, 0, 0, 1926, 1924, 1925, 1917, 1918, 1919,
	1920, 1922, 1923, 0, 0, 0, 0, 1915, 1916, 0,
	1933, 1934, 1935, 0, 0, 0, 778, 0, 0, 0,
	0, 0, 0, 0, 2126, 0, 0, 0, 0, 0,
	0, 64, 0, 0, 0, 0, 0, 0, 423, 0,
	0, 901, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1683, 901, 0, 0, 2372, 2373, 1696, 0,
	0, 0, 1930, 0, 606, 0, 0, 606, 606, 0,
	0, 0, 2236, 901, 0, 0, 0, 0, 2406, 0,
	2407, 0, 423, 2409, 2410, 2261, 0, 423, 0, 0,
	0, 0, 2261, 0, 0, 0, 0, 0, 0, 802,
	0, 0, 0, 2236, 0, 901, 1737, 0, 0, 0,
	2236, 0, 0, 1784, 778, 0, 0, 0, 0, 0,
	1546, 0, 0, 0, 0, 0, 1921, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 0, 0, 1148, 0,
	0, 0, 814, 2316, 809, 0, 0, 0, 0, 0,
	814, 0, 0, 0, 0, 0, 1915, 1916, 0, 1933,
	1934, 1935, 0, 0, 0, 0, 1936, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 1089, 0, 1118, 1119,
	1120, 1128, 1129, 1130, 0, 0, 0, 0, 1106, 0,
	0, 1931, 1121, 0, 0, 0, 0, 0, 0, 1091,
	0, 0, 1132, 0, 0, 1696, 779, 2480, 0, 0,
	2482, 1930, 0, 0, 0, 0, 0, 0, 423, 0,
	0, 2236, 1233, 0, 1090, 0, 0, 0, 0, 0,
	1110, 0, 0, 0, 0, 64, 0, 1107, 0, 0,
	778, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	2261, 0, 0, 0, 814, 0, 2236, 0, 0, 0,
	0, 423, 0, 0, 0, 0, 0, 0, 901, 1932,
	0, 0, 0, 0, 0, 1921, 2307, 2307, 0, 0,
	0, 0, 901, 0, 2408, 1113, 1114, 1115, 1116, 2413,
	0, 802, 0, 64, 1096, 64, 0, 814, 0, 0,
	802, 2547, 0, 0, 0, 0, 1683, 0, 0, 0,
	0, 0, 0, 1302, 64, 1125, 1133, 802, 0, 0,
	64, 0, 0, 0, 1915, 1916, 0, 1933, 1934, 1935,
	0, 0, 0, 0, 1131, 0, 0, 0, 2563, 2564,
	1931, 0, 0, 0, 0, 423, 0, 0, 0, 0,
	0, 0, 1123, 0, 0, 0, 0, 0, 2581, 1111,
	1927, 1928, 1929, 0, 0, 0, 0, 1926, 1924, 1925,
	1917, 1918, 1919, 1920, 1922, 1923, 0, 0, 0, 1930,
	0, 0, 0, 0, 0, 2597, 1122, 901, 0, 0,
	423, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2236, 0, 0, 0, 0,
	0, 0, 814, 0, 0, 0, 0, 0, 1932, 0,
	2489, 2547, 1117, 0, 0, 64, 0, 814, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 901, 901,
	901, 0, 0, 1921, 0, 0, 423, 0, 0, 0,
	0, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
	2658, 1105, 0, 2522, 0, 1937, 0, 802, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 802, 802, 1936, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1931, 1927,
	1928, 1929, 0, 0, 1546, 0, 1926, 1924, 1925, 1917,
	1918, 1919, 1920, 1922, 1923, 1124, 0, 0, 1102, 1103,
	1109, 1108, 1104, 1127, 1148, 1101, 1099, 1100, 1092, 1093,
	1094, 1095, 1097, 1098, 0, 0, 0, 2570, 0, 0,
	0, 0, 1957, 0, 0, 0, 802, 0, 0, 0,
	0, 0, 0, 802, 802, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1932, 0, 0, 0,
	0, 0, 2601, 0, 0, 814, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1148, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 779, 0, 0, 0, 0, 1784, 779,
	779, 0, 0, 779, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1927, 1928, 1929,
	0, 0, 0, 0, 1926, 1924, 1925, 1917, 1918, 1919,
	1920, 1922, 1923, 0, 0, 0, 64, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 619, 0,
	186, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 618, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 64, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 782, 269, 0, 0, 270,
	398, 779, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 147, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 149, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 779,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 965, 416, 0, 0, 352, 0, 0, 0,
	141, 353, 354, 355, 356, 357, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 776, 0, 1235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 779, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 811, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 816,
	0, 191, 817, 818, 819, 820, 358, 821, 822, 823,
	824, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 825, 196, 365, 366, 197, 198, 199, 826, 827,
	367, 368, 369, 828, 200, 370, 829, 803, 830, 201,
	202, 203, 0, 205, 206, 207, 204, 831, 208, 0,
	209, 210, 832, 729, 211, 212, 213, 833, 834, 836,
	835, 837, 838, 839, 214, 215, 424, 216, 371, 217,
	372, 373, 840, 218, 841, 219, 842, 220, 843, 844,
	221, 222, 845, 223, 846, 0, 847, 374, 224, 226,
	225, 227, 375, 376, 848, 730, 849, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 64, 230, 850, 231,
	851, 852, 731, 853, 232, 380, 854, 381, 855, 1546,
	233, 234, 235, 236, 237, 382, 383, 733, 856, 384,
	241, 857, 238, 858, 732, 239, 385, 240, 386, 387,
	388, 389, 390, 859, 391, 860, 734, 242, 243, 244,
	735, 392, 393, 245, 246, 247, 861, 249, 248, 862,
	394, 736, 250, 251, 737, 863, 252, 253, 864, 865,
	254, 0, 255, 257, 738, 256, 258, 260, 395, 259,
	739, 261, 262, 264, 263, 866, 867, 868, 396, 265,
	397, 266, 267, 869, 268, 870, 871, 269, 872, 873,
	270, 398, 740, 271, 741, 399, 272, 273, 274, 275,
	276, 277, 278, 874, 279, 400, 280, 401, 281, 875,
	282, 283, 284, 285, 286, 402, 287, 288, 876, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 877, 301, 742, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 878, 314, 315, 404, 313,
	316, 317, 879, 318, 305, 306, 319, 743, 320, 405,
	406, 321, 880, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 881, 329, 882, 330, 331, 332,
	333, 334, 335, 336, 337, 883, 409, 410, 411, 884,
	885, 338, 339, 412, 413, 886, 340, 341, 342, 343,
	887, 888, 344, 345, 346, 347, 889, 348, 890, 414,
	349, 350, 351, 415, 416, 891, 892, 352, 893, 894,
	895, 896, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 811, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1676, 0, 0,
	0, 0, 0, 189, 190, 816, 1677, 191, 817, 818,
	819, 820, 358, 821, 822, 823, 824, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 825, 196, 365,
	366, 197, 198, 199, 826, 827, 367, 368, 369, 828,
	200, 370, 829, 803, 830, 201, 202, 203, 0, 205,
	206, 207, 204, 831, 208, 0, 209, 210, 832, 729,
	211, 212, 213, 833, 834, 836, 835, 837, 838, 839,
	214, 215, 424, 216, 371, 217, 372, 373, 840, 218,
	841, 219, 842, 220, 843, 844, 221, 222, 845, 223,
	846, 0, 847, 374, 224, 226, 225, 227, 375, 376,
	848, 730, 849, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 850, 231, 851, 852, 731, 853,
	232, 380, 854, 381, 855, 0, 233, 234, 235, 236,
	237, 382, 383, 733, 856, 384, 241, 857, 238, 858,
	732, 239, 385, 240, 386, 387, 388, 389, 390, 859,
	391, 860, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 861, 249, 248, 862, 394, 736, 250, 251,
	737, 863, 252, 253, 864, 865, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 866, 867, 868, 396, 265, 397, 266, 267, 869,
	268, 870, 871, 269, 872, 873, 270, 398, 740, 271,
	741, 399, 272, 273, 274, 275, 276, 277, 278, 874,
	279, 400, 280, 401, 281, 875, 282, 283, 284, 285,
	286, 402, 287, 288, 876, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 877, 301,
	742, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 878, 314, 315, 404, 313, 316, 317, 879, 318,
	305, 306, 319, 743, 320, 405, 406, 321, 880, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	881, 329, 882, 330, 331, 332, 333, 334, 335, 336,
	337, 883, 409, 410, 411, 884, 885, 338, 339, 412,
	413, 886, 340, 341, 342, 343, 887, 888, 344, 345,
	346, 347, 889, 348, 890, 414, 349, 350, 351, 415,
	416, 891, 892, 352, 893, 894, 895, 896, 353, 354,
	355, 356, 357, 0, 811, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 816, 2368, 191, 817, 818, 819, 820, 358,
	821, 822, 823, 824, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 825, 196, 365, 366, 197, 198,
	199, 826, 827, 367, 368, 369, 828, 200, 370, 829,
	803, 830, 201, 202, 203, 0, 205, 206, 207, 204,
	831, 208, 0, 209, 210, 832, 729, 211, 212, 213,
	833, 834, 836, 835, 837, 838, 839, 214, 215, 424,
	216, 371, 217, 372, 373, 840, 218, 841, 219, 842,
	220, 843, 844, 221, 222, 845, 223, 846, 0, 847,
	374, 224, 226, 225, 227, 375, 376, 848, 730, 849,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 850, 231, 851, 852, 731, 853, 232, 380, 854,
	381, 855, 0, 233, 234, 235, 236, 237, 382, 383,
	733, 856, 384, 241, 857, 238, 858, 732, 239, 385,
	240, 386, 387, 388, 389, 390, 859, 391, 860, 734,
	242, 243, 244, 735, 392, 393, 245, 246, 247, 861,
	249, 248, 862, 394, 736, 250, 251, 737, 863, 252,
	253, 864, 865, 254, 0, 255, 257, 738, 256, 258,
	260, 395, 259, 739, 261, 262, 264, 263, 866, 867,
	868, 396, 265, 397, 266, 267, 869, 268, 870, 871,
	269, 872, 873, 270, 398, 740, 271, 741, 399, 272,
	273, 274, 275, 276, 277, 278, 874, 279, 400, 280,
	401, 281, 875, 282, 283, 284, 285, 286, 402, 287,
	288, 876, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 877, 301, 742, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 878, 314,
	315, 404, 313, 316, 317, 879, 318, 305, 306, 319,
	743, 320, 405, 406, 321, 880, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 881, 329, 882,
	330, 331, 332, 333, 334, 335, 336, 337, 883, 409,
	410, 411, 884, 885, 338, 339, 412, 413, 886, 340,
	341, 342, 343, 887, 888, 344, 345, 346, 347, 889,
	348, 890, 414, 349, 350, 351, 415, 416, 891, 892,
	352, 893, 894, 895, 896, 353, 354, 355, 356, 357,
	811, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1271, 189, 190, 816, 0,
	191, 817, 818, 819, 820, 358, 821, 822, 823, 824,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	825, 196, 365, 366, 197, 198, 199, 826, 827, 367,
	368, 369, 828, 200, 370, 829, 803, 830, 201, 202,
	203, 0, 205, 206, 207, 204, 831, 208, 0, 209,
	210, 832, 729, 211, 212, 213, 833, 834, 836, 835,
	837, 838, 839, 214, 215, 424, 216, 371, 217, 372,
	373, 840, 218, 841, 219, 842, 220, 843, 844, 221,
	222, 845, 223, 846, 0, 847, 374, 224, 226, 225,
	227, 375, 376, 848, 730, 849, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 850, 231, 851,
	852, 731, 853, 232, 380, 854, 381, 855, 0, 233,
	234, 235, 236, 237, 382, 383, 733, 856, 384, 241,
	857, 238, 858, 732, 239, 385, 240, 386, 387, 388,
	389, 390, 859, 391, 860, 734, 242, 243, 244, 735,
	392, 393, 245, 246, 247, 861, 249, 248, 862, 394,
	736, 250, 251, 737, 863, 252, 253, 864, 865, 254,
	0, 255, 257, 738, 256, 258, 260, 395, 259, 739,
	261, 262, 264, 263, 866, 867, 868, 396, 265, 397,
	266, 267, 869, 268, 870, 871, 269, 872, 873, 270,
	398, 740, 271, 741, 399, 272, 273, 274, 275, 276,
	277, 278, 874, 279, 400, 280, 401, 281, 875, 282,
	283, 284, 285, 286, 402, 287, 288, 876, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 877, 301, 742, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 878, 314, 315, 404, 313, 316,
	317, 879, 318, 305, 306, 319, 743, 320, 405, 406,
	321, 880, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 881, 329, 882, 330, 331, 332, 333,
	334, 335, 336, 337, 883, 409, 410, 411, 884, 885,
	338, 339, 412, 413, 886, 340, 341, 342, 343, 887,
	888, 344, 345, 346, 347, 889, 348, 890, 414, 349,
	350, 351, 415, 416, 891, 892, 352, 893, 894, 895,
	896, 353, 354, 355, 356, 357, 1574, 0, 667, 656,
	657, 654, 655, 646, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 1571, 0, 191, 0,
	0, 0, 0, 684, 649, 0, 0, 0, 192, 193,
	194, 359, 699, 361, 700, 195, 701, 702, 0, 196,
	365, 366, 197, 198, 199, 652, 683, 703, 704, 369,
	0, 200, 695, 0, 675, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	729, 211, 212, 213, 0, 676, 677, 679, 0, 678,
	680, 214, 215, 424, 216, 705, 217, 706, 707, 637,
	218, 0, 219, 0, 220, 1572, 0, 698, 222, 0,
	223, 0, 0, 0, 640, 224, 226, 225, 227, 685,
	686, 663, 730, 0, 0, 0, 0, 0, 228, 229,
	708, 709, 710, 0, 230, 0, 231, 0, 0, 731,
	0, 232, 696, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 692, 694, 733, 0, 384, 241, 0, 238,
	0, 732, 239, 711, 240, 712, 713, 714, 715, 716,
	0, 674, 0, 734, 242, 243, 244, 735, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 697, 736, 250,
	251, 737, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 738, 256, 258, 260, 395, 259, 739, 261, 262,
	264, 263, 634, 0, 664, 693, 265, 717, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 740,
	271, 741, 687, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 688, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 718, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 742, 302, 303, 641, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 681,
	318, 305, 306, 319, 743, 320, 719, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 720, 325, 326,
	689, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 721, 722, 0, 0, 338, 339,
	690, 691, 662, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 682, 348, 0, 414, 349, 350, 351,
	415, 723, 1570, 0, 352, 0, 0, 0, 0, 353,
	354, 355, 356, 357, 635, 0, 0, 0, 0, 0,
	0, 0, 633, 0, 0, 0, 0, 631, 632, 1573,
	0, 0, 0, 0, 0, 0, 642, 1568, 0, 0,
	0, 619, 645, 667, 656, 657, 654, 655, 646, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 684, 649,
	0, 0, 0, 192, 193, 194, 359, 699, 361, 700,
	195, 701, 702, 0, 196, 365, 366, 197, 198, 199,
	652, 683, 703, 704, 369, 0, 200, 695, 0, 675,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 729, 211, 212, 213, 0,
	676, 677, 679, 0, 678, 680, 214, 215, 424, 216,
	705, 217, 706, 707, 637, 218, 0, 219, 0, 220,
	0, 0, 698, 222, 0, 223, 0, 0, 0, 640,
	224, 226, 225, 227, 685, 686, 663, 730, 0, 0,
	0, 0, 0, 228, 229, 708, 709, 710, 0, 230,
	0, 231, 0, 0, 731, 0, 232, 696, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 692, 694, 733,
	0, 384, 241, 0, 238, 0, 732, 239, 711, 240,
	712, 713, 714, 715, 716, 0, 674, 0, 734, 242,
	243, 244, 735, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 697, 736, 250, 251, 737, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 738, 256, 258, 260,
	395, 259, 739, 261, 262, 264, 263, 634, 0, 664,
	693, 265, 717, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 740, 271, 741, 687, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 688, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 718, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 742, 302, 303, 641,
	304, 0, 308, 309, 310, 311, 312, 147, 314, 315,
	404, 313, 316, 317, 681, 318, 305, 306, 319, 743,
	320, 719, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 720, 325, 326, 689, 0, 329, 149, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 721,
	722, 0, 0, 338, 339, 690, 691, 662, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 682, 348,
	0, 414, 349, 350, 351, 965, 723, 0, 0, 352,
	0, 0, 0, 141, 353, 354, 355, 356, 357, 635,
	142, 0, 0, 0, 0, 0, 0, 633, 0, 0,
	0, 0, 631, 632, 667, 656, 657, 654, 655, 646,
	0, 1151, 0, 0, 0, 0, 0, 645, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 684,
	649, 0, 0, 0, 192, 193, 194, 359, 699, 361,
	700, 195, 701, 702, 0, 196, 365, 366, 197, 198,
	199, 652, 683, 703, 704, 369, 0, 200, 695, 0,
	675, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 729, 211, 212, 213,
	0, 676, 677, 679, 0, 678, 680, 214, 215, 424,
	216, 705, 217, 706, 707, 637, 218, 0, 219, 0,
	220, 0, 0, 698, 222, 0, 223, 0, 0, 0,
	640, 224, 226, 225, 227, 685, 686, 663, 730, 0,
	0, 0, 0, 0, 228, 229, 708, 709, 710, 0,
	230, 0, 231, 0, 0, 731, 0, 232, 696, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 692, 694,
	733, 0, 384, 241, 0, 238, 0, 732, 239, 711,
	240, 712, 713, 714, 715, 716, 0, 674, 0, 734,
	242, 243, 244, 735, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 697, 736, 250, 251, 737, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 738, 256, 258,
	260, 395, 259, 739, 261, 262, 264, 263, 634, 0,
	664, 693, 265, 717, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 740, 271, 741, 687, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 688, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 718, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 742, 302, 303,
	641, 304, 0, 308, 309, 310, 311, 312, 147, 314,
	315, 404, 313, 316, 317, 681, 318, 305, 306, 319,
	743, 320, 719, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 720, 325, 326, 689, 0, 329, 149,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	721, 722, 0, 0, 338, 339, 690, 691, 662, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 682,
	348, 0, 414, 349, 350, 351, 965, 723, 0, 0,
	352, 0, 0, 0, 141, 353, 354, 355, 356, 357,
	635, 142, 0, 0, 0, 0, 0, 0, 633, 0,
	0, 0, 0, 631, 632, 667, 656, 657, 654, 655,
	646, 0, 1151, 0, 0, 0, 0, 0, 645, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	684, 649, 0, 0, 0, 192, 193, 194, 359, 699,
	361, 700, 195, 701, 702, 1628, 196, 365, 366, 197,
	198, 199, 652, 683, 703, 704, 369, 0, 200, 695,
	0, 675, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 729, 211, 212,
	213, 0, 676, 677, 679, 0, 678, 680, 214, 215,
	424, 216, 705, 217, 706, 707, 637, 218, 0, 219,
	0, 220, 0, 0, 698, 222, 0, 223, 0, 0,
	0, 640, 224, 226, 225, 227, 685, 686, 663, 730,
	0, 0, 0, 0, 0, 228, 229, 708, 709, 710,
	0, 230, 0, 231, 0, 1633, 731, 0, 232, 696,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 692,
	694, 733, 0, 384, 241, 0, 238, 0, 732, 239,
	711, 240, 712, 713, 714, 715, 716, 0, 674, 0,
	734, 242, 243, 244, 735, 392, 393, 245, 246, 247,
	0, 249, 248, 1629, 697, 736, 250, 251, 737, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 738, 256,
	258, 260, 395, 259, 739, 261, 262, 264, 263, 634,
	0, 664, 693, 265, 717, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 740, 271, 741, 687,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 688,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 718,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 742, 302,
	303, 641, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 681, 318, 305, 306,
	319, 743, 320, 719, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 720, 325, 326, 689, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 721, 722, 0, 1630, 338, 339, 690, 691, 662,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	682, 348, 0, 414, 349, 350, 351, 415, 723, 0,
	0, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 635, 667, 656, 657, 654, 655, 646, 0, 633,
	0, 0, 0, 0, 631, 632, 0, 0, 189, 190,
	0, 0, 191, 642, 0, 0, 0, 684, 649, 645,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 2290, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 635, 667,
	656, 657, 654, 655, 646, 0, 633, 0, 0, 0,
	0, 631, 632, 1213, 0, 189, 190, 0, 0, 191,
	642, 0, 0, 0, 684, 649, 645, 0, 0, 192,
	193, 194, 359, 699, 361, 700, 195, 701, 702, 0,
	196, 365, 366, 197, 198, 199, 652, 683, 703, 704,
	369, 0, 200, 695, 0, 675, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 729, 211, 212, 213, 0, 676, 677, 679, 0,
	678, 680, 214, 215, 424, 216, 705, 217, 706, 707,
	637, 218, 0, 219, 0, 220, 0, 0, 698, 222,
	0, 223, 0, 0, 0, 640, 224, 226, 225, 227,
	685, 686, 663, 730, 0, 0, 0, 0, 0, 228,
	229, 708, 709, 710, 0, 230, 0, 231, 0, 0,
	731, 0, 232, 696, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 692, 694, 733, 0, 384, 241, 1478,
	238, 0, 732, 239, 711, 240, 712, 713, 714, 715,
	716, 0, 674, 0, 734, 242, 243, 244, 735, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 697, 736,
	250, 251, 737, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 738, 256, 258, 260, 395, 259, 739, 261,
	262, 264, 263, 634, 0, 664, 693, 265, 717, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	740, 271, 741, 687, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 688, 280, 401, 281, 1477, 282, 283,
	284, 285, 286, 718, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 742, 302, 303, 641, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	681, 318, 305, 306, 319, 743, 320, 719, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 720, 325,
	326, 689, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 721, 722, 0, 0, 338,
	339, 690, 691, 662, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 682, 348, 0, 414, 349, 350,
	351, 415, 723, 0, 0, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 635, 0, 0, 0, 0,
	0, 0, 0, 633, 0, 0, 0, 0, 631, 632,
	0, 0, 0, 0, 0, 0, 0, 642, 0, 0,
	0, 0, 627, 645, 667, 656, 657, 654, 655, 646,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 684,
	649, 0, 0, 0, 192, 193, 194, 359, 699, 361,
	700, 195, 701, 702, 0, 196, 365, 366, 197, 198,
	199, 652, 683, 703, 704, 369, 0, 200, 695, 0,
	675, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 729, 211, 212, 213,
	0, 676, 677, 679, 0, 678, 680, 214, 215, 424,
	216, 705, 217, 706, 707, 637, 218, 0, 219, 0,
	220, 0, 0, 698, 222, 0, 223, 0, 0, 0,
	640, 224, 226, 225, 227, 685, 686, 663, 730, 0,
	0, 0, 0, 0, 228, 229, 708, 709, 710, 0,
	230, 0, 231, 0, 0, 731, 0, 232, 696, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 692, 694,
	733, 0, 384, 241, 0, 238, 0, 732, 239, 711,
	240, 712, 713, 714, 715, 716, 0, 674, 0, 734,
	242, 243, 244, 735, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 697, 736, 250, 251, 737, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 738, 256, 258,
	260, 395, 259, 739, 261, 262, 264, 263, 634, 0,
	664, 693, 265, 717, 266, 267, 0, 268, 629, 0,
	269, 0, 0, 270, 398, 740, 271, 741, 687, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 688, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 718, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 742, 302, 303,
	641, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 681, 318, 305, 306, 319,
	743, 320, 719, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 720, 325, 326, 689, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	721, 722, 0, 0, 338, 339, 690, 691, 662, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 682,
	348, 0, 414, 349, 350, 351, 415, 723, 0, 0,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	635, 667, 656, 657, 654, 655, 646, 0, 633, 0,
	0, 0, 0, 631, 632, 0, 0, 189, 190, 0,
	0, 191, 642, 0, 0, 0, 684, 649, 645, 0,
	0, 192, 193, 194, 359, 699, 361, 700, 195, 701,
	702, 0, 196, 365, 366, 197, 198, 199, 652, 683,
	703, 704, 369, 0, 200, 695, 0, 675, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 729, 211, 212, 213, 0, 676, 677,
	679, 0, 678, 680, 214, 215, 424, 216, 705, 217,
	706, 707, 637, 218, 0, 219, 0, 220, 0, 0,
	698, 222, 0, 223, 0, 0, 0, 640, 224, 226,
	225, 227, 685, 686, 663, 730, 0, 0, 0, 0,
	0, 228, 229, 708, 709, 710, 0, 230, 0, 231,
	0, 0, 731, 0, 232, 696, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 692, 694, 733, 0, 384,
	241, 0, 238, 0, 732, 239, 711, 240, 712, 713,
	714, 715, 716, 0, 674, 0, 734, 242, 243, 244,
	735, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	697, 736, 250, 251, 737, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 738, 256, 258, 260, 395, 259,
	739, 261, 262, 264, 263, 634, 0, 664, 693, 265,
	717, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 740, 271, 741, 687, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 688, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 718, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 742, 302, 303, 641, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 681, 318, 305, 306, 319, 743, 320, 719,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	720, 325, 326, 689, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 721, 722, 0,
	0, 338, 339, 690, 691, 662, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 682, 348, 0, 414,
	349, 350, 351, 415, 723, 2139, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 635, 667, 656,
	657, 654, 655, 646, 0, 633, 0, 0, 0, 0,
	631, 632, 0, 0, 189, 190, 0, 0, 191, 642,
	0, 0, 0, 684, 649, 645, 0, 0, 192, 193,
	194, 359, 699, 361, 700, 195, 701, 702, 0, 196,
	365, 366, 197, 198, 199, 652, 683, 703, 704, 369,
	0, 200, 695, 0, 675, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	729, 211, 212, 213, 0, 676, 677, 679, 0, 678,
	680, 214, 215, 424, 216, 705, 217, 706, 707, 637,
	218, 0, 219, 0, 220, 0, 0, 698, 222, 0,
	223, 0, 0, 0, 640, 224, 226, 225, 227, 685,
	686, 663, 730, 0, 0, 0, 0, 0, 228, 229,
	708, 709, 710, 0, 230, 0, 231, 0, 0, 731,
	0, 232, 696, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 692, 694, 733, 0, 384, 241, 0, 238,
	0, 732, 239, 711, 240, 712, 713, 714, 715, 716,
	0, 674, 0, 734, 242, 243, 244, 735, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 697, 736, 250,
	251, 737, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 738, 256, 258, 260, 395, 259, 739, 261, 262,
	264, 263, 634, 0, 664, 693, 265, 717, 266, 267,
	0, 268, 629, 0, 269, 0, 0, 270, 398, 740,
	271, 741, 687, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 688, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 718, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 742, 302, 303, 641, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 681,
	318, 305, 306, 319, 743, 320, 719, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 720, 325, 326,
	689, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 721, 722, 0, 0, 338, 339,
	690, 691, 662, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 682, 348, 0, 414, 349, 350, 351,
	415, 723, 0, 0, 352, 0, 0, 0, 0, 353,
	354, 355, 356, 357, 635, 667, 656, 657, 654, 655,
	646, 0, 633, 0, 0, 0, 0, 631, 632, 0,
	0, 189, 190, 0, 0, 191, 642, 0, 0, 0,
	684, 649, 645, 0, 0, 192, 193, 194, 359, 699,
	361, 700, 195, 701, 702, 0, 196, 365, 366, 197,
	198, 199, 652, 683, 703, 704, 369, 0, 200, 695,
	0, 675, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 729, 211, 212,
	213, 0, 676, 677, 679, 0, 678, 680, 214, 215,
	424, 216, 705, 217, 706, 707, 637, 218, 0, 219,
	0, 220, 0, 0, 698, 222, 0, 223, 0, 0,
	0, 640, 224, 226, 225, 227, 685, 686, 663, 730,
	0, 0, 0, 0, 0, 228, 229, 708, 709, 710,
	0, 230, 0, 231, 0, 0, 731, 0, 232, 696,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 692,
	694, 733, 0, 384, 241, 0, 238, 0, 732, 239,
	711, 240, 712, 713, 714, 715, 716, 0, 674, 0,
	734, 242, 243, 244, 735, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 697, 736, 250, 251, 737, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 738, 256,
	258, 260, 395, 259, 739, 261, 262, 264, 263, 634,
	0, 664, 693, 265, 717, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 740, 271, 741, 687,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 688,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 718,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 742, 302,
	303, 641, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 681, 318, 305, 306,
	319, 743, 320, 719, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 720, 325, 326, 689, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 721, 722, 0, 0, 338, 339, 690, 691, 662,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	682, 348, 0, 414, 349, 350, 351, 415, 723, 0,
	0, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 635, 667, 656, 657, 654, 655, 646, 0, 633,
	0, 0, 0, 0, 631, 632, 1213, 0, 189, 190,
	0, 0, 191, 642, 0, 0, 0, 684, 649, 645,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 1633, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 635, 0,
	0, 0, 0, 0, 0, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	642, 0, 0, 0, 0, 1679, 645, 667, 656, 657,
	654, 655, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 684, 649, 0, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 635, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	1642, 645, 667, 656, 657, 654, 655, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 684, 649, 0,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 635, 0,
	0, 0, 0, 0, 0, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	642, 0, 0, 0, 0, 1640, 645, 667, 656, 657,
	654, 655, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 684, 649, 0, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 635, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	1624, 645, 667, 656, 657, 654, 655, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 684, 649, 0,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 635, 0,
	0, 0, 0, 0, 0, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	642, 0, 0, 0, 0, 1612, 645, 667, 656, 657,
	654, 655, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 684, 649, 0, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 217, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 635, 0, 0, 0, 0, 0, 0,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	0, 0, 0, 0, 0, 642, 0, 0, 0, 0,
	1610, 645, 1602, 656, 657, 654, 655, 646, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 684, 649, 0,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	1605, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 1606, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 1607, 1604, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 1608, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 1603, 357, 635, 0,
	0, 0, 0, 0, 0, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 0, 0, 0, 0, 0,
	642, 0, 0, 0, 0, 1599, 645, 1602, 656, 657,
	654, 655, 646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 684, 649, 0, 0, 0, 192, 193, 194,
	359, 699, 361, 700, 195, 701, 702, 0, 196, 365,
	366, 197, 198, 199, 652, 683, 703, 704, 369, 0,
	200, 695, 0, 675, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 676, 677, 679, 0, 678, 680,
	214, 215, 424, 216, 705, 1605, 706, 707, 637, 218,
	0, 219, 0, 220, 0, 0, 698, 222, 0, 223,
	0, 0, 0, 640, 224, 226, 225, 227, 685, 686,
	663, 730, 0, 0, 0, 0, 0, 228, 229, 708,
	709, 710, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 696, 0, 381, 0, 0, 233, 1606, 235, 236,
	237, 692, 694, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 711, 240, 712, 713, 714, 715, 716, 0,
	674, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 697, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 1607, 1604, 260, 395, 259, 739, 261, 262, 264,
	263, 634, 0, 664, 693, 265, 717, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 687, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 688, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 718, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 641, 304, 0, 308, 309, 310, 311,
	1608, 0, 314, 315, 404, 313, 316, 317, 681, 318,
	305, 306, 319, 743, 320, 719, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 720, 325, 326, 689,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 721, 722, 0, 0, 338, 339, 690,
	691, 662, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 682, 348, 0, 414, 349, 350, 351, 415,
	723, 0, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 1603, 357, 635, 667, 656, 657, 654, 655, 646,
	0, 633, 0, 0, 0, 0, 631, 632, 0, 0,
	189, 190, 0, 0, 191, 642, 0, 0, 0, 684,
	649, 645, 0, 0, 192, 193, 194, 359, 699, 361,
	700, 195, 701, 702, 0, 196, 365, 366, 197, 198,
	199, 652, 683, 703, 704, 369, 0, 200, 695, 0,
	675, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 729, 211, 212, 213,
	0, 676, 677, 679, 0, 678, 680, 214, 215, 424,
	216, 705, 217, 706, 707, 637, 218, 0, 219, 0,
	220, 0, 0, 698, 222, 0, 223, 0, 0, 0,
	640, 224, 226, 225, 227, 685, 686, 663, 730, 0,
	0, 0, 0, 0, 228, 229, 708, 709, 710, 0,
	230, 0, 231, 0, 0, 731, 0, 232, 696, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 692, 694,
	733, 0, 384, 241, 0, 238, 0, 732, 239, 711,
	240, 712, 713, 714, 715, 716, 0, 674, 0, 734,
	242, 243, 244, 735, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 697, 736, 250, 251, 737, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 738, 256, 258,
	260, 395, 259, 739, 261, 262, 264, 263, 634, 0,
	664, 693, 265, 717, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 740, 271, 741, 687, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 688, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 718, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 742, 302, 303,
	641, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 681, 318, 305, 306, 319,
	743, 320, 719, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 720, 325, 326, 689, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	721, 722, 0, 0, 338, 339, 690, 691, 662, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 682,
	348, 0, 414, 349, 350, 351, 415, 723, 0, 0,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	635, 667, 656, 657, 654, 655, 646, 0, 633, 0,
	0, 0, 0, 631, 632, 0, 0, 189, 190, 1465,
	1156, 191, 642, 0, 0, 0, 684, 649, 645, 0,
	0, 192, 193, 194, 359, 699, 361, 700, 195, 701,
	702, 0, 196, 365, 366, 197, 198, 199, 652, 683,
	703, 704, 369, 0, 200, 695, 0, 675, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 729, 211, 212, 213, 0, 676, 677,
	679, 0, 678, 680, 214, 215, 424, 216, 705, 217,
	706, 707, 637, 218, 0, 219, 0, 220, 0, 0,
	698, 222, 0, 223, 0, 0, 0, 640, 224, 226,
	225, 227, 685, 686, 663, 730, 0, 0, 0, 0,
	0, 228, 229, 708, 709, 710, 0, 230, 0, 231,
	0, 0, 731, 0, 232, 696, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 692, 694, 733, 0, 384,
	241, 0, 238, 0, 732, 239, 711, 240, 712, 713,
	714, 715, 716, 0, 674, 0, 734, 242, 243, 244,
	735, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	697, 736, 250, 251, 737, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 738, 256, 258, 260, 395, 259,
	739, 261, 262, 264, 263, 634, 0, 664, 693, 265,
	717, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 740, 271, 741, 687, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 688, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 718, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 742, 302, 303, 641, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 681, 318, 305, 306, 319, 743, 320, 719,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	720, 325, 326, 689, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 721, 722, 0,
	0, 338, 339, 690, 691, 662, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 682, 348, 0, 414,
	349, 350, 351, 415, 723, 0, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 635, 0, 0,
	0, 0, 0, 0, 0, 633, 0, 0, 0, 0,
	631, 632, 0, 0, 0, 0, 0, 0, 0, 642,
	0, 0, 0, 0, 908, 645, 667, 656, 657, 654,
	655, 646, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 684, 649, 0, 0, 0, 192, 193, 194, 359,
	699, 361, 700, 195, 701, 702, 0, 196, 365, 366,
	197, 198, 199, 652, 683, 703, 704, 369, 0, 200,
	695, 0, 675, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 729, 211,
	212, 213, 0, 676, 677, 679, 0, 678, 680, 214,
	215, 424, 216, 705, 217, 706, 707, 637, 218, 0,
	219, 0, 220, 0, 0, 698, 222, 0, 223, 0,
	0, 0, 640, 224, 226, 225, 227, 685, 686, 663,
	730, 0, 0, 0, 0, 0, 228, 229, 708, 709,
	710, 0, 230, 0, 231, 0, 0, 731, 0, 232,
	696, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	692, 694, 733, 0, 384, 241, 0, 238, 0, 732,
	239, 711, 240, 712, 713, 714, 715, 716, 0, 674,
	0, 734, 242, 243, 244, 735, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 697, 736, 250, 251, 737,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 738,
	256, 258, 260, 395, 259, 739, 261, 262, 264, 263,
	634, 0, 664, 693, 265, 717, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 740, 271, 741,
	687, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	688, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	718, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 742,
	302, 303, 641, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 681, 318, 305,
	306, 319, 743, 320, 719, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 720, 325, 326, 689, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 721, 722, 0, 0, 338, 339, 690, 691,
	662, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 682, 348, 0, 414, 349, 350, 351, 415, 723,
	0, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 635, 0, 0, 0, 0, 0, 0, 0,
	633, 0, 0, 0, 0, 631, 632, 0, 0, 0,
	0, 0, 0, 0, 642, 0, 0, 0, 0, 906,
	645, 667, 656, 657, 654, 655, 646, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 684, 649, 0, 0,
	0, 192, 193, 194, 359, 699, 361, 700, 195, 701,
	702, 0, 196, 365, 366, 197, 198, 199, 652, 683,
	703, 704, 369, 0, 200, 695, 0, 675, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 729, 211, 212, 213, 0, 676, 677,
	679, 0, 678, 680, 214, 215, 424, 216, 705, 217,
	706, 707, 637, 218, 0, 219, 0, 220, 0, 0,
	698, 222, 0, 223, 0, 0, 0, 640, 224, 226,
	225, 227, 685, 686, 663, 730, 0, 0, 0, 0,
	0, 228, 229, 708, 709, 710, 0, 230, 0, 231,
	0, 0, 731, 0, 232, 696, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 692, 694, 733, 0, 384,
	241, 0, 238, 0, 732, 239, 711, 240, 712, 713,
	714, 715, 716, 0, 674, 0, 734, 242, 243, 244,
	735, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	697, 736, 250, 251, 737, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 738, 256, 258, 260, 395, 259,
	739, 261, 262, 264, 263, 634, 0, 664, 693, 265,
	717, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 740, 271, 741, 687, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 688, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 718, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 742, 302, 303, 641, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 681, 318, 305, 306, 319, 743, 320, 719,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	720, 325, 326, 689, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 721, 722, 0,
	0, 338, 339, 690, 691, 662, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 682, 348, 0, 414,
	349, 350, 351, 415, 723, 0, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 635, 667, 656,
	657, 654, 655, 646, 0, 633, 0, 0, 0, 0,
	631, 632, 0, 0, 189, 190, 0, 0, 191, 642,
	0, 0, 0, 684, 649, 645, 0, 0, 192, 193,
	194, 359, 699, 361, 700, 195, 701, 702, 0, 196,
	365, 366, 197, 198, 199, 652, 683, 703, 704, 369,
	0, 200, 695, 0, 675, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	729, 211, 212, 213, 0, 676, 677, 679, 0, 678,
	680, 214, 215, 424, 216, 705, 217, 706, 707, 637,
	218, 0, 219, 0, 220, 0, 0, 698, 222, 0,
	223, 0, 0, 0, 640, 224, 226, 225, 227, 685,
	686, 663, 730, 0, 0, 0, 0, 0, 228, 229,
	708, 709, 710, 0, 230, 0, 231, 0, 0, 731,
	0, 232, 696, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 692, 694, 733, 0, 384, 241, 0, 238,
	0, 732, 239, 711, 240, 712, 713, 714, 715, 716,
	0, 674, 0, 734, 242, 243, 244, 735, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 697, 736, 250,
	251, 737, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 2706, 256, 258, 260, 395, 259, 739, 261, 262,
	264, 263, 634, 0, 664, 693, 265, 717, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 740,
	271, 741, 687, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 688, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 718, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 742, 302, 303, 641, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 681,
	318, 305, 306, 319, 743, 320, 719, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 720, 325, 326,
	689, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 721, 722, 0, 0, 338, 339,
	690, 691, 662, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 682, 348, 0, 414, 349, 350, 351,
	415, 723, 0, 0, 352, 0, 0, 0, 0, 353,
	354, 355, 356, 357, 635, 667, 656, 657, 654, 655,
	646, 0, 633, 0, 0, 0, 0, 631, 632, 0,
	0, 189, 190, 0, 0, 191, 642, 0, 0, 0,
	684, 649, 645, 0, 0, 192, 193, 194, 359, 699,
	361, 700, 195, 701, 702, 0, 196, 365, 366, 197,
	198, 199, 652, 683, 703, 704, 369, 0, 200, 695,
	0, 675, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 729, 211, 212,
	2625, 0, 676, 677, 679, 0, 678, 680, 214, 215,
	424, 216, 705, 217, 706, 707, 637, 218, 0, 219,
	0, 220, 0, 0, 698, 222, 0, 223, 0, 0,
	0, 640, 224, 226, 225, 227, 685, 686, 663, 730,
	0, 0, 0, 0, 0, 228, 229, 708, 709, 710,
	0, 230, 0, 231, 0, 0, 731, 0, 232, 696,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 692,
	694, 733, 0, 384, 241, 0, 238, 0, 732, 239,
	711, 240, 712, 713, 714, 715, 716, 0, 674, 0,
	734, 242, 243, 244, 735, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 697, 736, 250, 251, 737, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 738, 256,
	258, 260, 395, 259, 739, 261, 262, 264, 263, 634,
	0, 664, 693, 265, 717, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 740, 271, 741, 687,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 688,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 718,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 742, 302,
	303, 641, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 681, 318, 305, 306,
	319, 743, 320, 719, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 720, 325, 326, 689, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 721, 722, 0, 0, 338, 339, 690, 691, 662,
	340, 341, 2624, 343, 0, 0, 344, 345, 346, 347,
	682, 348, 0, 414, 349, 350, 351, 415, 723, 0,
	0, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 635, 667, 656, 657, 654, 655, 646, 0, 633,
	0, 0, 0, 0, 631, 632, 0, 0, 189, 190,
	0, 0, 191, 642, 0, 0, 0, 684, 649, 645,
	0, 0, 192, 193, 194, 359, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 213, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 733, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 734, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 737, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 743, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 635, 667,
	656, 657, 654, 655, 646, 0, 633, 0, 0, 0,
	0, 631, 632, 0, 0, 189, 190, 0, 0, 191,
	642, 0, 0, 0, 684, 649, 645, 0, 0, 192,
	193, 194, 2623, 699, 361, 700, 195, 701, 702, 0,
	196, 365, 366, 197, 198, 199, 652, 683, 703, 704,
	369, 0, 200, 695, 0, 675, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 729, 211, 212, 2625, 0, 676, 677, 679, 0,
	678, 680, 214, 215, 424, 216, 705, 217, 706, 707,
	637, 218, 0, 219, 0, 220, 0, 0, 698, 222,
	0, 223, 0, 0, 0, 640, 224, 226, 225, 227,
	685, 686, 663, 730, 0, 0, 0, 0, 0, 228,
	229, 708, 709, 710, 0, 230, 0, 231, 0, 0,
	731, 0, 232, 696, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 692, 694, 733, 0, 384, 241, 0,
	238, 0, 732, 239, 711, 240, 712, 713, 714, 715,
	716, 0, 674, 0, 734, 242, 243, 244, 735, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 697, 736,
	250, 251, 737, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 738, 256, 258, 260, 395, 259, 739, 261,
	262, 264, 263, 634, 0, 664, 693, 265, 717, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	740, 271, 741, 687, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 688, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 718, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 742, 302, 303, 641, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	681, 318, 305, 306, 319, 743, 320, 719, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 720, 325,
	326, 689, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 721, 722, 0, 0, 338,
	339, 690, 691, 662, 340, 341, 2624, 343, 0, 0,
	344, 345, 346, 347, 682, 348, 0, 414, 349, 350,
	351, 415, 723, 0, 0, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 635, 667, 656, 657, 654,
	655, 646, 0, 633, 0, 0, 0, 0, 631, 632,
	0, 0, 189, 190, 0, 0, 191, 642, 0, 0,
	0, 684, 649, 645, 0, 0, 192, 193, 194, 359,
	699, 361, 700, 195, 701, 702, 0, 196, 365, 366,
	197, 198, 199, 652, 683, 703, 704, 369, 0, 200,
	695, 0, 675, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 729, 211,
	212, 213, 0, 676, 677, 679, 0, 678, 680, 214,
	215, 424, 216, 705, 217, 706, 707, 0, 218, 0,
	219, 0, 220, 0, 0, 698, 222, 0, 223, 0,
	0, 0, 640, 224, 226, 225, 227, 685, 686, 663,
	730, 0, 0, 0, 0, 0, 228, 229, 708, 709,
	710, 0, 230, 0, 231, 0, 0, 731, 0, 232,
	696, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	692, 694, 733, 0, 384, 241, 0, 238, 0, 732,
	239, 711, 240, 712, 713, 714, 715, 716, 0, 674,
	0, 734, 242, 243, 244, 735, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 697, 736, 250, 251, 737,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 738,
	256, 258, 260, 395, 259, 739, 261, 262, 264, 263,
	0, 0, 664, 693, 265, 717, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 740, 271, 741,
	687, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	688, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	718, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 742,
	302, 303, 1622, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 681, 318, 305,
	306, 319, 743, 320, 719, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 720, 325, 326, 689, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 721, 722, 0, 0, 338, 339, 690, 691,
	662, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 682, 348, 0, 414, 349, 350, 351, 415, 723,
	0, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 667, 656, 657, 654, 655, 646, 0, 0,
	1620, 0, 0, 0, 0, 1618, 1619, 0, 189, 190,
	0, 0, 191, 0, 1621, 0, 0, 684, 649, 0,
	645, 0, 192, 193, 194, 0, 699, 361, 700, 195,
	701, 702, 0, 196, 365, 366, 197, 198, 199, 652,
	683, 703, 704, 369, 0, 200, 695, 0, 675, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 729, 211, 212, 2625, 0, 676,
	677, 679, 0, 678, 680, 214, 215, 424, 216, 705,
	217, 706, 707, 637, 218, 0, 219, 0, 220, 0,
	0, 698, 222, 0, 223, 0, 0, 0, 640, 224,
	226, 225, 227, 685, 686, 663, 730, 0, 0, 0,
	0, 0, 228, 229, 708, 709, 710, 0, 230, 0,
	231, 0, 0, 731, 0, 232, 696, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 692, 694, 0, 0,
	384, 241, 0, 238, 0, 732, 239, 711, 240, 712,
	713, 714, 715, 716, 0, 674, 0, 0, 242, 243,
	244, 735, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 697, 736, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 738, 256, 258, 260, 395,
	259, 739, 261, 262, 264, 263, 634, 0, 664, 693,
	265, 717, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 740, 271, 741, 687, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 688, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 718, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 742, 302, 303, 641, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 681, 318, 305, 306, 319, 0, 320,
	719, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 720, 325, 326, 689, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 721, 722,
	0, 0, 338, 339, 690, 691, 662, 340, 341, 2624,
	343, 0, 0, 344, 345, 346, 347, 682, 348, 0,
	414, 349, 350, 351, 415, 723, 0, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 667, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 631, 632, 0, 189, 190, 0, 0, 191, 0,
	642, 0, 0, 684, 0, 0, 645, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 683, 367, 368, 369,
	0, 200, 695, 0, 675, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	729, 211, 212, 213, 0, 676, 677, 679, 0, 678,
	680, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 685,
	686, 0, 730, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 731,
	0, 232, 696, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 692, 694, 733, 0, 384, 241, 0, 238,
	0, 732, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 734, 242, 243, 244, 735, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 697, 736, 250,
	251, 737, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 738, 256, 258, 260, 395, 259, 739, 261, 262,
	264, 263, 0, 0, 0, 693, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 740,
	271, 741, 687, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 688, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 742, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 681,
	318, 305, 306, 319, 743, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	689, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	690, 691, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 682, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 0, 352, 962, 0, 799, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 2238, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 803, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 730, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 147, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 743, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 149, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 965,
	416, 0, 0, 352, 0, 0, 186, 141, 353, 354,
	355, 356, 357, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 118, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 782, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	147, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 149, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 965, 416,
	0, 0, 352, 619, 0, 186, 141, 353, 354, 355,
	356, 357, 0, 142, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 776, 0, 1235, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 147,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	149, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 965, 416, 0,
	0, 352, 1974, 0, 186, 141, 353, 354, 355, 356,
	357, 0, 142, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 118, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 382, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 782,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 0, 0,
	352, 775, 0, 186, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	776, 0, 781, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 382, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 259, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 782, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 0, 352,
	0, 0, 186, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 776,
	0, 781, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 782, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 0, 0, 352, 0,
	0, 186, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 776, 0,
	781, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 0, 352, 0, 0,
	0, 186, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	1273, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 0, 352, 0, 0,
	186, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 1785,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 0, 0, 352, 0, 0, 186,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 2154, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 382, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 0, 0, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 667, 656, 657, 654, 655,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 1238, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 699,
	361, 700, 195, 701, 702, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 703, 704, 369, 0, 200, 370,
	0, 803, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 729, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 705, 217, 706, 707, 0, 218, 0, 219,
	0, 220, 0, 0, 698, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 663, 730,
	0, 0, 0, 0, 0, 228, 229, 708, 709, 710,
	0, 230, 0, 231, 0, 0, 731, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 733, 0, 384, 241, 0, 238, 0, 732, 239,
	711, 240, 712, 713, 714, 715, 716, 0, 674, 0,
	734, 242, 243, 244, 735, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 736, 250, 251, 737, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 738, 256,
	258, 260, 395, 259, 739, 261, 262, 264, 263, 0,
	0, 664, 396, 265, 717, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 740, 271, 741, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 718,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 742, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 743, 320, 719, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 720, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 721, 722, 0, 0, 338, 339, 412, 413, 662,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 723, 0,
	0, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 1018, 0, 799, 798, 0, 0, 0, 796, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 803,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 729, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 730, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 731, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 382, 383, 733,
	0, 384, 241, 0, 238, 0, 732, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 734, 242,
	243, 244, 735, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 736, 250, 251, 737, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 738, 256, 258, 260,
	395, 259, 739, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 740, 271, 741, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 742, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 743,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 0, 352,
	0, 0, 0, 0, 353, 354, 355, 356, 357, 957,
	0, 799, 798, 0, 0, 0, 796, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 803, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 729, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 730, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 731, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 956, 383, 733, 0, 384,
	241, 0, 238, 0, 732, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 734, 242, 243, 244,
	735, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 736, 250, 251, 737, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 738, 256, 258, 260, 395, 259,
	739, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 740, 271, 741, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 742, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 743, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 923, 0, 799,
	798, 0, 0, 0, 796, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 803, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 729, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 730, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	731, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 922, 383, 733, 0, 384, 241, 0,
	238, 0, 732, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 734, 242, 243, 244, 735, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 736,
	250, 251, 737, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 738, 256, 258, 260, 395, 259, 739, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	740, 271, 741, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 742, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 743, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 0, 0, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 792, 0, 799, 798, 0,
	0, 0, 796, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 803, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 729,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 730, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 731, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 794, 383, 733, 0, 384, 241, 0, 238, 0,
	732, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 734, 242, 243, 244, 735, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 736, 250, 251,
	737, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	738, 256, 258, 260, 395, 259, 739, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 740, 271,
	741, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	742, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 743, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 0, 508, 352, 186, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 182,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 382, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 181,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 0, 179,
	352, 186, 0, 0, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 185, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 182, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 181, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 799, 798, 352, 0, 0,
	796, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 185, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 803, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 729, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 730,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 731, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 733, 0, 384, 241, 0, 238, 0, 732, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	734, 242, 243, 244, 735, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 736, 250, 251, 737, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 738, 256,
	258, 260, 395, 259, 739, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 740, 271, 741, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 742, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 743, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 186,
	0, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 182, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 382, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 181, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 799, 798, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	185, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 803,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 729, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 730, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 731, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 382, 383, 733,
	0, 384, 241, 0, 238, 0, 732, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 734, 242,
	243, 244, 735, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 736, 250, 251, 737, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 738, 256, 258, 260,
	395, 259, 739, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 740, 271, 741, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 742, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 743,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 186, 0, 352,
	0, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 799, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 185, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 803, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 729, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 730, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 731, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 733, 0, 384,
	241, 0, 238, 0, 732, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 734, 242, 243, 244,
	735, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 736, 250, 251, 737, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 738, 256, 258, 260, 395, 259,
	739, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 740, 271, 741, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 742, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 743, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 186, 0, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 1699, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 1697, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 1745,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 1702, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 1743, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 1701, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 1744, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 186,
	0, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 1699, 200, 370, 0, 0, 1694, 201, 202, 203,
	0, 205, 206, 207, 204, 1697, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 1702, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 1693, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 1701, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 1700,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 0, 939, 352, 186, 0, 0, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 782, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 788, 352, 186, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 790, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 259, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 782, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 784, 352,
	186, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 786, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 782, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 0, 437, 352, 186, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 436, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 435, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 186, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 1682, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 186, 2308, 352, 0, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 186,
	2308, 352, 0, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 382, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 2305, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 186, 0, 352, 0, 0, 0, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 382, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 259, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 782, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 1444, 352,
	186, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 0, 1442, 352, 186, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 186, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 189, 190, 1424,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 534, 352, 186, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 997,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 382, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 536, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 531, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 1301, 352, 186, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 1300,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 0,
	534, 352, 186, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 997, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	536, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 531, 410, 411,
	0, 0, 338, 998, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 0, 534, 352, 186,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 525, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 382, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 536, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 981, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 531, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 0, 954, 352, 186, 0, 0, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	953, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 950, 352, 186, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 949, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 259, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 947, 352,
	186, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 946, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 0, 943, 352, 186, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 942, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 308, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 186, 0, 352, 0, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 189, 190, 931,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 929, 352, 186, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 928, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 259, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 0, 925, 352, 186, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 0, 0,
	0, 189, 190, 0, 0, 191, 0, 0, 0, 0,
	358, 0, 0, 0, 0, 192, 193, 194, 359, 360,
	361, 362, 195, 363, 364, 0, 196, 365, 366, 197,
	198, 199, 0, 0, 367, 368, 369, 0, 200, 370,
	0, 0, 0, 201, 202, 203, 0, 205, 206, 207,
	204, 0, 208, 0, 209, 210, 0, 0, 211, 212,
	213, 0, 0, 0, 0, 0, 0, 0, 214, 215,
	424, 216, 371, 217, 372, 373, 0, 218, 0, 219,
	0, 220, 0, 0, 221, 222, 0, 223, 0, 0,
	0, 374, 224, 226, 225, 227, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 228, 229, 377, 378, 379,
	0, 230, 0, 231, 0, 0, 0, 0, 232, 380,
	0, 381, 0, 0, 233, 234, 235, 236, 237, 382,
	383, 0, 0, 384, 241, 0, 238, 0, 0, 239,
	385, 240, 386, 387, 388, 389, 390, 0, 391, 0,
	0, 242, 243, 244, 0, 392, 393, 245, 246, 247,
	0, 249, 248, 0, 394, 0, 250, 251, 0, 0,
	252, 253, 0, 0, 254, 0, 255, 257, 0, 256,
	258, 260, 395, 259, 0, 261, 262, 264, 263, 0,
	0, 0, 396, 265, 397, 266, 267, 0, 268, 0,
	0, 269, 0, 0, 270, 398, 0, 271, 0, 399,
	272, 273, 274, 275, 276, 277, 278, 0, 279, 400,
	280, 401, 281, 0, 282, 283, 284, 285, 286, 402,
	287, 288, 0, 289, 290, 291, 292, 293, 0, 295,
	296, 294, 297, 298, 299, 300, 0, 301, 0, 302,
	303, 403, 304, 0, 308, 309, 310, 311, 312, 0,
	314, 315, 404, 313, 316, 317, 0, 318, 305, 306,
	319, 0, 320, 405, 406, 321, 0, 0, 328, 322,
	323, 307, 324, 327, 407, 325, 326, 408, 0, 329,
	0, 330, 331, 332, 333, 334, 335, 336, 337, 0,
	409, 410, 411, 0, 0, 338, 339, 412, 413, 0,
	340, 341, 342, 343, 0, 0, 344, 345, 346, 347,
	0, 348, 0, 414, 349, 350, 351, 415, 416, 0,
	920, 352, 186, 0, 0, 0, 353, 354, 355, 356,
	357, 0, 0, 0, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 919, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 0, 915, 352, 186,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 0, 0, 0, 189, 190, 0, 0, 191,
	0, 0, 0, 0, 358, 0, 0, 0, 0, 192,
	193, 194, 359, 360, 361, 362, 195, 363, 364, 0,
	196, 365, 366, 197, 198, 199, 0, 0, 367, 368,
	369, 0, 200, 370, 0, 0, 0, 201, 202, 203,
	0, 205, 206, 207, 204, 0, 208, 0, 209, 210,
	0, 0, 211, 212, 213, 0, 0, 0, 0, 0,
	0, 0, 214, 215, 424, 216, 371, 217, 372, 373,
	0, 218, 0, 219, 0, 220, 0, 0, 221, 222,
	0, 223, 0, 0, 0, 374, 224, 226, 225, 227,
	375, 376, 0, 0, 0, 0, 0, 0, 0, 228,
	229, 377, 378, 379, 0, 230, 0, 231, 0, 0,
	0, 0, 232, 380, 0, 381, 0, 0, 233, 234,
	235, 236, 237, 917, 383, 0, 0, 384, 241, 0,
	238, 0, 0, 239, 385, 240, 386, 387, 388, 389,
	390, 0, 391, 0, 0, 242, 243, 244, 0, 392,
	393, 245, 246, 247, 0, 249, 248, 0, 394, 0,
	250, 251, 0, 0, 252, 253, 0, 0, 254, 0,
	255, 257, 0, 256, 258, 260, 395, 259, 0, 261,
	262, 264, 263, 0, 0, 0, 396, 265, 397, 266,
	267, 0, 268, 0, 0, 269, 0, 0, 270, 398,
	0, 271, 0, 399, 272, 273, 274, 275, 276, 277,
	278, 0, 279, 400, 280, 401, 281, 0, 282, 283,
	284, 285, 286, 402, 287, 288, 0, 289, 290, 291,
	292, 293, 0, 295, 296, 294, 297, 298, 299, 300,
	0, 301, 0, 302, 303, 403, 304, 0, 308, 309,
	310, 311, 312, 0, 314, 315, 404, 313, 316, 317,
	0, 318, 305, 306, 319, 0, 320, 405, 406, 321,
	0, 0, 328, 322, 323, 307, 324, 327, 407, 325,
	326, 408, 0, 329, 0, 330, 331, 332, 333, 334,
	335, 336, 337, 0, 409, 410, 411, 0, 0, 338,
	339, 412, 413, 0, 340, 341, 342, 343, 0, 0,
	344, 345, 346, 347, 0, 348, 0, 414, 349, 350,
	351, 415, 416, 0, 806, 352, 186, 0, 0, 0,
	353, 354, 355, 356, 357, 0, 0, 0, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	808, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	0, 804, 352, 186, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 0, 0, 0, 189,
	190, 0, 0, 191, 0, 0, 0, 0, 358, 0,
	0, 0, 0, 192, 193, 194, 359, 360, 361, 362,
	195, 363, 364, 0, 196, 365, 366, 197, 198, 199,
	0, 0, 367, 368, 369, 0, 200, 370, 0, 0,
	0, 201, 202, 203, 0, 205, 206, 207, 204, 0,
	208, 0, 209, 210, 0, 0, 211, 212, 213, 0,
	0, 0, 0, 0, 0, 0, 214, 215, 424, 216,
	371, 217, 372, 373, 0, 218, 0, 219, 0, 220,
	0, 0, 221, 222, 0, 223, 0, 0, 0, 374,
	224, 226, 225, 227, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 228, 229, 377, 378, 379, 0, 230,
	0, 231, 0, 0, 0, 0, 232, 380, 0, 381,
	0, 0, 233, 234, 235, 236, 237, 382, 383, 0,
	0, 384, 241, 0, 238, 0, 0, 239, 385, 240,
	386, 387, 388, 389, 390, 0, 391, 0, 0, 242,
	243, 244, 0, 392, 393, 245, 246, 247, 0, 249,
	248, 0, 394, 0, 250, 251, 0, 0, 252, 253,
	0, 0, 254, 0, 255, 257, 0, 256, 258, 260,
	395, 259, 0, 261, 262, 264, 263, 0, 0, 0,
	396, 265, 397, 266, 267, 0, 268, 0, 0, 269,
	0, 0, 270, 398, 0, 271, 0, 399, 272, 273,
	274, 275, 276, 277, 278, 0, 279, 400, 280, 401,
	281, 0, 282, 283, 284, 285, 286, 402, 287, 288,
	0, 289, 290, 291, 292, 293, 0, 295, 296, 294,
	297, 298, 299, 300, 0, 301, 0, 302, 303, 403,
	304, 0, 308, 309, 310, 311, 312, 0, 314, 315,
	404, 313, 316, 317, 0, 318, 305, 306, 319, 0,
	320, 405, 406, 321, 0, 0, 328, 322, 323, 307,
	324, 327, 407, 325, 326, 408, 0, 329, 0, 330,
	331, 332, 333, 334, 335, 336, 337, 0, 409, 410,
	411, 0, 0, 338, 339, 412, 413, 0, 340, 341,
	342, 343, 0, 0, 344, 345, 346, 347, 0, 348,
	0, 414, 349, 350, 351, 415, 416, 0, 534, 352,
	186, 0, 0, 0, 353, 354, 355, 356, 357, 0,
	0, 0, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 525, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 524, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 536, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 526, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 527,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 531, 410, 411, 0, 0,
	338, 529, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 0, 516, 352, 186, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	0, 0, 0, 189, 190, 0, 0, 191, 0, 0,
	0, 0, 358, 0, 0, 0, 0, 192, 193, 194,
	359, 360, 361, 362, 195, 363, 364, 0, 196, 365,
	366, 197, 198, 199, 0, 0, 367, 368, 369, 0,
	200, 370, 0, 0, 0, 201, 202, 203, 0, 205,
	206, 207, 204, 0, 208, 0, 209, 210, 0, 0,
	211, 212, 213, 0, 0, 0, 0, 0, 0, 0,
	214, 215, 424, 216, 371, 217, 372, 373, 0, 218,
	0, 219, 0, 220, 0, 0, 221, 222, 0, 223,
	0, 0, 0, 374, 224, 226, 225, 227, 375, 376,
	0, 0, 0, 0, 0, 0, 0, 228, 229, 377,
	378, 379, 0, 230, 0, 231, 0, 0, 0, 0,
	232, 380, 0, 381, 0, 0, 233, 234, 235, 236,
	237, 382, 383, 0, 0, 384, 241, 0, 238, 0,
	0, 239, 385, 240, 386, 387, 388, 389, 390, 0,
	391, 0, 0, 242, 243, 244, 0, 392, 393, 245,
	246, 247, 0, 249, 248, 0, 394, 0, 250, 251,
	0, 0, 252, 253, 0, 0, 254, 0, 255, 257,
	0, 256, 258, 260, 395, 259, 0, 261, 262, 264,
	263, 0, 0, 0, 396, 265, 397, 266, 267, 0,
	268, 0, 0, 269, 0, 0, 270, 398, 0, 271,
	0, 399, 272, 273, 274, 275, 276, 277, 278, 0,
	279, 400, 280, 401, 281, 0, 282, 283, 284, 285,
	286, 402, 287, 288, 0, 289, 290, 291, 292, 293,
	0, 295, 296, 294, 297, 298, 299, 300, 0, 301,
	0, 302, 303, 403, 304, 0, 517, 309, 310, 311,
	312, 0, 314, 315, 404, 313, 316, 317, 0, 318,
	305, 306, 319, 0, 320, 405, 406, 321, 0, 0,
	328, 322, 323, 307, 324, 327, 407, 325, 326, 408,
	0, 329, 0, 330, 331, 332, 333, 334, 335, 336,
	337, 0, 409, 410, 411, 0, 0, 338, 339, 412,
	413, 0, 340, 341, 342, 343, 0, 0, 344, 345,
	346, 347, 0, 348, 0, 414, 349, 350, 351, 415,
	416, 0, 514, 352, 186, 0, 0, 0, 353, 354,
	355, 356, 357, 0, 0, 0, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 382, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 0, 506,
	352, 186, 0, 0, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 0, 0, 0, 189, 190, 0,
	0, 191, 0, 0, 0, 0, 358, 0, 0, 0,
	0, 192, 193, 194, 359, 360, 361, 362, 195, 363,
	364, 0, 196, 365, 366, 197, 198, 199, 0, 0,
	367, 368, 369, 0, 200, 370, 0, 0, 0, 201,
	202, 203, 0, 205, 206, 207, 204, 0, 208, 0,
	209, 210, 0, 0, 211, 212, 213, 0, 0, 0,
	0, 0, 0, 0, 214, 215, 424, 216, 371, 217,
	372, 373, 0, 218, 0, 219, 0, 220, 0, 0,
	221, 222, 0, 223, 0, 0, 0, 374, 224, 226,
	225, 227, 375, 376, 0, 0, 0, 0, 0, 0,
	0, 228, 229, 377, 378, 379, 0, 230, 0, 231,
	0, 0, 0, 0, 232, 380, 0, 381, 0, 0,
	233, 234, 235, 236, 237, 382, 383, 0, 0, 384,
	241, 0, 238, 0, 0, 239, 385, 240, 386, 387,
	388, 389, 390, 0, 391, 0, 0, 242, 243, 244,
	0, 392, 393, 245, 246, 247, 0, 249, 248, 0,
	394, 0, 250, 251, 0, 0, 252, 253, 0, 0,
	254, 0, 255, 257, 0, 256, 258, 260, 395, 259,
	0, 261, 262, 264, 263, 0, 0, 0, 396, 265,
	397, 266, 267, 0, 268, 0, 0, 269, 0, 0,
	270, 398, 0, 271, 0, 399, 272, 273, 274, 275,
	276, 277, 278, 0, 279, 400, 280, 401, 281, 0,
	282, 283, 284, 285, 286, 402, 287, 288, 0, 289,
	290, 291, 292, 293, 0, 295, 296, 294, 297, 298,
	299, 300, 0, 301, 0, 302, 303, 403, 304, 0,
	308, 309, 310, 311, 312, 0, 314, 315, 404, 313,
	316, 317, 0, 318, 305, 306, 319, 0, 320, 405,
	406, 321, 0, 0, 328, 322, 323, 307, 324, 327,
	407, 325, 326, 408, 0, 329, 0, 330, 331, 332,
	333, 334, 335, 336, 337, 0, 409, 410, 411, 0,
	0, 338, 339, 412, 413, 0, 340, 341, 342, 343,
	0, 0, 344, 345, 346, 347, 0, 348, 0, 414,
	349, 350, 351, 415, 416, 0, 456, 352, 186, 0,
	0, 0, 353, 354, 355, 356, 357, 0, 0, 0,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 382, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 259, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 308, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 186, 0, 352, 0, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 0,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 318, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 186, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	2021, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 287, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	186, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 2019, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 275, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 285, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 304, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 186, 0, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 0, 0, 0, 0,
	189, 190, 0, 0, 191, 0, 0, 0, 0, 358,
	0, 0, 0, 0, 192, 193, 194, 359, 360, 361,
	362, 195, 363, 364, 0, 196, 365, 366, 197, 198,
	199, 0, 0, 367, 368, 369, 0, 200, 370, 0,
	0, 0, 201, 202, 203, 0, 205, 206, 207, 204,
	0, 208, 0, 209, 210, 0, 0, 211, 212, 213,
	0, 0, 0, 0, 0, 0, 0, 214, 215, 424,
	216, 371, 217, 372, 373, 0, 218, 0, 219, 0,
	220, 0, 0, 221, 222, 0, 223, 0, 0, 0,
	374, 224, 226, 225, 227, 375, 376, 0, 0, 0,
	0, 0, 0, 0, 228, 229, 377, 378, 379, 0,
	230, 0, 231, 0, 0, 0, 0, 232, 380, 0,
	381, 0, 0, 233, 234, 235, 236, 237, 2008, 383,
	0, 0, 384, 241, 0, 238, 0, 0, 239, 385,
	240, 386, 387, 388, 389, 390, 0, 391, 0, 0,
	242, 243, 244, 0, 392, 393, 245, 246, 247, 0,
	249, 248, 0, 394, 0, 250, 251, 0, 0, 252,
	253, 0, 0, 254, 0, 255, 257, 0, 256, 258,
	260, 395, 259, 0, 261, 262, 264, 263, 0, 0,
	0, 396, 265, 397, 266, 267, 0, 268, 0, 0,
	269, 0, 0, 270, 398, 0, 271, 0, 399, 272,
	273, 274, 275, 276, 277, 278, 0, 279, 400, 280,
	401, 281, 0, 282, 283, 284, 285, 286, 402, 287,
	288, 0, 289, 290, 291, 292, 293, 0, 295, 296,
	294, 297, 298, 299, 300, 0, 301, 0, 302, 303,
	403, 304, 0, 308, 309, 310, 311, 312, 0, 314,
	315, 404, 313, 316, 317, 0, 318, 305, 306, 319,
	0, 320, 405, 406, 321, 0, 0, 328, 322, 323,
	307, 324, 327, 407, 325, 326, 408, 0, 329, 0,
	330, 331, 332, 333, 334, 335, 336, 337, 0, 409,
	410, 411, 0, 0, 338, 339, 412, 413, 0, 340,
	341, 342, 343, 0, 0, 344, 345, 346, 347, 0,
	348, 0, 414, 349, 350, 351, 415, 416, 186, 0,
	352, 0, 0, 0, 0, 353, 354, 355, 356, 357,
	0, 0, 0, 0, 189, 190, 0, 0, 191, 0,
	0, 0, 0, 358, 0, 0, 0, 0, 192, 193,
	194, 359, 360, 361, 362, 195, 363, 364, 0, 196,
	365, 366, 197, 198, 199, 0, 0, 367, 368, 369,
	0, 200, 370, 0, 0, 0, 201, 202, 203, 0,
	205, 206, 207, 204, 0, 208, 0, 209, 210, 0,
	0, 211, 212, 213, 0, 0, 0, 0, 0, 0,
	0, 214, 215, 424, 216, 371, 217, 372, 373, 0,
	218, 0, 219, 0, 220, 0, 0, 221, 222, 0,
	223, 0, 0, 0, 374, 224, 226, 225, 227, 375,
	376, 0, 0, 0, 0, 0, 0, 0, 228, 229,
	377, 378, 379, 0, 230, 0, 231, 0, 0, 0,
	0, 232, 380, 0, 381, 0, 0, 233, 234, 235,
	236, 237, 382, 383, 0, 0, 384, 241, 0, 238,
	0, 0, 239, 385, 240, 386, 387, 388, 389, 390,
	0, 391, 0, 0, 242, 243, 244, 0, 392, 393,
	245, 246, 247, 0, 249, 248, 0, 394, 0, 250,
	251, 0, 0, 252, 253, 0, 0, 254, 0, 255,
	257, 0, 256, 258, 260, 395, 259, 0, 261, 262,
	264, 263, 0, 0, 0, 396, 265, 397, 266, 267,
	0, 268, 0, 0, 269, 0, 0, 270, 398, 0,
	271, 0, 399, 272, 273, 274, 275, 276, 277, 278,
	0, 279, 400, 280, 401, 281, 0, 282, 283, 284,
	285, 286, 402, 287, 288, 0, 289, 290, 291, 292,
	293, 0, 295, 296, 294, 297, 298, 299, 300, 0,
	301, 0, 302, 303, 403, 304, 0, 517, 309, 310,
	311, 312, 0, 314, 315, 404, 313, 316, 317, 0,
	318, 305, 306, 319, 0, 320, 405, 406, 321, 0,
	0, 328, 322, 323, 307, 324, 327, 407, 325, 326,
	408, 0, 329, 0, 330, 331, 332, 333, 334, 335,
	336, 337, 0, 409, 410, 411, 0, 0, 338, 339,
	412, 413, 0, 340, 341, 342, 343, 0, 0, 344,
	345, 346, 347, 0, 348, 0, 414, 349, 350, 351,
	415, 416, 186, 0, 352, 0, 0, 0, 0, 353,
	354, 355, 356, 357, 0, 0, 0, 0, 189, 190,
	0, 0, 191, 0, 0, 0, 0, 358, 0, 1311,
	0, 0, 192, 193, 194, 359, 360, 361, 362, 195,
	363, 364, 0, 196, 365, 366, 197, 198, 199, 0,
	0, 367, 368, 369, 0, 200, 370, 0, 0, 0,
	201, 202, 203, 0, 205, 206, 207, 204, 0, 208,
	0, 209, 210, 0, 0, 211, 212, 213, 0, 0,
	0, 0, 0, 0, 0, 214, 215, 424, 216, 371,
	217, 372, 373, 0, 218, 0, 219, 0, 220, 0,
	0, 221, 222, 0, 223, 0, 0, 0, 374, 224,
	226, 225, 227, 375, 376, 0, 0, 0, 0, 0,
	0, 0, 228, 229, 377, 378, 379, 0, 230, 0,
	231, 0, 0, 0, 0, 232, 380, 0, 381, 0,
	0, 233, 234, 235, 236, 237, 382, 383, 0, 0,
	384, 241, 0, 238, 0, 0, 239, 385, 240, 386,
	387, 388, 389, 390, 0, 391, 0, 0, 242, 243,
	244, 0, 392, 393, 245, 246, 247, 0, 249, 248,
	0, 394, 0, 250, 251, 0, 0, 252, 253, 0,
	0, 254, 0, 255, 257, 0, 256, 258, 260, 395,
	259, 0, 261, 262, 264, 263, 0, 0, 0, 396,
	265, 397, 266, 267, 0, 268, 0, 0, 269, 0,
	0, 270, 398, 0, 271, 0, 399, 272, 273, 274,
	275, 276, 277, 278, 0, 279, 400, 280, 401, 281,
	0, 282, 283, 284, 285, 286, 402, 287, 288, 0,
	289, 290, 291, 292, 293, 0, 295, 296, 294, 297,
	298, 299, 300, 0, 301, 0, 302, 303, 403, 304,
	0, 308, 309, 310, 311, 312, 0, 314, 315, 404,
	313, 316, 317, 0, 0, 305, 306, 319, 0, 320,
	405, 406, 321, 0, 0, 328, 322, 323, 307, 324,
	327, 407, 325, 326, 408, 0, 329, 0, 330, 331,
	332, 333, 334, 335, 336, 337, 0, 409, 410, 411,
	0, 0, 338, 339, 412, 413, 0, 340, 341, 342,
	343, 0, 0, 344, 345, 346, 347, 0, 348, 0,
	414, 349, 350, 351, 415, 416, 186, 0, 352, 0,
	0, 0, 0, 353, 354, 355, 356, 357, 0, 0,
	0, 0, 189, 190, 0, 0, 191, 0, 0, 0,
	0, 358, 0, 0, 0, 0, 192, 193, 194, 359,
	360, 361, 362, 195, 363, 364, 0, 196, 365, 366,
	197, 198, 199, 0, 0, 367, 368, 369, 0, 200,
	370, 0, 0, 0, 201, 202, 203, 0, 205, 206,
	207, 204, 0, 208, 0, 209, 210, 0, 0, 211,
	212, 213, 0, 0, 0, 0, 0, 0, 0, 214,
	215, 424, 216, 371, 217, 372, 373, 0, 218, 0,
	219, 0, 220, 0, 0, 221, 222, 0, 223, 0,
	0, 0, 374, 224, 226, 225, 227, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 228, 229, 377, 378,
	379, 0, 230, 0, 231, 0, 0, 0, 0, 232,
	380, 0, 381, 0, 0, 233, 234, 235, 236, 237,
	382, 383, 0, 0, 384, 241, 0, 238, 0, 0,
	239, 385, 240, 386, 387, 388, 389, 390, 0, 391,
	0, 0, 242, 243, 244, 0, 392, 393, 245, 246,
	247, 0, 249, 248, 0, 394, 0, 250, 251, 0,
	0, 252, 253, 0, 0, 254, 0, 255, 257, 0,
	256, 258, 260, 395, 259, 0, 261, 262, 264, 263,
	0, 0, 0, 396, 265, 397, 266, 267, 0, 268,
	0, 0, 269, 0, 0, 270, 398, 0, 271, 0,
	399, 272, 273, 274, 275, 276, 277, 278, 0, 279,
	400, 280, 401, 281, 0, 282, 283, 284, 285, 286,
	402, 759, 288, 0, 289, 290, 291, 292, 293, 0,
	295, 296, 294, 297, 298, 299, 300, 0, 301, 0,
	302, 303, 403, 304, 0, 308, 309, 310, 311, 312,
	0, 314, 315, 404, 313, 316, 317, 0, 318, 305,
	306, 319, 0, 320, 405, 406, 321, 0, 0, 328,
	322, 323, 307, 324, 327, 407, 325, 326, 408, 0,
	329, 0, 330, 331, 332, 333, 334, 335, 336, 337,
	0, 409, 410, 411, 0, 0, 338, 339, 412, 413,
	0, 340, 341, 342, 343, 0, 0, 344, 345, 346,
	347, 0, 348, 0, 414, 349, 350, 351, 415, 416,
	186, 0, 352, 0, 0, 0, 0, 353, 354, 355,
	356, 357, 0, 0, 0, 0, 189, 190, 0, 0,
	191, 0, 0, 0, 0, 358, 0, 0, 0, 0,
	192, 193, 194, 359, 360, 361, 362, 195, 363, 364,
	0, 196, 365, 366, 197, 198, 199, 0, 0, 367,
	368, 369, 0, 200, 370, 0, 0, 0, 201, 202,
	203, 0, 205, 206, 207, 204, 0, 208, 0, 209,
	210, 0, 0, 211, 212, 213, 0, 0, 0, 0,
	0, 0, 0, 214, 215, 424, 216, 371, 217, 372,
	373, 0, 218, 0, 219, 0, 220, 0, 0, 221,
	222, 0, 223, 0, 0, 0, 374, 224, 226, 225,
	227, 375, 376, 0, 0, 0, 0, 0, 0, 0,
	228, 229, 377, 378, 379, 0, 230, 0, 231, 0,
	0, 0, 0, 232, 380, 0, 381, 0, 0, 233,
	234, 235, 236, 237, 382, 383, 0, 0, 384, 241,
	0, 238, 0, 0, 239, 385, 240, 386, 387, 388,
	389, 390, 0, 391, 0, 0, 242, 243, 244, 0,
	392, 393, 245, 246, 247, 0, 249, 248, 0, 394,
	0, 250, 251, 0, 0, 252, 253, 0, 0, 254,
	0, 255, 257, 0, 256, 258, 260, 395, 259, 0,
	261, 262, 264, 263, 0, 0, 0, 396, 265, 397,
	266, 267, 0, 268, 0, 0, 269, 0, 0, 270,
	398, 0, 271, 0, 399, 272, 273, 274, 0, 276,
	277, 278, 0, 279, 400, 280, 401, 281, 0, 282,
	283, 284, 0, 286, 402, 287, 288, 0, 289, 290,
	291, 292, 293, 0, 295, 296, 294, 297, 298, 299,
	300, 0, 301, 0, 302, 303, 403, 0, 0, 308,
	309, 310, 311, 312, 0, 314, 315, 404, 313, 316,
	317, 0, 318, 305, 306, 319, 0, 320, 405, 406,
	321, 0, 0, 328, 322, 323, 307, 324, 327, 407,
	325, 326, 408, 0, 329, 0, 330, 331, 332, 333,
	334, 335, 336, 337, 0, 409, 410, 411, 0, 0,
	338, 339, 412, 413, 0, 340, 341, 342, 343, 0,
	0, 344, 345, 346, 347, 0, 348, 0, 414, 349,
	350, 351, 415, 416, 0, 0, 352, 0, 0, 0,
	0, 353, 354, 355, 356, 357, 1088, 1089, 0, 1118,
	1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0, 1106,
	0, 0, 0, 1121, 0, 0, 0, 0, 0, 0,
	1091, 0, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 1088,
	1089, 1110, 1118, 1119, 1120, 1128, 1129, 1130, 1107, 0,
	0, 0, 1106, 0, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 1091, 0, 0, 1132, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 1110, 0, 1113, 1114, 1115, 1116,
	0, 1107, 0, 0, 0, 1096, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1131, 0, 0, 0, 1113,
	1114, 1115, 1116, 0, 0, 0, 0, 0, 1096, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 1125,
	1133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 1131, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1123, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 1126,
	1106, 0, 0, 0, 1121, 1105, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 1124, 0, 0, 1102,
	1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100, 1092,
	1093, 1094, 1095, 1097, 1098, 0, 1090, 0, 0, 0,
	0, 0, 1110, 1956, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 1102, 1103, 1109, 1108, 1104, 1127, 0, 1101,
	1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 1955, 1113, 1114, 1115,
	1116, 0, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 0, 1125, 1133, 1121,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1123, 0, 0, 1110, 0, 0,
	0, 1111, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1131, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 1123,
	1106, 0, 0, 0, 1121, 0, 1111, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 1090, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 1117,
	0, 0, 0, 0, 1907, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 1126, 0, 0, 0, 1096, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 0, 1125, 1133, 1121,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1123, 0, 0, 1110, 0, 0,
	0, 1111, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 0, 2594, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1131, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 1123,
	1106, 0, 0, 0, 1121, 0, 1111, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 1090, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 1117,
	2544, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 1126, 0, 0, 0, 1096, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 0, 1125, 1133, 1121,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1123, 0, 0, 1110, 0, 0,
	0, 1111, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 0, 2498, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1131, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 1123,
	1106, 0, 0, 0, 1121, 0, 1111, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 1090, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 1117,
	2468, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 1126, 0, 0, 0, 1096, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 0, 1125, 1133, 1121,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1123, 0, 0, 1110, 0, 0,
	0, 1111, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 0, 2463, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1131, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 1123,
	1106, 0, 0, 0, 1121, 0, 1111, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 1090, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 1117,
	2459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 1126, 0, 0, 0, 1096, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 0, 1125, 1133, 1121,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1123, 0, 0, 1110, 0, 0,
	0, 1111, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 0, 2389, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1131, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 1123,
	1106, 0, 0, 0, 1121, 0, 1111, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 1090, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 1117,
	2355, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 1126, 0, 0, 0, 1096, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 0, 1125, 1133, 1121,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1123, 0, 0, 1110, 0, 0,
	0, 1111, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 0, 2354, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1131, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 1123,
	1106, 0, 0, 0, 1121, 0, 1111, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 1090, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 1117,
	2319, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 1126, 0, 0, 0, 1096, 0, 1105, 0,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 0, 1125, 1133, 1121,
	0, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1123, 0, 0, 1110, 0, 0,
	0, 1111, 1124, 0, 1107, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 0, 2157, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 1125, 1133, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 1131, 0, 1105, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 0, 1123,
	1106, 0, 0, 0, 1121, 0, 1111, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 0, 0, 1090, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 1124, 0, 1107,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 0, 0, 0, 1117,
	2133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 0, 1126, 0, 0, 0, 1096, 0, 1105, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 1111, 1124, 0, 0, 1102, 1103, 1109, 1108, 1104,
	1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 0, 1560, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 1089, 0, 1118,
	1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0, 1106,
	0, 0, 0, 1121, 1117, 0, 0, 0, 0, 0,
	1091, 0, 0, 1132, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 1126, 0, 0,
	0, 1110, 0, 1105, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 1114, 1115, 1116,
	0, 0, 0, 0, 0, 1096, 2657, 1124, 0, 0,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 1125, 1133, 1877, 0,
	0, 0, 0, 0, 1088, 1089, 0, 1118, 1119, 1120,
	1128, 1129, 1130, 0, 0, 1131, 0, 1106, 0, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 1091, 0,
	0, 1132, 0, 1123, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 1110,
	0, 0, 0, 0, 0, 0, 1107, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 1114, 1115, 1116, 1112, 0,
	0, 0, 0, 1096, 0, 1947, 0, 0, 1946, 0,
	0, 0, 0, 0, 0, 0, 1126, 0, 0, 0,
	0, 0, 1105, 0, 1125, 1133, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1131, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1124, 0, 0, 1102,
	1103, 1109, 1108, 1104, 1127, 1122, 1101, 1099, 1100, 1092,
	1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128,
	1129, 1130, 0, 0, 0, 0, 1106, 0, 0, 0,
	1121, 1117, 0, 0, 0, 1850, 0, 1091, 0, 0,
	1132, 0, 0, 0, 0, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 1126, 0, 0, 1658, 1110, 0,
	1105, 0, 0, 1088, 1089, 1107, 1118, 1119, 1120, 1128,
	1129, 1130, 0, 0, 0, 0, 1106, 0, 0, 0,
	1121, 0, 0, 0, 1657, 0, 0, 1091, 0, 0,
	1132, 0, 1851, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 1113, 1114, 1115, 1116, 0, 1110, 0,
	0, 0, 1096, 0, 1124, 1107, 0, 1102, 1103, 1109,
	1108, 1104, 1127, 0, 1101, 1099, 1100, 1092, 1093, 1094,
	1095, 1097, 1098, 1125, 1133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 1114, 1115, 1116, 0, 0, 0,
	1123, 0, 1096, 0, 0, 0, 0, 1111, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1125, 1133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 0, 0, 0, 0, 0,
	0, 0, 1131, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 1111, 0, 0,
	1117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 1126, 0, 0, 0, 0, 0, 1105,
	0, 0, 1088, 1089, 0, 1118, 1119, 1120, 1128, 1129,
	1130, 0, 0, 0, 0, 1106, 0, 0, 0, 1121,
	1117, 0, 0, 0, 0, 0, 1091, 0, 0, 1132,
	0, 0, 0, 0, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1090, 0, 1126, 0, 0, 0, 1110, 0, 1105,
	0, 0, 0, 1124, 1107, 0, 1102, 1103, 1109, 1108,
	1104, 1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095,
	1097, 1098, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0,
	0, 1096, 0, 1124, 0, 0, 1102, 1103, 1109, 1108,
	1104, 1127, 0, 1101, 1099, 1100, 1092, 1093, 1094, 1095,
	1097, 1098, 1125, 1133, 0, 0, 0, 0, 0, 0,
	1088, 1089, 0, 1118, 1119, 1120, 1128, 1129, 1130, 0,
	0, 1131, 0, 1106, 0, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 1091, 0, 0, 1132, 0, 1123,
	0, 0, 0, 0, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	0, 0, 1107, 1122, 616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1117,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1114, 1115, 1116, 1112, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1126, 0, 0, 0, 0, 0, 1105, 0,
	1125, 1133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1124, 0, 0, 1102, 1103, 1109, 1108, 1104,
	1127, 1122, 1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 1089, 1112, 1118, 1119, 1120, 1128, 1129, 1130, 0,
	0, 0, 0, 1106, 0, 0, 0, 1121, 0, 0,
	1126, 0, 0, 0, 1091, 0, 1105, 1132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2137, 1090,
	0, 0, 0, 0, 0, 1110, 0, 0, 0, 0,
	1088, 1089, 1107, 1118, 1119, 1120, 1128, 1129, 1130, 0,
	0, 0, 0, 1106, 0, 0, 0, 1121, 0, 0,
	0, 1948, 0, 0, 1091, 0, 0, 1132, 0, 0,
	1124, 0, 0, 1102, 1103, 1109, 1108, 1104, 1127, 0,
	1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 1090,
	1113, 1114, 1115, 1116, 0, 1110, 0, 0, 0, 1096,
	0, 0, 1107, 0, 1953, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1125, 1133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 1114, 1115, 1116, 0, 0, 0, 1123, 0, 1096,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1125, 1133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 0, 1131,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 1117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 1122, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 0, 0, 0, 0, 1105, 0, 0, 1088,
	1089, 0, 1118, 1119, 1120, 1128, 1129, 1130, 0, 0,
	0, 0, 1106, 0, 0, 0, 1121, 1117, 0, 0,
	0, 0, 0, 1091, 0, 0, 1132, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1090, 0,
	1126, 0, 0, 0, 1110, 0, 1105, 0, 0, 0,
	1124, 1107, 0, 1102, 1103, 1109, 1108, 1104, 1127, 0,
	1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	1114, 1115, 1116, 0, 0, 0, 0, 0, 1096, 0,
	1124, 0, 0, 1102, 1103, 1109, 1108, 1104, 1127, 0,
	1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 1125,
	1133, 0, 0, 0, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 0, 0, 1131, 0,
	1106, 0, 0, 0, 1121, 0, 0, 0, 1906, 0,
	0, 1091, 0, 0, 1132, 0, 1123, 0, 0, 0,
	0, 0, 0, 1111, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 0,
	0, 0, 1110, 0, 0, 0, 0, 0, 0, 1107,
	1122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1913, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1117, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 1114, 1115,
	1116, 1112, 0, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1126,
	0, 0, 0, 0, 0, 1105, 0, 1125, 1133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1124,
	0, 0, 1102, 1103, 1109, 1108, 1104, 1127, 1122, 1101,
	1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 1089, 0, 1118,
	1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0, 1106,
	0, 0, 0, 1121, 1117, 0, 0, 0, 0, 0,
	1091, 0, 0, 1132, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 1126, 0, 0,
	0, 1110, 0, 1105, 0, 0, 1088, 1089, 1107, 1118,
	1119, 1120, 1128, 1129, 1130, 0, 0, 0, 0, 1106,
	0, 0, 0, 1121, 0, 0, 0, 0, 0, 0,
	1091, 0, 0, 1132, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1090, 1113, 1114, 1115, 1116,
	0, 1110, 0, 0, 0, 1096, 0, 1124, 1107, 0,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 1125, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 1114, 1115, 1116,
	0, 0, 0, 1123, 0, 1096, 0, 0, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1125, 1133, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 1131, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1123, 0, 0, 0, 0, 0, 0,
	1111, 0, 0, 1117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 1089, 0,
	1118, 1119, 1120, 1128, 1129, 1130, 1126, 0, 0, 0,
	1106, 0, 1105, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 0, 0, 1132, 0, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 1112, 0,
	1088, 1089, 1110, 1118, 1119, 1120, 1128, 1129, 1130, 1107,
	0, 0, 0, 1106, 0, 0, 1126, 0, 0, 0,
	0, 0, 1105, 0, 1091, 0, 1124, 1132, 0, 1102,
	1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100, 1092,
	1093, 1094, 1095, 1097, 1098, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 1110, 0, 1113, 1114, 1115,
	1116, 0, 1107, 0, 0, 0, 1096, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1124, 1125, 1133, 1102,
	1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100, 1092,
	1093, 1094, 1095, 1097, 1098, 0, 1131, 0, 0, 0,
	1113, 1114, 1115, 1116, 0, 0, 0, 0, 0, 1096,
	0, 0, 0, 0, 1123, 0, 0, 0, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 0, 0,
	1125, 1133, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1123, 0, 0,
	0, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1117, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1126, 0, 0,
	0, 0, 0, 1105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1117, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1126, 0, 1356, 0, 0, 0, 1105, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1124, 0, 0,
	1102, 1103, 1109, 1108, 1104, 1127, 0, 1101, 1099, 1100,
	1092, 1093, 1094, 1095, 1097, 1098, 1364, 1353, 1383, 1342,
	1374, 1373, 0, 0, 1344, 1343, 0, 0, 0, 0,
	0, 1385, 1384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1124, 0, 0, 1102, 1103, 1109, 1108, 1104, 1127, 0,
	1101, 1099, 1100, 1092, 1093, 1094, 1095, 1097, 1098, 1379,
	0, 1371, 1370, 0, 0, 0, 0, 0, 0, 0,
	0, 1369, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1368, 1366, 1367, 0, 0, 0,
	0, 0, 0, 0, 555, 0, 581, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1352, 0, 0, 0, 560, 0, 0, 1357, 1355, 1358,
	1359, 1360, 1361, 1362, 0, 1382, 0, 558, 0, 0,
	0, 0, 1346, 1345, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 559,
	0, 0, 0, 1356, 561, 0, 0, 0, 0, 1348,
	0, 0, 567, 568, 0, 0, 0, 577, 0, 0,
	0, 1372, 0, 0, 0, 1354, 0, 0, 0, 0,
	0, 582, 562, 0, 0, 0, 0, 1364, 1353, 1383,
	1342, 1374, 1373, 0, 0, 1344, 1343, 0, 0, 0,
	0, 0, 1385, 1384, 580, 0, 1365, 0, 0, 0,
	1485, 1483, 1484, 1487, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 563,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1349,
	1379, 0, 1371, 1370, 0, 0, 564, 565, 0, 0,
	1363, 1350, 1369, 0, 0, 0, 0, 0, 0, 0,
	0, 1387, 0, 0, 571, 0, 0, 0, 0, 566,
	573, 0, 0, 0, 1347, 1368, 1366, 1367, 1380, 1381,
	0, 0, 570, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 583, 0, 0, 0, 0, 0,
	1351, 1352, 0, 0, 0, 1386, 0, 0, 1357, 1355,
	1358, 1359, 1360, 1361, 1362, 0, 1382, 0, 0, 0,
	0, 0, 0, 1346, 1345, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 569, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1348, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1372, 0, 0, 0, 1354, 0, 0, 0,
	0, 0, 0, 0, 0, 557, 574, 584, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1365, 0, 0,
	0, 0, 575, 0, 0, 0, 579, 0, 0, 0,
	0, 585, 0, 0, 0, 0, 572, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1349, 0, 578, 0, 0, 0, 0, 0, 0, 0,
	0, 1363, 1350, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1387, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1347, 0, 0, 0, 1380,
	1381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1351, 0, 0, 0, 0, 1386,
}
var sqlPact = [...]int{

	259, -1000, 0, -1000, -1000, -1000, 161, -1000, -1000, -1000,
	-1000, 158, 157, 156, -1000, 155, 154, 153, 151, 150,
	149, 148, 146, 145, 144, 141, -1000, 139, -1000, -1000,
	-1000, -1000, 137, 132, 131, -1000, 130, 1283, 23507, 129,
	128, 1507, -1000, 36998, 127, -1000, 1125, 27303, 957, 1224,
	-1000, 126, 1203, 36654, 3379, 1512, 1162, 1743, 36307, 23160,
	1729, 1364, 35960, -1000, -1000, 35613, 125, 124, 118, 116,
	110, -1000, -1000, 35266, 107, 106, 104, 100, 99, 98,
	97, 96, 94, 93, 92, 91, 88, 87, -1000, 85,
	84, 83, -1000, 44822, 82, 80, 78, 1149, 77, 76,
	71, 65, -1000, -1000, 905, 61, 60, 56, 55, 54,
	53, 112, 52, 47, 38, 33, -1000, 935, 339, 2731,
	9430, 1095, 1093, 1064, 1049, 1058, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 39062, 36998, 32, -59, 26, -1000, 2070, 672, 19279,
	259, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 26956, 26609, 22813, 34919, 34572, 6846, 800, -1000,
	-8, 24883, 36998, -1000, 43, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	15037, 14652, 546, 43, -1000, -1000, -1000, 34225, 33878, 22455,
	33531, 1568, 33184, -1000, -1000, 32837, -1000, -1000, 1850, 1799,
	1769, 26262, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	32493, 32146, 31799, 31452, 22097, 508, -1000, -1000, -1000, 17883,
	-1000, -1000, -1000, -1000, 25, -1000, 24, 23, -1000, 22,
	21, 20, 17, 16, 15, -1000, 13, 12, -1000, 8,
	7, -1000, 6, 2, 1076, 1279, 1007, 31105, 884, 1376,
	-1000, -1000, -2, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 36998, -1000, 16108, -1000, 506, -1000, 1701, -1000, 16108,
	-1000, 1353, -1000, -1000, -1000, -1000, -1000, 36998, -1000, -1000,
	-1000, -1000, -1000, -1000, 2305, 1254, 505, 30758, -1000, 1679,
	-1000, 618, 784, -1000, -1000, -1000, 10144, 168, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2203, 21739, 1360,
	2120, 1848, 2300, 1514, 1842, 1832, 1806, 1800, 1787, 2298,
	953, 2294, 1834, 1087, 2293, 1767, 1356, 710, 2289, 1694,
	1693, -1000, -1000, -1000, -1000, 964, -1000, -1000, -1000, 28679,
	-1000, -1000, -1000, -1000, -1000, -1000, 844, 929, -1000, -1000,
	-1000, -1000, -1000, -1000, 935, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1855, 2073, 2073, 2073, 2149, 296, 290, -1000,
	112, -1000, 1485, -1000, 1243, -1000, -1000, -1000, 44076, -1000,
	-1000, 16108, 16108, 16108, 16108, 16108, 1214, -1000, 534, -1000,
	503, 501, 7960, -1000, -1000, 2236, -1000, -1000, -1000, 312,
	-1000, -1000, 16108, 43, -1000, -1000, -1000, -1000, 500, 2284,
	-1000, 670, -1000, -1000, -1000, 625, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1724, 494, 492, 489, -1000,
	488, -1000, -1000, 487, 483, 482, 479, 477, 476, 475,
	472, 471, 470, 469, 468, 467, 466, 465, 1102, -1000,
	661, -1000, -1000, 661, 661, -1000, 447, 447, 449, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 447, -1000, -1000,
	-1000, 591, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 462, 1326, -1000, -1000, 1326, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 799, 38374, -11, 36998,
	-1000, 461, -11, -1000, -1000, 460, -1000, 10501, 10501, -1000,
	-1000, -1000, 16108, -1000, 2467, -1000, 3250, -221, 301, 588,
	-1000, 18232, 21025, -1000, -1000, 1040, 1936, 687, -1000, 1017,
	1932, 377, -1000, 641, 1931, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1151, -1000, 1312, 1930, -121,
	1849, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 23851, 24883, -8,
	-9, -1000, -1000, -1000, 6490, 44076, -1000, 44076, -1000, 870,
	19977, 43, -1000, -1000, -1000, -1000, 458, 1433, 2612, 1418,
	-1000, 634, 1417, -1000, 317, -1000, 30411, 634, 1415, -1000,
	-1000, -1000, 28679, -1000, 36998, -1000, 36998, -1000, 896, -1000,
	38718, 120, 1926, -1000, -1000, 120, 1920, -1000, 119, 1917,
	-1000, -1000, 1367, 1913, -1000, -48, 1898, -1000, -1000, -1000,
	16108, -45, -1000, -1000, -1000, 672, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 30064, 24195, 1278, 603, 44076, 2205, 44879, 23851, 44076,
	24195, -1000, -1000, 36998, -1000, 16108, -1000, 2195, 1419, -13,
	-1000, -1000, -1000, -1000, -1000, 1473, 1533, 768, 1005, 10144,
	10144, 2006, -1000, 113, 6846, -1000, -1000, -1000, -1000, 29717,
	-1000, -1000, -1000, 1211, 36998, -1000, -1000, 1723, -1000, 24195,
	36998, -1000, 36998, -1000, 36998, -1000, 36998, -1000, 36998, -1000,
	-1000, -1000, -1000, -1000, 692, -1000, 1720, -1000, -1000, 36998,
	-1000, 1468, -1000, -1000, -1000, 29373, 29026, -1000, 998, 838,
	-1000, -1000, 121, -1000, 36998, 2093, 617, -1000, 1855, 1477,
	1708, 706, 1351, 1569, 14267, 1524, 16108, 112, -1000, -1000,
	112, 112, 9045, -1000, -1000, -1000, 36998, -1000, 44688, 44879,
	6846, 818, 16108, 16108, 16108, 16108, 16108, 16108, 16108, 16108,
	16108, 16108, 16108, 16108, 16108, 16108, 16108, 16108, 16108, 16108,
	16108, 16108, 16108, 16108, 16108, 16108, 16108, 16108, 16108, 16108,
	16108, 16108, 16108, 16108, 1370, 16108, 795, 16108, 16108, 16108,
	16108, 2651, 1160, 356, 1196, -1000, 2246, 2246, 2246, 44347,
	44347, 386, 534, -1000, 16108, -1000, 42, 16108, 290, 41942,
	-10, 7589, -1000, -1000, -1000, -1000, 13910, 656, 44076, 43,
	7204, -1000, 2273, 925, 1781, 1610, 452, 567, 565, 561,
	553, 16108, 16108, 13553, 13168, 12783, 16822, 12398, 16108, 8331,
	16108, 16108, 16108, 16108, 12013, 11628, -1000, 451, -1000, -1000,
	-1000, -1000, 2236, -1000, -1000, 2272, -1000, 815, 810, 2236,
	-1000, -13, -1000, 38374, -1000, 36998, -11, 2182, 36998, 16108,
	79, -1000, 42773, -1000, 79, -47, 44076, 1536, 1529, 19628,
	1456, 1247, 1247, 1247, -1000, 450, 525, 588, 5767, 11243,
	-1000, 27647, 1269, 188, 289, 5226, 2467, -1000, 36998, -33,
	1080, -1000, 25915, 2037, 2030, 2047, 28679, 2164, 42, 1825,
	1687, -1000, 6846, 790, 28679, 1142, 23851, 2058, 788, 2163,
	42, 1818, 1686, 787, 36998, 6846, 2056, 570, -1000, 36998,
	-1000, -1000, -1000, 1685, -52, -1000, -1000, 25571, 2179, 1893,
	-1000, 2612, -1000, 36998, 2148, 923, 917, 923, 1599, 923,
	932, -1000, 1889, -1000, 1132, -1000, 1886, 2177, 36998, 1350,
	1413, -1000, -1000, 820, 1885, 651, 269, 2175, 269, 20327,
	-1000, 36998, -1000, 36998, -1000, -1000, 36998, -1000, 36998, -1000,
	36998, 36998, -1000, 36998, 23851, 23851, -54, 3601, 25227, 783,
	-1000, 688, 25571, 611, -62, -1000, 874, -1000, -1000, -1000,
	-1000, 221, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 449, 1102,
	447, 447, 447, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	591, -1000, -1000, 661, 661, 661, -1000, -1000, -63, 1681,
	593, -68, 723, -13, -1000, 1326, -1000, 1246, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2281, -1000, 2253, -1000, -1000, 2271, -16, -1000, -16,
	-1000, 6846, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36998,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 577, -1000,
	-1000, -1000, -1000, -1000, -1000, 36998, 36998, 36998, -1000, 28679,
	638, 1712, -1000, 2094, 1477, 1708, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 44076, -1000, 392, -1000, -1000, 44076,
	971, 1550, -1000, 1550, -26, -1000, 42713, 1521, 36998, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	615, 437, 437, 857, 857, 857, 857, 2204, 1261, 218,
	1109, 293, 293, 293, 293, 293, 293, 293, 293, 415,
	335, 335, 415, 415, 415, 415, 415, 293, 293, 293,
	44347, 44136, 3817, 16108, 16108, 781, 1122, 356, 3817, 16108,
	3817, 3817, 3817, 3817, -1000, 1696, -1000, -1000, -1000, -1000,
	1678, 446, 16822, 16822, -1000, -1000, -1000, 7960, 16108, -1000,
	-1000, -1000, -1000, 445, 16108, -1000, 42107, -227, 279, -96,
	-1000, 16108, 522, -97, -1000, 900, -1000, 16108, -1000, -25,
	16108, 16108, 16108, 276, -1000, 274, -1000, 776, -1000, 771,
	770, 754, -1000, 444, 1237, 440, 436, 16108, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 43847, 40077, 271, -1000,
	1664, -96, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 267,
	-1000, 266, -1000, 43699, -96, 262, 4794, -1000, 16822, 16822,
	16822, 7960, 435, 260, -1000, 42484, -1000, 43470, 10858, 10858,
	10858, 256, 43410, 16108, -96, 39809, 39756, 4645, -69, -71,
	-1000, -82, -1000, 2236, -85, 255, 614, 609, 254, -1000,
	-1000, 428, -90, -91, 651, 10501, 18930, 6846, -1000, 651,
	-1000, 16108, 19628, 19628, 1496, 1528, 19628, -1000, -1000, -1000,
	-1000, 27647, 497, 588, 27647, -1000, 2236, 1518, 253, -1000,
	-1000, -1000, 36998, 427, -1000, 588, 251, 1121, 36998, 36998,
	36998, -1000, -1000, 1412, 38030, 1411, 44879, 36998, -1000, 426,
	425, 1509, 1508, 36998, 36998, 37686, 37342, 36998, 1000, 42,
	-1000, 2053, 422, -1000, 36998, 1011, 23851, 636, 608, 36998,
	42, -1000, 2052, 413, 6846, 1002, -1000, 605, 1586, 1383,
	-1000, 865, 1659, 36998, 244, -98, -27, 44879, -1000, -1000,
	-1000, -1000, -1000, 36998, 474, 36998, 42, 36998, -1000, -1000,
	36998, -1000, -1000, 2268, -1000, 923, -1000, -1000, -1000, -1000,
	-1000, -1000, 923, 36998, 23851, 23851, 42, 36998, 1883, 1949,
	556, 36998, 1569, 16108, 1043, -1000, 18581, 677, 36998, 983,
	72, -1000, -1000, -1000, 581, 36998, -1000, -1000, 120, 120,
	-1000, 119, 1367, -1000, -48, -1000, -1000, -1000, 36998, 23851,
	-101, -1000, 695, 693, 689, -1000, 44879, -1000, 533, 732,
	-1000, 2267, 632, 36998, 10144, 10144, -1000, 1540, -1000, -1000,
	979, -1000, 1068, -1000, -1000, -1000, -1000, 10144, -1000, -34,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1293, 1302, -1000,
	-1000, -1000, 971, -1000, 16108, -1000, -1000, -1000, 9045, -1000,
	-1000, -1000, 36998, -185, 16108, 3817, 3817, 16108, 16822, 16822,
	-1000, 3817, -1000, -1000, -1000, -1000, -1000, 1649, 412, 16108,
	44879, 4477, 4104, -107, 415, 16108, -30, -1000, 16108, -1000,
	41817, -1000, -1000, 532, 1946, -1000, 16108, 43150, 242, 9787,
	-1000, 43002, -50, -50, -1000, 2279, 1444, 1313, 1054, 926,
	2266, -1000, 20676, 652, 1286, 41652, 44688, 44879, -1000, 16108,
	-1000, -1000, 1647, 16108, -1000, 44688, 44879, 16822, 16822, 16822,
	16822, 16822, 16822, 16822, 16822, 16822, 16822, 16822, 16822, 16822,
	16822, 16822, 16822, 16822, 16822, 16822, 1438, 16822, 2237, 2237,
	2237, -31, 16108, -1000, 1660, 1647, 16108, 16108, 44879, 241,
	239, 238, -1000, 16108, -96, 16108, 16108, 16108, -1000, -1000,
	-1000, 236, -1000, 2236, -1000, -1000, -1000, -1000, 611, -1000,
	-1000, 1603, -1000, -114, -1000, 2467, -1000, 1603, 44076, -1000,
	1496, -1000, 399, 16108, 19628, -1000, 521, -1000, -108, -1000,
	27647, -1000, 515, -224, -1000, 575, -1000, 588, 398, 36998,
	27647, -1000, -1000, -1000, 753, 751, 1878, -1000, 1409, -1000,
	673, -1000, 1321, 16108, 17534, 397, 396, 1117, -1000, 1877,
	1367, 1871, 1367, -1000, -33, 1038, -1000, 601, 16108, -1000,
	750, -1000, 1126, 21381, -1000, -1000, 596, 16108, -1000, 749,
	21381, 632, 1642, 846, -1000, 858, -1000, 1541, -1000, 25571,
	395, 36998, 389, -1000, 388, -1000, -1000, -1000, 2612, -1000,
	634, -1000, 387, 36998, 1498, 556, 24539, -1000, 634, 983,
	-1000, 44076, -1000, 983, 8688, 2050, -109, -1000, -1000, -1000,
	651, 20327, 19628, 16108, -115, -1000, -1000, -1000, -1000, -34,
	2010, 2010, -1000, 2245, -1000, 514, 233, -1000, 28335, -34,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 36998, 1234, 6846,
	36998, 36998, 36998, 1296, 41527, -1000, 2082, 6846, 2191, 3817,
	4069, 2769, 16108, 44879, 44400, -117, 16108, 16108, -1000, 231,
	16108, 512, 44076, -1000, -1000, -1000, 44076, 16108, 2278, 16108,
	228, 227, 223, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 219, -1000, -1000, 39406, 16108, 217, -1000, 216, 215,
	44076, 1660, 44076, -1000, -1000, 621, 621, 898, 898, 898,
	898, 2237, 370, 424, 357, 707, 707, 707, 1206, 813,
	813, 707, 707, 707, 1626, 1497, 382, 2683, 16108, 206,
	-1000, -1000, 44076, 44076, 199, -1000, -1000, -1000, -96, 3780,
	41362, 41237, -1000, 198, 192, 1600, 2145, -1000, 19628, 1600,
	-1000, 36998, 44076, -1000, -221, -1000, 2236, -1000, -1000, 1518,
	-1000, 6133, 27647, 36998, -118, -1000, 36998, 36998, 36998, 1869,
	-1000, 2862, -1000, 41072, -124, -1000, 330, 2110, 16108, -1000,
	-1000, 379, 17534, 36998, -1000, 1511, 1608, 715, 36998, -1000,
	36998, -1000, 36998, 36998, 36998, 21381, -125, 36998, 23851, -1000,
	375, 43, 21381, -126, 6846, -1000, -1000, 23851, 807, -1000,
	1199, 1578, -1000, 17534, 373, 36998, 25571, 2172, -1000, -1000,
	17534, 1340, 1502, 556, 24539, -1000, 820, -1000, -1000, -37,
	-1000, 358, 42, 983, -1000, -38, 44076, 564, 1991, -1000,
	1986, 498, -1000, -1000, -39, 372, -1000, 560, 557, -1000,
	-43, -1000, 552, -1000, -1000, -1000, 1192, 1192, -1000, -1000,
	-1000, 2082, 16108, 16108, 44400, -127, -1000, 3817, 3817, -1000,
	40947, -1000, 44076, -1000, 43002, -1000, -1000, -1000, -1000, 1195,
	-1000, 40782, -1000, -1000, -1000, -1000, 16822, 1624, 371, 44879,
	40657, -1000, -1000, 16108, -1000, -1000, -1000, -1000, 647, 16108,
	16108, 2467, 647, -132, 588, -1000, -1000, -1000, 2236, -1000,
	-133, -1000, -1000, -1000, -1000, 36998, -1000, 36998, -1000, 6846,
	36998, 1657, 1393, -1000, -1000, 1501, 367, 16822, 36998, -1000,
	1096, 17534, 2082, 43, 6846, 2082, 40492, 7204, -140, -141,
	1392, -1000, 1390, 16108, -1000, 44879, 1367, 1367, -1000, 748,
	745, -1000, 741, -1000, -1000, 16108, -1000, 727, -1000, -48,
	21381, -1000, -1000, 2142, 1198, -142, 17534, -143, 190, 42,
	-148, 36998, -1000, 556, 24539, -1000, 1949, 1966, 36998, 2032,
	-1000, -1000, 356, 355, 354, -1000, 27991, 27991, 23851, 23851,
	1234, -1000, 36998, -1000, -1000, -1000, 3817, 3817, -1000, -1000,
	189, 1286, 2138, -1000, 4626, 16822, 44879, -149, -1000, 40367,
	-1000, 36998, 44076, -96, -1000, -1000, 27647, 438, -1000, -1000,
	1184, -1000, -1000, 36998, 1399, -1000, -1000, 16108, 2683, 344,
	1541, 343, -1000, -1000, -1000, -1000, -1000, -1000, 2110, -25,
	-1000, 1062, -1000, -1000, 44076, 2104, -1000, -1000, 36998, 36998,
	341, -50, 338, -1000, 1349, 36998, 1096, -150, -1000, 1541,
	-1000, 1096, 325, 24539, -1000, 1498, 831, -156, 36998, -1000,
	23851, 23851, -1000, -157, -1000, -1000, -1000, -162, -1000, 1072,
	16108, 4626, -164, -1000, -1000, -80, -1000, 2169, -1000, -1000,
	-1000, -1000, 1867, 40202, 1450, 36998, -1000, 36998, 2082, 187,
	36998, 686, 6846, -1000, -1000, 16108, 179, 16108, 324, 323,
	320, 1541, 1096, -1000, 1541, 17534, -1000, 1502, 888, -1000,
	651, -1000, -165, -171, -1000, -1000, 178, 16465, 16465, -96,
	-1000, 36998, 319, 1801, -1000, 1325, 1114, 177, -172, -1000,
	-1000, 317, -1000, 16108, -1000, -178, 2278, -183, 36998, 36998,
	36998, -1000, 1541, -1000, -188, -1000, 20327, -1000, 632, 632,
	-1000, -1000, -1000, 17178, 1373, 942, 42336, -1000, -1000, -1000,
	36998, -1000, 1335, 1327, 938, -1000, -1000, -1000, -1000, -1000,
	1450, 44076, -1000, -1000, -189, -191, -194, -1000, 1096, -173,
	-1000, -1000, 2210, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1975, -1000, 705, 1388, 1388, 1325, 316, 315, 1213, 1541,
	-1000, 15751, -1000, 2221, -1000, -1000, 1520, -1000, -1000, 1192,
	1192, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 174,
	676, 171, 668, -1000, 313, -1000, 1476, -44, 15394, 823,
	273, -155, -1000, -197, -1000, 44076, -1000, 302, -1000, 15394,
	1192, -1000, 15394, 15394, -202, -1000, -1000, -203, -1000, -64,
	1192, -163, -1000, -1000, 1192, -1000,
}
var sqlPgo = [...]int{

	0, 2756, 2755, 1767, 2754, 2245, 2750, 2749, 2746, 2744,
	2239, 2743, 2741, 2739, 2732, 2731, 2730, 2729, 2718, 2716,
	2714, 2708, 2707, 2704, 2701, 2700, 2695, 2692, 2233, 2691,
	2220, 2689, 2683, 2679, 2674, 2671, 42, 2669, 2667, 2666,
	2175, 2662, 2659, 2658, 2656, 2167, 2654, 2652, 2165, 2649,
	2645, 2080, 2644, 2641, 2639, 2065, 2635, 2048, 2634, 78,
	115, 2038, 2632, 2626, 2033, 2021, 2019, 2625, 2013, 2620,
	2619, 1952, 1950, 2613, 40, 2607, 2606, 2604, 1841, 1832,
	2601, 2600, 2599, 154, 2596, 1824, 2595, 2590, 2588, 2587,
	2586, 2584, 2583, 2580, 2577, 2575, 2574, 2571, 2570, 2567,
	2566, 2565, 2564, 2562, 2560, 161, 2559, 2554, 1822, 1817,
	2553, 2552, 33, 30, 17, 64, 187, 152, 3466, 141,
	2551, 2548, 2546, 2545, 2544, 2542, 34, 104, 94, 2541,
	165, 2540, 2539, 55, 50, 23, 19, 92, 95, 2536,
	2528, 2309, 36, 2526, 2525, 136, 2521, 81, 28, 2511,
	159, 149, 72, 129, 2519, 2518, 2517, 58, 119, 10,
	8, 5, 1, 69, 4, 2, 2514, 3, 11, 2507,
	2506, 20, 84, 35, 2504, 27, 18, 2500, 2499, 133,
	2489, 67, 113, 1743, 156, 125, 375, 102, 2479, 77,
	21, 65, 2476, 2475, 162, 51, 79, 146, 111, 2474,
	108, 2467, 68, 126, 160, 127, 82, 131, 134, 2466,
	2462, 2460, 107, 2458, 118, 112, 2455, 2446, 83, 2444,
	122, 137, 2443, 138, 106, 2442, 2440, 90, 2438, 123,
	2436, 2434, 158, 147, 110, 16, 61, 73, 13, 1713,
	1712, 139, 93, 56, 62, 2433, 763, 1250, 210, 43,
	2431, 89, 70, 47, 57, 87, 153, 38, 2429, 2426,
	135, 2424, 2423, 2422, 2417, 2416, 105, 2414, 2412, 2411,
	75, 46, 53, 100, 49, 121, 128, 114, 155, 99,
	2410, 88, 124, 2409, 109, 2408, 2407, 1208, 117, 2403,
	2401, 2400, 1128, 1102, 1090, 457, 2399, 2398, 1068, 971,
	2397, 2391, 91, 2382, 116, 98, 207, 317, 96, 145,
	144, 101, 2379, 120, 26, 2377, 45, 37, 0, 2512,
	703, 2367, 130, 76, 2360, 2359, 2358, 2354, 32, 14,
	9, 7, 15, 12, 71, 29, 2350, 2349, 132, 85,
	80, 2347, 157, 2346, 2343, 2341, 52, 2340, 24, 2339,
	22, 2338, 2336, 25, 6, 2332, 2327, 148, 2322, 103,
	2321, 2173, 2320, 151, 2319, 2317, 1980, 2313, 31, 97,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 7, 13,
	13, 14, 23, 17, 25, 12, 20, 18, 26, 16,
	16, 22, 22, 128, 128, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	125, 125, 130, 130, 130, 132, 132, 129, 129, 124,
	124, 28, 28, 72, 72, 115, 65, 65, 65, 316,
	316, 317, 317, 111, 111, 112, 112, 112, 112, 113,
	113, 114, 114, 114, 38, 38, 38, 30, 30, 30,
	30, 30, 31, 31, 32, 32, 39, 39, 39, 39,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 48, 48, 49, 49, 49, 49, 49,
	49, 50, 50, 50, 50, 51, 51, 51, 51, 51,
	51, 51, 51, 56, 56, 56, 54, 54, 54, 53,
	53, 53, 52, 52, 52, 55, 55, 55, 185, 185,
	184, 184, 188, 188, 57, 57, 57, 57, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	60, 60, 60, 60, 60, 60, 60, 283, 283, 282,
	58, 58, 258, 258, 61, 61, 213, 213, 62, 62,
	62, 62, 62, 63, 63, 73, 73, 357, 357, 357,
	361, 361, 362, 362, 363, 363, 363, 363, 363, 363,
	363, 359, 359, 68, 68, 68, 68, 69, 69, 69,
	70, 70, 110, 110, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 33, 34, 34, 35, 35, 36, 36,
	36, 79, 79, 79, 81, 78, 78, 78, 80, 80,
	80, 80, 82, 82, 83, 83, 83, 83, 83, 84,
	84, 310, 308, 308, 309, 309, 155, 155, 155, 155,
	155, 156, 156, 156, 315, 315, 315, 315, 315, 315,
	314, 314, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 85, 85, 85, 85, 97,
	97, 97, 105, 105, 105, 105, 105, 105, 105, 86,
	86, 91, 91, 91, 91, 91, 87, 87, 92, 92,
	93, 93, 94, 94, 94, 94, 94, 94, 88, 88,
	88, 88, 96, 96, 96, 96, 95, 95, 101, 101,
	101, 101, 101, 101, 98, 98, 98, 98, 99, 99,
	99, 102, 102, 102, 102, 89, 89, 90, 90, 103,
	103, 104, 104, 104, 104, 104, 104, 100, 100, 100,
	358, 358, 360, 360, 66, 66, 43, 43, 44, 44,
	157, 157, 158, 158, 237, 237, 237, 237, 159, 159,
	131, 131, 131, 162, 163, 163, 160, 160, 161, 161,
	164, 164, 164, 166, 166, 167, 167, 168, 168, 165,
	165, 165, 236, 326, 326, 327, 327, 327, 327, 327,
	327, 328, 328, 328, 328, 328, 328, 328, 324, 324,
	325, 322, 322, 323, 323, 323, 323, 364, 364, 235,
	235, 171, 171, 329, 329, 329, 329, 330, 330, 330,
	330, 330, 333, 332, 331, 331, 331, 331, 331, 269,
	269, 269, 47, 47, 47, 202, 202, 201, 201, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 107, 107, 45, 45, 45, 137, 137, 46,
	46, 42, 42, 42, 217, 217, 175, 175, 274, 274,
	274, 148, 148, 126, 126, 126, 19, 21, 21, 15,
	15, 15, 15, 15, 15, 27, 27, 24, 24, 218,
	218, 219, 219, 67, 67, 71, 71, 76, 76, 106,
	106, 106, 106, 106, 106, 29, 29, 29, 29, 37,
	37, 37, 37, 75, 75, 366, 366, 144, 144, 144,
	144, 145, 145, 232, 232, 233, 233, 367, 367, 234,
	234, 234, 139, 138, 140, 140, 41, 41, 41, 133,
	133, 134, 134, 135, 135, 136, 136, 368, 368, 64,
	64, 64, 109, 109, 151, 151, 229, 229, 229, 231,
	231, 230, 230, 230, 200, 200, 200, 108, 108, 180,
	180, 190, 190, 191, 191, 280, 192, 74, 74, 118,
	118, 116, 116, 116, 116, 116, 116, 116, 116, 117,
	117, 117, 119, 119, 119, 119, 119, 119, 119, 122,
	122, 122, 123, 123, 123, 121, 121, 339, 339, 339,
	342, 342, 338, 340, 340, 341, 341, 365, 365, 204,
	204, 204, 170, 169, 169, 173, 173, 172, 174, 174,
	273, 273, 273, 198, 198, 197, 197, 197, 197, 222,
	222, 220, 220, 221, 221, 225, 225, 226, 226, 226,
	227, 227, 228, 228, 196, 196, 254, 254, 224, 224,
	223, 120, 120, 120, 179, 179, 179, 181, 181, 244,
	244, 244, 245, 245, 243, 243, 243, 243, 275, 275,
	275, 275, 275, 275, 275, 275, 355, 355, 355, 356,
	356, 272, 272, 276, 276, 276, 276, 276, 276, 270,
	270, 270, 270, 271, 271, 281, 281, 207, 207, 207,
	207, 205, 205, 206, 206, 277, 277, 277, 277, 199,
	199, 278, 278, 278, 238, 238, 284, 284, 284, 302,
	302, 178, 178, 178, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 286, 286, 286, 286, 288,
	288, 288, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	301, 301, 301, 301, 301, 289, 289, 296, 296, 297,
	297, 298, 299, 290, 290, 291, 291, 292, 293, 300,
	300, 300, 300, 304, 304, 294, 294, 294, 294, 294,
	295, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 215, 215, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 246, 246, 246, 246, 246, 246, 246, 246, 246,
	246, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	247, 247, 247, 247, 247, 247, 247, 247, 247, 247,
	248, 248, 248, 248, 250, 250, 250, 250, 250, 250,
	250, 250, 250, 250, 250, 334, 334, 334, 334, 334,
	334, 334, 334, 336, 336, 337, 337, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 343, 343, 344,
	344, 346, 346, 347, 347, 348, 349, 349, 349, 350,
	351, 351, 345, 345, 352, 352, 352, 353, 353, 354,
	354, 354, 354, 354, 260, 260, 261, 262, 268, 268,
	268, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 154, 154, 154, 146, 146, 146,
	146, 146, 187, 187, 186, 186, 257, 257, 255, 255,
	259, 259, 208, 208, 303, 303, 303, 303, 303, 303,
	303, 209, 209, 209, 216, 210, 210, 211, 211, 211,
	211, 211, 251, 252, 212, 212, 212, 253, 253, 263,
	267, 267, 266, 265, 265, 264, 264, 241, 241, 242,
	242, 240, 239, 195, 195, 194, 194, 193, 193, 369,
	369, 189, 189, 279, 279, 279, 279, 182, 182, 153,
	153, 183, 183, 149, 149, 152, 152, 150, 150, 150,
	150, 176, 176, 177, 177, 147, 147, 249, 249, 249,
	249, 249, 249, 249, 249, 249, 249, 249, 305, 305,
	305, 306, 307, 256, 141, 141, 141, 142, 142, 143,
	143, 312, 312, 312, 313, 313, 313, 313, 311, 311,
	311, 311, 311, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 318, 318, 318, 318, 318, 318, 318,
	318, 318, 318, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 320, 320, 320, 320, 320, 320, 320, 320,
	320, 320, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321, 321,
	321, 321, 321, 321, 321, 321, 321, 321, 321,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 3, 4,
	6, 6, 6, 5, 5, 7, 7, 8, 8, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 6, 6, 4, 8, 3, 3, 3, 6, 4,
	3, 2, 1, 1, 0, 2, 0, 2, 0, 2,
	0, 7, 2, 6, 2, 1, 12, 12, 2, 1,
	1, 1, 3, 3, 0, 3, 1, 3, 1, 1,
	3, 2, 5, 0, 4, 6, 7, 1, 2, 1,
	2, 2, 3, 3, 3, 3, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 3, 1,
	2, 1, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 4, 6, 3, 4, 6, 3, 4,
	6, 3, 4, 6, 3, 3, 5, 3, 1, 3,
	1, 2, 2, 3, 2, 2, 5, 3, 1, 2,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 1, 1, 1, 1, 2, 1, 1, 3, 1,
	5, 2, 3, 0, 3, 2, 3, 0, 2, 3,
	2, 3, 2, 6, 2, 6, 2, 1, 2, 2,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 1, 2, 2, 3, 2,
	4, 3, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 3, 1, 4, 7, 1, 3, 2, 4,
	1, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 1, 1, 1, 1, 1, 2, 2, 3,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 4, 3,
	5, 3, 4, 5, 2, 3, 3, 3, 4, 2,
	3, 4, 3, 3, 3, 4, 4, 4, 4, 2,
	3, 7, 7, 8, 8, 4, 5, 5, 5, 5,
	2, 0, 2, 0, 3, 2, 8, 10, 6, 9,
	1, 0, 1, 3, 1, 1, 1, 1, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	5, 6, 4, 3, 5, 1, 3, 1, 1, 9,
	10, 8, 3, 2, 0, 3, 1, 2, 2, 3,
	6, 2, 1, 1, 2, 4, 2, 5, 7, 8,
	5, 3, 1, 4, 6, 5, 10, 1, 1, 4,
	0, 3, 0, 2, 2, 2, 0, 1, 1, 2,
	2, 0, 3, 3, 2, 1, 1, 2, 2, 1,
	2, 1, 4, 7, 3, 1, 0, 1, 2, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 2, 4, 2, 4, 7, 3, 3, 0, 6,
	3, 11, 14, 4, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 6, 8, 6, 8, 1,
	0, 2, 0, 2, 2, 3, 2, 2, 2, 1,
	2, 1, 2, 1, 2, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 2, 1, 0, 1, 3, 2,
	0, 2, 1, 1, 0, 1, 3, 1, 0, 1,
	1, 1, 2, 3, 2, 2, 8, 11, 3, 3,
	0, 3, 0, 3, 0, 3, 0, 1, 0, 6,
	7, 3, 6, 3, 1, 3, 1, 4, 2, 8,
	5, 4, 3, 0, 2, 2, 0, 8, 3, 2,
	0, 1, 3, 1, 1, 3, 5, 1, 1, 3,
	3, 1, 2, 4, 4, 2, 3, 5, 5, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 1, 0, 2, 2, 1, 1, 1,
	0, 2, 5, 2, 3, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 3, 0, 2, 0, 1, 0,
	2, 4, 2, 5, 3, 2, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 8, 4,
	6, 3, 3, 1, 5, 5, 0, 2, 3, 1,
	3, 2, 0, 3, 4, 5, 4, 5, 4, 5,
	2, 4, 1, 1, 0, 5, 0, 2, 2, 2,
	1, 1, 0, 4, 2, 1, 2, 2, 4, 1,
	3, 1, 2, 3, 2, 0, 2, 5, 2, 1,
	1, 2, 3, 0, 1, 1, 1, 1, 2, 4,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	5, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 4,
	1, 1, 3, 3, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 5, 6, 6, 7,
	1, 2, 1, 2, 1, 1, 2, 1, 3, 1,
	1, 2, 2, 1, 1, 3, 5, 6, 8, 6,
	6, 4, 3, 4, 1, 1, 1, 5, 1, 3,
	3, 1, 3, 3, 1, 3, 3, 1, 1, 3,
	3, 1, 1, 6, 6, 4, 3, 4, 3, 4,
	3, 4, 4, 3, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 3, 4, 3, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 5, 4, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 3, 1, 3, 3, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 3, 1, 2, 3, 0, 3, 3, 2,
	2, 1, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 3, 3, 2, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 3, 0, 1, 2, 1, 1, 1,
	1, 6, 2, 1, 5, 1, 1, 1, 1, 2,
	2, 1, 1, 3, 1, 1, 1, 1, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 385, -4, -28, -30, -33, -38,
	-39, -62, -48, -49, -50, -61, -57, -63, -64, -65,
	-66, -58, -72, -71, -73, -76, -74, -67, -68, -77,
	-85, -106, -107, -108, -109, -5, -10, 24, 35, -31,
	-32, 49, -34, 73, -45, -40, 75, 96, -341, 100,
	-51, -55, 104, 111, 114, 136, 145, 234, 241, 262,
	264, 266, 273, -116, -118, 260, -69, -70, -78, -79,
	-80, -81, -110, 286, -86, -87, -88, -89, -90, -91,
	-92, -93, -94, -95, -96, -97, -98, -99, -100, -101,
	-102, -103, -104, 289, -29, -37, -75, 329, -6, -7,
	-8, -9, -11, -21, 113, -41, -42, -43, -44, -46,
	-47, -339, -52, -53, -54, -56, -119, -117, 382, 261,
	338, 36, 299, 63, 107, 268, -13, -14, -17, -16,
	-18, -15, -23, -25, -22, -24, -26, -27, -19, -20,
	-12, 354, 361, -122, -120, -121, -123, 278, 346, 309,
	386, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 2, 309, 349, 339, 89, 154, 246, -357, 2,
	-183, 309, 89, -150, -141, 375, 4, -318, -320, 20,
	21, 24, 34, 35, 36, 41, 45, 48, 49, 50,
	57, 62, 63, 64, 69, 66, 67, 68, 71, 73,
	74, 77, 78, 79, 87, 88, 90, 92, 96, 98,
	100, 103, 104, 106, 111, 113, 112, 114, 124, 125,
	130, 132, 137, 143, 144, 145, 146, 147, 155, 158,
	160, 153, 170, 171, 172, 176, 177, 178, 181, 180,
	185, 186, 189, 190, 193, 195, 198, 196, 199, 202,
	200, 204, 205, 207, 206, 212, 214, 215, 217, 220,
	223, 226, 229, 230, 231, 232, 233, 234, 235, 237,
	239, 241, 243, 244, 245, 246, 247, 249, 250, 252,
	253, 254, 255, 256, 260, 258, 259, 261, 262, 263,
	264, 266, 268, 269, 271, 287, 288, 300, 273, 274,
	275, 276, 277, 282, 279, 280, 283, 284, 286, 289,
	291, 294, 298, 299, 301, 304, 305, 302, 297, 308,
	310, 311, 312, 313, 314, 315, 316, 317, 324, 325,
	329, 330, 331, 332, 335, 336, 337, 338, 340, 343,
	344, 345, 350, 355, 356, 357, 358, 359, 29, 37,
	38, 39, 40, 42, 43, 46, 47, 53, 54, 55,
	58, 91, 93, 94, 110, 115, 116, 126, 127, 128,
	138, 140, 148, 149, 152, 159, 161, 162, 163, 164,
	165, 167, 174, 175, 183, 201, 211, 213, 224, 228,
	238, 240, 248, 270, 281, 292, 293, 303, 306, 319,
	320, 321, 326, 327, 342, 346, 347, 385, 385, 2,
	171, 245, -149, -141, 89, 385, 2, 309, 279, 339,
	349, -217, 89, 334, -141, 241, 22, 2, 98, 158,
	337, 336, 22, 237, 280, 311, 313, 2, 385, 2,
	349, 309, 154, 89, 339, -141, 2, -60, 2, 382,
	-59, -5, -40, -51, -61, -57, -10, -28, -30, -45,
	-48, -55, -65, -64, -66, -68, -72, -71, -74, -78,
	-79, -85, -108, -109, 75, 24, 104, 286, 113, -361,
	2, 22, -362, -363, 75, 104, 136, 278, 158, 98,
	336, 309, 2, 171, 2, -141, 2, -357, 2, 171,
	2, -361, 2, -141, 2, -145, 2, 273, -141, 385,
	385, 385, 385, 385, 190, 57, 270, 283, -83, 325,
	-82, 319, -310, -84, 2, -184, 202, -141, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 2, -105, 283, 35, 57,
	22, 62, 90, 137, 154, 155, 177, 70, 71, 244,
	190, 172, 324, 178, 284, 310, 325, 75, 340, 314,
	112, 4, 89, 202, 285, 319, 385, 385, 385, -365,
	2, 309, 385, 385, 385, 385, 275, 289, 385, 385,
	385, 385, 385, 385, -117, -119, -118, 385, 385, 385,
	385, -172, -173, 333, 166, 109, 222, -116, -118, 2,
	-339, -105, 283, 2, 57, 22, -308, 2, -246, 218,
	-248, 373, 374, 368, 208, 360, -260, 95, -250, -263,
	110, 270, 382, -149, -249, 388, 9, -336, -118, 30,
	-261, -262, 51, -141, 7, 8, 5, 6, -147, -286,
	-256, -295, 328, 117, 210, -334, -335, 4, -318, -312,
	-287, -297, -291, -294, 167, 60, 81, 82, 85, 83,
	86, 285, 339, 52, 29, 115, 116, 228, 238, 306,
	326, 327, 148, 211, 149, 58, 138, 183, 103, 38,
	40, 42, 43, 53, 54, 91, 93, 94, 126, 127,
	128, 159, 161, 162, 163, 164, 165, 213, 248, 292,
	303, 320, 321, 347, -319, -298, -299, -292, -293, 76,
	118, 135, 157, 150, 169, 173, 184, 187, 197, 203,
	225, 227, 267, 290, -300, -366, 2, 325, 325, 2,
	-366, 2, -366, 2, -144, 2, 325, 322, -342, 249,
	-338, -141, -342, 385, 385, 387, 385, -169, -170, 2,
	22, 101, 382, 2, -275, 2, 380, -277, -149, -118,
	-276, 382, 219, -3, 2, -277, 148, -149, 2, -277,
	148, -149, 2, -316, 148, -314, 9, -313, 5, 4,
	-318, -320, -319, 60, 2, -141, 2, -152, 148, -149,
	-311, 4, -318, -320, -319, -321, 22, 25, 26, 27,
	28, 30, 31, 32, 33, 44, 51, 52, 56, 59,
	61, 70, 75, 80, 81, 83, 82, 84, 85, 86,
	95, 97, 99, 101, 102, 105, 107, 109, 117, 119,
	131, 133, 134, 136, 139, 141, 151, 154, 156, 166,
	168, 179, 182, 188, 191, 192, 208, 209, 210, 216,
	218, 219, 221, 222, 236, 242, 251, 265, 278, 285,
	295, 307, 309, 318, 322, 323, 328, 333, 334, 339,
	341, 348, 349, 351, 352, 353, 354, 322, 387, -183,
	-176, -141, -240, -239, 384, -246, 2, -246, 2, 134,
	382, -194, -195, -239, -240, 2, -184, 148, -184, 148,
	2, -316, 148, 2, -184, 2, 154, -141, 148, 2,
	-141, 22, 134, 2, 168, 2, 168, 2, -278, 2,
	-277, -185, 148, 2, -184, -185, 148, 2, -153, 148,
	2, -152, -141, 148, 2, -317, 148, 2, -316, -213,
	382, -283, 2, -282, -313, 346, 385, 385, 385, 385,
	385, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 283, 218, 387, -184, -246, -258, 382, 134, -246,
	218, -141, 2, 287, 2, 382, -83, 55, 325, -233,
	2, -234, -138, -139, -140, 170, 243, 247, 359, 322,
	365, 134, -308, -188, 384, -105, 2, -316, 2, 287,
	2, 244, 284, 57, 134, 2, 2, -358, 2, 218,
	134, 2, 134, 2, 134, 2, 134, 2, 134, 2,
	2, 244, 284, 2, 131, 2, 324, 2, 2, 134,
	2, 170, 243, 300, 2, 309, 349, 2, 134, 134,
	359, 2, -199, -277, 309, 359, 22, -172, -173, -223,
	-197, 131, -220, -221, 188, 119, 216, -204, 22, 101,
	-204, -204, 45, 383, 383, -105, 287, 2, 10, 11,
	59, 34, 373, 374, 375, 376, 129, 377, 378, 371,
	372, 370, 363, 364, 367, 296, 23, 72, 366, 365,
	65, 194, 272, 120, 121, 122, 123, 257, 13, 14,
	15, 27, 221, 187, 360, 150, 290, 368, 16, 17,
	18, 169, 37, 151, -146, -154, -246, -246, -246, -246,
	-246, 227, -193, -241, 380, -118, 382, 382, -118, -246,
	-186, 382, -307, 7, -118, -255, 380, -264, -246, -194,
	382, 5, 382, 5, -343, 355, 131, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 240, -304, 350, -304,
	-304, -288, 382, -288, -289, 382, -288, 356, 361, 382,
	-232, -233, -232, 322, -145, 387, -342, -177, 382, 382,
	-189, -279, -246, 375, -189, -186, -246, 76, -207, 173,
	203, 135, 184, 267, 157, -307, -60, -243, 388, 382,
	375, -272, 361, -118, -276, 382, -275, -149, 382, -128,
	258, -127, 21, 24, 104, 344, 110, 297, 315, -163,
	274, -162, 232, 258, 110, 354, 110, 113, 258, 297,
	315, -163, 274, 258, 110, 388, 113, -316, -150, 387,
	-311, 375, 301, 383, -182, -149, -195, 382, -171, 208,
	-202, -201, -203, 31, 229, 48, 146, 196, 205, 197,
	299, 87, 208, -137, -340, 354, 208, -171, 382, -142,
	148, 2, -141, -340, 208, -278, -151, -149, -151, 286,
	-141, 31, -130, 387, 50, 263, 110, -130, 110, -130,
	387, 110, -130, 110, 387, 110, -186, 383, 387, -357,
	-363, 75, 382, 31, -257, -284, -285, -287, -296, -290,
	-294, -295, 41, 47, 46, 175, 174, 316, 201, 281,
	293, 342, 152, 39, 217, 160, 4, 159, 161, 162,
	163, 164, 165, 292, 38, 248, 127, 128, 126, 103,
	94, 93, 213, 43, 42, -298, -299, -292, -293, 91,
	320, 321, 167, 40, 54, 53, 347, 303, -317, -357,
	-310, -186, 31, -233, 2, -367, 387, 186, -156, 193,
	207, 143, 219, 357, -315, 5, 4, -256, -269, 95,
	190, -295, 8, 374, -305, 7, 373, -309, -308, -309,
	79, 384, -311, -184, 22, 288, 2, -310, -360, 131,
	-357, -310, -310, -310, -310, -310, 283, -60, 131, -141,
	186, -310, 2, -310, 2, 309, 154, 309, -130, 387,
	-149, 66, 67, 359, -223, -197, -198, -197, -224, -223,
	336, -221, -220, -225, -246, 22, -228, 125, 204, -246,
	-248, -117, -117, -117, -174, -273, -246, 242, 154, -310,
	-302, -284, -301, 253, 254, 252, 256, 255, -284, -311,
	319, -246, -246, -246, -246, -246, -246, -246, -246, -246,
	-246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
	-246, -246, -246, -246, -246, -246, -246, -246, -246, -246,
	-246, -246, -246, 187, 150, 290, 37, 151, -246, 322,
	-246, -246, -246, -246, 200, 208, 210, 328, 117, 335,
	101, 214, -369, 307, 33, -253, -118, 382, -268, 28,
	295, 22, -260, 270, 382, -241, -246, -242, -187, -186,
	383, 387, -187, -259, -255, -267, -266, 351, 383, -186,
	348, 22, 101, 375, 2, 7, -214, 358, 199, 92,
	144, 198, -215, 277, -344, 124, 139, 382, 383, 2,
	383, 2, 383, 2, 383, 2, -246, -246, -208, 2,
	-303, -186, 4, 358, 199, 92, 144, 198, 277, -208,
	2, -209, 2, -246, -186, -210, -247, -248, 373, 374,
	368, 382, 270, -211, 2, -246, -187, -246, 44, 182,
	323, -212, -246, 134, -186, -246, -246, -246, -186, -186,
	2, -186, 2, 382, -307, 7, 319, 319, -307, -145,
	-338, 31, -176, -186, -179, 387, 134, 31, 4, -179,
	383, 387, 173, 173, -275, -207, 173, -205, 225, -205,
	-205, -355, 382, 381, -272, -311, 380, 389, -187, 2,
	-271, -270, 31, -141, 223, 383, -149, 387, 322, -218,
	70, 61, -236, 148, 61, -322, -141, 70, -323, 56,
	334, 242, 133, -218, 70, -218, 70, 70, -277, 34,
	-74, 113, 134, -311, 322, -277, 233, -316, 68, 322,
	34, -74, 113, 134, 322, -152, -311, 68, -281, 362,
	-141, 134, 383, 387, -157, -176, -158, -141, -237, -236,
	-324, -325, -322, 154, 334, 118, 31, 110, -203, -184,
	45, -306, -305, 374, -306, 45, -306, 196, 197, 87,
	-306, -306, 354, 110, 233, 110, 31, 218, 208, -133,
	312, 110, -238, 352, -229, -74, 382, 95, 31, -229,
	-190, -191, -280, -192, -149, 382, -141, -184, -185, -185,
	-152, -153, -141, -316, -317, 383, -60, -282, 322, 341,
	-158, -59, 24, 75, 104, 383, 387, -178, 30, 380,
	-214, 382, -281, 134, 365, 322, 383, 325, -234, -155,
	247, 294, 259, 282, 8, 7, 7, 387, -311, -359,
	-141, 283, -60, -149, -152, -149, -277, 354, 131, 67,
	-198, -224, -226, -305, 382, -227, 270, 271, 387, -126,
	32, 99, 176, -149, 359, -246, -246, 322, -369, 307,
	-253, -246, 200, 210, 328, 117, 335, 101, 214, 134,
	382, -247, -247, -186, -246, 382, -186, 381, 391, 383,
	-246, 381, 381, 387, -265, -266, 105, -246, -173, 387,
	-172, -246, -186, -186, 383, 383, 322, 322, 322, 322,
	382, -349, 226, 382, 382, -246, 31, 387, 383, 134,
	383, 383, -216, 236, 383, 10, 11, 373, 374, 375,
	376, 129, 377, 378, 371, 372, 370, 363, 364, 365,
	65, 194, 272, 13, 14, 15, 169, 151, -247, -247,
	-247, -186, 382, 383, -251, -252, 134, 131, 31, -212,
	-212, -212, 383, 134, -186, 387, 387, 387, 383, 383,
	383, -307, 383, 387, 383, 359, 359, 383, 382, 383,
	383, -238, -279, -181, 2, -275, -311, -238, -246, -275,
	-275, -206, 341, 218, 173, -275, -270, 383, -356, -307,
	-272, -271, -307, -245, -244, 132, 206, 383, -141, 382,
	-272, 383, -127, -149, -141, -141, 208, -236, 148, -132,
	208, -284, -141, 382, 382, 176, 176, -141, -141, 148,
	-141, 148, -141, -141, -128, 258, -74, 68, 382, -149,
	258, -316, 354, 359, -141, -74, 68, 382, -311, 258,
	359, -111, 147, 214, 301, 134, -149, 383, 383, 387,
	-142, 154, -142, -74, -184, -184, -306, -306, -184, -316,
	-316, -74, -149, 110, -134, 106, -368, 365, -141, -222,
	-220, -246, -200, -231, 265, 218, -182, 346, -141, -200,
	-180, 387, 134, 365, -182, -130, -130, -130, -130, -359,
	-316, 383, -284, 380, 381, 7, 7, -114, 354, -359,
	-308, -308, -138, 332, 64, 247, -308, 387, 220, 246,
	89, 309, 154, -227, -246, -273, -149, 388, -246, -246,
	-247, -247, 134, 382, -246, -257, 27, 27, 383, -187,
	387, -242, -246, 383, -255, 107, -246, 318, 383, 348,
	-173, -173, -173, 5, 199, 144, 198, -215, 198, -215,
	-215, 7, -350, -141, 382, 352, -172, 383, -302, -284,
	-246, -251, -246, -302, -284, -247, -247, -247, -247, -247,
	-247, -247, -247, -247, -247, -247, -247, -247, -247, -247,
	-247, -247, -247, -247, 101, 208, 214, -247, 387, -187,
	-252, -251, -246, -246, -284, 383, 383, 383, -186, -246,
	-246, -246, 383, -307, -59, -196, 139, -281, 387, -196,
	-206, 382, -246, -275, 381, 383, 387, -271, 381, 387,
	390, 365, -272, 382, -176, -270, 322, 322, 110, 208,
	343, -326, -323, -246, -175, -274, -141, -337, 382, -334,
	-335, -147, 382, 382, -125, 104, 286, -219, 110, -130,
	110, -130, 322, -218, 70, 359, -186, 322, 233, -249,
	-147, -141, 359, -186, 322, -249, -114, 134, 308, 301,
	-159, 153, -237, 382, -142, 382, 382, -171, -202, -137,
	382, -141, -135, 181, -368, -314, -340, -200, -200, -189,
	209, 69, 383, -238, -191, -181, -246, 383, -115, 77,
	-115, 7, 381, 383, -113, 220, -112, -141, 5, -141,
	-35, -36, 154, 235, -311, -141, -149, -152, 219, 383,
	-126, -311, 27, 27, -246, -257, 383, -246, -246, 383,
	-246, 381, -246, 5, -246, 383, 383, 383, 383, -351,
	-141, -246, 383, 383, 383, -252, 134, 101, 214, 382,
	-246, 383, 383, 387, 383, 383, 383, 383, -254, 141,
	45, -275, -254, -176, -243, -307, -244, -311, 380, -271,
	-176, 383, -141, -141, -236, 110, -327, 70, -328, 59,
	118, 75, 208, 210, 334, 242, 56, 95, 251, 383,
	383, 387, -148, -194, 59, -148, -246, 382, -175, -176,
	208, 95, 208, 95, 88, 330, -141, -141, -149, -141,
	-141, -249, 383, -149, -316, 382, -249, 383, -311, -317,
	319, -160, -161, 232, 151, -175, 382, -176, -157, 31,
	-175, 218, -136, 180, -368, -314, -133, -230, 382, 218,
	-74, -200, 365, 88, 88, 381, 387, 382, 365, 365,
	387, 22, 382, -163, -163, -126, -246, -246, 383, 383,
	-173, -345, 232, 383, -247, 134, 382, -257, 383, -246,
	-346, 353, -246, -186, -346, 383, -272, -307, 383, -236,
	-141, -311, -141, 118, 148, 210, 176, 382, -247, -149,
	-235, -364, 74, 305, -274, -126, -311, -126, 383, -186,
	383, 383, 210, 210, -246, -284, -130, -130, 322, 322,
	322, -186, 322, -249, 45, 230, 383, -175, 383, 383,
	-74, 383, -149, -368, -314, -134, 102, -176, 70, -253,
	382, 382, -112, -113, -316, -316, -36, -176, 383, -173,
	45, -247, -257, 383, 383, -347, -348, -141, -271, 381,
	-328, -142, 208, -246, -143, 382, -159, 382, -148, -173,
	251, -129, 59, -141, -141, 382, -173, 382, 189, 246,
	-149, -235, 383, -159, -235, 382, -314, -135, 336, 209,
	383, -141, -317, -317, 383, 383, -352, 246, 271, -186,
	383, 387, 31, 110, 383, -329, 195, -141, -176, -126,
	383, -149, -124, 341, -311, -186, 383, -186, 382, 382,
	382, -159, -235, -159, -175, -136, 286, -238, 383, 383,
	383, -353, -354, 37, 331, 79, -246, -353, -348, -350,
	118, -330, -333, -332, 218, 135, 231, 291, 383, 383,
	-171, -246, 383, 383, -176, -176, -176, -159, 383, -190,
	-114, -114, -354, 239, 130, 270, 239, 130, -141, -332,
	218, -333, 218, 336, 98, -329, 383, 383, 383, -235,
	-238, 27, -331, 205, 263, 50, 286, -331, -330, 382,
	382, -131, 50, 263, -159, -354, 20, 210, 95, -164,
	-162, -165, -162, 383, 346, 383, 346, -166, 382, 185,
	387, -161, -160, -167, -168, -246, 197, 317, -164, 382,
	387, 383, 387, 382, -167, -164, -168, -167, 383, 383,
	387, -161, -160, -165, 387, -165,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 157,
	159, 0, 323, 0, 166, 168, -2, 0, 0, 0,
	191, 192, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 717, -2, 0, 303, 305, 314, 316,
	318, 320, 321, 0, 372, 374, 376, 378, 380, 382,
	384, 386, 388, 390, 392, 394, 396, 398, 400, 401,
	403, 405, 407, 0, 639, 641, 643, -2, 59, 61,
	63, 65, 67, 77, 0, 170, 172, 174, 176, 179,
	181, 755, 195, 197, 199, 201, -2, 766, 0, 0,
	0, -2, 0, -2, -2, -2, 68, 69, 70, 71,
	72, 73, 83, 84, 85, 86, 87, 75, 79, 80,
	82, 0, 0, 732, 734, 736, 738, -2, 0, 0,
	-2, 7, 13, 15, 17, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 43, 49, 51, 53,
	57, 58, 0, 0, 0, 0, 0, 0, 0, 132,
	287, 0, 1340, 1261, 1267, 1268, 1294, 1295, 1296, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344,
	1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
	1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
	1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
	1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
	1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
	1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404,
	1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414,
	1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424,
	1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434,
	1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464,
	1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474,
	1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484,
	1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494,
	1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 158, 160, 161,
	0, 0, 0, 1263, 1340, 167, 169, 0, 0, 0,
	0, 0, 0, 604, 278, 1406, 280, 282, 0, 0,
	0, 0, 185, 186, 187, 188, 189, 190, 193, 194,
	0, 0, 0, 0, 0, 277, 275, 224, 225, 0,
	260, 261, 262, 263, 264, 266, 228, 230, 232, 233,
	235, 237, 239, 241, 243, 245, 246, 248, 250, 251,
	253, 255, 256, 258, 605, 0, 0, 0, 0, 0,
	284, 290, 291, 292, 294, 295, 296, 297, 298, 299,
	300, 0, 138, 0, 485, 273, 271, 0, 134, 0,
	636, 0, 286, 637, 638, 633, 634, 1433, 662, 304,
	306, 315, 317, 319, -2, -2, 1528, -2, 336, -2,
	344, 1534, 0, 347, 348, 351, -2, 220, 373, 375,
	377, 379, 381, 383, 385, 387, 389, 391, 393, 395,
	397, 399, 402, 404, 406, 408, 409, 0, 0, 0,
	413, 0, -2, -2, 0, 0, 0, 0, 0, -2,
	0, -2, 0, 0, -2, -2, 0, 0, -2, 0,
	0, 412, 414, 415, 416, 0, 640, 642, 644, 0,
	593, 757, 60, 62, 64, 66, 0, 0, 171, 173,
	175, 177, 180, 182, -2, 730, 731, 196, 198, 200,
	202, -2, 0, 761, 761, 761, 0, 0, 731, 729,
	0, 307, 0, 309, 0, 413, 312, 313, 352, 353,
	967, 0, 0, 0, 0, 0, 0, 1040, 1070, 1072,
	1499, 1528, 0, 1074, 1075, 0, 1077, 1079, 1080, 0,
	1083, 1084, 1236, 1263, 1277, 1278, 1279, 1280, 0, 0,
	1283, 0, 1285, 1286, 1287, 1138, 1094, -2, -2, 1275,
	895, 896, 897, 898, -2, 1542, 1098, 1101, 1104, 1107,
	1108, 1111, 1112, 0, 1483, 1500, 1501, 1524, 1525, 1533,
	1537, 1538, 1507, 1521, 1508, 1495, 1505, 1519, 1346, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1303, 929, 930, 935, 936, 1543,
	1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553,
	1554, 1555, 1556, 1557, 938, 664, 646, 655, 664, 648,
	649, 650, 651, 652, 653, 654, 657, 0, 747, 1412,
	750, 1274, 748, 733, 735, 0, 737, 0, 0, 741,
	763, 762, 0, 802, 745, 746, 756, 817, 855, 832,
	823, 0, 0, 2, 74, 0, 1507, -2, 76, 0,
	1507, 855, 78, 0, 1507, 139, 140, 370, 371, 1304,
	1305, 1306, 1307, 1542, 81, 0, 88, 505, 1507, 1266,
	0, 1308, 1309, 1310, 1311, 1312, 1558, 1559, 1560, 1561,
	1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571,
	1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581,
	1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
	1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600, 1601,
	1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609, 1610, 1611,
	1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621,
	1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631,
	1632, 1633, 1634, 1635, 1636, 1637, 1638, 0, 0, 288,
	289, 1271, 1269, 1270, 0, 162, 163, 164, 165, 0,
	0, 1264, 1245, 1243, 1244, 178, 552, 1507, 576, 1507,
	574, -2, 1507, 596, 552, 600, -2, 754, 1507, 678,
	279, 281, 0, 184, 0, 691, 0, 693, 0, 708,
	861, 124, 1507, 205, 218, 124, 1507, 208, 124, 1507,
	211, 1259, 124, 1507, 214, 215, 1507, 217, 141, 274,
	0, 0, -2, 267, 269, -2, 265, 229, 231, 234,
	236, 238, 240, 242, 244, 247, 249, 252, 254, 257,
	259, -2, 0, 0, 0, 484, 0, 0, 0, 635,
	0, 661, 322, 0, 333, 0, 335, 1494, -2, -2,
	339, 665, 669, 670, 671, 0, 0, 0, 0, 0,
	0, 0, 349, 221, 0, 410, 411, 419, 420, 0,
	423, 444, 456, 0, 0, 427, 429, 483, 431, 0,
	0, 433, 0, 435, 0, 437, 0, 439, 0, 441,
	443, 445, 457, 447, 756, 449, 0, 451, 455, 0,
	460, 0, 462, 463, 464, 0, 0, 470, 0, 0,
	417, 418, 124, 859, 0, 0, 0, -2, 0, 774,
	799, 0, 777, 778, 0, 0, 0, 0, 759, 760,
	0, 0, 0, 719, 720, 308, 0, 311, 0, 0,
	0, 0, 1171, 1172, 1173, 1174, 1175, 1176, 1179, 1180,
	1177, 1178, 1181, 1182, 0, 0, 0, 0, 0, 1183,
	0, 0, 0, 0, 0, 0, 0, 0, 1184, 1185,
	1186, 0, 0, 1188, 0, 1190, 0, 0, 0, 0,
	0, 0, 1250, 0, 0, 1187, 972, 973, 974, 1006,
	1007, 0, 1071, 1247, 1240, 1073, 0, 1193, -2, 1194,
	0, 0, 1076, 1292, 1081, 1082, 1193, 0, 1235, -2,
	0, 1282, 0, 964, 1140, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1216, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 914, 932, 943, 940,
	939, 916, 0, 915, 913, 0, 917, 0, 0, 0,
	645, -2, 647, 0, 659, 0, 749, 0, 0, 0,
	806, 1251, 1255, 1256, 806, 0, 1194, 0, 0, 0,
	0, 852, 852, 852, 850, 826, 0, 832, 0, -2,
	856, 844, 0, -2, 823, 0, 0, 857, 0, 89,
	630, 103, 0, 630, 630, 0, 0, 0, 0, 0,
	99, 504, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 846, 1262, 0,
	1241, 1242, 154, 0, 0, 1257, 1246, 491, 0, 0,
	572, 575, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 0, 594, 0, 753, 0, 0, 0, 0,
	1507, 603, 1297, 680, 0, 865, 0, 694, 0, 0,
	862, 0, 203, 0, 122, 123, 0, 206, 0, 209,
	0, 0, 212, 0, 0, 0, 0, 756, 0, 0,
	293, 0, 0, 756, 0, 1196, 873, 874, 875, 876,
	877, 964, 880, 881, 882, 883, 884, 885, 886, 887,
	888, 889, 890, 891, 892, 893, 894, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 926, 0,
	901, 901, 901, 918, 919, 927, 928, 933, 934, 945,
	946, 948, 950, 944, 944, 944, 941, 942, 846, 0,
	0, 0, 0, -2, 341, 0, 667, 0, 672, 361,
	362, 363, 674, 675, 345, 364, 365, 366, 367, 368,
	369, 0, 569, 0, 571, 1288, 0, 342, 354, 343,
	346, 0, 222, 421, 422, 424, 425, 426, 430, 0,
	480, 432, 434, 436, 438, 440, 448, 452, 756, 458,
	461, 465, 466, 467, 468, 0, 0, 0, 592, 0,
	324, 0, 475, 0, 774, 799, 723, 773, 724, 798,
	800, 775, 776, 781, 785, 786, 789, 792, 793, 783,
	967, 742, 743, 744, 767, 768, 615, 0, 0, 310,
	968, 869, 870, 920, 921, 922, 923, 924, 969, 970,
	0, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, -2, -2, -2, -2, -2, -2, -2, -2, 993,
	994, 995, 996, 997, 998, 999, 1000, -2, -2, -2,
	1004, 1005, -2, 1189, 1191, 0, 1250, 0, -2, 0,
	-2, -2, -2, -2, 1018, 0, 1020, 1023, 1025, 1027,
	0, 0, 0, 0, 1249, 1037, 1227, 0, 0, 1168,
	1169, 1170, 1022, 0, 0, 1248, 1239, 0, 0, 1192,
	1078, 0, 0, 0, 1200, 1234, 1230, 0, 1085, 766,
	0, 0, 0, 0, 1092, 0, 1293, 951, 952, 953,
	954, 955, 956, 965, 1148, 0, 0, 0, 1099, 1100,
	1102, 1103, 1105, 1106, 1109, 1110, 0, 0, 0, 1116,
	0, 1203, -2, -2, -2, -2, -2, -2, -2, 0,
	1118, 0, 1120, 1194, 1213, 0, 0, 1041, 0, 0,
	0, 0, 1528, 0, 1123, 1194, 1221, 0, 0, 0,
	0, 0, 1194, 0, 1226, 0, 0, 0, 0, 0,
	1134, 0, 1136, 0, 0, 0, 0, 0, 0, 658,
	751, 0, 0, 0, 865, 0, 0, 0, 1254, 865,
	801, 0, 0, 0, 0, 0, 0, 847, 851, 848,
	849, 0, 0, 832, 844, 814, 0, 0, 0, 821,
	822, 843, 0, 842, 831, -2, 0, 0, 0, 0,
	0, 629, 105, 1507, 0, 126, 0, 0, 542, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 0, 0, 503, 0, 0, 0, 0, 0, 0,
	0, 94, 0, 0, 0, 0, 1265, 0, 144, 0,
	1272, 0, 0, 0, 0, 0, 490, 1271, 492, 494,
	495, 496, 497, 1298, 0, 1298, 0, 0, 578, 579,
	0, 581, 1291, 0, 582, 0, 584, 585, 587, 591,
	586, 588, 0, 0, 0, 0, 0, 0, 0, 682,
	688, 0, 780, 0, 706, 696, 0, 0, 0, 706,
	710, 711, 713, 714, 0, 0, 863, 219, 124, 124,
	1260, 124, 124, 142, 216, 276, 226, 268, 0, 0,
	0, 270, 0, 0, 0, 272, 0, 866, 868, 0,
	878, 0, 153, 0, 0, 0, 334, 0, 666, 673,
	0, 358, 0, 360, 570, 1290, 1289, 0, 223, 482,
	301, 450, 453, 477, 478, 479, 860, 0, 0, 476,
	727, 728, 0, 787, 0, 784, 790, 791, 0, 770,
	613, 614, 0, 0, 0, -2, -2, 0, 0, 0,
	1038, -2, 1019, 1021, 1024, 1026, 1028, 0, 0, 0,
	0, 0, 0, 0, 1039, 1193, 0, 1237, 1240, -2,
	1195, 1198, 1199, 0, 0, 1231, 0, 0, 0, 0,
	765, 766, 766, 766, 1091, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 1115, 0,
	1117, 1119, 0, 0, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1044, 1045,
	1046, 0, 1193, 1122, 1219, 1220, 0, 0, 0, 0,
	0, 0, 1128, 0, 1225, 0, 0, 0, 1132, 1133,
	1135, 0, 899, 0, 925, 947, 949, 937, 756, 1273,
	803, 795, 1252, 846, 805, 807, 1253, 795, 1195, 834,
	0, 836, 0, 0, 0, 838, 0, 827, 0, 829,
	844, 819, 0, 0, 812, 0, 811, 832, 840, 0,
	0, 858, 104, 619, 0, 0, 0, 107, 1507, 115,
	0, 524, 0, 0, 0, 0, 0, 632, 116, 1507,
	124, 1507, 124, 117, 90, 630, 91, 0, 0, 625,
	0, 617, 0, 0, 616, 92, 0, 0, 627, 0,
	0, 153, 0, 0, 155, 0, 1258, 499, 551, 0,
	0, 1298, 0, 488, 552, 580, 583, 589, 576, 597,
	-2, 599, 0, 0, 684, 688, 0, 687, 754, 706,
	779, 864, 689, 706, 0, 0, 0, 698, 695, 692,
	865, 0, 0, 0, 0, 204, 207, 210, 213, 283,
	0, 0, 1197, 0, 871, 0, 0, 133, 0, 285,
	331, 332, 337, 356, 357, 359, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 769, 615, 0, 971, -2,
	0, 0, 0, 0, -2, 0, 0, 0, 1228, 0,
	0, 0, 1239, -2, 1201, 1229, 1233, 0, 1086, 0,
	0, 0, 0, 1284, 957, 958, 959, 960, 961, 962,
	963, 0, 1146, 1147, 1151, 0, 0, 1097, 0, 0,
	1202, 1212, 1214, 1042, 1043, 1047, 1048, 1049, 1050, 1051,
	1052, 1053, 1054, 1055, 1056, -2, -2, -2, 1060, 1061,
	1062, -2, -2, -2, 0, 0, 0, 1215, 0, 0,
	1217, 1218, 1222, 1223, 0, 1125, 1126, 1127, 1224, 0,
	0, 0, 931, 0, 0, 797, 0, 804, 0, 797,
	835, 0, 854, 837, 817, 828, 0, 825, 815, 0,
	816, 0, 844, 0, 0, 824, 0, 0, 0, 0,
	125, 522, 541, 0, 0, 606, 612, 612, 0, 1095,
	1096, 0, 0, 0, 109, 0, 0, 0, 0, 113,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 95, 131, 0, 0, 156,
	507, 0, 493, 0, 0, 0, 491, 0, 573, 595,
	0, 0, 686, 688, 0, 679, 680, 183, 690, 704,
	705, 703, 0, 706, 712, 709, 715, 0, 0, 135,
	0, 0, 872, 879, 151, 1394, 149, 146, 148, 302,
	325, 326, 0, 330, 471, 472, 505, 505, 782, 788,
	771, 615, 0, 0, -2, 0, 1031, -2, -2, 1164,
	1195, 1238, 1232, 1281, 766, 1087, 1089, 1090, 966, 1153,
	1150, 0, 1137, 1113, 1114, 1211, 0, 0, 0, 0,
	1195, 1166, 1124, 0, 1130, 1131, 900, 752, 1142, 0,
	0, 808, 1142, 0, 832, 830, 813, 809, 0, 820,
	0, 841, 621, 623, 106, 0, 523, 0, 526, 0,
	0, 0, 0, 532, 533, 0, 0, 0, 0, 543,
	550, 0, 615, 1276, 0, 615, 0, 0, 0, 0,
	0, 121, 0, 0, 631, 0, 124, 124, 620, 0,
	0, 97, 0, 626, 618, 0, 98, 0, 628, 143,
	0, 486, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 676, 688, 0, 681, 682, 0, 0, 0,
	697, 707, 0, 0, 0, 867, 0, 0, 0, 0,
	0, 328, 0, 473, 474, 772, -2, -2, 1032, 1165,
	0, 766, 0, 1139, -2, 0, 0, 0, 1167, 0,
	739, 0, 796, 794, 740, 853, 844, 0, 839, 108,
	0, 527, 528, 1298, 0, 531, 534, 0, 536, 1300,
	499, 0, 547, 548, 607, 608, 611, 609, 612, 766,
	545, 0, 110, 111, 120, 128, 112, 118, 0, 0,
	0, 766, 0, 845, 0, 0, 550, 0, 540, 499,
	489, 550, 0, 0, 683, 684, 0, 0, 0, 716,
	0, 0, 150, 0, 145, 147, 327, 0, 1088, 1156,
	0, -2, 0, 1068, 1129, 1141, 1143, 0, 818, 810,
	525, 529, 0, 0, 556, 0, 544, 0, 615, 0,
	0, 130, 0, 622, 624, 0, 0, 0, 0, 0,
	0, 499, 550, 487, 499, 0, 685, 686, 0, 700,
	865, 702, 0, 0, 152, 329, 0, 0, 0, 1152,
	1069, 0, 0, 0, 535, 561, 0, 0, 0, 610,
	1086, 552, 114, 0, 127, 0, 0, 0, 0, 0,
	0, 538, 499, 601, 0, 677, 0, 701, 153, 153,
	1149, 1154, 1157, -2, 1467, 1337, 0, 1155, 1144, 1145,
	0, 537, 557, 558, 0, 553, 554, 555, 1299, 549,
	556, 129, 100, 102, 0, 0, 0, 539, 550, 865,
	136, 137, 0, 1159, 1160, 1161, 1162, 1163, 530, 559,
	0, 560, 0, 0, 0, 561, 0, 0, 502, 499,
	699, 0, 562, 0, 565, 566, 0, 563, 546, 0,
	0, 498, 500, 501, 602, 1158, 564, 567, 568, 0,
	0, 0, 0, 508, 0, 509, 0, 507, 0, 0,
	0, 506, 512, 0, 515, 517, -2, 0, 510, 0,
	0, 513, 0, 0, 0, 511, 516, 0, 514, 507,
	0, 506, 521, 519, 0, 520,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 371, 3, 377, 372, 3,
	382, 383, 375, 373, 387, 374, 384, 376, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 391, 386,
	363, 365, 364, 367, 388, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 380, 3, 381, 378, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 389, 370, 390, 368,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 366, 57706, 369, 57707, 379, 57708, 385, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:935
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:941
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:968
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:969
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:974
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:975
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:976
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:979
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:982
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1000
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1001
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1005
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1006
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1007
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1055
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1076
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1100
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1104
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1108
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1114
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1126
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1132
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1138
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1147
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1156
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: TableNameWithIndex{Table: sqlDollar[3].union.normalizableTableName()},
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1168
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{
					TableOrIndex: sqlDollar[3].union.tableWithIdx(),
					Partition:    Name(sqlDollar[4].str),
				},
				YAMLConfig: sqlDollar[8].union.expr(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1211
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1216
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1236
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1240
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1263
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1273
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1276
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = nil
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1312
		{
			sqlVAL.union.val = DropCascade
		}
	case 123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1316
		{
			sqlVAL.union.val = DropRestrict
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1320
		{
			sqlVAL.union.val = DropDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1326
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1330
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1335
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1336
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			return unimplemented(sqllex, "alter using")
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1340
		{
		}
	case 131:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1367
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1393
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.str = "CSV"
		}
	case 136:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1431
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1445
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1469
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 152:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1500
		{
		}
	case 154:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1504
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1512
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1533
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1554
		{
			return helpWith(sqllex, "CREATE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1558
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1562
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1564
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1582
		{
			return helpWith(sqllex, "DELETE")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1592
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1593
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1594
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1595
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1603
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1604
		{
			return helpWith(sqllex, "DROP")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1607
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1609
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1610
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1618
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1622
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1633
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1637
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1640
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1671
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1709
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1715
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1752
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1764
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1765
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1767
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1768
		{
			return helpWith(sqllex, "DELETE")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1769
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			return helpWith(sqllex, "INSERT")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1780
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1781
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1791
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1792
		{ /* SKIP DOC */
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1796
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1800
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1820
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1824
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1828
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1844
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1850
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 277:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1864
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1868
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1872
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1876
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1879
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1899
		{
			return helpWith(sqllex, "GRANT")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1938
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1941
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1956
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1960
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1964
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1968
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1972
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "RESET")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1998
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2013
		{
			return helpWith(sqllex, "RESET")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2024
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2029
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2032
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2036
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2037
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2039
		{ /* SKIP DOC */
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2040
		{ /* SKIP DOC */
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			return unimplemented(sqllex, "set local")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2063
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2069
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2073
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2079
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2083
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2087
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 337:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2160
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2164
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2177
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2180
		{
			return unimplemented(sqllex, "set from current")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2192
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2230
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2240
		{
			sqlVAL.union.val = Low
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2244
		{
			sqlVAL.union.val = Normal
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = High
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2267
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2291
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2292
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2294
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2296
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2299
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2301
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2302
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2303
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2304
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2307
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2310
		{
			return helpWith(sqllex, "SHOW")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2319
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.str = "client_encoding"
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2345
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2355
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2359
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2362
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2367
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2400
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2411
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2413
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2416
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2421
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2434
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2448
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2450
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2454
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2464
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2467
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2480
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2482
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2485
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 452:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2491
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2503
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2505
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2509
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2523
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2526
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2534
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2538
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2542
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2545
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2556
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2567
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2575
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2578
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2582
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2586
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2590
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: TableNameWithIndex{Table: sqlDollar[7].union.normalizableTableName()},
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2597
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{
				TableOrIndex: sqlDollar[7].union.tableWithIdx(),
				Partition:    Name(sqlDollar[8].str),
			}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2604
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2608
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2614
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2618
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2622
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2628
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 481:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2643
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2653
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2656
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2691
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 498:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2763
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2767
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.union.val = DropDefault
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.str = ""
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 508:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2804
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[1].str),
				Tuples: sqlDollar[3].union.tuples(),
			}}, sqlDollar[5].union.listPartitions()...)
		}
	case 511:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 512:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2828
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuples:       sqlDollar[3].union.tuples(),
				Subpartition: sqlDollar[4].union.partitionBy(),
			}}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2859
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2865
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[1].str),
				Tuple: &Tuple{Exprs: sqlDollar[6].union.exprs()},
			}}, sqlDollar[9].union.rangePartitions()...)
		}
	case 520:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 521:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[1].str),
				Tuple:        &Tuple{Exprs: sqlDollar[6].union.exprs()},
				Subpartition: sqlDollar[8].union.partitionBy(),
			}}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2890
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2905
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2915
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2923
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2927
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2931
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2949
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2961
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2965
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2969
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2973
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2992
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3005
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3022
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3054
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3092
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3097
		{
			return unimplemented(sqllex, "match full")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			return unimplemented(sqllex, "match partial")
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			return unimplemented(sqllex, "match simple")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3100
		{
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3107
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3111
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3123
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = NoAction
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = Restrict
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3151
		{
			sqlVAL.union.val = Cascade
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3155
		{
			sqlVAL.union.val = SetNull
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3159
		{
			sqlVAL.union.val = SetDefault
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3190
		{
			node := &CreateSequence{
				Name:    sqlDollar[3].union.normalizableTableName(),
				Options: sqlDollar[4].union.seqOpts(),
			}
			sqlVAL.union.val = node
		}
	case 573:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3198
		{
			node := &CreateSequence{
				Name:        sqlDollar[6].union.normalizableTableName(),
				Options:     sqlDollar[7].union.seqOpts(),
				IfNotExists: true,
			}
			sqlVAL.union.val = node
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3206
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = []SequenceOption(nil)
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = []SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3217
		{
			return unimplemented(sqllex, "create sequence AS option")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			return unimplemented(sqllex, "create sequence OWNED BY option")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3219
		{
			return unimplemented(sqllex, "create sequence CACHE option")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3220
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: &x}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = SequenceOption{Name: SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3224
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: &x}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMinValue, IntVal: nil}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3227
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: &x}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptMaxValue, IntVal: nil}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3230
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: &x}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = SequenceOption{Name: SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3234
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: true}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = SequenceOption{Name: SeqOptCycle, BoolVal: false}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3243
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3254
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3258
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3261
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3265
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 598:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3269
		{
			sqlVAL.union.val = nil
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3326
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = true
		}
	case 605:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = false
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3357
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3360
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 612:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3361
		{
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3365
		{
			sqlVAL.union.val = Ascending
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = Descending
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3386
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3390
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3396
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3400
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3404
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3408
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3412
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3414
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3418
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3438
		{
			sqlVAL.union.val = true
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = false
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3447
		{
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3448
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3459
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3467
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3481
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3485
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3487
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3505
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3510
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3520
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3523
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3528
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3536
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3543
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3546
		{
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3547
		{
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.str = ""
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 659:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.str = ""
		}
	case 661:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 667:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3606
		{
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3608
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3612
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3616
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3620
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3626
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3632
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3638
		{
			sqlVAL.union.val = ReadOnly
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3642
		{
			sqlVAL.union.val = ReadWrite
		}
	case 676:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3652
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3662
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3672
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3676
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3680
		{
			sqlVAL.str = ""
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.str = ""
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3696
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.str = ""
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.str = ""
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3715
		{
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3716
		{
		}
	case 689:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3728
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3734
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3740
		{
			return helpWith(sqllex, "INSERT")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3757
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3761
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3769
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3775
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3779
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3789
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3793
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3799
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3803
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3805
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 705:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3816
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3820
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 707:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3831
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3834
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3838
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 710:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3839
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3947
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3951
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3966
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			return helpWith(sqllex, "SELECT")
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4002
		{
			return helpWith(sqllex, "VALUES")
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4003
		{
			return helpWith(sqllex, "TABLE")
		}
	case 739:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4050
		{
			return helpWith(sqllex, "SELECT")
		}
	case 742:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4072
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4094
		{
			return helpWith(sqllex, "TABLE")
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4105
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4106
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4110
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4111
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4114
		{
			return unimplemented(sqllex, "cte")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4117
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4118
		{
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4121
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 756:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4122
		{
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4125
		{
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4126
		{
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4130
		{
			sqlVAL.union.val = true
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = false
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = false
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = true
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4149
		{
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4150
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4154
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4158
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4164
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4170
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4174
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4180
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4198
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4204
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4224
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4228
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4250
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4274
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4280
		{
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4284
		{
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
		}
	case 794:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 795:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4317
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4321
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = false
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = true
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4356
		{
			return helpWith(sqllex, "VALUES")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4358
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4373
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4375
		{
			sqlVAL.union.val = &From{}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4391
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4395
		{
			/* SKIP DOC */
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(sqlDollar[4].union.int64())}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4411
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(sqlDollar[3].union.int64())}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 817:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 818:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4473
		{
			/* SKIP DOC */
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4486
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4490
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4493
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 824:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4528
		{
			sqlVAL.union.val = nil
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4529
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4530
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4534
		{
			sqlVAL.union.val = []ColumnID{ColumnID(sqlDollar[1].union.int64())}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(sqlDollar[3].union.int64()))
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4544
		{
			sqlVAL.union.val = true
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4548
		{
			sqlVAL.union.val = false
		}
	case 833:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4568
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4572
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 835:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4576
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 836:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4580
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4584
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4588
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4594
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4602
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4606
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.str = astFullJoin
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4633
		{
			sqlVAL.str = astLeftJoin
		}
	case 849:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4637
		{
			sqlVAL.str = astRightJoin
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4641
		{
			sqlVAL.str = astInnerJoin
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4648
		{
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4673
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4677
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 858:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4681
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4734
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4748
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4756
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4767
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4778
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4780
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 879:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4791
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = jsonbColType
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = jsonColType
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 889:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4849
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4880
		{
			sqlVAL.union.val = &DecimalColType{Prec: int(sqlDollar[2].union.int64())}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4884
		{
			sqlVAL.union.val = &DecimalColType{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = nil
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4895
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 907:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 908:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4931
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4935
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4939
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 915:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4962
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4971
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4991
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4995
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4999
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5007
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5017
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5035
		{
			bit, err := newIntBitType(int(sqlDollar[4].union.int64()))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 937:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int64()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 943:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5097
		{
		}
	case 944:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5098
		{
		}
	case 945:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 946:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 947:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 948:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 949:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5119
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5124
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = year
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = month
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = day
		}
	case 954:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = hour
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = minute
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5156
		{
			sqlVAL.union.val = month
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = hour
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = minute
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5168
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5172
		{
			sqlVAL.union.val = minute
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5176
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5180
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 964:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5184
		{
			sqlVAL.union.val = nil
		}
	case 965:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = second
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5193
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5228
		{
			return unimplemented(sqllex, "at tz")
		}
	case 972:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5429
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5433
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5436
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5454
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5458
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5462
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5502
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5519
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5578
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5582
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5586
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5590
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5594
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5598
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5610
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5630
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5638
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5655
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5663
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5679
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5692
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5697
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5701
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5705
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5709
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5713
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5728
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5729
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5731
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5735
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5739
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5753
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5760
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5769
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5770
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5774
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5776
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5783
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5785
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5789
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5792
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5801
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5802
		{
			return unimplemented(sqllex, "current role")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5808
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5811
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5813
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5817
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5821
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5829
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5832
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5834
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5837
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5842
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5844
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5851
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5852
		{
			return unimplemented(sqllex, "treat")
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5858
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5862
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5889
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5891
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5894
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5898
		{
			return unimplemented(sqllex, "within group")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5899
		{
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5903
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5907
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5924
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5928
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5934
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5942
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5957
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.str = ""
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5982
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5996
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5997
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5998
		{
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6002
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6008
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6009
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6010
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6011
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6012
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6023
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6027
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6033
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6039
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6045
		{
			sqlVAL.union.val = Any
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6049
		{
			sqlVAL.union.val = Some
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6053
		{
			sqlVAL.union.val = All
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = Plus
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = Minus
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6060
		{
			sqlVAL.union.val = Mult
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6061
		{
			sqlVAL.union.val = Div
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = Mod
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = Bitand
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6065
		{
			sqlVAL.union.val = Bitor
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = Pow
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = Bitxor
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = LT
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6069
		{
			sqlVAL.union.val = GT
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6070
		{
			sqlVAL.union.val = EQ
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6071
		{
			sqlVAL.union.val = LE
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6072
		{
			sqlVAL.union.val = GE
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = NE
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = Like
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = NotLike
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6079
		{
			sqlVAL.union.val = ILike
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6080
		{
			sqlVAL.union.val = NotILike
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6092
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6098
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6102
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6112
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6118
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6122
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6132
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6138
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6168
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6172
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6178
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6189
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6206
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6218
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6234
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6240
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6244
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6248
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6254
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6258
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6276
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6286
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6292
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6296
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6303
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6309
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6313
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6320
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6326
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6332
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6338
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6342
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6348
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6352
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6358
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6362
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6367
		{
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6368
		{
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6372
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6391
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6395
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6399
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6407
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6421
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6431
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6442
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6452
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6456
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6473
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6477
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6481
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6491
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6497
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6500
		{
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6510
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6514
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6521
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6525
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6529
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6533
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6536
		{
			return unimplemented(sqllex, "func const")
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6538
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6542
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6545
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6547
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6551
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6555
		{
			sqlVAL.union.val = DNull
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6562
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6566
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6573
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6584
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6594
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6629
		{
			sqlVAL.str = ""
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6635
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6639
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
