// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:463
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const CONTAINS = 57409
const COPY = 57410
const COVERING = 57411
const CREATE = 57412
const CROSS = 57413
const CSV = 57414
const CUBE = 57415
const CURRENT = 57416
const CURRENT_CATALOG = 57417
const CURRENT_DATE = 57418
const CURRENT_SCHEMA = 57419
const CURRENT_ROLE = 57420
const CURRENT_TIME = 57421
const CURRENT_TIMESTAMP = 57422
const CURRENT_USER = 57423
const CYCLE = 57424
const DATA = 57425
const DATABASE = 57426
const DATABASES = 57427
const DATE = 57428
const DAY = 57429
const DEC = 57430
const DECIMAL = 57431
const DEFAULT = 57432
const DEALLOCATE = 57433
const DEFERRABLE = 57434
const DELETE = 57435
const DESC = 57436
const DISCARD = 57437
const DISTINCT = 57438
const DO = 57439
const DOUBLE = 57440
const DROP = 57441
const ELSE = 57442
const ENCODING = 57443
const END = 57444
const ESCAPE = 57445
const EXCEPT = 57446
const EXISTS = 57447
const EXECUTE = 57448
const EXPERIMENTAL_FINGERPRINTS = 57449
const EXPLAIN = 57450
const EXTRACT = 57451
const EXTRACT_DURATION = 57452
const FALSE = 57453
const FAMILY = 57454
const FETCH = 57455
const FETCHVAL = 57456
const FETCHTEXT = 57457
const FETCHVAL_PATH = 57458
const FETCHTEXT_PATH = 57459
const FILTER = 57460
const FIRST = 57461
const FLOAT = 57462
const FLOAT4 = 57463
const FLOAT8 = 57464
const FLOORDIV = 57465
const FOLLOWING = 57466
const FOR = 57467
const FORCE_INDEX = 57468
const FOREIGN = 57469
const FROM = 57470
const FULL = 57471
const GRANT = 57472
const GRANTS = 57473
const GREATEST = 57474
const GROUP = 57475
const GROUPING = 57476
const HAVING = 57477
const HELP = 57478
const HIGH = 57479
const HOUR = 57480
const HAS_SOME = 57481
const HAS_ALL = 57482
const IMPORT = 57483
const INCREMENTAL = 57484
const IF = 57485
const IFNULL = 57486
const ILIKE = 57487
const IN = 57488
const INET = 57489
const INTERLEAVE = 57490
const INDEX = 57491
const INDEXES = 57492
const INITIALLY = 57493
const INNER = 57494
const INSERT = 57495
const INT = 57496
const INT2VECTOR = 57497
const INT2 = 57498
const INT4 = 57499
const INT8 = 57500
const INT64 = 57501
const INTEGER = 57502
const INTERSECT = 57503
const INTERVAL = 57504
const INTO = 57505
const IS = 57506
const ISOLATION = 57507
const JOB = 57508
const JOBS = 57509
const JOIN = 57510
const KEY = 57511
const KEYS = 57512
const KV = 57513
const LATERAL = 57514
const LC_CTYPE = 57515
const LC_COLLATE = 57516
const LEADING = 57517
const LEAST = 57518
const LEFT = 57519
const LEVEL = 57520
const LIKE = 57521
const LIMIT = 57522
const LOCAL = 57523
const LOCALTIME = 57524
const LOCALTIMESTAMP = 57525
const LOW = 57526
const LSHIFT = 57527
const MATCH = 57528
const MINUTE = 57529
const MONTH = 57530
const NAN = 57531
const NAME = 57532
const NAMES = 57533
const NATURAL = 57534
const NEXT = 57535
const NO = 57536
const NO_INDEX_JOIN = 57537
const NORMAL = 57538
const NOT = 57539
const NOTHING = 57540
const NULL = 57541
const NULLIF = 57542
const NULLS = 57543
const NUMERIC = 57544
const OF = 57545
const OFF = 57546
const OFFSET = 57547
const OID = 57548
const ON = 57549
const ONLY = 57550
const OPTIONS = 57551
const OR = 57552
const ORDER = 57553
const ORDINALITY = 57554
const OUT = 57555
const OUTER = 57556
const OVER = 57557
const OVERLAPS = 57558
const OVERLAY = 57559
const PARENT = 57560
const PARTIAL = 57561
const PARTITION = 57562
const PASSWORD = 57563
const PAUSE = 57564
const PLACING = 57565
const PLANS = 57566
const POSITION = 57567
const PRECEDING = 57568
const PRECISION = 57569
const PREPARE = 57570
const PRIMARY = 57571
const PRIORITY = 57572
const QUERIES = 57573
const QUERY = 57574
const RANGE = 57575
const READ = 57576
const REAL = 57577
const RECURSIVE = 57578
const REF = 57579
const REFERENCES = 57580
const REGCLASS = 57581
const REGPROC = 57582
const REGPROCEDURE = 57583
const REGNAMESPACE = 57584
const REGTYPE = 57585
const REMOVE_PATH = 57586
const RENAME = 57587
const REPEATABLE = 57588
const RELEASE = 57589
const RESET = 57590
const RESTORE = 57591
const RESTRICT = 57592
const RESUME = 57593
const RETURNING = 57594
const REVOKE = 57595
const RIGHT = 57596
const ROLLBACK = 57597
const ROLLUP = 57598
const ROW = 57599
const ROWS = 57600
const RSHIFT = 57601
const SAVEPOINT = 57602
const SCATTER = 57603
const SEARCH = 57604
const SECOND = 57605
const SELECT = 57606
const SEQUENCES = 57607
const SERIAL = 57608
const SERIALIZABLE = 57609
const SESSION = 57610
const SESSIONS = 57611
const SESSION_USER = 57612
const SET = 57613
const SETTING = 57614
const SETTINGS = 57615
const SHOW = 57616
const SIMILAR = 57617
const SIMPLE = 57618
const SMALLINT = 57619
const SMALLSERIAL = 57620
const SNAPSHOT = 57621
const SOME = 57622
const SPLIT = 57623
const SQL = 57624
const START = 57625
const STATUS = 57626
const STDIN = 57627
const STRICT = 57628
const STRING = 57629
const STORE = 57630
const STORING = 57631
const SUBSTRING = 57632
const SYMMETRIC = 57633
const SYSTEM = 57634
const TABLE = 57635
const TABLES = 57636
const TEMP = 57637
const TEMPLATE = 57638
const TEMPORARY = 57639
const TESTING_RANGES = 57640
const TESTING_RELOCATE = 57641
const TEXT = 57642
const THEN = 57643
const TIME = 57644
const TIMESTAMP = 57645
const TIMESTAMPTZ = 57646
const TO = 57647
const TRAILING = 57648
const TRACE = 57649
const TRANSACTION = 57650
const TREAT = 57651
const TRIM = 57652
const TRUE = 57653
const TRUNCATE = 57654
const TYPE = 57655
const UNBOUNDED = 57656
const UNCOMMITTED = 57657
const UNION = 57658
const UNIQUE = 57659
const UNKNOWN = 57660
const UPDATE = 57661
const UPSERT = 57662
const USE = 57663
const USER = 57664
const USERS = 57665
const USING = 57666
const UUID = 57667
const VALID = 57668
const VALIDATE = 57669
const VALUE = 57670
const VALUES = 57671
const VARCHAR = 57672
const VARIADIC = 57673
const VIEW = 57674
const VARYING = 57675
const WHEN = 57676
const WHERE = 57677
const WINDOW = 57678
const WITH = 57679
const WITHIN = 57680
const WITHOUT = 57681
const WRITE = 57682
const YEAR = 57683
const ZONE = 57684
const NOT_LA = 57685
const WITH_LA = 57686
const AS_LA = 57687
const CONTAINED_BY = 57688
const HAS_SOME_KEY = 57689
const HAS_ALL_KEYS = 57690
const POSTFIXOP = 57691
const UMINUS = 57692
const HELPTOKEN = 57693

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"HAS_SOME",
	"HAS_ALL",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"HAS_SOME_KEY",
	"HAS_ALL_KEYS",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6576

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 53,
	371, 53,
	-2, 677,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 46,
	149, 529,
	-2, 0,
	-1, 57,
	93, 677,
	153, 677,
	319, 677,
	320, 677,
	-2, 0,
	-1, 67,
	104, 652,
	113, 652,
	161, 652,
	180, 652,
	205, 652,
	211, 652,
	316, 652,
	-2, 641,
	-1, 99,
	4, 679,
	20, 679,
	21, 679,
	23, 679,
	28, 679,
	33, 679,
	34, 679,
	35, 679,
	36, 679,
	37, 679,
	38, 679,
	39, 679,
	40, 679,
	41, 679,
	42, 679,
	44, 679,
	45, 679,
	46, 679,
	47, 679,
	48, 679,
	51, 679,
	52, 679,
	53, 679,
	55, 679,
	56, 679,
	60, 679,
	61, 679,
	62, 679,
	64, 679,
	66, 679,
	68, 679,
	69, 679,
	72, 679,
	73, 679,
	74, 679,
	82, 679,
	83, 679,
	84, 679,
	85, 679,
	86, 679,
	87, 679,
	88, 679,
	89, 679,
	91, 679,
	93, 679,
	95, 679,
	98, 679,
	99, 679,
	101, 679,
	105, 679,
	106, 679,
	107, 679,
	108, 679,
	109, 679,
	110, 679,
	118, 679,
	119, 679,
	120, 679,
	121, 679,
	122, 679,
	124, 679,
	126, 679,
	131, 679,
	132, 679,
	134, 679,
	137, 679,
	138, 679,
	141, 679,
	142, 679,
	143, 679,
	144, 679,
	147, 679,
	148, 679,
	150, 679,
	153, 679,
	154, 679,
	155, 679,
	156, 679,
	157, 679,
	158, 679,
	159, 679,
	160, 679,
	162, 679,
	165, 679,
	166, 679,
	167, 679,
	169, 679,
	170, 679,
	171, 679,
	173, 679,
	174, 679,
	176, 679,
	178, 679,
	181, 679,
	184, 679,
	186, 679,
	187, 679,
	188, 679,
	189, 679,
	190, 679,
	191, 679,
	193, 679,
	194, 679,
	195, 679,
	196, 679,
	200, 679,
	201, 679,
	202, 679,
	203, 679,
	204, 679,
	206, 679,
	208, 679,
	209, 679,
	212, 679,
	213, 679,
	215, 679,
	217, 679,
	218, 679,
	219, 679,
	220, 679,
	221, 679,
	222, 679,
	224, 679,
	225, 679,
	226, 679,
	227, 679,
	228, 679,
	230, 679,
	231, 679,
	232, 679,
	233, 679,
	234, 679,
	235, 679,
	236, 679,
	237, 679,
	239, 679,
	240, 679,
	241, 679,
	242, 679,
	243, 679,
	245, 679,
	246, 679,
	247, 679,
	248, 679,
	249, 679,
	250, 679,
	251, 679,
	253, 679,
	255, 679,
	256, 679,
	257, 679,
	258, 679,
	260, 679,
	261, 679,
	262, 679,
	263, 679,
	265, 679,
	266, 679,
	267, 679,
	268, 679,
	269, 679,
	271, 679,
	272, 679,
	273, 679,
	274, 679,
	276, 679,
	277, 679,
	278, 679,
	279, 679,
	281, 679,
	282, 679,
	283, 679,
	284, 679,
	285, 679,
	286, 679,
	287, 679,
	288, 679,
	289, 679,
	290, 679,
	292, 679,
	294, 679,
	295, 679,
	296, 679,
	297, 679,
	298, 679,
	299, 679,
	300, 679,
	302, 679,
	303, 679,
	304, 679,
	307, 679,
	308, 679,
	309, 679,
	310, 679,
	312, 679,
	313, 679,
	314, 679,
	315, 679,
	318, 679,
	319, 679,
	320, 679,
	321, 679,
	323, 679,
	325, 679,
	326, 679,
	327, 679,
	328, 679,
	329, 679,
	330, 679,
	333, 679,
	338, 679,
	339, 679,
	340, 679,
	341, 679,
	342, 679,
	-2, 0,
	-1, 117,
	104, 651,
	113, 651,
	161, 651,
	180, 651,
	205, 651,
	211, 651,
	316, 651,
	-2, 644,
	-1, 122,
	1, 578,
	165, 578,
	230, 578,
	234, 578,
	370, 578,
	371, 578,
	-2, 0,
	-1, 124,
	1, 578,
	370, 578,
	371, 578,
	-2, 0,
	-1, 125,
	1, 578,
	370, 578,
	371, 578,
	-2, 0,
	-1, 126,
	1, 582,
	370, 582,
	371, 582,
	-2, 0,
	-1, 133,
	4, 685,
	5, 685,
	6, 685,
	7, 685,
	8, 685,
	9, 685,
	20, 685,
	21, 685,
	23, 685,
	28, 685,
	29, 685,
	33, 685,
	34, 685,
	35, 685,
	36, 685,
	37, 685,
	38, 685,
	39, 685,
	40, 685,
	41, 685,
	42, 685,
	44, 685,
	45, 685,
	46, 685,
	47, 685,
	48, 685,
	49, 685,
	50, 685,
	51, 685,
	52, 685,
	53, 685,
	55, 685,
	56, 685,
	58, 685,
	60, 685,
	61, 685,
	62, 685,
	64, 685,
	66, 685,
	68, 685,
	69, 685,
	71, 685,
	72, 685,
	73, 685,
	74, 685,
	76, 685,
	77, 685,
	78, 685,
	80, 685,
	81, 685,
	82, 685,
	83, 685,
	84, 685,
	85, 685,
	86, 685,
	87, 685,
	88, 685,
	89, 685,
	91, 685,
	93, 685,
	95, 685,
	98, 685,
	99, 685,
	101, 685,
	105, 685,
	106, 685,
	107, 685,
	108, 685,
	109, 685,
	110, 685,
	111, 685,
	112, 685,
	118, 685,
	119, 685,
	120, 685,
	121, 685,
	122, 685,
	124, 685,
	126, 685,
	129, 685,
	131, 685,
	132, 685,
	134, 685,
	137, 685,
	138, 685,
	141, 685,
	142, 685,
	143, 685,
	144, 685,
	145, 685,
	147, 685,
	148, 685,
	150, 685,
	152, 685,
	153, 685,
	154, 685,
	155, 685,
	156, 685,
	157, 685,
	158, 685,
	159, 685,
	160, 685,
	162, 685,
	164, 685,
	165, 685,
	166, 685,
	167, 685,
	168, 685,
	169, 685,
	170, 685,
	171, 685,
	173, 685,
	174, 685,
	176, 685,
	177, 685,
	178, 685,
	179, 685,
	181, 685,
	184, 685,
	186, 685,
	187, 685,
	188, 685,
	189, 685,
	190, 685,
	191, 685,
	192, 685,
	193, 685,
	194, 685,
	195, 685,
	196, 685,
	197, 685,
	199, 685,
	200, 685,
	201, 685,
	202, 685,
	203, 685,
	204, 685,
	206, 685,
	209, 685,
	212, 685,
	213, 685,
	214, 685,
	215, 685,
	216, 685,
	217, 685,
	218, 685,
	219, 685,
	220, 685,
	221, 685,
	222, 685,
	224, 685,
	225, 685,
	226, 685,
	227, 685,
	228, 685,
	230, 685,
	231, 685,
	232, 685,
	233, 685,
	234, 685,
	235, 685,
	236, 685,
	237, 685,
	239, 685,
	240, 685,
	241, 685,
	242, 685,
	243, 685,
	245, 685,
	246, 685,
	247, 685,
	248, 685,
	249, 685,
	250, 685,
	251, 685,
	253, 685,
	254, 685,
	255, 685,
	256, 685,
	257, 685,
	258, 685,
	260, 685,
	261, 685,
	262, 685,
	263, 685,
	265, 685,
	266, 685,
	267, 685,
	268, 685,
	269, 685,
	270, 685,
	271, 685,
	272, 685,
	273, 685,
	274, 685,
	275, 685,
	276, 685,
	277, 685,
	278, 685,
	279, 685,
	281, 685,
	282, 685,
	283, 685,
	284, 685,
	285, 685,
	286, 685,
	287, 685,
	288, 685,
	289, 685,
	290, 685,
	292, 685,
	294, 685,
	295, 685,
	296, 685,
	297, 685,
	298, 685,
	299, 685,
	300, 685,
	302, 685,
	303, 685,
	304, 685,
	307, 685,
	308, 685,
	309, 685,
	310, 685,
	311, 685,
	312, 685,
	313, 685,
	314, 685,
	315, 685,
	318, 685,
	319, 685,
	320, 685,
	321, 685,
	322, 685,
	323, 685,
	325, 685,
	326, 685,
	327, 685,
	328, 685,
	329, 685,
	330, 685,
	333, 685,
	338, 685,
	339, 685,
	340, 685,
	341, 685,
	342, 685,
	343, 685,
	353, 685,
	358, 685,
	359, 685,
	360, 685,
	367, 685,
	373, 685,
	-2, 0,
	-1, 136,
	1, 53,
	371, 53,
	-2, 677,
	-1, 493,
	128, 1286,
	305, 1286,
	348, 1286,
	369, 1286,
	-2, 0,
	-1, 494,
	128, 1239,
	305, 1239,
	348, 1239,
	369, 1239,
	-2, 0,
	-1, 496,
	128, 1344,
	305, 1344,
	348, 1344,
	369, 1344,
	-2, 0,
	-1, 498,
	128, 1366,
	305, 1366,
	348, 1366,
	369, 1366,
	-2, 0,
	-1, 505,
	128, 1291,
	305, 1291,
	348, 1291,
	369, 1291,
	-2, 320,
	-1, 531,
	1, 397,
	366, 397,
	368, 397,
	370, 397,
	371, 397,
	-2, 0,
	-1, 532,
	1, 444,
	125, 444,
	366, 444,
	368, 444,
	370, 444,
	371, 444,
	-2, 0,
	-1, 538,
	1, 411,
	366, 411,
	368, 411,
	370, 411,
	371, 411,
	-2, 0,
	-1, 540,
	1, 415,
	366, 415,
	368, 415,
	370, 415,
	371, 415,
	-2, 0,
	-1, 543,
	1, 423,
	366, 423,
	368, 423,
	370, 423,
	371, 423,
	-2, 0,
	-1, 544,
	1, 428,
	366, 428,
	368, 428,
	370, 428,
	371, 428,
	-2, 0,
	-1, 547,
	1, 438,
	366, 438,
	368, 438,
	370, 438,
	371, 438,
	-2, 0,
	-1, 566,
	113, 687,
	180, 687,
	205, 687,
	-2, 647,
	-1, 569,
	113, 686,
	180, 686,
	205, 686,
	-2, 645,
	-1, 626,
	367, 1217,
	-2, 1210,
	-1, 627,
	367, 1218,
	-2, 1211,
	-1, 633,
	5, 864,
	367, 864,
	-2, 1418,
	-1, 658,
	5, 823,
	-2, 1387,
	-1, 659,
	5, 858,
	367, 858,
	-2, 1389,
	-1, 660,
	5, 833,
	-2, 1390,
	-1, 661,
	5, 832,
	-2, 1391,
	-1, 662,
	5, 858,
	367, 858,
	-2, 1394,
	-1, 663,
	5, 858,
	367, 858,
	-2, 1395,
	-1, 664,
	5, 859,
	-2, 1398,
	-1, 665,
	5, 815,
	-2, 1399,
	-1, 666,
	5, 815,
	-2, 1400,
	-1, 667,
	5, 840,
	-2, 1404,
	-1, 668,
	5, 825,
	-2, 1405,
	-1, 669,
	5, 826,
	-2, 1406,
	-1, 670,
	5, 816,
	-2, 1412,
	-1, 671,
	5, 817,
	-2, 1413,
	-1, 672,
	5, 818,
	-2, 1414,
	-1, 673,
	5, 819,
	-2, 1415,
	-1, 674,
	5, 820,
	-2, 1416,
	-1, 675,
	5, 821,
	-2, 1417,
	-1, 676,
	5, 815,
	-2, 1422,
	-1, 677,
	5, 824,
	-2, 1427,
	-1, 678,
	5, 822,
	-2, 1430,
	-1, 679,
	5, 856,
	367, 856,
	-2, 1432,
	-1, 680,
	5, 860,
	-2, 1435,
	-1, 681,
	5, 862,
	-2, 1436,
	-1, 682,
	5, 855,
	367, 855,
	-2, 1441,
	-1, 778,
	221, 675,
	-2, 522,
	-1, 792,
	207, 1214,
	-2, 0,
	-1, 827,
	1, 209,
	366, 209,
	368, 209,
	370, 209,
	371, 209,
	-2, 650,
	-1, 830,
	4, 1440,
	10, 1440,
	11, 1440,
	13, 1440,
	14, 1440,
	15, 1440,
	16, 1440,
	17, 1440,
	18, 1440,
	20, 1440,
	21, 1440,
	23, 1440,
	26, 1440,
	28, 1440,
	30, 1440,
	33, 1440,
	34, 1440,
	35, 1440,
	36, 1440,
	37, 1440,
	38, 1440,
	39, 1440,
	40, 1440,
	41, 1440,
	42, 1440,
	44, 1440,
	45, 1440,
	46, 1440,
	47, 1440,
	48, 1440,
	51, 1440,
	52, 1440,
	53, 1440,
	55, 1440,
	56, 1440,
	57, 1440,
	60, 1440,
	61, 1440,
	62, 1440,
	63, 1440,
	64, 1440,
	66, 1440,
	67, 1440,
	68, 1440,
	69, 1440,
	71, 1440,
	72, 1440,
	73, 1440,
	74, 1440,
	82, 1440,
	83, 1440,
	84, 1440,
	85, 1440,
	86, 1440,
	87, 1440,
	88, 1440,
	89, 1440,
	91, 1440,
	93, 1440,
	95, 1440,
	98, 1440,
	99, 1440,
	101, 1440,
	105, 1440,
	106, 1440,
	107, 1440,
	108, 1440,
	109, 1440,
	110, 1440,
	114, 1440,
	115, 1440,
	116, 1440,
	117, 1440,
	118, 1440,
	119, 1440,
	120, 1440,
	121, 1440,
	122, 1440,
	123, 1440,
	124, 1440,
	126, 1440,
	129, 1440,
	131, 1440,
	132, 1440,
	134, 1440,
	137, 1440,
	138, 1440,
	141, 1440,
	142, 1440,
	143, 1440,
	144, 1440,
	145, 1440,
	146, 1440,
	147, 1440,
	148, 1440,
	150, 1440,
	152, 1440,
	153, 1440,
	154, 1440,
	155, 1440,
	156, 1440,
	157, 1440,
	158, 1440,
	159, 1440,
	160, 1440,
	162, 1440,
	164, 1440,
	165, 1440,
	166, 1440,
	167, 1440,
	168, 1440,
	169, 1440,
	170, 1440,
	171, 1440,
	173, 1440,
	174, 1440,
	176, 1440,
	177, 1440,
	178, 1440,
	179, 1440,
	181, 1440,
	184, 1440,
	185, 1440,
	186, 1440,
	187, 1440,
	188, 1440,
	189, 1440,
	190, 1440,
	191, 1440,
	192, 1440,
	193, 1440,
	194, 1440,
	195, 1440,
	196, 1440,
	200, 1440,
	201, 1440,
	202, 1440,
	203, 1440,
	204, 1440,
	206, 1440,
	209, 1440,
	210, 1440,
	212, 1440,
	213, 1440,
	215, 1440,
	217, 1440,
	218, 1440,
	219, 1440,
	220, 1440,
	221, 1440,
	222, 1440,
	224, 1440,
	225, 1440,
	226, 1440,
	227, 1440,
	228, 1440,
	230, 1440,
	231, 1440,
	232, 1440,
	233, 1440,
	234, 1440,
	235, 1440,
	236, 1440,
	237, 1440,
	239, 1440,
	240, 1440,
	241, 1440,
	242, 1440,
	243, 1440,
	244, 1440,
	245, 1440,
	246, 1440,
	247, 1440,
	248, 1440,
	249, 1440,
	250, 1440,
	251, 1440,
	253, 1440,
	254, 1440,
	255, 1440,
	256, 1440,
	257, 1440,
	258, 1440,
	259, 1440,
	260, 1440,
	261, 1440,
	262, 1440,
	263, 1440,
	265, 1440,
	266, 1440,
	267, 1440,
	268, 1440,
	269, 1440,
	271, 1440,
	272, 1440,
	273, 1440,
	274, 1440,
	275, 1440,
	276, 1440,
	277, 1440,
	278, 1440,
	279, 1440,
	281, 1440,
	282, 1440,
	283, 1440,
	284, 1440,
	285, 1440,
	286, 1440,
	287, 1440,
	288, 1440,
	289, 1440,
	290, 1440,
	292, 1440,
	294, 1440,
	295, 1440,
	296, 1440,
	297, 1440,
	298, 1440,
	299, 1440,
	300, 1440,
	302, 1440,
	303, 1440,
	304, 1440,
	307, 1440,
	308, 1440,
	309, 1440,
	310, 1440,
	312, 1440,
	313, 1440,
	314, 1440,
	315, 1440,
	318, 1440,
	319, 1440,
	320, 1440,
	321, 1440,
	323, 1440,
	325, 1440,
	326, 1440,
	327, 1440,
	328, 1440,
	329, 1440,
	330, 1440,
	333, 1440,
	338, 1440,
	339, 1440,
	340, 1440,
	341, 1440,
	342, 1440,
	343, 1440,
	344, 1440,
	346, 1440,
	347, 1440,
	348, 1440,
	349, 1440,
	350, 1440,
	351, 1440,
	352, 1440,
	353, 1440,
	355, 1440,
	356, 1440,
	357, 1440,
	358, 1440,
	359, 1440,
	360, 1440,
	361, 1440,
	362, 1440,
	363, 1440,
	365, 1440,
	368, 1440,
	369, 1440,
	372, 1440,
	373, 1440,
	-2, 0,
	-1, 844,
	128, 1344,
	305, 1344,
	348, 1344,
	369, 1344,
	-2, 0,
	-1, 861,
	128, 1366,
	305, 1366,
	348, 1366,
	369, 1366,
	-2, 0,
	-1, 862,
	165, 590,
	230, 590,
	234, 590,
	-2, 308,
	-1, 927,
	113, 686,
	180, 686,
	205, 686,
	-2, 648,
	-1, 1006,
	104, 652,
	113, 652,
	161, 652,
	180, 652,
	205, 652,
	211, 652,
	316, 652,
	-2, 993,
	-1, 1016,
	367, 1194,
	-2, 1182,
	-1, 1034,
	368, 1106,
	-2, 0,
	-1, 1058,
	165, 590,
	230, 590,
	234, 590,
	-2, 585,
	-1, 1086,
	368, 1106,
	-2, 0,
	-1, 1090,
	104, 652,
	113, 652,
	161, 652,
	180, 652,
	205, 652,
	211, 652,
	316, 652,
	-2, 748,
	-1, 1314,
	165, 590,
	230, 590,
	234, 590,
	-2, 310,
	-1, 1412,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 899,
	-1, 1413,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 900,
	-1, 1414,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 901,
	-1, 1415,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 902,
	-1, 1416,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 903,
	-1, 1417,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 904,
	-1, 1418,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 905,
	-1, 1419,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 906,
	-1, 1428,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 915,
	-1, 1429,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 916,
	-1, 1430,
	13, 0,
	14, 0,
	15, 0,
	67, 0,
	346, 0,
	347, 0,
	348, 0,
	349, 0,
	350, 0,
	351, 0,
	352, 0,
	-2, 917,
	-1, 1433,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 922,
	-1, 1439,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 924,
	-1, 1441,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 928,
	-1, 1442,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 929,
	-1, 1443,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 930,
	-1, 1444,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 931,
	-1, 1513,
	128, 1117,
	367, 1217,
	-2, 1210,
	-1, 1514,
	128, 1118,
	-2, 1383,
	-1, 1515,
	128, 1119,
	-2, 1290,
	-1, 1516,
	128, 1120,
	-2, 1254,
	-1, 1517,
	128, 1121,
	-2, 1270,
	-1, 1518,
	128, 1122,
	-2, 1289,
	-1, 1519,
	128, 1123,
	-2, 1341,
	-1, 1595,
	1, 749,
	71, 749,
	104, 749,
	113, 749,
	129, 749,
	133, 749,
	135, 749,
	152, 749,
	161, 749,
	168, 749,
	177, 749,
	180, 749,
	192, 749,
	205, 749,
	207, 749,
	211, 749,
	252, 749,
	254, 749,
	316, 749,
	324, 749,
	335, 749,
	336, 749,
	345, 749,
	366, 749,
	368, 749,
	370, 749,
	371, 749,
	372, 749,
	-2, 748,
	-1, 1737,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 923,
	-1, 1738,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 925,
	-1, 1743,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 926,
	-1, 1761,
	216, 1077,
	-2, 1079,
	-1, 1931,
	221, 675,
	-2, 522,
	-1, 1987,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 927,
	-1, 1992,
	164, 0,
	-2, 943,
	-1, 2001,
	216, 1078,
	-2, 1080,
	-1, 2043,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 970,
	-1, 2044,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 971,
	-1, 2045,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 972,
	-1, 2049,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 976,
	-1, 2050,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 977,
	-1, 2051,
	13, 0,
	14, 0,
	15, 0,
	346, 0,
	347, 0,
	348, 0,
	-2, 978,
	-1, 2176,
	164, 0,
	-2, 944,
	-1, 2179,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 947,
	-1, 2180,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 949,
	-1, 2296,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 948,
	-1, 2297,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	145, 0,
	146, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 950,
	-1, 2304,
	164, 0,
	-2, 979,
	-1, 2381,
	164, 0,
	-2, 980,
	-1, 2458,
	36, 0,
	145, 0,
	179, 0,
	275, 0,
	343, 0,
	353, 0,
	-2, 1386,
}

const sqlPrivate = 57344

const sqlLast = 42361

var sqlAct = [...]int{

	627, 2131, 2457, 2466, 2432, 1659, 2505, 2467, 2330, 2468,
	1667, 1213, 570, 2386, 2020, 2456, 2277, 1969, 1308, 1731,
	590, 66, 781, 586, 1638, 1935, 2230, 2164, 2142, 2244,
	2166, 730, 1937, 2102, 1221, 603, 772, 617, 1256, 2103,
	174, 2310, 1637, 1590, 174, 1656, 625, 1943, 174, 2158,
	1668, 1827, 1875, 624, 1854, 620, 1119, 174, 450, 25,
	1084, 1216, 174, 174, 2210, 1067, 174, 1215, 1641, 174,
	1862, 2073, 1599, 1608, 1591, 578, 116, 174, 434, 1493,
	1234, 1826, 1391, 1772, 1012, 1631, 1468, 1642, 1727, 930,
	1096, 1469, 1715, 1339, 865, 1098, 597, 504, 1542, 1068,
	1456, 1477, 1453, 1470, 1209, 1335, 736, 431, 1386, 864,
	817, 1487, 1309, 1044, 783, 1639, 814, 1048, 1661, 1088,
	807, 828, 1645, 739, 1075, 1577, 1564, 718, 174, 174,
	1509, 484, 1001, 116, 931, 929, 174, 596, 1338, 619,
	117, 575, 165, 462, 497, 1228, 1058, 804, 170, 716,
	501, 1057, 1093, 525, 2245, 935, 2087, 1760, 1236, 2088,
	1236, 1660, 174, 174, 174, 174, 574, 1236, 574, 174,
	174, 2501, 118, 2482, 2478, 1118, 1257, 2243, 1682, 2477,
	2474, 2454, 2453, 1682, 1118, 1698, 1698, 2427, 2422, 2418,
	1085, 1691, 2291, 1118, 760, 25, 38, 2410, 1952, 2383,
	2361, 2243, 569, 1691, 2243, 476, 2358, 39, 1985, 2356,
	1118, 1682, 116, 2243, 2341, 584, 1115, 2340, 1118, 2318,
	42, 2243, 2315, 1118, 2298, 2265, 1118, 2263, 1691, 1682,
	2242, 1682, 2223, 2178, 2243, 2157, 1118, 1691, 2152, 1636,
	2428, 1764, 1636, 456, 946, 947, 1632, 1765, 1953, 2083,
	986, 987, 988, 2084, 1996, 1963, 1632, 567, 1682, 1924,
	38, 1698, 1923, 1566, 946, 947, 1118, 949, 744, 748,
	990, 39, 55, 2076, 579, 754, 2291, 2076, 720, 56,
	685, 57, 1565, 1698, 42, 946, 947, 949, 733, 566,
	1851, 948, 1844, 1980, 1118, 1842, 1845, 968, 1841, 1682,
	602, 1597, 1682, 1664, 2056, 946, 947, 456, 949, 1840,
	1998, 948, 1702, 1682, 59, 1690, 1682, 1681, 1635, 1691,
	1571, 1682, 1636, 722, 1570, 723, 1249, 1682, 949, 1771,
	1250, 1118, 948, 1924, 1730, 1713, 55, 133, 968, 1317,
	1062, 1472, 758, 56, 393, 57, 846, 136, 971, 972,
	973, 974, 948, 843, 2246, 1336, 842, 954, 133, 841,
	1237, 840, 1237, 839, 838, 837, 135, 836, 835, 1237,
	834, 833, 832, 831, 724, 721, 565, 954, 59, 983,
	991, 564, 563, 562, 561, 557, 556, 135, 555, 971,
	972, 973, 974, 523, 522, 60, 521, 520, 954, 174,
	786, 174, 134, 174, 519, 518, 174, 684, 577, 517,
	127, 516, 174, 981, 515, 514, 513, 128, 954, 969,
	512, 120, 62, 134, 63, 174, 174, 174, 174, 174,
	511, 510, 509, 508, 786, 507, 737, 133, 492, 969,
	119, 1717, 491, 1490, 457, 490, 489, 95, 488, 422,
	421, 420, 419, 821, 39, 575, 418, 396, 174, 60,
	969, 119, 746, 750, 764, 756, 135, 42, 389, 388,
	159, 174, 158, 1797, 1798, 157, 156, 133, 975, 155,
	969, 154, 1242, 153, 1235, 120, 62, 174, 63, 1870,
	1689, 1370, 1952, 970, 1491, 152, 776, 174, 790, 151,
	150, 133, 134, 149, 148, 1357, 135, 1565, 457, 984,
	127, 95, 778, 970, 147, 146, 145, 128, 806, 975,
	144, 143, 810, 810, 142, 141, 1812, 140, 786, 139,
	135, 138, 137, 1342, 970, 1506, 1089, 1504, 1502, 877,
	119, 2284, 134, 1492, 1489, 2500, 811, 2473, 829, 771,
	127, 1500, 2455, 2437, 970, 2378, 2359, 128, 2209, 174,
	942, 59, 2208, 2204, 175, 2203, 134, 2196, 847, 2195,
	2194, 2190, 1797, 1798, 127, 2189, 2188, 982, 2187, 928,
	1663, 128, 632, 2181, 2163, 2070, 1803, 985, 2065, 959,
	957, 958, 950, 951, 952, 953, 955, 956, 2064, 875,
	2063, 2006, 769, 1922, 119, 1693, 1882, 1878, 1849, 959,
	957, 958, 950, 951, 952, 953, 955, 956, 1926, 1494,
	1797, 1798, 1464, 575, 1846, 1834, 946, 947, 1825, 1796,
	959, 957, 958, 950, 951, 952, 953, 955, 956, 1793,
	880, 859, 60, 1253, 1792, 862, 1790, 683, 1813, 949,
	927, 957, 958, 950, 951, 952, 953, 955, 956, 1777,
	1776, 1761, 1595, 1020, 942, 926, 764, 731, 120, 62,
	133, 63, 1087, 948, 1013, 941, 1004, 946, 947, 1086,
	878, 1220, 2022, 2445, 133, 1803, 2413, 2407, 2406, 2405,
	2397, 457, 2395, 2373, 95, 2372, 2371, 1488, 2327, 135,
	949, 2283, 2306, 2292, 2271, 1008, 1337, 1726, 2249, 2201,
	2140, 2137, 750, 135, 2136, 1725, 174, 2134, 174, 567,
	2111, 2110, 1814, 1696, 948, 2091, 2079, 756, 938, 939,
	1991, 1913, 1465, 1803, 943, 134, 1908, 1895, 1967, 954,
	1894, 174, 174, 127, 1880, 1850, 1824, 687, 1786, 134,
	128, 566, 1785, 1782, 1757, 1066, 1073, 127, 786, 174,
	1752, 1458, 575, 1049, 128, 1122, 1052, 1016, 1582, 1554,
	1498, 174, 1212, 119, 732, 1065, 1046, 1047, 1056, 1042,
	1041, 1040, 1039, 1038, 1050, 1037, 1036, 119, 1035, 1034,
	954, 1033, 1071, 174, 1053, 1813, 1032, 1031, 1030, 174,
	1029, 174, 1219, 174, 946, 947, 1028, 174, 1211, 1027,
	1026, 116, 1025, 1024, 1017, 1005, 1004, 858, 1808, 1806,
	1807, 1799, 1800, 1801, 1802, 1804, 1805, 949, 850, 825,
	2389, 2290, 2183, 2162, 2086, 1013, 1895, 2082, 1763, 1583,
	1965, 770, 1002, 1083, 1087, 174, 174, 1061, 1797, 1798,
	1868, 948, 786, 1106, 174, 1225, 1938, 174, 1059, 750,
	2294, 2293, 874, 2287, 1091, 1701, 2089, 1063, 1954, 1814,
	1116, 686, 1632, 1104, 1089, 2311, 1054, 924, 1122, 1022,
	1848, 1055, 1847, 174, 1736, 871, 1323, 1970, 174, 1217,
	1660, 1105, 1239, 174, 174, 1241, 174, 1478, 174, 1244,
	174, 1505, 174, 1503, 1501, 806, 1263, 1117, 1700, 1490,
	2023, 1797, 1798, 174, 1768, 1045, 1948, 1499, 397, 174,
	174, 2098, 1801, 1802, 1804, 1805, 2440, 1332, 1686, 1247,
	399, 2497, 1797, 1798, 1343, 1815, 1816, 1817, 2417, 408,
	1254, 1694, 1797, 1798, 2257, 174, 1227, 918, 1230, 1122,
	713, 402, 1087, 1703, 1977, 1381, 2351, 2350, 2349, 2498,
	1491, 2348, 1312, 2268, 787, 1808, 1806, 1807, 1799, 1800,
	1801, 1802, 1804, 1805, 950, 951, 952, 953, 955, 956,
	1344, 910, 1099, 116, 1100, 1812, 919, 2126, 1251, 859,
	1252, 711, 2124, 709, 1609, 1099, 1310, 1100, 787, 409,
	402, 707, 1263, 1263, 704, 1400, 1369, 1311, 1314, 1492,
	1489, 1328, 1340, 2238, 2095, 1358, 2094, 1781, 1324, 1780,
	423, 1373, 1779, 1778, 1803, 1019, 575, 952, 953, 955,
	956, 575, 732, 1739, 1685, 1351, 1368, 1628, 1348, 872,
	1624, 737, 1094, 1622, 1352, 1803, 1353, 788, 1354, 2239,
	1355, 1440, 1356, 1211, 1528, 1803, 160, 1060, 757, 2416,
	1101, 174, 1601, 174, 1371, 1372, 174, 1612, 2122, 1362,
	1364, 1210, 1601, 1101, 1558, 1557, 567, 174, 1600, 567,
	567, 788, 873, 1401, 1657, 1494, 1122, 1367, 559, 174,
	1563, 471, 787, 174, 2129, 1390, 174, 1966, 1475, 750,
	174, 1229, 427, 1229, 174, 1473, 1527, 1813, 1382, 174,
	2130, 1383, 1384, 1008, 575, 174, 1122, 1813, 1099, 174,
	1100, 1480, 1919, 1392, 1399, 2332, 1537, 1207, 1455, 2451,
	879, 1296, 550, 1466, 1512, 1512, 1525, 1463, 163, 1231,
	1545, 1455, 1585, 2113, 1549, 1550, 1552, 945, 1478, 1494,
	583, 417, 857, 946, 947, 2489, 2234, 956, 2235, 2470,
	398, 917, 1520, 1488, 1620, 411, 410, 426, 1347, 1611,
	1626, 412, 1630, 1613, 1615, 788, 949, 1945, 1588, 1327,
	1326, 1814, 1336, 1333, 403, 2497, 904, 1602, 2237, 399,
	1561, 1814, 1560, 550, 1915, 573, 1101, 2240, 1569, 400,
	948, 1805, 1575, 164, 1584, 1579, 1580, 1976, 1910, 398,
	1618, 583, 551, 174, 1109, 1623, 1091, 923, 1462, 1906,
	2016, 174, 1605, 1460, 905, 1629, 1107, 1296, 1296, 1574,
	481, 1366, 174, 403, 174, 2513, 174, 1043, 399, 174,
	883, 174, 1074, 174, 174, 1236, 174, 174, 400, 2471,
	460, 786, 572, 715, 2400, 174, 714, 1610, 1295, 1799,
	1800, 1801, 1802, 1804, 1805, 1330, 954, 2013, 1809, 1810,
	1811, 1680, 1946, 551, 1728, 1729, 2236, 1808, 1806, 1807,
	1799, 1800, 1801, 1802, 1804, 1805, 909, 1662, 1102, 1662,
	1799, 1800, 1801, 1802, 1804, 1805, 1494, 705, 463, 705,
	1078, 1102, 574, 1978, 1651, 2355, 2472, 706, 2120, 2488,
	705, 425, 2302, 1784, 2508, 2114, 2014, 1945, 1598, 552,
	1451, 468, 787, 1081, 914, 116, 999, 464, 969, 1123,
	1113, 116, 1594, 1674, 1688, 1449, 810, 1302, 810, 1076,
	428, 1578, 1097, 1122, 1437, 2333, 1112, 161, 1079, 1666,
	424, 174, 1706, 1677, 1295, 1295, 1331, 1683, 465, 1675,
	1678, 1676, 574, 1077, 1708, 829, 1110, 174, 174, 174,
	1687, 174, 1684, 413, 390, 1695, 868, 737, 1864, 560,
	552, 467, 470, 629, 1111, 1709, 162, 1741, 2170, 915,
	174, 1749, 1494, 737, 1697, 2469, 1596, 1707, 553, 1714,
	1454, 2496, 970, 2424, 750, 788, 1747, 571, 1050, 750,
	1053, 2487, 1124, 1445, 414, 756, 787, 944, 1047, 1046,
	459, 1446, 856, 1447, 1102, 1080, 1704, 1452, 2425, 2494,
	554, 934, 2276, 1262, 1078, 116, 891, 2514, 1654, 1346,
	460, 869, 1123, 916, 415, 870, 416, 1237, 853, 845,
	1918, 2199, 2519, 1435, 1438, 2343, 2342, 1081, 2325, 553,
	2506, 933, 1322, 2012, 2392, 2256, 2097, 1718, 1891, 884,
	1315, 1887, 2255, 1576, 1528, 1528, 1461, 1722, 1720, 863,
	575, 2253, 1079, 1724, 1744, 1655, 1226, 1434, 463, 1218,
	2052, 554, 466, 1770, 1745, 1863, 1214, 463, 1750, 788,
	958, 950, 951, 952, 953, 955, 956, 885, 2433, 1320,
	882, 468, 1876, 1123, 1074, 1378, 2507, 464, 1361, 1318,
	468, 1321, 2278, 933, 2143, 1124, 464, 2326, 932, 1262,
	1262, 1865, 1671, 1337, 1334, 1448, 1897, 2509, 391, 1742,
	1740, 774, 1450, 756, 756, 773, 1896, 469, 465, 1734,
	1528, 1528, 1528, 934, 575, 167, 1756, 465, 2200, 1080,
	1573, 2518, 1755, 1572, 479, 868, 473, 174, 1122, 1758,
	1852, 467, 1078, 174, 174, 1858, 572, 174, 1767, 2254,
	467, 1877, 174, 1436, 803, 174, 1774, 1775, 2252, 1379,
	932, 2053, 801, 174, 1859, 1081, 1124, 2054, 1298, 174,
	174, 174, 792, 2132, 392, 174, 1746, 2269, 174, 1917,
	2211, 1076, 2074, 1748, 174, 174, 174, 174, 174, 1497,
	1079, 455, 33, 174, 1857, 174, 2323, 2305, 1872, 174,
	2198, 2128, 1828, 868, 1990, 1077, 1823, 174, 1831, 1832,
	1833, 892, 868, 1545, 1545, 1545, 913, 174, 1836, 174,
	1123, 174, 786, 786, 1920, 174, 1867, 2324, 1791, 174,
	454, 32, 1263, 3, 174, 1853, 174, 1719, 756, 1721,
	1751, 750, 1699, 174, 1634, 902, 453, 29, 1907, 900,
	1123, 1925, 466, 1927, 1912, 575, 174, 786, 898, 1627,
	1735, 466, 1888, 1883, 1298, 1298, 1263, 1080, 869, 786,
	174, 1621, 870, 1871, 452, 72, 922, 869, 1928, 1905,
	1829, 870, 1932, 762, 1950, 1881, 896, 763, 1359, 1856,
	894, 581, 1297, 550, 759, 1860, 1861, 612, 478, 1866,
	472, 921, 851, 1124, 1350, 174, 888, 469, 451, 71,
	1023, 583, 448, 21, 1496, 802, 469, 1263, 1929, 1941,
	2465, 449, 22, 800, 2430, 2227, 1956, 1957, 33, 1958,
	1959, 1528, 1528, 1124, 1930, 1931, 2118, 171, 1947, 447,
	27, 394, 912, 2116, 582, 404, 799, 1955, 1961, 2096,
	446, 19, 2003, 1892, 429, 174, 2008, 2009, 2010, 474,
	171, 1993, 1972, 482, 1973, 1974, 487, 32, 1975, 1962,
	742, 901, 1934, 551, 506, 899, 1658, 1979, 1263, 444,
	18, 1971, 1981, 29, 897, 787, 1652, 1892, 1297, 1297,
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
	1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1983,
	1528, 72, 895, 1650, 1263, 1263, 893, 1999, 1246, 1997,
	2002, 1245, 1243, 1263, 1263, 719, 719, 445, 17, 2015,
	2017, 2018, 887, 394, 1240, 1238, 174, 737, 1964, 1114,
	2024, 2026, 174, 737, 737, 71, 2029, 737, 2058, 21,
	2031, 174, 174, 438, 14, 1108, 1263, 1296, 22, 394,
	394, 752, 394, 908, 1103, 1936, 171, 761, 788, 1884,
	439, 15, 798, 437, 13, 2092, 27, 1123, 727, 2059,
	552, 2366, 443, 11, 2498, 2085, 2057, 19, 442, 44,
	703, 1296, 936, 1909, 2289, 174, 116, 174, 728, 2072,
	2077, 2288, 2078, 2109, 2127, 174, 1341, 1921, 786, 2066,
	2075, 2138, 2108, 1732, 2159, 2368, 18, 436, 45, 2107,
	441, 7, 1601, 174, 174, 1933, 2093, 2153, 1616, 1617,
	2145, 2135, 1601, 2151, 1210, 1392, 2027, 2100, 1614, 2144,
	2402, 174, 1296, 1210, 1392, 2032, 440, 6, 2156, 2121,
	2246, 174, 2117, 886, 2119, 458, 1122, 580, 2147, 553,
	1124, 2380, 2148, 2133, 17, 2212, 937, 940, 2090, 2139,
	1625, 2146, 729, 2154, 2172, 1619, 1733, 2062, 2155, 946,
	947, 2149, 2123, 2160, 1295, 2429, 907, 2125, 2081, 2274,
	14, 554, 1665, 174, 1653, 435, 5, 1649, 2238, 2504,
	2177, 2231, 949, 1296, 1562, 1984, 1313, 15, 1255, 2229,
	13, 2517, 2173, 2317, 2233, 708, 710, 1263, 1295, 11,
	480, 946, 947, 1797, 1798, 44, 948, 946, 947, 1711,
	1710, 2217, 2161, 2071, 2239, 2019, 1711, 1968, 1873, 1296,
	1296, 1843, 1712, 1559, 1556, 1555, 1486, 174, 1296, 1296,
	174, 2197, 1010, 2185, 45, 2011, 2232, 7, 1020, 1018,
	1122, 174, 174, 920, 911, 174, 174, 174, 948, 1295,
	906, 903, 889, 855, 2215, 1316, 1856, 558, 2331, 461,
	1349, 1296, 174, 6, 890, 1869, 2222, 174, 1581, 174,
	2423, 174, 174, 174, 2191, 174, 506, 174, 506, 786,
	793, 1783, 1123, 796, 2221, 2247, 2251, 174, 174, 394,
	2218, 2385, 2214, 2216, 2250, 786, 2219, 2267, 2109, 2301,
	1495, 1021, 506, 506, 394, 818, 761, 2108, 48, 2105,
	1295, 2272, 5, 606, 2107, 2228, 737, 2280, 2270, 2099,
	1644, 2234, 2109, 2235, 2275, 1643, 2279, 1125, 2109, 1325,
	2273, 2108, 628, 1511, 2226, 506, 1393, 2108, 2107, 1262,
	702, 630, 2281, 2295, 2107, 1260, 1295, 1295, 506, 2300,
	631, 2286, 1261, 2237, 1051, 1295, 1295, 618, 1258, 826,
	1669, 2285, 2240, 1329, 854, 1124, 787, 787, 1459, 1528,
	1476, 1766, 1014, 1262, 506, 598, 610, 609, 174, 2213,
	174, 1474, 1122, 174, 1259, 849, 1874, 1944, 1295, 2282,
	2307, 174, 1377, 1723, 1374, 1940, 2115, 1122, 401, 1794,
	824, 787, 1534, 1671, 737, 1526, 2314, 1263, 1522, 925,
	1528, 1072, 1000, 787, 2335, 1670, 876, 2337, 1951, 1692,
	1064, 1385, 1296, 726, 1262, 725, 1319, 174, 1705, 993,
	786, 2109, 1211, 2334, 174, 992, 394, 712, 2321, 2394,
	2108, 2236, 174, 174, 786, 786, 867, 2107, 866, 788,
	788, 1890, 2364, 2336, 2352, 2357, 2353, 2365, 2367, 2109,
	2512, 2363, 174, 1263, 2379, 2319, 2313, 174, 2108, 2369,
	2375, 2401, 2374, 2112, 174, 2107, 1528, 2439, 132, 129,
	1259, 1259, 2396, 2360, 788, 1262, 2316, 131, 130, 2346,
	2347, 1916, 75, 31, 30, 2382, 788, 2390, 94, 174,
	174, 93, 2399, 2339, 1298, 92, 174, 91, 2391, 90,
	2388, 2411, 1263, 89, 786, 2409, 88, 87, 2398, 174,
	2412, 1262, 1262, 786, 786, 86, 85, 737, 84, 83,
	1262, 1262, 1797, 1798, 82, 81, 2414, 80, 1298, 79,
	78, 2420, 2421, 575, 2415, 1073, 174, 77, 174, 1295,
	502, 174, 499, 1122, 74, 73, 2376, 2377, 946, 947,
	28, 2446, 24, 1262, 2448, 98, 23, 70, 2436, 2447,
	69, 2260, 2435, 26, 2452, 2264, 16, 10, 20, 174,
	53, 949, 2450, 54, 2345, 52, 51, 50, 12, 1298,
	115, 2462, 2463, 487, 2464, 719, 174, 2449, 114, 2481,
	2475, 2109, 174, 113, 112, 948, 111, 2479, 9, 2441,
	2108, 2486, 2483, 8, 97, 41, 174, 2107, 394, 394,
	2480, 2484, 2485, 40, 96, 109, 2495, 2493, 1297, 106,
	2499, 108, 1296, 105, 2426, 107, 171, 110, 102, 2503,
	103, 2502, 104, 101, 100, 1803, 37, 36, 394, 35,
	1298, 34, 787, 2511, 2515, 2510, 2, 2516, 1, 2442,
	2443, 2444, 1297, 0, 0, 0, 0, 0, 0, 0,
	1224, 954, 1797, 1798, 0, 0, 394, 0, 394, 0,
	394, 0, 0, 0, 1232, 0, 1298, 1298, 1296, 0,
	0, 2329, 0, 0, 0, 1298, 1298, 0, 0, 0,
	1123, 0, 0, 0, 0, 0, 0, 1813, 0, 0,
	1753, 1754, 0, 1297, 0, 0, 0, 0, 0, 0,
	0, 0, 506, 171, 1262, 0, 0, 2362, 1298, 0,
	0, 171, 0, 969, 506, 788, 0, 1296, 0, 0,
	0, 1248, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1295,
	506, 0, 0, 0, 0, 506, 0, 0, 0, 0,
	171, 506, 0, 506, 1297, 506, 0, 506, 0, 506,
	0, 1814, 0, 1124, 0, 1803, 1820, 1821, 1822, 0,
	1360, 0, 0, 0, 0, 0, 506, 506, 0, 0,
	0, 0, 0, 0, 1123, 0, 2408, 970, 0, 0,
	1297, 1297, 0, 0, 0, 1295, 0, 0, 0, 1297,
	1297, 0, 506, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 787, 0, 0, 0, 1813, 0, 0,
	0, 2438, 1297, 0, 0, 0, 0, 0, 0, 787,
	0, 0, 0, 588, 1295, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1806, 1807,
	1799, 1800, 1801, 1802, 1804, 1805, 0, 1124, 0, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1671, 0, 0, 0, 950, 951, 952, 953,
	955, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1814, 0, 0, 0, 0, 788, 0, 0, 0,
	0, 0, 0, 0, 1262, 0, 0, 0, 487, 0,
	719, 0, 788, 761, 0, 0, 1123, 0, 0, 0,
	0, 1082, 0, 0, 394, 0, 0, 0, 0, 0,
	0, 1123, 0, 0, 0, 0, 1593, 38, 0, 0,
	394, 0, 0, 394, 0, 0, 0, 1606, 39, 0,
	0, 394, 0, 0, 0, 0, 394, 0, 0, 0,
	1262, 42, 394, 0, 787, 0, 1633, 1988, 1989, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 787, 787,
	0, 0, 0, 1297, 456, 0, 0, 0, 0, 1807,
	1799, 1800, 1801, 1802, 1804, 1805, 0, 0, 0, 1124,
	0, 1797, 1798, 0, 1815, 1816, 1817, 0, 0, 1262,
	0, 0, 0, 55, 1124, 0, 0, 2175, 0, 0,
	56, 0, 57, 0, 0, 0, 2033, 2034, 2035, 2036,
	2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046,
	2047, 2048, 2049, 2050, 2051, 0, 2055, 788, 787, 0,
	0, 0, 0, 0, 1812, 59, 0, 787, 787, 0,
	1640, 788, 788, 0, 0, 0, 0, 0, 761, 1298,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 394,
	0, 1673, 0, 506, 0, 0, 506, 1123, 506, 0,
	394, 394, 0, 1679, 761, 0, 0, 0, 0, 0,
	0, 0, 1606, 765, 767, 0, 0, 0, 0, 0,
	1259, 0, 0, 0, 1803, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1298, 0, 0, 0, 0,
	0, 788, 0, 0, 0, 0, 60, 0, 0, 0,
	788, 788, 0, 0, 1259, 0, 0, 0, 0, 0,
	0, 0, 0, 607, 67, 1818, 0, 0, 0, 0,
	0, 0, 120, 62, 0, 63, 0, 0, 0, 0,
	1124, 0, 0, 0, 1298, 0, 1813, 0, 133, 0,
	0, 0, 0, 0, 848, 457, 0, 0, 95, 0,
	852, 0, 0, 1297, 0, 1259, 0, 0, 1716, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 67, 0, 0, 394, 394, 394, 588, 394, 0,
	0, 0, 946, 947, 0, 976, 977, 978, 986, 987,
	988, 0, 0, 0, 0, 0, 0, 394, 979, 0,
	0, 0, 0, 134, 0, 949, 0, 0, 990, 1297,
	1814, 127, 0, 0, 0, 0, 1259, 0, 128, 0,
	0, 1797, 1798, 0, 1815, 1816, 1817, 0, 0, 948,
	568, 0, 0, 576, 0, 968, 0, 2174, 0, 965,
	0, 119, 0, 0, 0, 0, 0, 0, 0, 738,
	67, 0, 1259, 1259, 0, 0, 0, 0, 1297, 0,
	0, 1259, 1259, 994, 995, 996, 997, 998, 0, 0,
	0, 0, 0, 1007, 1812, 0, 0, 0, 0, 0,
	0, 0, 0, 1015, 0, 0, 971, 972, 973, 974,
	0, 0, 0, 0, 1259, 954, 0, 1809, 1810, 1811,
	0, 0, 0, 0, 0, 0, 1808, 1806, 1807, 1799,
	1800, 1801, 1802, 1804, 1805, 0, 0, 983, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1803, 0, 989, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 981, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 1818, 0, 0, 0, 0,
	394, 394, 980, 0, 394, 2304, 0, 0, 0, 1593,
	0, 0, 1593, 0, 0, 0, 1813, 1069, 1069, 0,
	1879, 0, 0, 0, 588, 0, 394, 1885, 1886, 0,
	0, 0, 1606, 0, 0, 1893, 975, 0, 0, 0,
	0, 1898, 1899, 1901, 1903, 1904, 2328, 0, 0, 0,
	394, 970, 1911, 0, 0, 0, 1914, 0, 0, 0,
	0, 0, 0, 0, 394, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 1224, 1259, 1224, 0, 506, 0,
	0, 0, 394, 0, 0, 0, 1939, 0, 0, 0,
	1814, 394, 0, 1949, 0, 0, 0, 0, 0, 0,
	394, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2381, 1716, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1716, 0, 0,
	0, 0, 0, 0, 0, 982, 0, 0, 960, 961,
	967, 966, 962, 963, 964, 985, 0, 959, 957, 958,
	950, 951, 952, 953, 955, 956, 0, 0, 0, 0,
	2431, 0, 394, 0, 588, 588, 0, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1809, 1810, 1811,
	0, 0, 0, 0, 0, 0, 1808, 1806, 1807, 1799,
	1800, 1801, 1802, 1804, 1805, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2021, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1375, 0, 1380, 0, 0, 0,
	0, 0, 1387, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
	1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
	1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
	1430, 1431, 1432, 1433, 0, 1439, 0, 1441, 1442, 1443,
	1444, 0, 0, 0, 0, 1259, 0, 0, 0, 0,
	0, 0, 0, 394, 1467, 0, 0, 0, 0, 1593,
	0, 1007, 0, 0, 0, 0, 0, 0, 761, 1593,
	0, 0, 568, 0, 0, 0, 0, 0, 0, 0,
	1507, 1508, 0, 2104, 1524, 0, 1536, 1538, 1543, 1546,
	1547, 1548, 0, 1003, 0, 1006, 0, 0, 0, 0,
	0, 1259, 1011, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1606, 0, 1224, 0, 0, 0, 0, 0,
	0, 0, 2141, 0, 0, 0, 0, 0, 0, 0,
	0, 432, 0, 0, 0, 0, 0, 0, 0, 0,
	394, 394, 0, 0, 0, 0, 0, 0, 0, 0,
	1259, 0, 38, 0, 0, 0, 0, 0, 2167, 0,
	0, 0, 0, 39, 0, 0, 0, 0, 2169, 0,
	0, 0, 0, 0, 0, 0, 42, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2192, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 67,
	0, 0, 0, 0, 1090, 56, 0, 57, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 0, 0, 761, 0, 0,
	59, 0, 0, 0, 0, 0, 0, 0, 1593, 761,
	0, 0, 2224, 2225, 1606, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2104, 761,
	0, 0, 0, 0, 2258, 0, 2259, 0, 394, 2261,
	2262, 0, 394, 0, 2266, 0, 0, 0, 0, 0,
	0, 0, 2104, 0, 761, 1640, 38, 0, 2104, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	0, 946, 947, 0, 976, 977, 978, 986, 987, 988,
	42, 60, 0, 0, 0, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 949, 0, 0, 990, 0, 0,
	0, 0, 0, 456, 0, 0, 0, 120, 62, 0,
	63, 0, 0, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 133, 968, 0, 0, 0, 965, 0,
	457, 67, 55, 95, 0, 0, 0, 0, 0, 56,
	0, 57, 0, 0, 0, 1606, 0, 2320, 0, 0,
	2322, 0, 135, 0, 0, 0, 0, 0, 394, 568,
	0, 2104, 568, 568, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 971, 972, 973, 974, 0,
	0, 0, 0, 0, 954, 0, 2354, 0, 134, 2104,
	0, 0, 0, 0, 394, 0, 127, 0, 0, 0,
	0, 761, 0, 128, 0, 0, 983, 991, 0, 2167,
	2167, 0, 0, 0, 0, 1457, 1737, 1738, 0, 0,
	0, 0, 1743, 0, 0, 989, 433, 0, 576, 2387,
	0, 0, 0, 1006, 1593, 0, 0, 0, 0, 0,
	981, 1224, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 1762, 60, 0, 0, 0, 0,
	1769, 0, 0, 1773, 0, 0, 2403, 2404, 0, 0,
	0, 980, 0, 394, 0, 0, 0, 0, 0, 0,
	1787, 120, 62, 0, 63, 0, 2419, 0, 0, 0,
	1797, 1798, 0, 1815, 1816, 1817, 0, 133, 0, 0,
	738, 0, 0, 0, 457, 975, 1995, 95, 0, 0,
	0, 0, 0, 2434, 1007, 761, 1090, 0, 394, 0,
	970, 1543, 1543, 1543, 0, 0, 135, 0, 0, 67,
	0, 2104, 0, 0, 0, 67, 984, 0, 0, 0,
	0, 0, 0, 1812, 0, 0, 2387, 1069, 0, 0,
	0, 0, 588, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 134, 761, 0, 0, 0, 0, 0, 394,
	127, 0, 0, 0, 0, 0, 0, 128, 0, 0,
	0, 0, 0, 2492, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	119, 0, 0, 1803, 982, 0, 0, 960, 961, 967,
	966, 962, 963, 964, 985, 0, 959, 957, 958, 950,
	951, 952, 953, 955, 956, 0, 0, 0, 0, 0,
	0, 0, 0, 2205, 0, 0, 0, 0, 0, 0,
	0, 0, 1942, 0, 1818, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1960, 1813, 0, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 0, 67,
	0, 0, 588, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 588, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1982, 0, 0,
	0, 0, 1387, 0, 0, 0, 0, 0, 1986, 0,
	0, 1987, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1992, 0, 0, 0, 0, 0, 1814,
	0, 0, 2000, 0, 0, 0, 0, 0, 0, 0,
	2004, 0, 0, 1960, 0, 0, 0, 0, 0, 946,
	947, 0, 976, 977, 978, 986, 987, 988, 0, 0,
	0, 0, 0, 2028, 0, 979, 0, 2030, 0, 0,
	0, 0, 949, 67, 0, 990, 0, 0, 0, 0,
	0, 1797, 1798, 0, 1815, 1816, 1817, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 948, 1994, 0, 0,
	2060, 2061, 968, 0, 0, 0, 965, 0, 0, 2067,
	2068, 2069, 0, 0, 0, 0, 1809, 1810, 1811, 0,
	0, 0, 0, 0, 0, 1808, 1806, 1807, 1799, 1800,
	1801, 1802, 1804, 1805, 1812, 0, 2080, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1457, 971, 972, 973, 974, 0, 0, 0,
	0, 0, 954, 0, 0, 0, 2101, 0, 0, 0,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 983, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 1803, 0, 0, 0, 0, 0,
	0, 0, 0, 989, 0, 0, 946, 947, 0, 976,
	977, 978, 986, 987, 988, 0, 0, 1069, 981, 0,
	0, 0, 979, 0, 969, 0, 588, 0, 0, 949,
	0, 0, 990, 0, 0, 1818, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1006, 0, 0, 980,
	0, 0, 0, 948, 0, 0, 1813, 0, 0, 968,
	0, 0, 2176, 965, 0, 0, 2179, 2180, 0, 0,
	2182, 0, 0, 0, 0, 0, 0, 2184, 0, 2186,
	738, 0, 0, 975, 0, 0, 738, 738, 0, 0,
	738, 0, 0, 0, 0, 2193, 0, 0, 970, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 972, 973, 974, 984, 0, 0, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 2202, 0,
	1814, 0, 0, 67, 0, 0, 0, 0, 0, 67,
	0, 983, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	989, 0, 0, 67, 0, 0, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 981, 0, 576, 2248, 0,
	0, 969, 982, 0, 0, 960, 961, 967, 966, 962,
	963, 964, 985, 0, 959, 957, 958, 950, 951, 952,
	953, 955, 956, 0, 0, 0, 980, 0, 0, 0,
	0, 1839, 0, 0, 0, 0, 0, 1809, 1810, 1811,
	1797, 1798, 0, 1815, 1816, 1817, 1808, 1806, 1807, 1799,
	1800, 1801, 1802, 1804, 1805, 0, 0, 0, 0, 0,
	975, 0, 0, 0, 0, 0, 2296, 2297, 0, 0,
	0, 0, 0, 0, 0, 970, 946, 947, 0, 976,
	977, 978, 986, 987, 988, 0, 0, 0, 0, 0,
	0, 984, 979, 1812, 0, 0, 0, 2309, 0, 949,
	0, 0, 990, 2312, 0, 0, 0, 1797, 1798, 0,
	1815, 1816, 1817, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 948, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 965, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2344, 0, 0,
	0, 0, 0, 1803, 0, 0, 0, 0, 0, 982,
	1812, 0, 960, 961, 967, 966, 962, 963, 964, 985,
	0, 959, 957, 958, 950, 951, 952, 953, 955, 956,
	971, 972, 973, 974, 67, 0, 0, 0, 1838, 954,
	0, 0, 0, 0, 1818, 0, 0, 0, 0, 738,
	946, 947, 0, 976, 977, 978, 986, 987, 988, 0,
	0, 983, 991, 0, 0, 1813, 979, 0, 0, 2393,
	1803, 0, 0, 949, 0, 0, 990, 0, 0, 0,
	989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1819, 0, 981, 0, 948, 0, 0,
	0, 969, 0, 968, 0, 0, 0, 965, 0, 0,
	0, 1818, 0, 588, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 980, 0, 0, 0,
	0, 0, 1813, 0, 0, 0, 0, 738, 0, 1814,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 971, 972, 973, 974, 0, 0,
	975, 0, 0, 954, 0, 0, 2461, 2461, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 2476, 0, 0, 983, 991, 0, 0, 0,
	0, 984, 0, 0, 0, 0, 0, 0, 0, 0,
	2461, 0, 0, 0, 989, 0, 1814, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 969, 1809, 1810, 1811, 0,
	0, 0, 0, 0, 0, 1808, 1806, 1807, 1799, 1800,
	1801, 1802, 1804, 1805, 0, 0, 2461, 0, 0, 0,
	980, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	738, 0, 960, 961, 967, 966, 962, 963, 964, 985,
	0, 959, 957, 958, 950, 951, 952, 953, 955, 956,
	0, 0, 0, 0, 975, 0, 0, 0, 1837, 0,
	0, 0, 0, 1809, 1810, 1811, 0, 0, 0, 970,
	0, 0, 1808, 1806, 1807, 1799, 1800, 1801, 1802, 1804,
	1805, 0, 0, 0, 0, 984, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 960, 961, 967, 966,
	962, 963, 964, 985, 0, 959, 957, 958, 950, 951,
	952, 953, 955, 956, 0, 0, 0, 0, 0, 0,
	0, 0, 1789, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1121, 0, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2370, 176, 177, 1126, 178, 1127, 1128, 1129, 1130,
	331, 1131, 1132, 1133, 1134, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 1135, 183, 338, 339, 184,
	185, 1136, 1137, 340, 341, 342, 1138, 186, 343, 1139,
	789, 1140, 187, 188, 189, 0, 190, 1141, 191, 0,
	192, 193, 1142, 688, 194, 195, 196, 1143, 1144, 1146,
	1145, 1147, 1148, 1149, 197, 198, 395, 199, 344, 200,
	345, 346, 1150, 201, 1151, 202, 1152, 203, 1153, 1154,
	204, 205, 1155, 206, 1156, 1006, 1157, 347, 207, 208,
	209, 348, 349, 1158, 689, 1159, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 1160, 213, 1161,
	1162, 690, 1163, 214, 353, 1164, 354, 1165, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 692, 1166, 357,
	222, 1167, 219, 1168, 691, 220, 358, 221, 359, 360,
	361, 362, 363, 1169, 364, 1170, 693, 223, 224, 225,
	694, 226, 227, 228, 1171, 230, 229, 1172, 365, 695,
	231, 696, 1173, 232, 1174, 1175, 233, 0, 234, 235,
	236, 238, 366, 237, 697, 239, 240, 242, 241, 1176,
	1177, 1178, 367, 243, 368, 244, 245, 1179, 246, 1180,
	1181, 247, 1182, 1183, 248, 369, 698, 249, 699, 370,
	250, 251, 252, 253, 254, 1184, 255, 371, 256, 372,
	257, 1185, 258, 259, 260, 261, 262, 373, 263, 264,
	1186, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 1187, 277, 700, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 1188, 289, 375, 288,
	290, 291, 1189, 292, 281, 282, 293, 701, 294, 376,
	377, 295, 1190, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 1191, 303, 1192, 304, 305, 306, 307,
	308, 309, 310, 1193, 380, 381, 382, 1194, 1195, 311,
	312, 383, 384, 1196, 313, 314, 315, 316, 1197, 1198,
	317, 318, 319, 320, 1199, 321, 1200, 385, 322, 323,
	324, 386, 387, 1201, 1202, 325, 1203, 1204, 1205, 1206,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1121, 0, 0, 0, 0, 0, 1586, 0, 0,
	0, 0, 0, 0, 0, 0, 1587, 176, 177, 1126,
	178, 1127, 1128, 1129, 1130, 331, 1131, 1132, 1133, 1134,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	1135, 183, 338, 339, 184, 185, 1136, 1137, 340, 341,
	342, 1138, 186, 343, 1139, 789, 1140, 187, 188, 189,
	0, 190, 1141, 191, 0, 192, 193, 1142, 688, 194,
	195, 196, 1143, 1144, 1146, 1145, 1147, 1148, 1149, 197,
	198, 395, 199, 344, 200, 345, 346, 1150, 201, 1151,
	202, 1152, 203, 1153, 1154, 204, 205, 1155, 206, 1156,
	0, 1157, 347, 207, 208, 209, 348, 349, 1158, 689,
	1159, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 1160, 213, 1161, 1162, 690, 1163, 214, 353,
	1164, 354, 1165, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 692, 1166, 357, 222, 1167, 219, 1168, 691,
	220, 358, 221, 359, 360, 361, 362, 363, 1169, 364,
	1170, 693, 223, 224, 225, 694, 226, 227, 228, 1171,
	230, 229, 1172, 365, 695, 231, 696, 1173, 232, 1174,
	1175, 233, 0, 234, 235, 236, 238, 366, 237, 697,
	239, 240, 242, 241, 1176, 1177, 1178, 367, 243, 368,
	244, 245, 1179, 246, 1180, 1181, 247, 1182, 1183, 248,
	369, 698, 249, 699, 370, 250, 251, 252, 253, 254,
	1184, 255, 371, 256, 372, 257, 1185, 258, 259, 260,
	261, 262, 373, 263, 264, 1186, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 1187,
	277, 700, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 1188, 289, 375, 288, 290, 291, 1189, 292, 281,
	282, 293, 701, 294, 376, 377, 295, 1190, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 1191, 303,
	1192, 304, 305, 306, 307, 308, 309, 310, 1193, 380,
	381, 382, 1194, 1195, 311, 312, 383, 384, 1196, 313,
	314, 315, 316, 1197, 1198, 317, 318, 319, 320, 1199,
	321, 1200, 385, 322, 323, 324, 386, 387, 1201, 1202,
	325, 1203, 1204, 1205, 1206, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2220, 176, 177, 1126, 178, 1127, 1128, 1129,
	1130, 331, 1131, 1132, 1133, 1134, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 1135, 183, 338, 339,
	184, 185, 1136, 1137, 340, 341, 342, 1138, 186, 343,
	1139, 789, 1140, 187, 188, 189, 0, 190, 1141, 191,
	0, 192, 193, 1142, 688, 194, 195, 196, 1143, 1144,
	1146, 1145, 1147, 1148, 1149, 197, 198, 395, 199, 344,
	200, 345, 346, 1150, 201, 1151, 202, 1152, 203, 1153,
	1154, 204, 205, 1155, 206, 1156, 0, 1157, 347, 207,
	208, 209, 348, 349, 1158, 689, 1159, 0, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 1160, 213,
	1161, 1162, 690, 1163, 214, 353, 1164, 354, 1165, 0,
	215, 216, 0, 0, 217, 218, 355, 356, 692, 1166,
	357, 222, 1167, 219, 1168, 691, 220, 358, 221, 359,
	360, 361, 362, 363, 1169, 364, 1170, 693, 223, 224,
	225, 694, 226, 227, 228, 1171, 230, 229, 1172, 365,
	695, 231, 696, 1173, 232, 1174, 1175, 233, 0, 234,
	235, 236, 238, 366, 237, 697, 239, 240, 242, 241,
	1176, 1177, 1178, 367, 243, 368, 244, 245, 1179, 246,
	1180, 1181, 247, 1182, 1183, 248, 369, 698, 249, 699,
	370, 250, 251, 252, 253, 254, 1184, 255, 371, 256,
	372, 257, 1185, 258, 259, 260, 261, 262, 373, 263,
	264, 1186, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 1187, 277, 700, 278, 279,
	374, 280, 0, 284, 285, 286, 287, 1188, 289, 375,
	288, 290, 291, 1189, 292, 281, 282, 293, 701, 294,
	376, 377, 295, 1190, 302, 296, 297, 283, 298, 301,
	378, 299, 300, 379, 1191, 303, 1192, 304, 305, 306,
	307, 308, 309, 310, 1193, 380, 381, 382, 1194, 1195,
	311, 312, 383, 384, 1196, 313, 314, 315, 316, 1197,
	1198, 317, 318, 319, 320, 1199, 321, 1200, 385, 322,
	323, 324, 386, 387, 1201, 1202, 325, 1203, 1204, 1205,
	1206, 326, 327, 328, 329, 330, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1120, 176, 177, 1126, 178, 1127, 1128,
	1129, 1130, 331, 1131, 1132, 1133, 1134, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 1135, 183, 338,
	339, 184, 185, 1136, 1137, 340, 341, 342, 1138, 186,
	343, 1139, 789, 1140, 187, 188, 189, 0, 190, 1141,
	191, 0, 192, 193, 1142, 688, 194, 195, 196, 1143,
	1144, 1146, 1145, 1147, 1148, 1149, 197, 198, 395, 199,
	344, 200, 345, 346, 1150, 201, 1151, 202, 1152, 203,
	1153, 1154, 204, 205, 1155, 206, 1156, 0, 1157, 347,
	207, 208, 209, 348, 349, 1158, 689, 1159, 0, 0,
	0, 0, 210, 211, 350, 351, 352, 0, 212, 1160,
	213, 1161, 1162, 690, 1163, 214, 353, 1164, 354, 1165,
	0, 215, 216, 0, 0, 217, 218, 355, 356, 692,
	1166, 357, 222, 1167, 219, 1168, 691, 220, 358, 221,
	359, 360, 361, 362, 363, 1169, 364, 1170, 693, 223,
	224, 225, 694, 226, 227, 228, 1171, 230, 229, 1172,
	365, 695, 231, 696, 1173, 232, 1174, 1175, 233, 0,
	234, 235, 236, 238, 366, 237, 697, 239, 240, 242,
	241, 1176, 1177, 1178, 367, 243, 368, 244, 245, 1179,
	246, 1180, 1181, 247, 1182, 1183, 248, 369, 698, 249,
	699, 370, 250, 251, 252, 253, 254, 1184, 255, 371,
	256, 372, 257, 1185, 258, 259, 260, 261, 262, 373,
	263, 264, 1186, 265, 266, 267, 268, 269, 0, 271,
	272, 270, 273, 274, 275, 276, 1187, 277, 700, 278,
	279, 374, 280, 0, 284, 285, 286, 287, 1188, 289,
	375, 288, 290, 291, 1189, 292, 281, 282, 293, 701,
	294, 376, 377, 295, 1190, 302, 296, 297, 283, 298,
	301, 378, 299, 300, 379, 1191, 303, 1192, 304, 305,
	306, 307, 308, 309, 310, 1193, 380, 381, 382, 1194,
	1195, 311, 312, 383, 384, 1196, 313, 314, 315, 316,
	1197, 1198, 317, 318, 319, 320, 1199, 321, 1200, 385,
	322, 323, 324, 386, 387, 1201, 1202, 325, 1203, 1204,
	1205, 1206, 326, 327, 328, 329, 330, 1485, 0, 626,
	615, 616, 613, 614, 605, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 1482, 178, 0,
	0, 0, 0, 643, 608, 0, 0, 0, 179, 180,
	181, 332, 658, 334, 659, 182, 660, 661, 0, 183,
	338, 339, 184, 185, 611, 642, 662, 663, 342, 0,
	186, 654, 0, 634, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 688, 194, 195, 196,
	0, 635, 636, 638, 0, 637, 639, 197, 198, 395,
	199, 664, 200, 665, 666, 0, 201, 0, 202, 0,
	203, 1483, 0, 657, 205, 0, 206, 0, 0, 0,
	599, 207, 208, 209, 644, 645, 622, 689, 0, 0,
	0, 0, 0, 210, 211, 667, 668, 669, 0, 212,
	0, 213, 0, 0, 690, 0, 214, 655, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 651, 653,
	692, 0, 357, 222, 0, 219, 0, 691, 220, 670,
	221, 671, 672, 673, 674, 675, 0, 633, 0, 693,
	223, 224, 225, 694, 226, 227, 228, 0, 230, 229,
	0, 656, 695, 231, 696, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 697, 239, 240,
	242, 241, 594, 0, 623, 652, 243, 676, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 369, 698,
	249, 699, 646, 250, 251, 252, 253, 254, 0, 255,
	647, 256, 372, 257, 0, 258, 259, 260, 261, 262,
	677, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 700,
	278, 279, 600, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 640, 292, 281, 282, 293,
	701, 294, 678, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 679, 299, 300, 648, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 680, 681,
	0, 0, 311, 312, 649, 650, 621, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 641, 321, 0,
	385, 322, 323, 324, 386, 682, 1481, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 595, 0,
	626, 615, 616, 613, 614, 605, 0, 0, 593, 0,
	0, 0, 0, 591, 592, 1484, 176, 177, 0, 178,
	0, 0, 601, 1479, 643, 608, 0, 0, 604, 179,
	180, 181, 332, 658, 334, 659, 182, 660, 661, 0,
	183, 338, 339, 184, 185, 611, 642, 662, 663, 342,
	0, 186, 654, 0, 634, 0, 187, 188, 189, 0,
	190, 0, 191, 0, 192, 193, 0, 688, 194, 195,
	196, 0, 635, 636, 638, 0, 637, 639, 197, 198,
	395, 199, 664, 200, 665, 666, 589, 201, 0, 202,
	0, 203, 0, 0, 657, 205, 0, 206, 0, 0,
	0, 599, 207, 208, 209, 644, 645, 622, 689, 0,
	0, 0, 0, 0, 210, 211, 667, 668, 669, 0,
	212, 0, 213, 0, 0, 690, 0, 214, 655, 0,
	354, 0, 0, 215, 216, 0, 0, 217, 218, 651,
	653, 692, 0, 357, 222, 0, 219, 0, 691, 220,
	670, 221, 671, 672, 673, 674, 675, 0, 633, 0,
	693, 223, 224, 225, 694, 226, 227, 228, 0, 230,
	229, 0, 656, 695, 231, 696, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 366, 237, 697, 239,
	240, 242, 241, 594, 0, 623, 652, 243, 676, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 369,
	698, 249, 699, 646, 250, 251, 252, 253, 254, 0,
	255, 647, 256, 372, 257, 0, 258, 259, 260, 261,
	262, 677, 263, 264, 0, 265, 266, 267, 268, 269,
	0, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	700, 278, 279, 600, 280, 0, 284, 285, 286, 287,
	133, 289, 375, 288, 290, 291, 640, 292, 281, 282,
	293, 701, 294, 678, 377, 295, 0, 302, 296, 297,
	283, 298, 301, 679, 299, 300, 648, 0, 303, 135,
	304, 305, 306, 307, 308, 309, 310, 0, 380, 680,
	681, 0, 0, 311, 312, 649, 650, 621, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 641, 321,
	0, 385, 322, 323, 324, 830, 682, 0, 0, 325,
	0, 0, 0, 127, 326, 327, 328, 329, 330, 595,
	128, 577, 0, 626, 615, 616, 613, 614, 605, 593,
	0, 0, 0, 0, 591, 592, 0, 0, 0, 176,
	177, 0, 178, 1009, 0, 0, 0, 643, 608, 604,
	0, 0, 179, 180, 181, 332, 658, 334, 659, 182,
	660, 661, 0, 183, 338, 339, 184, 185, 611, 642,
	662, 663, 342, 0, 186, 654, 0, 634, 0, 187,
	188, 189, 0, 190, 0, 191, 0, 192, 193, 0,
	688, 194, 195, 196, 0, 635, 636, 638, 0, 637,
	639, 197, 198, 395, 199, 664, 200, 665, 666, 0,
	201, 0, 202, 0, 203, 0, 0, 657, 205, 0,
	206, 0, 0, 0, 599, 207, 208, 209, 644, 645,
	622, 689, 0, 0, 0, 0, 0, 210, 211, 667,
	668, 669, 0, 212, 0, 213, 0, 0, 690, 0,
	214, 655, 0, 354, 0, 0, 215, 216, 0, 0,
	217, 218, 651, 653, 692, 0, 357, 222, 0, 219,
	0, 691, 220, 670, 221, 671, 672, 673, 674, 675,
	0, 633, 0, 693, 223, 224, 225, 694, 226, 227,
	228, 0, 230, 229, 0, 656, 695, 231, 696, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 366,
	237, 697, 239, 240, 242, 241, 594, 0, 623, 652,
	243, 676, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 369, 698, 249, 699, 646, 250, 251, 252,
	253, 254, 0, 255, 647, 256, 372, 257, 0, 258,
	259, 260, 261, 262, 677, 263, 264, 0, 265, 266,
	267, 268, 269, 0, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 700, 278, 279, 600, 280, 0, 284,
	285, 286, 287, 133, 289, 375, 288, 290, 291, 640,
	292, 281, 282, 293, 701, 294, 678, 377, 295, 0,
	302, 296, 297, 283, 298, 301, 679, 299, 300, 648,
	0, 303, 135, 304, 305, 306, 307, 308, 309, 310,
	0, 380, 680, 681, 0, 0, 311, 312, 649, 650,
	621, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 641, 321, 0, 385, 322, 323, 324, 830, 682,
	0, 0, 325, 0, 0, 0, 127, 326, 327, 328,
	329, 330, 595, 128, 626, 615, 616, 613, 614, 605,
	0, 0, 593, 0, 0, 0, 0, 591, 592, 0,
	176, 177, 0, 178, 0, 0, 1009, 0, 643, 608,
	0, 0, 604, 179, 180, 181, 332, 658, 334, 659,
	182, 660, 661, 0, 183, 338, 339, 184, 185, 611,
	642, 662, 663, 342, 0, 186, 654, 0, 634, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 688, 194, 195, 196, 0, 635, 636, 638, 0,
	637, 639, 197, 198, 395, 199, 664, 200, 665, 666,
	0, 201, 0, 202, 0, 203, 0, 0, 657, 205,
	0, 206, 0, 0, 0, 599, 207, 208, 209, 644,
	645, 622, 689, 0, 0, 0, 0, 0, 210, 211,
	667, 668, 669, 0, 212, 0, 213, 0, 0, 690,
	0, 214, 655, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 651, 653, 692, 0, 357, 222, 0,
	219, 0, 691, 220, 670, 221, 671, 672, 673, 674,
	675, 0, 633, 0, 693, 223, 224, 225, 694, 226,
	227, 228, 0, 230, 229, 0, 656, 695, 231, 696,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 697, 239, 240, 242, 241, 594, 0, 623,
	652, 243, 676, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 698, 249, 699, 646, 250, 251,
	252, 253, 254, 0, 255, 647, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 677, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 700, 278, 279, 600, 280, 0,
	284, 285, 286, 287, 133, 289, 375, 288, 290, 291,
	640, 292, 281, 282, 293, 701, 294, 678, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 679, 299, 300,
	648, 0, 303, 135, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 680, 681, 0, 0, 311, 312, 649,
	650, 621, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 641, 321, 0, 385, 322, 323, 324, 830,
	682, 0, 0, 325, 0, 0, 0, 127, 326, 327,
	328, 329, 330, 595, 128, 626, 615, 616, 613, 614,
	605, 0, 0, 593, 0, 0, 0, 0, 591, 592,
	0, 176, 177, 0, 178, 0, 0, 1009, 0, 643,
	608, 0, 0, 604, 179, 180, 181, 332, 658, 334,
	659, 182, 660, 661, 1539, 183, 338, 339, 184, 185,
	611, 642, 662, 663, 342, 0, 186, 654, 0, 634,
	0, 187, 188, 189, 0, 190, 0, 191, 0, 192,
	193, 0, 688, 194, 195, 196, 0, 635, 636, 638,
	0, 637, 639, 197, 198, 395, 199, 664, 200, 665,
	666, 0, 201, 0, 202, 0, 203, 0, 0, 657,
	205, 0, 206, 0, 0, 0, 599, 207, 208, 209,
	644, 645, 622, 689, 0, 0, 0, 0, 0, 210,
	211, 667, 668, 669, 0, 212, 0, 213, 0, 1544,
	690, 0, 214, 655, 0, 354, 0, 0, 215, 216,
	0, 0, 217, 218, 651, 653, 692, 0, 357, 222,
	0, 219, 0, 691, 220, 670, 221, 671, 672, 673,
	674, 675, 0, 633, 0, 693, 223, 224, 225, 694,
	226, 227, 228, 0, 230, 229, 1540, 656, 695, 231,
	696, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 366, 237, 697, 239, 240, 242, 241, 594, 0,
	623, 652, 243, 676, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 369, 698, 249, 699, 646, 250,
	251, 252, 253, 254, 0, 255, 647, 256, 372, 257,
	0, 258, 259, 260, 261, 262, 677, 263, 264, 0,
	265, 266, 267, 268, 269, 0, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 700, 278, 279, 600, 280,
	0, 284, 285, 286, 287, 0, 289, 375, 288, 290,
	291, 640, 292, 281, 282, 293, 701, 294, 678, 377,
	295, 0, 302, 296, 297, 283, 298, 301, 679, 299,
	300, 648, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 380, 680, 681, 0, 1541, 311, 312,
	649, 650, 621, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 641, 321, 0, 385, 322, 323, 324,
	386, 682, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 595, 585, 0, 626, 615, 616,
	613, 614, 605, 0, 593, 0, 0, 0, 0, 591,
	592, 0, 0, 176, 177, 0, 178, 0, 601, 0,
	0, 643, 608, 0, 604, 0, 179, 180, 181, 332,
	658, 334, 659, 182, 660, 661, 0, 183, 338, 339,
	184, 185, 611, 642, 662, 663, 342, 0, 186, 654,
	0, 634, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 688, 194, 195, 196, 0, 635,
	636, 638, 0, 637, 639, 197, 198, 395, 199, 664,
	200, 665, 666, 589, 201, 0, 202, 0, 203, 0,
	0, 657, 205, 0, 206, 0, 0, 0, 599, 207,
	208, 209, 644, 645, 622, 689, 0, 0, 0, 0,
	0, 210, 211, 667, 668, 669, 0, 212, 0, 213,
	0, 0, 690, 0, 214, 655, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 651, 653, 692, 0,
	357, 222, 0, 219, 0, 691, 220, 670, 221, 671,
	672, 673, 674, 675, 0, 633, 0, 693, 223, 224,
	225, 694, 226, 227, 228, 0, 230, 229, 0, 656,
	695, 231, 696, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 697, 239, 240, 242, 241,
	594, 0, 623, 652, 243, 676, 244, 245, 0, 246,
	587, 0, 247, 0, 0, 248, 369, 698, 249, 699,
	646, 250, 251, 252, 253, 254, 0, 255, 647, 256,
	372, 257, 0, 258, 259, 260, 261, 262, 677, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 700, 278, 279,
	600, 280, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 640, 292, 281, 282, 293, 701, 294,
	678, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	679, 299, 300, 648, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 680, 681, 0, 0,
	311, 312, 649, 650, 621, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 641, 321, 0, 385, 322,
	323, 324, 386, 682, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 595, 0, 626, 615,
	616, 613, 614, 605, 0, 0, 593, 0, 0, 0,
	0, 591, 592, 0, 176, 177, 0, 178, 0, 0,
	601, 0, 643, 608, 0, 0, 604, 179, 180, 181,
	332, 658, 334, 659, 182, 660, 661, 0, 183, 338,
	339, 184, 185, 611, 642, 662, 663, 342, 0, 186,
	654, 0, 634, 0, 187, 188, 189, 0, 190, 0,
	191, 0, 192, 193, 0, 688, 194, 195, 196, 0,
	635, 636, 638, 0, 637, 639, 197, 198, 395, 199,
	664, 200, 665, 666, 0, 201, 0, 202, 0, 203,
	0, 0, 657, 205, 0, 206, 0, 0, 0, 599,
	207, 208, 209, 644, 645, 622, 689, 0, 0, 0,
	0, 0, 210, 211, 667, 668, 669, 0, 212, 0,
	213, 0, 0, 690, 0, 214, 655, 0, 354, 0,
	0, 215, 216, 0, 0, 217, 218, 651, 653, 692,
	0, 357, 222, 0, 219, 0, 691, 220, 670, 221,
	671, 672, 673, 674, 675, 0, 633, 0, 693, 223,
	224, 225, 694, 226, 227, 228, 0, 230, 229, 0,
	656, 695, 231, 696, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 366, 237, 697, 239, 240, 242,
	241, 594, 2150, 623, 652, 243, 676, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 369, 698, 249,
	699, 646, 250, 251, 252, 253, 254, 0, 255, 647,
	256, 372, 257, 0, 258, 259, 260, 261, 262, 677,
	263, 264, 0, 265, 266, 267, 268, 269, 0, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 700, 278,
	279, 600, 280, 0, 284, 285, 286, 287, 0, 289,
	375, 288, 290, 291, 640, 292, 281, 282, 293, 701,
	294, 678, 377, 295, 0, 302, 296, 297, 283, 298,
	301, 679, 299, 300, 648, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 380, 680, 681, 0,
	0, 311, 312, 649, 650, 621, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 641, 321, 0, 385,
	322, 323, 324, 386, 682, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 595, 0, 626,
	615, 616, 613, 614, 605, 0, 0, 593, 0, 0,
	0, 0, 591, 592, 1070, 176, 177, 0, 178, 0,
	0, 601, 0, 643, 608, 0, 0, 604, 179, 180,
	181, 332, 658, 334, 659, 182, 660, 661, 0, 183,
	338, 339, 184, 185, 611, 642, 662, 663, 342, 0,
	186, 654, 0, 634, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 688, 194, 195, 196,
	0, 635, 636, 638, 0, 637, 639, 197, 198, 395,
	199, 664, 200, 665, 666, 0, 201, 0, 202, 0,
	203, 0, 0, 657, 205, 0, 206, 0, 0, 0,
	599, 207, 208, 209, 644, 645, 622, 689, 0, 0,
	0, 0, 0, 210, 211, 667, 668, 669, 0, 212,
	0, 213, 0, 0, 690, 0, 214, 655, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 651, 653,
	692, 0, 357, 222, 1389, 219, 0, 691, 220, 670,
	221, 671, 672, 673, 674, 675, 0, 633, 0, 693,
	223, 224, 225, 694, 226, 227, 228, 0, 230, 229,
	0, 656, 695, 231, 696, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 697, 239, 240,
	242, 241, 594, 0, 623, 652, 243, 676, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 369, 698,
	249, 699, 646, 250, 251, 252, 253, 254, 0, 255,
	647, 256, 372, 257, 1388, 258, 259, 260, 261, 262,
	677, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 700,
	278, 279, 600, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 640, 292, 281, 282, 293,
	701, 294, 678, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 679, 299, 300, 648, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 680, 681,
	0, 0, 311, 312, 649, 650, 621, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 641, 321, 0,
	385, 322, 323, 324, 386, 682, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 595, 0,
	626, 615, 616, 613, 614, 605, 0, 0, 593, 0,
	0, 0, 0, 591, 592, 0, 176, 177, 0, 178,
	0, 0, 601, 0, 643, 608, 0, 0, 604, 179,
	180, 181, 332, 658, 334, 659, 182, 660, 661, 0,
	183, 338, 339, 184, 185, 611, 642, 662, 663, 342,
	0, 186, 654, 0, 634, 0, 187, 188, 189, 0,
	190, 0, 191, 0, 192, 193, 0, 688, 194, 195,
	196, 0, 635, 636, 638, 0, 637, 639, 197, 198,
	395, 199, 664, 200, 665, 666, 589, 201, 0, 202,
	0, 203, 0, 0, 657, 205, 0, 206, 0, 0,
	0, 599, 207, 208, 209, 644, 645, 622, 689, 0,
	0, 0, 0, 0, 210, 211, 667, 668, 669, 0,
	212, 0, 213, 0, 0, 690, 0, 214, 655, 0,
	354, 0, 0, 215, 216, 0, 0, 217, 218, 651,
	653, 692, 0, 357, 222, 0, 219, 0, 691, 220,
	670, 221, 671, 672, 673, 674, 675, 0, 633, 0,
	693, 223, 224, 225, 694, 226, 227, 228, 0, 230,
	229, 0, 656, 695, 231, 696, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 366, 237, 697, 239,
	240, 242, 241, 594, 0, 623, 652, 243, 676, 244,
	245, 0, 246, 587, 0, 247, 0, 0, 248, 369,
	698, 249, 699, 646, 250, 251, 252, 253, 254, 0,
	255, 647, 256, 372, 257, 0, 258, 259, 260, 261,
	262, 677, 263, 264, 0, 265, 266, 267, 268, 269,
	0, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	700, 278, 279, 600, 280, 0, 284, 285, 286, 287,
	0, 289, 375, 288, 290, 291, 640, 292, 281, 282,
	293, 701, 294, 678, 377, 295, 0, 302, 296, 297,
	283, 298, 301, 679, 299, 300, 648, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 380, 680,
	681, 0, 0, 311, 312, 649, 650, 621, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 641, 321,
	0, 385, 322, 323, 324, 386, 682, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 595,
	0, 626, 615, 616, 613, 614, 605, 0, 0, 593,
	0, 0, 0, 0, 591, 592, 0, 176, 177, 0,
	178, 0, 0, 601, 0, 643, 608, 0, 0, 604,
	179, 180, 181, 332, 658, 334, 659, 182, 660, 661,
	0, 183, 338, 339, 184, 185, 611, 642, 662, 663,
	342, 0, 186, 654, 0, 634, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 688, 194,
	195, 196, 0, 635, 636, 638, 0, 637, 639, 197,
	198, 395, 199, 664, 200, 665, 666, 589, 201, 0,
	202, 0, 203, 0, 0, 657, 205, 0, 206, 0,
	0, 0, 599, 207, 208, 209, 644, 645, 622, 689,
	0, 0, 0, 0, 0, 210, 211, 667, 668, 669,
	0, 212, 0, 213, 0, 0, 690, 0, 214, 655,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	651, 653, 692, 0, 357, 222, 0, 219, 0, 691,
	220, 670, 221, 671, 672, 673, 674, 675, 0, 633,
	0, 693, 223, 224, 225, 694, 226, 227, 228, 0,
	230, 229, 0, 656, 695, 231, 696, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 697,
	239, 240, 242, 241, 594, 0, 623, 652, 243, 676,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 698, 249, 699, 646, 250, 251, 252, 253, 254,
	0, 255, 647, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 677, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 700, 278, 279, 600, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 640, 292, 281,
	282, 293, 701, 294, 678, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 679, 299, 300, 648, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	680, 681, 0, 0, 311, 312, 649, 650, 621, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 641,
	321, 0, 385, 322, 323, 324, 386, 682, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	595, 0, 626, 615, 616, 613, 614, 605, 0, 0,
	593, 0, 0, 0, 0, 591, 592, 0, 176, 177,
	0, 178, 0, 0, 601, 0, 643, 608, 0, 0,
	604, 179, 180, 181, 332, 658, 334, 659, 182, 660,
	661, 0, 183, 338, 339, 184, 185, 611, 642, 662,
	663, 342, 0, 186, 654, 0, 634, 0, 187, 188,
	189, 0, 190, 0, 191, 0, 192, 193, 0, 688,
	194, 195, 196, 0, 635, 636, 638, 0, 637, 639,
	197, 198, 395, 199, 664, 200, 665, 666, 0, 201,
	0, 202, 0, 203, 0, 0, 657, 205, 0, 206,
	0, 0, 0, 599, 207, 208, 209, 644, 645, 622,
	689, 0, 0, 0, 0, 0, 210, 211, 667, 668,
	669, 0, 212, 0, 213, 0, 0, 690, 0, 214,
	655, 0, 354, 0, 0, 215, 216, 0, 0, 217,
	218, 651, 653, 692, 0, 357, 222, 0, 219, 0,
	691, 220, 670, 221, 671, 672, 673, 674, 675, 0,
	633, 0, 693, 223, 224, 225, 694, 226, 227, 228,
	0, 230, 229, 0, 656, 695, 231, 696, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 366, 237,
	697, 239, 240, 242, 241, 594, 0, 623, 652, 243,
	676, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 369, 698, 249, 699, 646, 250, 251, 252, 253,
	254, 0, 255, 647, 256, 372, 257, 0, 258, 259,
	260, 261, 262, 677, 263, 264, 0, 265, 266, 267,
	268, 269, 0, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 700, 278, 279, 600, 280, 0, 284, 285,
	286, 287, 0, 289, 375, 288, 290, 291, 640, 292,
	281, 282, 293, 701, 294, 678, 377, 295, 0, 302,
	296, 297, 283, 298, 301, 679, 299, 300, 648, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	380, 680, 681, 0, 0, 311, 312, 649, 650, 621,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	641, 321, 0, 385, 322, 323, 324, 386, 682, 2007,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 595, 0, 626, 615, 616, 613, 614, 605, 0,
	0, 593, 0, 0, 0, 0, 591, 592, 0, 176,
	177, 0, 178, 0, 0, 601, 0, 643, 608, 0,
	0, 604, 179, 180, 181, 332, 658, 334, 659, 182,
	660, 661, 0, 183, 338, 339, 184, 185, 611, 642,
	662, 663, 342, 0, 186, 654, 0, 634, 0, 187,
	188, 189, 0, 190, 0, 191, 0, 192, 193, 0,
	688, 194, 195, 196, 0, 635, 636, 638, 0, 637,
	639, 197, 198, 395, 199, 664, 200, 665, 666, 0,
	201, 0, 202, 0, 203, 0, 0, 657, 205, 0,
	206, 0, 0, 0, 599, 207, 208, 209, 644, 645,
	622, 689, 0, 0, 0, 0, 0, 210, 211, 667,
	668, 669, 0, 212, 0, 213, 0, 0, 690, 0,
	214, 655, 0, 354, 0, 0, 215, 216, 0, 0,
	217, 218, 651, 653, 692, 0, 357, 222, 0, 219,
	0, 691, 220, 670, 221, 671, 672, 673, 674, 675,
	0, 633, 0, 693, 223, 224, 225, 694, 226, 227,
	228, 0, 230, 229, 0, 656, 695, 231, 696, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 366,
	237, 697, 239, 240, 242, 241, 594, 0, 623, 652,
	243, 676, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 369, 698, 249, 699, 646, 250, 251, 252,
	253, 254, 0, 255, 647, 256, 372, 257, 0, 258,
	259, 260, 261, 262, 677, 263, 264, 0, 265, 266,
	267, 268, 269, 0, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 700, 278, 279, 600, 280, 0, 284,
	285, 286, 287, 0, 289, 375, 288, 290, 291, 640,
	292, 281, 282, 293, 701, 294, 678, 377, 295, 0,
	302, 296, 297, 283, 298, 301, 679, 299, 300, 648,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 380, 680, 681, 0, 0, 311, 312, 649, 650,
	621, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 641, 321, 0, 385, 322, 323, 324, 386, 682,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 595, 0, 626, 615, 616, 613, 614, 605,
	0, 0, 593, 0, 0, 0, 0, 591, 592, 1070,
	176, 177, 0, 178, 0, 0, 601, 0, 643, 608,
	0, 0, 604, 179, 180, 181, 332, 658, 334, 659,
	182, 660, 661, 0, 183, 338, 339, 184, 185, 611,
	642, 662, 663, 342, 0, 186, 654, 0, 634, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 688, 194, 195, 196, 0, 635, 636, 638, 0,
	637, 639, 197, 198, 395, 199, 664, 200, 665, 666,
	0, 201, 0, 202, 0, 203, 0, 0, 657, 205,
	0, 206, 0, 0, 0, 599, 207, 208, 209, 644,
	645, 622, 689, 0, 0, 0, 0, 0, 210, 211,
	667, 668, 669, 0, 212, 0, 213, 0, 1544, 690,
	0, 214, 655, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 651, 653, 692, 0, 357, 222, 0,
	219, 0, 691, 220, 670, 221, 671, 672, 673, 674,
	675, 0, 633, 0, 693, 223, 224, 225, 694, 226,
	227, 228, 0, 230, 229, 0, 656, 695, 231, 696,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 697, 239, 240, 242, 241, 594, 0, 623,
	652, 243, 676, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 698, 249, 699, 646, 250, 251,
	252, 253, 254, 0, 255, 647, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 677, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 700, 278, 279, 600, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	640, 292, 281, 282, 293, 701, 294, 678, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 679, 299, 300,
	648, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 680, 681, 0, 0, 311, 312, 649,
	650, 621, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 641, 321, 0, 385, 322, 323, 324, 386,
	682, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 595, 1589, 0, 626, 615, 616, 613,
	614, 605, 0, 593, 0, 0, 0, 0, 591, 592,
	0, 0, 176, 177, 0, 178, 0, 601, 0, 0,
	643, 608, 0, 604, 0, 179, 180, 181, 332, 658,
	334, 659, 182, 660, 661, 0, 183, 338, 339, 184,
	185, 611, 642, 662, 663, 342, 0, 186, 654, 0,
	634, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 688, 194, 195, 196, 0, 635, 636,
	638, 0, 637, 639, 197, 198, 395, 199, 664, 200,
	665, 666, 0, 201, 0, 202, 0, 203, 0, 0,
	657, 205, 0, 206, 0, 0, 0, 599, 207, 208,
	209, 644, 645, 622, 689, 0, 0, 0, 0, 0,
	210, 211, 667, 668, 669, 0, 212, 0, 213, 0,
	0, 690, 0, 214, 655, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 651, 653, 692, 0, 357,
	222, 0, 219, 0, 691, 220, 670, 221, 671, 672,
	673, 674, 675, 0, 633, 0, 693, 223, 224, 225,
	694, 226, 227, 228, 0, 230, 229, 0, 656, 695,
	231, 696, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 697, 239, 240, 242, 241, 594,
	0, 623, 652, 243, 676, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 698, 249, 699, 646,
	250, 251, 252, 253, 254, 0, 255, 647, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 677, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 700, 278, 279, 600,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 640, 292, 281, 282, 293, 701, 294, 678,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 679,
	299, 300, 648, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 680, 681, 0, 0, 311,
	312, 649, 650, 621, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 641, 321, 0, 385, 322, 323,
	324, 386, 682, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 595, 1553, 0, 626, 615,
	616, 613, 614, 605, 0, 593, 0, 0, 0, 0,
	591, 592, 0, 0, 176, 177, 0, 178, 0, 601,
	0, 0, 643, 608, 0, 604, 0, 179, 180, 181,
	332, 658, 334, 659, 182, 660, 661, 0, 183, 338,
	339, 184, 185, 611, 642, 662, 663, 342, 0, 186,
	654, 0, 634, 0, 187, 188, 189, 0, 190, 0,
	191, 0, 192, 193, 0, 688, 194, 195, 196, 0,
	635, 636, 638, 0, 637, 639, 197, 198, 395, 199,
	664, 200, 665, 666, 0, 201, 0, 202, 0, 203,
	0, 0, 657, 205, 0, 206, 0, 0, 0, 599,
	207, 208, 209, 644, 645, 622, 689, 0, 0, 0,
	0, 0, 210, 211, 667, 668, 669, 0, 212, 0,
	213, 0, 0, 690, 0, 214, 655, 0, 354, 0,
	0, 215, 216, 0, 0, 217, 218, 651, 653, 692,
	0, 357, 222, 0, 219, 0, 691, 220, 670, 221,
	671, 672, 673, 674, 675, 0, 633, 0, 693, 223,
	224, 225, 694, 226, 227, 228, 0, 230, 229, 0,
	656, 695, 231, 696, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 366, 237, 697, 239, 240, 242,
	241, 594, 0, 623, 652, 243, 676, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 369, 698, 249,
	699, 646, 250, 251, 252, 253, 254, 0, 255, 647,
	256, 372, 257, 0, 258, 259, 260, 261, 262, 677,
	263, 264, 0, 265, 266, 267, 268, 269, 0, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 700, 278,
	279, 600, 280, 0, 284, 285, 286, 287, 0, 289,
	375, 288, 290, 291, 640, 292, 281, 282, 293, 701,
	294, 678, 377, 295, 0, 302, 296, 297, 283, 298,
	301, 679, 299, 300, 648, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 380, 680, 681, 0,
	0, 311, 312, 649, 650, 621, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 641, 321, 0, 385,
	322, 323, 324, 386, 682, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 595, 1551, 0,
	626, 615, 616, 613, 614, 605, 0, 593, 0, 0,
	0, 0, 591, 592, 0, 0, 176, 177, 0, 178,
	0, 601, 0, 0, 643, 608, 0, 604, 0, 179,
	180, 181, 332, 658, 334, 659, 182, 660, 661, 0,
	183, 338, 339, 184, 185, 611, 642, 662, 663, 342,
	0, 186, 654, 0, 634, 0, 187, 188, 189, 0,
	190, 0, 191, 0, 192, 193, 0, 688, 194, 195,
	196, 0, 635, 636, 638, 0, 637, 639, 197, 198,
	395, 199, 664, 200, 665, 666, 0, 201, 0, 202,
	0, 203, 0, 0, 657, 205, 0, 206, 0, 0,
	0, 599, 207, 208, 209, 644, 645, 622, 689, 0,
	0, 0, 0, 0, 210, 211, 667, 668, 669, 0,
	212, 0, 213, 0, 0, 690, 0, 214, 655, 0,
	354, 0, 0, 215, 216, 0, 0, 217, 218, 651,
	653, 692, 0, 357, 222, 0, 219, 0, 691, 220,
	670, 221, 671, 672, 673, 674, 675, 0, 633, 0,
	693, 223, 224, 225, 694, 226, 227, 228, 0, 230,
	229, 0, 656, 695, 231, 696, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 366, 237, 697, 239,
	240, 242, 241, 594, 0, 623, 652, 243, 676, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 369,
	698, 249, 699, 646, 250, 251, 252, 253, 254, 0,
	255, 647, 256, 372, 257, 0, 258, 259, 260, 261,
	262, 677, 263, 264, 0, 265, 266, 267, 268, 269,
	0, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	700, 278, 279, 600, 280, 0, 284, 285, 286, 287,
	0, 289, 375, 288, 290, 291, 640, 292, 281, 282,
	293, 701, 294, 678, 377, 295, 0, 302, 296, 297,
	283, 298, 301, 679, 299, 300, 648, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 380, 680,
	681, 0, 0, 311, 312, 649, 650, 621, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 641, 321,
	0, 385, 322, 323, 324, 386, 682, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 595,
	1535, 0, 626, 615, 616, 613, 614, 605, 0, 593,
	0, 0, 0, 0, 591, 592, 0, 0, 176, 177,
	0, 178, 0, 601, 0, 0, 643, 608, 0, 604,
	0, 179, 180, 181, 332, 658, 334, 659, 182, 660,
	661, 0, 183, 338, 339, 184, 185, 611, 642, 662,
	663, 342, 0, 186, 654, 0, 634, 0, 187, 188,
	189, 0, 190, 0, 191, 0, 192, 193, 0, 688,
	194, 195, 196, 0, 635, 636, 638, 0, 637, 639,
	197, 198, 395, 199, 664, 200, 665, 666, 0, 201,
	0, 202, 0, 203, 0, 0, 657, 205, 0, 206,
	0, 0, 0, 599, 207, 208, 209, 644, 645, 622,
	689, 0, 0, 0, 0, 0, 210, 211, 667, 668,
	669, 0, 212, 0, 213, 0, 0, 690, 0, 214,
	655, 0, 354, 0, 0, 215, 216, 0, 0, 217,
	218, 651, 653, 692, 0, 357, 222, 0, 219, 0,
	691, 220, 670, 221, 671, 672, 673, 674, 675, 0,
	633, 0, 693, 223, 224, 225, 694, 226, 227, 228,
	0, 230, 229, 0, 656, 695, 231, 696, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 366, 237,
	697, 239, 240, 242, 241, 594, 0, 623, 652, 243,
	676, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 369, 698, 249, 699, 646, 250, 251, 252, 253,
	254, 0, 255, 647, 256, 372, 257, 0, 258, 259,
	260, 261, 262, 677, 263, 264, 0, 265, 266, 267,
	268, 269, 0, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 700, 278, 279, 600, 280, 0, 284, 285,
	286, 287, 0, 289, 375, 288, 290, 291, 640, 292,
	281, 282, 293, 701, 294, 678, 377, 295, 0, 302,
	296, 297, 283, 298, 301, 679, 299, 300, 648, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	380, 680, 681, 0, 0, 311, 312, 649, 650, 621,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	641, 321, 0, 385, 322, 323, 324, 386, 682, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 595, 1523, 0, 626, 615, 616, 613, 614, 605,
	0, 593, 0, 0, 0, 0, 591, 592, 0, 0,
	176, 177, 0, 178, 0, 601, 0, 0, 643, 608,
	0, 604, 0, 179, 180, 181, 332, 658, 334, 659,
	182, 660, 661, 0, 183, 338, 339, 184, 185, 611,
	642, 662, 663, 342, 0, 186, 654, 0, 634, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 688, 194, 195, 196, 0, 635, 636, 638, 0,
	637, 639, 197, 198, 395, 199, 664, 200, 665, 666,
	0, 201, 0, 202, 0, 203, 0, 0, 657, 205,
	0, 206, 0, 0, 0, 599, 207, 208, 209, 644,
	645, 622, 689, 0, 0, 0, 0, 0, 210, 211,
	667, 668, 669, 0, 212, 0, 213, 0, 0, 690,
	0, 214, 655, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 651, 653, 692, 0, 357, 222, 0,
	219, 0, 691, 220, 670, 221, 671, 672, 673, 674,
	675, 0, 633, 0, 693, 223, 224, 225, 694, 226,
	227, 228, 0, 230, 229, 0, 656, 695, 231, 696,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 697, 239, 240, 242, 241, 594, 0, 623,
	652, 243, 676, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 698, 249, 699, 646, 250, 251,
	252, 253, 254, 0, 255, 647, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 677, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 700, 278, 279, 600, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	640, 292, 281, 282, 293, 701, 294, 678, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 679, 299, 300,
	648, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 680, 681, 0, 0, 311, 312, 649,
	650, 621, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 641, 321, 0, 385, 322, 323, 324, 386,
	682, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 595, 1521, 0, 1513, 615, 616, 613,
	614, 605, 0, 593, 0, 0, 0, 0, 591, 592,
	0, 0, 176, 177, 0, 178, 0, 601, 0, 0,
	643, 608, 0, 604, 0, 179, 180, 181, 332, 658,
	334, 659, 182, 660, 661, 0, 183, 338, 339, 184,
	185, 611, 642, 662, 663, 342, 0, 186, 654, 0,
	634, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 688, 194, 195, 196, 0, 635, 636,
	638, 0, 637, 639, 197, 198, 395, 199, 664, 1516,
	665, 666, 0, 201, 0, 202, 0, 203, 0, 0,
	657, 205, 0, 206, 0, 0, 0, 599, 207, 208,
	209, 644, 645, 622, 689, 0, 0, 0, 0, 0,
	210, 211, 667, 668, 669, 0, 212, 0, 213, 0,
	0, 690, 0, 214, 655, 0, 354, 0, 0, 215,
	1517, 0, 0, 217, 218, 651, 653, 692, 0, 357,
	222, 0, 219, 0, 691, 220, 670, 221, 671, 672,
	673, 674, 675, 0, 633, 0, 693, 223, 224, 225,
	694, 226, 227, 228, 0, 230, 229, 0, 656, 695,
	231, 696, 0, 232, 0, 0, 233, 0, 234, 1518,
	1515, 238, 366, 237, 697, 239, 240, 242, 241, 594,
	0, 623, 652, 243, 676, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 698, 249, 699, 646,
	250, 251, 252, 253, 254, 0, 255, 647, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 677, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 700, 278, 279, 600,
	280, 0, 284, 285, 286, 1519, 0, 289, 375, 288,
	290, 291, 640, 292, 281, 282, 293, 701, 294, 678,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 679,
	299, 300, 648, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 680, 681, 0, 0, 311,
	312, 649, 650, 621, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 641, 321, 0, 385, 322, 323,
	324, 386, 682, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 1514, 330, 595, 1510, 0, 1513, 615,
	616, 613, 614, 605, 0, 593, 0, 0, 0, 0,
	591, 592, 0, 0, 176, 177, 0, 178, 0, 601,
	0, 0, 643, 608, 0, 604, 0, 179, 180, 181,
	332, 658, 334, 659, 182, 660, 661, 0, 183, 338,
	339, 184, 185, 611, 642, 662, 663, 342, 0, 186,
	654, 0, 634, 0, 187, 188, 189, 0, 190, 0,
	191, 0, 192, 193, 0, 688, 194, 195, 196, 0,
	635, 636, 638, 0, 637, 639, 197, 198, 395, 199,
	664, 1516, 665, 666, 0, 201, 0, 202, 0, 203,
	0, 0, 657, 205, 0, 206, 0, 0, 0, 599,
	207, 208, 209, 644, 645, 622, 689, 0, 0, 0,
	0, 0, 210, 211, 667, 668, 669, 0, 212, 0,
	213, 0, 0, 690, 0, 214, 655, 0, 354, 0,
	0, 215, 1517, 0, 0, 217, 218, 651, 653, 692,
	0, 357, 222, 0, 219, 0, 691, 220, 670, 221,
	671, 672, 673, 674, 675, 0, 633, 0, 693, 223,
	224, 225, 694, 226, 227, 228, 0, 230, 229, 0,
	656, 695, 231, 696, 0, 232, 0, 0, 233, 0,
	234, 1518, 1515, 238, 366, 237, 697, 239, 240, 242,
	241, 594, 0, 623, 652, 243, 676, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 369, 698, 249,
	699, 646, 250, 251, 252, 253, 254, 0, 255, 647,
	256, 372, 257, 0, 258, 259, 260, 261, 262, 677,
	263, 264, 0, 265, 266, 267, 268, 269, 0, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 700, 278,
	279, 600, 280, 0, 284, 285, 286, 1519, 0, 289,
	375, 288, 290, 291, 640, 292, 281, 282, 293, 701,
	294, 678, 377, 295, 0, 302, 296, 297, 283, 298,
	301, 679, 299, 300, 648, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 380, 680, 681, 0,
	0, 311, 312, 649, 650, 621, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 641, 321, 0, 385,
	322, 323, 324, 386, 682, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 1514, 330, 595, 0, 626,
	615, 616, 613, 614, 605, 0, 0, 593, 0, 0,
	0, 0, 591, 592, 0, 176, 177, 0, 178, 0,
	0, 601, 0, 643, 608, 0, 0, 604, 179, 180,
	181, 332, 658, 334, 659, 182, 660, 661, 0, 183,
	338, 339, 184, 185, 611, 642, 662, 663, 342, 0,
	186, 654, 0, 634, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 688, 194, 195, 196,
	0, 635, 636, 638, 0, 637, 639, 197, 198, 395,
	199, 664, 200, 665, 666, 0, 201, 0, 202, 0,
	203, 0, 0, 657, 205, 0, 206, 0, 0, 0,
	599, 207, 208, 209, 644, 645, 622, 689, 0, 0,
	0, 0, 0, 210, 211, 667, 668, 669, 0, 212,
	0, 213, 0, 0, 690, 0, 214, 655, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 651, 653,
	692, 0, 357, 222, 0, 219, 0, 691, 220, 670,
	221, 671, 672, 673, 674, 675, 0, 633, 0, 693,
	223, 224, 225, 694, 226, 227, 228, 0, 230, 229,
	0, 656, 695, 231, 696, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 697, 239, 240,
	242, 241, 594, 0, 623, 652, 243, 676, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 369, 698,
	249, 699, 646, 250, 251, 252, 253, 254, 0, 255,
	647, 256, 372, 257, 0, 258, 259, 260, 261, 262,
	677, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 700,
	278, 279, 600, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 640, 292, 281, 282, 293,
	701, 294, 678, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 679, 299, 300, 648, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 680, 681,
	0, 0, 311, 312, 649, 650, 621, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 641, 321, 0,
	385, 322, 323, 324, 386, 682, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 595, 0,
	626, 615, 616, 613, 614, 605, 0, 0, 593, 0,
	0, 0, 0, 591, 592, 0, 176, 177, 1376, 178,
	1013, 0, 601, 0, 643, 608, 0, 0, 604, 179,
	180, 181, 332, 658, 334, 659, 182, 660, 661, 0,
	183, 338, 339, 184, 185, 611, 642, 662, 663, 342,
	0, 186, 654, 0, 634, 0, 187, 188, 189, 0,
	190, 0, 191, 0, 192, 193, 0, 688, 194, 195,
	196, 0, 635, 636, 638, 0, 637, 639, 197, 198,
	395, 199, 664, 200, 665, 666, 0, 201, 0, 202,
	0, 203, 0, 0, 657, 205, 0, 206, 0, 0,
	0, 599, 207, 208, 209, 644, 645, 622, 689, 0,
	0, 0, 0, 0, 210, 211, 667, 668, 669, 0,
	212, 0, 213, 0, 0, 690, 0, 214, 655, 0,
	354, 0, 0, 215, 216, 0, 0, 217, 218, 651,
	653, 692, 0, 357, 222, 0, 219, 0, 691, 220,
	670, 221, 671, 672, 673, 674, 675, 0, 633, 0,
	693, 223, 224, 225, 694, 226, 227, 228, 0, 230,
	229, 0, 656, 695, 231, 696, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 366, 237, 697, 239,
	240, 242, 241, 594, 0, 623, 652, 243, 676, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 369,
	698, 249, 699, 646, 250, 251, 252, 253, 254, 0,
	255, 647, 256, 372, 257, 0, 258, 259, 260, 261,
	262, 677, 263, 264, 0, 265, 266, 267, 268, 269,
	0, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	700, 278, 279, 600, 280, 0, 284, 285, 286, 287,
	0, 289, 375, 288, 290, 291, 640, 292, 281, 282,
	293, 701, 294, 678, 377, 295, 0, 302, 296, 297,
	283, 298, 301, 679, 299, 300, 648, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 380, 680,
	681, 0, 0, 311, 312, 649, 650, 621, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 641, 321,
	0, 385, 322, 323, 324, 386, 682, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 595,
	768, 0, 626, 615, 616, 613, 614, 605, 0, 593,
	0, 0, 0, 0, 591, 592, 0, 0, 176, 177,
	0, 178, 0, 601, 0, 0, 643, 608, 0, 604,
	0, 179, 180, 181, 332, 658, 334, 659, 182, 660,
	661, 0, 183, 338, 339, 184, 185, 611, 642, 662,
	663, 342, 0, 186, 654, 0, 634, 0, 187, 188,
	189, 0, 190, 0, 191, 0, 192, 193, 0, 688,
	194, 195, 196, 0, 635, 636, 638, 0, 637, 639,
	197, 198, 395, 199, 664, 200, 665, 666, 0, 201,
	0, 202, 0, 203, 0, 0, 657, 205, 0, 206,
	0, 0, 0, 599, 207, 208, 209, 644, 645, 622,
	689, 0, 0, 0, 0, 0, 210, 211, 667, 668,
	669, 0, 212, 0, 213, 0, 0, 690, 0, 214,
	655, 0, 354, 0, 0, 215, 216, 0, 0, 217,
	218, 651, 653, 692, 0, 357, 222, 0, 219, 0,
	691, 220, 670, 221, 671, 672, 673, 674, 675, 0,
	633, 0, 693, 223, 224, 225, 694, 226, 227, 228,
	0, 230, 229, 0, 656, 695, 231, 696, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 366, 237,
	697, 239, 240, 242, 241, 594, 0, 623, 652, 243,
	676, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 369, 698, 249, 699, 646, 250, 251, 252, 253,
	254, 0, 255, 647, 256, 372, 257, 0, 258, 259,
	260, 261, 262, 677, 263, 264, 0, 265, 266, 267,
	268, 269, 0, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 700, 278, 279, 600, 280, 0, 284, 285,
	286, 287, 0, 289, 375, 288, 290, 291, 640, 292,
	281, 282, 293, 701, 294, 678, 377, 295, 0, 302,
	296, 297, 283, 298, 301, 679, 299, 300, 648, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	380, 680, 681, 0, 0, 311, 312, 649, 650, 621,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	641, 321, 0, 385, 322, 323, 324, 386, 682, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 595, 766, 0, 626, 615, 616, 613, 614, 605,
	0, 593, 0, 0, 0, 0, 591, 592, 0, 0,
	176, 177, 0, 178, 0, 601, 0, 0, 643, 608,
	0, 604, 0, 179, 180, 181, 332, 658, 334, 659,
	182, 660, 661, 0, 183, 338, 339, 184, 185, 611,
	642, 662, 663, 342, 0, 186, 654, 0, 634, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 688, 194, 195, 196, 0, 635, 636, 638, 0,
	637, 639, 197, 198, 395, 199, 664, 200, 665, 666,
	0, 201, 0, 202, 0, 203, 0, 0, 657, 205,
	0, 206, 0, 0, 0, 599, 207, 208, 209, 644,
	645, 622, 689, 0, 0, 0, 0, 0, 210, 211,
	667, 668, 669, 0, 212, 0, 213, 0, 0, 690,
	0, 214, 655, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 651, 653, 692, 0, 357, 222, 0,
	219, 0, 691, 220, 670, 221, 671, 672, 673, 674,
	675, 0, 633, 0, 693, 223, 224, 225, 694, 226,
	227, 228, 0, 230, 229, 0, 656, 695, 231, 696,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 697, 239, 240, 242, 241, 594, 0, 623,
	652, 243, 676, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 698, 249, 699, 646, 250, 251,
	252, 253, 254, 0, 255, 647, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 677, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 700, 278, 279, 600, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	640, 292, 281, 282, 293, 701, 294, 678, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 679, 299, 300,
	648, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 680, 681, 0, 0, 311, 312, 649,
	650, 621, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 641, 321, 0, 385, 322, 323, 324, 386,
	682, 0, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 595, 0, 626, 615, 616, 613, 614,
	605, 0, 0, 593, 0, 0, 0, 0, 591, 592,
	0, 176, 177, 0, 178, 0, 0, 601, 0, 643,
	608, 0, 0, 604, 179, 180, 181, 332, 658, 334,
	659, 182, 660, 661, 0, 183, 338, 339, 184, 185,
	611, 642, 662, 663, 342, 0, 186, 654, 0, 634,
	0, 187, 188, 189, 0, 190, 0, 191, 0, 192,
	193, 0, 688, 194, 195, 2460, 0, 635, 636, 638,
	0, 637, 639, 197, 198, 395, 199, 664, 200, 665,
	666, 0, 201, 0, 202, 0, 203, 0, 0, 657,
	205, 0, 206, 0, 0, 0, 599, 207, 208, 209,
	644, 645, 622, 689, 0, 0, 0, 0, 0, 210,
	211, 667, 668, 669, 0, 212, 0, 213, 0, 0,
	690, 0, 214, 655, 0, 354, 0, 0, 215, 216,
	0, 0, 217, 218, 651, 653, 692, 0, 357, 222,
	0, 219, 0, 691, 220, 670, 221, 671, 672, 673,
	674, 675, 0, 633, 0, 693, 223, 224, 225, 694,
	226, 227, 228, 0, 230, 229, 0, 656, 695, 231,
	696, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 366, 237, 697, 239, 240, 242, 241, 594, 0,
	623, 652, 243, 676, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 369, 698, 249, 699, 646, 250,
	251, 252, 253, 254, 0, 255, 647, 256, 372, 257,
	0, 258, 259, 260, 261, 262, 677, 263, 264, 0,
	265, 266, 267, 268, 269, 0, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 700, 278, 279, 600, 280,
	0, 284, 285, 286, 287, 0, 289, 375, 288, 290,
	291, 640, 292, 281, 282, 293, 701, 294, 678, 377,
	295, 0, 302, 296, 297, 283, 298, 301, 679, 299,
	300, 648, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 380, 680, 681, 0, 0, 311, 312,
	649, 650, 621, 313, 314, 2459, 316, 0, 0, 317,
	318, 319, 320, 641, 321, 0, 385, 322, 323, 324,
	386, 682, 0, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 595, 0, 626, 615, 616, 613,
	614, 605, 0, 0, 593, 0, 0, 0, 0, 591,
	592, 0, 176, 177, 0, 178, 0, 0, 601, 0,
	643, 608, 0, 0, 604, 179, 180, 181, 332, 658,
	334, 659, 182, 660, 661, 0, 183, 338, 339, 184,
	185, 611, 642, 662, 663, 342, 0, 186, 654, 0,
	634, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 688, 194, 195, 196, 0, 635, 636,
	638, 0, 637, 639, 197, 198, 395, 199, 664, 200,
	665, 666, 0, 201, 0, 202, 0, 203, 0, 0,
	657, 205, 0, 206, 0, 0, 0, 599, 207, 208,
	209, 644, 645, 622, 689, 0, 0, 0, 0, 0,
	210, 211, 667, 668, 669, 0, 212, 0, 213, 0,
	0, 690, 0, 214, 655, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 651, 653, 692, 0, 357,
	222, 0, 219, 0, 691, 220, 670, 221, 671, 672,
	673, 674, 675, 0, 633, 0, 693, 223, 224, 225,
	694, 226, 227, 228, 0, 230, 229, 0, 656, 695,
	231, 696, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 697, 239, 240, 242, 241, 594,
	0, 623, 652, 243, 676, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 698, 249, 699, 646,
	250, 251, 252, 253, 254, 0, 255, 647, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 677, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 700, 278, 279, 600,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 640, 292, 281, 282, 293, 701, 294, 678,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 679,
	299, 300, 648, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 680, 681, 0, 0, 311,
	312, 649, 650, 621, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 641, 321, 0, 385, 322, 323,
	324, 386, 682, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 595, 0, 626, 615, 616,
	613, 614, 605, 0, 0, 593, 0, 0, 0, 0,
	591, 592, 0, 176, 177, 0, 178, 0, 0, 601,
	0, 643, 608, 0, 0, 604, 179, 180, 181, 2458,
	658, 334, 659, 182, 660, 661, 0, 183, 338, 339,
	184, 185, 611, 642, 662, 663, 342, 0, 186, 654,
	0, 634, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 688, 194, 195, 2460, 0, 635,
	636, 638, 0, 637, 639, 197, 198, 395, 199, 664,
	200, 665, 666, 0, 201, 0, 202, 0, 203, 0,
	0, 657, 205, 0, 206, 0, 0, 0, 599, 207,
	208, 209, 644, 645, 622, 689, 0, 0, 0, 0,
	0, 210, 211, 667, 668, 669, 0, 212, 0, 213,
	0, 0, 690, 0, 214, 655, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 651, 653, 692, 0,
	357, 222, 0, 219, 0, 691, 220, 670, 221, 671,
	672, 673, 674, 675, 0, 633, 0, 693, 223, 224,
	225, 694, 226, 227, 228, 0, 230, 229, 0, 656,
	695, 231, 696, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 697, 239, 240, 242, 241,
	594, 0, 623, 652, 243, 676, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 369, 698, 249, 699,
	646, 250, 251, 252, 253, 254, 0, 255, 647, 256,
	372, 257, 0, 258, 259, 260, 261, 262, 677, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 700, 278, 279,
	600, 280, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 640, 292, 281, 282, 293, 701, 294,
	678, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	679, 299, 300, 648, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 680, 681, 0, 0,
	311, 312, 649, 650, 621, 313, 314, 2459, 316, 0,
	0, 317, 318, 319, 320, 641, 321, 0, 385, 322,
	323, 324, 386, 682, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 595, 0, 626, 615,
	616, 613, 614, 605, 0, 0, 593, 0, 0, 0,
	0, 591, 592, 0, 176, 177, 0, 178, 0, 0,
	601, 0, 643, 608, 0, 0, 604, 179, 180, 181,
	332, 658, 334, 659, 182, 660, 661, 0, 183, 338,
	339, 184, 185, 611, 642, 662, 663, 342, 0, 186,
	654, 0, 634, 0, 187, 188, 189, 0, 190, 0,
	191, 0, 192, 193, 0, 688, 194, 195, 196, 0,
	635, 636, 638, 0, 637, 639, 197, 198, 395, 199,
	664, 200, 665, 666, 0, 201, 0, 202, 0, 203,
	0, 0, 657, 205, 0, 206, 0, 0, 0, 599,
	207, 208, 209, 644, 645, 622, 689, 0, 0, 0,
	0, 0, 210, 211, 667, 668, 669, 0, 212, 0,
	213, 0, 0, 690, 0, 214, 655, 0, 354, 0,
	0, 215, 216, 0, 0, 217, 218, 651, 653, 692,
	0, 357, 222, 0, 219, 0, 691, 220, 670, 221,
	671, 672, 673, 674, 675, 0, 633, 0, 693, 223,
	224, 225, 694, 226, 227, 228, 0, 230, 229, 0,
	656, 695, 231, 696, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 366, 237, 697, 239, 240, 242,
	241, 0, 0, 623, 652, 243, 676, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 369, 698, 249,
	699, 646, 250, 251, 252, 253, 254, 0, 255, 647,
	256, 372, 257, 0, 258, 259, 260, 261, 262, 677,
	263, 264, 0, 265, 266, 267, 268, 269, 0, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 700, 278,
	279, 1533, 280, 0, 284, 285, 286, 287, 0, 289,
	375, 288, 290, 291, 640, 292, 281, 282, 293, 701,
	294, 678, 377, 295, 0, 302, 296, 297, 283, 298,
	301, 679, 299, 300, 648, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 380, 680, 681, 0,
	0, 311, 312, 649, 650, 621, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 641, 321, 0, 385,
	322, 323, 324, 386, 682, 0, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 626,
	615, 616, 613, 614, 605, 0, 0, 1531, 0, 0,
	0, 0, 1529, 1530, 0, 176, 177, 0, 178, 0,
	0, 1532, 0, 643, 608, 0, 0, 604, 179, 180,
	181, 332, 658, 334, 659, 182, 660, 661, 0, 183,
	338, 339, 184, 185, 0, 642, 662, 663, 342, 0,
	186, 654, 0, 634, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 688, 194, 195, 196,
	0, 635, 636, 638, 0, 637, 639, 197, 198, 395,
	199, 664, 200, 665, 666, 0, 201, 0, 202, 0,
	203, 0, 0, 657, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 644, 645, 622, 689, 0, 0,
	0, 0, 0, 210, 211, 667, 668, 669, 0, 212,
	0, 213, 0, 0, 690, 0, 214, 655, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 651, 653,
	692, 0, 357, 222, 0, 219, 0, 691, 220, 670,
	221, 671, 672, 673, 674, 675, 0, 633, 0, 693,
	223, 224, 225, 694, 226, 227, 228, 0, 230, 229,
	0, 656, 695, 231, 696, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 697, 239, 240,
	242, 241, 0, 0, 623, 652, 243, 676, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 369, 698,
	249, 699, 646, 250, 251, 252, 253, 254, 0, 255,
	647, 256, 372, 257, 0, 258, 259, 260, 261, 262,
	677, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 700,
	278, 279, 1533, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 640, 292, 281, 282, 293,
	701, 294, 678, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 679, 299, 300, 648, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 680, 681,
	0, 0, 311, 312, 649, 650, 621, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 641, 321, 0,
	385, 322, 323, 324, 386, 682, 0, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	626, 615, 616, 613, 614, 605, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 1532, 0, 643, 608, 0, 0, 604, 179,
	180, 181, 0, 658, 334, 659, 182, 660, 661, 0,
	183, 338, 339, 184, 185, 611, 642, 662, 663, 342,
	0, 186, 654, 0, 634, 0, 187, 188, 189, 0,
	190, 0, 191, 0, 192, 193, 0, 688, 194, 195,
	2460, 0, 635, 636, 638, 0, 637, 639, 197, 198,
	395, 199, 664, 200, 665, 666, 0, 201, 0, 202,
	0, 203, 0, 0, 657, 205, 0, 206, 0, 0,
	0, 599, 207, 208, 209, 644, 645, 622, 689, 0,
	0, 0, 0, 0, 210, 211, 667, 668, 669, 0,
	212, 0, 213, 0, 0, 690, 0, 214, 655, 0,
	354, 0, 0, 215, 216, 0, 0, 217, 218, 651,
	653, 0, 0, 357, 222, 0, 219, 0, 691, 220,
	670, 221, 671, 672, 673, 674, 675, 0, 633, 0,
	0, 223, 224, 225, 694, 226, 227, 228, 0, 230,
	229, 0, 656, 695, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 366, 237, 697, 239,
	240, 242, 241, 594, 0, 623, 652, 243, 676, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 369,
	698, 249, 699, 646, 250, 251, 252, 253, 254, 0,
	255, 647, 256, 372, 257, 0, 258, 259, 260, 261,
	262, 677, 263, 264, 0, 265, 266, 267, 268, 269,
	0, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	700, 278, 279, 600, 280, 0, 284, 285, 286, 287,
	0, 289, 375, 288, 290, 291, 640, 292, 281, 282,
	293, 0, 294, 678, 377, 295, 0, 302, 296, 297,
	283, 298, 301, 679, 299, 300, 648, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 380, 680,
	681, 0, 0, 311, 312, 649, 650, 621, 313, 314,
	2459, 316, 0, 0, 317, 318, 319, 320, 641, 321,
	0, 385, 322, 323, 324, 386, 682, 0, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 626, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 591, 592, 0, 176, 177, 0,
	178, 0, 0, 601, 0, 643, 0, 0, 0, 604,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 642, 340, 341,
	342, 0, 186, 654, 0, 634, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 688, 194,
	195, 196, 0, 635, 636, 638, 0, 637, 639, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 644, 645, 0, 689,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 690, 0, 214, 655,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	651, 653, 692, 0, 357, 222, 0, 219, 0, 691,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 693, 223, 224, 225, 694, 226, 227, 228, 0,
	230, 229, 0, 656, 695, 231, 696, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 697,
	239, 240, 242, 241, 0, 0, 0, 652, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 698, 249, 699, 646, 250, 251, 252, 253, 254,
	0, 255, 647, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 700, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 640, 292, 281,
	282, 293, 701, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 648, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 649, 650, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 641,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	827, 0, 785, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 2106, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 789, 0, 187, 188,
	189, 0, 190, 0, 191, 0, 192, 193, 0, 688,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 344, 200, 345, 346, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 347, 207, 208, 209, 348, 349, 0,
	689, 0, 0, 0, 0, 0, 210, 211, 350, 351,
	352, 0, 212, 0, 213, 0, 0, 690, 0, 214,
	353, 0, 354, 0, 0, 215, 216, 0, 0, 217,
	218, 355, 356, 692, 0, 357, 222, 0, 219, 0,
	691, 220, 358, 221, 359, 360, 361, 362, 363, 0,
	364, 0, 693, 223, 224, 225, 694, 226, 227, 228,
	0, 230, 229, 0, 365, 695, 231, 696, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 366, 237,
	697, 239, 240, 242, 241, 0, 0, 0, 367, 243,
	368, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 369, 698, 249, 699, 370, 250, 251, 252, 253,
	254, 0, 255, 371, 256, 372, 257, 0, 258, 259,
	260, 261, 262, 373, 263, 264, 0, 265, 266, 267,
	268, 269, 0, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 700, 278, 279, 374, 280, 0, 284, 285,
	286, 287, 133, 289, 375, 288, 290, 291, 0, 292,
	281, 282, 293, 701, 294, 376, 377, 295, 0, 302,
	296, 297, 283, 298, 301, 378, 299, 300, 379, 0,
	303, 135, 304, 305, 306, 307, 308, 309, 310, 0,
	380, 381, 382, 0, 0, 311, 312, 383, 384, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 385, 322, 323, 324, 830, 387, 0,
	0, 325, 0, 0, 0, 127, 326, 327, 328, 329,
	330, 577, 128, 173, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 119, 0, 331, 0, 0,
	0, 0, 179, 180, 181, 332, 333, 334, 335, 182,
	336, 337, 0, 183, 338, 339, 184, 185, 0, 0,
	340, 341, 342, 0, 186, 343, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 0, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 0, 0,
	217, 218, 355, 356, 0, 0, 357, 222, 0, 219,
	0, 0, 220, 358, 221, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 365, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 366,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 367,
	243, 368, 244, 245, 0, 246, 0, 741, 247, 0,
	0, 248, 369, 0, 249, 0, 370, 250, 251, 252,
	253, 254, 0, 255, 371, 256, 372, 257, 0, 258,
	259, 260, 261, 262, 373, 263, 264, 0, 265, 266,
	267, 268, 269, 0, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 374, 280, 0, 284,
	285, 286, 287, 133, 289, 375, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 376, 377, 295, 0,
	302, 296, 297, 283, 298, 301, 378, 299, 300, 379,
	0, 303, 135, 304, 305, 306, 307, 308, 309, 310,
	0, 380, 381, 382, 0, 0, 311, 312, 383, 384,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 385, 322, 323, 324, 830, 387,
	0, 0, 325, 0, 0, 0, 127, 326, 327, 328,
	329, 330, 0, 128, 173, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 735, 0, 1092, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 355, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 741, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 133, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 135, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 830,
	387, 0, 0, 325, 0, 0, 0, 127, 326, 327,
	328, 329, 330, 577, 128, 173, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 176, 177, 0, 178, 735, 0, 1092, 0, 331,
	0, 0, 0, 0, 179, 180, 181, 332, 333, 334,
	335, 182, 336, 337, 0, 183, 338, 339, 184, 185,
	0, 0, 340, 341, 342, 0, 186, 343, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 0, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	0, 0, 217, 218, 355, 356, 0, 0, 357, 222,
	0, 219, 0, 0, 220, 358, 221, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 365, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 366, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 367, 243, 368, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 369, 0, 249, 0, 370, 250,
	251, 252, 253, 254, 0, 255, 371, 256, 372, 257,
	0, 258, 259, 260, 261, 262, 373, 263, 264, 0,
	265, 266, 267, 268, 269, 0, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 374, 280,
	0, 284, 285, 286, 287, 133, 289, 375, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 376, 377,
	295, 0, 302, 296, 297, 283, 298, 301, 378, 299,
	300, 379, 0, 303, 135, 304, 305, 306, 307, 308,
	309, 310, 0, 380, 381, 382, 0, 0, 311, 312,
	383, 384, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 385, 322, 323, 324,
	830, 387, 0, 0, 325, 0, 0, 0, 127, 326,
	327, 328, 329, 330, 1855, 128, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 119, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 0, 0, 357,
	222, 0, 219, 0, 0, 220, 358, 221, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 365, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 367, 243, 368, 244, 245, 0, 246, 0,
	741, 247, 0, 0, 248, 369, 0, 249, 0, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 373, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 376,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 381, 382, 0, 0, 311,
	312, 383, 384, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 387, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 734, 0, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 735, 0, 740,
	0, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 355, 356, 0, 0,
	357, 222, 0, 219, 0, 0, 220, 358, 221, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 365,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 367, 243, 368, 244, 245, 0, 246,
	0, 741, 247, 0, 0, 248, 369, 0, 249, 0,
	370, 250, 251, 252, 253, 254, 0, 255, 371, 256,
	372, 257, 0, 258, 259, 260, 261, 262, 373, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	374, 280, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	376, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	378, 299, 300, 379, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 381, 382, 0, 0,
	311, 312, 383, 384, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 385, 322,
	323, 324, 386, 387, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 735, 0,
	740, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 355, 356, 0, 0,
	357, 222, 0, 219, 0, 0, 220, 358, 221, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 365,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 367, 243, 368, 244, 245, 0, 246,
	0, 741, 247, 0, 0, 248, 369, 0, 249, 0,
	370, 250, 251, 252, 253, 254, 0, 255, 371, 256,
	372, 257, 0, 258, 259, 260, 261, 262, 373, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	374, 280, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	376, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	378, 299, 300, 379, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 381, 382, 0, 0,
	311, 312, 383, 384, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 385, 322,
	323, 324, 386, 387, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 173, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 735, 0,
	740, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 355, 356, 0, 0,
	357, 222, 0, 219, 0, 0, 220, 358, 221, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 365,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 367, 243, 368, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 369, 0, 249, 0,
	370, 250, 251, 252, 253, 254, 0, 255, 371, 256,
	372, 257, 0, 258, 259, 260, 261, 262, 373, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	374, 280, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	376, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	378, 299, 300, 379, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 381, 382, 0, 0,
	311, 312, 383, 384, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 385, 322,
	323, 324, 386, 387, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 1208, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 0, 0, 357,
	222, 0, 219, 0, 0, 220, 358, 221, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 365, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 367, 243, 368, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 0, 249, 0, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 373, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 376,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 381, 382, 0, 0, 311,
	312, 383, 384, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 387, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 1672,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 0, 0, 357,
	222, 0, 219, 0, 0, 220, 358, 221, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 365, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 367, 243, 368, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 0, 249, 0, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 373, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 376,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 381, 382, 0, 0, 311,
	312, 383, 384, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 387, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 2022,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 0, 0, 357,
	222, 0, 219, 0, 0, 220, 358, 221, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 365, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 367, 243, 368, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 0, 249, 0, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 373, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 376,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 381, 382, 0, 0, 311,
	312, 383, 384, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 387, 0, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 626, 615, 616, 613,
	614, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 1095,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 658,
	334, 659, 182, 660, 661, 0, 183, 338, 339, 184,
	185, 0, 0, 662, 663, 342, 0, 186, 343, 0,
	789, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 688, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 664, 200,
	665, 666, 0, 201, 0, 202, 0, 203, 0, 0,
	657, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 622, 689, 0, 0, 0, 0, 0,
	210, 211, 667, 668, 669, 0, 212, 0, 213, 0,
	0, 690, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 692, 0, 357,
	222, 0, 219, 0, 691, 220, 670, 221, 671, 672,
	673, 674, 675, 0, 633, 0, 693, 223, 224, 225,
	694, 226, 227, 228, 0, 230, 229, 0, 365, 695,
	231, 696, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 697, 239, 240, 242, 241, 0,
	0, 623, 367, 243, 676, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 698, 249, 699, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 677, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 700, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 701, 294, 678,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 679,
	299, 300, 379, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 680, 681, 0, 0, 311,
	312, 383, 384, 621, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 682, 0, 477, 325, 173, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 169, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 0, 0, 357,
	222, 0, 219, 0, 0, 220, 358, 221, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 365, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 367, 243, 368, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 0, 249, 0, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 373, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 376,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 0, 303, 168, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 381, 382, 0, 0, 311,
	312, 383, 384, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 387, 0, 166, 325, 173, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 172, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 169, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 0, 0, 357,
	222, 0, 219, 0, 0, 220, 358, 221, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 365, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 367, 243, 368, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 0, 249, 0, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 373, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 376,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 0, 303, 168, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 381, 382, 0, 0, 311,
	312, 383, 384, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 387, 0, 173, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 172, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 169, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 355, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 168, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 173, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 331, 0, 0, 0,
	172, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 0, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 344, 200, 345, 346, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 347, 207, 208, 209, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 350, 351,
	352, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	353, 0, 354, 0, 0, 215, 216, 0, 0, 217,
	218, 355, 356, 0, 0, 357, 222, 0, 219, 0,
	0, 220, 358, 221, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 365, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 366, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 367, 243,
	368, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 369, 0, 249, 0, 370, 250, 251, 252, 253,
	254, 0, 255, 371, 256, 372, 257, 0, 258, 259,
	260, 261, 262, 373, 263, 264, 0, 265, 266, 267,
	268, 269, 0, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 374, 280, 0, 284, 285,
	286, 287, 0, 289, 375, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 376, 377, 295, 0, 302,
	296, 297, 283, 298, 301, 378, 299, 300, 379, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	380, 381, 382, 0, 0, 311, 312, 383, 384, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 385, 322, 323, 324, 386, 387, 0,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 881, 0, 785, 784, 0, 0, 0, 782, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 176,
	177, 0, 178, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 179, 180, 181, 332, 333, 334, 335, 182,
	336, 337, 0, 183, 338, 339, 184, 185, 0, 0,
	340, 341, 342, 0, 186, 343, 0, 789, 0, 187,
	188, 189, 0, 190, 0, 191, 0, 192, 193, 0,
	688, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 689, 0, 0, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 690, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 0, 0,
	217, 218, 355, 356, 692, 0, 357, 222, 0, 219,
	0, 691, 220, 358, 221, 359, 360, 361, 362, 363,
	0, 364, 0, 693, 223, 224, 225, 694, 226, 227,
	228, 0, 230, 229, 0, 365, 695, 231, 696, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 366,
	237, 697, 239, 240, 242, 241, 0, 0, 0, 367,
	243, 368, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 369, 698, 249, 699, 370, 250, 251, 252,
	253, 254, 0, 255, 371, 256, 372, 257, 0, 258,
	259, 260, 261, 262, 373, 263, 264, 0, 265, 266,
	267, 268, 269, 0, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 700, 278, 279, 374, 280, 0, 284,
	285, 286, 287, 0, 289, 375, 288, 290, 291, 0,
	292, 281, 282, 293, 701, 294, 376, 377, 295, 0,
	302, 296, 297, 283, 298, 301, 378, 299, 300, 379,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 380, 381, 382, 0, 0, 311, 312, 383, 384,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 385, 322, 323, 324, 386, 387,
	0, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 780, 0, 785, 784, 0, 0, 0, 782,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 789, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 688, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 689, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 690,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 779, 356, 692, 0, 357, 222, 0,
	219, 0, 691, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 693, 223, 224, 225, 694, 226,
	227, 228, 0, 230, 229, 0, 365, 695, 231, 696,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 697, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 698, 249, 699, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 700, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 701, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 785, 784, 325, 0, 0, 782, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 789, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 688, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 689,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 690, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 692, 0, 357, 222, 0, 219, 0, 691,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 693, 223, 224, 225, 694, 226, 227, 228, 0,
	230, 229, 0, 365, 695, 231, 696, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 697,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 698, 249, 699, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 700, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 701, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 785, 784,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 186,
	343, 0, 789, 0, 187, 188, 189, 0, 190, 0,
	191, 0, 192, 193, 0, 688, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	344, 200, 345, 346, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 347,
	207, 208, 209, 348, 349, 0, 689, 0, 0, 0,
	0, 0, 210, 211, 350, 351, 352, 0, 212, 0,
	213, 0, 0, 690, 0, 214, 353, 0, 354, 0,
	0, 215, 216, 0, 0, 217, 218, 355, 356, 692,
	0, 357, 222, 0, 219, 0, 691, 220, 358, 221,
	359, 360, 361, 362, 363, 0, 364, 0, 693, 223,
	224, 225, 694, 226, 227, 228, 0, 230, 229, 0,
	365, 695, 231, 696, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 366, 237, 697, 239, 240, 242,
	241, 0, 0, 0, 367, 243, 368, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 369, 698, 249,
	699, 370, 250, 251, 252, 253, 254, 0, 255, 371,
	256, 372, 257, 0, 258, 259, 260, 261, 262, 373,
	263, 264, 0, 265, 266, 267, 268, 269, 0, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 700, 278,
	279, 374, 280, 0, 284, 285, 286, 287, 0, 289,
	375, 288, 290, 291, 0, 292, 281, 282, 293, 701,
	294, 376, 377, 295, 0, 302, 296, 297, 283, 298,
	301, 378, 299, 300, 379, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 380, 381, 382, 0,
	0, 311, 312, 383, 384, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 385,
	322, 323, 324, 386, 387, 785, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 179, 180, 181, 332, 333, 334,
	335, 182, 336, 337, 0, 183, 338, 339, 184, 185,
	0, 0, 340, 341, 342, 0, 186, 343, 0, 789,
	0, 187, 188, 189, 0, 190, 0, 191, 0, 192,
	193, 0, 688, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 689, 0, 0, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	690, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	0, 0, 217, 218, 355, 356, 692, 0, 357, 222,
	0, 219, 0, 691, 220, 358, 221, 359, 360, 361,
	362, 363, 0, 364, 0, 693, 223, 224, 225, 694,
	226, 227, 228, 0, 230, 229, 0, 365, 695, 231,
	696, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 366, 237, 697, 239, 240, 242, 241, 0, 0,
	0, 367, 243, 368, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 369, 698, 249, 699, 370, 250,
	251, 252, 253, 254, 0, 255, 371, 256, 372, 257,
	0, 258, 259, 260, 261, 262, 373, 263, 264, 0,
	265, 266, 267, 268, 269, 0, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 700, 278, 279, 374, 280,
	0, 284, 285, 286, 287, 0, 289, 375, 288, 290,
	291, 0, 292, 281, 282, 293, 701, 294, 376, 377,
	295, 0, 302, 296, 297, 283, 298, 301, 378, 299,
	300, 379, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 380, 381, 382, 0, 0, 311, 312,
	383, 384, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 385, 322, 323, 324,
	386, 387, 173, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 1609, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 1607, 191, 0, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 344, 200, 345, 346, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 347, 207, 208, 209, 348, 349, 0,
	1648, 0, 0, 0, 0, 0, 210, 211, 350, 351,
	352, 0, 212, 0, 213, 1612, 0, 0, 0, 214,
	353, 0, 354, 0, 0, 215, 216, 0, 0, 217,
	218, 355, 356, 0, 0, 357, 222, 1646, 219, 0,
	0, 220, 358, 221, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 365, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 366, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 367, 243,
	368, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 369, 0, 249, 0, 370, 250, 251, 252, 253,
	254, 0, 255, 371, 256, 372, 257, 1611, 258, 259,
	260, 261, 262, 373, 263, 264, 0, 265, 266, 267,
	268, 269, 0, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 374, 280, 0, 284, 285,
	286, 287, 0, 289, 375, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 376, 377, 295, 0, 302,
	296, 297, 283, 298, 301, 378, 299, 300, 379, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	380, 381, 382, 0, 0, 311, 312, 383, 384, 0,
	313, 314, 315, 316, 0, 1647, 317, 318, 319, 320,
	0, 321, 0, 385, 322, 323, 324, 386, 387, 173,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 1609,
	186, 343, 0, 0, 1604, 187, 188, 189, 0, 190,
	1607, 191, 0, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 1612, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 1603, 356,
	0, 0, 357, 222, 0, 219, 0, 0, 220, 358,
	221, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 365, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 367, 243, 368, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 369, 0,
	249, 0, 370, 250, 251, 252, 253, 254, 0, 255,
	371, 256, 372, 257, 1611, 258, 259, 260, 261, 262,
	373, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 374, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 376, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 378, 299, 300, 379, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 381, 382,
	0, 0, 311, 312, 383, 384, 0, 313, 314, 315,
	316, 0, 1610, 317, 318, 319, 320, 0, 321, 0,
	385, 322, 323, 324, 386, 387, 0, 805, 325, 173,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 355, 356,
	0, 0, 357, 222, 0, 219, 0, 0, 220, 358,
	221, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 365, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 367, 243, 368, 244, 245,
	0, 246, 0, 741, 247, 0, 0, 248, 369, 0,
	249, 0, 370, 250, 251, 252, 253, 254, 0, 255,
	371, 256, 372, 257, 0, 258, 259, 260, 261, 262,
	373, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 374, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 376, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 378, 299, 300, 379, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 381, 382,
	0, 0, 311, 312, 383, 384, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	385, 322, 323, 324, 386, 387, 0, 747, 325, 173,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 749, 356,
	0, 0, 357, 222, 0, 219, 0, 0, 220, 358,
	221, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 365, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 367, 243, 368, 244, 245,
	0, 246, 0, 741, 247, 0, 0, 248, 369, 0,
	249, 0, 370, 250, 251, 252, 253, 254, 0, 255,
	371, 256, 372, 257, 0, 258, 259, 260, 261, 262,
	373, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 374, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 376, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 378, 299, 300, 379, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 381, 382,
	0, 0, 311, 312, 383, 384, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	385, 322, 323, 324, 386, 387, 0, 743, 325, 173,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 745, 356,
	0, 0, 357, 222, 0, 219, 0, 0, 220, 358,
	221, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 365, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 367, 243, 368, 244, 245,
	0, 246, 0, 741, 247, 0, 0, 248, 369, 0,
	249, 0, 370, 250, 251, 252, 253, 254, 0, 255,
	371, 256, 372, 257, 0, 258, 259, 260, 261, 262,
	373, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 374, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 376, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 378, 299, 300, 379, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 381, 382,
	0, 0, 311, 312, 383, 384, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	385, 322, 323, 324, 386, 387, 0, 407, 325, 173,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 406, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 355, 356,
	0, 0, 357, 222, 0, 219, 0, 0, 220, 358,
	221, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 365, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 367, 243, 368, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 369, 0,
	249, 0, 370, 250, 251, 252, 253, 254, 0, 255,
	371, 256, 372, 405, 0, 258, 259, 260, 261, 262,
	373, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 374, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 376, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 378, 299, 300, 379, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 381, 382,
	0, 0, 311, 312, 383, 384, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	385, 322, 323, 324, 386, 387, 173, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 1592, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 0, 0, 357,
	222, 0, 219, 0, 0, 220, 358, 221, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 365, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 367, 243, 368, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 0, 249, 0, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 373, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 374,
	280, 0, 284, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 376,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 381, 382, 0, 0, 311,
	312, 383, 384, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 387, 173, 2168, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 331, 0, 0,
	0, 0, 179, 180, 181, 332, 333, 334, 335, 182,
	336, 337, 0, 183, 338, 339, 184, 185, 0, 0,
	340, 341, 342, 0, 186, 343, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 0, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 0, 0,
	217, 218, 355, 356, 0, 0, 357, 222, 0, 219,
	0, 0, 220, 358, 221, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 365, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 366,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 367,
	243, 368, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 369, 0, 249, 0, 370, 250, 251, 252,
	253, 254, 0, 255, 371, 256, 372, 257, 0, 258,
	259, 260, 261, 262, 373, 263, 264, 0, 265, 266,
	267, 268, 269, 0, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 374, 280, 0, 284,
	285, 286, 287, 0, 289, 375, 288, 290, 291, 0,
	292, 281, 282, 293, 0, 294, 376, 377, 295, 0,
	302, 296, 297, 283, 298, 301, 378, 299, 300, 379,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 380, 381, 382, 0, 0, 311, 312, 383, 384,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 385, 322, 323, 324, 386, 387,
	173, 2168, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 0, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 350, 351, 352, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 353, 0,
	354, 0, 0, 215, 216, 0, 0, 217, 218, 355,
	356, 0, 0, 357, 222, 0, 219, 0, 0, 220,
	358, 221, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 365, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 366, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 367, 243, 368, 244,
	245, 0, 246, 0, 0, 2165, 0, 0, 248, 369,
	0, 249, 0, 370, 250, 251, 252, 253, 254, 0,
	255, 371, 256, 372, 257, 0, 258, 259, 260, 261,
	262, 373, 263, 264, 0, 265, 266, 267, 268, 269,
	0, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 374, 280, 0, 284, 285, 286, 287,
	0, 289, 375, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 376, 377, 295, 0, 302, 296, 297,
	283, 298, 301, 378, 299, 300, 379, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 380, 381,
	382, 0, 0, 311, 312, 383, 384, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 385, 322, 323, 324, 386, 387, 173, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 355, 356, 0, 0,
	357, 222, 0, 219, 0, 0, 220, 358, 221, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 365,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 367, 243, 368, 244, 245, 0, 246,
	0, 741, 247, 0, 0, 248, 369, 0, 249, 0,
	370, 250, 251, 252, 253, 254, 0, 255, 371, 256,
	372, 257, 0, 258, 259, 260, 261, 262, 373, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	374, 280, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	376, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	378, 299, 300, 379, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 381, 382, 0, 0,
	311, 312, 383, 384, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 385, 322,
	323, 324, 386, 387, 0, 1365, 325, 173, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 355, 356, 0, 0,
	357, 222, 0, 219, 0, 0, 220, 358, 221, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 365,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 367, 243, 368, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 369, 0, 249, 0,
	370, 250, 251, 252, 253, 254, 0, 255, 371, 256,
	372, 257, 0, 258, 259, 260, 261, 262, 373, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	374, 280, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	376, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	378, 299, 300, 379, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 381, 382, 0, 0,
	311, 312, 383, 384, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 385, 322,
	323, 324, 386, 387, 0, 1363, 325, 173, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 355, 356, 0, 0,
	357, 222, 0, 219, 0, 0, 220, 358, 221, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 365,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 367, 243, 368, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 369, 0, 249, 0,
	370, 250, 251, 252, 253, 254, 0, 255, 371, 256,
	372, 257, 0, 258, 259, 260, 261, 262, 373, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	374, 280, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	376, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	378, 299, 300, 379, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 381, 382, 0, 0,
	311, 312, 383, 384, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 385, 322,
	323, 324, 386, 387, 173, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 0, 0, 0, 0,
	176, 177, 1345, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 355, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 503, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 860, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 355, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 505, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 500, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 1223, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 1222, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 503, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 860, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 355, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 505, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 500, 381, 382, 0, 0, 311, 861, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 503, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 494, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 355, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 505, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 844, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 500, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 823, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 822, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 820, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 819, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 816, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 815, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 813, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 812, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 0, 809, 325, 173, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 0, 0, 0,
	176, 177, 0, 178, 0, 0, 0, 0, 331, 0,
	0, 0, 0, 179, 180, 181, 332, 333, 334, 335,
	182, 336, 337, 0, 183, 338, 339, 184, 185, 0,
	0, 340, 341, 342, 0, 186, 343, 0, 0, 0,
	187, 188, 189, 0, 190, 0, 191, 0, 192, 193,
	0, 0, 194, 195, 196, 0, 0, 0, 0, 0,
	0, 0, 197, 198, 395, 199, 344, 200, 345, 346,
	0, 201, 0, 202, 0, 203, 0, 0, 204, 205,
	0, 206, 0, 0, 0, 347, 207, 208, 209, 348,
	349, 0, 0, 0, 0, 0, 0, 0, 210, 211,
	350, 351, 352, 0, 212, 0, 213, 0, 0, 0,
	0, 214, 353, 0, 354, 0, 0, 215, 216, 0,
	0, 217, 218, 808, 356, 0, 0, 357, 222, 0,
	219, 0, 0, 220, 358, 221, 359, 360, 361, 362,
	363, 0, 364, 0, 0, 223, 224, 225, 0, 226,
	227, 228, 0, 230, 229, 0, 365, 0, 231, 0,
	0, 232, 0, 0, 233, 0, 234, 235, 236, 238,
	366, 237, 0, 239, 240, 242, 241, 0, 0, 0,
	367, 243, 368, 244, 245, 0, 246, 0, 0, 247,
	0, 0, 248, 369, 0, 249, 0, 370, 250, 251,
	252, 253, 254, 0, 255, 371, 256, 372, 257, 0,
	258, 259, 260, 261, 262, 373, 263, 264, 0, 265,
	266, 267, 268, 269, 0, 271, 272, 270, 273, 274,
	275, 276, 0, 277, 0, 278, 279, 374, 280, 0,
	284, 285, 286, 287, 0, 289, 375, 288, 290, 291,
	0, 292, 281, 282, 293, 0, 294, 376, 377, 295,
	0, 302, 296, 297, 283, 298, 301, 378, 299, 300,
	379, 0, 303, 0, 304, 305, 306, 307, 308, 309,
	310, 0, 380, 381, 382, 0, 0, 311, 312, 383,
	384, 0, 313, 314, 315, 316, 0, 0, 317, 318,
	319, 320, 0, 321, 0, 385, 322, 323, 324, 386,
	387, 173, 0, 325, 0, 0, 0, 0, 326, 327,
	328, 329, 330, 0, 0, 0, 0, 176, 177, 797,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 795,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	794, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 791,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 775,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	777, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 753,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	755, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 751,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 503,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 494, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 493, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 505, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 495, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 496, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 500,
	381, 382, 0, 0, 311, 498, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 485,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 486, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 483,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 475,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 0, 430,
	325, 173, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 0, 0, 0, 176, 177, 0,
	178, 0, 0, 0, 0, 331, 0, 0, 0, 0,
	179, 180, 181, 332, 333, 334, 335, 182, 336, 337,
	0, 183, 338, 339, 184, 185, 0, 0, 340, 341,
	342, 0, 186, 343, 0, 0, 0, 187, 188, 189,
	0, 190, 0, 191, 0, 192, 193, 0, 0, 194,
	195, 196, 0, 0, 0, 0, 0, 0, 0, 197,
	198, 395, 199, 344, 200, 345, 346, 0, 201, 0,
	202, 0, 203, 0, 0, 204, 205, 0, 206, 0,
	0, 0, 347, 207, 208, 209, 348, 349, 0, 0,
	0, 0, 0, 0, 0, 210, 211, 350, 351, 352,
	0, 212, 0, 213, 0, 0, 0, 0, 214, 353,
	0, 354, 0, 0, 215, 216, 0, 0, 217, 218,
	355, 356, 0, 0, 357, 222, 0, 219, 0, 0,
	220, 358, 221, 359, 360, 361, 362, 363, 0, 364,
	0, 0, 223, 224, 225, 0, 226, 227, 228, 0,
	230, 229, 0, 365, 0, 231, 0, 0, 232, 0,
	0, 233, 0, 234, 235, 236, 238, 366, 237, 0,
	239, 240, 242, 241, 0, 0, 0, 367, 243, 368,
	244, 245, 0, 246, 0, 0, 247, 0, 0, 248,
	369, 0, 249, 0, 370, 250, 251, 252, 253, 254,
	0, 255, 371, 256, 372, 257, 0, 258, 259, 260,
	261, 262, 373, 263, 264, 0, 265, 266, 267, 268,
	269, 0, 271, 272, 270, 273, 274, 275, 276, 0,
	277, 0, 278, 279, 374, 280, 0, 284, 285, 286,
	287, 0, 289, 375, 288, 290, 291, 0, 292, 281,
	282, 293, 0, 294, 376, 377, 295, 0, 302, 296,
	297, 283, 298, 301, 378, 299, 300, 379, 0, 303,
	0, 304, 305, 306, 307, 308, 309, 310, 0, 380,
	381, 382, 0, 0, 311, 312, 383, 384, 0, 313,
	314, 315, 316, 0, 0, 317, 318, 319, 320, 0,
	321, 0, 385, 322, 323, 324, 386, 387, 173, 0,
	325, 0, 0, 0, 0, 326, 327, 328, 329, 330,
	0, 0, 0, 0, 176, 177, 0, 178, 0, 0,
	0, 0, 331, 0, 0, 0, 0, 179, 180, 181,
	332, 333, 334, 335, 182, 336, 337, 0, 183, 338,
	339, 184, 185, 0, 0, 340, 341, 342, 0, 186,
	343, 0, 0, 0, 187, 188, 189, 0, 190, 0,
	191, 0, 192, 193, 0, 0, 194, 195, 196, 0,
	0, 0, 0, 0, 0, 0, 197, 198, 395, 199,
	344, 200, 345, 346, 0, 201, 0, 202, 0, 203,
	0, 0, 204, 205, 0, 206, 0, 0, 0, 347,
	207, 208, 209, 348, 349, 0, 0, 0, 0, 0,
	0, 0, 210, 211, 350, 351, 352, 0, 212, 0,
	213, 0, 0, 0, 0, 214, 353, 0, 354, 0,
	0, 215, 216, 0, 0, 217, 218, 355, 356, 0,
	0, 357, 222, 0, 219, 0, 0, 220, 358, 221,
	359, 360, 361, 362, 363, 0, 364, 0, 0, 223,
	224, 225, 0, 226, 227, 228, 0, 230, 229, 0,
	365, 0, 231, 0, 0, 232, 0, 0, 233, 0,
	234, 235, 236, 238, 366, 237, 0, 239, 240, 242,
	241, 0, 0, 0, 367, 243, 368, 244, 245, 0,
	246, 0, 0, 247, 0, 0, 248, 369, 0, 249,
	0, 370, 250, 251, 252, 253, 254, 0, 255, 371,
	256, 372, 257, 0, 258, 259, 260, 261, 262, 373,
	263, 264, 0, 265, 266, 267, 268, 269, 0, 271,
	272, 270, 273, 274, 275, 276, 0, 277, 0, 278,
	279, 374, 280, 0, 284, 285, 286, 287, 0, 289,
	375, 288, 290, 291, 0, 292, 281, 282, 293, 0,
	294, 376, 377, 295, 0, 302, 296, 297, 283, 298,
	301, 378, 299, 300, 379, 0, 303, 0, 304, 305,
	306, 307, 308, 309, 310, 0, 380, 381, 382, 0,
	0, 311, 312, 383, 384, 0, 313, 314, 315, 316,
	0, 0, 317, 318, 319, 320, 0, 321, 0, 385,
	322, 323, 324, 386, 387, 173, 0, 325, 0, 0,
	0, 0, 326, 327, 328, 329, 330, 0, 0, 0,
	0, 176, 177, 0, 178, 0, 0, 0, 0, 331,
	0, 0, 0, 0, 179, 180, 181, 332, 333, 334,
	335, 182, 336, 337, 0, 183, 338, 339, 184, 185,
	0, 0, 340, 341, 342, 0, 186, 343, 0, 0,
	0, 187, 188, 189, 0, 190, 0, 191, 0, 192,
	193, 0, 0, 194, 195, 196, 0, 0, 0, 0,
	0, 0, 0, 197, 198, 395, 199, 344, 200, 345,
	346, 0, 201, 0, 202, 0, 203, 0, 0, 204,
	205, 0, 206, 0, 0, 0, 347, 207, 208, 209,
	348, 349, 0, 0, 0, 0, 0, 0, 0, 210,
	211, 350, 351, 352, 0, 212, 0, 213, 0, 0,
	0, 0, 214, 353, 0, 354, 0, 0, 215, 216,
	0, 0, 217, 218, 1902, 356, 0, 0, 357, 222,
	0, 219, 0, 0, 220, 358, 221, 359, 360, 361,
	362, 363, 0, 364, 0, 0, 223, 224, 225, 0,
	226, 227, 228, 0, 230, 229, 0, 365, 0, 231,
	0, 0, 232, 0, 0, 233, 0, 234, 235, 236,
	238, 366, 237, 0, 239, 240, 242, 241, 0, 0,
	0, 367, 243, 368, 244, 245, 0, 246, 0, 0,
	247, 0, 0, 248, 369, 0, 249, 0, 370, 250,
	251, 252, 253, 254, 0, 255, 371, 256, 372, 257,
	0, 258, 259, 260, 261, 262, 373, 263, 264, 0,
	265, 266, 267, 268, 269, 0, 271, 272, 270, 273,
	274, 275, 276, 0, 277, 0, 278, 279, 374, 280,
	0, 284, 285, 286, 287, 0, 289, 375, 288, 290,
	291, 0, 292, 281, 282, 293, 0, 294, 376, 377,
	295, 0, 302, 296, 297, 283, 298, 301, 378, 299,
	300, 379, 0, 303, 0, 304, 305, 306, 307, 308,
	309, 310, 0, 380, 381, 382, 0, 0, 311, 312,
	383, 384, 0, 313, 314, 315, 316, 0, 0, 317,
	318, 319, 320, 0, 321, 0, 385, 322, 323, 324,
	386, 387, 173, 0, 325, 0, 0, 0, 0, 326,
	327, 328, 329, 330, 0, 0, 0, 0, 176, 177,
	0, 178, 0, 0, 0, 0, 331, 0, 0, 0,
	0, 179, 180, 181, 332, 333, 334, 335, 182, 336,
	337, 0, 183, 338, 339, 184, 185, 0, 0, 340,
	341, 342, 0, 186, 343, 0, 0, 0, 187, 188,
	189, 0, 190, 0, 191, 0, 192, 193, 0, 0,
	194, 195, 196, 0, 0, 0, 0, 0, 0, 0,
	197, 198, 395, 199, 344, 200, 345, 346, 0, 201,
	0, 202, 0, 203, 0, 0, 204, 205, 0, 206,
	0, 0, 0, 347, 207, 208, 209, 348, 349, 0,
	0, 0, 0, 0, 0, 0, 210, 211, 350, 351,
	352, 0, 212, 0, 213, 0, 0, 0, 0, 214,
	353, 0, 354, 0, 0, 215, 216, 0, 0, 217,
	218, 1900, 356, 0, 0, 357, 222, 0, 219, 0,
	0, 220, 358, 221, 359, 360, 361, 362, 363, 0,
	364, 0, 0, 223, 224, 225, 0, 226, 227, 228,
	0, 230, 229, 0, 365, 0, 231, 0, 0, 232,
	0, 0, 233, 0, 234, 235, 236, 238, 366, 237,
	0, 239, 240, 242, 241, 0, 0, 0, 367, 243,
	368, 244, 245, 0, 246, 0, 0, 247, 0, 0,
	248, 369, 0, 249, 0, 370, 250, 251, 252, 253,
	254, 0, 255, 371, 256, 372, 257, 0, 258, 259,
	260, 261, 262, 373, 263, 264, 0, 265, 266, 267,
	268, 269, 0, 271, 272, 270, 273, 274, 275, 276,
	0, 277, 0, 278, 279, 374, 280, 0, 284, 285,
	286, 287, 0, 289, 375, 288, 290, 291, 0, 292,
	281, 282, 293, 0, 294, 376, 377, 295, 0, 302,
	296, 297, 283, 298, 301, 378, 299, 300, 379, 0,
	303, 0, 304, 305, 306, 307, 308, 309, 310, 0,
	380, 381, 382, 0, 0, 311, 312, 383, 384, 0,
	313, 314, 315, 316, 0, 0, 317, 318, 319, 320,
	0, 321, 0, 385, 322, 323, 324, 386, 387, 173,
	0, 325, 0, 0, 0, 0, 326, 327, 328, 329,
	330, 0, 0, 0, 0, 176, 177, 0, 178, 0,
	0, 0, 0, 331, 0, 0, 0, 0, 179, 180,
	181, 332, 333, 334, 335, 182, 336, 337, 0, 183,
	338, 339, 184, 185, 0, 0, 340, 341, 342, 0,
	186, 343, 0, 0, 0, 187, 188, 189, 0, 190,
	0, 191, 0, 192, 193, 0, 0, 194, 195, 196,
	0, 0, 0, 0, 0, 0, 0, 197, 198, 395,
	199, 344, 200, 345, 346, 0, 201, 0, 202, 0,
	203, 0, 0, 204, 205, 0, 206, 0, 0, 0,
	347, 207, 208, 209, 348, 349, 0, 0, 0, 0,
	0, 0, 0, 210, 211, 350, 351, 352, 0, 212,
	0, 213, 0, 0, 0, 0, 214, 353, 0, 354,
	0, 0, 215, 216, 0, 0, 217, 218, 1889, 356,
	0, 0, 357, 222, 0, 219, 0, 0, 220, 358,
	221, 359, 360, 361, 362, 363, 0, 364, 0, 0,
	223, 224, 225, 0, 226, 227, 228, 0, 230, 229,
	0, 365, 0, 231, 0, 0, 232, 0, 0, 233,
	0, 234, 235, 236, 238, 366, 237, 0, 239, 240,
	242, 241, 0, 0, 0, 367, 243, 368, 244, 245,
	0, 246, 0, 0, 247, 0, 0, 248, 369, 0,
	249, 0, 370, 250, 251, 252, 253, 254, 0, 255,
	371, 256, 372, 257, 0, 258, 259, 260, 261, 262,
	373, 263, 264, 0, 265, 266, 267, 268, 269, 0,
	271, 272, 270, 273, 274, 275, 276, 0, 277, 0,
	278, 279, 374, 280, 0, 284, 285, 286, 287, 0,
	289, 375, 288, 290, 291, 0, 292, 281, 282, 293,
	0, 294, 376, 377, 295, 0, 302, 296, 297, 283,
	298, 301, 378, 299, 300, 379, 0, 303, 0, 304,
	305, 306, 307, 308, 309, 310, 0, 380, 381, 382,
	0, 0, 311, 312, 383, 384, 0, 313, 314, 315,
	316, 0, 0, 317, 318, 319, 320, 0, 321, 0,
	385, 322, 323, 324, 386, 387, 173, 0, 325, 0,
	0, 0, 0, 326, 327, 328, 329, 330, 0, 0,
	0, 0, 176, 177, 0, 178, 0, 0, 0, 0,
	331, 0, 0, 0, 0, 179, 180, 181, 332, 333,
	334, 335, 182, 336, 337, 0, 183, 338, 339, 184,
	185, 0, 0, 340, 341, 342, 0, 186, 343, 0,
	0, 0, 187, 188, 189, 0, 190, 0, 191, 0,
	192, 193, 0, 0, 194, 195, 196, 0, 0, 0,
	0, 0, 0, 0, 197, 198, 395, 199, 344, 200,
	345, 346, 0, 201, 0, 202, 0, 203, 0, 0,
	204, 205, 0, 206, 0, 0, 0, 347, 207, 208,
	209, 348, 349, 0, 0, 0, 0, 0, 0, 0,
	210, 211, 350, 351, 352, 0, 212, 0, 213, 0,
	0, 0, 0, 214, 353, 0, 354, 0, 0, 215,
	216, 0, 0, 217, 218, 355, 356, 0, 0, 357,
	222, 0, 219, 0, 0, 220, 358, 221, 359, 360,
	361, 362, 363, 0, 364, 0, 0, 223, 224, 225,
	0, 226, 227, 228, 0, 230, 229, 0, 365, 0,
	231, 0, 0, 232, 0, 0, 233, 0, 234, 235,
	236, 238, 366, 237, 0, 239, 240, 242, 241, 0,
	0, 0, 367, 243, 368, 244, 245, 0, 246, 0,
	0, 247, 0, 0, 248, 369, 0, 249, 0, 370,
	250, 251, 252, 253, 254, 0, 255, 371, 256, 372,
	257, 0, 258, 259, 260, 261, 262, 373, 263, 264,
	0, 265, 266, 267, 268, 269, 0, 271, 272, 270,
	273, 274, 275, 276, 0, 277, 0, 278, 279, 374,
	280, 0, 486, 285, 286, 287, 0, 289, 375, 288,
	290, 291, 0, 292, 281, 282, 293, 0, 294, 376,
	377, 295, 0, 302, 296, 297, 283, 298, 301, 378,
	299, 300, 379, 0, 303, 0, 304, 305, 306, 307,
	308, 309, 310, 0, 380, 381, 382, 0, 0, 311,
	312, 383, 384, 0, 313, 314, 315, 316, 0, 0,
	317, 318, 319, 320, 0, 321, 0, 385, 322, 323,
	324, 386, 387, 173, 0, 325, 0, 0, 0, 0,
	326, 327, 328, 329, 330, 0, 0, 0, 0, 176,
	177, 0, 178, 0, 0, 0, 0, 331, 0, 1233,
	0, 0, 179, 180, 181, 332, 333, 334, 335, 182,
	336, 337, 0, 183, 338, 339, 184, 185, 0, 0,
	340, 341, 342, 0, 186, 343, 0, 0, 0, 187,
	188, 189, 0, 190, 0, 191, 0, 192, 193, 0,
	0, 194, 195, 196, 0, 0, 0, 0, 0, 0,
	0, 197, 198, 395, 199, 344, 200, 345, 346, 0,
	201, 0, 202, 0, 203, 0, 0, 204, 205, 0,
	206, 0, 0, 0, 347, 207, 208, 209, 348, 349,
	0, 0, 0, 0, 0, 0, 0, 210, 211, 350,
	351, 352, 0, 212, 0, 213, 0, 0, 0, 0,
	214, 353, 0, 354, 0, 0, 215, 216, 0, 0,
	217, 218, 355, 356, 0, 0, 357, 222, 0, 219,
	0, 0, 220, 358, 221, 359, 360, 361, 362, 363,
	0, 364, 0, 0, 223, 224, 225, 0, 226, 227,
	228, 0, 230, 229, 0, 365, 0, 231, 0, 0,
	232, 0, 0, 233, 0, 234, 235, 236, 238, 366,
	237, 0, 239, 240, 242, 241, 0, 0, 0, 367,
	243, 368, 244, 245, 0, 246, 0, 0, 247, 0,
	0, 248, 369, 0, 249, 0, 370, 250, 251, 252,
	253, 254, 0, 255, 371, 256, 372, 257, 0, 258,
	259, 260, 261, 262, 373, 263, 264, 0, 265, 266,
	267, 268, 269, 0, 271, 272, 270, 273, 274, 275,
	276, 0, 277, 0, 278, 279, 374, 280, 0, 284,
	285, 286, 287, 0, 289, 375, 288, 290, 291, 0,
	0, 281, 282, 293, 0, 294, 376, 377, 295, 0,
	302, 296, 297, 283, 298, 301, 378, 299, 300, 379,
	0, 303, 0, 304, 305, 306, 307, 308, 309, 310,
	0, 380, 381, 382, 0, 0, 311, 312, 383, 384,
	0, 313, 314, 315, 316, 0, 0, 317, 318, 319,
	320, 0, 321, 0, 385, 322, 323, 324, 386, 387,
	173, 0, 325, 0, 0, 0, 0, 326, 327, 328,
	329, 330, 0, 0, 0, 0, 176, 177, 0, 178,
	0, 0, 0, 0, 331, 0, 0, 0, 0, 179,
	180, 181, 332, 333, 334, 335, 182, 336, 337, 0,
	183, 338, 339, 184, 185, 0, 0, 340, 341, 342,
	0, 186, 343, 0, 0, 0, 187, 188, 189, 0,
	190, 0, 191, 0, 192, 193, 0, 0, 194, 195,
	196, 0, 0, 0, 0, 0, 0, 0, 197, 198,
	395, 199, 344, 200, 345, 346, 0, 201, 0, 202,
	0, 203, 0, 0, 204, 205, 0, 206, 0, 0,
	0, 347, 207, 208, 209, 348, 349, 0, 0, 0,
	0, 0, 0, 0, 210, 211, 350, 351, 352, 0,
	212, 0, 213, 0, 0, 0, 0, 214, 353, 0,
	354, 0, 0, 215, 216, 0, 0, 217, 218, 355,
	356, 0, 0, 357, 222, 0, 219, 0, 0, 220,
	358, 221, 359, 360, 361, 362, 363, 0, 364, 0,
	0, 223, 224, 225, 0, 226, 227, 228, 0, 230,
	229, 0, 365, 0, 231, 0, 0, 232, 0, 0,
	233, 0, 234, 235, 236, 238, 366, 237, 0, 239,
	240, 242, 241, 0, 0, 0, 367, 243, 368, 244,
	245, 0, 246, 0, 0, 247, 0, 0, 248, 369,
	0, 249, 0, 370, 250, 251, 252, 253, 254, 0,
	255, 371, 256, 372, 257, 0, 258, 259, 260, 261,
	262, 373, 717, 264, 0, 265, 266, 267, 268, 269,
	0, 271, 272, 270, 273, 274, 275, 276, 0, 277,
	0, 278, 279, 374, 280, 0, 284, 285, 286, 287,
	0, 289, 375, 288, 290, 291, 0, 292, 281, 282,
	293, 0, 294, 376, 377, 295, 0, 302, 296, 297,
	283, 298, 301, 378, 299, 300, 379, 0, 303, 0,
	304, 305, 306, 307, 308, 309, 310, 0, 380, 381,
	382, 0, 0, 311, 312, 383, 384, 0, 313, 314,
	315, 316, 0, 0, 317, 318, 319, 320, 0, 321,
	0, 385, 322, 323, 324, 386, 387, 173, 0, 325,
	0, 0, 0, 0, 326, 327, 328, 329, 330, 0,
	0, 0, 0, 176, 177, 0, 178, 0, 0, 0,
	0, 331, 0, 0, 0, 0, 179, 180, 181, 332,
	333, 334, 335, 182, 336, 337, 0, 183, 338, 339,
	184, 185, 0, 0, 340, 341, 342, 0, 186, 343,
	0, 0, 0, 187, 188, 189, 0, 190, 0, 191,
	0, 192, 193, 0, 0, 194, 195, 196, 0, 0,
	0, 0, 0, 0, 0, 197, 198, 395, 199, 344,
	200, 345, 346, 0, 201, 0, 202, 0, 203, 0,
	0, 204, 205, 0, 206, 0, 0, 0, 347, 207,
	208, 209, 348, 349, 0, 0, 0, 0, 0, 0,
	0, 210, 211, 350, 351, 352, 0, 212, 0, 213,
	0, 0, 0, 0, 214, 353, 0, 354, 0, 0,
	215, 216, 0, 0, 217, 218, 355, 356, 0, 0,
	357, 222, 0, 219, 0, 0, 220, 358, 221, 359,
	360, 361, 362, 363, 0, 364, 0, 0, 223, 224,
	225, 0, 226, 227, 228, 0, 230, 229, 0, 365,
	0, 231, 0, 0, 232, 0, 0, 233, 0, 234,
	235, 236, 238, 366, 237, 0, 239, 240, 242, 241,
	0, 0, 0, 367, 243, 368, 244, 245, 0, 246,
	0, 0, 247, 0, 0, 248, 369, 0, 249, 0,
	370, 250, 251, 0, 253, 254, 0, 255, 371, 256,
	372, 257, 0, 258, 259, 260, 0, 262, 373, 263,
	264, 0, 265, 266, 267, 268, 269, 0, 271, 272,
	270, 273, 274, 275, 276, 0, 277, 0, 278, 279,
	374, 0, 0, 284, 285, 286, 287, 0, 289, 375,
	288, 290, 291, 0, 292, 281, 282, 293, 0, 294,
	376, 377, 295, 0, 302, 296, 297, 283, 298, 301,
	378, 299, 300, 379, 0, 303, 0, 304, 305, 306,
	307, 308, 309, 310, 0, 380, 381, 382, 0, 0,
	311, 312, 383, 384, 0, 313, 314, 315, 316, 0,
	0, 317, 318, 319, 320, 0, 321, 0, 385, 322,
	323, 324, 386, 387, 0, 0, 325, 0, 0, 0,
	0, 326, 327, 328, 329, 330, 946, 947, 0, 976,
	977, 978, 986, 987, 988, 0, 0, 0, 0, 0,
	0, 0, 979, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 947, 0, 976, 977, 978, 986, 987, 988,
	0, 0, 0, 948, 0, 0, 0, 979, 0, 968,
	0, 0, 0, 965, 949, 0, 0, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 972, 973, 974, 0, 0, 0, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 991, 0, 0, 971, 972, 973, 974, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 0, 0,
	989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 983, 991, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 989, 946, 947, 0, 976,
	977, 978, 986, 987, 988, 0, 980, 0, 0, 0,
	981, 0, 979, 0, 0, 0, 969, 0, 0, 949,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 980, 0, 948, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 965, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 984, 0, 0, 0, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 972, 973, 974, 0, 0, 984, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 991, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 960, 961, 967, 966, 962, 963, 964, 985,
	989, 959, 957, 958, 950, 951, 952, 953, 955, 956,
	0, 0, 0, 0, 2384, 981, 0, 0, 0, 0,
	0, 969, 0, 0, 982, 0, 0, 960, 961, 967,
	966, 962, 963, 964, 985, 0, 959, 957, 958, 950,
	951, 952, 953, 955, 956, 0, 980, 0, 0, 2338,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 946, 947, 0, 976, 977,
	978, 986, 987, 988, 0, 0, 0, 0, 0, 0,
	975, 979, 0, 0, 0, 0, 0, 0, 949, 0,
	0, 990, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 946, 947, 0, 976, 977, 978, 986, 987, 988,
	0, 984, 948, 0, 0, 0, 0, 979, 968, 0,
	0, 0, 965, 0, 949, 0, 0, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 948, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	972, 973, 974, 0, 0, 0, 0, 0, 954, 982,
	0, 0, 960, 961, 967, 966, 962, 963, 964, 985,
	0, 959, 957, 958, 950, 951, 952, 953, 955, 956,
	983, 991, 0, 0, 2308, 971, 972, 973, 974, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 0, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 0, 983, 991, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 989, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 980, 0, 0, 0, 0,
	981, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 980, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	946, 947, 0, 976, 977, 978, 986, 987, 988, 0,
	984, 0, 0, 0, 0, 975, 979, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 990, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 948, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 960, 961, 967, 966, 962, 963, 964, 985, 0,
	959, 957, 958, 950, 951, 952, 953, 955, 956, 0,
	0, 0, 0, 2303, 971, 972, 973, 974, 0, 0,
	0, 0, 0, 954, 982, 0, 0, 960, 961, 967,
	966, 962, 963, 964, 985, 0, 959, 957, 958, 950,
	951, 952, 953, 955, 956, 983, 991, 0, 0, 2299,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 989, 946, 947, 0, 976, 977,
	978, 986, 987, 988, 0, 0, 0, 0, 0, 981,
	0, 979, 0, 0, 0, 969, 0, 0, 949, 0,
	0, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 947, 0, 976, 977, 978, 986, 987, 988, 0,
	980, 0, 948, 0, 0, 0, 979, 0, 968, 0,
	0, 0, 965, 949, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 975, 0, 0, 948, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 965, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	972, 973, 974, 0, 0, 984, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	983, 991, 0, 0, 971, 972, 973, 974, 0, 0,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 983, 991, 0, 0, 0,
	969, 0, 0, 982, 0, 0, 960, 961, 967, 966,
	962, 963, 964, 985, 989, 959, 957, 958, 950, 951,
	952, 953, 955, 956, 0, 980, 0, 0, 2241, 981,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 946, 947, 0, 976, 977, 978, 986, 987, 988,
	984, 0, 0, 0, 975, 0, 0, 979, 0, 0,
	0, 0, 0, 0, 949, 0, 0, 990, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 984, 0, 0, 948, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 960, 961, 967, 966, 962, 963, 964, 985, 0,
	959, 957, 958, 950, 951, 952, 953, 955, 956, 0,
	0, 0, 0, 2207, 0, 971, 972, 973, 974, 0,
	0, 0, 0, 982, 954, 0, 960, 961, 967, 966,
	962, 963, 964, 985, 0, 959, 957, 958, 950, 951,
	952, 953, 955, 956, 0, 0, 983, 991, 2206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 989, 946, 947, 0, 976,
	977, 978, 986, 987, 988, 0, 0, 0, 0, 0,
	981, 0, 979, 0, 0, 0, 969, 0, 0, 949,
	0, 0, 990, 0, 0, 0, 0, 0, 0, 0,
	0, 946, 947, 0, 976, 977, 978, 986, 987, 988,
	0, 980, 0, 948, 0, 0, 0, 979, 0, 968,
	0, 0, 0, 965, 949, 0, 0, 990, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 975, 0, 0, 948, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 965, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 972, 973, 974, 0, 0, 984, 0, 0, 954,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 983, 991, 0, 0, 971, 972, 973, 974, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 0, 0,
	989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 983, 991, 0, 0,
	0, 969, 0, 0, 982, 0, 0, 960, 961, 967,
	966, 962, 963, 964, 985, 989, 959, 957, 958, 950,
	951, 952, 953, 955, 956, 0, 980, 0, 0, 2171,
	981, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	975, 980, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 946, 947, 0, 976, 977, 978, 986, 987,
	988, 984, 0, 0, 0, 975, 0, 0, 979, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 990, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 984, 0, 0, 948,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 965,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 960, 961, 967, 966, 962, 963, 964, 985,
	0, 959, 957, 958, 950, 951, 952, 953, 955, 956,
	0, 0, 0, 0, 2025, 0, 971, 972, 973, 974,
	0, 0, 0, 0, 982, 954, 0, 960, 961, 967,
	966, 962, 963, 964, 985, 0, 959, 957, 958, 950,
	951, 952, 953, 955, 956, 0, 0, 983, 991, 2001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 946, 947, 0,
	976, 977, 978, 986, 987, 988, 0, 0, 0, 0,
	0, 981, 0, 979, 0, 0, 0, 969, 0, 0,
	949, 0, 0, 990, 0, 0, 0, 0, 0, 0,
	0, 0, 946, 947, 0, 976, 977, 978, 986, 987,
	988, 0, 980, 0, 948, 0, 0, 0, 979, 0,
	968, 0, 0, 0, 965, 949, 0, 0, 990, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 975, 0, 0, 948,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 965,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 971, 972, 973, 974, 0, 0, 984, 0, 0,
	954, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 991, 0, 0, 971, 972, 973, 974,
	0, 0, 0, 0, 0, 954, 2491, 0, 0, 0,
	0, 989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 983, 991, 0,
	0, 0, 969, 0, 0, 982, 0, 0, 960, 961,
	967, 966, 962, 963, 964, 985, 989, 959, 957, 958,
	950, 951, 952, 953, 955, 956, 0, 980, 0, 0,
	1471, 981, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 975, 980, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 970, 0, 2490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 984, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 0, 946, 947, 0, 976, 977,
	978, 986, 987, 988, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 0, 949, 0,
	982, 990, 0, 960, 961, 967, 966, 962, 963, 964,
	985, 0, 959, 957, 958, 950, 951, 952, 953, 955,
	956, 0, 948, 1759, 0, 0, 0, 0, 968, 0,
	0, 0, 965, 0, 0, 982, 0, 0, 960, 961,
	967, 966, 962, 963, 964, 985, 0, 959, 957, 958,
	950, 951, 952, 953, 955, 956, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 971,
	972, 973, 974, 0, 0, 0, 0, 0, 954, 0,
	1829, 0, 0, 1828, 0, 0, 0, 0, 946, 947,
	0, 976, 977, 978, 986, 987, 988, 0, 0, 0,
	983, 991, 0, 0, 979, 0, 0, 0, 0, 1732,
	0, 949, 0, 0, 990, 0, 0, 0, 0, 989,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 981, 948, 0, 0, 0, 0,
	969, 968, 0, 0, 0, 965, 0, 0, 0, 1568,
	0, 0, 0, 0, 0, 946, 947, 0, 976, 977,
	978, 986, 987, 988, 0, 980, 0, 0, 0, 0,
	0, 979, 1733, 0, 0, 1567, 0, 0, 949, 0,
	0, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 972, 973, 974, 0, 0, 0, 975,
	0, 954, 948, 0, 0, 0, 0, 0, 968, 0,
	0, 0, 965, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 991, 0, 0, 0, 0, 0,
	984, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 0, 971,
	972, 973, 974, 969, 0, 0, 0, 0, 954, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 980, 0,
	983, 991, 0, 0, 0, 0, 0, 0, 982, 0,
	0, 960, 961, 967, 966, 962, 963, 964, 985, 989,
	959, 957, 958, 950, 951, 952, 953, 955, 956, 0,
	0, 0, 975, 0, 981, 0, 0, 0, 0, 0,
	969, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 984, 0, 980, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 975,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 970, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	984, 982, 0, 0, 960, 961, 967, 966, 962, 963,
	964, 985, 0, 959, 957, 958, 950, 951, 952, 953,
	955, 956, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 947, 0, 976, 977, 978, 986,
	987, 988, 0, 0, 0, 0, 0, 0, 0, 979,
	0, 0, 0, 0, 0, 0, 949, 0, 982, 990,
	0, 960, 961, 967, 966, 962, 963, 964, 985, 0,
	959, 957, 958, 950, 951, 952, 953, 955, 956, 0,
	948, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	946, 947, 0, 976, 977, 978, 986, 987, 988, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 0, 949, 0, 0, 990, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 972, 973,
	974, 0, 0, 0, 0, 0, 954, 948, 0, 0,
	0, 0, 0, 968, 0, 0, 0, 965, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 983, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 981, 0, 971, 972, 973, 974, 969, 0,
	0, 0, 0, 954, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 947, 0, 976, 977, 978, 986,
	987, 988, 0, 980, 574, 983, 991, 0, 0, 979,
	0, 0, 0, 0, 0, 0, 949, 0, 0, 990,
	0, 0, 0, 0, 989, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 981,
	948, 0, 0, 0, 0, 969, 968, 0, 0, 0,
	965, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 0,
	980, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 971, 972, 973,
	974, 0, 0, 0, 975, 0, 954, 0, 0, 0,
	0, 1835, 0, 0, 0, 0, 0, 0, 0, 970,
	0, 0, 0, 0, 0, 0, 0, 0, 983, 991,
	0, 0, 0, 0, 0, 984, 982, 0, 0, 960,
	961, 967, 966, 962, 963, 964, 985, 989, 959, 957,
	958, 950, 951, 952, 953, 955, 956, 0, 0, 0,
	0, 2005, 981, 0, 0, 0, 0, 0, 969, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 982, 0, 0, 960, 961, 967, 966,
	962, 963, 964, 985, 0, 959, 957, 958, 950, 951,
	952, 953, 955, 956, 0, 0, 0, 975, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 970, 946, 947, 0, 976, 977, 978, 986,
	987, 988, 0, 0, 0, 0, 0, 0, 984, 979,
	0, 0, 0, 1830, 0, 0, 949, 0, 0, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	948, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	965, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 982, 0, 0, 960,
	961, 967, 966, 962, 963, 964, 985, 0, 959, 957,
	958, 950, 951, 952, 953, 955, 956, 971, 972, 973,
	974, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 983, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 989, 946, 947,
	0, 976, 977, 978, 986, 987, 988, 0, 0, 0,
	0, 0, 981, 0, 979, 0, 0, 0, 969, 0,
	0, 949, 0, 0, 990, 0, 0, 0, 0, 0,
	0, 0, 0, 946, 947, 0, 976, 977, 978, 986,
	987, 988, 0, 980, 0, 948, 0, 0, 0, 979,
	0, 968, 0, 1788, 0, 965, 949, 0, 0, 990,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 975, 0, 0,
	948, 0, 0, 0, 0, 0, 968, 0, 0, 0,
	965, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 972, 973, 974, 0, 0, 984, 0,
	0, 954, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 983, 991, 0, 0, 971, 972, 973,
	974, 0, 0, 0, 0, 0, 954, 0, 0, 0,
	0, 0, 989, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 981, 983, 991,
	0, 0, 0, 969, 0, 0, 982, 0, 0, 960,
	961, 967, 966, 962, 963, 964, 985, 989, 959, 957,
	958, 950, 951, 952, 953, 955, 956, 0, 980, 0,
	0, 0, 981, 0, 0, 0, 0, 0, 969, 0,
	0, 1795, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 975, 980, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 970, 0, 0,
	0, 0, 946, 947, 0, 976, 977, 978, 986, 987,
	988, 0, 0, 984, 0, 0, 0, 975, 979, 0,
	0, 0, 0, 0, 0, 949, 0, 0, 990, 0,
	0, 0, 970, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 984, 948,
	0, 0, 0, 0, 0, 968, 0, 946, 947, 965,
	976, 977, 978, 986, 987, 988, 0, 0, 0, 0,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	949, 982, 0, 990, 960, 961, 967, 966, 962, 963,
	964, 985, 0, 959, 957, 958, 950, 951, 952, 953,
	955, 956, 0, 0, 948, 0, 971, 972, 973, 974,
	968, 0, 0, 0, 965, 954, 982, 0, 0, 960,
	961, 967, 966, 962, 963, 964, 985, 0, 959, 957,
	958, 950, 951, 952, 953, 955, 956, 983, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 989, 0, 0, 0,
	0, 971, 972, 973, 974, 0, 0, 0, 0, 0,
	954, 981, 0, 0, 0, 0, 0, 969, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 980, 0, 0, 0, 0, 0, 0, 0,
	0, 989, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 981, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 975, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 970, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 984, 0, 0,
	0, 0, 0, 0, 0, 0, 946, 947, 0, 976,
	977, 978, 986, 987, 988, 0, 0, 0, 0, 0,
	0, 975, 0, 0, 0, 0, 0, 0, 0, 949,
	0, 0, 990, 0, 0, 0, 970, 0, 0, 0,
	0, 946, 947, 0, 976, 977, 978, 986, 987, 988,
	0, 0, 984, 948, 0, 0, 0, 0, 0, 968,
	0, 0, 0, 965, 949, 982, 0, 990, 960, 961,
	967, 966, 962, 963, 964, 985, 0, 959, 957, 958,
	950, 951, 952, 953, 955, 956, 0, 0, 948, 0,
	0, 0, 0, 0, 968, 0, 0, 0, 965, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	971, 972, 973, 974, 0, 0, 0, 0, 0, 954,
	982, 0, 0, 960, 961, 967, 966, 962, 963, 964,
	985, 0, 959, 957, 958, 950, 951, 952, 953, 955,
	956, 983, 991, 0, 0, 971, 972, 973, 974, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 0, 0,
	989, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 981, 983, 991, 0, 0,
	0, 969, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 38, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 122,
	981, 0, 0, 0, 0, 0, 969, 0, 0, 0,
	0, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 124, 0, 0, 0, 0,
	975, 0, 43, 0, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 47, 0, 0, 0, 49,
	0, 984, 0, 55, 0, 975, 125, 0, 0, 0,
	56, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	970, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 58, 0, 984, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 982,
	0, 0, 960, 961, 967, 966, 962, 963, 964, 985,
	0, 959, 957, 958, 950, 951, 952, 953, 955, 956,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1276, 0, 0, 982, 0, 0, 960, 961, 967,
	966, 962, 963, 964, 985, 0, 959, 957, 958, 950,
	951, 952, 953, 955, 956, 0, 60, 0, 0, 0,
	0, 0, 61, 0, 1284, 1273, 1303, 1264, 1294, 1293,
	0, 0, 1266, 1265, 0, 0, 0, 0, 1305, 1304,
	0, 68, 120, 62, 0, 63, 0, 64, 0, 126,
	0, 0, 0, 0, 65, 0, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 95, 0,
	0, 0, 0, 1299, 0, 1291, 1290, 123, 0, 0,
	0, 0, 0, 0, 0, 1289, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 1288, 1286, 1287,
	0, 0, 0, 0, 0, 121, 0, 0, 0, 0,
	0, 0, 0, 134, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 0, 1272, 0, 0, 0, 128, 0,
	0, 1277, 1275, 1278, 1279, 1280, 1281, 1282, 0, 1302,
	1276, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 119, 0, 0, 4, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1268, 0, 0,
	0, 0, 0, 1284, 1273, 1303, 1264, 1294, 1293, 1292,
	0, 1266, 1265, 1274, 0, 0, 0, 1305, 1304, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 0, 0, 0, 1396, 1394, 1395, 1398,
	1397, 0, 1299, 0, 1291, 1290, 0, 0, 0, 0,
	0, 0, 0, 0, 1289, 0, 0, 0, 0, 0,
	0, 0, 0, 1269, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1283, 1270, 1288, 1286, 1287, 0,
	0, 0, 0, 0, 1307, 0, 0, 0, 0, 524,
	0, 550, 0, 0, 0, 0, 0, 1267, 0, 0,
	1300, 1301, 0, 1272, 0, 0, 0, 0, 0, 529,
	1277, 1275, 1278, 1279, 1280, 1281, 1282, 0, 1302, 0,
	0, 527, 1271, 0, 0, 0, 0, 1306, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 528, 0, 0, 0, 1268, 530, 0, 0,
	0, 0, 536, 537, 0, 0, 0, 546, 1292, 0,
	0, 0, 1274, 0, 0, 0, 0, 0, 0, 0,
	0, 551, 531, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1285, 0, 0, 549, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 532, 0,
	0, 0, 1269, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1283, 1270, 0, 533, 534, 0, 0,
	0, 0, 0, 1307, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 0, 1267, 535, 542, 1300,
	1301, 0, 0, 0, 0, 0, 0, 0, 539, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 552, 0,
	0, 1271, 0, 0, 0, 0, 1306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 526, 543, 553, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 544, 0, 0, 0, 548, 0, 0, 0, 554,
	0, 0, 0, 0, 541, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	547,
}
var sqlPact = [...]int{

	41554, -1000, -24, -1000, -1000, -1000, 162, -1000, -1000, -1000,
	161, 159, 157, -1000, 155, 154, 151, 150, 146, 145,
	144, 134, 133, 130, 129, -1000, 125, -1000, -1000, -1000,
	-1000, 113, 111, 109, 106, 105, 102, 100, 1054, 21672,
	99, 98, 1372, 35184, 87, -1000, 916, 25965, 846, 1149,
	86, 82, 81, 80, 79, 1018, 34857, 3669, 1418, 1089,
	1564, 34527, 21342, 1562, 1228, 34197, -1000, -1000, 33867, 78,
	76, 75, 72, 68, -1000, -1000, 33537, 65, 63, 62,
	61, 60, 50, 46, 45, 44, 41, 39, 35, 34,
	27, -1000, 26, 24, 23, 42037, 18, 16, 15, 1086,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14, 13, 12, 11, 6, 94, -1000, 1091, 406,
	1719, 8393, 1002, 999, 991, 989, 948, 37146, 35184, 5,
	-47, 4, -1000, 1906, 665, 18973, 41554, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 25635, 25305, 33207, 32877, 753, -1000, -30, 22328, 35184,
	-1000, 95, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 14540, 14198, 474, 95, -1000, -1000, -1000, 32547, 23010,
	32217, 1453, 31887, -1000, -1000, 31557, -1000, -1000, 1774, 1590,
	1582, 24975, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 31230, 30900, 30570, 30240, 29910, 462,
	-1000, -1000, -1000, 17268, -1000, -1000, -1000, -1000, 3, -1000,
	2, -1000, 1, 0, -2, -3, -5, -1000, -6, -7,
	-1000, -9, -11, -1000, -14, -17, 867, 29580, 1242, -1000,
	-1000, -26, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35184, -1000, 15222, -1000, 461, -1000, 1604, -1000, 15222, -1000,
	1241, -1000, -1000, -1000, -1000, -1000, 35184, -1000, -1000, -1000,
	-1000, -1000, -1000, 2101, 1150, 450, 29250, -1000, 1477, -1000,
	543, 734, -1000, -1000, -1000, 9416, 170, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1128, 22669, 1238, 1928,
	1734, 2100, 1434, 1718, 1714, 1686, 1677, 1673, 2099, 955,
	2098, 1891, 979, 2092, 1644, 1159, 654, 2091, 1603, 1578,
	-1000, -1000, -1000, -1000, 875, -1000, -1000, -1000, 27273, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1091, -1000, -1000, -1000,
	1348, 1900, 1900, 1900, 1953, 307, 296, -1000, 94, -1000,
	1189, -1000, 1145, -1000, -1000, -1000, -1000, -1000, 41102, -1000,
	-1000, 15222, 15222, 15222, 15222, 15222, 1110, 477, -1000, 449,
	448, 7710, -1000, -1000, 2075, -1000, -1000, -1000, 309, -1000,
	-1000, 15222, 95, -1000, -1000, -1000, -1000, 447, 2084, -1000,
	658, -1000, -1000, -1000, 541, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1615, 446, 445, 443, -1000, 442,
	-1000, -1000, 439, 433, 431, 430, 429, 424, 422, 421,
	419, 418, 416, 415, 414, 413, 412, 1010, -1000, 582,
	-1000, -1000, 582, 582, -1000, 396, 396, 399, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 396, -1000, -1000, -1000,
	537, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 411, 1211, -1000, -1000, 1211, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 752, 36492, -32, 35184, -1000, 408,
	-32, -1000, -1000, 407, -1000, 10439, 10439, -1000, -1000, -1000,
	-1000, -1000, 9757, 1443, -1000, 2794, -183, 312, 530, -1000,
	17950, 20672, -1000, -1000, 1097, 1789, 592, -1000, 981, 1780,
	484, -1000, 969, -1000, 1085, 1764, -157, 23337, 22328, -30,
	-41, -1000, -1000, -1000, 6003, 41102, -1000, 41102, -1000, 842,
	19653, 95, -1000, -1000, -1000, -1000, 405, 1299, 552, 1292,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	314, -1000, 28920, 552, 1289, -1000, -1000, -1000, 27273, -1000,
	35184, -1000, 35184, -1000, 868, -1000, 36819, 112, 1760, -1000,
	-1000, 112, 1759, -1000, 110, 1747, -1000, -1000, 1197, 1746,
	-1000, -41, 1743, -1000, -1000, 15222, -42, -1000, -1000, -1000,
	665, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 28590, 22000, 1427, 573, 41102, 2008,
	41906, 23337, 41102, 22000, -1000, -1000, 35184, -1000, 15222, -1000,
	2006, 1468, -33, -1000, -1000, -1000, -1000, -1000, 1341, 1325,
	678, 1175, 9416, 9416, 1862, -1000, 164, 6344, -1000, -1000,
	-1000, -1000, 28260, -1000, -1000, -1000, 1166, 35184, -1000, -1000,
	1609, -1000, 22000, 35184, -1000, 35184, -1000, 35184, -1000, 35184,
	-1000, 35184, -1000, -1000, -1000, -1000, -1000, 237, -1000, 1593,
	-1000, -1000, 35184, -1000, 1340, -1000, -1000, -1000, 27933, 27603,
	-1000, 938, 743, -1000, -1000, 119, -1000, -1000, 1348, -1000,
	1226, 1410, 13856, 1396, 15222, 94, -1000, -1000, 94, 94,
	9075, -1000, -1000, -1000, 35184, -1000, 41747, 41906, 6344, 781,
	15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222,
	15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222,
	15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222, 15222,
	15222, 15222, 1308, 15222, 746, 15222, 15222, 15222, 15222, 1224,
	1109, 394, 1196, -1000, 2047, 2047, 2047, 41376, 41376, 365,
	477, -1000, 15222, -1000, 73, 15222, 296, 39292, -31, 7369,
	-1000, -1000, -1000, 13515, 563, 41102, 95, 6685, -1000, 2069,
	822, 1626, 1486, 403, 549, 536, 535, 533, 15222, 15222,
	13174, 12832, 12490, 15904, 12148, 15222, 8051, 15222, 15222, 15222,
	15222, 11806, 11464, -1000, 402, -1000, -1000, -1000, -1000, 2068,
	-1000, -1000, 2067, -1000, 773, 772, 2066, -1000, -33, -1000,
	36492, -1000, 35184, -32, 2004, 35184, -1000, 135, -1000, 39945,
	-1000, 135, -48, -1000, 1395, 1392, 19313, 1305, 1127, 1127,
	1127, -1000, 401, 473, 530, 5302, 11122, -1000, 26292, 1120,
	192, 294, 17609, 1443, -1000, 35184, -71, 1013, -1000, 24645,
	1903, 1893, 1894, 27273, 1972, 73, 1573, 738, 27273, 735,
	1967, 73, 1561, 732, 35184, 6344, 527, -1000, 35184, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1546, -50,
	-1000, -1000, 24318, 1997, 1738, -1000, 1083, -1000, 1711, 1994,
	35184, 1231, 1288, -1000, -1000, 788, 1701, 555, 213, 1992,
	213, 19992, -1000, 35184, -1000, 35184, -1000, -1000, 35184, -1000,
	35184, -1000, 35184, 35184, -1000, 35184, 35184, -51, 41102, 3843,
	23991, 729, -1000, 604, 24318, 420, -53, -1000, 576, -1000,
	-1000, -1000, -1000, 356, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 399, 1010,
	396, 396, 396, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	537, -1000, -1000, 582, 582, 582, -1000, -1000, -89, -1000,
	1544, 560, -56, 645, -33, -1000, 1211, -1000, 1118, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2083, -1000, 2052, -1000, -1000, 2065, -37, -1000,
	-37, -1000, 6344, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35184, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 173,
	-1000, -1000, -1000, -1000, -1000, -1000, 35184, 35184, 35184, -1000,
	27273, -1000, -1000, -1000, -1000, 41102, -1000, 348, -1000, -1000,
	41102, 1017, 1415, -1000, 1415, -38, -1000, 39878, 1380, 35184,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 542, 667, 667, 794, 794, 794, 794, 1999, 1143,
	2398, 295, 234, 234, 234, 234, 234, 234, 234, 234,
	254, 616, 616, 254, 254, 254, 254, 254, 234, 234,
	234, 41376, 41157, 275, 15222, 15222, 728, 1096, 394, 275,
	15222, 275, 275, 275, 275, -1000, 1295, -1000, -1000, -1000,
	-1000, 1542, 393, 15904, 15904, -1000, -1000, -1000, 7710, 16245,
	-1000, -1000, -1000, -1000, 387, 15222, -1000, 39447, -219, 293,
	-161, -1000, 15222, 472, -125, -1000, 814, -1000, 15222, -1000,
	-43, 15222, 15222, 15222, 292, -1000, 291, -1000, 718, -1000,
	717, 714, 712, -1000, 386, 1098, 385, 381, 15222, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 40883, 4890, 278,
	-1000, 1530, -161, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	276, -1000, 271, -1000, 40848, -161, 261, 4797, -1000, 15904,
	15904, 15904, 7710, 379, 260, -1000, 39755, -1000, 40693, 10780,
	10780, 10780, 257, 40443, 15222, -161, 4766, 4516, 4359, -59,
	-70, -1000, -73, -1000, 2064, -76, 256, 540, 538, 240,
	-1000, -1000, 378, -78, 555, 10439, 18632, 6344, -1000, 555,
	9757, -1000, 19313, 19313, 1171, 1363, 19313, -1000, -1000, -1000,
	-1000, 26292, 482, 530, 26292, -1000, 2061, 1386, 239, -1000,
	-1000, -1000, 35184, 377, -1000, 530, 238, 961, 35184, 35184,
	35184, -1000, -1000, 1274, 36165, 1271, 41906, 35184, -1000, 373,
	370, 1377, 1367, 35184, 35184, 35838, 35511, 35184, 974, 73,
	-1000, 369, 35184, 963, 35184, 73, -1000, 364, 35184, 949,
	-1000, 1467, 1247, -1000, 837, 1526, 35184, 235, -106, -39,
	41906, -1000, -1000, -1000, -1000, -1000, 35184, 469, 35184, 73,
	35184, 23337, 23337, 73, 35184, 1697, 1794, 508, 35184, 1410,
	15222, 1065, -1000, 18291, 587, 35184, 925, 120, -1000, -1000,
	-1000, 520, 35184, -1000, -1000, 112, 112, -1000, 110, 1197,
	-41, -1000, 15222, -1000, -1000, 35184, 23337, -113, -1000, 608,
	-1000, 41906, -1000, 475, 731, -1000, 2060, 550, 23337, 35184,
	9416, 9416, -1000, 1400, -1000, -1000, 892, -1000, 1069, -1000,
	-1000, -1000, -1000, 9416, -1000, -79, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1017, -1000, 15222, 2059, -1000, -1000, -1000,
	9075, -1000, -1000, -1000, 35184, -165, 15222, 275, 275, 15222,
	15904, 15904, -1000, 275, -1000, -1000, -1000, -1000, -1000, 1506,
	363, 15222, 41906, 4391, 4090, -114, -1000, 15222, -62, -1000,
	15222, -1000, 39071, -1000, -1000, 470, 1680, -1000, 15222, 40320,
	233, 10098, -1000, 40253, -45, -45, -1000, 2080, 1275, 1129,
	1033, 886, 2058, -1000, 20332, 575, 1151, 39036, 41747, 41906,
	-1000, 15222, -1000, -1000, 1504, 15222, -1000, 41747, 41906, 15904,
	15904, 15904, 15904, 15904, 15904, 15904, 15904, 15904, 15904, 15904,
	15904, 15904, 15904, 15904, 15904, 15904, 15904, 15904, 1394, 15904,
	2043, 2043, 2043, -68, 15222, -1000, 1585, 1504, 15222, 15222,
	41906, 232, 230, 220, -1000, 15222, -161, 15222, 15222, 15222,
	-1000, -1000, -1000, 217, -1000, 2056, -1000, -1000, -1000, -1000,
	420, -1000, 1479, -1000, -99, -1000, 1443, -1000, 1479, -1000,
	-1000, 1171, -1000, 359, 15222, 19313, -1000, 471, -1000, -119,
	-1000, 26292, -1000, 468, -216, -1000, 518, -1000, 530, 358,
	35184, 26292, -1000, -1000, -1000, 711, 709, 1674, -1000, 1269,
	-1000, 595, -1000, 940, 15222, 16927, 354, 353, 1044, -1000,
	1668, 1197, 1661, 1197, -1000, -71, 1003, -1000, 15222, -1000,
	687, -1000, -1000, 15222, -1000, 682, 550, 1503, 802, -1000,
	825, -1000, 1455, -1000, 24318, 350, 35184, 347, -1000, 344,
	-1000, 552, -1000, 343, 35184, 1350, 508, 23664, -1000, 552,
	925, -1000, 41102, -1000, 925, 8734, 1899, -130, -1000, -1000,
	-1000, 555, 19992, 19313, 9757, -133, -1000, -1000, -1000, -1000,
	41102, -79, 1872, 1872, -1000, 2055, -1000, 467, 216, -1000,
	26946, -1000, -79, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	35184, 1180, 38881, -1000, 1912, 6344, 2041, 275, 3131, 2871,
	15222, 41906, 41411, -135, 15222, 15222, -1000, 215, 15222, 466,
	41102, -1000, -1000, -1000, 41102, 15222, 2078, 15222, 210, 208,
	207, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 203,
	-1000, -1000, 37473, 15222, 202, -1000, 201, 199, 41102, 1585,
	41102, -1000, -1000, 562, 562, 838, 838, 838, 838, 2043,
	2512, 932, 2372, 463, 463, 463, 610, 901, 901, 463,
	463, 463, 1502, 1355, 342, 4730, 15222, 197, -1000, -1000,
	41102, 41102, 195, -1000, -1000, -1000, -161, 3871, 38660, 38625,
	-1000, 194, 190, 1475, 1951, -1000, 19313, 1475, -1000, 35184,
	41102, -1000, -183, -1000, 2054, -1000, -1000, 1386, -1000, 5657,
	26292, 35184, -136, -1000, 35184, 35184, 35184, 1650, -1000, 1974,
	-1000, 38470, -138, -1000, 297, 1923, 15222, -1000, -1000, 341,
	16927, 35184, -1000, 1391, 1382, 631, 35184, -1000, 35184, -1000,
	35184, 35184, 35184, -141, 35184, -143, 35184, -1000, 23337, 661,
	-1000, -1000, 1461, -1000, 16927, 337, 35184, 24318, 1989, -1000,
	16927, 1225, 1349, 508, 23664, -1000, 788, -1000, -1000, -90,
	-1000, 334, 73, 925, -1000, -95, -1000, 515, 1848, -1000,
	1841, 465, -1000, -1000, -96, 336, -1000, 513, 512, -1000,
	-1000, -1000, -1000, 1912, 15222, 15222, 41411, -144, -1000, 275,
	275, -1000, 38251, -1000, 41102, -1000, 40253, -1000, -1000, -1000,
	-1000, 1092, -1000, 38215, -1000, -1000, -1000, -1000, 15904, 1499,
	335, 41906, 37996, -1000, -1000, 15222, -1000, -1000, -1000, -1000,
	539, 15222, 15222, 1443, 539, -146, 530, -1000, -1000, -1000,
	2036, -1000, -149, -1000, -1000, -1000, -1000, 35184, -1000, 35184,
	-1000, 6344, 35184, 1514, 1259, -1000, -1000, 1358, 331, 15904,
	35184, -1000, 1056, 16927, 1912, 95, 6344, 1912, 37841, 6685,
	-151, -154, 1257, -1000, 1256, 15222, -1000, 41906, 1197, 1197,
	-1000, 656, 653, 652, -1000, 651, -1000, -111, 21012, 1087,
	-159, 16927, -162, 188, 73, -168, 35184, -1000, 508, 23664,
	-1000, 1794, 1814, 35184, 1880, -1000, -1000, 329, 328, 326,
	-1000, 26619, 26619, 23337, 23337, -1000, 275, 275, -1000, -1000,
	187, 1151, 1947, -1000, 922, 15904, 41906, -169, -1000, 37806,
	-1000, 35184, 41102, -161, -1000, -1000, 26292, 464, -1000, -1000,
	959, -1000, -1000, 35184, 1267, -1000, -1000, 15222, 4730, 325,
	1455, 323, -1000, -1000, -1000, -1000, -1000, -1000, 1923, -43,
	-1000, 1016, -1000, -1000, 41102, 1913, -1000, -1000, 35184, 35184,
	322, 321, -1000, 320, 95, 35184, 1056, -171, -1000, 1455,
	-1000, 1056, 319, 23664, -1000, 1350, 740, -179, 35184, -1000,
	-1000, 7026, 23337, 23337, -1000, -180, -1000, -1000, -1000, 1170,
	15222, 922, -181, -1000, -1000, -132, -1000, 1985, -1000, -1000,
	-1000, -1000, 1649, 3092, 1322, 35184, -1000, 35184, 1912, 185,
	35184, 602, 6344, -1000, -1000, 15222, 15222, 15222, 316, 1455,
	1056, -1000, 1455, 16927, -1000, 1349, 858, -1000, 555, -1000,
	-186, -187, -1000, 184, 15563, 15563, -161, -1000, 35184, 315,
	1638, -1000, 1188, 1030, 179, -188, -1000, -1000, 314, -1000,
	15222, -1000, -189, -194, -45, 35184, -1000, 1455, -1000, -195,
	-1000, 19992, -1000, 550, 550, -1000, -1000, -1000, 16586, 1185,
	898, 39482, -1000, -1000, -1000, 35184, -1000, 1222, 1194, 866,
	-1000, -1000, -1000, -1000, -1000, 1322, 41102, -1000, -1000, 177,
	-197, -1000, 1056, -174, -1000, -1000, 2003, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1821, -1000, 612, 1266, 1266, 1188,
	2078, 1187, 1455, -1000, 14881, -1000, 2021, -1000, -1000, 1362,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2508, 2506, 1663, 2025, 2501, 2499, 2497, 2496, 2494,
	2493, 2492, 2490, 2488, 2487, 2485, 2483, 2481, 2479, 2475,
	1976, 2474, 1950, 2473, 2465, 2464, 2463, 2458, 1947, 2456,
	2454, 2453, 2448, 1918, 2440, 1912, 2438, 1903, 2437, 2436,
	2435, 2433, 2430, 1900, 2428, 78, 107, 1883, 2427, 2426,
	1857, 1809, 1780, 2423, 1769, 2420, 2417, 1751, 1742, 2416,
	58, 2415, 2412, 2410, 1738, 1704, 2405, 2404, 2402, 144,
	2400, 1676, 2397, 2390, 2389, 2387, 2385, 2384, 2379, 2378,
	2376, 2375, 2367, 2366, 2363, 2359, 2357, 2355, 2351, 2348,
	153, 2344, 2343, 1660, 1621, 2342, 2341, 30, 27, 17,
	49, 21, 172, 3033, 140, 2338, 2337, 2329, 2328, 2327,
	2323, 19, 95, 90, 2321, 80, 2310, 2301, 45, 25,
	28, 16, 67, 94, 2298, 2296, 1727, 34, 2289, 2287,
	131, 2285, 37, 29, 300, 148, 145, 110, 116, 2279,
	2278, 2276, 42, 115, 1, 2275, 2273, 11, 83, 12,
	2271, 33, 24, 2270, 2269, 126, 2268, 54, 104, 1555,
	97, 120, 103, 91, 2266, 65, 10, 50, 2265, 2262,
	154, 36, 2261, 31, 71, 135, 2259, 47, 155, 125,
	70, 124, 130, 2258, 2255, 2252, 98, 2250, 111, 79,
	2249, 2248, 72, 2246, 89, 134, 2245, 2244, 2243, 88,
	2242, 118, 2239, 2237, 151, 146, 109, 8, 87, 68,
	5, 1545, 1541, 132, 86, 60, 52, 2236, 2591, 1106,
	20, 35, 96, 81, 51, 100, 64, 84, 139, 38,
	2235, 2231, 137, 2227, 2226, 2225, 2222, 2221, 101, 2220,
	2218, 23, 2213, 74, 43, 119, 108, 39, 152, 123,
	106, 147, 99, 2210, 85, 121, 2209, 176, 2208, 2207,
	1383, 117, 2204, 2202, 2200, 871, 747, 582, 55, 2195,
	2191, 407, 280, 2190, 2186, 82, 2183, 113, 105, 93,
	138, 150, 56, 2182, 114, 22, 2179, 112, 18, 0,
	647, 564, 2177, 122, 73, 2175, 2170, 2169, 2165, 26,
	3, 9, 4, 7, 6, 53, 46, 2163, 2159, 127,
	75, 61, 2158, 149, 2151, 2150, 2149, 41, 2141, 13,
	2131, 14, 2124, 2120, 15, 2, 2118, 2115, 142, 2114,
	92, 2110, 1985, 2109, 143, 2108, 2107, 1920, 2105, 32,
	102,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 7,
	7, 8, 8, 6, 6, 6, 6, 6, 9, 9,
	10, 16, 13, 18, 12, 12, 15, 15, 113, 113,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 110, 110, 115, 115, 115,
	117, 117, 114, 114, 109, 109, 20, 20, 58, 58,
	100, 51, 51, 51, 287, 287, 288, 288, 96, 96,
	97, 97, 97, 97, 98, 98, 99, 99, 99, 26,
	26, 26, 22, 22, 22, 22, 22, 23, 23, 24,
	24, 27, 27, 27, 27, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 35, 35, 36, 36,
	36, 36, 36, 36, 37, 37, 37, 37, 37, 37,
	37, 37, 37, 37, 37, 42, 42, 42, 40, 40,
	40, 39, 39, 39, 38, 38, 38, 41, 41, 41,
	161, 161, 160, 160, 164, 164, 43, 43, 43, 43,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 46, 46,
	46, 46, 46, 46, 46, 256, 256, 255, 44, 44,
	230, 230, 47, 47, 187, 187, 48, 48, 48, 48,
	48, 49, 49, 59, 59, 328, 328, 328, 332, 332,
	333, 333, 334, 334, 334, 334, 334, 334, 334, 330,
	330, 54, 54, 54, 54, 55, 55, 55, 56, 56,
	95, 95, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 65, 65, 65, 67, 64, 64, 64, 66, 66,
	66, 66, 68, 68, 69, 69, 69, 69, 69, 70,
	70, 281, 279, 279, 280, 280, 140, 140, 140, 140,
	140, 141, 141, 141, 286, 286, 286, 286, 286, 286,
	285, 285, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 83, 83,
	83, 90, 90, 90, 90, 90, 90, 90, 72, 72,
	77, 77, 77, 77, 77, 73, 73, 78, 78, 79,
	79, 80, 80, 80, 80, 80, 80, 74, 74, 74,
	74, 82, 82, 82, 82, 81, 81, 87, 87, 87,
	87, 87, 87, 84, 84, 84, 84, 85, 85, 85,
	88, 88, 88, 88, 75, 75, 76, 76, 89, 89,
	86, 86, 86, 329, 329, 331, 331, 52, 52, 31,
	31, 32, 32, 142, 142, 143, 143, 209, 209, 209,
	209, 144, 144, 116, 116, 116, 208, 297, 297, 298,
	298, 298, 298, 298, 298, 299, 299, 299, 299, 299,
	299, 299, 295, 295, 296, 293, 293, 294, 294, 294,
	294, 335, 335, 207, 207, 147, 147, 302, 302, 302,
	302, 300, 300, 300, 300, 300, 303, 301, 304, 304,
	304, 304, 304, 242, 242, 242, 92, 92, 33, 33,
	33, 122, 122, 34, 34, 30, 30, 30, 191, 191,
	151, 151, 247, 247, 247, 133, 133, 111, 111, 111,
	14, 11, 11, 11, 11, 11, 11, 19, 19, 17,
	17, 192, 192, 193, 193, 53, 53, 57, 57, 62,
	62, 91, 91, 91, 91, 91, 91, 21, 21, 21,
	21, 25, 25, 25, 25, 61, 61, 337, 337, 129,
	129, 129, 129, 130, 130, 204, 204, 205, 205, 338,
	338, 206, 206, 206, 124, 123, 125, 125, 29, 29,
	29, 118, 118, 119, 119, 120, 120, 121, 121, 339,
	339, 50, 50, 50, 94, 94, 136, 136, 201, 201,
	201, 203, 203, 202, 202, 202, 177, 177, 177, 93,
	93, 156, 156, 166, 166, 167, 167, 253, 168, 168,
	60, 60, 103, 103, 101, 101, 101, 101, 101, 101,
	102, 102, 102, 104, 104, 104, 104, 104, 104, 104,
	107, 107, 107, 108, 108, 108, 106, 106, 310, 310,
	310, 313, 313, 309, 311, 311, 312, 312, 336, 336,
	178, 178, 178, 146, 145, 145, 149, 149, 148, 150,
	150, 246, 246, 246, 175, 175, 175, 175, 196, 196,
	194, 194, 195, 195, 197, 197, 198, 198, 198, 199,
	199, 200, 200, 174, 174, 226, 226, 105, 105, 105,
	155, 155, 155, 157, 157, 216, 216, 216, 217, 217,
	215, 215, 215, 215, 248, 248, 248, 248, 248, 248,
	248, 248, 326, 326, 326, 327, 327, 245, 245, 249,
	249, 249, 249, 249, 249, 243, 243, 243, 243, 244,
	244, 254, 254, 181, 181, 181, 181, 179, 179, 180,
	180, 250, 250, 250, 250, 176, 176, 251, 251, 251,
	210, 210, 257, 257, 257, 275, 275, 154, 154, 154,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 258,
	258, 258, 258, 258, 258, 258, 258, 258, 258, 259,
	259, 259, 259, 261, 261, 261, 260, 260, 260, 260,
	260, 260, 260, 260, 260, 260, 260, 260, 260, 260,
	260, 260, 260, 260, 274, 274, 274, 274, 274, 262,
	262, 269, 269, 270, 270, 271, 272, 263, 263, 264,
	264, 265, 266, 273, 273, 273, 273, 277, 277, 267,
	267, 267, 267, 267, 268, 188, 188, 188, 188, 188,
	188, 188, 188, 188, 188, 188, 188, 188, 188, 189,
	189, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 218, 218, 218, 218, 218, 218,
	218, 218, 218, 218, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 219, 219, 219, 219, 219, 219, 219,
	219, 219, 219, 220, 220, 220, 220, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 305, 305,
	305, 305, 305, 305, 305, 305, 307, 307, 308, 308,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	314, 314, 315, 315, 317, 317, 318, 318, 319, 320,
	320, 320, 321, 322, 322, 316, 316, 323, 323, 323,
	324, 324, 325, 325, 325, 325, 325, 232, 232, 233,
	234, 240, 240, 240, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	131, 131, 131, 131, 131, 163, 163, 162, 162, 229,
	229, 227, 227, 231, 231, 182, 182, 276, 276, 276,
	276, 276, 276, 276, 183, 183, 183, 190, 184, 184,
	185, 185, 185, 185, 185, 223, 224, 186, 186, 186,
	225, 225, 235, 239, 239, 238, 237, 237, 236, 236,
	213, 213, 214, 214, 212, 211, 171, 171, 170, 170,
	169, 169, 340, 340, 241, 241, 172, 172, 173, 165,
	165, 252, 252, 252, 252, 158, 158, 138, 138, 159,
	159, 134, 134, 137, 137, 135, 135, 135, 135, 152,
	152, 153, 153, 132, 132, 221, 221, 221, 221, 221,
	221, 221, 221, 221, 221, 221, 278, 278, 278, 228,
	126, 126, 126, 127, 127, 128, 128, 283, 283, 283,
	284, 284, 284, 284, 282, 282, 282, 282, 282, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 289, 289, 289, 289, 289,
	289, 289, 289, 289, 289, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 291, 291, 291, 291, 291, 291, 291, 291,
	291, 291, 290, 290, 290, 290, 290, 290, 290, 290,
	290, 290, 290, 290, 290, 290, 290, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292, 292, 292,
	292, 292, 292, 292, 292, 292, 292, 292,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 0, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 3, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 4, 12, 4, 12, 1, 3,
	2, 5, 3, 6, 4, 6, 6, 6, 4, 8,
	3, 3, 3, 6, 4, 3, 2, 1, 1, 0,
	2, 0, 2, 0, 2, 0, 7, 2, 6, 2,
	1, 12, 12, 2, 1, 1, 1, 3, 3, 0,
	3, 1, 3, 1, 1, 3, 2, 5, 0, 4,
	6, 7, 1, 2, 1, 2, 2, 3, 3, 3,
	3, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 3, 1, 2, 7, 3, 2, 2,
	2, 2, 2, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 2, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	1, 3, 1, 2, 2, 3, 2, 2, 5, 3,
	1, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 1, 3, 1, 5, 2,
	3, 0, 3, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 2, 6, 2, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 1, 2, 2, 3, 2, 4, 3,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	3, 6, 6, 3, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 3, 1, 3, 3, 1, 1, 2,
	1, 1, 1, 1, 1, 3, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 1, 2, 1, 2, 1, 2, 2, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 3, 3,
	4, 4, 3, 4, 4, 4, 3, 2, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 4,
	3, 2, 3, 3, 3, 2, 3, 4, 3, 5,
	3, 4, 5, 2, 3, 3, 3, 4, 2, 3,
	4, 3, 3, 3, 4, 4, 4, 4, 2, 3,
	5, 5, 5, 2, 0, 2, 0, 3, 2, 7,
	10, 6, 9, 1, 0, 1, 3, 1, 1, 1,
	1, 8, 0, 1, 1, 0, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 7,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 8, 10, 8, 10, 6, 8, 6,
	8, 1, 0, 2, 0, 2, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 2, 2, 2, 2, 1, 0, 1,
	3, 2, 0, 2, 1, 1, 0, 1, 3, 1,
	0, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	3, 2, 0, 1, 3, 1, 1, 3, 5, 5,
	1, 1, 3, 3, 1, 2, 3, 2, 3, 4,
	2, 1, 1, 1, 2, 1, 2, 1, 2, 1,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 4, 5, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 3, 0, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 2, 3,
	3, 2, 0, 1, 3, 3, 5, 1, 1, 3,
	2, 4, 4, 0, 8, 4, 6, 3, 3, 1,
	5, 5, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 5, 2, 4, 1, 1,
	0, 5, 0, 2, 2, 2, 1, 1, 0, 4,
	2, 1, 2, 2, 4, 1, 3, 1, 2, 3,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 2, 4, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	1, 1, 3, 3, 1, 1, 6, 6, 4, 3,
	4, 3, 4, 3, 4, 4, 3, 6, 5, 5,
	5, 4, 8, 6, 6, 4, 4, 3, 4, 3,
	5, 0, 5, 0, 2, 0, 1, 3, 3, 2,
	2, 0, 6, 1, 0, 3, 0, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 5, 4,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 370, -4, -20, -22, -26, -27,
	-48, -35, -36, -37, -47, -43, -49, -50, -51, -52,
	-44, -58, -57, -59, -62, -60, -53, -54, -63, -71,
	-91, -92, -93, -94, -5, -6, -7, -8, 23, 34,
	-23, -24, 47, 68, -33, -28, 70, 91, -312, 95,
	-38, -39, -40, -42, -41, 99, 106, 108, 130, 141,
	222, 228, 249, 251, 253, 260, -101, -103, 247, -55,
	-56, -64, -65, -66, -67, -95, 271, -72, -73, -74,
	-75, -76, -77, -78, -79, -80, -81, -82, -83, -84,
	-85, -86, -87, -88, -89, 274, -21, -25, -61, 312,
	-9, -10, -13, -12, -11, -16, -18, -15, -17, -19,
	-14, -29, -30, -31, -32, -34, -310, -104, -102, 367,
	248, 321, 35, 283, 61, 102, 255, 337, 344, -107,
	-105, -106, -108, 264, 329, 293, 371, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	2, 293, 332, 84, 149, -328, 2, -159, 293, 84,
	-135, -126, 360, 4, -289, -291, 20, 21, 23, 33,
	34, 35, 40, 44, 47, 48, 55, 60, 61, 62,
	64, 66, 68, 69, 72, 73, 74, 82, 83, 85,
	87, 91, 93, 95, 98, 99, 101, 106, 107, 108,
	118, 119, 124, 126, 131, 137, 138, 141, 142, 150,
	153, 155, 148, 165, 166, 167, 169, 170, 171, 174,
	173, 178, 181, 184, 186, 187, 188, 191, 189, 193,
	194, 196, 195, 201, 203, 204, 206, 209, 212, 215,
	218, 219, 220, 221, 222, 224, 226, 228, 230, 231,
	232, 233, 234, 236, 237, 239, 240, 241, 242, 243,
	247, 245, 246, 248, 249, 250, 251, 253, 255, 256,
	258, 272, 273, 284, 260, 261, 262, 263, 267, 265,
	268, 269, 271, 274, 276, 279, 282, 283, 285, 288,
	289, 286, 281, 292, 294, 295, 296, 297, 298, 299,
	300, 307, 308, 312, 313, 314, 315, 318, 319, 320,
	321, 323, 326, 327, 328, 333, 338, 339, 340, 341,
	342, 28, 36, 37, 38, 39, 41, 42, 45, 46,
	51, 52, 53, 56, 86, 88, 89, 105, 109, 110,
	120, 121, 122, 132, 134, 143, 144, 147, 154, 156,
	157, 158, 159, 160, 162, 176, 190, 200, 202, 213,
	217, 225, 227, 235, 257, 266, 277, 278, 287, 290,
	302, 303, 304, 309, 310, 325, 329, 330, 370, 370,
	2, 166, 232, -134, -126, 84, 370, 2, 293, 322,
	332, -191, 84, 317, -126, 228, 22, 2, 93, 153,
	320, 319, 22, 224, 265, 295, 297, 2, 370, 370,
	370, 370, 370, 2, 332, 293, 149, 84, 322, -126,
	2, -46, 2, 367, -45, -4, -28, -37, -47, -43,
	-20, -22, -33, -35, -51, -50, -52, -54, -58, -57,
	-60, -64, -65, -71, -93, -94, 70, 271, -332, 2,
	22, -333, -334, 70, 99, 130, 264, 153, 93, 319,
	293, 2, 166, 2, -126, 2, -328, 2, 166, 2,
	-332, 2, -126, 2, -130, 2, 260, -126, 370, 370,
	370, 370, 370, 181, 55, 257, 268, -69, 308, -68,
	302, -281, -70, 2, -160, 191, -126, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 2, -90, 268, 34, 55, 22,
	60, 85, 131, 149, 150, 170, 65, 66, 231, 181,
	167, 307, 171, 269, 294, 308, 70, 323, 298, 107,
	4, 84, 191, 270, 302, 370, 370, 370, -336, 2,
	293, 370, 370, 370, 370, 370, -102, -104, -103, -148,
	-149, 316, 161, 104, 211, -101, -103, 2, -310, -90,
	268, 2, 55, 22, -279, 2, -241, 207, -218, 90,
	-220, 358, 359, 353, 197, 343, -232, -222, -235, 105,
	257, 367, -134, -221, 373, 9, -307, -103, 29, -233,
	-234, 49, -126, 7, 8, 5, 6, -132, -259, -228,
	-268, 311, 111, 199, -305, -306, 4, -289, -283, -260,
	-270, -264, -267, 162, 58, 76, 77, 80, 78, 81,
	270, 322, 50, 28, 109, 110, 217, 225, 290, 309,
	310, 143, 200, 144, 56, 132, 176, 98, 37, 39,
	41, 42, 51, 52, 86, 88, 89, 120, 121, 122,
	154, 156, 157, 158, 159, 160, 202, 235, 277, 287,
	303, 304, 330, -290, -271, -272, -265, -266, 71, 112,
	129, 152, 145, 164, 168, 177, 179, 192, 214, 216,
	254, 275, -273, -337, 2, 308, 308, 2, -337, 2,
	-337, 2, -129, 2, 308, 305, -313, 236, -309, -126,
	-313, 370, 370, 372, 370, -145, -146, 2, 22, 96,
	-173, 2, 367, -248, 2, 365, -250, -134, -103, -249,
	367, 208, -3, 2, -250, 143, -134, 2, -250, 143,
	-134, 2, -126, 2, -137, 143, -134, 305, 372, -159,
	-152, -126, -212, -211, 369, -218, 2, -218, 2, 128,
	367, -170, -171, -211, -212, 2, -160, 143, -287, 143,
	2, -285, 9, -284, 5, 4, -289, -291, -290, 58,
	-160, 2, 149, -126, 143, 2, -126, 22, 128, 2,
	163, 2, 163, 2, -251, 2, -250, -161, 143, 2,
	-160, -161, 143, 2, -138, 143, 2, -137, -126, 143,
	2, -152, 143, 2, -187, 367, -256, 2, -255, -284,
	329, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 268, 207, 372, -160, -218, -230,
	367, 128, -218, 207, -126, 2, 272, 2, 367, -69,
	53, 308, -205, 2, -206, -123, -124, -125, 165, 230,
	234, 342, 305, 348, 128, -279, -164, 369, -90, 2,
	-287, 2, 272, 2, 231, 269, 55, 128, 2, 2,
	-329, 2, 207, 128, 2, 128, 2, 128, 2, 128,
	2, 128, 2, 2, 231, 269, 2, 125, 2, 307,
	2, 2, 128, 2, 165, 230, 284, 2, 293, 332,
	2, 128, 128, 342, 2, -176, -250, -148, -149, -175,
	-194, -195, 180, 113, 205, -178, 22, 96, -178, -178,
	44, 368, 368, -90, 272, 2, 10, 11, 57, 33,
	358, 359, 360, 361, 123, 362, 363, 356, 357, 355,
	346, 347, 350, 351, 352, 67, 349, 348, 63, 185,
	259, 114, 115, 116, 117, 244, 13, 14, 15, 26,
	210, 179, 343, 145, 275, 353, 16, 17, 18, 164,
	36, 146, -131, -139, -218, -218, -218, -218, -218, 216,
	-169, -213, 365, -103, 367, 367, -103, -218, -162, 367,
	7, -103, -227, 365, -236, -218, -170, 367, 5, 367,
	5, -314, 338, 125, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 367, 367, 367, 367, 367, 367, 367,
	367, 367, 367, 227, -277, 333, -277, -277, -261, 367,
	-261, -262, 367, -261, 339, 344, 367, -204, -205, -204,
	305, -130, 372, -313, -153, 367, -173, -165, -252, -218,
	360, -165, -172, -241, 71, -181, 168, 192, 129, 177,
	254, 152, 7, -46, -215, 373, 367, 360, -245, 344,
	-103, -249, 367, -248, -134, 367, -113, 245, -112, 21,
	23, 99, 327, 105, 281, 299, 261, 245, 105, 245,
	281, 299, 261, 245, 105, 373, -287, -135, 372, -282,
	360, 4, -289, -291, -290, -292, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 65, 70, 75, 76, 78, 77, 79, 80, 81,
	90, 92, 94, 96, 97, 100, 102, 104, 111, 113,
	125, 127, 128, 130, 133, 135, 146, 149, 151, 161,
	163, 172, 175, 180, 182, 183, 197, 198, 199, 205,
	207, 208, 210, 211, 223, 229, 238, 252, 264, 270,
	280, 291, 293, 301, 305, 306, 311, 316, 317, 322,
	324, 331, 332, 334, 335, 336, 337, 285, 368, -158,
	-134, -171, 367, -147, 197, -122, -311, 337, 197, -147,
	367, -127, 143, 2, -126, -311, 197, -251, -136, -134,
	-136, 271, -126, 30, -115, 372, 48, 250, 105, -115,
	105, -115, 372, 105, -115, 105, 105, -162, -218, 368,
	372, -328, -334, 70, 367, 30, -229, -257, -258, -260,
	-269, -263, -267, -268, 40, 46, 45, 300, 190, 266,
	278, 325, 147, 38, 206, 155, 4, 154, 156, 157,
	158, 159, 160, 277, 37, 235, 121, 122, 120, 98,
	89, 88, 202, 42, 41, -271, -272, -265, -266, 86,
	303, 304, 162, 39, 52, 51, 330, 287, -288, -287,
	-328, -281, -162, 30, -205, 2, -338, 372, 178, -141,
	184, 196, 137, 208, 340, -286, 5, 4, -228, -242,
	90, 181, -268, 8, 359, -278, 7, 358, -280, -279,
	-280, 74, 369, -282, -160, 22, 273, 2, -281, -331,
	125, -328, -281, -281, -281, -281, -281, 268, -46, 125,
	-126, 178, -281, 2, -281, 2, 293, 149, 293, -115,
	372, -175, -195, -194, -197, -218, 22, -200, 119, 193,
	-218, -220, -102, -102, -102, -150, -246, -218, 229, 149,
	-281, -275, -257, -274, 240, 241, 239, 243, 242, -257,
	-282, 302, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
	-218, -218, -218, -218, 179, 145, 275, 36, 146, -218,
	305, -218, -218, -218, -218, 189, 197, 199, 311, 111,
	318, 96, 203, -340, 291, 32, -225, -103, 367, -240,
	27, 280, 22, -232, 257, 367, -213, -218, -214, -163,
	-162, 368, 372, -163, -231, -227, -239, -238, 334, 368,
	-162, 331, 22, 96, 360, 2, 7, -188, 341, 188,
	87, 138, 187, -189, 263, -315, 118, 133, 367, 368,
	2, 368, 2, 368, 2, 368, 2, -218, -218, -182,
	2, -276, -162, 4, 341, 188, 87, 138, 187, 263,
	-182, 2, -183, 2, -218, -162, -184, -219, -220, 358,
	359, 353, 367, 257, -185, 2, -218, -163, -218, 43,
	175, 306, -186, -218, 128, -162, -218, -218, -218, -162,
	-162, 2, -162, 2, 367, 7, 7, 302, 302, 7,
	-130, -309, 30, -152, -155, 372, 128, 30, 4, -155,
	372, 368, 168, 168, -248, -181, 168, -179, 214, -179,
	-179, -326, 367, 366, -245, -282, 365, 374, -163, 2,
	-244, -243, 30, -126, 212, 368, -134, 372, 305, -192,
	65, 59, -208, 143, 59, -293, -126, 65, -294, 54,
	317, 229, 127, -192, 65, -192, 65, 65, -250, 33,
	-60, 128, 305, -250, 305, 33, -60, 128, 305, -137,
	-282, -254, 345, -126, 128, 368, 372, -142, -152, -143,
	-126, -209, -208, -295, -296, -293, 149, 317, 112, 30,
	105, 221, 105, 30, 207, 197, -118, 296, 105, -210,
	335, -201, -60, 367, 90, 30, -201, -166, -167, -253,
	-168, -134, 367, -126, -160, -161, -161, -137, -138, -126,
	-152, 368, 372, -46, -255, 305, 324, -143, -45, 70,
	368, 372, -154, 29, 365, -188, 367, -254, 372, 128,
	348, 305, 368, 308, -206, -140, 234, 279, 246, 267,
	8, 7, 7, 372, -282, -330, -126, 268, -46, -134,
	-137, -134, -250, -198, -278, 367, 359, -199, 257, 258,
	372, -111, 31, 94, 169, -134, 342, -218, -218, 305,
	-340, 291, -225, -218, 189, 199, 311, 111, 318, 96,
	203, 128, 367, -219, -219, -162, -222, 367, -162, 366,
	376, 368, -218, 366, 366, 372, -237, -238, 100, -218,
	-149, 372, -148, -218, -162, -162, 368, 368, 305, 305,
	305, 305, 367, -320, 215, 367, 367, -218, 30, 372,
	368, 128, 368, 368, -190, 223, 368, 10, 11, 358,
	359, 360, 361, 123, 362, 363, 356, 357, 355, 346,
	347, 348, 63, 185, 259, 13, 14, 15, 164, 146,
	-219, -219, -219, -162, 367, 368, -223, -224, 128, 125,
	30, -186, -186, -186, 368, 128, -162, 372, 372, 372,
	368, 368, 368, 7, 368, 372, 368, 342, 342, 368,
	367, 368, -210, -252, -157, 2, -248, -282, -210, -241,
	-248, -248, -180, 324, 207, 168, -248, -243, 368, -327,
	7, -245, -244, 7, -217, -216, 126, 195, 368, -126,
	367, -245, 368, -112, -134, -126, -126, 197, -208, 143,
	-117, 197, -257, -126, 367, 367, 169, 169, -126, -126,
	143, -126, 143, -126, -126, -113, 245, -60, 367, -134,
	245, -126, -60, 367, -126, 245, -96, 142, 203, 285,
	128, -134, 368, 368, 372, -127, 149, -127, -60, -160,
	-287, -287, -60, -134, 105, -119, 101, -339, 348, -126,
	-196, -194, -218, -177, -203, 252, 207, -158, 329, -126,
	-177, -156, 372, 128, 348, -158, -115, -115, -115, -115,
	-218, -330, -287, 368, -257, 365, 366, 7, 7, -99,
	337, -287, -330, -279, -279, -123, 315, 62, 234, -279,
	372, -199, -218, -246, -134, 373, -218, -218, -219, -219,
	128, 367, -218, -229, 26, 26, 368, -163, 372, -214,
	-218, 368, -227, 102, -218, 301, 368, 331, -149, -149,
	-149, 5, 188, 138, 187, -189, 187, -189, -189, 7,
	-321, -126, 367, 335, -148, 368, -275, -257, -218, -223,
	-218, -275, -257, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
	-219, -219, 96, 197, 203, -219, 372, -163, -224, -223,
	-218, -218, -257, 368, 368, 368, -162, -218, -218, -218,
	368, 7, -45, -174, 133, -254, 372, -174, -180, 367,
	-218, -248, 366, 368, 372, -244, 366, 372, 375, 348,
	-245, 367, -152, -243, 305, 305, 105, 197, 326, -297,
	-294, -218, -151, -247, -126, -308, 367, -305, -306, -132,
	367, 367, -110, 99, 271, -193, 105, -115, 105, -115,
	305, -192, 65, -162, 305, -162, 305, -99, 128, 292,
	285, -144, 148, -209, 367, -127, 367, 367, -147, -122,
	367, -126, -120, 174, -339, -285, -311, -177, -177, -165,
	198, 64, 368, -210, -167, -157, -241, 368, -100, 72,
	-100, 7, 366, 368, -98, 209, -97, -126, 5, -126,
	208, 368, -111, -282, 26, 26, -218, -229, 368, -218,
	-218, 368, -218, 366, -218, 5, -218, 368, 368, 368,
	368, -322, -126, -218, 368, 368, 368, -224, 128, 96,
	203, 367, -218, 368, 368, 372, 368, 368, 368, 368,
	-226, 135, 44, -248, -226, -152, -215, 7, -216, -282,
	365, -244, -152, 368, -126, -126, -208, 105, -298, 65,
	-299, 57, 112, 70, 197, 199, 317, 229, 54, 90,
	238, 368, 368, 372, -133, -170, 57, -133, -218, 367,
	-151, -152, 197, 90, 197, 90, 83, 313, -126, -126,
	-134, -126, -126, 368, -134, 368, -126, -288, 302, 146,
	-151, 367, -152, -142, 30, -151, 207, -121, 173, -339,
	-285, -118, -202, 367, 207, -60, -177, 348, 83, 83,
	366, 372, 367, 348, 348, -111, -218, -218, 368, 368,
	-149, -316, 220, 368, -219, 128, 367, -229, 368, -218,
	-317, 336, -218, -162, -317, 368, -245, 7, 368, -208,
	-126, -282, -126, 112, 143, 199, 169, 367, -219, -134,
	-207, -335, 69, 289, -247, -111, -282, -111, 368, -162,
	368, 368, 199, 199, -218, -257, -115, -115, 305, 305,
	305, 305, -221, -132, -126, 218, 368, -151, 368, 368,
	-60, 368, -134, -339, -285, -119, 97, -152, 65, -173,
	-103, 367, 367, 367, -97, -98, -287, -287, 368, -149,
	44, -219, -229, 368, 368, -318, -319, -126, -244, 366,
	-299, -127, 197, -218, -128, 367, -144, 367, -133, -149,
	238, -114, 57, -126, -126, 367, 367, 367, -134, -207,
	368, -144, -207, 367, -285, -120, 319, 198, 368, -126,
	-288, -288, 368, -323, 233, 258, -162, 368, 372, 30,
	105, 368, -302, 186, -126, -152, -111, 368, -134, -109,
	324, -282, -162, -162, -162, 367, -144, -207, -144, -151,
	-121, 271, -210, 368, 368, 368, -324, -325, 36, 314,
	74, -218, -324, -319, -321, 112, -300, -303, -301, 207,
	129, 219, 276, 368, 368, -147, -218, 368, 368, -149,
	-152, -144, 368, -166, -99, -99, -325, 226, 124, 257,
	226, 124, -126, -301, 207, -303, 207, 319, 93, -302,
	368, 368, -207, -210, 26, -304, 194, 250, 48, 271,
	-304, -300, -116, 48, 250, -144, -325, 20, 199, 90,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 13, 15, 17, 18, 20, 22, 24, 26, 28,
	30, 32, 34, 36, 38, 40, 41, 43, 44, 45,
	46, 47, 49, 51, 54, 56, 58, 60, 0, 0,
	142, 144, 0, 0, 151, 153, -2, 0, 0, 0,
	174, 176, 178, 180, 182, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 640, -2, 0, 281,
	283, 292, 294, 296, 298, 299, 0, 342, 344, 346,
	348, 350, 352, 354, 356, 358, 360, 362, 364, 366,
	368, 370, 371, 373, 375, 0, 561, 563, 565, -2,
	63, 64, 65, 66, 67, 73, 74, 75, 76, 69,
	71, 155, 157, 159, 161, 164, 676, -2, 687, 0,
	0, 0, -2, 0, -2, -2, -2, 0, 0, 653,
	655, 657, 659, -2, 0, 0, -2, 7, 12, 14,
	16, 19, 21, 23, 25, 27, 29, 31, 33, 35,
	37, 39, 42, 48, 50, 52, 55, 57, 59, 61,
	62, 0, 0, 0, 0, 0, 117, 265, 0, 1252,
	1179, 1185, 1186, 1210, 1211, 1212, 1229, 1230, 1231, 1232,
	1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
	1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273,
	1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283,
	1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293,
	1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303,
	1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313,
	1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323,
	1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333,
	1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353,
	1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363,
	1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373,
	1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
	1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413,
	1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423,
	1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 143, 145,
	146, 0, 0, 0, 1181, 1252, 152, 154, 0, 0,
	0, 0, 0, 528, 256, 1311, 258, 260, 0, 0,
	0, 0, 168, 169, 170, 171, 172, 173, 175, 177,
	179, 181, 183, 184, 0, 0, 0, 0, 0, 255,
	253, 206, 207, 0, 238, 239, 240, 241, 242, 244,
	210, 212, 213, 215, 217, 219, 221, 223, 224, 226,
	228, 229, 231, 233, 234, 236, 529, 0, 0, 262,
	268, 269, 270, 272, 273, 274, 275, 276, 277, 278,
	0, 123, 0, 448, 251, 249, 0, 119, 0, 558,
	0, 264, 559, 560, 555, 556, 1338, 584, 282, 284,
	293, 295, 297, -2, -2, 1428, -2, 306, -2, 314,
	1434, 0, 317, 318, 321, -2, 202, 343, 345, 347,
	349, 351, 353, 355, 357, 359, 361, 363, 365, 367,
	369, 372, 374, 376, 377, 378, 0, 0, 0, 382,
	0, -2, -2, 0, 0, 0, 0, 0, -2, 0,
	-2, 0, 0, -2, -2, 0, 0, -2, 0, 0,
	381, 383, 384, 385, 0, 562, 564, 566, 0, 517,
	678, 156, 158, 160, 162, 165, -2, 651, 652, -2,
	0, 682, 682, 682, 0, 0, 652, 650, 0, 285,
	0, 287, 0, 382, 290, 291, 322, 323, 1164, 1165,
	881, 0, 0, 0, 0, 0, 0, 983, 985, 1401,
	1428, 0, 987, 988, 0, 990, 992, 993, 0, 996,
	997, 1149, 1181, 1195, 1196, 1197, 1198, 0, 0, 1201,
	0, 1203, 1204, 1205, 1051, 1007, -2, -2, 1193, 809,
	810, 811, 812, -2, 1442, 1011, 1014, 1017, 1020, 1021,
	1024, 1025, 0, 1385, 1402, 1403, 1424, 1425, 1433, 1437,
	1438, 1409, 1421, 1410, 1397, 1407, 1419, 1258, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1219, 843, 844, 849, 850, 1443, 1444,
	1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454,
	1455, 1456, 852, 586, 568, 577, 586, 570, 571, 572,
	573, 574, 575, 576, 579, 0, 668, 1317, 671, 1192,
	669, 654, 656, 0, 658, 0, 0, 662, 684, 683,
	717, 718, 0, 666, 667, 677, 733, 771, 748, 739,
	0, 0, 2, 68, 0, 1409, 771, 70, 0, 1409,
	771, 72, 0, 77, 0, 1409, 1184, 0, 0, 266,
	267, 1189, 1187, 1188, 0, 147, 148, 149, 150, 0,
	0, 1182, 1158, 1156, 1157, 163, 496, 1409, -2, 1409,
	520, 124, 125, 340, 341, 1220, 1221, 1222, 1223, 1442,
	496, 524, -2, 675, 1409, 600, 257, 259, 0, 167,
	0, 613, 0, 615, 0, 630, 777, 109, 1409, 187,
	200, 109, 1409, 190, 109, 1409, 193, 1177, 109, 1409,
	196, 197, 1409, 199, 252, 0, 0, -2, 245, 247,
	-2, 243, 211, 214, 216, 218, 220, 222, 225, 227,
	230, 232, 235, 237, -2, 0, 0, 0, 447, 0,
	0, 0, 557, 0, 583, 300, 0, 303, 0, 305,
	1396, -2, -2, 309, 587, 591, 592, 593, 0, 0,
	0, 0, 0, 0, 0, 319, 203, 0, 379, 380,
	388, 389, 0, 392, 413, 425, 0, 0, 396, 398,
	446, 400, 0, 0, 402, 0, 404, 0, 406, 0,
	408, 0, 410, 412, 414, 426, 416, 677, 418, 0,
	420, 424, 0, 429, 0, 431, 432, 433, 0, 0,
	439, 0, 0, 386, 387, 109, 775, -2, 0, 646,
	696, 697, 0, 0, 0, 0, 680, 681, 0, 0,
	0, 642, 643, 286, 0, 289, 0, 0, 0, 0,
	1084, 1085, 1086, 1087, 1088, 1089, 1092, 1093, 1090, 1091,
	1094, 1095, 0, 0, 0, 0, 0, 1096, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 1098, 1099, 0,
	0, 1101, 0, 1103, 0, 0, 0, 0, 0, 0,
	1163, 0, 0, 1100, 886, 887, 888, 920, 921, 0,
	984, 1160, 1153, 986, 0, 1106, -2, 1107, 0, 0,
	989, 994, 995, 1106, 0, 1148, -2, 0, 1200, 0,
	878, 1053, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1129, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 828, 846, 857, 854, 853, 830, 0,
	829, 827, 0, 831, 0, 0, 0, 567, -2, 569,
	0, 581, 0, 670, 0, 0, 719, 722, 1169, 1173,
	1174, 722, 0, 1166, 0, 0, 0, 0, 768, 768,
	768, 766, 742, 0, 748, 0, -2, 772, 760, 0,
	-2, 739, 0, 0, 773, 0, 78, 552, 88, 0,
	552, 552, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 762, 1180, 0, 1154,
	1155, 1224, 1225, 1226, 1227, 1228, 1457, 1458, 1459, 1460,
	1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
	1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
	1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
	1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
	1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
	1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520,
	1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
	1531, 1532, 1533, 1534, 1535, 1536, 1537, 139, 0, 0,
	1175, 1159, 454, 0, 0, 518, 0, 674, 0, 0,
	0, 0, 1409, 527, 1213, 602, 0, 781, 0, 616,
	0, 0, 778, 0, 185, 0, 107, 108, 0, 188,
	0, 191, 0, 0, 194, 0, 0, 0, 1107, 677,
	0, 0, 271, 0, 0, 677, 0, 1109, 789, 790,
	791, 792, 793, 878, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 840, 0,
	815, 815, 815, 832, 833, 841, 842, 847, 848, 859,
	860, 862, 864, 858, 858, 858, 855, 856, 762, 126,
	0, 0, 0, 0, -2, 311, 0, 589, 0, 594,
	331, 332, 333, 596, 597, 315, 334, 335, 336, 337,
	338, 339, 0, 513, 0, 515, 1206, 0, 312, 324,
	313, 316, 0, 204, 390, 391, 393, 394, 395, 399,
	0, 443, 401, 403, 405, 407, 409, 417, 421, 677,
	427, 430, 434, 435, 436, 437, 0, 0, 0, 516,
	0, 649, 694, 695, 700, 704, 705, 708, 711, 712,
	702, 881, 663, 664, 665, 688, 689, 539, 0, 0,
	288, 882, 785, 786, 834, 835, 836, 837, 838, 883,
	884, 0, 889, 890, 891, 892, 893, 894, 895, 896,
	897, 898, -2, -2, -2, -2, -2, -2, -2, -2,
	907, 908, 909, 910, 911, 912, 913, 914, -2, -2,
	-2, 918, 919, -2, 1102, 1104, 0, 1163, 0, -2,
	0, -2, -2, -2, -2, 932, 0, 934, 937, 939,
	941, 0, 0, 0, 0, 1162, 951, 1140, 0, 0,
	1081, 1082, 1083, 936, 0, 0, 1161, 1152, 0, 0,
	1105, 991, 0, 0, 0, 1113, 1147, 1143, 0, 998,
	687, 0, 0, 0, 0, 1005, 0, 1209, 865, 866,
	867, 868, 869, 870, 879, 1061, 0, 0, 0, 1012,
	1013, 1015, 1016, 1018, 1019, 1022, 1023, 0, 0, 0,
	1029, 0, 1116, -2, -2, -2, -2, -2, -2, -2,
	0, 1031, 0, 1033, 1107, 1126, 0, 0, 954, 0,
	0, 0, 0, 1428, 0, 1036, 1107, 1134, 0, 0,
	0, 0, 0, 1107, 0, 1139, 0, 0, 0, 0,
	0, 1047, 0, 1049, 0, 0, 0, 0, 0, 0,
	580, 672, 0, 0, 781, 0, 0, 0, 1172, 781,
	0, 1168, 0, 0, 0, 0, 0, 763, 767, 764,
	765, 0, 0, 748, 760, 730, 0, 0, 0, 737,
	738, 759, 0, 758, 747, -2, 0, 0, 0, 0,
	0, 551, 90, 1409, 0, 111, 0, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 83, 0, 0, 0,
	1183, 129, 0, 1190, 0, 0, 0, 0, 0, 453,
	1189, 455, 457, 458, 459, 460, 1214, 0, 1214, 0,
	0, 0, 0, 0, 0, 0, 604, 610, 0, 699,
	0, 628, 618, 0, 0, 0, 628, 632, 633, 635,
	636, 0, 0, 779, 201, 109, 109, 1178, 109, 109,
	198, 254, 0, 208, 246, 0, 0, 0, 248, 0,
	250, 0, 782, 784, 0, 794, 0, 138, 0, 0,
	0, 0, 304, 0, 588, 595, 0, 328, 0, 330,
	514, 1208, 1207, 0, 205, 445, 279, 419, 422, 440,
	441, 442, 776, 0, 706, 0, 0, 703, 709, 710,
	0, 691, 537, 538, 0, 0, 0, -2, -2, 0,
	0, 0, 952, -2, 933, 935, 938, 940, 942, 0,
	0, 0, 0, 0, 0, 0, 953, 1106, 0, 1150,
	1153, -2, 1108, 1111, 1112, 0, 0, 1144, 0, 0,
	0, 0, 686, 687, 687, 687, 1004, 0, 0, 0,
	0, 0, 0, 1006, 0, 0, 0, 0, 0, 0,
	1028, 0, 1030, 1032, 0, 0, 1034, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	957, 958, 959, 0, 1106, 1035, 1132, 1133, 0, 0,
	0, 0, 0, 0, 1041, 0, 1138, 0, 0, 0,
	1045, 1046, 1048, 0, 813, 0, 839, 861, 863, 851,
	677, 1191, 714, 1170, 762, 721, 723, 1171, 714, 1167,
	750, 0, 752, 0, 0, 0, 754, 0, 743, 0,
	745, 760, 735, 0, 0, 728, 0, 727, 748, 756,
	0, 0, 774, 89, 541, 0, 0, 0, 92, 1409,
	100, 0, 468, 0, 0, 0, 0, 0, 554, 101,
	1409, 109, 1409, 109, 102, 79, 552, 80, 0, 547,
	0, 540, 81, 0, 549, 0, 138, 0, 0, 140,
	0, 1176, 462, 495, 0, 0, 1214, 0, 451, 496,
	521, -2, 523, 0, 0, 606, 610, 0, 609, 675,
	628, 698, 780, 611, 628, 0, 0, 0, 620, 617,
	614, 781, 0, 0, 0, 0, 186, 189, 192, 195,
	1108, 261, 0, 0, 1110, 0, 787, 0, 0, 118,
	0, 127, 263, 301, 302, 307, 326, 327, 329, 325,
	0, 0, 0, 690, 539, 0, 885, -2, 0, 0,
	0, 0, -2, 0, 0, 0, 1141, 0, 0, 0,
	1152, -2, 1114, 1142, 1146, 0, 999, 0, 0, 0,
	0, 1202, 871, 872, 873, 874, 875, 876, 877, 0,
	1059, 1060, 1064, 0, 0, 1010, 0, 0, 1115, 1125,
	1127, 955, 956, 960, 961, 962, 963, 964, 965, 966,
	967, 968, 969, -2, -2, -2, 973, 974, 975, -2,
	-2, -2, 0, 0, 0, 1128, 0, 0, 1130, 1131,
	1135, 1136, 0, 1038, 1039, 1040, 1137, 0, 0, 0,
	845, 0, 0, 716, 0, 720, 0, 716, 751, 0,
	770, 753, 733, 744, 0, 741, 731, 0, 732, 0,
	760, 0, 0, 740, 0, 0, 0, 0, 110, 466,
	485, 0, 0, 530, 536, 536, 0, 1008, 1009, 0,
	0, 0, 94, 0, 0, 0, 0, 98, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	141, 449, 0, 456, 0, 0, 0, 454, 0, 519,
	0, 0, 608, 610, 0, 601, 602, 166, 612, 626,
	627, 625, 0, 628, 634, 631, 637, 0, 0, 120,
	0, 0, 788, 795, 136, 1301, 134, 131, 133, 280,
	701, 707, 692, 539, 0, 0, -2, 0, 945, -2,
	-2, 1077, 1108, 1151, 1145, 1199, 687, 1000, 1002, 1003,
	880, 1066, 1063, 0, 1050, 1026, 1027, 1124, 0, 0,
	0, 0, 1108, 1079, 1037, 0, 1043, 1044, 814, 673,
	1055, 0, 0, 724, 1055, 0, 748, 746, 729, 725,
	0, 736, 0, 757, 543, 545, 91, 0, 467, 0,
	470, 0, 0, 0, 0, 476, 477, 0, 0, 0,
	0, 487, 494, 0, 539, 1194, 0, 539, 0, 0,
	0, 0, 0, 106, 0, 0, 553, 0, 109, 109,
	542, 0, 0, 0, 548, 0, 550, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 610, 0,
	603, 604, 0, 0, 0, 619, 629, 0, 0, 0,
	783, 0, 0, 0, 0, 693, -2, -2, 946, 1078,
	0, 687, 0, 1052, -2, 0, 0, 0, 1080, 0,
	660, 0, 715, 713, 661, 769, 760, 0, 755, 93,
	0, 471, 472, 1214, 0, 475, 478, 0, 480, 1216,
	462, 0, 491, 492, 531, 532, 535, 533, 536, 687,
	489, 0, 95, 96, 105, 113, 97, 103, 0, 0,
	0, 0, 761, 0, 0, 0, 494, 0, 484, 462,
	452, 494, 0, 0, 605, 606, 0, 0, 0, 638,
	639, 0, 0, 0, 135, 0, 130, 132, 1001, 1069,
	0, -2, 0, 981, 1042, 1054, 1056, 0, 734, 726,
	469, 473, 0, 0, 500, 0, 488, 0, 539, 0,
	0, 115, 0, 544, 546, 0, 0, 0, 0, 462,
	494, 450, 462, 0, 607, 608, 0, 622, 781, 624,
	0, 0, 137, 0, 0, 0, 1065, 982, 0, 0,
	0, 479, 505, 0, 0, 0, 534, 999, 496, 99,
	0, 112, 0, 0, 687, 0, 482, 462, 525, 0,
	599, 0, 623, 138, 138, 1062, 1067, 1070, -2, 1369,
	1249, 0, 1068, 1057, 1058, 0, 481, 501, 502, 0,
	497, 498, 499, 1215, 493, 500, 114, 85, 87, 0,
	0, 483, 494, 781, 121, 122, 0, 1072, 1073, 1074,
	1075, 1076, 474, 503, 0, 504, 0, 0, 0, 505,
	0, 465, 462, 621, 0, 506, 0, 509, 510, 0,
	507, 490, 461, 463, 464, 526, 1071, 508, 511, 512,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 356, 3, 362, 357, 3,
	367, 368, 360, 358, 372, 359, 369, 361, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 376, 371,
	346, 348, 347, 350, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 365, 3, 366, 363, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 374, 355, 375, 353,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 349, 57689, 351,
	57690, 352, 57691, 354, 57692, 364, 57693, 370, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:860
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:866
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:872
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:881
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:883
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 12:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:887
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:888
		{
			return helpWith(sqllex, "DELETE")
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:889
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:891
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:893
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:895
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:898
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:900
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:911
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 50:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:913
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 55:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:923
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:927
		{
			return helpWith(sqllex, "ALTER")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:973
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1004
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1008
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1012
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1018
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1030
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1036
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1042
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1046
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1056
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1062
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1066
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 90:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1088
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1093
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 97:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1105
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1115
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1125
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1135
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1154
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = nil
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1174
		{
			sqlVAL.union.val = DropCascade
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = DropRestrict
		}
	case 109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1182
		{
			sqlVAL.union.val = DropDefault
		}
	case 110:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 111:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1198
		{
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1201
		{
			return unimplemented(sqllex, "alter using")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1202
		{
		}
	case 116:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1226
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1229
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1255
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.str = "CSV"
		}
	case 121:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1286
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1311
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1327
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1355
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1359
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 138:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1362
		{
		}
	case 139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1382
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1383
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1384
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1392
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1395
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1403
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1406
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1414
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1416
		{
			return helpWith(sqllex, "CREATE")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1419
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1421
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1422
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1424
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1444
		{
			return helpWith(sqllex, "DELETE")
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1457
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1458
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1464
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1466
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return helpWith(sqllex, "DROP")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1477
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1481
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1499
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1522
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1530
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1538
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1545
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1564
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1584
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1613
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1620
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1623
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1625
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "DELETE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1628
		{
			return helpWith(sqllex, "INSERT")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1629
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1631
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1632
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1637
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1638
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1640
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1641
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1648
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1649
		{ /* SKIP DOC */
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1653
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1681
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1685
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1701
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1729
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1733
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1753
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1756
		{
			return helpWith(sqllex, "GRANT")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1773
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1776
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1784
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1788
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1798
		{
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1802
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1813
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 276:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1837
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1854
		{
			return helpWith(sqllex, "RESET")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1855
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1870
		{
			return helpWith(sqllex, "RESET")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1881
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1886
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1889
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1893
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1895
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{ /* SKIP DOC */
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1897
		{ /* SKIP DOC */
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1898
		{
			return unimplemented(sqllex, "set local")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1907
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 307:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1944
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1986
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			return unimplemented(sqllex, "set from current")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1991
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1997
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2027
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2031
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2039
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2043
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2049
		{
			sqlVAL.union.val = Low
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2053
		{
			sqlVAL.union.val = Normal
		}
	case 333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = High
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2068
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2081
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2100
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2101
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2103
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2104
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2105
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2107
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2112
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2113
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2115
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2117
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2118
		{
			return helpWith(sqllex, "SHOW")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2126
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2127
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2138
		{
			sqlVAL.str = "client_encoding"
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2142
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2150
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2153
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2170
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2172
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2197
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2216
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2219
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2224
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2240
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2242
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2245
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2256
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2258
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2285
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2293
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2299
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2311
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2317
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2327
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2331
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2342
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2346
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2350
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2353
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2375
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2386
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2390
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2394
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2398
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2404
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2409
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2415
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2419
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2432
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2467
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2494
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2498
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 461:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2516
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2524
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2531
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2535
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 465:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2539
		{
			sqlVAL.union.val = DropDefault
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2545
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 468:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2566
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2578
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2582
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2620
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2637
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2646
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2676
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 487:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2708
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2731
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2735
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2741
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2750
		{
			return unimplemented(sqllex, "match full")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2751
		{
			return unimplemented(sqllex, "match partial")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			return unimplemented(sqllex, "match simple")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2753
		{
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2759
		{
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2761
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2763
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2766
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2769
		{
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			return unimplemented(sqllex, "no action")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2775
		{
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2777
		{
			return unimplemented(sqllex, "action set null")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2778
		{
			return unimplemented(sqllex, "action set default")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2790
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2800
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2803
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 518:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2818
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = nil
		}
	case 523:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2843
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2861
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2883
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = true
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = false
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2897
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2913
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2914
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2917
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 536:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2918
		{
		}
	case 537:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2922
		{
			sqlVAL.union.val = Ascending
		}
	case 538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = Descending
		}
	case 539:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2930
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 540:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2936
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2942
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2946
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2958
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2960
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2978
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = true
		}
	case 552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = false
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2993
		{
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2994
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3005
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3013
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3016
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3027
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3031
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3032
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 568:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3053
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3056
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3069
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3071
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3082
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3089
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3092
		{
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3093
		{
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3097
		{
			sqlVAL.str = ""
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3101
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 582:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3109
		{
			sqlVAL.str = ""
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3119
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3139
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3152
		{
		}
	case 590:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3154
		{
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3158
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3162
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3184
		{
			sqlVAL.union.val = ReadOnly
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3188
		{
			sqlVAL.union.val = ReadWrite
		}
	case 598:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 602:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3226
		{
			sqlVAL.str = ""
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.str = ""
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3242
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.str = ""
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.str = ""
		}
	case 609:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3261
		{
		}
	case 610:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3262
		{
		}
	case 611:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3286
		{
			return helpWith(sqllex, "INSERT")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3303
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3307
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3321
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3325
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3329
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3335
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3339
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3345
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3349
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3357
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3366
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 629:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3377
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3384
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 632:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3385
		{
		}
	case 633:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3419
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3491
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3495
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3499
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3503
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3514
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3549
		{
			return helpWith(sqllex, "SELECT")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3550
		{
			return helpWith(sqllex, "VALUES")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3551
		{
			return helpWith(sqllex, "TABLE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3586
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			return helpWith(sqllex, "SELECT")
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3619
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3634
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3641
		{
			return helpWith(sqllex, "TABLE")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3652
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3653
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3654
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3657
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3658
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 673:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3661
		{
			return unimplemented(sqllex, "cte")
		}
	case 674:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3664
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3665
		{
		}
	case 676:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3669
		{
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3672
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3673
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3677
		{
			sqlVAL.union.val = true
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3681
		{
			sqlVAL.union.val = false
		}
	case 682:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3685
		{
			sqlVAL.union.val = false
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = true
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3696
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3697
		{
		}
	case 686:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3717
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3721
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3744
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3753
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3768
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3797
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3806
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3810
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3814
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3820
		{
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3821
		{
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3824
		{
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3825
		{
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3847
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3851
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3857
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3861
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3883
		{
			return helpWith(sqllex, "VALUES")
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3885
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3897
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3900
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &From{}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3922
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3940
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3963
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3967
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3973
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3977
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 734:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4004
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4031
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4064
		{
			sqlVAL.union.val = nil
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4066
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4070
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4076
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4084
		{
			sqlVAL.union.val = true
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4088
		{
			sqlVAL.union.val = false
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4112
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4142
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4153
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.str = astFullJoin
		}
	case 764:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.str = astLeftJoin
		}
	case 765:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4177
		{
			sqlVAL.str = astRightJoin
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.str = astInnerJoin
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4188
		{
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4244
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4252
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4258
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 781:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4262
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4274
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4288
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4296
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4307
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4311
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4323
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 795:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4331
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 798:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 801:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4365
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4369
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4373
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4412
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4421
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4435
		{
			sqlVAL.union.val = nil
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4478
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4482
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4486
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4500
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4518
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4542
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4546
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4550
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4554
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 839:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4560
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4564
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4582
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4598
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 851:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4614
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4636
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4640
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4644
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4654
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 861:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 863:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = year
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = month
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = day
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = hour
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = minute
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4712
		{
			sqlVAL.union.val = month
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4716
		{
			sqlVAL.union.val = hour
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4720
		{
			sqlVAL.union.val = minute
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = minute
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4732
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4736
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4740
		{
			sqlVAL.union.val = nil
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = second
		}
	case 880:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4749
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4773
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4777
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4781
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4784
		{
			return unimplemented(sqllex, "at tz")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4793
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4797
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4805
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4809
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4813
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4825
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4829
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4833
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4837
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4841
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4845
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4849
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4853
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4857
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasSomeKey, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: HasAllKeys, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4865
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4873
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4877
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4917
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4925
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4929
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4933
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4937
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4949
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4953
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4957
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4965
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4981
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4985
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4989
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4992
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5026
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5030
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5034
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5038
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5042
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5046
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5058
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5086
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5090
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5110
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5118
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5138
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5142
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5166
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5178
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5190
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5194
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5207
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5215
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5226
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5231
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 990:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5244
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5248
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5284
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5285
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5287
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5291
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5295
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5298
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5309
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5325
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5326
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5330
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5336
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5339
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5348
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5357
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5358
		{
			return unimplemented(sqllex, "current role")
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5360
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5364
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5367
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5369
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5373
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5377
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5381
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5385
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5388
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5393
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5395
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5404
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5407
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5408
		{
			return unimplemented(sqllex, "treat")
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5445
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5447
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5450
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5454
		{
			return unimplemented(sqllex, "within group")
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5455
		{
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5463
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5480
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5484
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5532
		{
			sqlVAL.str = ""
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5552
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5553
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5554
		{
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5557
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5558
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5564
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5565
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5566
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5567
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5568
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5579
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5583
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5589
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5601
		{
			sqlVAL.union.val = Any
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5605
		{
			sqlVAL.union.val = Some
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5609
		{
			sqlVAL.union.val = All
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5614
		{
			sqlVAL.union.val = Plus
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5615
		{
			sqlVAL.union.val = Minus
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = Mult
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = Div
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5618
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5619
		{
			sqlVAL.union.val = Mod
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5620
		{
			sqlVAL.union.val = Bitand
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = Bitor
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5622
		{
			sqlVAL.union.val = Pow
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5623
		{
			sqlVAL.union.val = Bitxor
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = LT
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = GT
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5626
		{
			sqlVAL.union.val = EQ
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5627
		{
			sqlVAL.union.val = LE
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = GE
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = NE
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = Like
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5634
		{
			sqlVAL.union.val = NotLike
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5635
		{
			sqlVAL.union.val = ILike
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5636
		{
			sqlVAL.union.val = NotILike
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5648
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5654
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5658
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5664
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5668
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5684
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5688
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5698
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5720
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5724
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5728
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5741
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5745
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5762
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5766
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5774
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5778
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5796
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5800
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5804
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5825
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5832
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5836
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5842
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5848
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5852
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5859
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5865
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5894
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5898
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5904
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5908
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5914
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5923
		{
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5924
		{
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5933
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5939
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5952
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5958
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5962
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5968
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5977
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6017
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6032
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6042
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6055
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6059
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6063
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6067
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6073
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6083
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6086
		{
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6096
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6107
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6115
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6119
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6122
		{
			return unimplemented(sqllex, "func const")
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6124
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6131
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6133
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6137
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6141
		{
			sqlVAL.union.val = DNull
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6148
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6152
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6158
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6193
		{
			sqlVAL.str = ""
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6199
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6203
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
