// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

//line sql.y:482
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PLACING = 57573
const PLANS = 57574
const POSITION = 57575
const PRECEDING = 57576
const PRECISION = 57577
const PREPARE = 57578
const PRIMARY = 57579
const PRIORITY = 57580
const QUERIES = 57581
const QUERY = 57582
const RANGE = 57583
const READ = 57584
const REAL = 57585
const RECURSIVE = 57586
const REF = 57587
const REFERENCES = 57588
const REGCLASS = 57589
const REGPROC = 57590
const REGPROCEDURE = 57591
const REGNAMESPACE = 57592
const REGTYPE = 57593
const REMOVE_PATH = 57594
const RENAME = 57595
const REPEATABLE = 57596
const RELEASE = 57597
const RESET = 57598
const RESTORE = 57599
const RESTRICT = 57600
const RESUME = 57601
const RETURNING = 57602
const REVOKE = 57603
const RIGHT = 57604
const ROLLBACK = 57605
const ROLLUP = 57606
const ROW = 57607
const ROWS = 57608
const RSHIFT = 57609
const SAVEPOINT = 57610
const SCATTER = 57611
const SCRUB = 57612
const SEARCH = 57613
const SECOND = 57614
const SELECT = 57615
const SEQUENCES = 57616
const SERIAL = 57617
const SERIALIZABLE = 57618
const SESSION = 57619
const SESSIONS = 57620
const SESSION_USER = 57621
const SET = 57622
const SETTING = 57623
const SETTINGS = 57624
const SHOW = 57625
const SIMILAR = 57626
const SIMPLE = 57627
const SMALLINT = 57628
const SMALLSERIAL = 57629
const SNAPSHOT = 57630
const SOME = 57631
const SOME_EXISTENCE = 57632
const SPLIT = 57633
const SQL = 57634
const START = 57635
const STATUS = 57636
const STDIN = 57637
const STRICT = 57638
const STRING = 57639
const STORE = 57640
const STORING = 57641
const SUBSTRING = 57642
const SYMMETRIC = 57643
const SYSTEM = 57644
const TABLE = 57645
const TABLES = 57646
const TEMP = 57647
const TEMPLATE = 57648
const TEMPORARY = 57649
const TESTING_RANGES = 57650
const TESTING_RELOCATE = 57651
const TEXT = 57652
const THAN = 57653
const THEN = 57654
const TIME = 57655
const TIMESTAMP = 57656
const TIMESTAMPTZ = 57657
const TO = 57658
const TRAILING = 57659
const TRACE = 57660
const TRANSACTION = 57661
const TREAT = 57662
const TRIM = 57663
const TRUE = 57664
const TRUNCATE = 57665
const TYPE = 57666
const UNBOUNDED = 57667
const UNCOMMITTED = 57668
const UNION = 57669
const UNIQUE = 57670
const UNKNOWN = 57671
const UPDATE = 57672
const UPSERT = 57673
const USE = 57674
const USER = 57675
const USERS = 57676
const USING = 57677
const UUID = 57678
const VALID = 57679
const VALIDATE = 57680
const VALUE = 57681
const VALUES = 57682
const VARCHAR = 57683
const VARIADIC = 57684
const VIEW = 57685
const VARYING = 57686
const WHEN = 57687
const WHERE = 57688
const WINDOW = 57689
const WITH = 57690
const WITHIN = 57691
const WITHOUT = 57692
const WRITE = 57693
const YEAR = 57694
const ZONE = 57695
const NOT_LA = 57696
const WITH_LA = 57697
const AS_LA = 57698
const CONTAINED_BY = 57699
const POSTFIXOP = 57700
const UMINUS = 57701
const HELPTOKEN = 57702

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6841

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	380, 54,
	-2, 706,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 51,
	152, 558,
	-2, 0,
	-1, 64,
	97, 706,
	156, 706,
	330, 706,
	331, 706,
	-2, 0,
	-1, 74,
	108, 681,
	118, 681,
	164, 681,
	186, 681,
	213, 681,
	219, 681,
	327, 681,
	-2, 670,
	-1, 107,
	4, 708,
	20, 708,
	21, 708,
	24, 708,
	29, 708,
	34, 708,
	35, 708,
	36, 708,
	37, 708,
	38, 708,
	39, 708,
	40, 708,
	41, 708,
	42, 708,
	43, 708,
	45, 708,
	46, 708,
	47, 708,
	48, 708,
	49, 708,
	52, 708,
	53, 708,
	54, 708,
	56, 708,
	57, 708,
	61, 708,
	62, 708,
	63, 708,
	65, 708,
	66, 708,
	67, 708,
	68, 708,
	70, 708,
	72, 708,
	73, 708,
	76, 708,
	77, 708,
	78, 708,
	86, 708,
	87, 708,
	88, 708,
	89, 708,
	90, 708,
	91, 708,
	92, 708,
	93, 708,
	95, 708,
	97, 708,
	99, 708,
	102, 708,
	103, 708,
	105, 708,
	109, 708,
	110, 708,
	111, 708,
	112, 708,
	113, 708,
	114, 708,
	115, 708,
	123, 708,
	124, 708,
	125, 708,
	126, 708,
	127, 708,
	129, 708,
	131, 708,
	136, 708,
	137, 708,
	139, 708,
	142, 708,
	143, 708,
	144, 708,
	145, 708,
	146, 708,
	147, 708,
	150, 708,
	151, 708,
	153, 708,
	156, 708,
	157, 708,
	158, 708,
	159, 708,
	160, 708,
	161, 708,
	162, 708,
	163, 708,
	165, 708,
	168, 708,
	169, 708,
	170, 708,
	172, 708,
	173, 708,
	174, 708,
	175, 708,
	176, 708,
	178, 708,
	179, 708,
	181, 708,
	183, 708,
	184, 708,
	187, 708,
	188, 708,
	191, 708,
	193, 708,
	195, 708,
	196, 708,
	197, 708,
	198, 708,
	199, 708,
	201, 708,
	202, 708,
	203, 708,
	204, 708,
	208, 708,
	209, 708,
	210, 708,
	211, 708,
	212, 708,
	214, 708,
	216, 708,
	217, 708,
	220, 708,
	221, 708,
	223, 708,
	225, 708,
	226, 708,
	227, 708,
	228, 708,
	229, 708,
	230, 708,
	232, 708,
	233, 708,
	234, 708,
	235, 708,
	236, 708,
	238, 708,
	239, 708,
	240, 708,
	241, 708,
	242, 708,
	243, 708,
	244, 708,
	245, 708,
	247, 708,
	248, 708,
	249, 708,
	250, 708,
	251, 708,
	253, 708,
	254, 708,
	255, 708,
	256, 708,
	257, 708,
	258, 708,
	259, 708,
	261, 708,
	263, 708,
	264, 708,
	265, 708,
	266, 708,
	268, 708,
	269, 708,
	270, 708,
	271, 708,
	272, 708,
	274, 708,
	275, 708,
	276, 708,
	277, 708,
	278, 708,
	280, 708,
	281, 708,
	282, 708,
	283, 708,
	285, 708,
	286, 708,
	287, 708,
	288, 708,
	291, 708,
	292, 708,
	293, 708,
	294, 708,
	295, 708,
	296, 708,
	297, 708,
	298, 708,
	299, 708,
	300, 708,
	302, 708,
	304, 708,
	305, 708,
	306, 708,
	307, 708,
	308, 708,
	309, 708,
	310, 708,
	311, 708,
	313, 708,
	314, 708,
	315, 708,
	318, 708,
	319, 708,
	320, 708,
	321, 708,
	323, 708,
	324, 708,
	325, 708,
	326, 708,
	329, 708,
	330, 708,
	331, 708,
	332, 708,
	334, 708,
	336, 708,
	337, 708,
	338, 708,
	339, 708,
	340, 708,
	341, 708,
	344, 708,
	349, 708,
	350, 708,
	351, 708,
	352, 708,
	353, 708,
	-2, 0,
	-1, 124,
	108, 680,
	118, 680,
	164, 680,
	186, 680,
	213, 680,
	219, 680,
	327, 680,
	-2, 673,
	-1, 129,
	1, 607,
	168, 607,
	238, 607,
	242, 607,
	379, 607,
	380, 607,
	-2, 0,
	-1, 131,
	1, 607,
	379, 607,
	380, 607,
	-2, 0,
	-1, 132,
	1, 607,
	379, 607,
	380, 607,
	-2, 0,
	-1, 133,
	1, 611,
	379, 611,
	380, 611,
	-2, 0,
	-1, 140,
	4, 714,
	5, 714,
	6, 714,
	7, 714,
	8, 714,
	9, 714,
	20, 714,
	21, 714,
	24, 714,
	29, 714,
	30, 714,
	34, 714,
	35, 714,
	36, 714,
	37, 714,
	38, 714,
	39, 714,
	40, 714,
	41, 714,
	42, 714,
	43, 714,
	45, 714,
	46, 714,
	47, 714,
	48, 714,
	49, 714,
	50, 714,
	51, 714,
	52, 714,
	53, 714,
	54, 714,
	56, 714,
	57, 714,
	59, 714,
	61, 714,
	62, 714,
	63, 714,
	65, 714,
	66, 714,
	67, 714,
	68, 714,
	70, 714,
	72, 714,
	73, 714,
	75, 714,
	76, 714,
	77, 714,
	78, 714,
	80, 714,
	81, 714,
	82, 714,
	84, 714,
	85, 714,
	86, 714,
	87, 714,
	88, 714,
	89, 714,
	90, 714,
	91, 714,
	92, 714,
	93, 714,
	95, 714,
	97, 714,
	99, 714,
	102, 714,
	103, 714,
	105, 714,
	109, 714,
	110, 714,
	111, 714,
	112, 714,
	113, 714,
	114, 714,
	115, 714,
	116, 714,
	117, 714,
	123, 714,
	124, 714,
	125, 714,
	126, 714,
	127, 714,
	129, 714,
	131, 714,
	134, 714,
	136, 714,
	137, 714,
	139, 714,
	142, 714,
	143, 714,
	144, 714,
	145, 714,
	146, 714,
	147, 714,
	148, 714,
	150, 714,
	151, 714,
	153, 714,
	155, 714,
	156, 714,
	157, 714,
	158, 714,
	159, 714,
	160, 714,
	161, 714,
	162, 714,
	163, 714,
	165, 714,
	167, 714,
	168, 714,
	169, 714,
	170, 714,
	171, 714,
	172, 714,
	173, 714,
	174, 714,
	175, 714,
	176, 714,
	178, 714,
	179, 714,
	181, 714,
	182, 714,
	183, 714,
	184, 714,
	185, 714,
	187, 714,
	188, 714,
	191, 714,
	193, 714,
	194, 714,
	195, 714,
	196, 714,
	197, 714,
	198, 714,
	199, 714,
	200, 714,
	201, 714,
	202, 714,
	203, 714,
	204, 714,
	205, 714,
	207, 714,
	208, 714,
	209, 714,
	210, 714,
	211, 714,
	212, 714,
	214, 714,
	217, 714,
	220, 714,
	221, 714,
	222, 714,
	223, 714,
	224, 714,
	225, 714,
	226, 714,
	227, 714,
	228, 714,
	229, 714,
	230, 714,
	232, 714,
	233, 714,
	234, 714,
	235, 714,
	236, 714,
	238, 714,
	239, 714,
	240, 714,
	241, 714,
	242, 714,
	243, 714,
	244, 714,
	245, 714,
	247, 714,
	248, 714,
	249, 714,
	250, 714,
	251, 714,
	253, 714,
	254, 714,
	255, 714,
	256, 714,
	257, 714,
	258, 714,
	259, 714,
	261, 714,
	262, 714,
	263, 714,
	264, 714,
	265, 714,
	266, 714,
	268, 714,
	269, 714,
	270, 714,
	271, 714,
	272, 714,
	274, 714,
	275, 714,
	276, 714,
	277, 714,
	278, 714,
	279, 714,
	280, 714,
	281, 714,
	282, 714,
	283, 714,
	284, 714,
	285, 714,
	286, 714,
	287, 714,
	288, 714,
	291, 714,
	292, 714,
	293, 714,
	294, 714,
	295, 714,
	296, 714,
	297, 714,
	298, 714,
	299, 714,
	300, 714,
	302, 714,
	304, 714,
	305, 714,
	306, 714,
	307, 714,
	308, 714,
	309, 714,
	310, 714,
	311, 714,
	313, 714,
	314, 714,
	315, 714,
	318, 714,
	319, 714,
	320, 714,
	321, 714,
	322, 714,
	323, 714,
	324, 714,
	325, 714,
	326, 714,
	329, 714,
	330, 714,
	331, 714,
	332, 714,
	333, 714,
	334, 714,
	336, 714,
	337, 714,
	338, 714,
	339, 714,
	340, 714,
	341, 714,
	344, 714,
	349, 714,
	350, 714,
	351, 714,
	352, 714,
	353, 714,
	354, 714,
	362, 714,
	367, 714,
	368, 714,
	369, 714,
	376, 714,
	382, 714,
	-2, 0,
	-1, 143,
	1, 54,
	380, 54,
	-2, 706,
	-1, 515,
	133, 1323,
	316, 1323,
	359, 1323,
	378, 1323,
	-2, 0,
	-1, 516,
	133, 1270,
	316, 1270,
	359, 1270,
	378, 1270,
	-2, 0,
	-1, 518,
	133, 1382,
	316, 1382,
	359, 1382,
	378, 1382,
	-2, 0,
	-1, 520,
	133, 1405,
	316, 1405,
	359, 1405,
	378, 1405,
	-2, 0,
	-1, 527,
	133, 1328,
	316, 1328,
	359, 1328,
	378, 1328,
	-2, 327,
	-1, 553,
	1, 405,
	375, 405,
	377, 405,
	379, 405,
	380, 405,
	-2, 0,
	-1, 554,
	1, 457,
	130, 457,
	375, 457,
	377, 457,
	379, 457,
	380, 457,
	-2, 0,
	-1, 560,
	1, 419,
	375, 419,
	377, 419,
	379, 419,
	380, 419,
	-2, 0,
	-1, 562,
	1, 423,
	375, 423,
	377, 423,
	379, 423,
	380, 423,
	-2, 0,
	-1, 565,
	1, 431,
	375, 431,
	377, 431,
	379, 431,
	380, 431,
	-2, 0,
	-1, 566,
	1, 436,
	375, 436,
	377, 436,
	379, 436,
	380, 436,
	-2, 0,
	-1, 569,
	1, 446,
	375, 446,
	377, 446,
	379, 446,
	380, 446,
	-2, 0,
	-1, 585,
	118, 716,
	186, 716,
	213, 716,
	-2, 676,
	-1, 588,
	118, 715,
	186, 715,
	213, 715,
	-2, 674,
	-1, 645,
	376, 1248,
	-2, 1241,
	-1, 646,
	376, 1249,
	-2, 1242,
	-1, 652,
	5, 895,
	376, 895,
	-2, 1457,
	-1, 677,
	5, 854,
	-2, 1426,
	-1, 678,
	5, 889,
	376, 889,
	-2, 1428,
	-1, 679,
	5, 864,
	-2, 1429,
	-1, 680,
	5, 863,
	-2, 1430,
	-1, 681,
	5, 889,
	376, 889,
	-2, 1433,
	-1, 682,
	5, 889,
	376, 889,
	-2, 1434,
	-1, 683,
	5, 890,
	-2, 1437,
	-1, 684,
	5, 846,
	-2, 1438,
	-1, 685,
	5, 846,
	-2, 1439,
	-1, 686,
	5, 871,
	-2, 1443,
	-1, 687,
	5, 856,
	-2, 1444,
	-1, 688,
	5, 857,
	-2, 1445,
	-1, 689,
	5, 847,
	-2, 1451,
	-1, 690,
	5, 848,
	-2, 1452,
	-1, 691,
	5, 849,
	-2, 1453,
	-1, 692,
	5, 850,
	-2, 1454,
	-1, 693,
	5, 851,
	-2, 1455,
	-1, 694,
	5, 852,
	-2, 1456,
	-1, 695,
	5, 846,
	-2, 1463,
	-1, 696,
	5, 855,
	-2, 1468,
	-1, 697,
	5, 853,
	-2, 1471,
	-1, 698,
	5, 887,
	376, 887,
	-2, 1473,
	-1, 699,
	5, 891,
	-2, 1476,
	-1, 700,
	5, 893,
	-2, 1477,
	-1, 701,
	5, 886,
	376, 886,
	-2, 1482,
	-1, 886,
	229, 704,
	-2, 551,
	-1, 890,
	215, 1245,
	-2, 0,
	-1, 925,
	1, 216,
	375, 216,
	377, 216,
	379, 216,
	380, 216,
	-2, 679,
	-1, 932,
	4, 1481,
	10, 1481,
	11, 1481,
	13, 1481,
	14, 1481,
	15, 1481,
	16, 1481,
	17, 1481,
	18, 1481,
	20, 1481,
	21, 1481,
	23, 1481,
	24, 1481,
	27, 1481,
	29, 1481,
	31, 1481,
	34, 1481,
	35, 1481,
	36, 1481,
	37, 1481,
	38, 1481,
	39, 1481,
	40, 1481,
	41, 1481,
	42, 1481,
	43, 1481,
	45, 1481,
	46, 1481,
	47, 1481,
	48, 1481,
	49, 1481,
	52, 1481,
	53, 1481,
	54, 1481,
	56, 1481,
	57, 1481,
	58, 1481,
	61, 1481,
	62, 1481,
	63, 1481,
	64, 1481,
	65, 1481,
	66, 1481,
	67, 1481,
	68, 1481,
	70, 1481,
	71, 1481,
	72, 1481,
	73, 1481,
	75, 1481,
	76, 1481,
	77, 1481,
	78, 1481,
	86, 1481,
	87, 1481,
	88, 1481,
	89, 1481,
	90, 1481,
	91, 1481,
	92, 1481,
	93, 1481,
	95, 1481,
	97, 1481,
	99, 1481,
	102, 1481,
	103, 1481,
	105, 1481,
	109, 1481,
	110, 1481,
	111, 1481,
	112, 1481,
	113, 1481,
	114, 1481,
	115, 1481,
	119, 1481,
	120, 1481,
	121, 1481,
	122, 1481,
	123, 1481,
	124, 1481,
	125, 1481,
	126, 1481,
	127, 1481,
	128, 1481,
	129, 1481,
	131, 1481,
	134, 1481,
	136, 1481,
	137, 1481,
	139, 1481,
	142, 1481,
	143, 1481,
	144, 1481,
	145, 1481,
	146, 1481,
	147, 1481,
	148, 1481,
	149, 1481,
	150, 1481,
	151, 1481,
	153, 1481,
	155, 1481,
	156, 1481,
	157, 1481,
	158, 1481,
	159, 1481,
	160, 1481,
	161, 1481,
	162, 1481,
	163, 1481,
	165, 1481,
	167, 1481,
	168, 1481,
	169, 1481,
	170, 1481,
	171, 1481,
	172, 1481,
	173, 1481,
	174, 1481,
	175, 1481,
	176, 1481,
	178, 1481,
	179, 1481,
	181, 1481,
	182, 1481,
	183, 1481,
	184, 1481,
	185, 1481,
	187, 1481,
	188, 1481,
	191, 1481,
	192, 1481,
	193, 1481,
	195, 1481,
	196, 1481,
	197, 1481,
	198, 1481,
	199, 1481,
	200, 1481,
	201, 1481,
	202, 1481,
	203, 1481,
	204, 1481,
	208, 1481,
	209, 1481,
	210, 1481,
	211, 1481,
	212, 1481,
	214, 1481,
	217, 1481,
	218, 1481,
	220, 1481,
	221, 1481,
	223, 1481,
	225, 1481,
	226, 1481,
	227, 1481,
	228, 1481,
	229, 1481,
	230, 1481,
	232, 1481,
	233, 1481,
	234, 1481,
	235, 1481,
	236, 1481,
	238, 1481,
	239, 1481,
	240, 1481,
	241, 1481,
	242, 1481,
	243, 1481,
	244, 1481,
	245, 1481,
	247, 1481,
	248, 1481,
	249, 1481,
	250, 1481,
	251, 1481,
	252, 1481,
	253, 1481,
	254, 1481,
	255, 1481,
	256, 1481,
	257, 1481,
	258, 1481,
	259, 1481,
	261, 1481,
	262, 1481,
	263, 1481,
	264, 1481,
	265, 1481,
	266, 1481,
	267, 1481,
	268, 1481,
	269, 1481,
	270, 1481,
	271, 1481,
	272, 1481,
	274, 1481,
	275, 1481,
	276, 1481,
	277, 1481,
	278, 1481,
	280, 1481,
	281, 1481,
	282, 1481,
	283, 1481,
	284, 1481,
	285, 1481,
	286, 1481,
	287, 1481,
	288, 1481,
	290, 1481,
	291, 1481,
	292, 1481,
	293, 1481,
	294, 1481,
	295, 1481,
	296, 1481,
	297, 1481,
	298, 1481,
	299, 1481,
	300, 1481,
	302, 1481,
	304, 1481,
	305, 1481,
	306, 1481,
	307, 1481,
	308, 1481,
	309, 1481,
	310, 1481,
	311, 1481,
	313, 1481,
	314, 1481,
	315, 1481,
	318, 1481,
	319, 1481,
	320, 1481,
	321, 1481,
	323, 1481,
	324, 1481,
	325, 1481,
	326, 1481,
	329, 1481,
	330, 1481,
	331, 1481,
	332, 1481,
	334, 1481,
	336, 1481,
	337, 1481,
	338, 1481,
	339, 1481,
	340, 1481,
	341, 1481,
	344, 1481,
	349, 1481,
	350, 1481,
	351, 1481,
	352, 1481,
	353, 1481,
	354, 1481,
	355, 1481,
	357, 1481,
	358, 1481,
	359, 1481,
	360, 1481,
	361, 1481,
	362, 1481,
	364, 1481,
	365, 1481,
	366, 1481,
	367, 1481,
	368, 1481,
	369, 1481,
	370, 1481,
	371, 1481,
	372, 1481,
	374, 1481,
	377, 1481,
	378, 1481,
	381, 1481,
	382, 1481,
	-2, 0,
	-1, 945,
	133, 1382,
	316, 1382,
	359, 1382,
	378, 1382,
	-2, 0,
	-1, 962,
	133, 1405,
	316, 1405,
	359, 1405,
	378, 1405,
	-2, 0,
	-1, 963,
	168, 619,
	238, 619,
	242, 619,
	-2, 315,
	-1, 1035,
	118, 715,
	186, 715,
	213, 715,
	-2, 677,
	-1, 1114,
	108, 681,
	118, 681,
	164, 681,
	186, 681,
	213, 681,
	219, 681,
	327, 681,
	-2, 1024,
	-1, 1124,
	376, 1225,
	-2, 1213,
	-1, 1142,
	377, 1137,
	-2, 0,
	-1, 1166,
	168, 619,
	238, 619,
	242, 619,
	-2, 614,
	-1, 1194,
	377, 1137,
	-2, 0,
	-1, 1198,
	108, 681,
	118, 681,
	164, 681,
	186, 681,
	213, 681,
	219, 681,
	327, 681,
	-2, 777,
	-1, 1340,
	168, 619,
	238, 619,
	242, 619,
	-2, 317,
	-1, 1442,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 930,
	-1, 1443,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 931,
	-1, 1444,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 932,
	-1, 1445,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 933,
	-1, 1446,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 934,
	-1, 1447,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 935,
	-1, 1448,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 936,
	-1, 1449,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 937,
	-1, 1458,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 946,
	-1, 1459,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 947,
	-1, 1460,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	290, 0,
	357, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	-2, 948,
	-1, 1463,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 953,
	-1, 1469,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 955,
	-1, 1471,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 959,
	-1, 1472,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 960,
	-1, 1473,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 961,
	-1, 1474,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 962,
	-1, 1543,
	133, 1148,
	376, 1248,
	-2, 1241,
	-1, 1544,
	133, 1149,
	-2, 1422,
	-1, 1545,
	133, 1150,
	-2, 1327,
	-1, 1546,
	133, 1151,
	-2, 1288,
	-1, 1547,
	133, 1152,
	-2, 1305,
	-1, 1548,
	133, 1153,
	-2, 1326,
	-1, 1549,
	133, 1154,
	-2, 1379,
	-1, 1625,
	1, 778,
	75, 778,
	108, 778,
	118, 778,
	134, 778,
	138, 778,
	140, 778,
	155, 778,
	164, 778,
	171, 778,
	182, 778,
	186, 778,
	200, 778,
	213, 778,
	215, 778,
	219, 778,
	260, 778,
	262, 778,
	327, 778,
	335, 778,
	346, 778,
	347, 778,
	356, 778,
	375, 778,
	377, 778,
	379, 778,
	380, 778,
	381, 778,
	-2, 777,
	-1, 1770,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 954,
	-1, 1771,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 956,
	-1, 1776,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 957,
	-1, 1794,
	224, 1108,
	-2, 1110,
	-1, 2025,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 958,
	-1, 2030,
	167, 0,
	-2, 974,
	-1, 2039,
	224, 1109,
	-2, 1111,
	-1, 2081,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1001,
	-1, 2082,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1002,
	-1, 2083,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1003,
	-1, 2087,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1007,
	-1, 2088,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1008,
	-1, 2089,
	13, 0,
	14, 0,
	15, 0,
	357, 0,
	358, 0,
	359, 0,
	-2, 1009,
	-1, 2221,
	167, 0,
	-2, 975,
	-1, 2224,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 978,
	-1, 2225,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 980,
	-1, 2345,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 979,
	-1, 2346,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 981,
	-1, 2353,
	167, 0,
	-2, 1010,
	-1, 2430,
	167, 0,
	-2, 1011,
	-1, 2511,
	37, 0,
	148, 0,
	185, 0,
	284, 0,
	354, 0,
	362, 0,
	-2, 1425,
	-1, 2597,
	376, 1493,
	-2, 492,
}

const sqlPrivate = 57344

const sqlLast = 44175

var sqlAct = [...]int{

	646, 2579, 2593, 2316, 2315, 2594, 2577, 2519, 2174, 2510,
	2560, 2483, 2521, 1691, 2520, 2379, 2004, 1238, 2509, 2058,
	1699, 2435, 2275, 983, 2326, 2184, 1335, 1764, 73, 644,
	2208, 1334, 1970, 622, 1245, 605, 2206, 2140, 589, 750,
	609, 880, 182, 1688, 2359, 1620, 1671, 182, 2141, 1972,
	1670, 643, 1192, 1860, 2255, 182, 1978, 2200, 2289, 1196,
	1241, 777, 1908, 1280, 182, 1700, 1175, 1629, 1674, 182,
	182, 1638, 1895, 182, 2111, 1887, 182, 1621, 1675, 1859,
	1234, 1421, 1805, 1204, 182, 1760, 1664, 1416, 457, 1365,
	966, 1038, 1746, 597, 123, 1120, 1176, 1206, 1498, 1507,
	616, 1486, 1361, 1483, 1572, 965, 1156, 1672, 1152, 756,
	1499, 1523, 1678, 1517, 454, 985, 926, 912, 1607, 526,
	1693, 1594, 738, 1183, 759, 506, 1539, 615, 1109, 1039,
	1037, 173, 638, 905, 1364, 182, 182, 915, 1166, 124,
	484, 519, 1252, 182, 125, 902, 178, 1165, 736, 2290,
	1793, 1043, 523, 547, 2125, 594, 1692, 2126, 123, 1260,
	1260, 2317, 1260, 2610, 2609, 2317, 593, 2603, 2603, 182,
	182, 182, 182, 779, 593, 2602, 2556, 182, 182, 2603,
	1229, 2555, 2554, 2536, 2531, 1229, 1229, 2288, 1714, 2530,
	2527, 1987, 2507, 1714, 1229, 2506, 1729, 1665, 2478, 1729,
	2615, 498, 1722, 2473, 1201, 2469, 2461, 2340, 588, 1229,
	2288, 2432, 2410, 2407, 1193, 1722, 2288, 1229, 603, 2405,
	2023, 2390, 2114, 2288, 868, 1229, 639, 2389, 2367, 2364,
	2347, 2288, 1229, 1229, 1722, 2311, 2309, 123, 2287, 1714,
	1714, 2268, 2288, 2223, 1225, 1229, 2199, 1722, 472, 26,
	1669, 2194, 2121, 1988, 2034, 1669, 2122, 183, 1714, 1596,
	1998, 1959, 1884, 586, 1960, 1229, 1229, 1877, 585, 1272,
	1875, 1878, 1874, 1873, 1714, 1665, 1714, 1714, 764, 768,
	2601, 598, 1797, 1714, 740, 1520, 1830, 1831, 1798, 1848,
	1849, 1850, 1733, 1721, 1713, 1668, 1714, 1722, 1714, 1669,
	1729, 1601, 1273, 2220, 2479, 1600, 1274, 1729, 742, 774,
	743, 2340, 140, 2114, 2611, 1595, 2015, 1627, 2590, 2094,
	2036, 1229, 1960, 1763, 1744, 1343, 1830, 1831, 1714, 1170,
	1502, 866, 947, 143, 140, 2291, 1804, 1521, 944, 943,
	1845, 942, 142, 702, 941, 940, 1696, 753, 1500, 1054,
	1055, 939, 1084, 1085, 1086, 1094, 1095, 1096, 1362, 938,
	937, 936, 1072, 935, 142, 934, 1087, 933, 1261, 1261,
	744, 1261, 741, 1057, 579, 578, 1098, 577, 545, 141,
	544, 543, 636, 542, 541, 540, 539, 134, 538, 1522,
	1519, 537, 26, 596, 135, 536, 535, 1056, 607, 534,
	533, 141, 532, 1076, 1836, 531, 530, 529, 514, 513,
	1073, 512, 511, 510, 445, 126, 444, 1054, 1055, 182,
	443, 182, 182, 442, 182, 441, 426, 425, 417, 182,
	780, 416, 415, 414, 407, 182, 406, 126, 166, 165,
	872, 1057, 164, 1851, 1836, 163, 162, 161, 182, 182,
	182, 182, 182, 160, 159, 158, 157, 929, 1079, 1080,
	1081, 1082, 1054, 1055, 156, 1056, 1524, 1062, 1846, 155,
	154, 153, 152, 151, 150, 1054, 1055, 149, 148, 182,
	147, 1094, 1095, 1096, 146, 594, 1057, 1091, 1099, 1903,
	1197, 1266, 1259, 182, 1396, 145, 144, 1536, 919, 1057,
	1534, 1987, 1098, 1830, 1831, 1368, 1097, 1595, 1846, 182,
	1056, 978, 1050, 1532, 1530, 2583, 781, 2578, 2581, 182,
	2526, 2508, 2493, 1056, 1089, 140, 2488, 2427, 2408, 1076,
	2333, 1077, 2254, 2253, 2249, 1062, 2248, 2241, 884, 2240,
	2239, 888, 2235, 1847, 904, 2234, 1518, 2233, 2232, 2226,
	929, 2205, 2108, 2103, 2102, 142, 2101, 1088, 1830, 1831,
	2044, 1958, 879, 1915, 1911, 1882, 1879, 908, 908, 1962,
	1727, 751, 927, 1867, 1858, 1829, 981, 1826, 1825, 1823,
	1062, 182, 909, 1847, 1079, 1080, 1081, 1082, 1810, 1809,
	1794, 1083, 141, 1062, 1625, 1050, 1277, 1128, 1195, 1077,
	134, 1494, 1049, 1054, 1055, 1194, 1078, 135, 1121, 877,
	1112, 2604, 948, 1091, 1099, 1054, 1055, 976, 2588, 2568,
	2567, 1836, 1244, 1092, 1036, 2060, 2498, 1057, 1695, 1071,
	2497, 2496, 2464, 1842, 1843, 1844, 2456, 2455, 2446, 1057,
	1841, 1839, 1840, 1832, 1833, 1834, 1835, 1837, 1838, 594,
	1089, 1056, 1724, 1121, 2444, 872, 2422, 1077, 2421, 963,
	960, 2420, 2376, 1056, 140, 2600, 2355, 2341, 1035, 1830,
	1831, 2320, 2308, 2294, 1078, 1258, 1836, 2246, 2182, 873,
	875, 1839, 1840, 1832, 1833, 1834, 1835, 1837, 1838, 2180,
	1031, 2332, 2002, 1090, 142, 2179, 1068, 1069, 1075, 1074,
	1070, 1093, 979, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 1495, 2177, 930, 2000, 2149, 1083, 1363, 1759,
	2250, 1062, 2148, 2129, 2117, 2029, 1948, 1758, 1942, 1928,
	1927, 141, 1078, 1062, 1913, 1883, 182, 586, 182, 134,
	1846, 1857, 585, 1046, 1047, 1819, 135, 1818, 1815, 1092,
	1790, 1785, 1488, 1051, 1157, 1160, 1612, 1584, 1054, 1055,
	1528, 182, 182, 1237, 949, 752, 1173, 126, 1164, 1150,
	953, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	1149, 1124, 1057, 1174, 1148, 1077, 1147, 1836, 1181, 594,
	1154, 1155, 1158, 1928, 1146, 1145, 1144, 607, 1143, 41,
	931, 1142, 1161, 1141, 1140, 1139, 1056, 930, 1138, 1137,
	1136, 1135, 44, 1179, 1134, 1847, 1133, 1132, 1125, 1090,
	1113, 1060, 1061, 1063, 1064, 1112, 959, 1093, 2438, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 951, 923,
	1665, 2339, 2228, 2204, 2124, 2120, 1796, 1613, 1110, 123,
	1195, 1846, 878, 1830, 1831, 975, 1973, 1214, 2343, 1901,
	1078, 1169, 1834, 1835, 1837, 1838, 929, 182, 1732, 2342,
	1191, 1197, 1535, 779, 1167, 1533, 479, 2336, 2127, 182,
	1102, 1103, 1104, 1105, 1106, 1199, 1171, 1989, 1531, 1529,
	1115, 182, 1227, 931, 1951, 1029, 1945, 182, 1278, 182,
	1123, 182, 1034, 1941, 1520, 182, 1243, 1881, 66, 1281,
	1880, 1731, 1841, 1839, 1840, 1832, 1833, 1834, 1835, 1837,
	1838, 1236, 1162, 1769, 1400, 1130, 1847, 1163, 972, 1349,
	2005, 1242, 2360, 1692, 1230, 2061, 1508, 2586, 1801, 1153,
	1023, 2585, 1983, 2136, 2491, 752, 182, 182, 1718, 2468,
	2551, 2552, 1249, 929, 592, 182, 1521, 2302, 182, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 1734, 2401, 1127, 1116,
	2400, 2012, 1058, 1059, 1060, 1061, 1063, 1064, 733, 779,
	1024, 1207, 446, 167, 1208, 704, 731, 2398, 182, 2397,
	2168, 1631, 2165, 182, 67, 1015, 1725, 2133, 182, 182,
	2160, 182, 2132, 182, 1814, 182, 904, 182, 1522, 1519,
	591, 1813, 1812, 1228, 1215, 1177, 1177, 1811, 182, 1772,
	127, 69, 607, 70, 182, 182, 1832, 1833, 1834, 1835,
	1837, 1838, 1631, 929, 1717, 1660, 1212, 140, 973, 1656,
	1369, 1630, 1251, 1254, 478, 1653, 1470, 103, 1168, 865,
	2314, 1588, 1587, 182, 1213, 1207, 703, 779, 1208, 1397,
	2001, 2598, 1431, 1209, 1350, 593, 431, 142, 450, 170,
	2017, 1689, 1394, 2467, 1032, 1830, 1831, 419, 1275, 1223,
	1393, 974, 729, 1411, 2172, 1524, 1336, 960, 1276, 2381,
	1353, 1352, 1557, 1362, 1359, 1222, 2173, 1955, 1232, 584,
	2504, 1340, 727, 1255, 141, 1354, 123, 1370, 581, 1366,
	1337, 724, 134, 2523, 1195, 1485, 1737, 1220, 1430, 135,
	1064, 1009, 1524, 930, 2543, 432, 493, 1384, 1739, 1377,
	780, 1403, 449, 171, 1485, 1221, 583, 1209, 1950, 1207,
	126, 594, 1208, 1761, 1762, 1374, 594, 1053, 1980, 584,
	1740, 1378, 1944, 1379, 1216, 1380, 2475, 1381, 1373, 1382,
	1010, 2570, 1738, 423, 958, 1518, 1236, 1401, 1402, 182,
	2449, 182, 651, 590, 182, 440, 1388, 1390, 1287, 1508,
	1356, 2476, 1558, 586, 2551, 182, 586, 586, 1412, 2013,
	1492, 1413, 1414, 1836, 779, 435, 1490, 182, 1151, 1358,
	2457, 182, 1260, 1981, 182, 1420, 2524, 1684, 182, 931,
	930, 2580, 182, 1939, 2054, 1838, 781, 1505, 182, 1218,
	1593, 1209, 172, 2016, 2578, 182, 779, 706, 988, 594,
	182, 1392, 1503, 1033, 2011, 1493, 780, 1496, 182, 2351,
	2317, 2404, 1107, 607, 607, 182, 1028, 2158, 1980, 1817,
	1608, 1328, 1614, 1567, 2458, 1615, 182, 1624, 182, 593,
	182, 2215, 996, 182, 2525, 182, 1550, 182, 182, 2542,
	182, 182, 1271, 2151, 1357, 929, 1643, 1645, 2522, 182,
	1022, 1287, 1287, 448, 168, 2018, 1632, 1662, 1628, 2550,
	930, 1524, 735, 1591, 1590, 734, 931, 1042, 1210, 434,
	433, 1599, 2548, 725, 1639, 1618, 1609, 1610, 1338, 1605,
	1405, 1014, 1410, 451, 780, 2382, 1954, 1712, 1417, 705,
	1635, 1648, 781, 447, 169, 1199, 2325, 1654, 1432, 1433,
	1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442, 1443,
	1444, 1445, 1446, 1447, 1448, 1449, 1450, 1451, 1452, 1453,
	1454, 1455, 1456, 1457, 1458, 1459, 1460, 1461, 1462, 1463,
	1219, 1469, 1661, 1471, 1472, 1473, 1474, 123, 1720, 779,
	2571, 1205, 1210, 123, 2541, 1698, 931, 182, 418, 1706,
	1497, 1642, 908, 1774, 908, 1710, 1719, 1115, 1715, 1604,
	927, 1716, 2283, 182, 182, 182, 1707, 182, 1708, 725,
	781, 1726, 1484, 424, 1709, 436, 1537, 1538, 420, 582,
	1554, 1261, 1566, 1568, 1573, 1576, 1577, 1578, 421, 726,
	182, 1728, 980, 1158, 572, 1161, 1052, 492, 725, 1481,
	1745, 2284, 1832, 1833, 1834, 1835, 1837, 1838, 1372, 1155,
	1154, 1467, 602, 957, 2051, 1479, 1019, 437, 1735, 1686,
	2152, 780, 1041, 1363, 1360, 1182, 1210, 1491, 954, 946,
	2392, 2391, 1650, 2576, 2374, 989, 1116, 1341, 1782, 2441,
	1658, 969, 2135, 408, 1510, 997, 1924, 572, 438, 123,
	439, 1920, 485, 780, 1780, 2244, 1641, 1542, 1542, 1555,
	1687, 1250, 1239, 1575, 2090, 602, 2052, 1579, 1580, 1582,
	1749, 1694, 2301, 1694, 990, 490, 1753, 987, 573, 2300,
	1757, 486, 1909, 2298, 1186, 2050, 1020, 594, 2484, 2283,
	1040, 2589, 2276, 1387, 1558, 1558, 1475, 964, 1344, 648,
	2563, 1751, 930, 2274, 1476, 1189, 1477, 781, 2278, 2185,
	1482, 970, 2279, 487, 2280, 971, 1041, 1042, 1408, 1803,
	2327, 1184, 1465, 1468, 1898, 1603, 882, 881, 2284, 1602,
	1348, 573, 1187, 2375, 489, 1777, 1930, 503, 969, 781,
	1775, 1773, 1021, 1524, 2282, 1778, 2575, 1640, 901, 1783,
	1185, 2277, 899, 2285, 1910, 1263, 1929, 482, 1265, 1464,
	1789, 594, 1268, 501, 175, 1897, 2245, 182, 779, 2091,
	1558, 1558, 1558, 182, 182, 2092, 1800, 182, 1885, 1346,
	1767, 591, 182, 1891, 1040, 182, 1186, 495, 931, 574,
	2299, 890, 1347, 182, 2297, 1409, 780, 2175, 2318, 182,
	182, 182, 1953, 969, 2256, 182, 1892, 1189, 182, 485,
	409, 2112, 1188, 3, 182, 182, 182, 182, 182, 2372,
	1527, 1478, 2354, 1606, 182, 477, 34, 182, 1480, 1890,
	1905, 182, 490, 1182, 1187, 2281, 1018, 2243, 486, 2279,
	182, 2280, 574, 1904, 1864, 1865, 1866, 2171, 2373, 1861,
	182, 488, 182, 2561, 182, 1914, 1007, 182, 1466, 1900,
	1779, 182, 1886, 969, 2028, 1005, 182, 1781, 182, 575,
	487, 2282, 1003, 970, 1001, 182, 1395, 971, 476, 33,
	2285, 410, 781, 1921, 1961, 1896, 1963, 999, 182, 929,
	1956, 489, 1186, 993, 594, 1916, 897, 475, 30, 1824,
	929, 182, 1938, 576, 1770, 1771, 870, 871, 491, 2562,
	1776, 1784, 900, 1189, 1188, 1997, 898, 1730, 1830, 1831,
	1667, 1659, 575, 474, 79, 1985, 2006, 1652, 1027, 1184,
	500, 2564, 1026, 970, 473, 78, 621, 971, 182, 952,
	1187, 867, 1795, 470, 22, 1862, 1982, 1754, 1802, 1385,
	1376, 1806, 1013, 1976, 494, 1990, 576, 762, 1185, 471,
	23, 1131, 2281, 1526, 2518, 469, 28, 1017, 1820, 34,
	1226, 1889, 2041, 1965, 468, 20, 2481, 1893, 1894, 1971,
	1996, 1899, 2272, 411, 1558, 1558, 2156, 1006, 182, 2154,
	2134, 2008, 2009, 2007, 2415, 2010, 1004, 1969, 1690, 1683,
	1765, 1270, 1115, 1002, 2014, 1000, 1269, 1788, 488, 1573,
	1573, 1573, 2019, 1267, 1791, 2046, 2047, 2048, 998, 2031,
	1188, 2021, 33, 1264, 992, 780, 1262, 896, 723, 466,
	19, 1807, 1808, 1287, 1224, 1177, 1836, 467, 18, 1217,
	607, 30, 1211, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
	1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
	1558, 1558, 2037, 1558, 2040, 491, 1766, 79, 1940, 182,
	1287, 2035, 2062, 2064, 2552, 182, 1947, 2067, 78, 757,
	1012, 1856, 2069, 2096, 182, 182, 2338, 22, 1575, 1575,
	1575, 461, 15, 1869, 2053, 2055, 2056, 2337, 462, 16,
	1846, 1964, 1367, 23, 1967, 766, 770, 1322, 776, 28,
	2097, 781, 1044, 460, 14, 2201, 2417, 1647, 20, 1287,
	2123, 465, 12, 2193, 480, 459, 10, 1663, 2146, 1655,
	2130, 182, 1977, 182, 1422, 1429, 2115, 2116, 2095, 2170,
	182, 2128, 2110, 929, 2113, 2161, 930, 123, 1651, 2166,
	2145, 464, 7, 2181, 1995, 2169, 1631, 930, 182, 182,
	728, 730, 2131, 463, 6, 1646, 2187, 2178, 2138, 1755,
	2195, 607, 607, 19, 2451, 1847, 182, 2159, 1321, 458,
	5, 18, 1287, 631, 607, 2291, 182, 779, 182, 182,
	1045, 2186, 1631, 991, 779, 2198, 502, 2429, 2020, 2176,
	2403, 1644, 2189, 1417, 2257, 2188, 2190, 1398, 1399, 2024,
	1322, 1322, 2025, 1054, 1055, 1048, 747, 2191, 1287, 1287,
	2217, 1657, 1649, 2196, 2030, 179, 2202, 1287, 1287, 2480,
	412, 182, 931, 2038, 2197, 15, 748, 1057, 427, 1054,
	1055, 2042, 16, 931, 1995, 2574, 2323, 452, 2212, 1697,
	1685, 1682, 496, 179, 1592, 2218, 504, 14, 1339, 509,
	1287, 1056, 1279, 2222, 2066, 12, 2559, 528, 2068, 10,
	1830, 1831, 2366, 2119, 1840, 1832, 1833, 1834, 1835, 1837,
	1838, 1321, 1321, 1054, 1055, 182, 2262, 1056, 182, 1742,
	1741, 2242, 2203, 2109, 1286, 7, 2057, 1742, 779, 182,
	182, 2098, 2099, 182, 182, 182, 2003, 6, 1906, 1876,
	2105, 2106, 2107, 1743, 749, 1589, 1586, 1585, 739, 739,
	182, 1516, 1118, 5, 2230, 182, 412, 182, 2049, 182,
	182, 182, 1966, 1128, 2260, 1126, 182, 2118, 1025, 182,
	2259, 1016, 929, 2261, 2266, 1011, 2267, 1008, 2146, 1324,
	182, 182, 412, 412, 772, 412, 2295, 929, 2263, 2264,
	179, 869, 994, 1889, 956, 1342, 2296, 2139, 580, 2380,
	2145, 770, 2292, 2313, 483, 1375, 995, 2146, 1902, 1611,
	2329, 2474, 2146, 2271, 2236, 2319, 776, 2104, 1816, 2434,
	2324, 2350, 1525, 1129, 55, 2143, 2321, 1286, 1286, 2145,
	930, 2322, 2330, 625, 2145, 2328, 2273, 2137, 1677, 1676,
	782, 1351, 647, 1541, 1423, 722, 2344, 649, 1284, 650,
	1177, 1285, 2335, 1159, 637, 1282, 1287, 924, 1701, 607,
	600, 1355, 572, 1489, 1506, 1799, 1122, 617, 629, 628,
	2349, 1323, 1504, 182, 780, 182, 950, 779, 182, 1907,
	602, 780, 1324, 1324, 1558, 1979, 182, 2331, 1407, 1756,
	1404, 2164, 779, 1975, 2153, 422, 1827, 2167, 2221, 922,
	1564, 1556, 2224, 2225, 2363, 1552, 2227, 1030, 1180, 1108,
	2356, 2147, 1702, 2229, 601, 2231, 931, 2384, 2146, 2258,
	2386, 2365, 977, 1986, 2162, 1558, 182, 1723, 2162, 929,
	1172, 2238, 1236, 182, 2162, 1415, 746, 2383, 2370, 745,
	2145, 182, 182, 929, 929, 2587, 573, 770, 2402, 1345,
	2146, 2368, 2413, 2385, 1736, 1101, 1100, 732, 2406, 2443,
	781, 182, 968, 2414, 2247, 967, 182, 781, 1240, 2425,
	2426, 2423, 2145, 182, 1323, 1323, 2418, 2412, 2424, 2416,
	1923, 2569, 2450, 1991, 1992, 780, 1993, 1994, 2445, 2428,
	2150, 2490, 2439, 139, 136, 1558, 138, 137, 182, 182,
	1952, 82, 32, 31, 102, 182, 101, 2440, 100, 99,
	98, 2437, 97, 929, 2293, 96, 95, 2462, 182, 2431,
	94, 2460, 929, 929, 93, 92, 2463, 2448, 91, 930,
	90, 89, 528, 88, 886, 528, 2465, 891, 2454, 87,
	2466, 86, 894, 2334, 930, 182, 2447, 182, 412, 594,
	182, 85, 779, 2471, 2472, 84, 1181, 574, 524, 521,
	81, 528, 528, 412, 916, 869, 80, 29, 25, 2499,
	106, 781, 2501, 1287, 24, 2487, 77, 2500, 76, 27,
	182, 1283, 17, 2505, 11, 21, 60, 61, 59, 2345,
	2346, 2503, 528, 2486, 2146, 2515, 58, 182, 182, 182,
	2517, 2516, 2502, 57, 13, 182, 528, 2528, 53, 2535,
	52, 50, 49, 2492, 48, 931, 2145, 47, 9, 182,
	2358, 2540, 955, 2538, 2539, 2537, 2361, 757, 1202, 1287,
	931, 2147, 528, 2547, 780, 599, 2549, 575, 105, 45,
	2553, 8, 43, 2532, 2533, 2534, 1925, 42, 104, 780,
	118, 2558, 2557, 115, 117, 114, 116, 120, 119, 112,
	2147, 2566, 110, 2565, 111, 2147, 2572, 113, 109, 2573,
	2393, 576, 2409, 108, 121, 39, 1786, 1787, 38, 779,
	37, 779, 1287, 1925, 1283, 1283, 930, 36, 35, 2,
	1, 2591, 2592, 0, 412, 0, 0, 2599, 0, 0,
	930, 930, 0, 2605, 0, 0, 2362, 2608, 2606, 2607,
	2155, 0, 2157, 2614, 2612, 2613, 0, 2616, 0, 0,
	781, 0, 1322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1999, 0, 0, 781, 0, 0, 0, 0,
	2582, 0, 2584, 2388, 0, 1235, 2442, 0, 0, 0,
	0, 0, 1853, 1854, 1855, 0, 0, 2399, 0, 1322,
	0, 0, 0, 770, 0, 1253, 0, 1253, 0, 0,
	930, 2147, 931, 0, 0, 0, 0, 0, 0, 930,
	930, 0, 0, 0, 0, 0, 931, 931, 0, 0,
	607, 0, 0, 1321, 0, 0, 0, 2162, 0, 0,
	0, 0, 0, 2147, 0, 0, 0, 0, 1322, 780,
	0, 0, 0, 0, 0, 0, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1321, 1422, 2065, 0, 0, 0, 0, 482, 0, 0,
	1422, 2070, 0, 0, 0, 2514, 2514, 0, 0, 509,
	0, 739, 0, 0, 0, 0, 931, 0, 0, 626,
	74, 2529, 0, 0, 0, 931, 931, 0, 0, 0,
	0, 1322, 0, 2100, 412, 412, 0, 0, 2477, 1321,
	0, 2514, 0, 0, 0, 0, 0, 1054, 1055, 485,
	0, 0, 0, 0, 0, 781, 0, 0, 0, 0,
	0, 0, 0, 0, 2494, 2495, 0, 1322, 1322, 1286,
	0, 1057, 490, 0, 0, 0, 1322, 1322, 486, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 2514,
	0, 0, 0, 0, 0, 1056, 780, 0, 780, 0,
	0, 0, 1321, 0, 0, 0, 1286, 2147, 0, 1322,
	487, 0, 0, 0, 0, 0, 0, 0, 2595, 0,
	0, 0, 0, 0, 1324, 0, 2026, 2027, 0, 0,
	2595, 489, 0, 2595, 2595, 0, 0, 0, 1321, 1321,
	179, 0, 0, 587, 0, 0, 595, 1321, 1321, 0,
	0, 0, 412, 0, 0, 1286, 0, 0, 0, 0,
	0, 1324, 758, 74, 1248, 1062, 0, 0, 0, 0,
	412, 0, 412, 0, 412, 0, 0, 0, 1256, 0,
	1321, 0, 781, 0, 781, 2071, 2072, 2073, 2074, 2075,
	2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085,
	2086, 2087, 2088, 2089, 0, 2093, 0, 0, 0, 0,
	1324, 757, 0, 0, 0, 0, 1323, 0, 1286, 528,
	179, 0, 0, 0, 0, 0, 0, 757, 179, 1077,
	1626, 528, 0, 0, 40, 0, 0, 0, 770, 2395,
	2396, 0, 0, 0, 770, 41, 0, 0, 488, 0,
	0, 776, 0, 1323, 1286, 1286, 0, 0, 44, 0,
	0, 528, 0, 1286, 1286, 0, 528, 0, 0, 0,
	0, 179, 528, 1324, 528, 1322, 528, 0, 528, 0,
	528, 0, 1703, 0, 51, 0, 0, 0, 0, 0,
	0, 1386, 0, 776, 776, 0, 1286, 528, 528, 0,
	0, 0, 1323, 0, 1078, 491, 0, 0, 0, 1324,
	1324, 0, 0, 62, 0, 0, 0, 0, 1324, 1324,
	63, 0, 479, 64, 0, 0, 528, 1830, 1831, 0,
	1848, 1849, 1850, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2219, 0, 1321, 0, 0, 0,
	0, 1324, 0, 0, 66, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1323, 1323, 0, 1058, 1059, 1060, 1061, 1063, 1064,
	1323, 1323, 0, 0, 0, 0, 0, 0, 0, 1750,
	776, 1752, 0, 770, 0, 0, 1283, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 0, 509, 1323, 739, 1836, 1768, 869, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	0, 0, 1286, 1283, 0, 0, 127, 69, 0, 70,
	1623, 0, 2394, 0, 412, 0, 595, 412, 0, 0,
	0, 1636, 0, 140, 1851, 412, 0, 1748, 0, 0,
	478, 412, 1322, 103, 0, 0, 0, 0, 412, 0,
	0, 0, 0, 1666, 40, 0, 0, 0, 0, 1846,
	0, 1673, 1283, 142, 0, 41, 0, 1324, 869, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 412,
	0, 1705, 0, 528, 0, 0, 528, 0, 528, 0,
	412, 412, 0, 1711, 869, 0, 0, 0, 1322, 0,
	141, 0, 1636, 0, 51, 0, 0, 0, 134, 0,
	0, 0, 0, 1321, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1283, 0, 0, 0, 0,
	0, 0, 0, 62, 1847, 0, 126, 0, 0, 0,
	63, 0, 479, 64, 0, 0, 2353, 0, 0, 0,
	0, 1322, 0, 0, 0, 0, 0, 0, 0, 1323,
	0, 1283, 1283, 0, 0, 0, 0, 587, 0, 1321,
	1283, 1283, 0, 757, 66, 0, 0, 0, 0, 757,
	757, 0, 0, 757, 0, 0, 0, 2377, 1111, 0,
	1114, 0, 0, 0, 0, 0, 0, 1119, 0, 0,
	1747, 0, 0, 1283, 0, 1917, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 412, 412, 412, 0,
	412, 0, 1321, 0, 1842, 1843, 1844, 0, 0, 1286,
	1943, 1841, 1839, 1840, 1832, 1833, 1834, 1835, 1837, 1838,
	0, 0, 0, 412, 0, 0, 1957, 1054, 1055, 0,
	0, 0, 0, 0, 0, 0, 0, 2430, 0, 0,
	67, 0, 0, 1968, 0, 1830, 1831, 0, 0, 0,
	0, 1057, 1235, 0, 0, 0, 0, 0, 1054, 1055,
	0, 1235, 0, 0, 1324, 1286, 127, 69, 0, 70,
	0, 0, 0, 0, 0, 1056, 0, 0, 0, 0,
	0, 1076, 1057, 140, 0, 0, 0, 1383, 0, 0,
	478, 0, 0, 103, 0, 0, 0, 0, 0, 1845,
	0, 0, 0, 0, 0, 74, 1056, 0, 0, 0,
	1198, 0, 0, 142, 0, 0, 0, 0, 1286, 0,
	1324, 0, 0, 0, 2022, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1079, 1080, 1081, 1082,
	0, 0, 0, 0, 0, 1062, 0, 0, 0, 1283,
	141, 0, 0, 0, 0, 0, 1323, 0, 134, 0,
	0, 0, 0, 1836, 0, 135, 0, 0, 0, 0,
	0, 0, 0, 1324, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	412, 0, 0, 0, 0, 0, 412, 412, 0, 1077,
	412, 1190, 1323, 0, 0, 1623, 0, 0, 1623, 0,
	0, 0, 0, 0, 0, 0, 1912, 1846, 40, 0,
	0, 0, 412, 1918, 1919, 0, 0, 0, 1636, 41,
	1077, 1926, 0, 0, 0, 0, 0, 1931, 1932, 1934,
	1936, 1937, 44, 0, 0, 757, 0, 412, 0, 0,
	1946, 0, 0, 0, 1949, 1323, 0, 0, 0, 1083,
	0, 0, 0, 412, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 1248, 1078, 1248, 0, 528, 0, 0,
	412, 0, 0, 0, 1974, 0, 0, 0, 0, 412,
	0, 1984, 1847, 0, 0, 0, 0, 62, 412, 0,
	0, 0, 0, 0, 63, 1078, 479, 64, 0, 1054,
	1055, 1747, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 0, 1072, 0, 1747, 0, 1087, 0, 0, 0,
	0, 0, 0, 1057, 1703, 757, 1098, 0, 66, 0,
	0, 0, 0, 0, 0, 1830, 1831, 0, 1848, 1849,
	1850, 0, 74, 0, 0, 0, 1283, 1056, 0, 0,
	0, 412, 2033, 1076, 0, 2214, 0, 0, 0, 0,
	1073, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	0, 0, 0, 587, 0, 0, 587, 587, 0, 1841,
	1839, 1840, 1832, 1833, 1834, 1835, 1837, 1838, 0, 1845,
	0, 0, 0, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 2059, 1283, 0, 0, 0, 0, 0, 1079, 1080,
	1081, 1082, 0, 0, 67, 0, 0, 1062, 0, 0,
	0, 0, 1830, 1831, 0, 1848, 1849, 1850, 0, 1487,
	0, 0, 0, 0, 0, 0, 0, 1091, 1099, 0,
	127, 69, 595, 70, 0, 0, 0, 1114, 0, 0,
	0, 757, 0, 1836, 0, 1283, 1097, 140, 0, 0,
	0, 0, 0, 0, 478, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 1089, 0, 1845, 0, 0, 0,
	0, 1077, 412, 0, 0, 0, 0, 142, 1623, 0,
	0, 0, 1851, 0, 0, 2305, 0, 869, 1623, 0,
	0, 0, 2310, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 2142, 0, 758, 0, 0, 1846, 0, 0,
	0, 0, 0, 0, 141, 2163, 0, 0, 0, 2163,
	1198, 0, 134, 0, 0, 2163, 0, 0, 0, 135,
	1836, 1083, 0, 74, 1636, 0, 1248, 0, 0, 0,
	0, 74, 0, 2183, 0, 0, 1078, 0, 0, 0,
	126, 0, 0, 0, 0, 455, 0, 0, 0, 0,
	0, 412, 412, 1092, 0, 0, 0, 0, 0, 1071,
	0, 0, 74, 0, 74, 0, 0, 40, 0, 2209,
	0, 0, 1847, 0, 0, 0, 0, 0, 41, 2211,
	0, 2213, 412, 74, 1846, 0, 0, 0, 0, 74,
	0, 44, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2378, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 0, 1090, 2237, 0, 1068, 1069, 1075, 1074,
	1070, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 2411, 0, 0, 0, 62, 0, 0, 0,
	1872, 0, 0, 63, 0, 479, 64, 0, 0, 1847,
	0, 0, 1842, 1843, 1844, 0, 0, 0, 0, 1841,
	1839, 1840, 1832, 1833, 1834, 1835, 1837, 1838, 412, 0,
	0, 869, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 1623, 869, 0, 74, 2269, 2270, 1636, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2142, 869, 0, 40, 0, 0, 2303, 0,
	2304, 2459, 412, 2306, 2307, 0, 41, 0, 0, 412,
	0, 0, 2312, 0, 0, 0, 0, 0, 0, 44,
	0, 2142, 0, 869, 1673, 0, 2142, 0, 0, 1842,
	1843, 1844, 0, 0, 0, 0, 1841, 1839, 1840, 1832,
	1833, 1834, 1835, 1837, 1838, 51, 2489, 0, 0, 0,
	0, 0, 0, 67, 0, 0, 0, 0, 1487, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 0, 0, 1114, 127,
	69, 63, 70, 479, 64, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 140, 0, 0, 0,
	0, 1703, 0, 478, 0, 0, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 1636, 0, 2369, 0,
	0, 2371, 0, 0, 0, 0, 142, 0, 0, 412,
	0, 0, 2142, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1114, 0, 0, 0, 0, 0, 2163, 0,
	0, 0, 0, 141, 2142, 0, 0, 0, 0, 412,
	0, 134, 0, 0, 0, 0, 869, 0, 135, 0,
	0, 0, 0, 0, 2209, 2209, 758, 0, 0, 0,
	0, 0, 758, 758, 0, 0, 758, 0, 0, 456,
	0, 67, 0, 0, 2436, 0, 0, 0, 0, 1623,
	0, 0, 0, 0, 0, 0, 1248, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 69, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	0, 2452, 2453, 0, 140, 0, 0, 74, 412, 0,
	0, 478, 0, 0, 103, 0, 0, 0, 0, 0,
	0, 2470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 0, 142, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 595, 0, 0, 2485, 0,
	869, 0, 0, 412, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2142, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 134,
	0, 0, 0, 2436, 0, 0, 135, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 869, 869, 0, 0, 0, 0, 126, 412, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2546, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	925, 0, 928, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 783, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 74, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 758, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 708, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 371, 372, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	714, 243, 244, 715, 0, 245, 246, 0, 758, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 140, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 721, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 142, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 758, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 932, 405,
	0, 0, 341, 0, 0, 0, 134, 342, 343, 344,
	345, 346, 0, 135, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 784, 2419, 186, 785, 786,
	787, 788, 347, 789, 790, 791, 792, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 793, 191, 354,
	355, 192, 193, 794, 795, 356, 357, 358, 796, 194,
	359, 797, 783, 798, 195, 196, 197, 0, 199, 200,
	201, 198, 799, 202, 0, 203, 204, 800, 707, 205,
	206, 207, 801, 802, 804, 803, 805, 806, 807, 208,
	209, 413, 210, 360, 211, 361, 362, 808, 212, 809,
	213, 810, 214, 811, 812, 215, 216, 813, 217, 814,
	1114, 815, 363, 218, 220, 219, 221, 364, 365, 816,
	708, 817, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 818, 225, 819, 820, 709, 821, 226,
	369, 822, 370, 823, 0, 227, 228, 229, 230, 371,
	372, 711, 824, 373, 234, 825, 231, 826, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 827, 380, 828,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	829, 242, 241, 830, 383, 714, 243, 244, 715, 831,
	245, 246, 832, 833, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 834, 835,
	836, 385, 257, 386, 258, 259, 837, 260, 838, 839,
	261, 840, 841, 262, 387, 718, 263, 719, 388, 264,
	265, 266, 267, 268, 842, 269, 389, 270, 390, 271,
	843, 272, 273, 274, 275, 276, 391, 277, 278, 844,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 845, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 846, 304, 393, 303,
	305, 306, 847, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 848, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 849, 318, 850, 319, 320, 321,
	322, 323, 324, 325, 326, 851, 398, 399, 400, 852,
	853, 327, 328, 401, 402, 854, 329, 330, 331, 332,
	855, 856, 333, 334, 335, 336, 857, 337, 858, 403,
	338, 339, 340, 404, 405, 859, 860, 341, 861, 862,
	863, 864, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 778, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1616, 0, 0,
	0, 0, 0, 184, 185, 784, 1617, 186, 785, 786,
	787, 788, 347, 789, 790, 791, 792, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 793, 191, 354,
	355, 192, 193, 794, 795, 356, 357, 358, 796, 194,
	359, 797, 783, 798, 195, 196, 197, 0, 199, 200,
	201, 198, 799, 202, 0, 203, 204, 800, 707, 205,
	206, 207, 801, 802, 804, 803, 805, 806, 807, 208,
	209, 413, 210, 360, 211, 361, 362, 808, 212, 809,
	213, 810, 214, 811, 812, 215, 216, 813, 217, 814,
	0, 815, 363, 218, 220, 219, 221, 364, 365, 816,
	708, 817, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 818, 225, 819, 820, 709, 821, 226,
	369, 822, 370, 823, 0, 227, 228, 229, 230, 371,
	372, 711, 824, 373, 234, 825, 231, 826, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 827, 380, 828,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	829, 242, 241, 830, 383, 714, 243, 244, 715, 831,
	245, 246, 832, 833, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 834, 835,
	836, 385, 257, 386, 258, 259, 837, 260, 838, 839,
	261, 840, 841, 262, 387, 718, 263, 719, 388, 264,
	265, 266, 267, 268, 842, 269, 389, 270, 390, 271,
	843, 272, 273, 274, 275, 276, 391, 277, 278, 844,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 845, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 846, 304, 393, 303,
	305, 306, 847, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 848, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 849, 318, 850, 319, 320, 321,
	322, 323, 324, 325, 326, 851, 398, 399, 400, 852,
	853, 327, 328, 401, 402, 854, 329, 330, 331, 332,
	855, 856, 333, 334, 335, 336, 857, 337, 858, 403,
	338, 339, 340, 404, 405, 859, 860, 341, 861, 862,
	863, 864, 342, 343, 344, 345, 346, 0, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 784, 2265, 186, 785,
	786, 787, 788, 347, 789, 790, 791, 792, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 793, 191,
	354, 355, 192, 193, 794, 795, 356, 357, 358, 796,
	194, 359, 797, 783, 798, 195, 196, 197, 0, 199,
	200, 201, 198, 799, 202, 0, 203, 204, 800, 707,
	205, 206, 207, 801, 802, 804, 803, 805, 806, 807,
	208, 209, 413, 210, 360, 211, 361, 362, 808, 212,
	809, 213, 810, 214, 811, 812, 215, 216, 813, 217,
	814, 0, 815, 363, 218, 220, 219, 221, 364, 365,
	816, 708, 817, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 818, 225, 819, 820, 709, 821,
	226, 369, 822, 370, 823, 0, 227, 228, 229, 230,
	371, 372, 711, 824, 373, 234, 825, 231, 826, 710,
	232, 374, 233, 375, 376, 377, 378, 379, 827, 380,
	828, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 829, 242, 241, 830, 383, 714, 243, 244, 715,
	831, 245, 246, 832, 833, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 834,
	835, 836, 385, 257, 386, 258, 259, 837, 260, 838,
	839, 261, 840, 841, 262, 387, 718, 263, 719, 388,
	264, 265, 266, 267, 268, 842, 269, 389, 270, 390,
	271, 843, 272, 273, 274, 275, 276, 391, 277, 278,
	844, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 845, 291, 720, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 846, 304, 393,
	303, 305, 306, 847, 307, 295, 296, 308, 721, 309,
	394, 395, 310, 848, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 849, 318, 850, 319, 320,
	321, 322, 323, 324, 325, 326, 851, 398, 399, 400,
	852, 853, 327, 328, 401, 402, 854, 329, 330, 331,
	332, 855, 856, 333, 334, 335, 336, 857, 337, 858,
	403, 338, 339, 340, 404, 405, 859, 860, 341, 861,
	862, 863, 864, 342, 343, 344, 345, 346, 778, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1231, 184, 185, 784, 0, 186, 785,
	786, 787, 788, 347, 789, 790, 791, 792, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 793, 191,
	354, 355, 192, 193, 794, 795, 356, 357, 358, 796,
	194, 359, 797, 783, 798, 195, 196, 197, 0, 199,
	200, 201, 198, 799, 202, 0, 203, 204, 800, 707,
	205, 206, 207, 801, 802, 804, 803, 805, 806, 807,
	208, 209, 413, 210, 360, 211, 361, 362, 808, 212,
	809, 213, 810, 214, 811, 812, 215, 216, 813, 217,
	814, 0, 815, 363, 218, 220, 219, 221, 364, 365,
	816, 708, 817, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 818, 225, 819, 820, 709, 821,
	226, 369, 822, 370, 823, 0, 227, 228, 229, 230,
	371, 372, 711, 824, 373, 234, 825, 231, 826, 710,
	232, 374, 233, 375, 376, 377, 378, 379, 827, 380,
	828, 712, 235, 236, 237, 713, 381, 382, 238, 239,
	240, 829, 242, 241, 830, 383, 714, 243, 244, 715,
	831, 245, 246, 832, 833, 247, 0, 248, 716, 249,
	250, 252, 384, 251, 717, 253, 254, 256, 255, 834,
	835, 836, 385, 257, 386, 258, 259, 837, 260, 838,
	839, 261, 840, 841, 262, 387, 718, 263, 719, 388,
	264, 265, 266, 267, 268, 842, 269, 389, 270, 390,
	271, 843, 272, 273, 274, 275, 276, 391, 277, 278,
	844, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 845, 291, 720, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 846, 304, 393,
	303, 305, 306, 847, 307, 295, 296, 308, 721, 309,
	394, 395, 310, 848, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 849, 318, 850, 319, 320,
	321, 322, 323, 324, 325, 326, 851, 398, 399, 400,
	852, 853, 327, 328, 401, 402, 854, 329, 330, 331,
	332, 855, 856, 333, 334, 335, 336, 857, 337, 858,
	403, 338, 339, 340, 404, 405, 859, 860, 341, 861,
	862, 863, 864, 342, 343, 344, 345, 346, 1515, 0,
	645, 634, 635, 632, 633, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 1512, 0,
	186, 0, 0, 0, 0, 662, 627, 0, 0, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 1513, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 1511, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 645, 634, 635, 632, 633, 624, 0, 612, 0,
	0, 0, 0, 610, 611, 1514, 0, 184, 185, 0,
	0, 186, 620, 1509, 0, 0, 662, 627, 623, 0,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 608, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	140, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	142, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 932, 701, 0,
	0, 341, 0, 0, 0, 134, 342, 343, 344, 345,
	346, 614, 135, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 0, 0,
	0, 0, 0, 1117, 0, 0, 0, 0, 596, 623,
	645, 634, 635, 632, 633, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 662, 627, 0, 0, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 140,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 142,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 932, 701, 0, 0,
	341, 0, 0, 0, 134, 342, 343, 344, 345, 346,
	614, 135, 0, 0, 0, 0, 0, 0, 612, 0,
	0, 0, 0, 610, 611, 645, 634, 635, 632, 633,
	624, 0, 1117, 0, 0, 0, 0, 0, 623, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	662, 627, 0, 0, 0, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 140, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 142, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 932, 701, 0, 0, 341, 0, 0, 0, 134,
	342, 343, 344, 345, 346, 614, 135, 0, 0, 0,
	0, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	645, 634, 635, 632, 633, 624, 0, 1117, 0, 0,
	0, 0, 0, 623, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 662, 627, 0, 0, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	1569, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 1574,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 1570, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 1571, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 0, 0, 0, 0, 0, 0, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 0, 0, 604, 623, 645,
	634, 635, 632, 633, 624, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 662, 627, 0, 0, 0, 187,
	188, 189, 348, 677, 350, 678, 190, 679, 680, 0,
	191, 354, 355, 192, 193, 630, 661, 681, 682, 358,
	0, 194, 673, 0, 653, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 654, 655, 657, 0, 656,
	658, 208, 209, 413, 210, 683, 211, 684, 685, 608,
	212, 0, 213, 0, 214, 0, 0, 676, 216, 0,
	217, 0, 0, 0, 618, 218, 220, 219, 221, 663,
	664, 641, 708, 0, 0, 0, 0, 0, 222, 223,
	686, 687, 688, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 674, 0, 370, 0, 0, 227, 228, 229,
	230, 670, 672, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 689, 233, 690, 691, 692, 693, 694, 0,
	652, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 675, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	613, 0, 642, 671, 257, 695, 258, 259, 0, 260,
	606, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	665, 264, 265, 266, 267, 268, 0, 269, 666, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 696, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	619, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 659, 307, 295, 296, 308, 721,
	309, 697, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 698, 314, 315, 667, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 699,
	700, 0, 0, 327, 328, 668, 669, 640, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 660, 337,
	0, 403, 338, 339, 340, 404, 701, 0, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 614,
	645, 634, 635, 632, 633, 624, 0, 612, 0, 0,
	0, 0, 610, 611, 0, 0, 184, 185, 0, 0,
	186, 620, 0, 0, 0, 662, 627, 623, 0, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 2192, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 645, 634, 635, 632, 633, 624, 0, 612, 0,
	0, 0, 0, 610, 611, 1178, 0, 184, 185, 0,
	0, 186, 620, 0, 0, 0, 662, 627, 623, 0,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 229, 230, 670, 672, 711, 0, 373, 234, 1419,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 1418, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 645, 634, 635, 632, 633, 624, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 184, 185,
	0, 0, 186, 620, 0, 0, 0, 662, 627, 623,
	0, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 608, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 606, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 645, 634, 635, 632, 633, 624, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 0, 184,
	185, 0, 0, 186, 620, 0, 0, 0, 662, 627,
	623, 0, 0, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 2596, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 2597, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 645, 634, 635, 632, 633, 624,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 0,
	184, 185, 0, 0, 186, 620, 0, 0, 0, 662,
	627, 623, 0, 0, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 608, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 645, 634, 635, 632, 633,
	624, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	0, 184, 185, 0, 0, 186, 620, 0, 0, 0,
	662, 627, 623, 0, 0, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 2045, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 645, 634, 635, 632,
	633, 624, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 0, 184, 185, 0, 0, 186, 620, 0, 0,
	0, 662, 627, 623, 0, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 645, 634, 635,
	632, 633, 624, 0, 612, 0, 0, 0, 0, 610,
	611, 1178, 0, 184, 185, 0, 0, 186, 620, 0,
	0, 0, 662, 627, 623, 0, 0, 187, 188, 189,
	348, 677, 350, 678, 190, 679, 680, 0, 191, 354,
	355, 192, 193, 630, 661, 681, 682, 358, 0, 194,
	673, 0, 653, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 654, 655, 657, 0, 656, 658, 208,
	209, 413, 210, 683, 211, 684, 685, 0, 212, 0,
	213, 0, 214, 0, 0, 676, 216, 0, 217, 0,
	0, 0, 618, 218, 220, 219, 221, 663, 664, 641,
	708, 0, 0, 0, 0, 0, 222, 223, 686, 687,
	688, 0, 224, 0, 225, 0, 1574, 709, 0, 226,
	674, 0, 370, 0, 0, 227, 228, 229, 230, 670,
	672, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	689, 233, 690, 691, 692, 693, 694, 0, 652, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 675, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 613, 0,
	642, 671, 257, 695, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 665, 264,
	265, 266, 267, 268, 0, 269, 666, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 696, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 619, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 659, 307, 295, 296, 308, 721, 309, 697,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	698, 314, 315, 667, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 699, 700, 0,
	0, 327, 328, 668, 669, 640, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 660, 337, 0, 403,
	338, 339, 340, 404, 701, 0, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 614, 0, 0,
	0, 0, 0, 0, 0, 612, 0, 0, 0, 0,
	610, 611, 0, 0, 0, 0, 0, 0, 0, 620,
	0, 0, 0, 0, 1619, 623, 645, 634, 635, 632,
	633, 624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 662, 627, 0, 0, 0, 187, 188, 189, 348,
	677, 350, 678, 190, 679, 680, 0, 191, 354, 355,
	192, 193, 630, 661, 681, 682, 358, 0, 194, 673,
	0, 653, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 707, 205, 206,
	207, 0, 654, 655, 657, 0, 656, 658, 208, 209,
	413, 210, 683, 211, 684, 685, 0, 212, 0, 213,
	0, 214, 0, 0, 676, 216, 0, 217, 0, 0,
	0, 618, 218, 220, 219, 221, 663, 664, 641, 708,
	0, 0, 0, 0, 0, 222, 223, 686, 687, 688,
	0, 224, 0, 225, 0, 0, 709, 0, 226, 674,
	0, 370, 0, 0, 227, 228, 229, 230, 670, 672,
	711, 0, 373, 234, 0, 231, 0, 710, 232, 689,
	233, 690, 691, 692, 693, 694, 0, 652, 0, 712,
	235, 236, 237, 713, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 675, 714, 243, 244, 715, 0, 245,
	246, 0, 0, 247, 0, 248, 716, 249, 250, 252,
	384, 251, 717, 253, 254, 256, 255, 613, 0, 642,
	671, 257, 695, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 718, 263, 719, 665, 264, 265,
	266, 267, 268, 0, 269, 666, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 696, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 720, 292, 293, 619, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 659, 307, 295, 296, 308, 721, 309, 697, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 698,
	314, 315, 667, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 699, 700, 0, 0,
	327, 328, 668, 669, 640, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 660, 337, 0, 403, 338,
	339, 340, 404, 701, 0, 0, 341, 0, 0, 0,
	0, 342, 343, 344, 345, 346, 614, 0, 0, 0,
	0, 0, 0, 0, 612, 0, 0, 0, 0, 610,
	611, 0, 0, 0, 0, 0, 0, 0, 620, 0,
	0, 0, 0, 1583, 623, 645, 634, 635, 632, 633,
	624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	662, 627, 0, 0, 0, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 630, 661, 681, 682, 358, 0, 194, 673, 0,
	653, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 654, 655, 657, 0, 656, 658, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	618, 218, 220, 219, 221, 663, 664, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 674, 0,
	370, 0, 0, 227, 228, 229, 230, 670, 672, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 675, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 613, 0, 642, 671,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 665, 264, 265, 266,
	267, 268, 0, 269, 666, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 619, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	659, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 667, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 668, 669, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 660, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 614, 0, 0, 0, 0,
	0, 0, 0, 612, 0, 0, 0, 0, 610, 611,
	0, 0, 0, 0, 0, 0, 0, 620, 0, 0,
	0, 0, 1581, 623, 645, 634, 635, 632, 633, 624,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 662,
	627, 0, 0, 0, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 614, 0, 0, 0, 0, 0,
	0, 0, 612, 0, 0, 0, 0, 610, 611, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 0,
	0, 1565, 623, 645, 634, 635, 632, 633, 624, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 662, 627,
	0, 0, 0, 187, 188, 189, 348, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 0, 0, 0, 0, 0, 0,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 0,
	0, 0, 0, 0, 0, 620, 0, 0, 0, 0,
	1553, 623, 645, 634, 635, 632, 633, 624, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 662, 627, 0,
	0, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 0, 0, 0, 0, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 0, 0, 1551,
	623, 1543, 634, 635, 632, 633, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 662, 627, 0, 0,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 1546, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	1547, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 1548, 1545, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 1549,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 1544,
	346, 614, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 0, 0, 1540, 623,
	1543, 634, 635, 632, 633, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 662, 627, 0, 0, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 1546, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 1547,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 1548, 1545, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 1549, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 1544, 346,
	614, 645, 634, 635, 632, 633, 624, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 0, 184, 185, 0,
	0, 186, 620, 0, 0, 0, 662, 627, 623, 0,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 645, 634, 635, 632, 633, 624, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 184, 185,
	1406, 1121, 186, 620, 0, 0, 0, 662, 627, 623,
	0, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 0, 0, 0, 0, 0, 0, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 0, 0,
	0, 0, 0, 0, 620, 0, 0, 0, 0, 876,
	623, 645, 634, 635, 632, 633, 624, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 662, 627, 0, 0,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 207, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 0, 0, 0, 0, 0, 0, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 0, 0,
	0, 0, 0, 620, 0, 0, 0, 0, 874, 623,
	645, 634, 635, 632, 633, 624, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 662, 627, 0, 0, 0,
	187, 188, 189, 348, 677, 350, 678, 190, 679, 680,
	0, 191, 354, 355, 192, 193, 630, 661, 681, 682,
	358, 0, 194, 673, 0, 653, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 707, 205, 206, 207, 0, 654, 655, 657, 0,
	656, 658, 208, 209, 413, 210, 683, 211, 684, 685,
	0, 212, 0, 213, 0, 214, 0, 0, 676, 216,
	0, 217, 0, 0, 0, 618, 218, 220, 219, 221,
	663, 664, 641, 708, 0, 0, 0, 0, 0, 222,
	223, 686, 687, 688, 0, 224, 0, 225, 0, 0,
	709, 0, 226, 674, 0, 370, 0, 0, 227, 228,
	229, 230, 670, 672, 711, 0, 373, 234, 0, 231,
	0, 710, 232, 689, 233, 690, 691, 692, 693, 694,
	0, 652, 0, 712, 235, 236, 237, 713, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 675, 714, 243,
	244, 715, 0, 245, 246, 0, 0, 247, 0, 248,
	716, 249, 250, 252, 384, 251, 717, 253, 254, 256,
	255, 613, 0, 642, 671, 257, 695, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 718, 263,
	719, 665, 264, 265, 266, 267, 268, 0, 269, 666,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 696,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 720, 292,
	293, 619, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 659, 307, 295, 296, 308,
	721, 309, 697, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 698, 314, 315, 667, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	699, 700, 0, 0, 327, 328, 668, 669, 640, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 660,
	337, 0, 403, 338, 339, 340, 404, 701, 0, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	614, 645, 634, 635, 632, 633, 624, 0, 612, 0,
	0, 0, 0, 610, 611, 0, 0, 184, 185, 0,
	0, 186, 620, 0, 0, 0, 662, 627, 623, 0,
	0, 187, 188, 189, 348, 677, 350, 678, 190, 679,
	680, 0, 191, 354, 355, 192, 193, 630, 661, 681,
	682, 358, 0, 194, 673, 0, 653, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 707, 205, 206, 2513, 0, 654, 655, 657,
	0, 656, 658, 208, 209, 413, 210, 683, 211, 684,
	685, 0, 212, 0, 213, 0, 214, 0, 0, 676,
	216, 0, 217, 0, 0, 0, 618, 218, 220, 219,
	221, 663, 664, 641, 708, 0, 0, 0, 0, 0,
	222, 223, 686, 687, 688, 0, 224, 0, 225, 0,
	0, 709, 0, 226, 674, 0, 370, 0, 0, 227,
	228, 229, 230, 670, 672, 711, 0, 373, 234, 0,
	231, 0, 710, 232, 689, 233, 690, 691, 692, 693,
	694, 0, 652, 0, 712, 235, 236, 237, 713, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 675, 714,
	243, 244, 715, 0, 245, 246, 0, 0, 247, 0,
	248, 716, 249, 250, 252, 384, 251, 717, 253, 254,
	256, 255, 613, 0, 642, 671, 257, 695, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 718,
	263, 719, 665, 264, 265, 266, 267, 268, 0, 269,
	666, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	696, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 720,
	292, 293, 619, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 659, 307, 295, 296,
	308, 721, 309, 697, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 698, 314, 315, 667, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 699, 700, 0, 0, 327, 328, 668, 669, 640,
	329, 330, 2512, 332, 0, 0, 333, 334, 335, 336,
	660, 337, 0, 403, 338, 339, 340, 404, 701, 0,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 614, 645, 634, 635, 632, 633, 624, 0, 612,
	0, 0, 0, 0, 610, 611, 0, 0, 184, 185,
	0, 0, 186, 620, 0, 0, 0, 662, 627, 623,
	0, 0, 187, 188, 189, 348, 677, 350, 678, 190,
	679, 680, 0, 191, 354, 355, 192, 193, 630, 661,
	681, 682, 358, 0, 194, 673, 0, 653, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 707, 205, 206, 207, 0, 654, 655,
	657, 0, 656, 658, 208, 209, 413, 210, 683, 211,
	684, 685, 0, 212, 0, 213, 0, 214, 0, 0,
	676, 216, 0, 217, 0, 0, 0, 618, 218, 220,
	219, 221, 663, 664, 641, 708, 0, 0, 0, 0,
	0, 222, 223, 686, 687, 688, 0, 224, 0, 225,
	0, 0, 709, 0, 226, 674, 0, 370, 0, 0,
	227, 228, 229, 230, 670, 672, 711, 0, 373, 234,
	0, 231, 0, 710, 232, 689, 233, 690, 691, 692,
	693, 694, 0, 652, 0, 712, 235, 236, 237, 713,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 675,
	714, 243, 244, 715, 0, 245, 246, 0, 0, 247,
	0, 248, 716, 249, 250, 252, 384, 251, 717, 253,
	254, 256, 255, 613, 0, 642, 671, 257, 695, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	718, 263, 719, 665, 264, 265, 266, 267, 268, 0,
	269, 666, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 696, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	720, 292, 293, 619, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 659, 307, 295,
	296, 308, 721, 309, 697, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 698, 314, 315, 667, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 699, 700, 0, 0, 327, 328, 668, 669,
	640, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 660, 337, 0, 403, 338, 339, 340, 404, 701,
	0, 0, 341, 0, 0, 0, 0, 342, 343, 344,
	345, 346, 614, 645, 634, 635, 632, 633, 624, 0,
	612, 0, 0, 0, 0, 610, 611, 0, 0, 184,
	185, 0, 0, 186, 620, 0, 0, 0, 662, 627,
	623, 0, 0, 187, 188, 189, 2511, 677, 350, 678,
	190, 679, 680, 0, 191, 354, 355, 192, 193, 630,
	661, 681, 682, 358, 0, 194, 673, 0, 653, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 2513, 0, 654,
	655, 657, 0, 656, 658, 208, 209, 413, 210, 683,
	211, 684, 685, 0, 212, 0, 213, 0, 214, 0,
	0, 676, 216, 0, 217, 0, 0, 0, 618, 218,
	220, 219, 221, 663, 664, 641, 708, 0, 0, 0,
	0, 0, 222, 223, 686, 687, 688, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 674, 0, 370, 0,
	0, 227, 228, 229, 230, 670, 672, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 689, 233, 690, 691,
	692, 693, 694, 0, 652, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	675, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 613, 0, 642, 671, 257, 695,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 665, 264, 265, 266, 267, 268,
	0, 269, 666, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 696, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 619, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 659, 307,
	295, 296, 308, 721, 309, 697, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 698, 314, 315, 667,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 699, 700, 0, 0, 327, 328, 668,
	669, 640, 329, 330, 2512, 332, 0, 0, 333, 334,
	335, 336, 660, 337, 0, 403, 338, 339, 340, 404,
	701, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 614, 645, 634, 635, 632, 633, 624,
	0, 612, 0, 0, 0, 0, 610, 611, 0, 0,
	184, 185, 0, 0, 186, 620, 0, 0, 0, 662,
	627, 623, 0, 0, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 0, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 1563, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 645, 634, 635, 632, 633, 624,
	0, 0, 1561, 0, 0, 0, 0, 1559, 1560, 0,
	184, 185, 0, 0, 186, 0, 1562, 0, 0, 662,
	627, 0, 623, 0, 187, 188, 189, 348, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	0, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 0, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 1563, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 697, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 645, 634, 635, 632, 633, 624,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 1562, 0, 0, 662,
	627, 0, 623, 0, 187, 188, 189, 0, 677, 350,
	678, 190, 679, 680, 0, 191, 354, 355, 192, 193,
	630, 661, 681, 682, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 2513, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	683, 211, 684, 685, 0, 212, 0, 213, 0, 214,
	0, 0, 676, 216, 0, 217, 0, 0, 0, 618,
	218, 220, 219, 221, 663, 664, 641, 708, 0, 0,
	0, 0, 0, 222, 223, 686, 687, 688, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 229, 230, 670, 672, 0, 0,
	373, 234, 0, 231, 0, 710, 232, 689, 233, 690,
	691, 692, 693, 694, 0, 652, 0, 0, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 613, 0, 642, 671, 257,
	695, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 696, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 619, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 0, 309, 697, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 698, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 699, 700, 0, 0, 327, 328,
	668, 669, 640, 329, 330, 2512, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 701, 0, 0, 341, 0, 0, 0, 0, 342,
	343, 344, 345, 346, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 610, 611, 0,
	184, 185, 0, 0, 186, 0, 620, 0, 0, 662,
	0, 0, 623, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 661, 356, 357, 358, 0, 194, 673, 0, 653,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 707, 205, 206, 207, 0,
	654, 655, 657, 0, 656, 658, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 663, 664, 0, 708, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 709, 0, 226, 674, 0, 370,
	0, 0, 227, 228, 229, 230, 670, 672, 711, 0,
	373, 234, 0, 231, 0, 710, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 712, 235, 236,
	237, 713, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 675, 714, 243, 244, 715, 0, 245, 246, 0,
	0, 247, 0, 248, 716, 249, 250, 252, 384, 251,
	717, 253, 254, 256, 255, 0, 0, 0, 671, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 718, 263, 719, 665, 264, 265, 266, 267,
	268, 0, 269, 666, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 720, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 659,
	307, 295, 296, 308, 721, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	667, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	668, 669, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 660, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 0, 341, 596, 0, 181, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 2144, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 761,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 140, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 142, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 932, 405, 0, 0, 341, 0, 0,
	181, 134, 342, 343, 344, 345, 346, 0, 135, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 755, 0, 1200,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 761, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 140,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 142,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 932, 405, 0, 0,
	341, 596, 0, 181, 134, 342, 343, 344, 345, 346,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	755, 0, 1200, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 140, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 142, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 932,
	405, 0, 0, 341, 1888, 0, 181, 134, 342, 343,
	344, 345, 346, 0, 135, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 126, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 761, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 0, 341, 754, 0, 181,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 755, 0, 760, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 761, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 0, 341,
	0, 0, 181, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 755,
	0, 760, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 761, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 0, 341, 0, 0, 181, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 755, 0, 760, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 0, 341, 0, 0, 0, 181,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 1233, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 0, 341,
	0, 0, 181, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 1704, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 0, 341, 0, 0, 181, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 2060, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 645, 634, 635, 632, 633,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 1203, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 677,
	350, 678, 190, 679, 680, 0, 191, 354, 355, 192,
	193, 0, 0, 681, 682, 358, 0, 194, 359, 0,
	783, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 707, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 683, 211, 684, 685, 0, 212, 0, 213, 0,
	214, 0, 0, 676, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 641, 708, 0,
	0, 0, 0, 0, 222, 223, 686, 687, 688, 0,
	224, 0, 225, 0, 0, 709, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 711,
	0, 373, 234, 0, 231, 0, 710, 232, 689, 233,
	690, 691, 692, 693, 694, 0, 652, 0, 712, 235,
	236, 237, 713, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 714, 243, 244, 715, 0, 245, 246,
	0, 0, 247, 0, 248, 716, 249, 250, 252, 384,
	251, 717, 253, 254, 256, 255, 0, 0, 642, 385,
	257, 695, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 718, 263, 719, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 696, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 720, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 721, 309, 697, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 698, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 699, 700, 0, 0, 327,
	328, 401, 402, 640, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 701, 0, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 982, 0, 928, 986, 0,
	0, 0, 984, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 783, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	708, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 499, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 177, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 176, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 174, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 180, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 177, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 176, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 928, 986, 341,
	0, 0, 984, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 180, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 783, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 707, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	708, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 709, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 711, 0, 373, 234, 0, 231, 0, 710, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	712, 235, 236, 237, 713, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 714, 243, 244, 715, 0,
	245, 246, 0, 0, 247, 0, 248, 716, 249, 250,
	252, 384, 251, 717, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 718, 263, 719, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 720, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 721, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 177,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 176, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 928, 986, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	180, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 783, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 707, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 708, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 709, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 711, 0, 373,
	234, 0, 231, 0, 710, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 712, 235, 236, 237,
	713, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 714, 243, 244, 715, 0, 245, 246, 0, 0,
	247, 0, 248, 716, 249, 250, 252, 384, 251, 717,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 718, 263, 719, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 720, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 721, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 928,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 180, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 783, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	707, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 708, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 709,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 711, 0, 373, 234, 0, 231, 0,
	710, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 712, 235, 236, 237, 713, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 714, 243, 244,
	715, 0, 245, 246, 0, 0, 247, 0, 248, 716,
	249, 250, 252, 384, 251, 717, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 718, 263, 719,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 720, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 721,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 1639, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 1637, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	1681, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 1642, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 1679, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	1641, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 1680, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 1639, 194, 359, 0,
	0, 1634, 195, 196, 197, 0, 199, 200, 201, 198,
	1637, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 1642, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 1633, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 1641, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 1640,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 903, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 761, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 767, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 769,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 761,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 763, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	765, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	761, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 430, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 429, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 428, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 1622, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 2210, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 2210, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 2207, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 761, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	1391, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 1389, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 1371,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	525, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 961, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 371, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 527, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 522, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 1247, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 1246, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 525, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 961, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 527,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 522, 399, 400, 0, 0, 327, 962,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 525, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 516, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	527, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 945, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 522, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 921, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 920, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	298, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 918, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 917,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 914, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	913, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 911, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 910, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 907, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 906, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 181, 0,
	341, 0, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 184, 185, 895, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 893, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 892, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 0, 889, 341,
	181, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 0, 0, 0, 184, 185, 0, 0,
	186, 0, 0, 0, 0, 347, 0, 0, 0, 0,
	187, 188, 189, 348, 349, 350, 351, 190, 352, 353,
	0, 191, 354, 355, 192, 193, 0, 0, 356, 357,
	358, 0, 194, 359, 0, 0, 0, 195, 196, 197,
	0, 199, 200, 201, 198, 0, 202, 0, 203, 204,
	0, 0, 205, 206, 207, 0, 0, 0, 0, 0,
	0, 0, 208, 209, 413, 210, 360, 211, 361, 362,
	0, 212, 0, 213, 0, 214, 0, 0, 215, 216,
	0, 217, 0, 0, 0, 363, 218, 220, 219, 221,
	364, 365, 0, 0, 0, 0, 0, 0, 0, 222,
	223, 366, 367, 368, 0, 224, 0, 225, 0, 0,
	0, 0, 226, 369, 0, 370, 0, 0, 227, 228,
	229, 230, 371, 372, 0, 0, 373, 234, 0, 231,
	0, 0, 232, 374, 233, 375, 376, 377, 378, 379,
	0, 380, 0, 0, 235, 236, 237, 0, 381, 382,
	238, 239, 240, 0, 242, 241, 0, 383, 0, 243,
	244, 0, 0, 245, 246, 0, 0, 247, 0, 248,
	0, 249, 250, 252, 384, 251, 0, 253, 254, 256,
	255, 0, 0, 0, 385, 257, 386, 258, 259, 0,
	260, 0, 0, 261, 0, 0, 262, 387, 0, 263,
	0, 388, 264, 265, 266, 267, 268, 0, 269, 389,
	270, 390, 271, 0, 272, 273, 274, 275, 276, 391,
	277, 278, 0, 279, 280, 281, 282, 283, 0, 285,
	286, 284, 287, 288, 289, 290, 0, 291, 0, 292,
	293, 392, 294, 0, 298, 299, 300, 301, 302, 0,
	304, 393, 303, 305, 306, 0, 307, 295, 296, 308,
	0, 309, 394, 395, 310, 0, 0, 317, 311, 312,
	297, 313, 316, 396, 314, 315, 397, 0, 318, 0,
	319, 320, 321, 322, 323, 324, 325, 326, 0, 398,
	399, 400, 0, 0, 327, 328, 401, 402, 0, 329,
	330, 331, 332, 0, 0, 333, 334, 335, 336, 0,
	337, 0, 403, 338, 339, 340, 404, 405, 0, 887,
	341, 181, 0, 0, 0, 342, 343, 344, 345, 346,
	0, 0, 0, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 229, 230, 371, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 0,
	883, 341, 181, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 0, 0, 0, 184, 185,
	0, 0, 186, 0, 0, 0, 0, 347, 0, 0,
	0, 0, 187, 188, 189, 348, 349, 350, 351, 190,
	352, 353, 0, 191, 354, 355, 192, 193, 0, 0,
	356, 357, 358, 0, 194, 359, 0, 0, 0, 195,
	196, 197, 0, 199, 200, 201, 198, 0, 202, 0,
	203, 204, 0, 0, 205, 206, 207, 0, 0, 0,
	0, 0, 0, 0, 208, 209, 413, 210, 360, 211,
	361, 362, 0, 212, 0, 213, 0, 214, 0, 0,
	215, 216, 0, 217, 0, 0, 0, 363, 218, 220,
	219, 221, 364, 365, 0, 0, 0, 0, 0, 0,
	0, 222, 223, 366, 367, 368, 0, 224, 0, 225,
	0, 0, 0, 0, 226, 369, 0, 370, 0, 0,
	227, 228, 229, 230, 885, 372, 0, 0, 373, 234,
	0, 231, 0, 0, 232, 374, 233, 375, 376, 377,
	378, 379, 0, 380, 0, 0, 235, 236, 237, 0,
	381, 382, 238, 239, 240, 0, 242, 241, 0, 383,
	0, 243, 244, 0, 0, 245, 246, 0, 0, 247,
	0, 248, 0, 249, 250, 252, 384, 251, 0, 253,
	254, 256, 255, 0, 0, 0, 385, 257, 386, 258,
	259, 0, 260, 0, 0, 261, 0, 0, 262, 387,
	0, 263, 0, 388, 264, 265, 266, 267, 268, 0,
	269, 389, 270, 390, 271, 0, 272, 273, 274, 275,
	276, 391, 277, 278, 0, 279, 280, 281, 282, 283,
	0, 285, 286, 284, 287, 288, 289, 290, 0, 291,
	0, 292, 293, 392, 294, 0, 298, 299, 300, 301,
	302, 0, 304, 393, 303, 305, 306, 0, 307, 295,
	296, 308, 0, 309, 394, 395, 310, 0, 0, 317,
	311, 312, 297, 313, 316, 396, 314, 315, 397, 0,
	318, 0, 319, 320, 321, 322, 323, 324, 325, 326,
	0, 398, 399, 400, 0, 0, 327, 328, 401, 402,
	0, 329, 330, 331, 332, 0, 0, 333, 334, 335,
	336, 0, 337, 0, 403, 338, 339, 340, 404, 405,
	0, 773, 341, 181, 0, 0, 0, 342, 343, 344,
	345, 346, 0, 0, 0, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 775, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 771, 341, 181, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 0, 0, 0,
	184, 185, 0, 0, 186, 0, 0, 0, 0, 347,
	0, 0, 0, 0, 187, 188, 189, 348, 349, 350,
	351, 190, 352, 353, 0, 191, 354, 355, 192, 193,
	0, 0, 356, 357, 358, 0, 194, 359, 0, 0,
	0, 195, 196, 197, 0, 199, 200, 201, 198, 0,
	202, 0, 203, 204, 0, 0, 205, 206, 207, 0,
	0, 0, 0, 0, 0, 0, 208, 209, 413, 210,
	360, 211, 361, 362, 0, 212, 0, 213, 0, 214,
	0, 0, 215, 216, 0, 217, 0, 0, 0, 363,
	218, 220, 219, 221, 364, 365, 0, 0, 0, 0,
	0, 0, 0, 222, 223, 366, 367, 368, 0, 224,
	0, 225, 0, 0, 0, 0, 226, 369, 0, 370,
	0, 0, 227, 228, 229, 230, 371, 372, 0, 0,
	373, 234, 0, 231, 0, 0, 232, 374, 233, 375,
	376, 377, 378, 379, 0, 380, 0, 0, 235, 236,
	237, 0, 381, 382, 238, 239, 240, 0, 242, 241,
	0, 383, 0, 243, 244, 0, 0, 245, 246, 0,
	0, 247, 0, 248, 0, 249, 250, 252, 384, 251,
	0, 253, 254, 256, 255, 0, 0, 0, 385, 257,
	386, 258, 259, 0, 260, 0, 0, 261, 0, 0,
	262, 387, 0, 263, 0, 388, 264, 265, 266, 267,
	268, 0, 269, 389, 270, 390, 271, 0, 272, 273,
	274, 275, 276, 391, 277, 278, 0, 279, 280, 281,
	282, 283, 0, 285, 286, 284, 287, 288, 289, 290,
	0, 291, 0, 292, 293, 392, 294, 0, 298, 299,
	300, 301, 302, 0, 304, 393, 303, 305, 306, 0,
	307, 295, 296, 308, 0, 309, 394, 395, 310, 0,
	0, 317, 311, 312, 297, 313, 316, 396, 314, 315,
	397, 0, 318, 0, 319, 320, 321, 322, 323, 324,
	325, 326, 0, 398, 399, 400, 0, 0, 327, 328,
	401, 402, 0, 329, 330, 331, 332, 0, 0, 333,
	334, 335, 336, 0, 337, 0, 403, 338, 339, 340,
	404, 405, 0, 525, 341, 181, 0, 0, 0, 342,
	343, 344, 345, 346, 0, 0, 0, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 516, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 515,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	527, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 517, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 518, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 522, 399, 400, 0, 0, 327,
	520, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 0, 507, 341, 181, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 0,
	0, 0, 184, 185, 0, 0, 186, 0, 0, 0,
	0, 347, 0, 0, 0, 0, 187, 188, 189, 348,
	349, 350, 351, 190, 352, 353, 0, 191, 354, 355,
	192, 193, 0, 0, 356, 357, 358, 0, 194, 359,
	0, 0, 0, 195, 196, 197, 0, 199, 200, 201,
	198, 0, 202, 0, 203, 204, 0, 0, 205, 206,
	207, 0, 0, 0, 0, 0, 0, 0, 208, 209,
	413, 210, 360, 211, 361, 362, 0, 212, 0, 213,
	0, 214, 0, 0, 215, 216, 0, 217, 0, 0,
	0, 363, 218, 220, 219, 221, 364, 365, 0, 0,
	0, 0, 0, 0, 0, 222, 223, 366, 367, 368,
	0, 224, 0, 225, 0, 0, 0, 0, 226, 369,
	0, 370, 0, 0, 227, 228, 229, 230, 371, 372,
	0, 0, 373, 234, 0, 231, 0, 0, 232, 374,
	233, 375, 376, 377, 378, 379, 0, 380, 0, 0,
	235, 236, 237, 0, 381, 382, 238, 239, 240, 0,
	242, 241, 0, 383, 0, 243, 244, 0, 0, 245,
	246, 0, 0, 247, 0, 248, 0, 249, 250, 252,
	384, 251, 0, 253, 254, 256, 255, 0, 0, 0,
	385, 257, 386, 258, 259, 0, 260, 0, 0, 261,
	0, 0, 262, 387, 0, 263, 0, 388, 264, 265,
	266, 267, 268, 0, 269, 389, 270, 390, 271, 0,
	272, 273, 274, 275, 276, 391, 277, 278, 0, 279,
	280, 281, 282, 283, 0, 285, 286, 284, 287, 288,
	289, 290, 0, 291, 0, 292, 293, 392, 294, 0,
	508, 299, 300, 301, 302, 0, 304, 393, 303, 305,
	306, 0, 307, 295, 296, 308, 0, 309, 394, 395,
	310, 0, 0, 317, 311, 312, 297, 313, 316, 396,
	314, 315, 397, 0, 318, 0, 319, 320, 321, 322,
	323, 324, 325, 326, 0, 398, 399, 400, 0, 0,
	327, 328, 401, 402, 0, 329, 330, 331, 332, 0,
	0, 333, 334, 335, 336, 0, 337, 0, 403, 338,
	339, 340, 404, 405, 0, 505, 341, 181, 0, 0,
	0, 342, 343, 344, 345, 346, 0, 0, 0, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 0, 497, 341, 181, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 0, 0, 0, 184, 185, 0, 0, 186, 0,
	0, 0, 0, 347, 0, 0, 0, 0, 187, 188,
	189, 348, 349, 350, 351, 190, 352, 353, 0, 191,
	354, 355, 192, 193, 0, 0, 356, 357, 358, 0,
	194, 359, 0, 0, 0, 195, 196, 197, 0, 199,
	200, 201, 198, 0, 202, 0, 203, 204, 0, 0,
	205, 206, 207, 0, 0, 0, 0, 0, 0, 0,
	208, 209, 413, 210, 360, 211, 361, 362, 0, 212,
	0, 213, 0, 214, 0, 0, 215, 216, 0, 217,
	0, 0, 0, 363, 218, 220, 219, 221, 364, 365,
	0, 0, 0, 0, 0, 0, 0, 222, 223, 366,
	367, 368, 0, 224, 0, 225, 0, 0, 0, 0,
	226, 369, 0, 370, 0, 0, 227, 228, 229, 230,
	371, 372, 0, 0, 373, 234, 0, 231, 0, 0,
	232, 374, 233, 375, 376, 377, 378, 379, 0, 380,
	0, 0, 235, 236, 237, 0, 381, 382, 238, 239,
	240, 0, 242, 241, 0, 383, 0, 243, 244, 0,
	0, 245, 246, 0, 0, 247, 0, 248, 0, 249,
	250, 252, 384, 251, 0, 253, 254, 256, 255, 0,
	0, 0, 385, 257, 386, 258, 259, 0, 260, 0,
	0, 261, 0, 0, 262, 387, 0, 263, 0, 388,
	264, 265, 266, 267, 268, 0, 269, 389, 270, 390,
	271, 0, 272, 273, 274, 275, 276, 391, 277, 278,
	0, 279, 280, 281, 282, 283, 0, 285, 286, 284,
	287, 288, 289, 290, 0, 291, 0, 292, 293, 392,
	294, 0, 298, 299, 300, 301, 302, 0, 304, 393,
	303, 305, 306, 0, 307, 295, 296, 308, 0, 309,
	394, 395, 310, 0, 0, 317, 311, 312, 297, 313,
	316, 396, 314, 315, 397, 0, 318, 0, 319, 320,
	321, 322, 323, 324, 325, 326, 0, 398, 399, 400,
	0, 0, 327, 328, 401, 402, 0, 329, 330, 331,
	332, 0, 0, 333, 334, 335, 336, 0, 337, 0,
	403, 338, 339, 340, 404, 405, 0, 453, 341, 181,
	0, 0, 0, 342, 343, 344, 345, 346, 0, 0,
	0, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 298, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 0, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 307, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 1935, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 277, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 1933, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 266, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	275, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 294, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 181, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 0, 0, 0, 0, 184, 185, 0,
	0, 186, 0, 0, 0, 0, 347, 0, 0, 0,
	0, 187, 188, 189, 348, 349, 350, 351, 190, 352,
	353, 0, 191, 354, 355, 192, 193, 0, 0, 356,
	357, 358, 0, 194, 359, 0, 0, 0, 195, 196,
	197, 0, 199, 200, 201, 198, 0, 202, 0, 203,
	204, 0, 0, 205, 206, 207, 0, 0, 0, 0,
	0, 0, 0, 208, 209, 413, 210, 360, 211, 361,
	362, 0, 212, 0, 213, 0, 214, 0, 0, 215,
	216, 0, 217, 0, 0, 0, 363, 218, 220, 219,
	221, 364, 365, 0, 0, 0, 0, 0, 0, 0,
	222, 223, 366, 367, 368, 0, 224, 0, 225, 0,
	0, 0, 0, 226, 369, 0, 370, 0, 0, 227,
	228, 229, 230, 1922, 372, 0, 0, 373, 234, 0,
	231, 0, 0, 232, 374, 233, 375, 376, 377, 378,
	379, 0, 380, 0, 0, 235, 236, 237, 0, 381,
	382, 238, 239, 240, 0, 242, 241, 0, 383, 0,
	243, 244, 0, 0, 245, 246, 0, 0, 247, 0,
	248, 0, 249, 250, 252, 384, 251, 0, 253, 254,
	256, 255, 0, 0, 0, 385, 257, 386, 258, 259,
	0, 260, 0, 0, 261, 0, 0, 262, 387, 0,
	263, 0, 388, 264, 265, 266, 267, 268, 0, 269,
	389, 270, 390, 271, 0, 272, 273, 274, 275, 276,
	391, 277, 278, 0, 279, 280, 281, 282, 283, 0,
	285, 286, 284, 287, 288, 289, 290, 0, 291, 0,
	292, 293, 392, 294, 0, 298, 299, 300, 301, 302,
	0, 304, 393, 303, 305, 306, 0, 307, 295, 296,
	308, 0, 309, 394, 395, 310, 0, 0, 317, 311,
	312, 297, 313, 316, 396, 314, 315, 397, 0, 318,
	0, 319, 320, 321, 322, 323, 324, 325, 326, 0,
	398, 399, 400, 0, 0, 327, 328, 401, 402, 0,
	329, 330, 331, 332, 0, 0, 333, 334, 335, 336,
	0, 337, 0, 403, 338, 339, 340, 404, 405, 181,
	0, 341, 0, 0, 0, 0, 342, 343, 344, 345,
	346, 0, 0, 0, 0, 184, 185, 0, 0, 186,
	0, 0, 0, 0, 347, 0, 0, 0, 0, 187,
	188, 189, 348, 349, 350, 351, 190, 352, 353, 0,
	191, 354, 355, 192, 193, 0, 0, 356, 357, 358,
	0, 194, 359, 0, 0, 0, 195, 196, 197, 0,
	199, 200, 201, 198, 0, 202, 0, 203, 204, 0,
	0, 205, 206, 207, 0, 0, 0, 0, 0, 0,
	0, 208, 209, 413, 210, 360, 211, 361, 362, 0,
	212, 0, 213, 0, 214, 0, 0, 215, 216, 0,
	217, 0, 0, 0, 363, 218, 220, 219, 221, 364,
	365, 0, 0, 0, 0, 0, 0, 0, 222, 223,
	366, 367, 368, 0, 224, 0, 225, 0, 0, 0,
	0, 226, 369, 0, 370, 0, 0, 227, 228, 229,
	230, 371, 372, 0, 0, 373, 234, 0, 231, 0,
	0, 232, 374, 233, 375, 376, 377, 378, 379, 0,
	380, 0, 0, 235, 236, 237, 0, 381, 382, 238,
	239, 240, 0, 242, 241, 0, 383, 0, 243, 244,
	0, 0, 245, 246, 0, 0, 247, 0, 248, 0,
	249, 250, 252, 384, 251, 0, 253, 254, 256, 255,
	0, 0, 0, 385, 257, 386, 258, 259, 0, 260,
	0, 0, 261, 0, 0, 262, 387, 0, 263, 0,
	388, 264, 265, 266, 267, 268, 0, 269, 389, 270,
	390, 271, 0, 272, 273, 274, 275, 276, 391, 277,
	278, 0, 279, 280, 281, 282, 283, 0, 285, 286,
	284, 287, 288, 289, 290, 0, 291, 0, 292, 293,
	392, 294, 0, 508, 299, 300, 301, 302, 0, 304,
	393, 303, 305, 306, 0, 307, 295, 296, 308, 0,
	309, 394, 395, 310, 0, 0, 317, 311, 312, 297,
	313, 316, 396, 314, 315, 397, 0, 318, 0, 319,
	320, 321, 322, 323, 324, 325, 326, 0, 398, 399,
	400, 0, 0, 327, 328, 401, 402, 0, 329, 330,
	331, 332, 0, 0, 333, 334, 335, 336, 0, 337,
	0, 403, 338, 339, 340, 404, 405, 181, 0, 341,
	0, 0, 0, 0, 342, 343, 344, 345, 346, 0,
	0, 0, 0, 184, 185, 0, 0, 186, 0, 0,
	0, 0, 347, 0, 1257, 0, 0, 187, 188, 189,
	348, 349, 350, 351, 190, 352, 353, 0, 191, 354,
	355, 192, 193, 0, 0, 356, 357, 358, 0, 194,
	359, 0, 0, 0, 195, 196, 197, 0, 199, 200,
	201, 198, 0, 202, 0, 203, 204, 0, 0, 205,
	206, 207, 0, 0, 0, 0, 0, 0, 0, 208,
	209, 413, 210, 360, 211, 361, 362, 0, 212, 0,
	213, 0, 214, 0, 0, 215, 216, 0, 217, 0,
	0, 0, 363, 218, 220, 219, 221, 364, 365, 0,
	0, 0, 0, 0, 0, 0, 222, 223, 366, 367,
	368, 0, 224, 0, 225, 0, 0, 0, 0, 226,
	369, 0, 370, 0, 0, 227, 228, 229, 230, 371,
	372, 0, 0, 373, 234, 0, 231, 0, 0, 232,
	374, 233, 375, 376, 377, 378, 379, 0, 380, 0,
	0, 235, 236, 237, 0, 381, 382, 238, 239, 240,
	0, 242, 241, 0, 383, 0, 243, 244, 0, 0,
	245, 246, 0, 0, 247, 0, 248, 0, 249, 250,
	252, 384, 251, 0, 253, 254, 256, 255, 0, 0,
	0, 385, 257, 386, 258, 259, 0, 260, 0, 0,
	261, 0, 0, 262, 387, 0, 263, 0, 388, 264,
	265, 266, 267, 268, 0, 269, 389, 270, 390, 271,
	0, 272, 273, 274, 275, 276, 391, 277, 278, 0,
	279, 280, 281, 282, 283, 0, 285, 286, 284, 287,
	288, 289, 290, 0, 291, 0, 292, 293, 392, 294,
	0, 298, 299, 300, 301, 302, 0, 304, 393, 303,
	305, 306, 0, 0, 295, 296, 308, 0, 309, 394,
	395, 310, 0, 0, 317, 311, 312, 297, 313, 316,
	396, 314, 315, 397, 0, 318, 0, 319, 320, 321,
	322, 323, 324, 325, 326, 0, 398, 399, 400, 0,
	0, 327, 328, 401, 402, 0, 329, 330, 331, 332,
	0, 0, 333, 334, 335, 336, 0, 337, 0, 403,
	338, 339, 340, 404, 405, 181, 0, 341, 0, 0,
	0, 0, 342, 343, 344, 345, 346, 0, 0, 0,
	0, 184, 185, 0, 0, 186, 0, 0, 0, 0,
	347, 0, 0, 0, 0, 187, 188, 189, 348, 349,
	350, 351, 190, 352, 353, 0, 191, 354, 355, 192,
	193, 0, 0, 356, 357, 358, 0, 194, 359, 0,
	0, 0, 195, 196, 197, 0, 199, 200, 201, 198,
	0, 202, 0, 203, 204, 0, 0, 205, 206, 207,
	0, 0, 0, 0, 0, 0, 0, 208, 209, 413,
	210, 360, 211, 361, 362, 0, 212, 0, 213, 0,
	214, 0, 0, 215, 216, 0, 217, 0, 0, 0,
	363, 218, 220, 219, 221, 364, 365, 0, 0, 0,
	0, 0, 0, 0, 222, 223, 366, 367, 368, 0,
	224, 0, 225, 0, 0, 0, 0, 226, 369, 0,
	370, 0, 0, 227, 228, 229, 230, 371, 372, 0,
	0, 373, 234, 0, 231, 0, 0, 232, 374, 233,
	375, 376, 377, 378, 379, 0, 380, 0, 0, 235,
	236, 237, 0, 381, 382, 238, 239, 240, 0, 242,
	241, 0, 383, 0, 243, 244, 0, 0, 245, 246,
	0, 0, 247, 0, 248, 0, 249, 250, 252, 384,
	251, 0, 253, 254, 256, 255, 0, 0, 0, 385,
	257, 386, 258, 259, 0, 260, 0, 0, 261, 0,
	0, 262, 387, 0, 263, 0, 388, 264, 265, 266,
	267, 268, 0, 269, 389, 270, 390, 271, 0, 272,
	273, 274, 275, 276, 391, 737, 278, 0, 279, 280,
	281, 282, 283, 0, 285, 286, 284, 287, 288, 289,
	290, 0, 291, 0, 292, 293, 392, 294, 0, 298,
	299, 300, 301, 302, 0, 304, 393, 303, 305, 306,
	0, 307, 295, 296, 308, 0, 309, 394, 395, 310,
	0, 0, 317, 311, 312, 297, 313, 316, 396, 314,
	315, 397, 0, 318, 0, 319, 320, 321, 322, 323,
	324, 325, 326, 0, 398, 399, 400, 0, 0, 327,
	328, 401, 402, 0, 329, 330, 331, 332, 0, 0,
	333, 334, 335, 336, 0, 337, 0, 403, 338, 339,
	340, 404, 405, 181, 0, 341, 0, 0, 0, 0,
	342, 343, 344, 345, 346, 0, 0, 0, 0, 184,
	185, 0, 0, 186, 0, 0, 0, 0, 347, 0,
	0, 0, 0, 187, 188, 189, 348, 349, 350, 351,
	190, 352, 353, 0, 191, 354, 355, 192, 193, 0,
	0, 356, 357, 358, 0, 194, 359, 0, 0, 0,
	195, 196, 197, 0, 199, 200, 201, 198, 0, 202,
	0, 203, 204, 0, 0, 205, 206, 207, 0, 0,
	0, 0, 0, 0, 0, 208, 209, 413, 210, 360,
	211, 361, 362, 0, 212, 0, 213, 0, 214, 0,
	0, 215, 216, 0, 217, 0, 0, 0, 363, 218,
	220, 219, 221, 364, 365, 0, 0, 0, 0, 0,
	0, 0, 222, 223, 366, 367, 368, 0, 224, 0,
	225, 0, 0, 0, 0, 226, 369, 0, 370, 0,
	0, 227, 228, 229, 230, 371, 372, 0, 0, 373,
	234, 0, 231, 0, 0, 232, 374, 233, 375, 376,
	377, 378, 379, 0, 380, 0, 0, 235, 236, 237,
	0, 381, 382, 238, 239, 240, 0, 242, 241, 0,
	383, 0, 243, 244, 0, 0, 245, 246, 0, 0,
	247, 0, 248, 0, 249, 250, 252, 384, 251, 0,
	253, 254, 256, 255, 0, 0, 0, 385, 257, 386,
	258, 259, 0, 260, 0, 0, 261, 0, 0, 262,
	387, 0, 263, 0, 388, 264, 265, 0, 267, 268,
	0, 269, 389, 270, 390, 271, 0, 272, 273, 274,
	0, 276, 391, 277, 278, 0, 279, 280, 281, 282,
	283, 0, 285, 286, 284, 287, 288, 289, 290, 0,
	291, 0, 292, 293, 392, 0, 0, 298, 299, 300,
	301, 302, 0, 304, 393, 303, 305, 306, 0, 307,
	295, 296, 308, 0, 309, 394, 395, 310, 0, 0,
	317, 311, 312, 297, 313, 316, 396, 314, 315, 397,
	0, 318, 0, 319, 320, 321, 322, 323, 324, 325,
	326, 0, 398, 399, 400, 0, 0, 327, 328, 401,
	402, 0, 329, 330, 331, 332, 0, 0, 333, 334,
	335, 336, 0, 337, 0, 403, 338, 339, 340, 404,
	405, 0, 0, 341, 0, 0, 0, 0, 342, 343,
	344, 345, 346, 1054, 1055, 0, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 0, 1072, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 1057, 0, 0,
	1098, 0, 0, 0, 0, 1830, 1831, 0, 1848, 1849,
	1850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 2032, 0, 0, 1054, 1055, 1076, 1084, 1085,
	1086, 1094, 1095, 1096, 1073, 0, 0, 0, 1072, 0,
	0, 0, 1087, 0, 0, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 1845,
	0, 0, 1830, 1831, 0, 1848, 1849, 1850, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 0, 1076,
	0, 0, 1079, 1080, 1081, 1082, 1073, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1091, 1099, 0, 0, 0, 1845, 0, 0, 0,
	0, 0, 0, 1836, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 1079, 1080, 1081, 1082, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 1077, 0, 0, 0, 0,
	0, 0, 1851, 1091, 1099, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1836, 1088, 1097, 0, 0, 0, 0, 1846, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 1852, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 1851,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1846, 0, 0, 1092, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 0,
	0, 0, 1847, 0, 0, 0, 0, 1083, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1054,
	1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 1092,
	0, 0, 1072, 0, 0, 1071, 1087, 0, 0, 0,
	0, 0, 0, 1057, 0, 0, 1098, 1090, 0, 1847,
	1068, 1069, 1075, 1074, 1070, 1093, 0, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 0, 1056, 0, 0,
	0, 0, 0, 1076, 1871, 0, 0, 0, 0, 0,
	1073, 0, 1842, 1843, 1844, 0, 0, 0, 0, 1841,
	1839, 1840, 1832, 1833, 1834, 1835, 1837, 1838, 0, 1090,
	0, 0, 1068, 1069, 1075, 1074, 1070, 1093, 0, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0,
	0, 0, 0, 0, 0, 0, 1870, 0, 1079, 1080,
	1081, 1082, 0, 0, 0, 0, 0, 1062, 0, 1842,
	1843, 1844, 0, 0, 0, 0, 1841, 1839, 1840, 1832,
	1833, 1834, 1835, 1837, 1838, 0, 0, 1091, 1099, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1097, 0, 1054, 1055,
	0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0,
	0, 1072, 0, 0, 1089, 1087, 0, 0, 0, 0,
	0, 1077, 1057, 0, 0, 1098, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1056, 1088, 0, 0,
	0, 0, 1076, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 1830, 1831, 0,
	1848, 1849, 1850, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 0, 0, 1092, 0, 0, 1062, 0, 0, 1071,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 1099, 0, 0,
	0, 1845, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 0, 0, 0, 1836, 1088, 0, 0, 0,
	1822, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1054, 1055, 0, 1084, 1085,
	1086, 1094, 1095, 1096, 0, 0, 0, 0, 1072, 0,
	1083, 0, 1087, 0, 1851, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1846,
	0, 0, 1092, 1056, 0, 0, 0, 0, 1071, 1076,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086,
	1094, 1095, 1096, 0, 0, 0, 0, 1072, 0, 0,
	0, 1087, 0, 0, 1079, 1080, 1081, 1082, 1057, 0,
	0, 1098, 1090, 1062, 1847, 1068, 1069, 1075, 1074, 1070,
	1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 1056, 1091, 1099, 2482, 0, 0, 1076, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 1081, 1082, 0, 0, 0,
	0, 0, 1062, 1088, 1842, 1843, 1844, 0, 0, 0,
	0, 1841, 1839, 1840, 1832, 1833, 1834, 1835, 1837, 1838,
	0, 0, 1091, 1099, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1083, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 1092,
	0, 0, 0, 1054, 1055, 1071, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 0, 1072, 0, 0, 0,
	1087, 0, 1088, 0, 0, 0, 0, 1057, 0, 0,
	1098, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1056, 0, 0, 0, 0, 1083, 1076, 0, 0,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 1090,
	0, 1078, 1068, 1069, 1075, 1074, 1070, 1093, 0, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 1092, 0,
	0, 0, 2433, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1080, 1081, 1082, 0, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095,
	1096, 1091, 1099, 0, 0, 1072, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 1057, 0, 1090, 1098,
	1097, 1068, 1069, 1075, 1074, 1070, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 1089, 0,
	1056, 2387, 0, 0, 0, 1077, 1076, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 1083, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1091, 1099, 0, 0, 0, 0, 0, 1092, 0, 0,
	0, 0, 0, 1071, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 1077, 0, 0, 0, 0, 0,
	0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096,
	0, 0, 0, 0, 1072, 0, 0, 0, 1087, 0,
	1088, 0, 0, 0, 0, 1057, 0, 1090, 1098, 0,
	1068, 1069, 1075, 1074, 1070, 1093, 0, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0, 1056,
	2357, 0, 0, 0, 1083, 1076, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1092, 0, 0, 0,
	1054, 1055, 1071, 1084, 1085, 1086, 1094, 1095, 1096, 0,
	0, 0, 0, 1072, 0, 0, 0, 1087, 0, 0,
	1079, 1080, 1081, 1082, 1057, 0, 0, 1098, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1056, 1091,
	1099, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 1090, 0, 1097, 1068,
	1069, 1075, 1074, 1070, 1093, 0, 1067, 1065, 1066, 1058,
	1059, 1060, 1061, 1063, 1064, 0, 1089, 0, 0, 2352,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 1062, 1088,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 1099,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 0,
	0, 0, 1077, 0, 0, 1092, 0, 0, 0, 1054,
	1055, 1071, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 0, 1072, 0, 0, 0, 1087, 0, 1088, 0,
	0, 0, 0, 1057, 0, 0, 1098, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1056, 0, 0,
	0, 0, 1083, 1076, 0, 0, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 1090, 0, 1078, 1068, 1069,
	1075, 1074, 1070, 1093, 0, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 1092, 0, 0, 0, 2348, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 1080,
	1081, 1082, 0, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1054, 1055,
	0, 1084, 1085, 1086, 1094, 1095, 1096, 1091, 1099, 0,
	0, 1072, 0, 0, 0, 1087, 0, 0, 0, 0,
	0, 0, 1057, 0, 1090, 1098, 1097, 1068, 1069, 1075,
	1074, 1070, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 0, 1089, 0, 1056, 2286, 0, 0,
	0, 1077, 1076, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 1083, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1091, 1099, 0, 0,
	0, 0, 0, 1092, 0, 0, 0, 0, 0, 1071,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 0, 0, 0, 0, 0,
	1077, 0, 0, 0, 0, 0, 0, 1054, 1055, 0,
	1084, 1085, 1086, 1094, 1095, 1096, 0, 0, 0, 0,
	1072, 0, 0, 0, 1087, 0, 1088, 0, 0, 0,
	0, 1057, 0, 1090, 1098, 0, 1068, 1069, 1075, 1074,
	1070, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 0, 0, 0, 1056, 2252, 0, 0, 0,
	1083, 1076, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1092, 0, 0, 0, 1054, 1055, 1071, 1084,
	1085, 1086, 1094, 1095, 1096, 0, 0, 0, 0, 1072,
	0, 0, 0, 1087, 0, 0, 1079, 1080, 1081, 1082,
	1057, 0, 0, 1098, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1056, 1091, 1099, 0, 0, 0,
	1076, 0, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 1090, 0, 1097, 1068, 1069, 1075, 1074, 1070,
	1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 1089, 0, 0, 2251, 0, 0, 0, 1077,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1079, 1080, 1081, 1082, 0,
	0, 0, 0, 0, 1062, 1088, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1091, 1099, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 1077, 0,
	0, 1092, 0, 0, 0, 1054, 1055, 1071, 1084, 1085,
	1086, 1094, 1095, 1096, 0, 0, 0, 0, 1072, 0,
	0, 0, 1087, 0, 1088, 0, 0, 0, 0, 1057,
	0, 0, 1098, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1056, 0, 0, 0, 0, 1083, 1076,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 1090, 0, 1078, 1068, 1069, 1075, 1074, 1070, 1093,
	0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	1092, 0, 0, 0, 2216, 0, 1071, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 0, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086,
	1094, 1095, 1096, 1091, 1099, 0, 0, 1072, 0, 0,
	0, 1087, 0, 0, 0, 0, 0, 0, 1057, 0,
	1090, 1098, 1097, 1068, 1069, 1075, 1074, 1070, 1093, 0,
	1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0,
	1089, 0, 1056, 2063, 0, 0, 0, 1077, 1076, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1088, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 1081, 1082, 1083, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1091, 1099, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094,
	1095, 1096, 0, 0, 0, 0, 1072, 0, 0, 0,
	1087, 0, 1088, 0, 0, 0, 0, 1057, 0, 1090,
	1098, 0, 1068, 1069, 1075, 1074, 1070, 1093, 0, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0,
	0, 1056, 2039, 0, 0, 0, 1083, 1076, 0, 0,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1092, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1080, 1081, 1082, 0, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095,
	1096, 1091, 1099, 0, 0, 1072, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 1057, 0, 1090, 1098,
	1097, 1068, 1069, 1075, 1074, 1070, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 1089, 0,
	1056, 1501, 0, 0, 0, 1077, 1076, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 1083, 0, 0, 0, 0,
	1062, 2545, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096,
	1091, 1099, 0, 0, 1072, 0, 0, 1092, 1087, 0,
	0, 0, 0, 1071, 0, 1057, 0, 0, 1098, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 1056,
	0, 0, 0, 0, 1077, 1076, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1068, 1069, 1075, 1074, 1070, 1093, 2544, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 1792, 0,
	1079, 1080, 1081, 1082, 1083, 0, 0, 0, 0, 1062,
	0, 1862, 0, 0, 1861, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1091,
	1099, 0, 0, 0, 0, 0, 1092, 0, 0, 0,
	0, 0, 1071, 0, 0, 0, 0, 0, 1097, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 1077, 0, 0, 0, 0, 0, 0,
	1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0,
	0, 0, 0, 1072, 0, 0, 0, 1087, 0, 1088,
	0, 0, 1765, 0, 1057, 0, 1090, 1098, 0, 1068,
	1069, 1075, 1074, 1070, 1093, 0, 1067, 1065, 1066, 1058,
	1059, 1060, 1061, 1063, 1064, 0, 0, 0, 1056, 0,
	0, 0, 0, 1083, 1076, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1092, 0, 0, 1766, 0,
	0, 1071, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1079,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 1598, 0, 0, 0, 0, 0, 1054,
	1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 1091, 1099,
	0, 0, 1072, 0, 0, 0, 1087, 0, 0, 0,
	1597, 0, 0, 1057, 0, 1090, 1098, 1097, 1068, 1069,
	1075, 1074, 1070, 1093, 0, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 1089, 0, 1056, 0, 0,
	0, 0, 1077, 1076, 0, 0, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1088, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1079, 1080,
	1081, 1082, 1083, 0, 0, 0, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1054, 1055,
	0, 1084, 1085, 1086, 1094, 1095, 1096, 1091, 1099, 0,
	0, 1072, 0, 0, 1092, 1087, 0, 0, 0, 0,
	1071, 0, 1057, 0, 0, 1098, 1097, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1089, 0, 1056, 0, 0, 0,
	0, 1077, 1076, 0, 0, 0, 0, 0, 0, 1073,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1088, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 1068, 1069, 1075,
	1074, 1070, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 0, 0, 0, 0, 1079, 1080, 1081,
	1082, 1083, 0, 0, 0, 0, 1062, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1078, 1054, 1055, 0,
	1084, 1085, 1086, 1094, 1095, 1096, 1091, 1099, 0, 0,
	1072, 0, 0, 1092, 1087, 0, 0, 0, 0, 1071,
	0, 1057, 0, 0, 1098, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 0, 1056, 0, 0, 0, 0,
	1077, 1076, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, 593, 0, 0,
	0, 0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074,
	1070, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 0, 0, 0, 0, 1079, 1080, 1081, 1082,
	1083, 0, 0, 0, 0, 1062, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 1054, 1055, 0, 1084,
	1085, 1086, 1094, 1095, 1096, 1091, 1099, 0, 0, 1072,
	0, 0, 1092, 1087, 0, 0, 0, 0, 1071, 0,
	1057, 0, 0, 1098, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1089, 0, 1056, 0, 0, 0, 0, 1077,
	1076, 0, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1088, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070,
	1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063,
	1064, 0, 0, 0, 0, 1079, 1080, 1081, 1082, 1083,
	0, 0, 0, 0, 1062, 0, 0, 0, 0, 1868,
	0, 0, 0, 0, 1078, 1054, 1055, 0, 1084, 1085,
	1086, 1094, 1095, 1096, 1091, 1099, 0, 0, 1072, 0,
	0, 1092, 1087, 0, 0, 0, 1863, 1071, 0, 1057,
	0, 0, 1098, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2043,
	0, 1089, 0, 1056, 0, 0, 0, 0, 1077, 1076,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1088, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 1068, 1069, 1075, 1074, 1070, 1093,
	0, 1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064,
	0, 0, 0, 0, 1079, 1080, 1081, 1082, 1083, 0,
	0, 0, 0, 1062, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1091, 1099, 0, 0, 0, 0, 0,
	1092, 0, 0, 0, 0, 0, 1071, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 1077, 0, 0,
	0, 0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086,
	1094, 1095, 1096, 0, 0, 0, 0, 1072, 0, 0,
	0, 1087, 0, 1088, 0, 0, 0, 0, 1057, 0,
	1090, 1098, 0, 1068, 1069, 1075, 1074, 1070, 1093, 0,
	1067, 1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0,
	0, 0, 1056, 0, 0, 0, 0, 1083, 1076, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1092,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1079, 1080, 1081, 1082, 0, 0, 0,
	0, 0, 1062, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1054, 1055, 0, 1084, 1085, 1086, 1094,
	1095, 1096, 1091, 1099, 0, 0, 1072, 0, 0, 0,
	1087, 0, 0, 0, 1821, 0, 0, 1057, 0, 1090,
	1098, 1097, 1068, 1069, 1075, 1074, 1070, 1093, 0, 1067,
	1065, 1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 1089,
	0, 1056, 0, 0, 0, 0, 1077, 1076, 0, 0,
	0, 0, 0, 0, 1073, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1828, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1079, 1080, 1081, 1082, 1083, 0, 0, 0,
	0, 1062, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095,
	1096, 1091, 1099, 0, 0, 1072, 0, 0, 1092, 1087,
	0, 0, 0, 0, 1071, 0, 1057, 0, 0, 1098,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 0,
	1056, 0, 0, 0, 0, 1077, 1076, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1088, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 1068, 1069, 1075, 1074, 1070, 1093, 0, 1067, 1065,
	1066, 1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0,
	0, 1079, 1080, 1081, 1082, 1083, 0, 0, 0, 0,
	1062, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096,
	1091, 1099, 0, 0, 1072, 0, 0, 1092, 1087, 0,
	0, 0, 0, 1071, 0, 1057, 0, 0, 1098, 1097,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 1056,
	0, 0, 0, 0, 1077, 1076, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1088, 0, 0, 0, 0, 0, 0, 1090, 0, 0,
	1068, 1069, 1075, 1074, 1070, 1093, 0, 1067, 1065, 1066,
	1058, 1059, 1060, 1061, 1063, 1064, 0, 0, 0, 0,
	1079, 1080, 1081, 1082, 1083, 0, 0, 0, 0, 1062,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	1054, 1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 1091,
	1099, 0, 0, 1072, 0, 0, 1092, 0, 0, 0,
	0, 0, 1071, 0, 1057, 0, 0, 1098, 1097, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 1056, 0,
	0, 0, 0, 1077, 1076, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1090, 0, 0, 1068,
	1069, 1075, 1074, 1070, 1093, 0, 1067, 1065, 1066, 1058,
	1059, 1060, 1061, 1063, 1064, 0, 0, 0, 0, 1079,
	1080, 1081, 1082, 1083, 0, 0, 0, 0, 1062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1091, 1099,
	0, 0, 0, 0, 0, 1092, 0, 0, 0, 0,
	0, 1071, 0, 0, 0, 0, 0, 1097, 0, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 1089, 0, 41, 129, 0,
	0, 0, 1077, 0, 0, 0, 0, 0, 0, 0,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 1090, 51, 0, 1068, 1069,
	1075, 1074, 1070, 1093, 0, 1067, 1065, 1066, 1058, 1059,
	1060, 1061, 1063, 1064, 0, 0, 0, 54, 0, 0,
	0, 56, 1083, 0, 0, 62, 0, 0, 132, 0,
	0, 0, 63, 0, 122, 64, 0, 1078, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1092, 0, 0, 65, 0, 0,
	1071, 0, 0, 0, 0, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1054,
	1055, 0, 1084, 1085, 1086, 1094, 1095, 1096, 0, 0,
	0, 0, 1072, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1057, 1090, 0, 1098, 1068, 1069, 1075,
	1074, 1070, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060,
	1061, 1063, 1064, 0, 0, 0, 0, 1056, 0, 0,
	0, 0, 67, 1076, 0, 0, 0, 0, 68, 0,
	1073, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 127, 69,
	0, 70, 0, 71, 0, 133, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 140, 0, 0, 0, 0,
	0, 0, 83, 0, 0, 103, 0, 0, 1079, 1080,
	1081, 1082, 0, 0, 0, 130, 0, 1062, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 0, 0, 0,
	1302, 0, 0, 0, 0, 0, 0, 1091, 1099, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 128, 0, 0, 0, 0, 0,
	0, 0, 141, 0, 1310, 1299, 1329, 1288, 1320, 1319,
	134, 0, 1290, 1289, 1089, 0, 0, 135, 1331, 1330,
	0, 1077, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1325, 0, 1317, 1316,
	0, 0, 0, 0, 0, 0, 0, 0, 1315, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1314, 1312, 1313, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1092, 0, 0, 1298, 0, 0, 1071,
	0, 0, 0, 1303, 1301, 1304, 1305, 1306, 1307, 1308,
	0, 1328, 0, 0, 0, 0, 1302, 0, 1292, 1291,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1294, 0, 0, 0, 0, 0,
	1310, 1299, 1329, 1288, 1320, 1319, 1318, 0, 1290, 1289,
	1300, 0, 0, 1090, 1331, 1330, 1068, 1069, 1075, 1074,
	1070, 1093, 0, 1067, 1065, 1066, 1058, 1059, 1060, 1061,
	1063, 1064, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 1426, 1424, 1425, 1428, 1427, 0, 0,
	0, 0, 1325, 0, 1317, 1316, 0, 0, 0, 0,
	0, 0, 0, 0, 1315, 0, 0, 0, 0, 0,
	0, 1295, 546, 0, 572, 0, 0, 0, 0, 0,
	0, 0, 1309, 1296, 0, 0, 0, 1314, 1312, 1313,
	0, 0, 551, 1333, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 549, 1293, 0, 0, 0,
	1326, 1327, 1298, 0, 0, 0, 0, 0, 0, 1303,
	1301, 1304, 1305, 1306, 1307, 1308, 550, 1328, 0, 0,
	0, 552, 1297, 0, 1292, 1291, 0, 1332, 0, 558,
	559, 0, 0, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 573, 553,
	1294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 1300, 0, 0, 0,
	0, 571, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1311, 554, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 555, 556, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1295, 0, 0,
	562, 0, 0, 0, 0, 557, 564, 0, 1309, 1296,
	0, 0, 0, 0, 0, 0, 0, 0, 561, 1333,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 574,
	0, 0, 1293, 0, 0, 0, 1326, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1297, 0,
	0, 0, 0, 1332, 0, 0, 0, 0, 0, 560,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 548, 565, 575,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 566, 0, 0, 0, 570, 0,
	0, 0, 0, 576, 0, 0, 0, 0, 563, 567,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 569,
}
var sqlPact = [...]int{

	43262, -1000, -47, -1000, -1000, -1000, 117, -1000, -1000, -1000,
	-1000, 116, 105, 101, -1000, 99, 98, 95, 94, 93,
	92, 91, 90, 85, 77, 76, -1000, 75, -1000, -1000,
	-1000, -1000, 74, 68, 67, 66, 63, 60, 59, -1000,
	981, 22515, 57, 55, 1471, -1000, 36113, 54, 53, 52,
	49, 1075, 48, 47, 26245, 969, 1173, 46, 44, 41,
	37, 35, 980, 35775, 3993, 2715, 1124, 1615, 35434, 22174,
	1591, 1565, 35093, -1000, -1000, 34752, 34, 33, 32, 30,
	29, -1000, -1000, 34411, 28, 27, 26, 23, 21, 20,
	17, 16, 12, 9, 7, 6, 5, 4, -1000, 2,
	1, -1, -1000, 43840, -2, -4, -5, 1106, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 866, 61, -1000, 846, 391, 2258, 8325, 1109,
	1100, 1080, 984, 976, 38141, 36113, -7, -71, -9, -1000,
	2044, 569, 19415, 43262, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 25904, 25563,
	34070, 33729, 6134, 733, -1000, -50, 23867, 36113, -1000, 62,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15246,
	14867, 476, 62, -1000, -1000, -1000, -1000, -1000, 33388, -1000,
	33047, 32706, 1469, 32365, -1000, -1000, -1000, -1000, 32024, -1000,
	-1000, 1724, 1580, 1576, 25222, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 31686, 31345, 31004,
	30663, 30322, 463, -1000, -1000, -1000, 4558, -1000, -1000, -1000,
	-1000, -12, -1000, -14, -1000, -16, -18, -19, -20, -1000,
	-28, -34, -1000, -35, -38, -1000, -40, -41, 29981, 816,
	1244, -1000, -1000, -49, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36113, -1000, 15948, -1000, 462, -1000, 1636, -1000,
	15948, -1000, 1243, -1000, -1000, -1000, -1000, -1000, 36113, -1000,
	-1000, -1000, -1000, -1000, -1000, 2192, 1162, 450, 29640, -1000,
	1525, -1000, 575, 722, -1000, -1000, -1000, 9378, 133, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1420, 21833,
	1226, 1967, 1721, 2190, 1260, 1715, 1702, 1700, 1693, 1684,
	2175, 882, 2173, 1780, 993, 2169, 1664, 1278, 637, 2166,
	1629, 1625, -1000, -1000, -1000, -1000, 893, -1000, -1000, -1000,
	27597, -1000, -1000, 771, 880, 846, -1000, -1000, -1000, 1334,
	1920, 1920, 1920, 2000, 225, 218, -1000, 61, -1000, 1473,
	-1000, 1145, -1000, -1000, -1000, -1000, -1000, 42852, -1000, -1000,
	15948, 15948, 15948, 15948, 15948, 1018, 474, -1000, 449, 444,
	7581, -1000, -1000, 2145, -1000, -1000, -1000, 234, -1000, -1000,
	15948, 62, -1000, -1000, -1000, -1000, 442, 2160, -1000, 592,
	-1000, -1000, -1000, 576, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1661, 441, 440, 438, -1000, 435, -1000,
	-1000, 434, 433, 432, 429, 428, 427, 425, 422, 420,
	419, 418, 410, 408, 404, 393, 963, -1000, 595, -1000,
	-1000, 595, 595, -1000, 378, 378, 379, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 378, -1000, -1000, -1000, 572,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 392, 1303, -1000, -1000, 1303, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 732, 37465, -52, 36113, -1000, 390,
	-52, -1000, -1000, 389, -1000, 10782, 10782, -1000, -1000, -1000,
	-1000, -1000, 10080, 1588, -1000, 3614, -168, 229, 516, -1000,
	18386, 21131, -1000, -1000, 1118, 1763, 745, -1000, 901, 1760,
	481, -1000, 1107, -1000, 826, 1755, -138, 1688, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 22853, 23867, -50, -60, -1000,
	-1000, -1000, 5784, 42852, -1000, 42852, -1000, 803, 20101, 62,
	-1000, -1000, -1000, -1000, 387, 1287, 583, -1000, 246, -1000,
	29299, 583, 1286, -1000, -1000, -1000, 27597, -1000, 36113, -1000,
	36113, -1000, 823, -1000, 37803, 111, 1747, -1000, -1000, 111,
	1744, -1000, 110, 1734, -1000, -1000, 1153, 1727, -1000, -60,
	1722, -1000, -1000, 15948, -75, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 569, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 28958, 23191, 1408, 522, 42852,
	2061, 43732, 22853, 42852, 23191, -1000, -1000, 36113, -1000, 15948,
	-1000, 2057, 1465, -56, -1000, -1000, -1000, -1000, -1000, 1344,
	1418, 713, 1086, 9378, 9378, 1854, -1000, 127, 6134, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 28617, -1000, -1000,
	-1000, 1156, 36113, -1000, -1000, 1650, -1000, 23191, 36113, -1000,
	36113, -1000, 36113, -1000, 36113, -1000, 36113, -1000, -1000, -1000,
	-1000, -1000, 3220, -1000, 1649, -1000, -1000, 36113, -1000, 1339,
	-1000, -1000, -1000, 28279, 27938, -1000, 928, 769, -1000, -1000,
	113, -1000, 22853, 1972, 571, -1000, 1334, -1000, 1084, 1428,
	14488, 1424, 15948, 61, -1000, -1000, 61, 61, 9027, -1000,
	-1000, -1000, 36113, -1000, 43566, 43732, 6134, 749, 15948, 15948,
	15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948,
	15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948,
	15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948, 15948,
	1404, 15948, 730, 15948, 15948, 15948, 15948, 1329, 1101, 376,
	1168, -1000, 2103, 2103, 2103, 43110, 43110, 336, 474, -1000,
	15948, -1000, 39, 15948, 218, 41124, -51, 7216, -1000, -1000,
	-1000, 14137, 591, 42852, 62, 6486, -1000, 2144, 813, 1670,
	1512, 384, 512, 511, 498, 495, 15948, 15948, 13786, 13407,
	13028, 16650, 12649, 15948, 7946, 15948, 15948, 15948, 15948, 12270,
	11891, -1000, 381, -1000, -1000, -1000, -1000, 2140, -1000, -1000,
	2139, -1000, 739, 738, 2138, -1000, -56, -1000, 37465, -1000,
	36113, -52, 2053, 36113, -1000, 126, -1000, 41889, -1000, 126,
	-76, -1000, 1388, 1384, 19758, 1482, 1028, 1028, 1028, -1000,
	380, 472, 516, 5073, 11512, -1000, 26583, 1037, 135, 217,
	18043, 1588, -1000, 36113, -64, 972, -1000, 24881, 1962, 1926,
	1878, 27597, 2018, 39, 1911, 1624, 729, 27597, 1892, 723,
	2017, 39, 1618, 719, 36113, 6134, 1890, 484, -1000, 36113,
	-1000, -1000, -1000, 1617, -82, -1000, -1000, 24543, 2050, 1720,
	-1000, 978, -1000, 2049, 36113, 1234, 1285, -1000, -1000, 765,
	1719, 587, 252, 2048, 252, 20445, -1000, 36113, -1000, 36113,
	-1000, -1000, 36113, -1000, 36113, -1000, 36113, 36113, -1000, 36113,
	36113, -83, 42852, 4141, 24205, 718, -1000, 613, 24543, 764,
	-84, -1000, 622, -1000, -1000, -1000, -1000, 194, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 379, 963, 378, 378, 378, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 572, -1000, -1000, 595,
	595, 595, -1000, -1000, -81, -1000, 1614, 552, -85, 647,
	-56, -1000, 1303, -1000, 874, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2158, -1000,
	2112, -1000, -1000, 2136, -57, -1000, -57, -1000, 6134, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 36113, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2950, -1000, -1000, -1000, -1000,
	-1000, -1000, 36113, 36113, 36113, -1000, 27597, -1000, 1647, -1000,
	1933, -1000, -1000, -1000, -1000, 42852, -1000, 351, -1000, -1000,
	42852, 878, 1447, -1000, 1447, -58, -1000, 41760, 1436, 36113,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 570, 452, 452, 748, 748, 748, 748, 2033, 593,
	2777, 3458, 465, 465, 465, 465, 465, 465, 465, 465,
	407, 605, 605, 407, 407, 407, 407, 407, 465, 465,
	465, 43110, 42981, 3427, 15948, 15948, 703, 1082, 376, 3427,
	15948, 3427, 3427, 3427, 3427, -1000, 1368, -1000, -1000, -1000,
	-1000, 1608, 375, 16650, 16650, -1000, -1000, -1000, 7581, 17000,
	-1000, -1000, -1000, -1000, 374, 15948, -1000, 41313, -235, 213,
	-98, -1000, 15948, 471, -93, -1000, 834, -1000, 15948, -1000,
	-45, 15948, 15948, 15948, 212, -1000, 211, -1000, 701, -1000,
	696, 695, 688, -1000, 372, 1026, 371, 369, 15948, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 42723, 39139, 202,
	-1000, 1596, -98, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	201, -1000, 200, -1000, 42594, -98, 198, 38912, -1000, 16650,
	16650, 16650, 7581, 365, 197, -1000, 41571, -1000, 42405, 11133,
	11133, 11133, 196, 42276, 15948, -98, 38875, 38823, 3719, -104,
	-105, -1000, -107, -1000, 2132, -110, 189, 557, 554, 188,
	-1000, -1000, 359, -115, 587, 10782, 19072, 6134, -1000, 587,
	10080, -1000, 19758, 19758, 1380, 1383, 19758, -1000, -1000, -1000,
	-1000, 26583, 482, 516, 26583, -1000, 2131, 1381, 187, -1000,
	-1000, -1000, 36113, 358, -1000, 516, 186, 1034, 36113, 36113,
	36113, -1000, -1000, 1276, 37127, 1271, 43732, 36113, -1000, 354,
	353, 1412, 1392, 36113, 36113, 36789, 36451, 36113, 960, 39,
	-1000, 550, 352, 36113, 899, 543, 36113, 39, -1000, 350,
	36113, 885, -1000, 541, 1487, 1105, -1000, 802, 1587, 36113,
	184, -116, -59, 43732, -1000, -1000, -1000, -1000, -1000, 36113,
	417, 36113, 39, 36113, 2157, 39, 36113, 1718, 1704, 497,
	36113, 1428, 15948, 988, -1000, 18729, 602, 36113, 888, 120,
	-1000, -1000, -1000, 528, 36113, -1000, -1000, 111, 111, -1000,
	110, 1153, -60, -1000, 15948, -1000, -1000, 36113, 22853, -117,
	-1000, -1000, 43732, -1000, 341, 685, -1000, 2129, 582, 22853,
	36113, 9378, 9378, -1000, 1400, -1000, -1000, 908, -1000, 947,
	-1000, -1000, -1000, -1000, 9378, -1000, -65, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 982, -1000, 878, -1000, 15948, 2120,
	-1000, -1000, -1000, 9027, -1000, -1000, -1000, 36113, -162, 15948,
	3427, 3427, 15948, 16650, 16650, -1000, 3427, -1000, -1000, -1000,
	-1000, -1000, 1561, 349, 15948, 43732, 38855, 3755, -123, -1000,
	15948, -61, -1000, 15948, -1000, 40995, -1000, -1000, 279, 1696,
	-1000, 15948, 42147, 183, 10431, -1000, 42018, -53, -53, -1000,
	2153, 1319, 1301, 1019, 850, 2119, -1000, 20788, 589, 1040,
	40806, 43566, 43732, -1000, 15948, -1000, -1000, 1546, 15948, -1000,
	43566, 43732, 16650, 16650, 16650, 16650, 16650, 16650, 16650, 16650,
	16650, 16650, 16650, 16650, 16650, 16650, 16650, 16650, 16650, 16650,
	16650, 1394, 16650, 2090, 2090, 2090, -62, 15948, -1000, 1645,
	1546, 15948, 15948, 43732, 179, 177, 176, -1000, 15948, -98,
	15948, 15948, 15948, -1000, -1000, -1000, 175, -1000, 2116, -1000,
	-1000, -1000, -1000, 764, -1000, 1503, -1000, -159, -1000, 1588,
	-1000, 1503, -1000, -1000, 1380, -1000, 348, 15948, 19758, -1000,
	470, -1000, -125, -1000, 26583, -1000, 469, -227, -1000, 519,
	-1000, 516, 347, 36113, 26583, -1000, -1000, -1000, 686, 681,
	1711, -1000, 1267, -1000, 606, -1000, 1249, 15948, 17700, 346,
	340, 1170, -1000, 1710, 1153, 1707, 1153, -1000, -64, 931,
	-1000, 21481, 15948, -1000, 676, 21481, -1000, -1000, 15948, -1000,
	674, 21481, 582, 1544, 782, -1000, 801, -1000, 1476, -1000,
	24543, 337, 36113, 319, -1000, 313, -1000, -1000, 302, 36113,
	1360, 497, 23529, -1000, 583, 888, -1000, 42852, -1000, 888,
	8676, 1885, -126, -1000, -1000, -1000, 587, 20445, 19758, 10080,
	-131, -1000, -1000, -1000, -1000, 42852, -65, 1869, 1869, -1000,
	2115, -1000, 468, 174, -1000, 27259, -1000, -65, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 36113, 6134, 36113, 36113, 1045,
	40717, -1000, 1798, 6134, 2059, 3427, 3057, 276, 15948, 43732,
	43429, -134, 15948, 15948, -1000, 172, 15948, 467, 42852, -1000,
	-1000, -1000, 42852, 15948, 2149, 15948, 171, 170, 168, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 165, -1000, -1000,
	38479, 15948, 163, -1000, 162, 160, 42852, 1645, 42852, -1000,
	-1000, 493, 493, 843, 843, 843, 843, 2090, 1738, 659,
	316, 3445, 3445, 3445, 548, 1065, 1065, 3445, 3445, 3445,
	1534, 1385, 301, 39387, 15948, 159, -1000, -1000, 42852, 42852,
	157, -1000, -1000, -1000, -98, 339, 40528, 40399, -1000, 156,
	155, 1494, 1989, -1000, 19758, 1494, -1000, 36113, 42852, -1000,
	-168, -1000, 2109, -1000, -1000, 1381, -1000, 5433, 26583, 36113,
	-136, -1000, 36113, 36113, 36113, 1703, -1000, 1464, -1000, 40210,
	-139, -1000, 277, 1957, 15948, -1000, -1000, 297, 17700, 36113,
	-1000, 1419, 1415, 633, 36113, -1000, 36113, -1000, 36113, 36113,
	36113, -1000, 296, 62, -141, 36113, -1000, -142, 36113, -1000,
	-1000, 22853, 737, -1000, 1012, 1479, -1000, 17700, 295, 36113,
	24543, 2045, 17700, 1111, 1372, 497, 23529, -1000, 765, -1000,
	-1000, -66, -1000, 315, 39, 888, -1000, -68, -1000, 518,
	1840, -1000, 1829, 466, -1000, -1000, -70, 291, -1000, 510,
	499, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1798, 15948,
	15948, 43429, -147, -1000, 3427, 3427, -1000, 40121, -1000, 42852,
	-1000, 42018, -1000, -1000, -1000, -1000, 1011, -1000, 39932, -1000,
	-1000, -1000, -1000, 16650, 1519, 290, 43732, 39803, -1000, -1000,
	15948, -1000, -1000, -1000, -1000, 585, 15948, 15948, 1588, 585,
	-148, 516, -1000, -1000, -1000, 2095, -1000, -149, -1000, -1000,
	-1000, -1000, 36113, -1000, 36113, -1000, 6134, 36113, 1532, 1257,
	-1000, -1000, 1389, 286, 16650, 36113, -1000, 1016, 17700, 1798,
	62, 6134, 1798, 39614, 6486, -150, -156, 1254, -1000, 1253,
	15948, -1000, 43732, 1153, 1153, -1000, 673, 671, 15948, 654,
	-1000, 651, -1000, -74, 21481, -1000, -1000, 1985, 1015, -158,
	17700, -164, 151, 39, -165, 36113, -1000, 497, 23529, -1000,
	1704, 1723, 36113, 1877, -1000, -1000, 285, 282, 280, -1000,
	26921, 26921, 22853, 22853, -1000, 3427, 3427, -1000, -1000, 150,
	1040, 1982, -1000, 3842, 16650, 43732, -166, -1000, 39525, -1000,
	36113, 42852, -98, -1000, -1000, 26583, 453, -1000, -1000, 1337,
	-1000, -1000, 36113, 1264, -1000, -1000, 15948, 39387, 278, 1476,
	262, -1000, -1000, -1000, -1000, -1000, -1000, 1957, -45, -1000,
	924, -1000, -1000, 42852, 1946, -1000, -1000, 36113, 36113, -53,
	261, 260, -1000, 1013, 36113, 1016, -171, -1000, 1476, -1000,
	1016, 256, 23529, -1000, 1360, 743, -172, 36113, -1000, -1000,
	6837, 22853, 22853, -1000, -174, -1000, -1000, -1000, 915, 15948,
	3842, -179, -1000, -1000, -77, -1000, 2028, -1000, -1000, -1000,
	-1000, 1697, 39298, 1325, 36113, -1000, 36113, 1798, 149, 36113,
	609, 6134, -1000, -1000, 145, 15948, 15948, 255, 254, 250,
	1476, 1016, -1000, 1476, 17700, -1000, 1372, 820, -1000, 587,
	-1000, -182, -185, -1000, 144, 16299, 16299, -98, -1000, 36113,
	249, 1677, -1000, 1063, 979, 143, -187, -1000, -1000, 246,
	-1000, 15948, -1000, 2149, -188, -193, 36113, 36113, 36113, -1000,
	1476, -1000, -194, -1000, 20445, -1000, 582, 582, -1000, -1000,
	-1000, 17350, 1140, 859, 41442, -1000, -1000, -1000, 36113, -1000,
	1087, 1074, 854, -1000, -1000, -1000, -1000, -1000, 1325, 42852,
	-1000, -1000, -195, -196, -201, -1000, 1016, -190, -1000, -1000,
	2069, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1807, -1000,
	620, 1481, 1481, 1063, 244, 243, 1112, 1476, -1000, 15597,
	-1000, 2055, -1000, -1000, 1369, -1000, -1000, 996, 983, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 141, 6134, 138,
	6134, -1000, 601, -1000, 597, 242, 1338, -63, 9729, 750,
	289, -101, -1000, -202, -1000, 42852, -1000, -1000, 235, -1000,
	9729, 996, -1000, 9729, 9729, -213, -1000, -1000, -214, -1000,
	-67, 983, -181, -1000, -1000, 983, -1000,
}
var sqlPgo = [...]int{

	0, 2590, 2589, 1643, 2009, 2588, 2587, 2580, 2578, 2575,
	2574, 2573, 2568, 2567, 2564, 2562, 2559, 2558, 2557, 2556,
	2555, 2554, 2553, 2550, 1993, 2548, 1981, 2547, 2542, 2541,
	2539, 2538, 2518, 1955, 2517, 2514, 2512, 2511, 2510, 2508,
	1951, 2504, 1943, 2503, 2496, 2488, 2487, 2486, 1928, 2485,
	88, 114, 1921, 2484, 2482, 1867, 1859, 1804, 2479, 1795,
	2478, 2476, 1789, 1773, 2474, 248, 2470, 2468, 2467, 1764,
	1753, 2466, 2460, 2459, 141, 2458, 1727, 2455, 2451, 2441,
	2439, 2433, 2431, 2430, 2428, 2425, 2424, 2420, 2416, 2415,
	2412, 2410, 2409, 2408, 2406, 2404, 153, 2403, 2402, 1708,
	1655, 2401, 2400, 30, 36, 16, 57, 28, 144, 2759,
	139, 2397, 2396, 2394, 2393, 2391, 2390, 27, 97, 83,
	2382, 675, 2381, 2380, 43, 32, 25, 24, 2368, 90,
	2365, 2362, 2013, 34, 2359, 2357, 125, 2356, 382, 58,
	1766, 146, 142, 137, 117, 2355, 2354, 2349, 50, 107,
	8, 4, 3, 6, 1, 2345, 2, 5, 2339, 2336,
	17, 82, 38, 2335, 37, 46, 2330, 2327, 121, 2323,
	75, 80, 1594, 119, 133, 348, 110, 2322, 66, 20,
	65, 2312, 2309, 149, 41, 2308, 39, 74, 130, 2307,
	56, 151, 118, 72, 123, 126, 2305, 2301, 2300, 104,
	2299, 113, 111, 2296, 2295, 67, 2294, 91, 129, 2293,
	2290, 2289, 85, 2288, 120, 2287, 2285, 147, 138, 105,
	15, 78, 68, 13, 1557, 1556, 128, 98, 52, 62,
	2279, 269, 1092, 40, 33, 100, 79, 53, 101, 54,
	95, 132, 63, 2276, 2272, 127, 2269, 2268, 2267, 2266,
	2265, 99, 2264, 2263, 35, 2261, 77, 45, 59, 87,
	48, 204, 124, 109, 145, 96, 2258, 86, 116, 2257,
	909, 2255, 2254, 1529, 106, 2253, 2251, 2249, 1319, 1227,
	1172, 226, 2248, 2247, 1056, 985, 2245, 2244, 81, 2243,
	108, 102, 89, 134, 152, 61, 2242, 115, 23, 2241,
	26, 31, 0, 343, 257, 2240, 112, 71, 2239, 2238,
	2237, 2236, 22, 11, 7, 10, 12, 14, 51, 29,
	2233, 2225, 122, 93, 60, 2224, 148, 2223, 2222, 2221,
	44, 2219, 21, 2218, 19, 2214, 2211, 18, 9, 2209,
	2208, 131, 2206, 92, 2205, 1954, 2204, 140, 2199, 2198,
	1858, 2195, 49, 103,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 8, 8, 8, 9, 6, 6,
	6, 6, 6, 11, 11, 12, 20, 15, 22, 10,
	18, 16, 14, 14, 19, 19, 119, 119, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 116, 116, 121, 121, 121, 123, 123,
	120, 120, 115, 115, 24, 24, 63, 63, 106, 56,
	56, 56, 300, 300, 301, 301, 102, 102, 103, 103,
	103, 103, 104, 104, 105, 105, 105, 32, 32, 32,
	26, 26, 26, 26, 26, 27, 27, 28, 28, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 40, 40, 41, 41, 41, 41, 41,
	41, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 47, 47, 47, 45, 45, 45, 44, 44,
	44, 43, 43, 43, 46, 46, 46, 174, 174, 173,
	173, 177, 177, 48, 48, 48, 48, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 51, 51, 51, 51, 51, 51, 51,
	269, 269, 268, 49, 49, 243, 243, 52, 52, 200,
	200, 53, 53, 53, 53, 53, 54, 54, 64, 64,
	341, 341, 341, 345, 345, 346, 346, 347, 347, 347,
	347, 347, 347, 347, 343, 343, 59, 59, 59, 59,
	60, 60, 60, 61, 61, 101, 101, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 29, 30, 70, 70,
	70, 72, 69, 69, 69, 71, 71, 71, 71, 73,
	73, 74, 74, 74, 74, 74, 75, 75, 294, 292,
	292, 293, 293, 146, 146, 146, 146, 146, 147, 147,
	147, 299, 299, 299, 299, 299, 299, 298, 298, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 88, 88, 88, 96,
	96, 96, 96, 96, 96, 96, 77, 77, 82, 82,
	82, 82, 82, 78, 78, 83, 83, 84, 84, 85,
	85, 85, 85, 85, 85, 79, 79, 79, 79, 87,
	87, 87, 87, 86, 86, 92, 92, 92, 92, 92,
	92, 89, 89, 89, 89, 90, 90, 90, 93, 93,
	93, 93, 80, 80, 81, 81, 94, 94, 95, 95,
	95, 95, 95, 91, 91, 91, 342, 342, 344, 344,
	57, 57, 36, 36, 37, 37, 148, 148, 149, 149,
	222, 222, 222, 222, 150, 150, 122, 122, 122, 151,
	151, 152, 152, 153, 153, 153, 155, 155, 156, 156,
	157, 157, 157, 154, 154, 154, 221, 310, 310, 311,
	311, 311, 311, 311, 311, 312, 312, 312, 312, 312,
	312, 312, 308, 308, 309, 306, 306, 307, 307, 307,
	307, 348, 348, 220, 220, 160, 160, 313, 313, 313,
	313, 314, 314, 314, 314, 314, 317, 316, 315, 315,
	315, 315, 315, 255, 255, 255, 98, 98, 38, 38,
	128, 128, 39, 39, 35, 35, 35, 204, 204, 164,
	164, 260, 260, 260, 139, 139, 117, 117, 117, 17,
	13, 13, 13, 13, 13, 13, 23, 23, 21, 21,
	205, 205, 206, 206, 58, 58, 62, 62, 67, 67,
	97, 97, 97, 97, 97, 97, 25, 25, 25, 25,
	31, 31, 31, 31, 66, 66, 350, 350, 135, 135,
	135, 135, 136, 136, 217, 217, 218, 218, 351, 351,
	219, 219, 219, 130, 129, 131, 131, 34, 34, 34,
	124, 124, 125, 125, 126, 126, 127, 127, 352, 352,
	55, 55, 55, 100, 100, 142, 142, 214, 214, 214,
	216, 216, 215, 215, 215, 190, 190, 190, 99, 99,
	169, 169, 179, 179, 180, 180, 266, 181, 181, 65,
	65, 109, 109, 107, 107, 107, 107, 107, 107, 108,
	108, 108, 110, 110, 110, 110, 110, 110, 110, 113,
	113, 113, 114, 114, 114, 112, 112, 323, 323, 323,
	326, 326, 322, 324, 324, 325, 325, 349, 349, 191,
	191, 191, 159, 158, 158, 162, 162, 161, 163, 163,
	259, 259, 259, 188, 188, 188, 188, 209, 209, 207,
	207, 208, 208, 210, 210, 211, 211, 211, 212, 212,
	213, 213, 187, 187, 239, 239, 111, 111, 111, 168,
	168, 168, 170, 170, 229, 229, 229, 230, 230, 228,
	228, 228, 228, 261, 261, 261, 261, 261, 261, 261,
	261, 339, 339, 339, 340, 340, 258, 258, 262, 262,
	262, 262, 262, 262, 256, 256, 256, 256, 257, 257,
	267, 267, 194, 194, 194, 194, 192, 192, 193, 193,
	263, 263, 263, 263, 189, 189, 264, 264, 264, 223,
	223, 270, 270, 270, 288, 288, 167, 167, 167, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	271, 271, 271, 271, 271, 271, 271, 271, 271, 271,
	272, 272, 272, 272, 274, 274, 274, 273, 273, 273,
	273, 273, 273, 273, 273, 273, 273, 273, 273, 273,
	273, 273, 273, 273, 273, 287, 287, 287, 287, 287,
	275, 275, 282, 282, 283, 283, 284, 285, 276, 276,
	277, 277, 278, 279, 286, 286, 286, 286, 290, 290,
	280, 280, 280, 280, 280, 281, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	202, 202, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 231, 231, 231, 231, 231,
	231, 231, 231, 231, 231, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 232, 232, 232, 232, 232, 232,
	232, 232, 232, 232, 233, 233, 233, 233, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 318,
	318, 318, 318, 318, 318, 318, 318, 320, 320, 321,
	321, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 319, 319, 319, 319, 319, 319, 319, 319, 319,
	319, 327, 327, 328, 328, 330, 330, 331, 331, 332,
	333, 333, 333, 334, 335, 335, 329, 329, 336, 336,
	336, 337, 337, 338, 338, 338, 338, 338, 245, 245,
	246, 247, 253, 253, 253, 145, 145, 145, 145, 145,
	145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
	145, 137, 137, 137, 137, 137, 176, 176, 175, 175,
	242, 242, 240, 240, 244, 244, 195, 195, 289, 289,
	289, 289, 289, 289, 289, 196, 196, 196, 203, 197,
	197, 198, 198, 198, 198, 198, 236, 237, 199, 199,
	199, 238, 238, 248, 252, 252, 251, 250, 250, 249,
	249, 226, 226, 227, 227, 225, 224, 184, 184, 183,
	183, 182, 182, 353, 353, 254, 254, 185, 185, 186,
	178, 178, 265, 265, 265, 265, 171, 171, 144, 144,
	172, 172, 140, 140, 143, 143, 141, 141, 141, 141,
	165, 165, 166, 166, 138, 138, 234, 234, 234, 234,
	234, 234, 234, 234, 234, 234, 234, 291, 291, 291,
	241, 132, 132, 132, 133, 133, 134, 134, 296, 296,
	296, 297, 297, 297, 297, 295, 295, 295, 295, 295,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 304, 304, 304, 304, 304, 304, 304,
	304, 304, 304, 303, 303, 303, 303, 303, 303, 303,
	303, 303, 303, 303, 303, 303, 303, 303, 303, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
	305, 305, 305, 305, 305, 305, 305, 305, 305, 305,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 1, 1,
	1, 1, 3, 4, 6, 6, 6, 5, 5, 7,
	7, 7, 4, 12, 4, 12, 1, 3, 2, 5,
	3, 6, 4, 6, 6, 6, 4, 8, 3, 3,
	3, 6, 4, 3, 2, 1, 1, 0, 2, 0,
	2, 0, 2, 0, 7, 2, 6, 2, 1, 12,
	12, 2, 1, 1, 1, 3, 3, 0, 3, 1,
	3, 1, 1, 3, 2, 5, 0, 4, 6, 7,
	1, 2, 1, 2, 2, 3, 3, 3, 3, 1,
	2, 1, 2, 1, 2, 1, 2, 3, 1, 2,
	1, 2, 2, 7, 3, 2, 2, 2, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 3, 5, 3, 1, 3, 1,
	2, 2, 3, 2, 2, 5, 3, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 2, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 1, 2, 1, 2,
	2, 3, 2, 4, 3, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 1, 3, 1, 4, 6, 6,
	3, 5, 3, 2, 6, 3, 3, 4, 4, 3,
	3, 1, 3, 3, 1, 1, 2, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 3, 3, 1,
	1, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	3, 4, 4, 4, 3, 2, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 3, 2,
	3, 3, 3, 2, 3, 4, 3, 5, 3, 4,
	5, 2, 3, 3, 3, 4, 2, 3, 4, 3,
	3, 3, 4, 4, 4, 4, 2, 3, 7, 7,
	7, 4, 5, 5, 5, 5, 2, 0, 2, 0,
	3, 2, 8, 10, 6, 9, 1, 0, 1, 3,
	1, 1, 1, 1, 8, 0, 1, 1, 0, 1,
	0, 9, 9, 6, 7, 5, 3, 5, 1, 3,
	1, 1, 1, 10, 11, 9, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 3,
	3, 0, 6, 3, 11, 14, 4, 1, 0, 1,
	3, 3, 3, 5, 2, 0, 1, 1, 0, 6,
	6, 8, 8, 10, 8, 10, 6, 8, 6, 8,
	1, 0, 2, 0, 2, 2, 3, 2, 2, 2,
	1, 2, 1, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 2, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 2, 3, 2, 2, 8, 11, 3,
	3, 0, 3, 0, 3, 0, 3, 0, 1, 0,
	6, 7, 3, 6, 3, 1, 3, 1, 4, 2,
	8, 5, 4, 3, 0, 2, 2, 0, 8, 3,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 3, 1, 3,
	2, 4, 5, 2, 2, 1, 1, 1, 0, 2,
	5, 2, 3, 1, 1, 1, 3, 0, 1, 1,
	1, 1, 3, 0, 2, 0, 2, 2, 3, 3,
	2, 0, 1, 3, 3, 5, 1, 1, 3, 2,
	4, 4, 0, 8, 4, 6, 3, 3, 1, 5,
	5, 0, 2, 3, 1, 3, 2, 0, 3, 4,
	5, 4, 5, 4, 5, 2, 4, 1, 1, 0,
	5, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	0, 2, 5, 2, 1, 1, 2, 3, 0, 1,
	1, 1, 1, 2, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 5, 2, 1, 1,
	1, 1, 4, 1, 2, 2, 1, 1, 1, 0,
	1, 1, 4, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 0,
	1, 4, 1, 3, 3, 3, 5, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 4, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 3, 4,
	3, 4, 3, 4, 5, 6, 6, 7, 6, 7,
	6, 7, 3, 4, 4, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 3, 3, 1, 3, 3, 1, 3,
	3, 1, 1, 3, 3, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 5,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 1, 1, 3, 3,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 2, 3, 1, 1, 1, 2, 2,
	1, 3, 3, 0, 1, 2, 1, 1, 1, 1,
	6, 2, 1, 5, 1, 1, 1, 1, 2, 2,
	3, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 379, -4, -24, -26, -29, -32,
	-33, -53, -40, -41, -42, -52, -48, -54, -55, -56,
	-57, -49, -63, -62, -64, -67, -65, -58, -59, -68,
	-76, -97, -98, -99, -100, -5, -6, -7, -8, -9,
	24, 35, -27, -28, 48, -30, 72, -34, -35, -36,
	-37, 74, -38, -39, 95, -325, 99, -43, -44, -45,
	-47, -46, 103, 110, 113, 135, 144, 230, 236, 257,
	259, 261, 268, -107, -109, 255, -60, -61, -69, -70,
	-71, -72, -101, 280, -77, -78, -79, -80, -81, -82,
	-83, -84, -85, -86, -87, -88, -89, -90, -91, -92,
	-93, -94, -95, 283, -25, -31, -66, 323, -11, -12,
	-15, -14, -16, -13, -20, -22, -19, -21, -23, -17,
	-18, -10, 112, -323, -110, -108, 376, 256, 332, 36,
	293, 62, 106, 263, 348, 355, -113, -111, -112, -114,
	273, 340, 303, 380, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 379, 2, 303, 343,
	88, 152, 241, -341, 2, -172, 303, 88, -141, -132,
	369, 4, -302, -304, 20, 21, 24, 34, 35, 36,
	41, 45, 48, 49, 56, 61, 62, 63, 68, 65,
	66, 67, 70, 72, 73, 76, 77, 78, 86, 87,
	89, 91, 95, 97, 99, 102, 103, 105, 110, 112,
	111, 113, 123, 124, 129, 131, 136, 142, 143, 144,
	145, 153, 156, 158, 151, 168, 169, 170, 174, 175,
	176, 179, 178, 183, 184, 187, 188, 191, 193, 195,
	196, 199, 197, 201, 202, 204, 203, 209, 211, 212,
	214, 217, 220, 223, 226, 227, 228, 229, 230, 232,
	234, 236, 238, 239, 240, 241, 242, 244, 245, 247,
	248, 249, 250, 251, 255, 253, 254, 256, 257, 258,
	259, 261, 263, 264, 266, 281, 282, 294, 268, 269,
	270, 271, 272, 276, 274, 277, 278, 280, 283, 285,
	288, 292, 293, 295, 298, 299, 296, 291, 302, 304,
	305, 306, 307, 308, 309, 310, 311, 318, 319, 323,
	324, 325, 326, 329, 330, 331, 332, 334, 337, 338,
	339, 344, 349, 350, 351, 352, 353, 29, 37, 38,
	39, 40, 42, 43, 46, 47, 52, 53, 54, 57,
	90, 92, 93, 109, 114, 115, 125, 126, 127, 137,
	139, 146, 147, 150, 157, 159, 160, 161, 162, 163,
	165, 172, 173, 181, 198, 208, 210, 221, 225, 233,
	235, 243, 265, 275, 286, 287, 297, 300, 313, 314,
	315, 320, 321, 336, 340, 341, 379, 379, 2, 169,
	240, -140, -132, 88, 379, 379, 379, 379, 303, 2,
	333, 343, -204, 88, 328, 379, 379, -132, 236, 22,
	2, 97, 156, 331, 330, 22, 232, 274, 305, 307,
	2, 379, 379, 379, 379, 379, 2, 343, 303, 152,
	88, 333, -132, 2, -51, 2, 376, -50, -4, -33,
	-42, -52, -48, -24, -26, -40, -56, -55, -57, -59,
	-63, -62, -65, -69, -70, -76, -99, -100, 280, 112,
	-345, 2, 22, -346, -347, 74, 103, 135, 273, 156,
	97, 330, 303, 2, 169, 2, -132, 2, -341, 2,
	169, 2, -345, 2, -132, 2, -136, 2, 268, -132,
	379, 379, 379, 379, 379, 188, 56, 265, 277, -74,
	319, -73, 313, -294, -75, 2, -173, 199, -132, 379,
	379, 379, 379, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 379, 2, -96, 277, 35,
	56, 22, 61, 89, 136, 152, 153, 175, 69, 70,
	239, 188, 170, 318, 176, 278, 304, 319, 74, 334,
	308, 111, 4, 88, 199, 279, 313, 379, 379, 379,
	-349, 2, 303, 270, 283, -108, -110, -109, -161, -162,
	327, 164, 108, 219, -107, -109, 2, -323, -96, 277,
	2, 56, 22, -292, 2, -254, 215, -231, 94, -233,
	367, 368, 362, 205, 354, -245, -235, -248, 109, 265,
	376, -140, -234, 382, 9, -320, -109, 30, -246, -247,
	50, -132, 7, 8, 5, 6, -138, -272, -241, -281,
	322, 116, 207, -318, -319, 4, -302, -296, -273, -283,
	-277, -280, 165, 59, 80, 81, 84, 82, 85, 279,
	333, 51, 29, 114, 115, 225, 233, 300, 320, 321,
	146, 208, 147, 57, 137, 181, 102, 38, 40, 42,
	43, 52, 53, 90, 92, 93, 125, 126, 127, 157,
	159, 160, 161, 162, 163, 210, 243, 286, 297, 314,
	315, 341, -303, -284, -285, -278, -279, 75, 117, 134,
	155, 148, 167, 171, 182, 185, 194, 200, 222, 224,
	262, 284, -286, -350, 2, 319, 319, 2, -350, 2,
	-350, 2, -135, 2, 319, 316, -326, 244, -322, -132,
	-326, 379, 379, 381, 379, -158, -159, 2, 22, 100,
	-186, 2, 376, -261, 2, 374, -263, -140, -109, -262,
	376, 216, -3, 2, -263, 146, -140, 2, -263, 146,
	-140, 2, -132, 2, -143, 146, -140, -295, 4, -302,
	-304, -303, -305, 59, 22, 25, 26, 27, 28, 30,
	31, 32, 33, 44, 50, 51, 55, 58, 60, 69,
	74, 79, 80, 82, 81, 83, 84, 85, 94, 96,
	98, 100, 101, 104, 106, 108, 116, 118, 130, 132,
	133, 135, 138, 140, 149, 152, 154, 164, 166, 177,
	180, 186, 189, 190, 205, 206, 207, 213, 215, 216,
	218, 219, 231, 237, 246, 260, 273, 279, 289, 301,
	303, 312, 316, 317, 322, 327, 328, 333, 335, 342,
	343, 345, 346, 347, 348, 316, 381, -172, -165, -132,
	-225, -224, 378, -231, 2, -231, 2, 133, 376, -183,
	-184, -224, -225, 2, -173, 146, -132, 2, -173, 2,
	152, -132, 146, 2, -132, 22, 133, 2, 166, 2,
	166, 2, -264, 2, -263, -174, 146, 2, -173, -174,
	146, 2, -144, 146, 2, -143, -132, 146, 2, -165,
	146, 2, -200, 376, -269, 2, -268, -297, 4, -302,
	-304, -303, 340, 379, 379, 379, 379, 379, 379, 379,
	379, 379, 379, 379, 379, 277, 215, 381, -173, -231,
	-243, 376, 133, -231, 215, -132, 2, 281, 2, 376,
	-74, 54, 319, -218, 2, -219, -129, -130, -131, 168,
	238, 242, 353, 316, 359, 133, -292, -177, 378, -96,
	2, -300, 2, -298, 9, -297, 5, 281, 2, 239,
	278, 56, 133, 2, 2, -342, 2, 215, 133, 2,
	133, 2, 133, 2, 133, 2, 133, 2, 2, 239,
	278, 2, 130, 2, 318, 2, 2, 133, 2, 168,
	238, 294, 2, 303, 343, 2, 133, 133, 353, 2,
	-189, -263, 303, 353, 22, -161, -162, -188, -207, -208,
	186, 118, 213, -191, 22, 100, -191, -191, 45, 377,
	377, -96, 281, 2, 10, 11, 58, 34, 367, 368,
	369, 370, 128, 371, 372, 365, 366, 364, 357, 358,
	361, 290, 23, 71, 360, 359, 64, 192, 267, 119,
	120, 121, 122, 252, 13, 14, 15, 27, 218, 185,
	354, 148, 284, 362, 16, 17, 18, 167, 37, 149,
	-137, -145, -231, -231, -231, -231, -231, 224, -182, -226,
	374, -109, 376, 376, -109, -231, -175, 376, 7, -109,
	-240, 374, -249, -231, -183, 376, 5, 376, 5, -327,
	349, 130, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 376, 376, 376, 376, 376, 376, 376, 376, 376,
	376, 235, -290, 344, -290, -290, -274, 376, -274, -275,
	376, -274, 350, 355, 376, -217, -218, -217, 316, -136,
	381, -326, -166, 376, -186, -178, -265, -231, 369, -178,
	-185, -254, 75, -194, 171, 200, 134, 182, 262, 155,
	7, -51, -228, 382, 376, 369, -258, 355, -109, -262,
	376, -261, -140, 376, -119, 253, -118, 21, 24, 103,
	338, 109, 291, 309, 112, 269, 253, 109, 112, 253,
	291, 309, 269, 253, 109, 382, 112, -300, -141, 381,
	-295, 369, 295, 377, -171, -140, -184, 376, -160, 205,
	-128, -324, 348, -160, 376, -133, 146, 2, -132, -324,
	205, -264, -142, -140, -142, 280, -132, 31, -121, 381,
	49, 258, 109, -121, 109, -121, 381, 109, -121, 109,
	109, -175, -231, 377, 381, -341, -347, 74, 376, 31,
	-242, -270, -271, -273, -282, -276, -280, -281, 41, 47,
	46, 173, 172, 310, 198, 275, 287, 336, 150, 39,
	214, 158, 4, 157, 159, 160, 161, 162, 163, 286,
	38, 243, 126, 127, 125, 102, 93, 92, 210, 43,
	42, -284, -285, -278, -279, 90, 314, 315, 165, 40,
	53, 52, 341, 297, -301, -300, -341, -294, -175, 31,
	-218, 2, -351, 381, 184, -147, 191, 204, 142, 216,
	351, -299, 5, 4, -241, -255, 94, 188, -281, 8,
	368, -291, 7, 367, -293, -292, -293, 78, 378, -295,
	-173, 22, 282, 2, -294, -344, 130, -341, -294, -294,
	-294, -294, -294, 277, -51, 130, -132, 184, -294, 2,
	-294, 2, 303, 152, 303, -121, 381, -300, 65, 66,
	353, -188, -208, -207, -210, -231, 22, -213, 124, 201,
	-231, -233, -108, -108, -108, -163, -259, -231, 237, 152,
	-294, -288, -270, -287, 248, 249, 247, 251, 250, -270,
	-295, 313, -231, -231, -231, -231, -231, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
	-231, -231, -231, -231, -231, -231, -231, -231, -231, -231,
	-231, -231, -231, -231, 185, 148, 284, 37, 149, -231,
	316, -231, -231, -231, -231, 197, 205, 207, 322, 116,
	329, 100, 211, -353, 301, 33, -238, -109, 376, -253,
	28, 289, 22, -245, 265, 376, -226, -231, -227, -176,
	-175, 377, 381, -176, -244, -240, -252, -251, 345, 377,
	-175, 342, 22, 100, 369, 2, 7, -201, 352, 196,
	91, 143, 195, -202, 272, -328, 123, 138, 376, 377,
	2, 377, 2, 377, 2, 377, 2, -231, -231, -195,
	2, -289, -175, 4, 352, 196, 91, 143, 195, 272,
	-195, 2, -196, 2, -231, -175, -197, -232, -233, 367,
	368, 362, 376, 265, -198, 2, -231, -176, -231, 44,
	180, 317, -199, -231, 133, -175, -231, -231, -231, -175,
	-175, 2, -175, 2, 376, 7, 7, 313, 313, 7,
	-136, -322, 31, -165, -168, 381, 133, 31, 4, -168,
	381, 377, 171, 171, -261, -194, 171, -192, 222, -192,
	-192, -339, 376, 375, -258, -295, 374, 383, -176, 2,
	-257, -256, 31, -132, 220, 377, -140, 381, 316, -205,
	69, 60, -221, 146, 60, -306, -132, 69, -307, 55,
	328, 237, 132, -205, 69, -205, 69, 69, -263, 34,
	-65, 67, 133, 316, -263, 67, 316, 34, -65, 133,
	316, -143, -295, 67, -267, 356, -132, 133, 377, 381,
	-148, -165, -149, -132, -222, -221, -308, -309, -306, 152,
	328, 117, 31, 109, 229, 31, 215, 205, -124, 306,
	109, -223, 346, -214, -65, 376, 94, 31, -214, -179,
	-180, -266, -181, -140, 376, -132, -173, -174, -174, -143,
	-144, -132, -165, 377, 381, -51, -268, 316, 335, -149,
	-50, 377, 381, -167, 30, 374, -201, 376, -267, 381,
	133, 359, 316, 377, 319, -219, -146, 242, 288, 254,
	276, 8, 7, 7, 381, -295, -343, -132, 277, -51,
	-140, -143, -140, -263, 130, 66, -211, -291, 376, 368,
	-212, 265, 266, 381, -117, 32, 98, 174, -140, 353,
	-231, -231, 316, -353, 301, -238, -231, 197, 207, 322,
	116, 329, 100, 211, 133, 376, -232, -232, -175, -235,
	376, -175, 375, 385, 377, -231, 375, 375, 381, -250,
	-251, 104, -231, -162, 381, -161, -231, -175, -175, 377,
	377, 316, 316, 316, 316, 376, -333, 223, 376, 376,
	-231, 31, 381, 377, 133, 377, 377, -203, 231, 377,
	10, 11, 367, 368, 369, 370, 128, 371, 372, 365,
	366, 364, 357, 358, 359, 64, 192, 267, 13, 14,
	15, 167, 149, -232, -232, -232, -175, 376, 377, -236,
	-237, 133, 130, 31, -199, -199, -199, 377, 133, -175,
	381, 381, 381, 377, 377, 377, 7, 377, 381, 377,
	353, 353, 377, 376, 377, -223, -265, -170, 2, -261,
	-295, -223, -254, -261, -261, -193, 335, 215, 171, -261,
	-256, 377, -340, 7, -258, -257, 7, -230, -229, 131,
	203, 377, -132, 376, -258, 377, -118, -140, -132, -132,
	205, -221, 146, -123, 205, -270, -132, 376, 376, 174,
	174, -132, -132, 146, -132, 146, -132, -132, -119, 253,
	-65, 353, 376, -140, 253, 353, -132, -65, 376, -132,
	253, 353, -102, 145, 211, 295, 133, -140, 377, 377,
	381, -133, 152, -133, -65, -173, 5, -65, -140, 109,
	-125, 105, -352, 359, -132, -209, -207, -231, -190, -216,
	260, 215, -171, 340, -132, -190, -169, 381, 133, 359,
	-171, -121, -121, -121, -121, -231, -343, -300, 377, -270,
	374, 375, 7, 7, -105, 348, -300, -343, -292, -292,
	-129, 326, 63, 242, -292, 381, 241, 88, 303, -212,
	-231, -259, -140, 382, -231, -231, -232, -232, 133, 376,
	-231, -242, 27, 27, 377, -176, 381, -227, -231, 377,
	-240, 106, -231, 312, 377, 342, -162, -162, -162, 5,
	196, 143, 195, -202, 195, -202, -202, 7, -334, -132,
	376, 346, -161, 377, -288, -270, -231, -236, -231, -288,
	-270, -232, -232, -232, -232, -232, -232, -232, -232, -232,
	-232, -232, -232, -232, -232, -232, -232, -232, -232, -232,
	100, 205, 211, -232, 381, -176, -237, -236, -231, -231,
	-270, 377, 377, 377, -175, -231, -231, -231, 377, 7,
	-50, -187, 138, -267, 381, -187, -193, 376, -231, -261,
	375, 377, 381, -257, 375, 381, 384, 359, -258, 376,
	-165, -256, 316, 316, 109, 205, 337, -310, -307, -231,
	-164, -260, -132, -321, 376, -318, -319, -138, 376, 376,
	-116, 103, 280, -206, 109, -121, 109, -121, 316, -205,
	69, -234, -138, -132, -175, 316, -234, -175, 316, -234,
	-105, 133, 302, 295, -150, 151, -222, 376, -133, 376,
	376, -160, 376, -132, -126, 179, -352, -298, -324, -190,
	-190, -178, 206, 68, 377, -223, -180, -170, -254, 377,
	-106, 76, -106, 7, 375, 377, -104, 217, -103, -132,
	5, -132, -295, -132, -140, 216, 377, -117, -295, 27,
	27, -231, -242, 377, -231, -231, 377, -231, 375, -231,
	5, -231, 377, 377, 377, 377, -335, -132, -231, 377,
	377, 377, -237, 133, 100, 211, 376, -231, 377, 377,
	381, 377, 377, 377, 377, -239, 140, 45, -261, -239,
	-165, -228, 7, -229, -295, 374, -257, -165, 377, -132,
	-132, -221, 109, -311, 69, -312, 58, 117, 74, 205,
	207, 328, 237, 55, 94, 246, 377, 377, 381, -139,
	-183, 58, -139, -231, 376, -164, -165, 205, 94, 205,
	94, 87, 324, -132, -132, -140, -132, -132, 376, 377,
	-140, 377, -132, -301, 313, -151, -152, 228, 149, -164,
	376, -165, -148, 31, -164, 215, -127, 178, -352, -298,
	-124, -215, 376, 215, -65, -190, 359, 87, 87, 375,
	381, 376, 359, 359, -117, -231, -231, 377, 377, -162,
	-329, 228, 377, -232, 133, 376, -242, 377, -231, -330,
	347, -231, -175, -330, 377, -258, 7, 377, -221, -132,
	-295, -132, 117, 146, 207, 174, 376, -232, -140, -220,
	-348, 73, 299, -260, -117, -295, -117, 377, -175, 377,
	377, 207, 207, -231, -270, -121, -121, 316, 316, -175,
	316, 316, -234, 45, 226, 377, -164, 377, 377, -65,
	377, -140, -352, -298, -125, 101, -165, 69, -186, -109,
	376, 376, 376, -103, -104, -300, -300, 377, -162, 45,
	-232, -242, 377, 377, -331, -332, -132, -257, 375, -312,
	-133, 205, -231, -134, 376, -150, 376, -139, -162, 246,
	-120, 58, -132, -132, -162, 376, 376, 187, 241, -140,
	-220, 377, -150, -220, 376, -298, -126, 330, 206, 377,
	-132, -301, -301, 377, -336, 241, 266, -175, 377, 381,
	31, 109, 377, -313, 193, -132, -165, -117, 377, -140,
	-115, 335, -295, 377, -175, -175, 376, 376, 376, -150,
	-220, -150, -164, -127, 280, -223, 377, 377, 377, -337,
	-338, 37, 325, 78, -231, -337, -332, -334, 117, -314,
	-317, -316, 215, 134, 227, 285, 377, 377, -160, -231,
	377, 377, -165, -165, -165, -150, 377, -179, -105, -105,
	-338, 234, 129, 265, 234, 129, -132, -316, 215, -317,
	215, 330, 97, -313, 377, 377, 377, -220, -223, 27,
	-315, 202, 258, 49, 280, -315, -314, 376, 376, -122,
	49, 258, -150, -338, 20, 207, 94, -153, 228, -154,
	228, 377, -295, 377, -295, 340, 340, -155, 376, 183,
	381, -152, -151, -156, -157, -231, 94, 194, 311, -153,
	376, 381, 377, 381, 376, -156, -153, -157, -156, 377,
	377, 381, -152, -151, -154, 381, -154,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 57, 59, 61, 63,
	0, 0, 150, 152, 0, 306, 0, 159, 161, 163,
	165, -2, 168, 170, 0, 0, 0, 181, 183, 185,
	187, 189, 0, 0, -2, 0, 0, 0, 0, 0,
	0, 0, 0, 669, -2, 0, 286, 288, 297, 299,
	301, 303, 304, 0, 349, 351, 353, 355, 357, 359,
	361, 363, 365, 367, 369, 371, 373, 375, 377, 378,
	380, 382, 384, 0, 590, 592, 594, -2, 65, 66,
	67, 68, 69, 70, 78, 79, 80, 81, 72, 74,
	75, 77, 0, 705, -2, 716, 0, 0, 0, -2,
	0, -2, -2, -2, 0, 0, 682, 684, 686, 688,
	-2, 0, 0, -2, 7, 13, 15, 17, 20, 22,
	24, 26, 28, 30, 32, 34, 36, 38, 40, 43,
	49, 51, 53, 56, 58, 60, 62, 64, 0, 0,
	0, 0, 0, 0, 125, 270, 0, 1286, 1210, 1216,
	1217, 1241, 1242, 1243, 1260, 1261, 1262, 1263, 1264, 1265,
	1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
	1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316,
	1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
	1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366,
	1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
	1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
	1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
	1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 151, 153, 154, 0,
	0, 0, 1212, 1286, 160, 162, 164, 166, 0, 172,
	0, 0, 0, 0, 557, 169, 171, 261, 1348, 263,
	265, 0, 0, 0, 0, 175, 176, 177, 178, 179,
	180, 182, 184, 186, 188, 190, 191, 0, 0, 0,
	0, 0, 260, 258, 213, 214, 0, 243, 244, 245,
	246, 247, 249, 217, 219, 220, 222, 224, 226, 228,
	229, 231, 233, 234, 236, 238, 239, 241, 0, 0,
	0, 267, 273, 274, 275, 277, 278, 279, 280, 281,
	282, 283, 0, 131, 0, 461, 256, 254, 0, 127,
	0, 587, 0, 269, 588, 589, 584, 585, 1375, 613,
	287, 289, 298, 300, 302, -2, -2, 1469, -2, 313,
	-2, 321, 1475, 0, 324, 325, 328, -2, 209, 350,
	352, 354, 356, 358, 360, 362, 364, 366, 368, 370,
	372, 374, 376, 379, 381, 383, 385, 386, 0, 0,
	0, 390, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, 0, -2, -2, 0, 0, -2,
	0, 0, 389, 391, 392, 393, 0, 591, 593, 595,
	0, 547, 707, 0, 0, -2, 680, 681, -2, 0,
	711, 711, 711, 0, 0, 681, 679, 0, 290, 0,
	292, 0, 390, 295, 296, 329, 330, 1195, 1196, 912,
	0, 0, 0, 0, 0, 0, 1014, 1016, 1440, 1469,
	0, 1018, 1019, 0, 1021, 1023, 1024, 0, 1027, 1028,
	1180, 1212, 1226, 1227, 1228, 1229, 0, 0, 1232, 0,
	1234, 1235, 1236, 1082, 1038, -2, -2, 1224, 840, 841,
	842, 843, -2, 1483, 1042, 1045, 1048, 1051, 1052, 1055,
	1056, 0, 1424, 1441, 1442, 1465, 1466, 1474, 1478, 1479,
	1448, 1462, 1449, 1436, 1446, 1460, 1292, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1250, 874, 875, 880, 881, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496,
	1497, 1498, 883, 615, 597, 606, 615, 599, 600, 601,
	602, 603, 604, 605, 608, 0, 697, 1354, 700, 1223,
	698, 683, 685, 0, 687, 0, 0, 691, 713, 712,
	746, 747, 0, 695, 696, 706, 762, 800, 777, 768,
	0, 0, 2, 71, 0, 1448, 800, 73, 0, 1448,
	800, 76, 0, 82, 0, 1448, 1215, 0, 1255, 1256,
	1257, 1258, 1259, 1483, 1499, 1500, 1501, 1502, 1503, 1504,
	1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514,
	1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524,
	1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534,
	1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
	1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
	1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
	1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
	1575, 1576, 1577, 1578, 1579, 0, 0, 271, 272, 1220,
	1218, 1219, 0, 155, 156, 157, 158, 0, 0, 1213,
	1189, 1187, 1188, 167, 526, 1448, -2, 549, 526, 553,
	-2, 704, 1448, 629, 262, 264, 0, 174, 0, 642,
	0, 644, 0, 659, 806, 117, 1448, 194, 207, 117,
	1448, 197, 117, 1448, 200, 1208, 117, 1448, 203, 204,
	1448, 206, 257, 0, 0, -2, 250, 252, 1251, 1252,
	1253, 1254, -2, 248, 218, 221, 223, 225, 227, 230,
	232, 235, 237, 240, 242, -2, 0, 0, 0, 460,
	0, 0, 0, 586, 0, 612, 305, 0, 310, 0,
	312, 1435, -2, -2, 316, 616, 620, 621, 622, 0,
	0, 0, 0, 0, 0, 0, 326, 210, 0, 387,
	388, 396, 397, 132, 133, 347, 348, 0, 400, 421,
	433, 0, 0, 404, 406, 459, 408, 0, 0, 410,
	0, 412, 0, 414, 0, 416, 0, 418, 420, 422,
	434, 424, 706, 426, 0, 428, 432, 0, 437, 0,
	439, 440, 441, 0, 0, 447, 0, 0, 394, 395,
	117, 804, 0, 0, 0, -2, 0, 675, 725, 726,
	0, 0, 0, 0, 709, 710, 0, 0, 0, 671,
	672, 291, 0, 294, 0, 0, 0, 0, 1115, 1116,
	1117, 1118, 1119, 1120, 1123, 1124, 1121, 1122, 1125, 1126,
	0, 0, 0, 0, 0, 1127, 0, 0, 0, 0,
	0, 0, 0, 0, 1128, 1129, 1130, 0, 0, 1132,
	0, 1134, 0, 0, 0, 0, 0, 0, 1194, 0,
	0, 1131, 917, 918, 919, 951, 952, 0, 1015, 1191,
	1184, 1017, 0, 1137, -2, 1138, 0, 0, 1020, 1025,
	1026, 1137, 0, 1179, -2, 0, 1231, 0, 909, 1084,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1160, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 877, 888, 885, 884, 861, 0, 860, 858,
	0, 862, 0, 0, 0, 596, -2, 598, 0, 610,
	0, 699, 0, 0, 748, 751, 1200, 1204, 1205, 751,
	0, 1197, 0, 0, 0, 0, 797, 797, 797, 795,
	771, 0, 777, 0, -2, 801, 789, 0, -2, 768,
	0, 0, 802, 0, 83, 581, 96, 0, 581, 581,
	0, 0, 0, 0, 0, 92, 0, 0, 0, 0,
	0, 0, 94, 0, 0, 0, 0, 791, 1211, 0,
	1185, 1186, 147, 0, 0, 1206, 1190, 467, 0, 0,
	548, 0, 703, 0, 0, 0, 1448, 556, 1244, 631,
	0, 810, 0, 645, 0, 0, 807, 0, 192, 0,
	115, 116, 0, 195, 0, 198, 0, 0, 201, 0,
	0, 0, 1138, 706, 0, 0, 276, 0, 0, 706,
	0, 1140, 818, 819, 820, 821, 822, 909, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 838, 839, 847, 848, 849, 850, 851, 852, 853,
	854, 855, 856, 857, 871, 0, 846, 846, 846, 863,
	864, 872, 873, 878, 879, 890, 891, 893, 895, 889,
	889, 889, 886, 887, 791, 134, 0, 0, 0, 0,
	-2, 318, 0, 618, 0, 623, 338, 339, 340, 625,
	626, 322, 341, 342, 343, 344, 345, 346, 0, 543,
	0, 545, 1237, 0, 319, 331, 320, 323, 0, 211,
	398, 399, 401, 402, 403, 407, 0, 456, 409, 411,
	413, 415, 417, 425, 429, 706, 435, 438, 442, 443,
	444, 445, 0, 0, 0, 546, 0, 307, 0, 451,
	0, 678, 723, 724, 729, 733, 734, 737, 740, 741,
	731, 912, 692, 693, 694, 717, 718, 568, 0, 0,
	293, 913, 814, 815, 865, 866, 867, 868, 869, 914,
	915, 0, 920, 921, 922, 923, 924, 925, 926, 927,
	928, 929, -2, -2, -2, -2, -2, -2, -2, -2,
	938, 939, 940, 941, 942, 943, 944, 945, -2, -2,
	-2, 949, 950, -2, 1133, 1135, 0, 1194, 0, -2,
	0, -2, -2, -2, -2, 963, 0, 965, 968, 970,
	972, 0, 0, 0, 0, 1193, 982, 1171, 0, 0,
	1112, 1113, 1114, 967, 0, 0, 1192, 1183, 0, 0,
	1136, 1022, 0, 0, 0, 1144, 1178, 1174, 0, 1029,
	716, 0, 0, 0, 0, 1036, 0, 1240, 896, 897,
	898, 899, 900, 901, 910, 1092, 0, 0, 0, 1043,
	1044, 1046, 1047, 1049, 1050, 1053, 1054, 0, 0, 0,
	1060, 0, 1147, -2, -2, -2, -2, -2, -2, -2,
	0, 1062, 0, 1064, 1138, 1157, 0, 0, 985, 0,
	0, 0, 0, 1469, 0, 1067, 1138, 1165, 0, 0,
	0, 0, 0, 1138, 0, 1170, 0, 0, 0, 0,
	0, 1078, 0, 1080, 0, 0, 0, 0, 0, 0,
	609, 701, 0, 0, 810, 0, 0, 0, 1203, 810,
	0, 1199, 0, 0, 0, 0, 0, 792, 796, 793,
	794, 0, 0, 777, 789, 759, 0, 0, 0, 766,
	767, 788, 0, 787, 776, -2, 0, 0, 0, 0,
	0, 580, 98, 1448, 0, 119, 0, 0, 516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 1214, 0, 137, 0, 1221, 0, 0, 0,
	0, 0, 466, 1220, 468, 470, 471, 472, 473, 1245,
	0, 1245, 0, 0, 0, 0, 0, 0, 633, 639,
	0, 728, 0, 657, 647, 0, 0, 0, 657, 661,
	662, 664, 665, 0, 0, 808, 208, 117, 117, 1209,
	117, 117, 205, 259, 0, 215, 251, 0, 0, 0,
	253, 255, 0, 811, 813, 0, 823, 0, 146, 0,
	0, 0, 0, 311, 0, 617, 624, 0, 335, 0,
	337, 544, 1239, 1238, 0, 212, 458, 284, 427, 430,
	453, 454, 455, 805, 0, 452, 0, 735, 0, 0,
	732, 738, 739, 0, 720, 566, 567, 0, 0, 0,
	-2, -2, 0, 0, 0, 983, -2, 964, 966, 969,
	971, 973, 0, 0, 0, 0, 0, 0, 0, 984,
	1137, 0, 1181, 1184, -2, 1139, 1142, 1143, 0, 0,
	1175, 0, 0, 0, 0, 715, 716, 716, 716, 1035,
	0, 0, 0, 0, 0, 0, 1037, 0, 0, 0,
	0, 0, 0, 1059, 0, 1061, 1063, 0, 0, 1065,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 988, 989, 990, 0, 1137, 1066, 1163,
	1164, 0, 0, 0, 0, 0, 0, 1072, 0, 1169,
	0, 0, 0, 1076, 1077, 1079, 0, 844, 0, 870,
	892, 894, 882, 706, 1222, 743, 1201, 791, 750, 752,
	1202, 743, 1198, 779, 0, 781, 0, 0, 0, 783,
	0, 772, 0, 774, 789, 764, 0, 0, 757, 0,
	756, 777, 785, 0, 0, 803, 97, 570, 0, 0,
	0, 100, 1448, 108, 0, 498, 0, 0, 0, 0,
	0, 583, 109, 1448, 117, 1448, 117, 110, 84, 581,
	85, 0, 0, 576, 0, 0, 569, 86, 0, 578,
	0, 0, 146, 0, 0, 148, 0, 1207, 475, 525,
	0, 0, 1245, 0, 464, 526, 550, 552, 0, 0,
	635, 639, 0, 638, 704, 657, 727, 809, 640, 657,
	0, 0, 0, 649, 646, 643, 810, 0, 0, 0,
	0, 193, 196, 199, 202, 1139, 266, 0, 0, 1141,
	0, 816, 0, 0, 126, 0, 135, 268, 308, 309,
	314, 333, 334, 336, 332, 0, 0, 0, 0, 0,
	0, 719, 568, 0, 916, -2, 0, 0, 0, 0,
	-2, 0, 0, 0, 1172, 0, 0, 0, 1183, -2,
	1145, 1173, 1177, 0, 1030, 0, 0, 0, 0, 1233,
	902, 903, 904, 905, 906, 907, 908, 0, 1090, 1091,
	1095, 0, 0, 1041, 0, 0, 1146, 1156, 1158, 986,
	987, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, -2, -2, -2, 1004, 1005, 1006, -2, -2, -2,
	0, 0, 0, 1159, 0, 0, 1161, 1162, 1166, 1167,
	0, 1069, 1070, 1071, 1168, 0, 0, 0, 876, 0,
	0, 745, 0, 749, 0, 745, 780, 0, 799, 782,
	762, 773, 0, 770, 760, 0, 761, 0, 789, 0,
	0, 769, 0, 0, 0, 0, 118, 496, 515, 0,
	0, 559, 565, 565, 0, 1039, 1040, 0, 0, 0,
	102, 0, 0, 0, 0, 106, 0, 112, 0, 0,
	0, 91, 0, 0, 0, 0, 90, 0, 0, 89,
	124, 0, 0, 149, 480, 0, 469, 0, 0, 0,
	467, 0, 0, 0, 637, 639, 0, 630, 631, 173,
	641, 655, 656, 654, 0, 657, 663, 660, 666, 0,
	0, 128, 0, 0, 817, 824, 144, 1338, 142, 139,
	141, 285, 448, 449, 450, 730, 736, 721, 568, 0,
	0, -2, 0, 976, -2, -2, 1108, 1139, 1182, 1176,
	1230, 716, 1031, 1033, 1034, 911, 1097, 1094, 0, 1081,
	1057, 1058, 1155, 0, 0, 0, 0, 1139, 1110, 1068,
	0, 1074, 1075, 845, 702, 1086, 0, 0, 753, 1086,
	0, 777, 775, 758, 754, 0, 765, 0, 786, 572,
	574, 99, 0, 497, 0, 500, 0, 0, 0, 0,
	506, 507, 0, 0, 0, 0, 517, 524, 0, 568,
	1225, 0, 568, 0, 0, 0, 0, 0, 114, 0,
	0, 582, 0, 117, 117, 571, 0, 0, 0, 0,
	577, 0, 579, 136, 0, 462, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 639, 0, 632,
	633, 0, 0, 0, 648, 658, 0, 0, 0, 812,
	0, 0, 0, 0, 722, -2, -2, 977, 1109, 0,
	716, 0, 1083, -2, 0, 0, 0, 1111, 0, 689,
	0, 744, 742, 690, 798, 789, 0, 784, 101, 0,
	501, 502, 1245, 0, 505, 508, 0, 510, 1247, 475,
	0, 521, 522, 560, 561, 564, 562, 565, 716, 519,
	0, 103, 104, 113, 121, 105, 111, 0, 0, 716,
	0, 0, 790, 0, 0, 524, 0, 514, 475, 465,
	524, 0, 0, 634, 635, 0, 0, 0, 667, 668,
	0, 0, 0, 143, 0, 138, 140, 1032, 1100, 0,
	-2, 0, 1012, 1073, 1085, 1087, 0, 763, 755, 499,
	503, 0, 0, 530, 0, 518, 0, 568, 0, 0,
	123, 0, 573, 575, 0, 0, 0, 0, 0, 0,
	475, 524, 463, 475, 0, 636, 637, 0, 651, 810,
	653, 0, 0, 145, 0, 0, 0, 1096, 1013, 0,
	0, 0, 509, 535, 0, 0, 0, 563, 1030, 526,
	107, 0, 120, 0, 0, 0, 0, 0, 0, 512,
	475, 554, 0, 628, 0, 652, 146, 146, 1093, 1098,
	1101, -2, 1408, 1283, 0, 1099, 1088, 1089, 0, 511,
	531, 532, 0, 527, 528, 529, 1246, 523, 530, 122,
	93, 95, 0, 0, 0, 513, 524, 810, 129, 130,
	0, 1103, 1104, 1105, 1106, 1107, 504, 533, 0, 534,
	0, 0, 0, 535, 0, 0, 478, 475, 650, 0,
	536, 0, 539, 540, 0, 537, 520, 0, 0, 474,
	476, 477, 555, 1102, 538, 541, 542, 0, 0, 0,
	0, 481, 0, 482, 0, 0, 0, 480, 0, 0,
	0, 479, 485, 0, 488, 490, 491, -2, 0, 483,
	0, 0, 486, 0, 0, 0, 484, 489, 0, 487,
	480, 0, 479, 495, 493, 0, 494,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 365, 3, 371, 366, 3,
	376, 377, 369, 367, 381, 368, 378, 370, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 385, 380,
	357, 359, 358, 361, 382, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 374, 3, 375, 372, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 383, 364, 384, 362,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 360,
	57700, 363, 57701, 373, 57702, 379, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:896
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:902
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:908
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:917
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:919
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:925
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:926
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:928
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:930
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:932
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:934
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:935
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:936
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:937
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:938
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:949
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:952
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:961
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:962
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:963
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "ALTER")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1001
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1012
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 82:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1067
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1073
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1079
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1085
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1094
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1103
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1112
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1122
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1126
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1132
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1136
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1148
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1158
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1172
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1175
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1195
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1205
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = nil
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1244
		{
			sqlVAL.union.val = DropCascade
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.union.val = DropRestrict
		}
	case 117:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = DropDefault
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1267
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1268
		{
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1271
		{
			return unimplemented(sqllex, "alter using")
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1272
		{
		}
	case 124:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.str = "CSV"
		}
	case 129:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1356
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1360
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1363
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1371
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1377
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1381
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1409
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1425
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1429
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1432
		{
		}
	case 147:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1453
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1454
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1473
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1476
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1484
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1485
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1486
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1490
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1491
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			return helpWith(sqllex, "CREATE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			return helpWith(sqllex, "DELETE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1520
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1522
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1523
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1533
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1534
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1535
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1550
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 195:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1558
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1562
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1565
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1581
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1588
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 201:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1611
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1619
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 205:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1626
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1630
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1677
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1686
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1689
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1691
		{
			return helpWith(sqllex, "DELETE")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1693
		{
			return helpWith(sqllex, "INSERT")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1694
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1696
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1697
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1702
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1703
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1705
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1706
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1713
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1714
		{ /* SKIP DOC */
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1735
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1750
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1772
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 260:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1794
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1798
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1801
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1818
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1821
		{
			return helpWith(sqllex, "GRANT")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1841
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1845
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1849
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1860
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1867
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 279:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1886
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1902
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 284:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1910
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1914
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1919
		{
			return helpWith(sqllex, "RESET")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1920
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1928
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1932
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1935
		{
			return helpWith(sqllex, "RESET")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1951
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1954
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1959
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1960
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1961
		{ /* SKIP DOC */
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1962
		{ /* SKIP DOC */
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1963
		{
			return unimplemented(sqllex, "set local")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1970
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.expr()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1982
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1986
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1989
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1995
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2019
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2036
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2039
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2044
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2048
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2052
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2061
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2064
		{
			return unimplemented(sqllex, "set from current")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2066
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2072
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2076
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2086
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2092
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2096
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2102
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2110
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2124
		{
			sqlVAL.union.val = Low
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2128
		{
			sqlVAL.union.val = Normal
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2132
		{
			sqlVAL.union.val = High
		}
	case 341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2143
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2147
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2175
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2176
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2177
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2178
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2179
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2180
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2181
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2182
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2183
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2184
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2185
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2186
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2187
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2188
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2191
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2192
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2194
		{
			return helpWith(sqllex, "SHOW")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2201
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2202
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2203
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.str = "client_encoding"
		}
	case 394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2217
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2218
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2229
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2239
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2243
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2246
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2248
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2251
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2262
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2273
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2281
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2295
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2297
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2300
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2305
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2313
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2316
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2321
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2329
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2332
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2351
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2361
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2364
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2366
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2371
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2384
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2387
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2429
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2440
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2448
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2451
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2459
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2462
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2466
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: Name(sqlDollar[7].str)}}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2470
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2474
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2478
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2482
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2488
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2492
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2496
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2502
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2513
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2517
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2527
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2530
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2565
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 465:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2594
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2600
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2604
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2610
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2630
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2637
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2641
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = DropDefault
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2652
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2658
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2665
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   Name(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 484:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 485:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2689
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         Name(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2709
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = PartitionDefault{}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  Name(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 494:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2737
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 495:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2745
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         Name(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2755
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2770
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2780
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2784
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2788
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2796
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2818
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2822
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2830
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2834
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2838
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 512:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2848
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2857
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 514:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2887
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2893
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2899
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2909
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2919
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2943
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2957
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2962
		{
			return unimplemented(sqllex, "match full")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2963
		{
			return unimplemented(sqllex, "match partial")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2964
		{
			return unimplemented(sqllex, "match simple")
		}
	case 530:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2965
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2984
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2988
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2994
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3000
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = NoAction
		}
	case 539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3012
		{
			sqlVAL.union.val = Restrict
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3016
		{
			sqlVAL.union.val = Cascade
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = SetNull
		}
	case 542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = SetDefault
		}
	case 543:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3030
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3048
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3051
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3059
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3062
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3066
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 551:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 552:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3080
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3087
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3116
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3127
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = true
		}
	case 558:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3135
		{
			sqlVAL.union.val = false
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3154
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3157
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3158
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3161
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 565:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3162
		{
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3166
		{
			sqlVAL.union.val = Ascending
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3170
		{
			sqlVAL.union.val = Descending
		}
	case 568:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 569:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3180
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3186
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3190
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3194
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3198
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3202
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3204
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3208
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3212
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3218
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = true
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = false
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3237
		{
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3238
		{
		}
	case 584:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3246
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3249
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3260
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3271
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3275
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3276
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3277
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3295
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3300
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3313
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3315
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3318
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 604:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3333
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3336
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3341
		{
			sqlVAL.str = ""
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3345
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3349
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 611:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3353
		{
			sqlVAL.str = ""
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3359
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 613:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3363
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3369
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3379
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3383
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3396
		{
		}
	case 619:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3398
		{
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3406
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3410
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3416
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3422
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3428
		{
			sqlVAL.union.val = ReadOnly
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3432
		{
			sqlVAL.union.val = ReadWrite
		}
	case 627:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 631:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.str = ""
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.str = ""
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 635:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.str = ""
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.str = ""
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3505
		{
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3506
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3524
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			return helpWith(sqllex, "INSERT")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3541
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3547
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3551
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3565
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3569
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3573
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3589
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3593
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 656:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 657:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3610
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 658:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3621
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3624
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3628
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3629
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3659
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3663
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3712
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3758
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3793
		{
			return helpWith(sqllex, "SELECT")
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3794
		{
			return helpWith(sqllex, "VALUES")
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3795
		{
			return helpWith(sqllex, "TABLE")
		}
	case 689:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			return helpWith(sqllex, "SELECT")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3845
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3863
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3885
		{
			return helpWith(sqllex, "TABLE")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 698:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3898
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3901
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 702:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3905
		{
			return unimplemented(sqllex, "cte")
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
		}
	case 704:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3909
		{
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 706:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3913
		{
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3917
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = true
		}
	case 710:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = false
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = false
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = true
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3940
		{
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3941
		{
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 716:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 718:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3961
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3988
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4012
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4027
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 735:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4050
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 736:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4054
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4058
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4064
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4068
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4069
		{
		}
	case 742:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4101
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4105
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4127
		{
			return helpWith(sqllex, "VALUES")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4129
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4141
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4144
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = &From{}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4166
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4211
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4221
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4248
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4266
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4273
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4275
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4279
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 769:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4308
		{
			sqlVAL.union.val = nil
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4314
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4320
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4328
		{
			sqlVAL.union.val = true
		}
	case 777:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4332
		{
			sqlVAL.union.val = false
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4356
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4360
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4364
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4368
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.str = astFullJoin
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4417
		{
			sqlVAL.str = astLeftJoin
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4421
		{
			sqlVAL.str = astRightJoin
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.str = astInnerJoin
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4431
		{
		}
	case 797:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4432
		{
		}
	case 798:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4443
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4447
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4471
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4475
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4518
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4532
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4540
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4551
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 815:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4562
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4564
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 824:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4575
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = jsonbColType
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4593
		{
			sqlVAL.union.val = jsonColType
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4597
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4601
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4605
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4609
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4613
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4617
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4621
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4625
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4629
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4633
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4664
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4673
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4687
		{
			sqlVAL.union.val = nil
		}
	case 847:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 848:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4698
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4702
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 850:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4706
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4710
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4722
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4726
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4730
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4734
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4738
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4748
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4752
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4761
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4770
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4779
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4783
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4790
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4794
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4798
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4802
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 869:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4806
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4816
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4834
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4866
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4888
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 885:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4892
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4896
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 887:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4900
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4905
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4906
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4911
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 891:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4915
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 892:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4919
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4923
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 894:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4927
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = year
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = month
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4946
		{
			sqlVAL.union.val = day
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4950
		{
			sqlVAL.union.val = hour
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4954
		{
			sqlVAL.union.val = minute
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4958
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 902:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4964
		{
			sqlVAL.union.val = month
		}
	case 903:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4968
		{
			sqlVAL.union.val = hour
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4972
		{
			sqlVAL.union.val = minute
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4976
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4980
		{
			sqlVAL.union.val = minute
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4988
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = nil
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4998
		{
			sqlVAL.union.val = second
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5001
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5025
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5029
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5033
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5036
		{
			return unimplemented(sqllex, "at tz")
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5045
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5049
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5053
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5057
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5061
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5065
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5069
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5073
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5077
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5081
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5085
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5109
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5121
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5125
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5129
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5133
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5137
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5161
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5165
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5244
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5262
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5266
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5274
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5278
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5282
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5286
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5298
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5302
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5306
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5310
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5338
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5342
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5346
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5350
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5354
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5358
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5366
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5446
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5459
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5467
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5483
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5496
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5500
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5505
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5509
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5513
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5517
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5521
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5529
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5533
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5536
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5537
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5550
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5561
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5568
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5577
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5578
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5582
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5584
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5588
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5591
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5593
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5597
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5600
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5602
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5609
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5610
		{
			return unimplemented(sqllex, "current role")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5612
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5616
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5619
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5625
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5629
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5640
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5642
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5645
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5647
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5650
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5652
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5656
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5659
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5660
		{
			return unimplemented(sqllex, "treat")
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5662
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5666
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5670
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5674
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5678
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5682
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5686
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5690
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5694
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5697
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5699
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5702
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5706
		{
			return unimplemented(sqllex, "within group")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5707
		{
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5711
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5715
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5722
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5726
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5732
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5736
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5742
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5750
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5754
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5758
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.str = ""
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5804
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5805
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5806
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5809
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5810
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5816
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5817
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5818
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5819
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5820
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5831
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5835
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5841
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5847
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5853
		{
			sqlVAL.union.val = Any
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5857
		{
			sqlVAL.union.val = Some
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5861
		{
			sqlVAL.union.val = All
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5866
		{
			sqlVAL.union.val = Plus
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5867
		{
			sqlVAL.union.val = Minus
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5868
		{
			sqlVAL.union.val = Mult
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5869
		{
			sqlVAL.union.val = Div
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5870
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5871
		{
			sqlVAL.union.val = Mod
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5872
		{
			sqlVAL.union.val = Bitand
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5873
		{
			sqlVAL.union.val = Bitor
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5874
		{
			sqlVAL.union.val = Pow
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5875
		{
			sqlVAL.union.val = Bitxor
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5876
		{
			sqlVAL.union.val = LT
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5877
		{
			sqlVAL.union.val = GT
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = EQ
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5879
		{
			sqlVAL.union.val = LE
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5880
		{
			sqlVAL.union.val = GE
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5881
		{
			sqlVAL.union.val = NE
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5885
		{
			sqlVAL.union.val = Like
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = NotLike
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5887
		{
			sqlVAL.union.val = ILike
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5888
		{
			sqlVAL.union.val = NotILike
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5900
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5906
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5910
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5916
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5920
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5926
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5930
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5936
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5940
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5946
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5950
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5972
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5976
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5980
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5986
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5993
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6018
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6022
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6026
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6030
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6036
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6042
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6052
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6056
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6062
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6066
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6077
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6084
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6088
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6094
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6111
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6117
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6128
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6134
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6140
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6156
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6166
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6175
		{
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6176
		{
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6185
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6191
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6195
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6204
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6210
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6214
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6220
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6229
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6233
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6237
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6255
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6259
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6265
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6269
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6280
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6290
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6294
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6307
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6311
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6315
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6319
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6325
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6329
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6338
		{
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6348
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6352
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6359
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6371
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6374
		{
			return unimplemented(sqllex, "func const")
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6376
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6380
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6383
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6385
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6389
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6393
		{
			sqlVAL.union.val = DNull
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6400
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6404
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6410
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6445
		{
			sqlVAL.str = ""
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6451
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6455
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
