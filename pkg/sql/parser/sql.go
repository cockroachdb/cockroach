// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:466
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CASCADE = 57389
const CASE = 57390
const CAST = 57391
const CHAR = 57392
const CHARACTER = 57393
const CHARACTERISTICS = 57394
const CHECK = 57395
const CLUSTER = 57396
const COALESCE = 57397
const COLLATE = 57398
const COLLATION = 57399
const COLUMN = 57400
const COLUMNS = 57401
const COMMIT = 57402
const COMMITTED = 57403
const CONCAT = 57404
const CONFLICT = 57405
const CONSTRAINT = 57406
const CONSTRAINTS = 57407
const COPY = 57408
const COVERING = 57409
const CREATE = 57410
const CROSS = 57411
const CUBE = 57412
const CURRENT = 57413
const CURRENT_CATALOG = 57414
const CURRENT_DATE = 57415
const CURRENT_ROLE = 57416
const CURRENT_TIME = 57417
const CURRENT_TIMESTAMP = 57418
const CURRENT_USER = 57419
const CYCLE = 57420
const DATA = 57421
const DATABASE = 57422
const DATABASES = 57423
const DATE = 57424
const DAY = 57425
const DEC = 57426
const DECIMAL = 57427
const DEFAULT = 57428
const DEALLOCATE = 57429
const DEFERRABLE = 57430
const DELETE = 57431
const DESC = 57432
const DISTINCT = 57433
const DO = 57434
const DOUBLE = 57435
const DROP = 57436
const ELSE = 57437
const ENCODING = 57438
const END = 57439
const ESCAPE = 57440
const EXCEPT = 57441
const EXISTS = 57442
const EXECUTE = 57443
const EXPERIMENTAL_FINGERPRINTS = 57444
const EXPLAIN = 57445
const EXTRACT = 57446
const EXTRACT_DURATION = 57447
const FALSE = 57448
const FAMILY = 57449
const FETCH = 57450
const FILTER = 57451
const FIRST = 57452
const FLOAT = 57453
const FLOORDIV = 57454
const FOLLOWING = 57455
const FOR = 57456
const FORCE_INDEX = 57457
const FOREIGN = 57458
const FROM = 57459
const FULL = 57460
const GRANT = 57461
const GRANTS = 57462
const GREATEST = 57463
const GROUP = 57464
const GROUPING = 57465
const HAVING = 57466
const HELP = 57467
const HIGH = 57468
const HOUR = 57469
const INCREMENTAL = 57470
const IF = 57471
const IFNULL = 57472
const ILIKE = 57473
const IN = 57474
const INTERLEAVE = 57475
const INDEX = 57476
const INDEXES = 57477
const INITIALLY = 57478
const INNER = 57479
const INSERT = 57480
const INT = 57481
const INT2VECTOR = 57482
const INT8 = 57483
const INT64 = 57484
const INTEGER = 57485
const INTERSECT = 57486
const INTERVAL = 57487
const INTO = 57488
const IS = 57489
const ISOLATION = 57490
const JOIN = 57491
const KEY = 57492
const KEYS = 57493
const LATERAL = 57494
const LC_CTYPE = 57495
const LC_COLLATE = 57496
const LEADING = 57497
const LEAST = 57498
const LEFT = 57499
const LEVEL = 57500
const LIKE = 57501
const LIMIT = 57502
const LOCAL = 57503
const LOCALTIME = 57504
const LOCALTIMESTAMP = 57505
const LOW = 57506
const LSHIFT = 57507
const MATCH = 57508
const MINUTE = 57509
const MONTH = 57510
const NAN = 57511
const NAME = 57512
const NAMES = 57513
const NATURAL = 57514
const NEXT = 57515
const NO = 57516
const NO_INDEX_JOIN = 57517
const NORMAL = 57518
const NOT = 57519
const NOTHING = 57520
const NULL = 57521
const NULLIF = 57522
const NULLS = 57523
const NUMERIC = 57524
const OF = 57525
const OFF = 57526
const OFFSET = 57527
const OID = 57528
const ON = 57529
const ONLY = 57530
const OPTIONS = 57531
const OR = 57532
const ORDER = 57533
const ORDINALITY = 57534
const OUT = 57535
const OUTER = 57536
const OVER = 57537
const OVERLAPS = 57538
const OVERLAY = 57539
const PARENT = 57540
const PARTIAL = 57541
const PARTITION = 57542
const PASSWORD = 57543
const PLACING = 57544
const POSITION = 57545
const PRECEDING = 57546
const PRECISION = 57547
const PREPARE = 57548
const PRIMARY = 57549
const PRIORITY = 57550
const QUERIES = 57551
const RANGE = 57552
const READ = 57553
const REAL = 57554
const RECURSIVE = 57555
const REF = 57556
const REFERENCES = 57557
const REGCLASS = 57558
const REGPROC = 57559
const REGPROCEDURE = 57560
const REGNAMESPACE = 57561
const REGTYPE = 57562
const RENAME = 57563
const REPEATABLE = 57564
const RELEASE = 57565
const RESET = 57566
const RESTORE = 57567
const RESTRICT = 57568
const RETURNING = 57569
const REVOKE = 57570
const RIGHT = 57571
const ROLLBACK = 57572
const ROLLUP = 57573
const ROW = 57574
const ROWS = 57575
const RSHIFT = 57576
const SAVEPOINT = 57577
const SCATTER = 57578
const SEARCH = 57579
const SECOND = 57580
const SELECT = 57581
const SERIAL = 57582
const SERIALIZABLE = 57583
const SESSION = 57584
const SESSIONS = 57585
const SESSION_USER = 57586
const SET = 57587
const SETTING = 57588
const SETTINGS = 57589
const SHOW = 57590
const SIMILAR = 57591
const SIMPLE = 57592
const SMALLINT = 57593
const SMALLSERIAL = 57594
const SNAPSHOT = 57595
const SOME = 57596
const SPLIT = 57597
const SQL = 57598
const START = 57599
const STATUS = 57600
const STDIN = 57601
const STRICT = 57602
const STRING = 57603
const STORING = 57604
const SUBSTRING = 57605
const SYMMETRIC = 57606
const SYSTEM = 57607
const TABLE = 57608
const TABLES = 57609
const TEMPLATE = 57610
const TESTING_RANGES = 57611
const TESTING_RELOCATE = 57612
const TEXT = 57613
const THEN = 57614
const TIME = 57615
const TIMESTAMP = 57616
const TIMESTAMPTZ = 57617
const TO = 57618
const TRAILING = 57619
const TRANSACTION = 57620
const TREAT = 57621
const TRIM = 57622
const TRUE = 57623
const TRUNCATE = 57624
const TYPE = 57625
const UNBOUNDED = 57626
const UNCOMMITTED = 57627
const UNION = 57628
const UNIQUE = 57629
const UNKNOWN = 57630
const UPDATE = 57631
const UPSERT = 57632
const USE = 57633
const USER = 57634
const USERS = 57635
const USING = 57636
const UUID = 57637
const VALID = 57638
const VALIDATE = 57639
const VALUE = 57640
const VALUES = 57641
const VARCHAR = 57642
const VARIADIC = 57643
const VIEW = 57644
const VARYING = 57645
const WHEN = 57646
const WHERE = 57647
const WINDOW = 57648
const WITH = 57649
const WITHIN = 57650
const WITHOUT = 57651
const WRITE = 57652
const YEAR = 57653
const ZONE = 57654
const NOT_LA = 57655
const WITH_LA = 57656
const AS_LA = 57657
const POSTFIXOP = 57658
const UMINUS = 57659

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMPLATE",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:5593

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 32,
	336, 32,
	-2, 447,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	1, 420,
	187, 420,
	227, 420,
	332, 420,
	334, 420,
	336, 420,
	-2, 430,
	-1, 68,
	1, 423,
	187, 423,
	227, 423,
	332, 423,
	334, 423,
	336, 423,
	-2, 429,
	-1, 77,
	1, 32,
	336, 32,
	-2, 447,
	-1, 446,
	1, 179,
	336, 179,
	-2, 1022,
	-1, 513,
	108, 457,
	160, 457,
	185, 457,
	-2, 426,
	-1, 516,
	108, 456,
	160, 456,
	185, 456,
	-2, 424,
	-1, 663,
	108, 456,
	160, 456,
	185, 456,
	-2, 427,
	-1, 723,
	333, 954,
	-2, 947,
	-1, 724,
	333, 955,
	-2, 948,
	-1, 730,
	5, 623,
	333, 623,
	-2, 1135,
	-1, 754,
	5, 584,
	-2, 1109,
	-1, 755,
	5, 617,
	333, 617,
	-2, 1111,
	-1, 756,
	5, 592,
	-2, 1112,
	-1, 757,
	5, 591,
	-2, 1113,
	-1, 758,
	5, 617,
	333, 617,
	-2, 1116,
	-1, 759,
	5, 617,
	333, 617,
	-2, 1117,
	-1, 760,
	5, 618,
	-2, 1120,
	-1, 761,
	5, 578,
	-2, 1121,
	-1, 762,
	5, 578,
	-2, 1122,
	-1, 763,
	5, 599,
	-2, 1126,
	-1, 764,
	5, 579,
	-2, 1131,
	-1, 765,
	5, 580,
	-2, 1132,
	-1, 766,
	5, 581,
	-2, 1133,
	-1, 767,
	5, 582,
	-2, 1134,
	-1, 768,
	5, 578,
	-2, 1139,
	-1, 769,
	5, 585,
	-2, 1144,
	-1, 770,
	5, 583,
	-2, 1147,
	-1, 771,
	5, 615,
	333, 615,
	-2, 1149,
	-1, 772,
	5, 619,
	-2, 1152,
	-1, 773,
	5, 621,
	-2, 1153,
	-1, 774,
	5, 614,
	333, 614,
	-2, 1158,
	-1, 1034,
	99, 430,
	108, 430,
	144, 430,
	160, 430,
	185, 430,
	191, 430,
	286, 430,
	-2, 742,
	-1, 1043,
	333, 931,
	-2, 919,
	-1, 1257,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 658,
	-1, 1258,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 659,
	-1, 1259,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 660,
	-1, 1263,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 664,
	-1, 1264,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 665,
	-1, 1265,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 666,
	-1, 1268,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 671,
	-1, 1274,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 673,
	-1, 1276,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 677,
	-1, 1277,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 678,
	-1, 1278,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 679,
	-1, 1279,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 680,
	-1, 1306,
	196, 813,
	-2, 816,
	-1, 1335,
	117, 853,
	333, 954,
	-2, 947,
	-1, 1336,
	117, 854,
	-2, 1105,
	-1, 1337,
	117, 855,
	-2, 1021,
	-1, 1338,
	117, 856,
	-2, 989,
	-1, 1339,
	117, 857,
	-2, 1005,
	-1, 1340,
	117, 858,
	-2, 1020,
	-1, 1341,
	117, 859,
	-2, 1068,
	-1, 1501,
	99, 430,
	108, 430,
	144, 430,
	160, 430,
	185, 430,
	191, 430,
	286, 430,
	-2, 513,
	-1, 1505,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 672,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 674,
	-1, 1511,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 675,
	-1, 1529,
	196, 812,
	-2, 815,
	-1, 1721,
	1, 514,
	69, 514,
	99, 514,
	108, 514,
	118, 514,
	122, 514,
	124, 514,
	137, 514,
	144, 514,
	149, 514,
	157, 514,
	160, 514,
	172, 514,
	185, 514,
	187, 514,
	191, 514,
	227, 514,
	229, 514,
	286, 514,
	294, 514,
	305, 514,
	306, 514,
	315, 514,
	332, 514,
	334, 514,
	336, 514,
	337, 514,
	-2, 513,
	-1, 1723,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 676,
	-1, 1728,
	147, 0,
	-2, 692,
	-1, 1738,
	196, 814,
	-2, 817,
	-1, 1772,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 719,
	-1, 1773,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 720,
	-1, 1774,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 721,
	-1, 1778,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 725,
	-1, 1779,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 726,
	-1, 1780,
	13, 0,
	14, 0,
	15, 0,
	316, 0,
	317, 0,
	318, 0,
	-2, 727,
	-1, 1901,
	147, 0,
	-2, 693,
	-1, 1904,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 696,
	-1, 1905,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 698,
	-1, 2011,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 697,
	-1, 2012,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	131, 0,
	132, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 699,
	-1, 2019,
	147, 0,
	-2, 728,
	-1, 2075,
	147, 0,
	-2, 729,
	-1, 2140,
	36, 0,
	131, 0,
	159, 0,
	249, 0,
	313, 0,
	319, 0,
	-2, 1108,
}

const sqlPrivate = 57344

const sqlLast = 30779

var sqlAct = [...]int{

	724, 2139, 1675, 2117, 2081, 2164, 2118, 1499, 1945, 1128,
	2119, 1716, 517, 2138, 1136, 1717, 949, 714, 1749, 1192,
	1991, 1892, 1866, 1971, 1823, 1622, 1685, 1809, 313, 1496,
	297, 955, 52, 1877, 90, 90, 90, 1221, 524, 67,
	1472, 538, 700, 562, 1623, 1196, 315, 90, 90, 90,
	1474, 717, 90, 1871, 1191, 90, 582, 1210, 1039, 1693,
	1540, 847, 1590, 90, 499, 1229, 504, 777, 1422, 1589,
	1304, 815, 90, 90, 1236, 1702, 90, 787, 1195, 90,
	90, 90, 90, 67, 1486, 90, 90, 951, 790, 1137,
	683, 1416, 1097, 1228, 1361, 1169, 722, 721, 1088, 1314,
	1481, 694, 699, 522, 1288, 553, 1291, 1234, 306, 22,
	304, 30, 303, 16, 1217, 1153, 67, 1120, 605, 305,
	8, 975, 1185, 819, 816, 912, 1332, 792, 1162, 1030,
	516, 693, 684, 498, 604, 1073, 1069, 583, 285, 575,
	574, 572, 1199, 1130, 980, 1824, 527, 666, 68, 495,
	82, 667, 490, 716, 445, 431, 665, 910, 441, 422,
	568, 823, 86, 646, 1231, 671, 525, 647, 2004, 1528,
	69, 2005, 434, 1129, 521, 983, 984, 832, 536, 832,
	521, 543, 546, 832, 536, 284, 22, 1497, 30, 2155,
	16, 488, 812, 2134, 806, 1532, 1822, 8, 986, 91,
	1533, 1133, 1560, 1561, 2129, 1433, 830, 1172, 2128, 776,
	2125, 1172, 2115, 812, 2110, 1159, 514, 812, 481, 2106,
	544, 985, 812, 2077, 2071, 1364, 1159, 812, 1172, 2053,
	2049, 442, 1822, 812, 1166, 1434, 2059, 1531, 513, 529,
	535, 2044, 1172, 541, 2043, 316, 548, 2013, 2001, 1998,
	1159, 842, 1999, 1985, 1575, 1982, 1822, 1980, 812, 1956,
	1822, 1955, 812, 32, 1822, 505, 983, 984, 1927, 299,
	20, 1172, 1124, 1906, 33, 57, 1172, 991, 1167, 1903,
	312, 1895, 1159, 1843, 1172, 1842, 1172, 1821, 1172, 986,
	1822, 1121, 90, 90, 90, 90, 90, 90, 1484, 504,
	59, 73, 1732, 981, 1566, 1172, 35, 1661, 66, 1785,
	1127, 1656, 985, 1484, 1127, 982, 580, 1735, 1168, 1165,
	1172, 1607, 1121, 1458, 1608, 66, 1539, 48, 75, 1605,
	1001, 522, 1172, 1604, 43, 1603, 1172, 60, 1172, 1529,
	1086, 47, 1172, 44, 1124, 1461, 1225, 20, 812, 812,
	1176, 43, 1462, 1172, 73, 775, 833, 1576, 833, 49,
	44, 76, 833, 584, 1171, 45, 812, 1172, 991, 71,
	1158, 1126, 1085, 1159, 1127, 1084, 72, 1308, 1220, 1183,
	729, 75, 45, 841, 679, 902, 842, 551, 595, 1170,
	534, 77, 1825, 557, 536, 70, 546, 2153, 1885, 1002,
	1500, 317, 924, 619, 2137, 1560, 1561, 2124, 1578, 1579,
	1580, 2086, 2072, 1983, 76, 1932, 1928, 501, 90, 1920,
	678, 506, 71, 1560, 1561, 1919, 1577, 1918, 1914, 72,
	1913, 1912, 561, 90, 1857, 578, 90, 90, 1800, 73,
	1795, 1794, 1793, 1743, 1721, 1851, 46, 504, 1132, 577,
	577, 1692, 1300, 1665, 504, 1433, 569, 1575, 1612, 1609,
	1597, 1588, 1164, 62, 63, 34, 75, 836, 50, 831,
	61, 1559, 1556, 947, 1555, 51, 1553, 1545, 1544, 73,
	1464, 90, 1460, 1378, 1163, 54, 1329, 90, 56, 987,
	988, 989, 990, 992, 993, 783, 73, 58, 505, 76,
	1328, 678, 1498, 1047, 677, 56, 75, 1566, 90, 90,
	90, 559, 90, 1571, 1569, 1570, 1562, 1563, 1564, 1565,
	1567, 1568, 64, 75, 954, 1566, 664, 90, 1040, 1751,
	70, 65, 2098, 70, 2056, 981, 2042, 2041, 90, 76,
	2040, 2032, 1581, 2030, 2021, 2008, 1994, 71, 1978, 1942,
	1925, 504, 90, 1301, 72, 1897, 76, 1860, 315, 504,
	1576, 90, 1848, 1828, 71, 1727, 90, 90, 90, 1707,
	90, 72, 615, 70, 663, 1683, 782, 1681, 621, 1680,
	987, 988, 989, 990, 992, 993, 813, 90, 90, 536,
	70, 1850, 1678, 1631, 1663, 90, 1630, 90, 1587, 1560,
	1561, 1549, 90, 622, 1548, 821, 1525, 603, 598, 600,
	1520, 1293, 504, 504, 1449, 1407, 1405, 1392, 1391, 1371,
	315, 1327, 781, 1224, 1074, 90, 1077, 1081, 90, 1577,
	90, 90, 90, 90, 90, 90, 650, 1067, 90, 648,
	784, 854, 1066, 90, 90, 1065, 505, 1064, 925, 1063,
	90, 652, 1062, 505, 506, 1061, 1060, 881, 1059, 1058,
	1057, 90, 656, 820, 659, 1056, 923, 1055, 536, 824,
	824, 557, 1054, 514, 1053, 810, 953, 1052, 1051, 1392,
	90, 1044, 848, 90, 1033, 674, 675, 779, 70, 543,
	546, 948, 539, 680, 682, 513, 602, 591, 589, 2136,
	622, 1566, 979, 2108, 2003, 1908, 1886, 1882, 622, 1856,
	1855, 1572, 1573, 1574, 811, 1710, 1571, 1569, 1570, 1562,
	1563, 1564, 1565, 1567, 1568, 1883, 822, 560, 845, 825,
	569, 522, 1040, 1443, 502, 1216, 1442, 1562, 1563, 1564,
	1565, 1567, 1568, 1215, 800, 895, 1031, 897, 783, 958,
	505, 843, 1560, 1561, 611, 896, 2046, 316, 505, 2006,
	899, 1475, 1854, 798, 613, 1435, 1121, 920, 919, 1079,
	913, 1500, 1166, 1611, 1080, 1610, 1504, 638, 799, 927,
	932, 614, 835, 908, 778, 838, 90, 1049, 952, 1417,
	1872, 1129, 1752, 1536, 90, 80, 612, 1315, 90, 880,
	1070, 1429, 506, 1618, 2089, 945, 90, 90, 642, 506,
	90, 505, 505, 90, 2150, 962, 1167, 893, 961, 316,
	514, 960, 1836, 514, 514, 2151, 977, 90, 901, 90,
	90, 1046, 90, 900, 783, 90, 292, 90, 90, 1091,
	90, 90, 971, 504, 643, 972, 973, 2048, 1175, 79,
	1455, 474, 1560, 1561, 288, 1043, 1168, 1165, 946, 929,
	1149, 475, 933, 934, 935, 936, 937, 793, 793, 794,
	794, 1847, 1150, 1966, 940, 941, 983, 984, 1965, 793,
	67, 794, 480, 1964, 479, 67, 520, 1098, 1083, 511,
	293, 1090, 1963, 1102, 1104, 1071, 1072, 1642, 1075, 986,
	536, 1646, 1645, 289, 1078, 909, 506, 584, 546, 1615,
	1614, 1507, 536, 317, 506, 1564, 1565, 1567, 1568, 1662,
	1448, 1447, 985, 611, 1036, 315, 1082, 1170, 1446, 1140,
	1445, 519, 90, 1123, 546, 1275, 1094, 546, 1173, 1118,
	795, 795, 1117, 90, 90, 90, 1115, 1114, 90, 90,
	1101, 649, 795, 1184, 1566, 90, 550, 1156, 2047, 1155,
	1375, 423, 1107, 312, 1374, 612, 1157, 506, 506, 1135,
	853, 1211, 1144, 1246, 1119, 317, 1145, 1147, 521, 1148,
	1151, 78, 428, 90, 944, 803, 315, 424, 943, 487,
	1226, 1146, 577, 1649, 577, 918, 917, 1090, 501, 496,
	1164, 1290, 1315, 1089, 801, 587, 1290, 1576, 66, 1651,
	1419, 1075, 425, 1078, 1245, 983, 984, 81, 726, 802,
	817, 315, 294, 926, 1817, 2150, 1072, 1071, 1297, 804,
	1493, 427, 601, 1295, 43, 854, 854, 1177, 986, 2096,
	826, 1100, 505, 44, 803, 1187, 546, 1189, 296, 1298,
	536, 881, 881, 1170, 291, 290, 1947, 1818, 295, 2112,
	2121, 985, 639, 801, 635, 45, 2172, 1403, 791, 1109,
	2161, 1568, 1112, 518, 1454, 507, 1577, 921, 802, 1423,
	1670, 1412, 2113, 1427, 1188, 1232, 687, 821, 90, 90,
	90, 1633, 1377, 1131, 90, 1131, 512, 90, 636, 1312,
	1214, 508, 1409, 90, 90, 90, 90, 90, 1347, 1640,
	2167, 509, 1190, 808, 1227, 90, 1154, 991, 90, 90,
	942, 1099, 640, 1423, 316, 504, 1494, 625, 90, 807,
	1286, 832, 426, 90, 2035, 90, 887, 586, 1456, 1385,
	1068, 2122, 90, 796, 796, 1284, 312, 854, 1813, 2160,
	1814, 1170, 922, 90, 1206, 796, 420, 1218, 1219, 1302,
	1299, 626, 1379, 881, 624, 522, 1562, 1563, 1564, 1565,
	1567, 1568, 641, 2017, 90, 90, 1323, 1979, 1816, 73,
	1272, 1028, 429, 1342, 504, 316, 1819, 1547, 56, 1179,
	1381, 66, 2123, 880, 880, 993, 1402, 1703, 506, 1425,
	1181, 90, 423, 90, 1431, 90, 75, 1720, 1280, 90,
	1517, 854, 1667, 90, 1380, 1087, 1281, 43, 1282, 1182,
	316, 1411, 1287, 428, 482, 1515, 44, 881, 424, 521,
	1421, 1180, 1463, 1509, 1465, 820, 90, 2165, 1289, 76,
	2159, 1650, 1634, 1690, 820, 2173, 854, 71, 45, 1418,
	670, 1948, 1668, 425, 72, 536, 1428, 2120, 1815, 1305,
	1296, 2149, 881, 67, 2147, 1436, 1309, 1865, 522, 1208,
	1317, 56, 427, 1709, 622, 1270, 1273, 883, 629, 596,
	317, 1334, 1334, 1345, 669, 1356, 594, 608, 1512, 2166,
	1415, 1368, 1369, 1370, 1453, 1923, 1451, 1452, 1513, 1958,
	483, 1503, 1518, 1269, 1957, 880, 1781, 1459, 2168, 1457,
	833, 1470, 2178, 2027, 1940, 502, 497, 1440, 907, 1617,
	1283, 1832, 1835, 1170, 505, 1388, 522, 1285, 1477, 1834,
	1538, 989, 990, 992, 993, 1156, 668, 1155, 1232, 1495,
	1480, 317, 1479, 1502, 1157, 1384, 1483, 609, 1485, 1209,
	610, 1489, 1437, 1666, 1438, 1439, 905, 959, 950, 1467,
	2082, 670, 73, 669, 853, 853, 1893, 939, 906, 880,
	1492, 56, 903, 426, 882, 967, 317, 1508, 1404, 1686,
	1510, 1406, 1701, 505, 1867, 522, 1941, 1924, 1394, 75,
	1490, 485, 1782, 1271, 1393, 1880, 1524, 1489, 1783, 1698,
	1514, 1697, 608, 567, 880, 2177, 1817, 1516, 566, 1810,
	1629, 519, 1831, 1535, 660, 668, 1492, 1808, 1676, 1858,
	1833, 1812, 76, 429, 1938, 1414, 1894, 1694, 1487, 1482,
	71, 1326, 2020, 1922, 90, 90, 1490, 72, 968, 1818,
	1591, 1726, 1657, 1648, 1554, 1519, 1939, 1420, 1174, 1125,
	1113, 1488, 1110, 1594, 1595, 1596, 298, 645, 644, 90,
	1811, 637, 1491, 90, 484, 90, 634, 633, 632, 631,
	1592, 630, 90, 1466, 627, 504, 853, 1469, 1613, 565,
	506, 558, 1050, 1620, 1682, 90, 931, 1325, 90, 1628,
	1627, 2116, 2079, 1806, 1154, 1654, 1679, 1638, 315, 1636,
	90, 1616, 1641, 1471, 1711, 1647, 1212, 1204, 1491, 1152,
	840, 839, 837, 1660, 1652, 834, 829, 809, 805, 1523,
	797, 1740, 1473, 1658, 1687, 1708, 1712, 1526, 1659, 1402,
	1813, 1973, 1814, 67, 1222, 2151, 1140, 1232, 83, 506,
	853, 1677, 1669, 1671, 1672, 1542, 1543, 3, 90, 672,
	1696, 915, 532, 1699, 1745, 1746, 1747, 1090, 310, 25,
	1816, 1975, 1106, 1105, 1689, 564, 1704, 1705, 1819, 563,
	1655, 2037, 854, 1700, 1825, 853, 309, 24, 1586, 620,
	308, 23, 1729, 419, 2074, 307, 11, 1232, 881, 1599,
	1232, 1695, 1739, 1223, 676, 1111, 1090, 311, 10, 1736,
	301, 9, 1103, 854, 854, 1637, 1108, 1639, 850, 2060,
	1753, 1863, 854, 854, 1207, 90, 90, 90, 673, 881,
	881, 533, 1203, 552, 1688, 540, 1755, 1758, 881, 881,
	473, 1643, 90, 1644, 430, 1760, 25, 90, 1134, 90,
	1815, 90, 90, 90, 978, 854, 90, 90, 1629, 504,
	1826, 1830, 1788, 555, 24, 898, 1829, 556, 23, 709,
	1789, 881, 1805, 11, 846, 1161, 1237, 1244, 300, 7,
	2175, 883, 883, 1802, 505, 10, 302, 4, 9, 983,
	984, 90, 90, 2176, 1560, 1561, 983, 984, 504, 2109,
	476, 477, 2063, 87, 87, 286, 1629, 316, 90, 90,
	1861, 1629, 90, 1890, 1859, 1801, 414, 415, 416, 1864,
	504, 433, 90, 1673, 447, 654, 653, 1664, 1888, 90,
	1846, 1606, 433, 1889, 1715, 985, 1853, 1628, 1627, 1898,
	880, 528, 528, 654, 1444, 286, 1862, 1868, 286, 286,
	547, 286, 522, 1839, 87, 554, 7, 1870, 1376, 1845,
	1373, 1733, 90, 1372, 4, 1322, 486, 970, 1037, 983,
	984, 880, 880, 1875, 1876, 655, 1887, 1881, 882, 882,
	880, 880, 1910, 2095, 584, 1628, 1627, 1972, 1389, 854,
	1628, 1627, 986, 883, 1748, 1468, 1047, 1045, 1946, 1902,
	421, 930, 628, 1884, 1706, 881, 2111, 1915, 622, 1546,
	1232, 1232, 1990, 880, 1232, 985, 2016, 90, 1324, 90,
	1048, 315, 90, 1786, 42, 1625, 703, 1807, 1619, 1198,
	90, 1921, 1197, 318, 1796, 1485, 315, 916, 725, 489,
	506, 1333, 1238, 780, 727, 851, 728, 1869, 852, 1936,
	1629, 1076, 1441, 715, 849, 1138, 1294, 883, 505, 1313,
	1534, 90, 1934, 317, 1951, 1041, 1933, 695, 707, 706,
	1310, 1950, 588, 1891, 1952, 1968, 90, 1949, 821, 504,
	1974, 444, 55, 90, 1489, 440, 1426, 1389, 1629, 1849,
	882, 90, 883, 966, 1213, 894, 1981, 505, 854, 90,
	1967, 963, 1635, 1492, 2000, 510, 1976, 1557, 90, 90,
	2002, 853, 590, 2007, 881, 1487, 1354, 1346, 1343, 505,
	1993, 1989, 1997, 1490, 2010, 651, 786, 2009, 1987, 1628,
	1627, 1874, 1944, 1029, 2015, 1139, 1852, 618, 1488, 1432,
	1160, 681, 853, 853, 974, 531, 530, 880, 1193, 90,
	616, 853, 853, 1879, 882, 904, 1996, 1178, 2031, 1022,
	1019, 286, 570, 286, 447, 447, 554, 1628, 1627, 478,
	2029, 607, 606, 2025, 90, 90, 1205, 2034, 1986, 1387,
	2026, 2171, 2036, 1632, 853, 2088, 90, 854, 2033, 882,
	90, 74, 2045, 1232, 1970, 1491, 2054, 2022, 504, 2052,
	1413, 31, 29, 881, 2055, 90, 26, 21, 19, 18,
	28, 90, 850, 850, 506, 2062, 17, 315, 90, 90,
	316, 522, 2064, 27, 2061, 15, 2058, 14, 1988, 2069,
	13, 12, 41, 40, 39, 316, 2066, 38, 2070, 2073,
	37, 90, 2065, 90, 36, 2067, 90, 6, 315, 5,
	67, 2, 1, 506, 1961, 1962, 880, 0, 0, 0,
	1878, 0, 2084, 0, 1954, 2099, 0, 0, 2101, 2097,
	90, 0, 2100, 90, 0, 506, 2090, 2094, 505, 0,
	0, 2085, 0, 854, 1629, 0, 0, 592, 2107, 2105,
	2104, 2103, 2102, 2076, 0, 0, 0, 0, 0, 881,
	0, 0, 597, 0, 0, 447, 447, 90, 0, 90,
	0, 0, 0, 2133, 2126, 0, 2130, 0, 853, 0,
	0, 2131, 0, 0, 850, 0, 2135, 90, 2132, 0,
	0, 0, 0, 0, 0, 0, 2148, 2144, 0, 2146,
	0, 2152, 0, 1984, 0, 880, 90, 2057, 2087, 0,
	433, 2154, 2158, 2156, 0, 1348, 286, 2157, 0, 0,
	0, 0, 0, 1628, 1627, 0, 2170, 2169, 0, 2174,
	0, 0, 0, 0, 0, 0, 317, 447, 658, 447,
	0, 661, 0, 0, 0, 0, 0, 2179, 850, 0,
	0, 317, 0, 0, 0, 0, 528, 505, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 0, 1140,
	0, 0, 0, 0, 0, 0, 316, 0, 883, 0,
	0, 87, 0, 850, 0, 1560, 1561, 853, 0, 0,
	286, 0, 0, 0, 506, 286, 286, 286, 0, 827,
	0, 880, 0, 0, 1237, 1756, 0, 316, 0, 883,
	883, 0, 0, 1237, 1761, 0, 286, 286, 883, 883,
	983, 984, 0, 0, 87, 0, 87, 0, 0, 0,
	0, 447, 0, 0, 0, 0, 2091, 2092, 2093, 0,
	0, 0, 0, 986, 0, 0, 1792, 0, 0, 0,
	0, 883, 0, 0, 447, 0, 0, 447, 0, 87,
	447, 447, 447, 447, 447, 0, 985, 938, 0, 0,
	2114, 0, 447, 447, 0, 882, 853, 0, 0, 433,
	0, 0, 0, 0, 0, 0, 0, 1566, 0, 0,
	957, 983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015,
	0, 0, 0, 0, 0, 0, 882, 882, 0, 528,
	0, 0, 554, 506, 986, 882, 882, 1017, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 317, 0, 0, 0, 0, 985, 0, 0,
	1576, 0, 0, 1000, 0, 1348, 1348, 0, 882, 0,
	0, 983, 984, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 317, 0, 0, 0, 1521, 1522, 0,
	0, 0, 853, 0, 986, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 883, 685, 685, 0, 0,
	0, 0, 0, 991, 0, 788, 0, 985, 0, 0,
	0, 0, 0, 1000, 0, 0, 1348, 1348, 1348, 1577,
	704, 53, 1010, 1018, 0, 286, 0, 0, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 286, 1583, 1584,
	1585, 0, 0, 0, 0, 286, 1116, 0, 0, 286,
	1008, 0, 1122, 0, 1002, 0, 1001, 0, 0, 0,
	0, 0, 0, 991, 0, 53, 286, 0, 1142, 1143,
	0, 286, 0, 0, 286, 0, 447, 447, 0, 447,
	554, 0, 0, 0, 0, 0, 0, 0, 515, 0,
	0, 523, 882, 1560, 1561, 0, 0, 0, 53, 1960,
	0, 0, 0, 0, 883, 0, 1571, 1569, 1570, 1562,
	1563, 1564, 1565, 1567, 1568, 0, 1001, 0, 0, 850,
	0, 0, 0, 0, 0, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 964, 0, 969, 0, 0, 0,
	1011, 0, 976, 995, 987, 988, 989, 990, 992, 993,
	850, 850, 0, 0, 1023, 1024, 1025, 1026, 1027, 850,
	850, 0, 0, 0, 1035, 0, 0, 0, 0, 0,
	0, 1186, 0, 0, 1042, 1348, 1348, 0, 0, 0,
	0, 0, 286, 286, 286, 1002, 0, 286, 1194, 0,
	0, 0, 850, 883, 554, 1566, 0, 1724, 1725, 0,
	0, 882, 0, 0, 1009, 0, 0, 997, 998, 999,
	1012, 0, 996, 994, 995, 987, 988, 989, 990, 992,
	993, 0, 286, 0, 0, 0, 0, 0, 0, 1348,
	1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348,
	1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1576, 1348,
	0, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	0, 1784, 996, 994, 995, 987, 988, 989, 990, 992,
	993, 0, 0, 0, 0, 0, 0, 0, 0, 883,
	882, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1577, 0, 523,
	0, 0, 0, 0, 0, 0, 850, 286, 1382, 1383,
	0, 0, 0, 1095, 0, 0, 1390, 0, 0, 0,
	0, 0, 1395, 1396, 1398, 1400, 1401, 1560, 1561, 0,
	1578, 1579, 1580, 0, 1408, 0, 0, 1410, 286, 0,
	0, 0, 0, 1900, 0, 0, 0, 286, 0, 0,
	0, 0, 286, 0, 1430, 0, 0, 0, 0, 0,
	0, 286, 0, 0, 0, 0, 882, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 1575,
	0, 0, 0, 0, 0, 1569, 1570, 1562, 1563, 1564,
	1565, 1567, 1568, 1186, 1186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1560, 1561, 0, 850, 0, 0, 0, 0,
	957, 0, 957, 0, 447, 0, 0, 685, 286, 1566,
	0, 0, 1476, 1247, 1248, 1249, 1250, 1251, 1252, 1253,
	1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 286, 1274, 0, 1276, 1277,
	1278, 1279, 0, 0, 1581, 1348, 983, 984, 0, 0,
	0, 0, 1013, 1014, 1015, 0, 0, 1303, 0, 0,
	0, 0, 1576, 0, 0, 0, 0, 1943, 0, 986,
	0, 0, 1017, 0, 0, 0, 983, 984, 0, 1330,
	1331, 0, 0, 1344, 850, 1355, 1357, 1362, 1365, 1366,
	1367, 0, 985, 0, 1566, 0, 0, 0, 1000, 986,
	0, 0, 0, 0, 0, 515, 0, 0, 0, 0,
	788, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 0, 0,
	0, 1577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1576, 991, 1348,
	0, 0, 0, 0, 0, 1424, 0, 1560, 1561, 0,
	1578, 1579, 1580, 0, 0, 0, 0, 1010, 1018, 0,
	0, 2019, 0, 1899, 0, 0, 0, 0, 991, 0,
	850, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1624, 0, 0, 1008, 0, 0, 1450, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 1575,
	0, 0, 0, 1572, 1573, 1574, 1577, 0, 1571, 1569,
	1570, 1562, 1563, 1564, 1565, 1567, 1568, 0, 0, 0,
	0, 1001, 0, 286, 286, 0, 0, 0, 0, 0,
	0, 1478, 0, 0, 0, 0, 976, 1348, 0, 0,
	0, 0, 515, 0, 0, 515, 515, 0, 1674, 1566,
	0, 0, 1095, 0, 957, 0, 0, 0, 0, 2075,
	1002, 1684, 0, 0, 0, 0, 0, 1032, 0, 1034,
	0, 0, 0, 0, 286, 1011, 1038, 286, 0, 0,
	0, 0, 0, 0, 1581, 1505, 1506, 0, 0, 1719,
	1002, 1511, 0, 0, 0, 1570, 1562, 1563, 1564, 1565,
	1567, 1568, 1576, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1560, 1561, 0, 1578, 1579, 1580,
	0, 0, 0, 0, 1530, 0, 0, 0, 0, 0,
	0, 1537, 0, 0, 1541, 0, 0, 1750, 0, 1009,
	0, 0, 0, 1550, 0, 1012, 0, 996, 994, 995,
	987, 988, 989, 990, 992, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1575, 0, 1035, 0,
	53, 1577, 0, 53, 1362, 1362, 1362, 996, 994, 995,
	987, 988, 989, 990, 992, 993, 0, 0, 0, 0,
	0, 0, 0, 0, 53, 0, 53, 0, 0, 0,
	0, 0, 0, 0, 1803, 1804, 1095, 1621, 0, 0,
	0, 0, 53, 0, 0, 0, 1566, 53, 0, 0,
	1624, 554, 0, 0, 0, 0, 1837, 0, 1838, 0,
	286, 1840, 1841, 0, 0, 1844, 286, 0, 0, 685,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 788, 0, 1572, 1573, 1574, 0, 0, 1571, 1569,
	1570, 1562, 1563, 1564, 1565, 1567, 1568, 0, 1624, 1576,
	554, 1194, 0, 1624, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 286, 286, 0,
	0, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1719, 0, 0, 0, 0, 0, 0, 1896, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1722, 0, 0, 1723, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1728, 0, 0, 1577, 0,
	0, 1916, 0, 0, 1737, 0, 0, 0, 0, 0,
	0, 0, 1741, 1233, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1757, 0, 0, 0, 1759, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1292,
	0, 0, 0, 0, 0, 0, 1095, 0, 1935, 0,
	0, 1937, 0, 0, 0, 0, 0, 1790, 1791, 286,
	0, 0, 1624, 0, 0, 0, 1797, 1798, 1799, 0,
	1572, 1573, 1574, 0, 0, 1571, 1569, 1570, 1562, 1563,
	1564, 1565, 1567, 1568, 0, 0, 0, 1969, 0, 0,
	554, 0, 1827, 0, 0, 0, 0, 0, 0, 0,
	1624, 0, 0, 0, 0, 286, 0, 0, 0, 0,
	0, 0, 1992, 0, 0, 0, 0, 0, 0, 0,
	286, 0, 0, 0, 0, 0, 0, 0, 1719, 53,
	0, 0, 53, 0, 0, 0, 0, 554, 1719, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 523, 0, 0, 0, 0, 0, 0,
	1873, 983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015,
	0, 0, 0, 0, 0, 0, 0, 1006, 957, 0,
	0, 0, 0, 0, 986, 1560, 1561, 1017, 1578, 1579,
	1580, 0, 1901, 0, 0, 0, 1904, 1905, 0, 0,
	0, 1907, 0, 2038, 2039, 0, 0, 985, 1909, 0,
	1911, 0, 0, 1000, 0, 2050, 0, 0, 1917, 2051,
	0, 0, 0, 0, 53, 0, 0, 0, 53, 0,
	0, 0, 0, 0, 554, 0, 0, 1575, 0, 0,
	1719, 0, 0, 0, 0, 53, 0, 1719, 554, 0,
	0, 1926, 0, 0, 0, 0, 1501, 0, 983, 984,
	0, 0, 0, 991, 0, 0, 0, 0, 0, 0,
	2083, 0, 554, 0, 0, 286, 0, 0, 0, 0,
	0, 986, 1010, 1018, 0, 983, 984, 1566, 1003, 1004,
	1005, 1013, 1014, 1015, 1292, 0, 1624, 0, 1016, 1992,
	1959, 1006, 1719, 0, 985, 0, 0, 1582, 986, 0,
	1008, 1017, 0, 0, 1034, 0, 1001, 0, 0, 0,
	0, 0, 1581, 0, 0, 0, 0, 0, 0, 0,
	0, 985, 0, 0, 0, 0, 286, 1000, 554, 0,
	1576, 1007, 0, 0, 0, 1995, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2145, 0, 0, 0,
	991, 0, 0, 0, 0, 2011, 2012, 0, 0, 0,
	0, 0, 0, 1034, 0, 1719, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 0, 991, 0, 0,
	0, 0, 0, 0, 0, 2024, 0, 0, 0, 0,
	1011, 0, 0, 0, 0, 0, 1010, 1018, 2028, 1577,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 0,
	0, 0, 1016, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1008, 0, 0, 0, 0, 0,
	1001, 0, 0, 0, 788, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1233, 0, 0, 0, 0,
	0, 0, 0, 0, 1009, 1007, 0, 997, 998, 999,
	1012, 0, 996, 994, 995, 987, 988, 989, 990, 992,
	993, 0, 1002, 0, 0, 0, 0, 0, 1929, 0,
	0, 1572, 1573, 1574, 0, 0, 1571, 1569, 1570, 1562,
	1563, 1564, 1565, 1567, 1568, 1233, 0, 0, 1233, 1002,
	0, 0, 0, 983, 984, 53, 1003, 1004, 1005, 1013,
	1014, 1015, 0, 0, 1011, 0, 0, 0, 0, 1006,
	0, 0, 0, 0, 0, 0, 986, 0, 0, 1017,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1560, 1561, 2127, 1578, 1579, 1580, 985,
	0, 0, 0, 0, 0, 1000, 0, 0, 0, 1731,
	994, 995, 987, 988, 989, 990, 992, 993, 2143, 2143,
	0, 0, 0, 0, 0, 0, 0, 0, 1009, 0,
	0, 997, 998, 999, 1012, 0, 996, 994, 995, 987,
	988, 989, 990, 992, 993, 1575, 2143, 0, 0, 0,
	0, 0, 1602, 983, 984, 991, 1003, 1004, 1005, 1013,
	1014, 1015, 0, 0, 0, 0, 0, 0, 0, 1006,
	0, 0, 0, 0, 1010, 1018, 986, 0, 0, 1017,
	0, 2143, 0, 0, 0, 0, 0, 0, 0, 0,
	1016, 0, 0, 1560, 1561, 1566, 1578, 1579, 1580, 985,
	0, 0, 1008, 0, 0, 1000, 0, 0, 1001, 1730,
	0, 0, 0, 0, 0, 0, 0, 53, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1581, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1575, 0, 0, 1576, 0,
	0, 0, 0, 0, 0, 991, 0, 0, 1233, 1233,
	0, 0, 1233, 0, 0, 0, 0, 0, 0, 0,
	523, 0, 0, 0, 1010, 1018, 0, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1016, 0, 1011, 0, 0, 1566, 0, 0, 0, 0,
	0, 0, 1008, 0, 0, 0, 0, 0, 1001, 0,
	0, 0, 0, 0, 0, 0, 0, 1577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1581, 0, 0, 1007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1576, 0,
	0, 0, 0, 0, 0, 0, 1009, 0, 0, 997,
	998, 999, 1012, 0, 996, 994, 995, 987, 988, 989,
	990, 992, 993, 0, 0, 0, 0, 1002, 0, 0,
	1601, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1011, 0, 0, 0, 0, 0, 0, 1572,
	1573, 1574, 0, 0, 1571, 1569, 1570, 1562, 1563, 1564,
	1565, 1567, 1568, 0, 0, 1977, 0, 1577, 0, 0,
	0, 0, 0, 0, 53, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1233, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1009, 0, 0, 997,
	998, 999, 1012, 0, 996, 994, 995, 987, 988, 989,
	990, 992, 993, 0, 0, 0, 0, 0, 0, 0,
	1600, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1572,
	1573, 1574, 0, 0, 1571, 1569, 1570, 1562, 1563, 1564,
	1565, 1567, 1568, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1034,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 53, 92, 93, 333, 94, 334, 335, 336,
	337, 232, 338, 339, 340, 341, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 342, 99, 239, 240,
	100, 343, 344, 241, 242, 243, 345, 101, 244, 346,
	319, 347, 102, 103, 104, 0, 105, 348, 106, 107,
	108, 349, 320, 109, 110, 350, 351, 352, 353, 354,
	355, 111, 112, 287, 113, 245, 114, 246, 247, 356,
	115, 357, 116, 358, 359, 360, 117, 118, 361, 119,
	362, 0, 363, 248, 120, 121, 122, 249, 250, 364,
	365, 366, 123, 124, 251, 0, 125, 367, 126, 368,
	369, 321, 370, 127, 252, 371, 253, 372, 128, 129,
	130, 131, 254, 255, 323, 373, 135, 374, 132, 375,
	322, 133, 256, 134, 257, 258, 259, 376, 260, 377,
	324, 136, 325, 137, 138, 378, 140, 139, 379, 261,
	326, 141, 327, 380, 142, 381, 382, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	383, 384, 385, 263, 153, 264, 154, 155, 386, 156,
	387, 388, 157, 389, 390, 158, 265, 329, 159, 330,
	266, 160, 161, 162, 163, 391, 267, 164, 268, 165,
	392, 166, 167, 168, 169, 269, 170, 171, 393, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	394, 183, 331, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 395, 271, 194, 195, 196, 396, 197, 187,
	188, 198, 332, 199, 272, 273, 200, 397, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 398, 207, 399,
	208, 209, 210, 211, 212, 400, 276, 277, 278, 401,
	402, 213, 279, 280, 403, 214, 215, 216, 217, 404,
	405, 218, 219, 220, 221, 406, 222, 407, 281, 223,
	224, 225, 282, 283, 408, 409, 226, 410, 411, 412,
	413, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 314, 0, 0,
	0, 0, 0, 0, 1713, 0, 0, 0, 0, 0,
	0, 0, 1714, 92, 93, 333, 94, 334, 335, 336,
	337, 232, 338, 339, 340, 341, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 342, 99, 239, 240,
	100, 343, 344, 241, 242, 243, 345, 101, 244, 346,
	319, 347, 102, 103, 104, 0, 105, 348, 106, 107,
	108, 349, 320, 109, 110, 350, 351, 352, 353, 354,
	355, 111, 112, 287, 113, 245, 114, 246, 247, 356,
	115, 357, 116, 358, 359, 360, 117, 118, 361, 119,
	362, 0, 363, 248, 120, 121, 122, 249, 250, 364,
	365, 366, 123, 124, 251, 0, 125, 367, 126, 368,
	369, 321, 370, 127, 252, 371, 253, 372, 128, 129,
	130, 131, 254, 255, 323, 373, 135, 374, 132, 375,
	322, 133, 256, 134, 257, 258, 259, 376, 260, 377,
	324, 136, 325, 137, 138, 378, 140, 139, 379, 261,
	326, 141, 327, 380, 142, 381, 382, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	383, 384, 385, 263, 153, 264, 154, 155, 386, 156,
	387, 388, 157, 389, 390, 158, 265, 329, 159, 330,
	266, 160, 161, 162, 163, 391, 267, 164, 268, 165,
	392, 166, 167, 168, 169, 269, 170, 171, 393, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	394, 183, 331, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 395, 271, 194, 195, 196, 396, 197, 187,
	188, 198, 332, 199, 272, 273, 200, 397, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 398, 207, 399,
	208, 209, 210, 211, 212, 400, 276, 277, 278, 401,
	402, 213, 279, 280, 403, 214, 215, 216, 217, 404,
	405, 218, 219, 220, 221, 406, 222, 407, 281, 223,
	224, 225, 282, 283, 408, 409, 226, 410, 411, 412,
	413, 227, 228, 229, 230, 231, 0, 0, 0, 314,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2068, 92, 93, 333, 94, 334,
	335, 336, 337, 232, 338, 339, 340, 341, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 342, 99,
	239, 240, 100, 343, 344, 241, 242, 243, 345, 101,
	244, 346, 319, 347, 102, 103, 104, 0, 105, 348,
	106, 107, 108, 349, 320, 109, 110, 350, 351, 352,
	353, 354, 355, 111, 112, 287, 113, 245, 114, 246,
	247, 356, 115, 357, 116, 358, 359, 360, 117, 118,
	361, 119, 362, 0, 363, 248, 120, 121, 122, 249,
	250, 364, 365, 366, 123, 124, 251, 0, 125, 367,
	126, 368, 369, 321, 370, 127, 252, 371, 253, 372,
	128, 129, 130, 131, 254, 255, 323, 373, 135, 374,
	132, 375, 322, 133, 256, 134, 257, 258, 259, 376,
	260, 377, 324, 136, 325, 137, 138, 378, 140, 139,
	379, 261, 326, 141, 327, 380, 142, 381, 382, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 383, 384, 385, 263, 153, 264, 154, 155,
	386, 156, 387, 388, 157, 389, 390, 158, 265, 329,
	159, 330, 266, 160, 161, 162, 163, 391, 267, 164,
	268, 165, 392, 166, 167, 168, 169, 269, 170, 171,
	393, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 394, 183, 331, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 395, 271, 194, 195, 196, 396,
	197, 187, 188, 198, 332, 199, 272, 273, 200, 397,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 398,
	207, 399, 208, 209, 210, 211, 212, 400, 276, 277,
	278, 401, 402, 213, 279, 280, 403, 214, 215, 216,
	217, 404, 405, 218, 219, 220, 221, 406, 222, 407,
	281, 223, 224, 225, 282, 283, 408, 409, 226, 410,
	411, 412, 413, 227, 228, 229, 230, 231, 314, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 814, 0, 0, 92, 93, 333, 94, 334, 335,
	336, 337, 232, 338, 339, 340, 341, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 342, 99, 239,
	240, 100, 343, 344, 241, 242, 243, 345, 101, 244,
	346, 319, 347, 102, 103, 104, 0, 105, 348, 106,
	107, 108, 349, 320, 109, 110, 350, 351, 352, 353,
	354, 355, 111, 112, 287, 113, 245, 114, 246, 247,
	356, 115, 357, 116, 358, 359, 360, 117, 118, 361,
	119, 362, 0, 363, 248, 120, 121, 122, 249, 250,
	364, 365, 366, 123, 124, 251, 0, 125, 367, 126,
	368, 369, 321, 370, 127, 252, 371, 253, 372, 128,
	129, 130, 131, 254, 255, 323, 373, 135, 374, 132,
	375, 322, 133, 256, 134, 257, 258, 259, 376, 260,
	377, 324, 136, 325, 137, 138, 378, 140, 139, 379,
	261, 326, 141, 327, 380, 142, 381, 382, 143, 0,
	144, 145, 146, 148, 262, 147, 328, 149, 150, 152,
	151, 383, 384, 385, 263, 153, 264, 154, 155, 386,
	156, 387, 388, 157, 389, 390, 158, 265, 329, 159,
	330, 266, 160, 161, 162, 163, 391, 267, 164, 268,
	165, 392, 166, 167, 168, 169, 269, 170, 171, 393,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 394, 183, 331, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 395, 271, 194, 195, 196, 396, 197,
	187, 188, 198, 332, 199, 272, 273, 200, 397, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 398, 207,
	399, 208, 209, 210, 211, 212, 400, 276, 277, 278,
	401, 402, 213, 279, 280, 403, 214, 215, 216, 217,
	404, 405, 218, 219, 220, 221, 406, 222, 407, 281,
	223, 224, 225, 282, 283, 408, 409, 226, 410, 411,
	412, 413, 227, 228, 229, 230, 231, 723, 712, 713,
	710, 711, 702, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 739, 705, 0, 0, 0, 95, 96, 97, 233,
	754, 235, 755, 98, 756, 757, 0, 99, 239, 240,
	100, 708, 738, 758, 759, 243, 0, 101, 750, 0,
	731, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 320, 109, 110, 0, 732, 734, 0, 733,
	735, 111, 112, 287, 113, 760, 114, 761, 762, 789,
	115, 0, 116, 0, 0, 0, 753, 118, 0, 119,
	0, 0, 0, 696, 120, 121, 122, 740, 741, 719,
	0, 0, 123, 124, 763, 0, 125, 0, 126, 0,
	0, 321, 0, 127, 751, 0, 253, 0, 128, 129,
	130, 131, 747, 749, 323, 0, 135, 0, 132, 0,
	322, 133, 764, 134, 765, 766, 767, 0, 730, 0,
	324, 136, 325, 137, 138, 0, 140, 139, 0, 752,
	326, 141, 327, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 328, 149, 150, 152, 151,
	691, 0, 720, 748, 153, 768, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 329, 159, 330,
	742, 160, 161, 162, 163, 0, 743, 164, 268, 165,
	0, 166, 167, 168, 169, 769, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 331, 184, 185, 697, 186, 0, 190, 191,
	192, 193, 73, 271, 194, 195, 196, 736, 197, 187,
	188, 198, 332, 199, 770, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 771, 204, 744, 0, 207, 75,
	208, 209, 210, 211, 212, 0, 276, 772, 773, 0,
	0, 213, 745, 746, 718, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 737, 222, 0, 281, 223,
	224, 225, 585, 774, 0, 0, 226, 0, 0, 0,
	71, 227, 228, 229, 230, 231, 692, 72, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 688, 689, 723,
	712, 713, 710, 711, 702, 0, 698, 0, 0, 0,
	0, 701, 0, 0, 0, 92, 93, 1319, 94, 0,
	0, 0, 0, 739, 705, 0, 0, 0, 95, 96,
	97, 233, 754, 235, 755, 98, 756, 757, 0, 99,
	239, 240, 100, 708, 738, 758, 759, 243, 0, 101,
	750, 0, 731, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 320, 109, 110, 0, 732, 734,
	0, 733, 735, 111, 112, 287, 113, 760, 114, 761,
	762, 0, 115, 0, 116, 0, 1320, 0, 753, 118,
	0, 119, 0, 0, 0, 696, 120, 121, 122, 740,
	741, 719, 0, 0, 123, 124, 763, 0, 125, 0,
	126, 0, 0, 321, 0, 127, 751, 0, 253, 0,
	128, 129, 130, 131, 747, 749, 323, 0, 135, 0,
	132, 0, 322, 133, 764, 134, 765, 766, 767, 0,
	730, 0, 324, 136, 325, 137, 138, 0, 140, 139,
	0, 752, 326, 141, 327, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 691, 0, 720, 748, 153, 768, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 329,
	159, 330, 742, 160, 161, 162, 163, 0, 743, 164,
	268, 165, 0, 166, 167, 168, 169, 769, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 331, 184, 185, 697, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 736,
	197, 187, 188, 198, 332, 199, 770, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 771, 204, 744, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 772,
	773, 0, 0, 213, 745, 746, 718, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 737, 222, 0,
	281, 223, 224, 225, 282, 774, 1318, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 692, 0,
	0, 0, 0, 0, 690, 0, 0, 0, 0, 688,
	689, 1321, 723, 712, 713, 710, 711, 702, 698, 1316,
	0, 0, 0, 701, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 739, 705, 0, 0,
	0, 95, 96, 97, 233, 754, 235, 755, 98, 756,
	757, 0, 99, 239, 240, 100, 708, 738, 758, 759,
	243, 0, 101, 750, 0, 731, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 732, 734, 0, 733, 735, 111, 112, 287, 113,
	760, 114, 761, 762, 0, 115, 0, 116, 0, 0,
	0, 753, 118, 0, 119, 0, 0, 0, 696, 120,
	121, 122, 740, 741, 719, 0, 0, 123, 124, 763,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 751,
	0, 253, 0, 128, 129, 130, 131, 747, 749, 323,
	0, 135, 0, 132, 0, 322, 133, 764, 134, 765,
	766, 767, 0, 730, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 752, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 691, 0, 720, 748, 153,
	768, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 742, 160, 161, 162, 163,
	0, 743, 164, 268, 165, 0, 166, 167, 168, 169,
	769, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	697, 186, 0, 190, 191, 192, 193, 73, 271, 194,
	195, 196, 736, 197, 187, 188, 198, 332, 199, 770,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 771,
	204, 744, 0, 207, 75, 208, 209, 210, 211, 212,
	0, 276, 772, 773, 0, 0, 213, 745, 746, 718,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	737, 222, 0, 281, 223, 224, 225, 585, 774, 0,
	0, 226, 0, 0, 0, 71, 227, 228, 229, 230,
	231, 692, 72, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 688, 689, 723, 712, 713, 710, 711, 702,
	0, 698, 0, 0, 0, 0, 701, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 739, 705,
	0, 0, 0, 95, 96, 97, 233, 754, 235, 755,
	98, 756, 757, 1358, 99, 239, 240, 100, 708, 738,
	758, 759, 243, 0, 101, 750, 0, 731, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 110, 0, 732, 734, 0, 733, 735, 111, 112,
	287, 113, 760, 114, 761, 762, 0, 115, 0, 116,
	0, 0, 0, 753, 118, 0, 119, 0, 0, 0,
	696, 120, 121, 122, 740, 741, 719, 0, 0, 123,
	124, 763, 0, 125, 0, 126, 0, 1363, 321, 0,
	127, 751, 0, 253, 0, 128, 129, 130, 131, 747,
	749, 323, 0, 135, 0, 132, 0, 322, 133, 764,
	134, 765, 766, 767, 0, 730, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 1359, 752, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 691, 0, 720,
	748, 153, 768, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 742, 160, 161,
	162, 163, 0, 743, 164, 268, 165, 0, 166, 167,
	168, 169, 769, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 697, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 736, 197, 187, 188, 198, 332,
	199, 770, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 771, 204, 744, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 772, 773, 0, 1360, 213, 745,
	746, 718, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 737, 222, 0, 281, 223, 224, 225, 282,
	774, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 692, 0, 0, 0, 0, 0, 690,
	0, 0, 0, 0, 688, 689, 723, 712, 713, 710,
	711, 702, 0, 698, 0, 0, 0, 0, 701, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	739, 705, 0, 0, 0, 95, 96, 97, 233, 754,
	235, 755, 98, 756, 757, 0, 99, 239, 240, 100,
	708, 738, 758, 759, 243, 0, 101, 750, 0, 731,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 320, 109, 110, 0, 732, 734, 0, 733, 735,
	111, 112, 287, 113, 760, 114, 761, 762, 0, 115,
	0, 116, 0, 0, 0, 753, 118, 0, 119, 0,
	0, 0, 696, 120, 121, 122, 740, 741, 719, 0,
	0, 123, 124, 763, 0, 125, 0, 126, 0, 0,
	321, 0, 127, 751, 0, 253, 0, 128, 129, 130,
	131, 747, 749, 323, 0, 135, 0, 132, 0, 322,
	133, 764, 134, 765, 766, 767, 0, 730, 0, 324,
	136, 325, 137, 138, 0, 140, 139, 0, 752, 326,
	141, 327, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 328, 149, 150, 152, 151, 691,
	1653, 720, 748, 153, 768, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 329, 159, 330, 742,
	160, 161, 162, 163, 0, 743, 164, 268, 165, 0,
	166, 167, 168, 169, 769, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 331, 184, 185, 697, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 736, 197, 187, 188,
	198, 332, 199, 770, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 771, 204, 744, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 772, 773, 0, 0,
	213, 745, 746, 718, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 737, 222, 0, 281, 223, 224,
	225, 282, 774, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 692, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 688, 689, 686, 723,
	712, 713, 710, 711, 702, 698, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 739, 705, 0, 0, 0, 95, 96,
	97, 233, 754, 235, 755, 98, 756, 757, 0, 99,
	239, 240, 100, 708, 738, 758, 759, 243, 0, 101,
	750, 0, 731, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 320, 109, 110, 0, 732, 734,
	0, 733, 735, 111, 112, 287, 113, 760, 114, 761,
	762, 0, 115, 0, 116, 0, 0, 0, 753, 118,
	0, 119, 0, 0, 0, 696, 120, 121, 122, 740,
	741, 719, 0, 0, 123, 124, 763, 0, 125, 0,
	126, 0, 0, 321, 0, 127, 751, 0, 253, 0,
	128, 129, 130, 131, 747, 749, 323, 0, 135, 0,
	132, 0, 322, 133, 764, 134, 765, 766, 767, 0,
	730, 0, 324, 136, 325, 137, 138, 0, 140, 139,
	0, 752, 326, 141, 327, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 691, 0, 720, 748, 153, 768, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 329,
	159, 330, 742, 160, 161, 162, 163, 0, 743, 164,
	268, 165, 0, 166, 167, 168, 169, 769, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 331, 184, 185, 697, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 736,
	197, 187, 188, 198, 332, 199, 770, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 771, 204, 744, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 772,
	773, 0, 0, 213, 745, 746, 718, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 737, 222, 0,
	281, 223, 224, 225, 282, 774, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 692, 0,
	0, 0, 0, 0, 690, 0, 0, 0, 0, 688,
	689, 0, 0, 0, 0, 0, 1040, 1311, 698, 0,
	0, 0, 0, 701, 723, 712, 713, 710, 711, 702,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 739, 705,
	0, 0, 0, 95, 96, 97, 233, 754, 235, 755,
	98, 756, 757, 0, 99, 239, 240, 100, 708, 738,
	758, 759, 243, 0, 101, 750, 0, 731, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 110, 0, 732, 734, 0, 733, 735, 111, 112,
	287, 113, 760, 114, 761, 762, 0, 115, 0, 116,
	0, 0, 0, 753, 118, 0, 119, 0, 0, 0,
	696, 120, 121, 122, 740, 741, 719, 0, 0, 123,
	124, 763, 0, 125, 0, 126, 0, 0, 321, 0,
	127, 751, 0, 253, 0, 128, 129, 130, 131, 747,
	749, 323, 0, 135, 0, 132, 0, 322, 133, 764,
	134, 765, 766, 767, 0, 730, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 0, 752, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 691, 0, 720,
	748, 153, 768, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 742, 160, 161,
	162, 163, 0, 743, 164, 268, 165, 0, 166, 167,
	168, 169, 769, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 697, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 736, 197, 187, 188, 198, 332,
	199, 770, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 771, 204, 744, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 772, 773, 0, 0, 213, 745,
	746, 718, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 737, 222, 0, 281, 223, 224, 225, 282,
	774, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 692, 0, 0, 0, 0, 0, 690,
	0, 0, 0, 0, 688, 689, 723, 712, 713, 710,
	711, 702, 0, 698, 1787, 0, 0, 0, 701, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	739, 705, 0, 0, 0, 95, 96, 97, 233, 754,
	235, 755, 98, 756, 757, 0, 99, 239, 240, 100,
	708, 738, 758, 759, 243, 0, 101, 750, 0, 731,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 320, 109, 110, 0, 732, 734, 0, 733, 735,
	111, 112, 287, 113, 760, 114, 761, 762, 0, 115,
	0, 116, 0, 0, 0, 753, 118, 0, 119, 0,
	0, 0, 696, 120, 121, 122, 740, 741, 719, 0,
	0, 123, 124, 763, 0, 125, 0, 126, 0, 0,
	321, 0, 127, 751, 0, 253, 0, 128, 129, 130,
	131, 747, 749, 323, 0, 135, 0, 132, 0, 322,
	133, 764, 134, 765, 766, 767, 0, 730, 0, 324,
	136, 325, 137, 138, 0, 140, 139, 0, 752, 326,
	141, 327, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 328, 149, 150, 152, 151, 691,
	0, 720, 748, 153, 768, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 329, 159, 330, 742,
	160, 161, 162, 163, 0, 743, 164, 268, 165, 0,
	166, 167, 168, 169, 769, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 331, 184, 185, 697, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 736, 197, 187, 188,
	198, 332, 199, 770, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 771, 204, 744, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 772, 773, 0, 0,
	213, 745, 746, 718, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 737, 222, 0, 281, 223, 224,
	225, 282, 774, 1744, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 692, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 688, 689, 723, 712,
	713, 710, 711, 702, 0, 698, 0, 0, 0, 0,
	701, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 739, 705, 0, 0, 0, 95, 96, 97,
	233, 754, 235, 755, 98, 756, 757, 0, 99, 239,
	240, 100, 708, 738, 758, 759, 243, 0, 101, 750,
	0, 731, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 320, 109, 110, 0, 732, 734, 0,
	733, 735, 111, 112, 287, 113, 760, 114, 761, 762,
	0, 115, 0, 116, 0, 0, 0, 753, 118, 0,
	119, 0, 0, 0, 696, 120, 121, 122, 740, 741,
	719, 0, 0, 123, 124, 763, 0, 125, 0, 126,
	0, 0, 321, 0, 127, 751, 0, 253, 0, 128,
	129, 130, 131, 747, 749, 323, 0, 135, 0, 132,
	0, 322, 133, 764, 134, 765, 766, 767, 0, 730,
	0, 324, 136, 325, 137, 138, 0, 140, 139, 0,
	752, 326, 141, 327, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 328, 149, 150, 152,
	151, 691, 0, 720, 748, 153, 768, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 329, 159,
	330, 742, 160, 161, 162, 163, 0, 743, 164, 268,
	165, 0, 166, 167, 168, 169, 769, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 331, 184, 185, 697, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 736, 197,
	187, 188, 198, 332, 199, 770, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 771, 204, 744, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 772, 773,
	0, 0, 213, 745, 746, 718, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 737, 222, 0, 281,
	223, 224, 225, 282, 774, 0, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 692, 0, 0,
	0, 0, 0, 690, 0, 0, 0, 0, 688, 689,
	723, 712, 713, 710, 711, 702, 0, 698, 1734, 0,
	0, 0, 701, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 739, 705, 0, 0, 0, 95,
	96, 97, 233, 754, 235, 755, 98, 756, 757, 0,
	99, 239, 240, 100, 708, 738, 758, 759, 243, 0,
	101, 750, 0, 731, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 732,
	734, 0, 733, 735, 111, 112, 287, 113, 760, 114,
	761, 762, 789, 115, 0, 116, 0, 0, 0, 753,
	118, 0, 119, 0, 0, 0, 696, 120, 121, 122,
	740, 741, 719, 0, 0, 123, 124, 763, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 751, 0, 253,
	0, 128, 129, 130, 131, 747, 749, 323, 0, 135,
	0, 132, 0, 322, 133, 764, 134, 765, 766, 767,
	0, 730, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 752, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 691, 0, 720, 748, 153, 768, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 742, 160, 161, 162, 163, 0, 743,
	164, 268, 165, 0, 166, 167, 168, 169, 769, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 697, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	736, 197, 187, 188, 198, 332, 199, 770, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 771, 204, 744,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	772, 773, 0, 0, 213, 745, 746, 718, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 737, 222,
	0, 281, 223, 224, 225, 282, 774, 0, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 692,
	0, 0, 0, 0, 0, 690, 0, 0, 0, 0,
	688, 689, 723, 712, 713, 710, 711, 702, 0, 698,
	0, 0, 0, 0, 701, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 739, 705, 0, 0,
	0, 95, 96, 97, 233, 754, 235, 755, 98, 756,
	757, 0, 99, 239, 240, 100, 708, 738, 758, 759,
	243, 0, 101, 750, 0, 731, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 732, 734, 0, 733, 735, 111, 112, 287, 113,
	760, 114, 761, 762, 0, 115, 0, 116, 0, 0,
	0, 753, 118, 0, 119, 0, 0, 0, 696, 120,
	121, 122, 740, 741, 719, 0, 0, 123, 124, 763,
	0, 125, 0, 126, 0, 1363, 321, 0, 127, 751,
	0, 253, 0, 128, 129, 130, 131, 747, 749, 323,
	0, 135, 0, 132, 0, 322, 133, 764, 134, 765,
	766, 767, 0, 730, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 752, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 691, 0, 720, 748, 153,
	768, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 742, 160, 161, 162, 163,
	0, 743, 164, 268, 165, 0, 166, 167, 168, 169,
	769, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	697, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 736, 197, 187, 188, 198, 332, 199, 770,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 771,
	204, 744, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 772, 773, 0, 0, 213, 745, 746, 718,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	737, 222, 0, 281, 223, 224, 225, 282, 774, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 692, 0, 0, 0, 0, 0, 690, 0, 0,
	0, 0, 688, 689, 723, 712, 713, 710, 711, 702,
	0, 698, 0, 0, 0, 0, 701, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 739, 705,
	0, 0, 0, 95, 96, 97, 233, 754, 235, 755,
	98, 756, 757, 0, 99, 239, 240, 100, 708, 738,
	758, 759, 243, 0, 101, 750, 0, 731, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 110, 0, 732, 734, 0, 733, 735, 111, 112,
	287, 113, 760, 114, 761, 762, 0, 115, 0, 116,
	0, 0, 0, 753, 118, 0, 119, 0, 0, 0,
	696, 120, 121, 122, 740, 741, 719, 0, 0, 123,
	124, 763, 0, 125, 0, 126, 0, 0, 321, 0,
	127, 751, 0, 253, 0, 128, 129, 130, 131, 747,
	749, 323, 0, 135, 0, 132, 0, 322, 133, 764,
	134, 765, 766, 767, 0, 730, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 0, 752, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 691, 0, 720,
	748, 153, 768, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 742, 160, 161,
	162, 163, 0, 743, 164, 268, 165, 0, 166, 167,
	168, 169, 769, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 697, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 736, 197, 187, 188, 198, 332,
	199, 770, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 771, 204, 744, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 772, 773, 0, 0, 213, 745,
	746, 718, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 737, 222, 0, 281, 223, 224, 225, 282,
	774, 0, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 692, 0, 0, 0, 0, 0, 690,
	0, 0, 0, 0, 688, 689, 723, 712, 713, 710,
	711, 702, 0, 698, 1306, 0, 0, 0, 701, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	739, 705, 0, 0, 0, 95, 96, 97, 233, 754,
	235, 755, 98, 756, 757, 0, 99, 239, 240, 100,
	708, 738, 758, 759, 243, 0, 101, 750, 0, 731,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 320, 109, 110, 0, 732, 734, 0, 733, 735,
	111, 112, 287, 113, 760, 114, 761, 762, 0, 115,
	0, 116, 0, 0, 0, 753, 118, 0, 119, 0,
	0, 0, 696, 120, 121, 122, 740, 741, 719, 0,
	0, 123, 124, 763, 0, 125, 0, 126, 0, 0,
	321, 0, 127, 751, 0, 253, 0, 128, 129, 130,
	131, 747, 749, 323, 0, 135, 0, 132, 0, 322,
	133, 764, 134, 765, 766, 767, 0, 730, 0, 324,
	136, 325, 137, 138, 0, 140, 139, 0, 752, 326,
	141, 327, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 328, 149, 150, 152, 151, 691,
	0, 720, 748, 153, 768, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 329, 159, 330, 742,
	160, 161, 162, 163, 0, 743, 164, 268, 165, 0,
	166, 167, 168, 169, 769, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 331, 184, 185, 697, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 736, 197, 187, 188,
	198, 332, 199, 770, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 771, 204, 744, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 772, 773, 0, 0,
	213, 745, 746, 718, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 737, 222, 0, 281, 223, 224,
	225, 282, 774, 0, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 692, 0, 0, 0, 0,
	0, 690, 0, 0, 0, 0, 688, 689, 686, 723,
	712, 713, 710, 711, 702, 698, 0, 0, 0, 0,
	701, 0, 0, 0, 0, 92, 93, 965, 94, 0,
	0, 0, 0, 739, 705, 0, 0, 0, 95, 96,
	97, 233, 754, 235, 755, 98, 756, 757, 0, 99,
	239, 240, 100, 708, 738, 758, 759, 243, 0, 101,
	750, 0, 731, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 320, 109, 110, 0, 732, 734,
	0, 733, 735, 111, 112, 287, 113, 760, 114, 761,
	762, 0, 115, 0, 116, 0, 0, 0, 753, 118,
	0, 119, 0, 0, 0, 696, 120, 121, 122, 740,
	741, 719, 0, 0, 123, 124, 763, 0, 125, 0,
	126, 0, 0, 321, 0, 127, 751, 0, 253, 0,
	128, 129, 130, 131, 747, 749, 323, 0, 135, 0,
	132, 0, 322, 133, 764, 134, 765, 766, 767, 0,
	730, 0, 324, 136, 325, 137, 138, 0, 140, 139,
	0, 752, 326, 141, 327, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 691, 0, 720, 748, 153, 768, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 329,
	159, 330, 742, 160, 161, 162, 163, 0, 743, 164,
	268, 165, 0, 166, 167, 168, 169, 769, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 331, 184, 185, 697, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 736,
	197, 187, 188, 198, 332, 199, 770, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 771, 204, 744, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 772,
	773, 0, 0, 213, 745, 746, 718, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 737, 222, 0,
	281, 223, 224, 225, 282, 774, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 692, 0,
	0, 0, 0, 0, 690, 0, 0, 0, 0, 688,
	689, 723, 712, 713, 710, 711, 702, 0, 698, 0,
	0, 0, 0, 701, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 739, 705, 0, 0, 0,
	95, 96, 97, 233, 754, 235, 755, 98, 756, 757,
	0, 99, 239, 240, 100, 708, 738, 758, 759, 243,
	0, 101, 750, 0, 731, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 2142, 0,
	732, 734, 0, 733, 735, 111, 112, 287, 113, 760,
	114, 761, 762, 0, 115, 0, 116, 0, 0, 0,
	753, 118, 0, 119, 0, 0, 0, 696, 120, 121,
	122, 740, 741, 719, 0, 0, 123, 124, 763, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 751, 0,
	253, 0, 128, 129, 130, 131, 747, 749, 323, 0,
	135, 0, 132, 0, 322, 133, 764, 134, 765, 766,
	767, 0, 730, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 752, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 691, 0, 720, 748, 153, 768,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 742, 160, 161, 162, 163, 0,
	743, 164, 268, 165, 0, 166, 167, 168, 169, 769,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 697,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 736, 197, 187, 188, 198, 332, 199, 770, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 771, 204,
	744, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 772, 773, 0, 0, 213, 745, 746, 718, 214,
	215, 2141, 217, 0, 0, 218, 219, 220, 221, 737,
	222, 0, 281, 223, 224, 225, 282, 774, 0, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	692, 0, 0, 0, 0, 0, 690, 0, 0, 0,
	0, 688, 689, 723, 712, 713, 710, 711, 702, 0,
	698, 0, 0, 0, 0, 701, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 739, 705, 0,
	0, 0, 95, 96, 97, 2140, 754, 235, 755, 98,
	756, 757, 0, 99, 239, 240, 100, 708, 738, 758,
	759, 243, 0, 101, 750, 0, 731, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	2142, 0, 732, 734, 0, 733, 735, 111, 112, 287,
	113, 760, 114, 761, 762, 0, 115, 0, 116, 0,
	0, 0, 753, 118, 0, 119, 0, 0, 0, 696,
	120, 121, 122, 740, 741, 719, 0, 0, 123, 124,
	763, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	751, 0, 253, 0, 128, 129, 130, 131, 747, 749,
	323, 0, 135, 0, 132, 0, 322, 133, 764, 134,
	765, 766, 767, 0, 730, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 752, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 691, 0, 720, 748,
	153, 768, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 742, 160, 161, 162,
	163, 0, 743, 164, 268, 165, 0, 166, 167, 168,
	169, 769, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 697, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 736, 197, 187, 188, 198, 332, 199,
	770, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	771, 204, 744, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 772, 773, 0, 0, 213, 745, 746,
	718, 214, 215, 2141, 217, 0, 0, 218, 219, 220,
	221, 737, 222, 0, 281, 223, 224, 225, 282, 774,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 692, 0, 0, 0, 0, 0, 690, 0,
	0, 0, 0, 688, 689, 723, 712, 713, 710, 711,
	702, 0, 698, 0, 0, 0, 0, 701, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 739,
	705, 0, 0, 0, 95, 96, 97, 233, 754, 235,
	755, 98, 756, 757, 0, 99, 239, 240, 100, 708,
	738, 758, 759, 243, 0, 101, 750, 0, 731, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 732, 734, 0, 733, 735, 111,
	112, 287, 113, 760, 114, 761, 762, 0, 115, 0,
	116, 0, 0, 0, 753, 118, 0, 119, 0, 0,
	0, 696, 120, 121, 122, 740, 741, 719, 0, 0,
	123, 124, 763, 0, 125, 0, 126, 0, 0, 321,
	0, 127, 751, 0, 253, 0, 128, 129, 130, 131,
	747, 749, 323, 0, 135, 0, 132, 0, 322, 133,
	764, 134, 765, 766, 767, 0, 730, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 0, 752, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 691, 0,
	720, 748, 153, 768, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 742, 160,
	161, 162, 163, 0, 743, 164, 268, 165, 0, 166,
	167, 168, 169, 769, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 697, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 736, 197, 187, 188, 198,
	332, 199, 770, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 771, 204, 744, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 772, 773, 0, 0, 213,
	745, 746, 718, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 737, 222, 0, 281, 223, 224, 225,
	282, 774, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 692, 0, 0, 0, 0, 0,
	690, 0, 0, 0, 0, 688, 689, 1335, 712, 713,
	710, 711, 702, 0, 698, 0, 0, 0, 0, 701,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 739, 705, 0, 0, 0, 95, 96, 97, 233,
	754, 235, 755, 98, 756, 757, 0, 99, 239, 240,
	100, 708, 738, 758, 759, 243, 0, 101, 750, 0,
	731, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 320, 109, 110, 0, 732, 734, 0, 733,
	735, 111, 112, 287, 113, 760, 1338, 761, 762, 0,
	115, 0, 116, 0, 0, 0, 753, 118, 0, 119,
	0, 0, 0, 696, 120, 121, 122, 740, 741, 719,
	0, 0, 123, 124, 763, 0, 125, 0, 126, 0,
	0, 321, 0, 127, 751, 0, 253, 0, 128, 129,
	1339, 131, 747, 749, 323, 0, 135, 0, 132, 0,
	322, 133, 764, 134, 765, 766, 767, 0, 730, 0,
	324, 136, 325, 137, 138, 0, 140, 139, 0, 752,
	326, 141, 327, 0, 142, 0, 0, 143, 0, 144,
	1340, 1337, 148, 262, 147, 328, 149, 150, 152, 151,
	691, 0, 720, 748, 153, 768, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 329, 159, 330,
	742, 160, 161, 162, 163, 0, 743, 164, 268, 165,
	0, 166, 167, 168, 169, 769, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 331, 184, 185, 697, 186, 0, 190, 191,
	192, 1341, 0, 271, 194, 195, 196, 736, 197, 187,
	188, 198, 332, 199, 770, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 771, 204, 744, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 772, 773, 0,
	0, 213, 745, 746, 718, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 737, 222, 0, 281, 223,
	224, 225, 282, 774, 0, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 1336, 231, 692, 0, 0, 0,
	0, 0, 690, 0, 0, 0, 0, 688, 689, 723,
	712, 713, 710, 711, 702, 0, 698, 0, 0, 0,
	0, 701, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 739, 705, 0, 0, 0, 95, 96,
	97, 233, 754, 235, 755, 98, 756, 757, 0, 99,
	239, 240, 100, 708, 738, 758, 759, 243, 0, 101,
	750, 0, 731, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 320, 109, 110, 0, 732, 734,
	0, 733, 735, 111, 112, 287, 113, 760, 114, 761,
	762, 0, 115, 0, 116, 0, 0, 0, 753, 118,
	0, 119, 0, 0, 0, 696, 120, 121, 122, 740,
	741, 719, 0, 0, 123, 124, 763, 0, 125, 0,
	126, 0, 0, 321, 0, 127, 751, 0, 253, 0,
	128, 129, 130, 131, 747, 749, 323, 0, 135, 0,
	132, 0, 322, 133, 764, 134, 765, 766, 767, 0,
	730, 0, 324, 136, 325, 137, 138, 0, 140, 139,
	0, 752, 326, 141, 327, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 0, 0, 720, 748, 153, 768, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 329,
	159, 330, 742, 160, 161, 162, 163, 0, 743, 164,
	268, 165, 0, 166, 167, 168, 169, 769, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 331, 184, 185, 1353, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 736,
	197, 187, 188, 198, 332, 199, 770, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 771, 204, 744, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 772,
	773, 0, 0, 213, 745, 746, 718, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 737, 222, 0,
	281, 223, 224, 225, 282, 774, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 0, 0, 1351, 0, 0, 0, 0, 1349,
	1350, 723, 712, 713, 710, 711, 702, 0, 1352, 0,
	0, 0, 0, 701, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 739, 705, 0, 0, 0,
	95, 96, 97, 233, 754, 235, 755, 98, 756, 757,
	0, 99, 239, 240, 100, 0, 738, 758, 759, 243,
	0, 101, 750, 0, 731, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	732, 734, 0, 733, 735, 111, 112, 287, 113, 760,
	114, 761, 762, 0, 115, 0, 116, 0, 0, 0,
	753, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 740, 741, 719, 0, 0, 123, 124, 763, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 751, 0,
	253, 0, 128, 129, 130, 131, 747, 749, 323, 0,
	135, 0, 132, 0, 322, 133, 764, 134, 765, 766,
	767, 0, 730, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 752, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 0, 0, 720, 748, 153, 768,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 742, 160, 161, 162, 163, 0,
	743, 164, 268, 165, 0, 166, 167, 168, 169, 769,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 1353,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 736, 197, 187, 188, 198, 332, 199, 770, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 771, 204,
	744, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 772, 773, 0, 0, 213, 745, 746, 718, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 737,
	222, 0, 281, 223, 224, 225, 282, 774, 0, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 723, 712, 713, 710, 711, 702, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	1352, 94, 0, 0, 0, 701, 739, 705, 0, 0,
	0, 95, 96, 97, 0, 754, 235, 755, 98, 756,
	757, 0, 99, 239, 240, 100, 708, 738, 758, 759,
	243, 0, 101, 750, 0, 731, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 2142,
	0, 732, 734, 0, 733, 735, 111, 112, 287, 113,
	760, 114, 761, 762, 0, 115, 0, 116, 0, 0,
	0, 753, 118, 0, 119, 0, 0, 0, 696, 120,
	121, 122, 740, 741, 719, 0, 0, 123, 124, 763,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 751,
	0, 253, 0, 128, 129, 130, 131, 747, 749, 0,
	0, 135, 0, 132, 0, 322, 133, 764, 134, 765,
	766, 767, 0, 730, 0, 0, 136, 325, 137, 138,
	0, 140, 139, 0, 752, 326, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 691, 0, 720, 748, 153,
	768, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 742, 160, 161, 162, 163,
	0, 743, 164, 268, 165, 0, 166, 167, 168, 169,
	769, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	697, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 736, 197, 187, 188, 198, 0, 199, 770,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 771,
	204, 744, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 772, 773, 0, 0, 213, 745, 746, 718,
	214, 215, 2141, 217, 0, 0, 218, 219, 220, 221,
	737, 222, 0, 281, 223, 224, 225, 282, 774, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 723, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 688, 689, 0, 0, 0, 92, 93, 0,
	94, 698, 0, 0, 0, 739, 701, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 738, 241, 242, 243,
	0, 101, 750, 0, 731, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	732, 734, 0, 733, 735, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 740, 741, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 751, 0,
	253, 0, 128, 129, 130, 131, 747, 749, 323, 0,
	135, 0, 132, 0, 322, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 752, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 0, 0, 0, 748, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 742, 160, 161, 162, 163, 0,
	743, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 736, 197, 187, 188, 198, 332, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	744, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 745, 746, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 737,
	222, 0, 281, 223, 224, 225, 282, 283, 0, 0,
	226, 0, 503, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	1626, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 319, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 323,
	0, 135, 0, 132, 0, 322, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 261, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 73, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 332, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 75, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 585, 283, 0,
	0, 226, 0, 0, 0, 71, 227, 228, 229, 230,
	231, 0, 72, 503, 500, 0, 501, 496, 491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 70, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 319, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 320, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 914, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 493, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 321, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	323, 0, 135, 0, 132, 0, 322, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 324, 136, 325, 137,
	138, 0, 140, 139, 0, 261, 326, 141, 327, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 328, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 494, 0, 157, 0,
	0, 158, 265, 329, 159, 330, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 331, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 332, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	492, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	0, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 503, 500, 0, 501, 496, 491, 0, 0,
	0, 0, 0, 502, 497, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 319, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 320, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 911, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 493, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 321, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 323,
	0, 135, 0, 132, 0, 322, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 324, 136, 325, 137, 138,
	0, 140, 139, 0, 261, 326, 141, 327, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	328, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 494, 0, 157, 0, 0,
	158, 265, 329, 159, 330, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 331, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 332, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 492,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 0,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 503, 500, 0, 501, 496, 491, 0, 0, 0,
	0, 0, 502, 497, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 319, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 617, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 493, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 323, 0,
	135, 0, 132, 0, 322, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 261, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 494, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 332, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 492, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 0, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	503, 500, 0, 501, 496, 491, 0, 0, 0, 0,
	0, 502, 497, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 319, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 320, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 493, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 321, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 323, 0, 135,
	0, 132, 0, 322, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 324, 136, 325, 137, 138, 0, 140,
	139, 0, 261, 326, 141, 327, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 328, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 494, 0, 157, 0, 0, 158, 265,
	329, 159, 330, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 331, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 332, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 492, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 0, 89, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	502, 497, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 537, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 73, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	75, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 585, 283, 0, 0, 226, 0, 89,
	0, 71, 227, 228, 229, 230, 231, 0, 72, 0,
	0, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 1230, 0, 1235, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 73, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 75, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 585, 283, 0, 0, 226, 0,
	89, 0, 71, 227, 228, 229, 230, 231, 0, 72,
	0, 0, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 70, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 537, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 0, 0, 226,
	0, 89, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 1230, 0, 1235,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 0, 0,
	226, 0, 0, 89, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 818, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 254, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	0, 0, 226, 0, 89, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 1141, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 0, 0, 226, 0, 89, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 1751, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 0, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 723, 712, 713, 710, 711, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	92, 93, 0, 94, 785, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 754, 235, 755,
	98, 756, 757, 0, 99, 239, 240, 100, 0, 0,
	758, 759, 243, 0, 101, 244, 0, 319, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 320,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 760, 114, 761, 762, 0, 115, 0, 116,
	0, 0, 0, 753, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 719, 0, 0, 123,
	124, 763, 0, 125, 0, 126, 0, 0, 321, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 323, 0, 135, 0, 132, 0, 322, 133, 764,
	134, 765, 766, 767, 0, 730, 0, 324, 136, 325,
	137, 138, 0, 140, 139, 0, 261, 326, 141, 327,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 328, 149, 150, 152, 151, 0, 0, 720,
	263, 153, 768, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 329, 159, 330, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 769, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 331,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 332,
	199, 770, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 771, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 772, 773, 0, 0, 213, 279,
	280, 718, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	774, 503, 500, 226, 0, 0, 623, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 319, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 320, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 321, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 323, 0,
	135, 0, 132, 0, 322, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 324, 136, 325, 137, 138, 0,
	140, 139, 0, 261, 326, 141, 327, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 328,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 329, 159, 330, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 331, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 332, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 85, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	84, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 503, 500, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	88, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 319, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	320, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 321,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 323, 0, 135, 0, 132, 0, 322, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 324, 136,
	325, 137, 138, 0, 140, 139, 0, 261, 326, 141,
	327, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 328, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 329, 159, 330, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	331, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	332, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 503,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 88, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 319, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 320, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 321, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 323, 0, 135, 0,
	132, 0, 322, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 324, 136, 325, 137, 138, 0, 140, 139,
	0, 261, 326, 141, 327, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 328, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 329,
	159, 330, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 331, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 332, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 1098, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 1096, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 1202,
	0, 123, 124, 251, 0, 125, 0, 126, 1101, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 1200, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 1100,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 1201,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 1098, 101, 244, 0, 0, 1093, 102, 103,
	104, 0, 105, 1096, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 1101, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 1092, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 1100, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 1099, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 1718, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 254, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 254, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 537, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 928, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 254,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 844, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 537, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 593, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	549, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 537,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 542, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 537, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 418, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 417, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 147, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 276, 277, 278, 0, 0,
	213, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 1399, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 1397, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 1386, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 956,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 254, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 432, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 828, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 254, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 0,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	662, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 170, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 101, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 657, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 142,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 147,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	270, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	195, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 276, 277, 278, 0, 0, 213, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 599, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 446, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 162, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 168, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 186, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 443, 277,
	278, 0, 0, 439, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 89, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 0, 0,
	0, 0, 92, 93, 0, 94, 0, 0, 0, 0,
	232, 0, 0, 0, 0, 95, 96, 97, 233, 234,
	235, 236, 98, 237, 238, 0, 99, 239, 240, 100,
	0, 0, 241, 242, 243, 0, 101, 244, 0, 0,
	0, 102, 103, 104, 0, 105, 0, 106, 107, 108,
	0, 0, 109, 110, 0, 0, 0, 0, 0, 0,
	111, 112, 287, 113, 245, 114, 246, 247, 0, 115,
	0, 116, 0, 0, 0, 117, 118, 0, 119, 0,
	0, 0, 248, 120, 121, 122, 249, 250, 0, 0,
	0, 123, 124, 251, 0, 125, 0, 126, 0, 0,
	0, 0, 127, 252, 0, 253, 0, 128, 129, 130,
	131, 254, 255, 0, 0, 135, 0, 132, 0, 0,
	133, 256, 134, 257, 258, 259, 0, 260, 0, 0,
	136, 0, 137, 138, 0, 140, 139, 0, 261, 0,
	141, 0, 0, 142, 0, 0, 143, 0, 144, 145,
	146, 148, 262, 446, 0, 149, 150, 152, 151, 0,
	0, 0, 263, 153, 264, 154, 155, 0, 156, 0,
	0, 157, 0, 0, 158, 265, 0, 159, 0, 266,
	160, 161, 162, 163, 0, 267, 164, 268, 165, 0,
	166, 167, 168, 169, 269, 170, 171, 0, 172, 173,
	174, 175, 176, 178, 179, 177, 180, 181, 182, 0,
	183, 0, 184, 185, 270, 186, 0, 190, 191, 192,
	193, 0, 271, 194, 195, 196, 0, 197, 187, 188,
	198, 0, 199, 272, 273, 200, 0, 206, 201, 202,
	189, 203, 205, 274, 204, 275, 0, 207, 0, 208,
	209, 210, 211, 212, 0, 443, 277, 278, 0, 0,
	439, 279, 280, 0, 214, 215, 216, 217, 0, 0,
	218, 219, 220, 221, 0, 222, 0, 281, 223, 224,
	225, 282, 283, 89, 0, 226, 0, 0, 0, 0,
	227, 228, 229, 230, 231, 0, 0, 0, 0, 92,
	93, 0, 94, 0, 0, 0, 0, 232, 0, 0,
	0, 0, 95, 96, 97, 233, 234, 235, 236, 98,
	237, 238, 0, 99, 239, 240, 100, 0, 0, 241,
	242, 243, 0, 101, 244, 0, 0, 0, 102, 103,
	104, 0, 105, 0, 106, 107, 108, 0, 0, 109,
	110, 0, 0, 0, 0, 0, 0, 111, 112, 287,
	113, 245, 114, 246, 247, 0, 115, 0, 116, 0,
	0, 0, 117, 118, 0, 119, 0, 0, 0, 248,
	120, 121, 122, 249, 250, 0, 0, 0, 123, 124,
	251, 0, 125, 0, 126, 0, 0, 0, 0, 127,
	252, 0, 253, 0, 128, 129, 130, 131, 581, 255,
	0, 0, 135, 0, 132, 0, 0, 133, 256, 134,
	257, 258, 259, 0, 260, 0, 0, 136, 0, 137,
	138, 0, 140, 139, 0, 261, 0, 141, 0, 0,
	142, 0, 0, 143, 0, 144, 145, 146, 148, 262,
	147, 0, 149, 150, 152, 151, 0, 0, 0, 263,
	153, 264, 154, 155, 0, 156, 0, 0, 157, 0,
	0, 158, 265, 0, 159, 0, 266, 160, 161, 162,
	163, 0, 267, 164, 268, 165, 0, 166, 167, 168,
	169, 269, 170, 171, 0, 172, 173, 174, 175, 176,
	178, 179, 177, 180, 181, 182, 0, 183, 0, 184,
	185, 270, 186, 0, 190, 191, 192, 193, 0, 271,
	194, 195, 196, 0, 197, 187, 188, 198, 0, 199,
	272, 273, 200, 0, 206, 201, 202, 189, 203, 205,
	274, 204, 275, 0, 207, 0, 208, 209, 210, 211,
	212, 0, 276, 277, 278, 0, 0, 213, 279, 280,
	0, 214, 215, 216, 217, 0, 0, 218, 219, 220,
	221, 0, 222, 0, 281, 223, 224, 225, 282, 283,
	89, 0, 226, 0, 0, 0, 0, 227, 228, 229,
	230, 231, 0, 0, 0, 0, 92, 93, 0, 94,
	0, 0, 0, 0, 232, 0, 0, 0, 0, 95,
	96, 97, 233, 234, 235, 236, 98, 237, 238, 0,
	99, 239, 240, 100, 0, 0, 241, 242, 243, 0,
	101, 244, 0, 0, 0, 102, 103, 104, 0, 105,
	0, 106, 107, 108, 0, 0, 109, 110, 0, 0,
	0, 0, 0, 0, 111, 112, 287, 113, 245, 114,
	246, 247, 0, 115, 0, 116, 0, 0, 0, 117,
	118, 0, 119, 0, 0, 0, 248, 120, 121, 122,
	249, 250, 0, 0, 0, 123, 124, 251, 0, 125,
	0, 126, 0, 0, 0, 0, 127, 252, 0, 253,
	0, 128, 129, 130, 131, 579, 255, 0, 0, 135,
	0, 132, 0, 0, 133, 256, 134, 257, 258, 259,
	0, 260, 0, 0, 136, 0, 137, 138, 0, 140,
	139, 0, 261, 0, 141, 0, 0, 142, 0, 0,
	143, 0, 144, 145, 146, 148, 262, 147, 0, 149,
	150, 152, 151, 0, 0, 0, 263, 153, 264, 154,
	155, 0, 156, 0, 0, 157, 0, 0, 158, 265,
	0, 159, 0, 266, 160, 161, 162, 163, 0, 267,
	164, 268, 165, 0, 166, 167, 168, 169, 269, 170,
	171, 0, 172, 173, 174, 175, 176, 178, 179, 177,
	180, 181, 182, 0, 183, 0, 184, 185, 270, 186,
	0, 190, 191, 192, 193, 0, 271, 194, 195, 196,
	0, 197, 187, 188, 198, 0, 199, 272, 273, 200,
	0, 206, 201, 202, 189, 203, 205, 274, 204, 275,
	0, 207, 0, 208, 209, 210, 211, 212, 0, 276,
	277, 278, 0, 0, 213, 279, 280, 0, 214, 215,
	216, 217, 0, 0, 218, 219, 220, 221, 0, 222,
	0, 281, 223, 224, 225, 282, 283, 89, 0, 226,
	0, 0, 0, 0, 227, 228, 229, 230, 231, 0,
	0, 0, 0, 92, 93, 0, 94, 0, 0, 0,
	0, 232, 0, 0, 0, 0, 95, 96, 97, 233,
	234, 235, 236, 98, 237, 238, 0, 99, 239, 240,
	100, 0, 0, 241, 242, 243, 0, 101, 244, 0,
	0, 0, 102, 103, 104, 0, 105, 0, 106, 107,
	108, 0, 0, 109, 110, 0, 0, 0, 0, 0,
	0, 111, 112, 287, 113, 245, 114, 246, 247, 0,
	115, 0, 116, 0, 0, 0, 117, 118, 0, 119,
	0, 0, 0, 248, 120, 121, 122, 249, 250, 0,
	0, 0, 123, 124, 251, 0, 125, 0, 126, 0,
	0, 0, 0, 127, 252, 0, 253, 0, 128, 129,
	130, 131, 576, 255, 0, 0, 135, 0, 132, 0,
	0, 133, 256, 134, 257, 258, 259, 0, 260, 0,
	0, 136, 0, 137, 138, 0, 140, 139, 0, 261,
	0, 141, 0, 0, 142, 0, 0, 143, 0, 144,
	145, 146, 148, 262, 147, 0, 149, 150, 152, 151,
	0, 0, 0, 263, 153, 264, 154, 155, 0, 156,
	0, 0, 157, 0, 0, 158, 265, 0, 159, 0,
	266, 160, 161, 162, 163, 0, 267, 164, 268, 165,
	0, 166, 167, 168, 169, 269, 170, 171, 0, 172,
	173, 174, 175, 176, 178, 179, 177, 180, 181, 182,
	0, 183, 0, 184, 185, 270, 186, 0, 190, 191,
	192, 193, 0, 271, 194, 195, 196, 0, 197, 187,
	188, 198, 0, 199, 272, 273, 200, 0, 206, 201,
	202, 189, 203, 205, 274, 204, 275, 0, 207, 0,
	208, 209, 210, 211, 212, 0, 276, 277, 278, 0,
	0, 213, 279, 280, 0, 214, 215, 216, 217, 0,
	0, 218, 219, 220, 221, 0, 222, 0, 281, 223,
	224, 225, 282, 283, 89, 0, 226, 0, 0, 0,
	0, 227, 228, 229, 230, 231, 0, 0, 0, 0,
	92, 93, 0, 94, 0, 0, 0, 0, 232, 0,
	0, 0, 0, 95, 96, 97, 233, 234, 235, 236,
	98, 237, 238, 0, 99, 239, 240, 100, 0, 0,
	241, 242, 243, 0, 101, 244, 0, 0, 0, 102,
	103, 104, 0, 105, 0, 106, 107, 108, 0, 0,
	109, 110, 0, 0, 0, 0, 0, 0, 111, 112,
	287, 113, 245, 114, 246, 247, 0, 115, 0, 116,
	0, 0, 0, 117, 118, 0, 119, 0, 0, 0,
	248, 120, 121, 122, 249, 250, 0, 0, 0, 123,
	124, 251, 0, 125, 0, 126, 0, 0, 0, 0,
	127, 252, 0, 253, 0, 128, 129, 130, 131, 573,
	255, 0, 0, 135, 0, 132, 0, 0, 133, 256,
	134, 257, 258, 259, 0, 260, 0, 0, 136, 0,
	137, 138, 0, 140, 139, 0, 261, 0, 141, 0,
	0, 142, 0, 0, 143, 0, 144, 145, 146, 148,
	262, 147, 0, 149, 150, 152, 151, 0, 0, 0,
	263, 153, 264, 154, 155, 0, 156, 0, 0, 157,
	0, 0, 158, 265, 0, 159, 0, 266, 160, 161,
	162, 163, 0, 267, 164, 268, 165, 0, 166, 167,
	168, 169, 269, 170, 171, 0, 172, 173, 174, 175,
	176, 178, 179, 177, 180, 181, 182, 0, 183, 0,
	184, 185, 270, 186, 0, 190, 191, 192, 193, 0,
	271, 194, 195, 196, 0, 197, 187, 188, 198, 0,
	199, 272, 273, 200, 0, 206, 201, 202, 189, 203,
	205, 274, 204, 275, 0, 207, 0, 208, 209, 210,
	211, 212, 0, 276, 277, 278, 0, 0, 213, 279,
	280, 0, 214, 215, 216, 217, 0, 0, 218, 219,
	220, 221, 0, 222, 0, 281, 223, 224, 225, 282,
	283, 89, 0, 226, 0, 0, 0, 0, 227, 228,
	229, 230, 231, 0, 0, 0, 0, 92, 93, 0,
	94, 0, 0, 0, 0, 232, 0, 0, 0, 0,
	95, 96, 97, 233, 234, 235, 236, 98, 237, 238,
	0, 99, 239, 240, 100, 0, 0, 241, 242, 243,
	0, 101, 244, 0, 0, 0, 102, 103, 104, 0,
	105, 0, 106, 107, 108, 0, 0, 109, 110, 0,
	0, 0, 0, 0, 0, 111, 112, 287, 113, 245,
	114, 246, 247, 0, 115, 0, 116, 0, 0, 0,
	117, 118, 0, 119, 0, 0, 0, 248, 120, 121,
	122, 249, 250, 0, 0, 0, 123, 124, 251, 0,
	125, 0, 126, 0, 0, 0, 0, 127, 252, 0,
	253, 0, 128, 129, 130, 131, 571, 255, 0, 0,
	135, 0, 132, 0, 0, 133, 256, 134, 257, 258,
	259, 0, 260, 0, 0, 136, 0, 137, 138, 0,
	140, 139, 0, 261, 0, 141, 0, 0, 142, 0,
	0, 143, 0, 144, 145, 146, 148, 262, 147, 0,
	149, 150, 152, 151, 0, 0, 0, 263, 153, 264,
	154, 155, 0, 156, 0, 0, 157, 0, 0, 158,
	265, 0, 159, 0, 266, 160, 161, 162, 163, 0,
	267, 164, 268, 165, 0, 166, 167, 168, 169, 269,
	170, 171, 0, 172, 173, 174, 175, 176, 178, 179,
	177, 180, 181, 182, 0, 183, 0, 184, 185, 270,
	186, 0, 190, 191, 192, 193, 0, 271, 194, 195,
	196, 0, 197, 187, 188, 198, 0, 199, 272, 273,
	200, 0, 206, 201, 202, 189, 203, 205, 274, 204,
	275, 0, 207, 0, 208, 209, 210, 211, 212, 0,
	276, 277, 278, 0, 0, 213, 279, 280, 0, 214,
	215, 216, 217, 0, 0, 218, 219, 220, 221, 0,
	222, 0, 281, 223, 224, 225, 282, 283, 89, 0,
	226, 0, 0, 0, 0, 227, 228, 229, 230, 231,
	0, 0, 0, 0, 92, 93, 0, 94, 0, 0,
	0, 0, 232, 0, 0, 0, 0, 95, 96, 97,
	233, 234, 235, 236, 98, 237, 238, 0, 99, 239,
	240, 100, 0, 0, 241, 242, 243, 0, 101, 244,
	0, 0, 0, 102, 103, 104, 0, 105, 0, 106,
	107, 108, 0, 0, 109, 110, 0, 0, 0, 0,
	0, 0, 111, 112, 287, 113, 245, 114, 246, 247,
	0, 115, 0, 116, 0, 0, 0, 117, 118, 0,
	119, 0, 0, 0, 248, 120, 121, 122, 249, 250,
	0, 0, 0, 123, 124, 251, 0, 125, 0, 126,
	0, 0, 0, 0, 127, 252, 0, 253, 0, 128,
	129, 130, 131, 545, 255, 0, 0, 135, 0, 132,
	0, 0, 133, 256, 134, 257, 258, 259, 0, 260,
	0, 0, 136, 0, 137, 138, 0, 140, 139, 0,
	261, 0, 141, 0, 0, 142, 0, 0, 143, 0,
	144, 145, 146, 148, 262, 147, 0, 149, 150, 152,
	151, 0, 0, 0, 263, 153, 264, 154, 155, 0,
	156, 0, 0, 157, 0, 0, 158, 265, 0, 159,
	0, 266, 160, 161, 162, 163, 0, 267, 164, 268,
	165, 0, 166, 167, 168, 169, 269, 170, 171, 0,
	172, 173, 174, 175, 176, 178, 179, 177, 180, 181,
	182, 0, 183, 0, 184, 185, 270, 186, 0, 190,
	191, 192, 193, 0, 271, 194, 195, 196, 0, 197,
	187, 188, 198, 0, 199, 272, 273, 200, 0, 206,
	201, 202, 189, 203, 205, 274, 204, 275, 0, 207,
	0, 208, 209, 210, 211, 212, 0, 276, 277, 278,
	0, 0, 213, 279, 280, 0, 214, 215, 216, 217,
	0, 0, 218, 219, 220, 221, 0, 222, 0, 281,
	223, 224, 225, 282, 283, 89, 0, 226, 0, 0,
	0, 0, 227, 228, 229, 230, 231, 0, 0, 0,
	0, 92, 93, 0, 94, 0, 0, 0, 0, 232,
	0, 0, 0, 0, 95, 96, 97, 233, 234, 235,
	236, 98, 237, 238, 0, 99, 239, 240, 100, 0,
	0, 241, 242, 243, 0, 101, 244, 0, 0, 0,
	102, 103, 104, 0, 105, 0, 106, 107, 108, 0,
	0, 109, 110, 0, 0, 0, 0, 0, 0, 111,
	112, 287, 113, 245, 114, 246, 247, 0, 115, 0,
	116, 0, 0, 0, 117, 118, 0, 119, 0, 0,
	0, 248, 120, 121, 122, 249, 250, 0, 0, 0,
	123, 124, 251, 0, 125, 0, 126, 0, 0, 0,
	0, 127, 252, 0, 253, 0, 128, 129, 130, 131,
	254, 255, 0, 0, 135, 0, 132, 0, 0, 133,
	256, 134, 257, 258, 259, 0, 260, 0, 0, 136,
	0, 137, 138, 0, 140, 139, 0, 261, 0, 141,
	0, 0, 142, 0, 0, 143, 0, 144, 145, 146,
	148, 262, 147, 0, 149, 150, 152, 151, 0, 0,
	0, 263, 153, 264, 154, 155, 0, 156, 0, 0,
	157, 0, 0, 158, 265, 0, 159, 0, 266, 160,
	161, 162, 163, 0, 267, 164, 268, 165, 0, 166,
	167, 168, 169, 269, 526, 171, 0, 172, 173, 174,
	175, 176, 178, 179, 177, 180, 181, 182, 0, 183,
	0, 184, 185, 270, 186, 0, 190, 191, 192, 193,
	0, 271, 194, 195, 196, 0, 197, 187, 188, 198,
	0, 199, 272, 273, 200, 0, 206, 201, 202, 189,
	203, 205, 274, 204, 275, 0, 207, 0, 208, 209,
	210, 211, 212, 0, 276, 277, 278, 0, 0, 213,
	279, 280, 0, 214, 215, 216, 217, 0, 0, 218,
	219, 220, 221, 0, 222, 0, 281, 223, 224, 225,
	282, 283, 89, 0, 226, 0, 0, 0, 0, 227,
	228, 229, 230, 231, 0, 0, 0, 0, 92, 93,
	0, 94, 0, 0, 0, 0, 232, 0, 0, 0,
	0, 95, 96, 97, 233, 234, 235, 236, 98, 237,
	238, 0, 99, 239, 240, 100, 0, 0, 241, 242,
	243, 0, 437, 244, 0, 0, 0, 102, 103, 104,
	0, 105, 0, 106, 107, 108, 0, 0, 109, 110,
	0, 0, 0, 0, 0, 0, 111, 112, 287, 113,
	245, 114, 246, 247, 0, 115, 0, 116, 0, 0,
	0, 117, 118, 0, 119, 0, 0, 0, 248, 120,
	121, 122, 249, 250, 0, 0, 0, 123, 124, 251,
	0, 125, 0, 126, 0, 0, 0, 0, 127, 252,
	0, 253, 0, 128, 129, 130, 131, 254, 255, 0,
	0, 135, 0, 132, 0, 0, 133, 256, 134, 257,
	258, 259, 0, 260, 0, 0, 136, 0, 137, 138,
	0, 140, 139, 0, 261, 0, 141, 0, 0, 435,
	0, 0, 143, 0, 144, 145, 146, 148, 262, 446,
	0, 149, 150, 152, 151, 0, 0, 0, 263, 153,
	264, 154, 155, 0, 156, 0, 0, 157, 0, 0,
	158, 265, 0, 159, 0, 266, 160, 161, 162, 163,
	0, 267, 164, 268, 165, 0, 166, 167, 168, 169,
	269, 170, 171, 0, 172, 173, 174, 175, 176, 178,
	179, 177, 180, 181, 182, 0, 183, 0, 184, 185,
	438, 186, 0, 190, 191, 192, 193, 0, 271, 194,
	436, 196, 0, 197, 187, 188, 198, 0, 199, 272,
	273, 200, 0, 206, 201, 202, 189, 203, 205, 274,
	204, 275, 0, 207, 0, 208, 209, 210, 211, 212,
	0, 443, 277, 278, 0, 0, 439, 279, 280, 0,
	214, 215, 216, 217, 0, 0, 218, 219, 220, 221,
	0, 222, 0, 281, 223, 224, 225, 282, 283, 89,
	0, 226, 0, 0, 0, 0, 227, 228, 229, 230,
	231, 0, 0, 0, 0, 92, 93, 0, 94, 0,
	0, 0, 0, 232, 0, 0, 0, 0, 95, 96,
	97, 233, 234, 235, 236, 98, 237, 238, 0, 99,
	239, 240, 100, 0, 0, 241, 242, 243, 0, 101,
	244, 0, 0, 0, 102, 103, 104, 0, 105, 0,
	106, 107, 108, 0, 0, 109, 110, 0, 0, 0,
	0, 0, 0, 111, 112, 287, 113, 245, 114, 246,
	247, 0, 115, 0, 116, 0, 0, 0, 117, 118,
	0, 119, 0, 0, 0, 248, 120, 121, 122, 249,
	250, 0, 0, 0, 123, 124, 251, 0, 125, 0,
	126, 0, 0, 0, 0, 127, 252, 0, 253, 0,
	128, 129, 130, 131, 254, 255, 0, 0, 135, 0,
	132, 0, 0, 133, 256, 134, 257, 258, 259, 0,
	260, 0, 0, 136, 0, 137, 138, 0, 140, 139,
	0, 261, 0, 141, 0, 0, 142, 0, 0, 143,
	0, 144, 145, 146, 148, 262, 147, 0, 149, 150,
	152, 151, 0, 0, 0, 263, 153, 264, 154, 155,
	0, 156, 0, 0, 157, 0, 0, 158, 265, 0,
	159, 0, 266, 160, 161, 0, 163, 0, 267, 164,
	268, 165, 0, 166, 167, 0, 169, 269, 170, 171,
	0, 172, 173, 174, 175, 176, 178, 179, 177, 180,
	181, 182, 0, 183, 0, 184, 185, 270, 0, 0,
	190, 191, 192, 193, 0, 271, 194, 195, 196, 0,
	197, 187, 188, 198, 0, 199, 272, 273, 200, 0,
	206, 201, 202, 189, 203, 205, 274, 204, 275, 0,
	207, 0, 208, 209, 210, 211, 212, 0, 276, 277,
	278, 0, 0, 213, 279, 280, 0, 214, 215, 216,
	217, 0, 0, 218, 219, 220, 221, 0, 222, 0,
	281, 223, 224, 225, 282, 283, 0, 0, 226, 0,
	0, 0, 0, 227, 228, 229, 230, 231, 983, 984,
	0, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0,
	0, 0, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 1017, 0, 0, 0, 0, 0,
	983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015, 0,
	0, 0, 0, 0, 985, 0, 1006, 0, 0, 0,
	1000, 0, 0, 986, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 1000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1010,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 991, 0, 0, 1016, 0, 0, 983, 984,
	0, 1003, 1004, 1005, 1013, 1014, 1015, 1008, 0, 0,
	0, 1010, 1018, 1001, 1006, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 1017, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1007, 1008,
	0, 0, 0, 0, 985, 1001, 0, 0, 0, 0,
	1000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1002, 0, 0, 0, 0, 1010,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 1011,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1008, 0, 0,
	0, 0, 0, 1001, 0, 0, 0, 0, 0, 0,
	0, 1009, 0, 0, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 1007, 0,
	0, 0, 0, 0, 0, 1552, 0, 0, 0, 0,
	0, 0, 0, 1009, 0, 0, 997, 998, 999, 1012,
	0, 996, 994, 995, 987, 988, 989, 990, 992, 993,
	0, 0, 0, 0, 2080, 0, 0, 0, 0, 0,
	0, 0, 1002, 983, 984, 0, 1003, 1004, 1005, 1013,
	1014, 1015, 0, 0, 0, 0, 0, 1011, 0, 1006,
	0, 0, 0, 0, 0, 0, 986, 983, 984, 1017,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	0, 0, 0, 1006, 0, 0, 0, 0, 0, 985,
	986, 0, 0, 1017, 0, 1000, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 1000,
	0, 1009, 0, 0, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 0, 0,
	0, 0, 2078, 0, 0, 991, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1010, 1018, 0, 0, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1016, 0, 0, 0, 0, 0, 0, 0, 1010, 1018,
	0, 0, 1008, 0, 0, 0, 0, 0, 1001, 0,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1008, 0, 0, 0,
	0, 0, 1001, 1007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1011, 0, 0, 0, 0, 0, 0, 0,
	0, 1002, 983, 984, 0, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 0, 1011, 0, 1006, 0,
	0, 0, 0, 0, 0, 986, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 1000, 0, 1009, 0, 0, 997,
	998, 999, 1012, 0, 996, 994, 995, 987, 988, 989,
	990, 992, 993, 0, 0, 0, 0, 2023, 0, 0,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 0,
	0, 2018, 0, 0, 991, 0, 983, 984, 0, 1003,
	1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0, 0,
	0, 0, 1006, 1010, 1018, 0, 0, 0, 0, 986,
	0, 0, 1017, 0, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1008, 985, 0, 0, 0, 0, 1001, 1000, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 991, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1002, 1010, 1018, 0,
	983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015, 0,
	0, 1011, 0, 1016, 0, 0, 1006, 0, 0, 0,
	0, 0, 0, 986, 0, 1008, 1017, 0, 0, 0,
	0, 1001, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 985, 0, 0, 0,
	0, 0, 1000, 0, 0, 0, 1007, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 2014, 0, 0, 0,
	1002, 0, 991, 0, 983, 984, 0, 1003, 1004, 1005,
	1013, 1014, 1015, 0, 0, 1011, 0, 0, 0, 0,
	1006, 1010, 1018, 0, 0, 0, 0, 986, 0, 0,
	1017, 0, 0, 0, 0, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1008,
	985, 0, 0, 0, 0, 1001, 1000, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1009,
	1007, 0, 997, 998, 999, 1012, 0, 996, 994, 995,
	987, 988, 989, 990, 992, 993, 0, 0, 0, 0,
	1953, 0, 0, 0, 0, 0, 991, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1002, 1010, 1018, 0, 983, 984,
	0, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 1011,
	0, 1016, 0, 0, 1006, 0, 0, 0, 0, 0,
	0, 986, 0, 1008, 1017, 0, 0, 0, 0, 1001,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	1000, 0, 0, 0, 1007, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1009, 0, 0, 997, 998, 999, 1012,
	0, 996, 994, 995, 987, 988, 989, 990, 992, 993,
	0, 0, 0, 0, 1931, 0, 0, 0, 1002, 0,
	991, 0, 983, 984, 0, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 1011, 0, 0, 0, 0, 1006, 1010,
	1018, 0, 0, 0, 0, 986, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1008, 985, 0,
	0, 0, 0, 1001, 1000, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1009, 1007, 0,
	997, 998, 999, 1012, 0, 996, 994, 995, 987, 988,
	989, 990, 992, 993, 0, 0, 0, 0, 1930, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1002, 1010, 1018, 0, 983, 984, 0, 1003,
	1004, 1005, 1013, 1014, 1015, 0, 0, 1011, 0, 1016,
	0, 0, 1006, 0, 0, 0, 0, 0, 0, 986,
	0, 1008, 1017, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 985, 0, 0, 0, 0, 0, 1000, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1009, 0, 0, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 0, 0,
	0, 0, 1820, 0, 0, 0, 1002, 0, 991, 0,
	983, 984, 0, 1003, 1004, 1005, 1013, 1014, 1015, 0,
	0, 1011, 0, 0, 0, 0, 1006, 1010, 1018, 0,
	0, 0, 0, 986, 0, 0, 1017, 0, 0, 0,
	0, 0, 0, 1016, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1008, 985, 0, 0, 0,
	0, 1001, 1000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1009, 1007, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 1754, 0, 0, 0,
	0, 0, 991, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1002, 1010, 1018, 0, 983, 984, 0, 1003, 1004, 1005,
	1013, 1014, 1015, 0, 0, 1011, 0, 1016, 0, 0,
	1006, 0, 0, 0, 0, 0, 0, 986, 0, 1008,
	1017, 0, 0, 0, 0, 1001, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	985, 0, 0, 0, 0, 0, 1000, 0, 0, 0,
	1007, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1009,
	0, 0, 997, 998, 999, 1012, 0, 996, 994, 995,
	987, 988, 989, 990, 992, 993, 0, 0, 0, 0,
	1738, 0, 0, 0, 1002, 0, 991, 0, 983, 984,
	0, 1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 1011,
	0, 0, 0, 0, 1006, 1010, 1018, 0, 0, 0,
	0, 986, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 1016, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1008, 985, 0, 0, 0, 0, 1001,
	1000, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1009, 1007, 0, 997, 998, 999, 1012,
	0, 996, 994, 995, 987, 988, 989, 990, 992, 993,
	0, 0, 0, 0, 1691, 0, 0, 0, 0, 0,
	991, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1002, 1010,
	1018, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1011, 0, 1016, 0, 0, 983, 984,
	0, 1003, 1004, 1005, 1013, 1014, 1015, 1008, 0, 0,
	0, 0, 0, 1001, 1006, 0, 0, 0, 0, 0,
	0, 986, 0, 0, 1017, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1007, 0,
	0, 0, 0, 0, 985, 0, 0, 0, 0, 0,
	1000, 0, 0, 0, 0, 0, 0, 1009, 0, 0,
	997, 998, 999, 1012, 0, 996, 994, 995, 987, 988,
	989, 990, 992, 993, 0, 0, 0, 0, 1307, 0,
	0, 0, 1002, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 0,
	991, 2163, 983, 984, 0, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 0, 0, 0, 1006, 1010,
	1018, 0, 0, 0, 0, 986, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 1016, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1008, 985, 0,
	0, 0, 0, 1001, 1000, 0, 0, 0, 0, 0,
	0, 1009, 0, 0, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 1007, 0,
	1527, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2162, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 991, 0, 1592, 0, 0, 1591,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1002, 1010, 1018, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1011, 0, 1016,
	0, 0, 983, 984, 0, 1003, 1004, 1005, 1013, 1014,
	1015, 1008, 0, 0, 0, 0, 0, 1001, 1006, 0,
	0, 0, 0, 1222, 0, 986, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 1000, 0, 0, 0, 0, 0,
	0, 1009, 0, 0, 997, 998, 999, 1012, 0, 996,
	994, 995, 987, 988, 989, 990, 992, 993, 0, 0,
	0, 0, 1223, 0, 0, 0, 1002, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1021, 0, 0, 0,
	0, 1011, 983, 984, 991, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 1020, 1010, 1018, 986, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 1008, 0, 0, 1000, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 983, 984, 991, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 0, 0, 0, 1006, 0,
	0, 0, 0, 1010, 1018, 986, 1002, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	0, 1011, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 1008, 0, 0, 1000, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1007, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 991, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 1010, 1018, 0, 1002, 983, 984, 0,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 1016,
	0, 1011, 0, 1006, 0, 0, 0, 0, 0, 0,
	986, 1008, 0, 1017, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 1000,
	0, 0, 1007, 521, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 1002, 983, 984, 991,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	0, 1011, 0, 1006, 0, 0, 0, 0, 1010, 1018,
	986, 983, 984, 1017, 1003, 1004, 1005, 1013, 1014, 1015,
	0, 0, 0, 0, 1016, 0, 0, 1006, 0, 0,
	0, 1593, 0, 985, 986, 0, 1008, 1017, 0, 1000,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 985, 0, 0,
	0, 0, 0, 1000, 0, 1009, 0, 1007, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 0, 0, 0, 991,
	0, 0, 0, 0, 1598, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1010, 1018,
	0, 1002, 0, 991, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1016, 0, 1011, 0, 0, 0,
	0, 0, 1010, 1018, 0, 0, 1008, 0, 0, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 1016, 1742,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1008, 0, 0, 0, 0, 0, 1001, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1009, 1007, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 0,
	0, 1002, 0, 983, 984, 0, 1003, 1004, 1005, 1013,
	1014, 1015, 0, 0, 0, 0, 1011, 0, 0, 1006,
	0, 0, 0, 0, 0, 1002, 986, 983, 984, 1017,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	1011, 0, 0, 1006, 0, 0, 0, 1551, 0, 985,
	986, 0, 0, 1017, 0, 1000, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 0, 0, 0, 1000,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 0,
	0, 0, 0, 0, 1009, 991, 0, 997, 998, 999,
	1012, 0, 996, 994, 995, 987, 988, 989, 990, 992,
	993, 0, 0, 0, 1010, 1018, 0, 983, 984, 991,
	1003, 1004, 1005, 1013, 1014, 1015, 0, 0, 0, 0,
	1016, 0, 0, 1006, 0, 0, 0, 0, 1010, 1018,
	986, 0, 1008, 1017, 0, 0, 0, 0, 1001, 0,
	0, 0, 0, 0, 1016, 0, 0, 0, 0, 0,
	0, 0, 0, 985, 0, 0, 1008, 0, 0, 1000,
	0, 0, 1001, 1007, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1558, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1007, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1002, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1011, 0, 0, 0, 0, 0, 1010, 1018,
	0, 1002, 983, 984, 0, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 1016, 0, 1011, 0, 1006, 0,
	0, 0, 0, 0, 0, 986, 1008, 0, 1017, 0,
	0, 0, 1001, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 0, 0, 0, 1000, 0, 1009, 1007, 0, 997,
	998, 999, 1012, 0, 996, 994, 995, 987, 988, 989,
	990, 992, 993, 0, 0, 0, 0, 0, 0, 0,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 0,
	0, 1002, 983, 984, 991, 1003, 1004, 1005, 1013, 1014,
	1015, 0, 0, 0, 0, 0, 1011, 0, 0, 0,
	0, 0, 0, 1010, 1018, 986, 0, 0, 1017, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	0, 0, 0, 0, 0, 0, 0, 0, 985, 0,
	0, 1008, 0, 0, 1000, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1009, 0, 0, 997, 998, 999, 1012, 0, 996, 994,
	995, 987, 988, 989, 990, 992, 993, 0, 0, 0,
	0, 0, 0, 0, 991, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1010, 1018, 0, 1002, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1016,
	0, 1011, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1008, 0, 0, 0, 0, 0, 1001, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	863, 888, 855, 879, 878, 0, 0, 857, 856, 0,
	0, 0, 890, 889, 0, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 0, 0, 0, 0, 1002, 0, 0, 0,
	0, 0, 0, 0, 884, 0, 876, 875, 0, 0,
	0, 1011, 0, 0, 0, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 866, 865, 867, 868, 869, 0, 887, 0, 0,
	0, 0, 0, 0, 0, 1009, 0, 0, 997, 998,
	999, 1012, 0, 996, 994, 995, 987, 988, 989, 990,
	992, 993, 859, 0, 0, 0, 0, 0, 871, 863,
	888, 855, 879, 878, 877, 0, 857, 856, 864, 0,
	0, 890, 889, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 872, 0, 0, 0, 1241, 1239,
	1240, 1243, 1242, 884, 0, 876, 875, 0, 0, 0,
	0, 0, 0, 0, 874, 0, 0, 0, 0, 448,
	0, 0, 860, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 870, 861, 0, 0, 452, 0, 0,
	0, 0, 0, 892, 0, 0, 0, 0, 0, 453,
	0, 0, 0, 858, 0, 0, 885, 886, 0, 0,
	866, 865, 867, 868, 869, 0, 887, 0, 0, 454,
	0, 0, 0, 0, 455, 0, 0, 862, 0, 460,
	461, 0, 891, 469, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 451, 456, 0, 0, 0,
	0, 0, 0, 877, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 472, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 458,
	459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 860, 0, 0, 0, 0, 462, 0, 0, 0,
	0, 0, 870, 861, 0, 0, 464, 0, 0, 0,
	0, 0, 892, 0, 0, 0, 449, 0, 0, 0,
	0, 0, 858, 0, 0, 885, 886, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 862, 0, 0, 0,
	0, 891, 0, 0, 463, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 465, 450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 466, 0, 471, 0, 0, 0, 467, 0,
	0, 0, 0, 468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 470,
}
var sqlPact = [...]int{

	240, -1000, 55, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 715, 16974, 16974, 21132, -1000, -1000, -1000, -1000,
	-1000, -1000, 765, 756, 1123, 5364, 21132, 21132, 20835, 1134,
	1134, 22617, -1000, -1000, 26478, -1000, 30485, 573, 583, 573,
	573, 606, 22617, 1220, 723, 13966, 809, 200, -1000, 787,
	62, 26181, 21132, 1530, 53, 19053, 359, 240, 20538, 25884,
	21132, 20241, 680, 50, 17568, 21132, -1000, 58, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1364, 394, 58, -1000, 1362, 1262,
	1257, 19053, 25587, 25290, 24993, 24696, 24399, -1000, 12728, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 871, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 365, 364, -1000, 19944, -1000, 1099,
	-1000, 51, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1092, -1000, 21132, -1000, -1000, 24102, 23805, 786, 363, 1139,
	-1000, -1000, 647, 469, -1000, -1000, 13657, 68, -1000, -1000,
	-1000, -1000, 1525, 16677, 918, 1357, -1000, 1091, 1354, 1352,
	1351, 1350, 1349, -1000, 855, -1000, 1344, 465, 914, 542,
	-1000, 1341, 1340, 1139, -1000, 1139, -1000, -1000, -1000, 675,
	22617, -1000, -1000, -1000, -1000, -1000, 19053, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1708, -1000, -1000,
	-1000, -1000, 1758, -1000, -1000, -1000, -1000, 23508, 21132, 21132,
	1280, 23211, -1000, 787, -1000, -1000, -1000, 1176, 1527, 1527,
	1527, 1550, 170, 167, 200, 47, 21132, -1000, 361, 47,
	9552, 9552, -1000, -1000, 359, -1000, 422, 16071, -1000, 8586,
	-1000, 847, 1420, 508, 808, 1418, -144, 908, 892, 1417,
	16677, 17568, 50, 29, -1000, -1000, -1000, 5055, 16677, 761,
	15167, 58, -1000, -1000, -1000, 19053, 21132, 21132, 795, 22914,
	-1000, 1416, 132, 1415, -1000, 130, 1412, -1000, 130, 1411,
	29, 1410, 49, -1000, -1000, 359, 19647, 21132, 1634, 30391,
	-1000, 10841, -1000, -1000, 16974, 893, 16974, -1000, -1000, 1625,
	-1000, 21132, 10841, 48, -1000, -1000, -1000, -1000, 1214, 1192,
	595, 13348, 13039, 1480, 991, -1000, -1000, -1000, 67, 5364,
	776, -1000, -1000, -1000, 19350, -1000, -1000, 21132, 1372, 16974,
	21132, 21132, 21132, 21132, 21132, -1000, -1000, 21132, -1000, 1209,
	-1000, -1000, 21132, 21132, 854, 718, -1000, 48, -1000, 22617,
	-1000, 136, -1000, -1000, -1000, -1000, 358, 1181, 481, 191,
	22320, 481, 1180, -1000, 1176, -1000, 1065, 1255, 9875, 1265,
	10841, 200, -1000, -1000, 200, 200, 10841, -1000, -1000, 21132,
	47, 1614, 21132, 198, -1000, 29192, -1000, -1000, 10841, 10841,
	10841, 10841, 10841, 985, 415, -1000, 355, 351, 6318, -1000,
	-1000, 1751, -1000, -1000, -1000, 197, -1000, -1000, 10841, 58,
	-1000, -1000, -1000, -1000, 348, 1782, -1000, 498, -1000, -1000,
	-1000, 479, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1368, 345, 344, -1000, -1000, -1000, -1000, 341, 339,
	334, 332, 327, 326, 325, 323, 322, 319, 316, 314,
	312, 309, 304, 935, -1000, 497, -1000, -1000, 497, 497,
	-1000, 291, 291, 293, -1000, -1000, -1000, -1000, 291, -1000,
	-1000, -1000, 460, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	294, 198, -1000, -1000, -1000, 21132, 38, -1000, 29867, -1000,
	3, 939, -1000, 18459, 1538, 1499, 1498, 19053, 1573, 62,
	1335, 1562, 62, 1333, 671, 21132, 21132, 666, 663, 19053,
	451, -1000, 21132, -1000, -1000, 7, -1000, -1000, 1332, 37,
	-1000, -1000, 486, 115, 1608, 115, 15469, -1000, 21132, 21132,
	-1000, 21132, -1000, -1000, 21132, -1000, 21132, 21132, -1000, 21132,
	21132, 257, 17865, 858, 1409, 749, 62, 36, -1000, 1636,
	-1000, -1000, -1000, -1000, 151, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 293, 935, 291, 291, 291, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 460, -1000, -1000, 497, 497,
	497, -1000, -1000, 30, 29867, 662, -1000, 1331, 570, -1000,
	478, 16, 1139, 978, -1000, -1000, -1000, -1000, -1000, -1000,
	42, -1000, -1000, 42, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1781, 5364, -1000, -1000, -1000, -1000, -1000,
	-1000, 21132, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 21132, 21132, 21132, -1000, -1000, 19053, 18162, 1592,
	1407, 953, -1000, 1584, 21132, 1082, 1172, -1000, 703, 1406,
	-1000, -1000, -1000, -1000, 29867, -1000, 410, -1000, -1000, 29867,
	925, 1267, -1000, 1267, 41, -1000, 29092, -1000, 290, 12,
	486, 9552, 14866, 30252, 30391, 5364, 700, 10841, 10841, 10841,
	10841, 10841, 10841, 10841, 10841, 10841, 10841, 10841, 10841, 10841,
	10841, 10841, 10841, 10841, 10841, 10841, 10841, 10841, 10841, 1144,
	10841, 659, 10841, 10841, 10841, 10841, 1039, 974, 278, 1006,
	5364, -1000, -1000, 1676, 1676, 1676, 30092, 30092, 220, 415,
	-1000, 10841, -1000, 9230, 167, 28604, 40, -1000, -1000, -1000,
	7285, 493, 29867, 58, 5995, -1000, 1748, 689, 1378, 1309,
	288, 166, 152, 10841, 10841, 11163, 11163, 10841, 11485, 10841,
	10841, 6640, 10841, 10841, 10841, 10841, 10841, 10841, -1000, 286,
	-1000, -1000, -1000, -1000, 1746, -1000, -1000, 1743, -1000, 691,
	687, 1741, 486, 149, 8586, -1000, 858, 21132, 21132, 21132,
	-1000, -1000, 1168, 22023, 1148, 30391, 21132, -1000, 285, 284,
	1244, 1238, 21132, 21132, 21726, 21429, 21132, 846, 62, -1000,
	283, 62, -1000, 282, 21132, 881, -1000, 21132, 21132, 860,
	1297, 1107, -1000, 482, 16677, 751, 1330, 21132, 852, 10841,
	896, -1000, 14565, 502, 21132, 852, 118, -1000, -1000, -1000,
	447, 21132, -1000, -1000, -1000, 132, -1000, 130, 130, 29,
	-1000, -1000, 19053, -1000, -1000, -1000, -1000, -1000, -1000, 30391,
	405, 402, -1000, 1727, 654, -1000, 652, 645, 644, -1000,
	281, -1000, 10841, 21132, 21132, 1254, -1000, -1000, -1000, 789,
	-1000, 927, -1000, 13966, -1000, -14, -1000, -1000, -1000, 451,
	-1000, 148, 11, 15, 30391, -1000, -1000, -1000, -1000, -1000,
	21132, 346, 21132, 62, 21132, -1000, 1780, 62, 21132, 1403,
	1426, 443, 21132, 925, -1000, 10841, 1726, -1000, -1000, -1000,
	10841, -1000, -1000, -1000, 62, -1000, 1307, -1000, -24, 1279,
	1023, -151, 169, 457, -1000, 14264, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 464, 1005, 1005, 866,
	866, 866, 866, 1749, 2240, 165, 3668, 2896, 2896, 2896,
	2926, 256, 256, 2896, 2896, 2896, 30092, 29992, 2371, 10841,
	10841, 635, 969, 278, 2371, 10841, 2371, 2371, 2371, 2371,
	-1000, 1119, -1000, -1000, -1000, -1000, 1328, 277, 11485, 11485,
	-1000, -1000, -1000, 6318, 11807, -1000, -1000, -1000, -1000, -1000,
	273, 10841, -1000, 28708, -172, 5, -1000, -1000, 10841, -95,
	-137, -1000, -1000, 698, -1000, 10841, -1000, -11, 10841, 10841,
	10841, 144, 143, -1000, 992, 271, 268, 10841, -1000, -1000,
	29767, 27078, 142, 1327, -109, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 140, 138, 29743, -109, 137, 3595, -1000, 11485,
	11485, 11485, 6318, 265, 127, 28952, -109, 29541, 8908, 8908,
	8908, 126, 29517, 10841, -109, 4023, 3923, 3695, 1, -1,
	-5, 1714, -13, 125, 463, 461, 124, 1307, -1000, -1000,
	-1000, -1000, 634, 633, 1401, -1000, 1142, -1000, 507, -1000,
	834, 10841, 12427, 263, 260, 997, -1000, 1399, 1084, 1397,
	1084, -1000, 3, 833, -1000, 10841, -1000, 10841, -1000, 626,
	-1000, -1000, 625, 482, 1326, 728, -1000, 1052, -1000, -1000,
	750, -1000, -1000, 6962, 29867, -1000, 852, 1507, -23, -1000,
	-1000, -1000, 486, 15469, 14866, 8586, -27, -1000, -1000, -1000,
	858, -1000, 587, 1710, 119, 1185, 1085, 913, 815, 1706,
	29867, -14, -14, -1000, -1000, -1000, -1000, -1000, 21132, -1000,
	1285, -1000, 18162, 259, 21132, 246, -1000, 244, -1000, -1000,
	242, 21132, 1225, 443, 17271, -1000, 481, 1055, 28480, -1000,
	117, 1303, 1547, -1000, 14866, 1252, 1250, 14866, 1233, 1003,
	1003, 1003, -1000, 236, 940, 383, 457, 4423, 10841, 18756,
	1015, 86, 110, 1279, 10841, 2371, 2371, 10841, 11485, 11485,
	-1000, 2371, -1000, -1000, -1000, -1000, -1000, 1324, 232, 10841,
	30391, 4063, 3963, -32, -1000, 8264, -20, -1000, 10841, -1000,
	28376, -1000, -1000, 401, 1424, -1000, 10841, 29417, 109, 7942,
	-1000, 29292, -17, -17, -1000, 1779, -1000, 15770, 487, 1038,
	28252, 30252, 30391, -1000, 10841, -1000, -1000, 1323, 10841, -1000,
	30252, 30391, 11485, 11485, 11485, 11485, 11485, 11485, 11485, 11485,
	11485, 11485, 11485, 11485, 11485, 11485, 11485, 11485, 11485, 11485,
	11485, 1215, 11485, 1674, 1674, 1674, -28, 7620, -1000, 1356,
	1323, 10841, 10841, 30391, 108, 107, 106, -1000, 10841, -109,
	10841, 10841, 10841, -1000, -1000, -1000, 104, -1000, 1698, -1000,
	-1000, -1000, -1000, 1303, 21132, 21132, 21132, 1393, -1000, 1353,
	-1000, 28148, -47, -1000, 336, 1518, 10841, -1000, -1000, 230,
	12427, 21132, -1000, 1235, 1243, 539, 21132, -1000, 21132, -1000,
	21132, 21132, 21132, -49, -51, 21132, 21132, -1000, 16677, 598,
	229, -1000, -34, -1000, -1000, 258, 62, 852, -1000, -39,
	-1000, 444, -1000, 378, 377, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 100, -1000, -1000, 1287, -1000, 12427, 224,
	21132, 18162, 1581, 12427, 1080, 1231, 443, 17271, -1000, 703,
	-1000, -1000, -1000, 484, 10841, 10841, 1279, 14866, 14866, 1756,
	1246, 14866, -1000, -1000, -1000, -1000, 375, 391, 374, 12728,
	457, 18756, -1000, 1696, 1251, -53, -1000, -1000, 21132, 222,
	-1000, 457, 1669, 2371, 3007, 2757, 10841, 30391, 2311, -55,
	10841, 10841, -1000, -61, -1000, 10841, 373, 29867, -1000, -1000,
	-1000, 29867, 10841, 1767, 10841, 97, 96, 94, -1000, -1000,
	-1000, 26775, 10841, 93, -1000, 91, 85, 29867, 1356, 29867,
	-1000, -1000, 589, 589, 742, 742, 742, 742, 1674, 2842,
	842, 2503, 192, 192, 192, 2205, 413, 413, 192, 192,
	192, 1316, 1204, 217, 395, 10841, -66, -1000, -1000, -1000,
	29867, 29867, 82, -1000, -1000, -1000, -109, 3571, 28024, 27920,
	-1000, 81, 484, -1000, -1000, -1000, 21132, -1000, 21132, -1000,
	5364, 21132, 1317, 1135, -1000, -1000, 1236, 216, 11485, 21132,
	-1000, 989, 12427, 1503, 58, 5364, 1503, 27796, 5995, -73,
	-75, 1125, -1000, 1120, 10841, -1000, 30391, 1084, 1084, -1000,
	616, 607, 602, 597, -1000, -1000, -65, 16380, 1772, 1439,
	21132, 1497, -1000, -1000, 215, -1000, -1000, -1000, 979, -77,
	12427, -79, 79, 62, -81, 21132, -1000, 443, 17271, -1000,
	1426, -1000, 21132, 29867, -109, -1000, 1756, -1000, 213, 10841,
	14866, -1000, -151, -1000, -85, -1000, 457, -86, 18756, -1000,
	372, -169, -1000, 441, -1000, 457, 212, 21132, 18756, 10841,
	10841, 2311, -87, -1000, 2371, 2371, -1000, 27692, -1000, 29867,
	-1000, 29292, -1000, -1000, -1000, 973, -1000, 27467, -1000, -1000,
	-1000, -1000, 11485, 1315, 211, 30391, 27443, -1000, -1000, 10841,
	-1000, -1000, -1000, -1000, -1000, 971, -1000, -1000, 21132, 1136,
	-1000, -1000, 10841, 395, 210, 1285, 208, -1000, -1000, -1000,
	-1000, -1000, -1000, 1518, -11, -1000, 919, -1000, -1000, 29867,
	1515, -1000, -1000, 21132, 21132, 207, 204, -1000, 203, 58,
	-93, -1000, 438, 669, -104, 21132, -1000, -1000, 5673, 21132,
	989, -105, -1000, 1285, -1000, 989, 201, 17271, -1000, 1225,
	-101, -1000, 1579, -1000, 21132, 29867, -1000, 457, -1000, 1685,
	18756, 257, -1000, -1000, 1251, -1000, 4743, 18756, 21132, -110,
	-1000, 2371, 2371, -1000, -1000, 78, 1038, 1540, -1000, 3174,
	11485, 30391, -111, -1000, 27218, -1000, -1000, 1392, 27110, 1194,
	21132, -1000, 21132, 1503, 77, 21132, 510, 5364, -1000, -1000,
	10841, 10841, 10841, 1772, -1000, -1000, 1768, 794, -1000, 486,
	-1000, 199, 1285, 989, -1000, 1285, 12427, -1000, 1231, 21132,
	196, -115, 18756, -1000, -1000, 371, -1000, -1000, 1682, -1000,
	-120, -1000, -1000, 849, 10841, 3174, -122, -1000, -1000, 1384,
	-1000, 1070, 942, 73, -124, -1000, -1000, 191, -1000, 10841,
	-1000, -126, -130, -17, -1000, -1000, 15469, -1000, 21132, -1000,
	1285, -1000, -141, -1000, -1000, -1000, -1000, -1000, 457, 367,
	-1000, 70, 10519, 10519, -109, -1000, 21132, -1000, 1077, 1074,
	736, -1000, -1000, -1000, -1000, -1000, 1194, 29867, -1000, -1000,
	63, -132, -145, -1000, 989, 18756, -1000, -1000, -1000, -1000,
	12118, 1036, 838, 28848, -1000, -1000, -1000, 1446, -1000, 525,
	1063, 1063, 1070, 1767, -1000, 1019, 1285, -1000, 1644, -1000,
	-1000, -1000, -1000, -1000, -1000, 1663, -1000, -1000, 1226, -1000,
	-1000, -1000, -1000, -1000, -1000, 10197, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2042, 2041, 1547, 1676, 2039, 2037, 1668, 2034, 2030,
	2027, 2024, 2023, 2022, 119, 1600, 1597, 30, 1585, 2021,
	115, 2020, 2017, 2015, 112, 2013, 2006, 2000, 1999, 269,
	1998, 1997, 108, 1580, 1576, 1558, 1996, 1992, 110, 1991,
	1990, 23, 1984, 91, 1982, 32, 170, 2440, 148, 1981,
	1975, 1973, 37, 127, 88, 1972, 206, 1971, 1969, 57,
	40, 26, 22, 1966, 118, 1962, 1961, 1659, 31, 1960,
	1959, 155, 1950, 17, 24, 102, 162, 161, 140, 141,
	1949, 1947, 1945, 1940, 54, 1938, 2, 1936, 1935, 16,
	60, 12, 1934, 25, 19, 1931, 1930, 144, 1929, 93,
	123, 1538, 154, 139, 225, 1927, 90, 14, 89, 1925,
	1923, 145, 43, 1916, 41, 100, 156, 1915, 68, 165,
	75, 33, 84, 126, 1908, 1907, 1906, 94, 1902, 128,
	95, 1897, 1895, 98, 1892, 147, 151, 1891, 1884, 114,
	1883, 143, 1879, 1876, 158, 172, 1875, 163, 1872, 1871,
	167, 134, 8, 45, 78, 9, 1569, 1565, 129, 70,
	29, 21, 1863, 1885, 1108, 1086, 42, 101, 69, 62,
	106, 59, 58, 153, 61, 1862, 1860, 131, 1859, 1858,
	1857, 1855, 1850, 99, 1849, 1846, 77, 152, 15, 11,
	7, 121, 44, 65, 107, 164, 160, 132, 1845, 117,
	137, 56, 682, 1844, 1843, 1018, 135, 1841, 1838, 1836,
	784, 687, 380, 51, 1835, 1834, 209, 67, 1833, 1832,
	74, 1831, 136, 133, 1829, 157, 231, 28, 1828, 64,
	149, 125, 1827, 124, 71, 0, 355, 199, 1823, 142,
	92, 1822, 1819, 1818, 1817, 27, 3, 10, 4, 6,
	5, 97, 96, 1816, 1815, 146, 38, 87, 1814, 166,
	1810, 1808, 1806, 53, 1802, 20, 1799, 18, 1797, 1796,
	13, 1, 1794, 1793, 150, 1792, 122, 1791, 1583, 1790,
	159, 1788, 1756, 1630, 50, 104,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 54, 54, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 51, 51, 56, 56, 56, 58, 58, 55,
	55, 50, 50, 5, 5, 233, 233, 234, 234, 40,
	40, 44, 44, 41, 42, 42, 43, 43, 6, 6,
	6, 7, 7, 7, 7, 7, 7, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 103, 103,
	102, 102, 105, 105, 16, 16, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 201,
	201, 200, 19, 175, 175, 20, 20, 20, 20, 21,
	128, 128, 22, 22, 22, 22, 23, 28, 274, 274,
	274, 278, 278, 279, 279, 280, 280, 280, 280, 280,
	280, 280, 276, 276, 27, 27, 27, 27, 39, 31,
	31, 31, 31, 31, 31, 148, 145, 145, 144, 144,
	144, 144, 146, 146, 146, 146, 149, 149, 83, 83,
	226, 225, 225, 231, 231, 231, 81, 81, 81, 81,
	81, 82, 82, 82, 224, 224, 224, 224, 232, 232,
	232, 232, 232, 232, 230, 230, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 18, 275, 275, 277, 277, 33, 33, 34, 34,
	35, 35, 35, 35, 10, 10, 11, 11, 84, 84,
	85, 85, 154, 154, 154, 154, 86, 86, 57, 57,
	57, 153, 243, 243, 244, 244, 244, 244, 244, 244,
	245, 245, 245, 245, 245, 245, 245, 241, 241, 242,
	239, 239, 240, 240, 240, 240, 281, 281, 152, 152,
	89, 89, 248, 248, 248, 248, 246, 246, 246, 246,
	246, 249, 247, 250, 250, 250, 250, 250, 187, 187,
	187, 37, 12, 63, 63, 13, 9, 9, 132, 132,
	93, 93, 192, 192, 192, 74, 74, 52, 52, 52,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 133, 133, 134, 134, 25, 30, 36, 36, 36,
	36, 36, 283, 283, 70, 70, 70, 70, 71, 71,
	147, 147, 150, 150, 151, 151, 151, 65, 64, 66,
	66, 8, 8, 59, 59, 60, 60, 61, 61, 62,
	62, 284, 284, 24, 24, 24, 77, 77, 141, 141,
	141, 143, 143, 142, 142, 142, 118, 118, 118, 38,
	98, 98, 107, 107, 108, 108, 198, 109, 109, 29,
	29, 47, 47, 45, 45, 45, 45, 45, 45, 46,
	46, 48, 48, 48, 48, 48, 48, 48, 256, 256,
	256, 259, 259, 255, 257, 257, 258, 258, 282, 282,
	119, 119, 119, 88, 87, 87, 91, 91, 90, 92,
	92, 191, 116, 116, 116, 116, 135, 135, 136, 136,
	137, 137, 138, 138, 138, 139, 139, 140, 140, 115,
	115, 171, 171, 49, 49, 97, 97, 99, 99, 161,
	161, 161, 162, 162, 160, 160, 160, 160, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 272, 272, 272,
	273, 273, 190, 190, 194, 194, 194, 194, 194, 194,
	188, 188, 188, 188, 189, 189, 199, 199, 122, 122,
	122, 122, 120, 120, 121, 121, 195, 195, 195, 195,
	117, 117, 196, 196, 196, 155, 155, 202, 202, 202,
	220, 220, 96, 96, 96, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 204, 204, 204, 204, 206, 206, 206, 205,
	205, 205, 205, 205, 205, 205, 205, 205, 205, 205,
	205, 205, 205, 219, 219, 219, 219, 219, 207, 207,
	214, 214, 215, 215, 216, 217, 208, 208, 209, 209,
	210, 211, 218, 218, 218, 218, 222, 222, 212, 212,
	212, 212, 212, 213, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 130, 130,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	163, 163, 163, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
	164, 164, 165, 165, 165, 165, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 251, 251, 251,
	251, 251, 251, 251, 253, 253, 254, 254, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 252, 252, 252, 252, 252,
	252, 252, 252, 252, 252, 260, 260, 261, 261, 263,
	263, 264, 264, 265, 266, 266, 266, 267, 268, 268,
	262, 262, 269, 269, 269, 270, 270, 271, 271, 271,
	271, 271, 177, 177, 177, 178, 178, 179, 185, 185,
	185, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 72, 72, 72,
	72, 72, 104, 104, 174, 174, 172, 172, 172, 176,
	176, 123, 123, 221, 221, 221, 221, 221, 221, 221,
	124, 124, 124, 131, 125, 125, 126, 126, 126, 126,
	126, 126, 168, 169, 127, 127, 127, 170, 170, 180,
	184, 184, 183, 182, 182, 181, 181, 158, 158, 159,
	159, 157, 156, 112, 112, 111, 111, 110, 110, 285,
	285, 186, 186, 113, 113, 114, 106, 106, 197, 197,
	197, 197, 100, 100, 79, 79, 101, 101, 75, 75,
	78, 78, 76, 76, 76, 76, 94, 94, 95, 95,
	73, 73, 166, 166, 166, 166, 166, 166, 166, 166,
	166, 166, 166, 223, 223, 223, 173, 67, 67, 67,
	68, 68, 69, 69, 228, 228, 228, 229, 229, 229,
	229, 227, 227, 227, 227, 227, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 235, 235, 235,
	235, 235, 235, 235, 235, 235, 235, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 237,
	237, 237, 237, 237, 237, 237, 237, 237, 237, 236,
	236, 236, 236, 236, 236, 236, 236, 236, 236, 236,
	236, 236, 236, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238, 238, 238, 238, 238, 238, 238,
	238, 238, 238, 238,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 4, 6, 1, 3, 2, 5, 3,
	6, 4, 6, 6, 6, 4, 8, 3, 3, 3,
	6, 4, 3, 2, 1, 1, 0, 2, 0, 2,
	0, 2, 0, 7, 6, 1, 1, 1, 3, 3,
	0, 2, 0, 2, 1, 3, 5, 0, 4, 6,
	7, 1, 1, 1, 1, 1, 1, 6, 3, 5,
	4, 6, 4, 6, 4, 6, 3, 5, 1, 3,
	1, 2, 2, 3, 2, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 5, 3, 0, 1, 1, 1, 1, 3,
	3, 0, 2, 3, 2, 3, 6, 6, 1, 2,
	2, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 2, 2, 2, 2, 2, 2,
	3, 6, 3, 4, 1, 5, 2, 1, 3, 3,
	3, 3, 1, 3, 3, 1, 2, 2, 1, 0,
	1, 1, 3, 1, 1, 1, 2, 2, 1, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 3, 4, 4, 4, 4, 2, 4, 4, 4,
	4, 4, 4, 2, 3, 3, 2, 3, 3, 4,
	2, 3, 4, 3, 3, 4, 4, 2, 5, 5,
	6, 2, 2, 0, 2, 0, 6, 6, 5, 5,
	4, 12, 4, 12, 7, 10, 6, 9, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 1, 1,
	0, 3, 2, 0, 3, 1, 2, 2, 3, 6,
	2, 1, 1, 2, 4, 2, 5, 7, 8, 5,
	3, 1, 4, 6, 5, 10, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 1, 2,
	1, 4, 5, 2, 0, 6, 11, 14, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 6, 8, 8, 10, 8,
	10, 1, 0, 2, 0, 2, 2, 3, 3, 2,
	2, 2, 1, 0, 1, 3, 2, 0, 2, 1,
	1, 0, 1, 3, 1, 1, 1, 2, 3, 2,
	2, 8, 11, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 6, 1, 3, 1, 4,
	2, 8, 5, 4, 3, 0, 2, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 5, 2, 3,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 3,
	0, 2, 0, 2, 3, 3, 0, 1, 3, 3,
	5, 1, 1, 3, 2, 4, 4, 0, 7, 4,
	6, 3, 1, 5, 6, 9, 5, 0, 2, 3,
	1, 3, 2, 0, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	1, 1, 3, 4, 0, 1, 1, 1, 1, 2,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 5, 2, 1, 1, 1, 1,
	4, 1, 2, 2, 1, 1, 1, 0, 1, 1,
	4, 1, 4, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 3, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 4, 3, 4, 4, 5, 3, 3, 3,
	3, 3, 4, 3, 4, 3, 3, 4, 3, 4,
	3, 4, 5, 6, 6, 7, 6, 7, 6, 7,
	3, 4, 4, 1, 3, 3, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 5, 6,
	6, 7, 1, 2, 1, 2, 1, 1, 2, 1,
	3, 1, 1, 2, 2, 1, 1, 3, 5, 6,
	8, 6, 6, 4, 4, 1, 1, 1, 5, 1,
	3, 1, 3, 1, 1, 1, 1, 6, 6, 4,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 3, 1, 3, 3, 3, 2, 1,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 3, 1, 2, 3, 0, 3, 3, 2, 2,
	1, 0, 2, 2, 3, 2, 1, 1, 3, 5,
	1, 2, 4, 2, 0, 1, 0, 3, 5, 1,
	0, 2, 2, 1, 1, 1, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 1, 2, 2, 1, 3, 3, 0,
	1, 2, 1, 1, 1, 1, 6, 2, 1, 5,
	1, 1, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -14, -15,
	-16, -18, -19, -21, -22, -23, -24, -26, -28, -30,
	-29, -31, -32, -33, -34, -35, -36, -25, -27, -37,
	-38, -39, 23, 34, 225, 66, -8, -9, -10, -11,
	-12, -13, -258, 94, 103, 125, 206, 101, 87, 119,
	228, 235, -45, -47, 245, -148, 248, 35, 257, 60,
	97, 230, 223, 224, 282, 291, 68, -256, -48, -46,
	333, 307, 314, 239, -49, 266, 299, 336, 266, 134,
	80, 302, -274, -101, 266, 80, -76, -67, 326, 4,
	-235, -237, 20, 21, 23, 33, 34, 35, 40, 44,
	47, 54, 59, 60, 61, 63, 65, 66, 67, 70,
	71, 78, 79, 81, 83, 87, 89, 93, 94, 96,
	101, 102, 103, 109, 110, 113, 115, 120, 125, 126,
	127, 128, 135, 138, 140, 133, 148, 150, 151, 154,
	153, 158, 161, 164, 166, 167, 168, 171, 169, 173,
	174, 176, 175, 181, 183, 184, 186, 189, 192, 195,
	198, 199, 200, 201, 204, 206, 208, 209, 210, 211,
	213, 214, 216, 217, 218, 219, 220, 223, 221, 222,
	224, 225, 226, 228, 230, 231, 233, 246, 247, 258,
	235, 236, 237, 238, 241, 242, 243, 245, 248, 250,
	253, 256, 257, 259, 262, 260, 255, 265, 267, 268,
	269, 270, 271, 278, 282, 283, 284, 285, 288, 289,
	290, 291, 293, 296, 297, 298, 303, 308, 309, 310,
	311, 312, 28, 36, 37, 38, 39, 41, 42, 45,
	46, 50, 51, 52, 55, 82, 84, 85, 100, 104,
	105, 111, 121, 123, 129, 130, 139, 141, 142, 143,
	145, 156, 170, 180, 182, 193, 197, 203, 205, 212,
	232, 240, 251, 252, 261, 263, 273, 274, 275, 279,
	280, 295, 299, 300, -274, -75, -67, 80, 89, 138,
	290, 289, 80, 134, 266, 302, 292, -17, 333, -29,
	-7, -15, -4, -24, -38, -14, -32, -18, -33, -34,
	-35, -16, 23, -227, 4, -235, -237, -236, -238, 57,
	69, 118, 137, 131, 147, 149, 157, 159, 172, 194,
	196, 229, 249, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 43, 48, 49, 53, 56, 58, 64, 68,
	72, 73, 74, 75, 76, 77, 86, 88, 90, 91,
	92, 95, 97, 99, 106, 107, 108, 114, 116, 117,
	119, 122, 124, 132, 134, 136, 144, 146, 152, 155,
	160, 162, 163, 177, 178, 179, 185, 187, 188, 190,
	191, 202, 207, 215, 227, 239, 244, 254, 264, 266,
	272, 276, 277, 281, 286, 287, 292, 294, 301, 302,
	304, 305, 306, 307, -67, -67, -67, 206, 22, -278,
	22, -279, -280, 68, 94, 119, 239, 138, 89, 289,
	-278, -71, 235, -67, -145, 161, 242, 54, 232, 278,
	-146, -144, -226, 273, -149, -102, 171, -67, 4, 171,
	244, 80, 22, 34, 54, 59, 81, 120, 134, 135,
	64, 65, 151, 209, 161, 243, 267, 273, 278, 68,
	293, 269, 102, -283, 278, 278, -283, -283, -70, 278,
	276, -71, 4, 80, 244, 171, -282, 266, -231, -224,
	-187, 9, 281, 106, 187, -230, 8, 325, -223, -229,
	5, 7, 324, 4, -235, -237, -236, 266, 292, 302,
	-132, 80, 287, -46, -48, -47, -90, -91, 286, 144,
	99, 191, -45, -47, -256, -259, 213, -255, -67, -259,
	-87, -88, 22, 91, 337, -195, -75, 188, -114, 333,
	-3, -195, 129, -75, -78, 129, -75, -67, -195, 129,
	276, 337, -101, -94, -67, -157, -156, 335, 117, 117,
	333, -111, -112, -156, -157, 117, 146, 146, -196, -195,
	-67, 129, -79, 129, -78, -103, 129, -102, -103, 129,
	-94, 129, -201, -200, -229, 299, 266, 134, -175, 333,
	-128, 333, -67, 22, 187, 337, 187, -67, -145, 52,
	-145, 246, 333, -150, -151, -64, -65, -66, 148, 208,
	211, 276, 318, 117, 312, -231, -83, 86, -105, 335,
	54, -233, -230, 9, 246, 209, 243, 117, -275, 187,
	117, 117, 117, 117, 117, 209, 243, 117, 312, 148,
	208, 258, 266, 302, 117, 117, -147, -150, -147, 276,
	-71, -117, -195, 8, 7, 7, -102, 129, -67, -102,
	134, -67, 129, -90, -91, -116, -135, -136, 160, 108,
	185, -119, 22, 91, -119, -119, 44, 334, 334, 337,
	-259, -95, 333, -106, -197, -163, 326, -165, 324, 325,
	319, 177, 313, -177, -167, -180, 100, 232, 333, -75,
	-166, 338, 9, -253, -47, 29, -178, -179, 48, -67,
	7, 8, 5, 6, -73, -204, -173, -213, 281, 106,
	179, -251, -252, 4, -235, -228, -205, -215, -209, -212,
	145, 57, 73, 76, 74, 77, 244, 292, 49, 28,
	104, 105, 197, 203, 263, 279, 280, 129, 180, 130,
	55, 121, 156, 93, 37, 39, 41, 42, 50, 51,
	82, 84, 85, 111, 139, 141, 142, 143, 182, 212,
	251, 261, 274, 275, 300, -236, -216, -217, -210, -211,
	-218, -106, -114, 326, -75, 333, -113, -186, -163, 86,
	-54, 221, -53, 21, 23, 94, 297, 100, 255, 270,
	236, 255, 270, 236, 221, 100, 338, 221, 221, 100,
	-233, -76, 337, -227, 326, -234, -233, 259, 334, -100,
	-75, -112, -196, -77, -75, -77, 245, -67, 30, 100,
	-56, 337, 47, 226, 100, -56, 337, 100, -56, 100,
	100, 334, 337, -195, 129, -78, 30, -174, -202, -203,
	-205, -214, -208, -212, -213, 40, 46, 45, 271, 170,
	240, 252, 295, 38, 186, 140, 139, 141, 142, 143,
	251, 37, 212, 111, 93, 85, 84, 182, 42, 41,
	-216, -217, -210, -211, 82, 274, 275, 145, 39, 51,
	50, 300, 261, -104, -163, -274, -280, -274, 30, -144,
	-226, -104, 337, 158, -82, 164, 176, 126, 188, 310,
	-225, 86, -231, -225, 86, 71, -232, 5, 4, -173,
	-187, 86, 161, -213, 335, -227, 247, -102, 22, -226,
	-277, 114, -274, -226, -226, -226, -226, -226, -67, 158,
	-226, -226, 266, 134, 266, -71, -56, 337, 333, -89,
	177, -257, 307, -89, 333, -68, 129, -67, -257, 177,
	-116, -136, -135, -137, -163, 22, -140, 110, 173, -163,
	-165, -46, -46, -46, -92, -191, -163, -255, 30, -94,
	-97, 337, 117, 10, 11, 56, 33, 324, 325, 326,
	327, 112, 328, 329, 322, 323, 321, 316, 317, 318,
	62, 165, 234, 13, 14, 15, 26, 190, 159, 313,
	131, 249, 319, 16, 17, 18, 147, 36, 132, -72,
	30, 4, -80, -163, -163, -163, -163, -163, 196, -110,
	-158, 331, -47, 333, -47, -163, -104, 7, -47, -172,
	331, -181, -163, -111, 333, 5, 333, 5, -260, 308,
	114, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 205, -222,
	303, -222, -222, -206, 333, -206, -207, 333, -206, 309,
	314, 333, -97, -75, 337, 334, 337, 276, -133, 64,
	58, -153, 129, 58, -239, -67, 64, -240, 53, 287,
	207, 116, -133, 64, -133, 64, 64, -195, 33, -29,
	117, 33, -29, 117, 276, -78, -67, 276, 276, -195,
	-199, 315, -67, -199, 337, 117, 334, 337, -155, 305,
	-141, -29, 333, 86, 30, -141, -107, -108, -198, -109,
	-75, 333, -67, -67, -78, -79, -102, -103, -103, -94,
	-17, -200, 100, -20, -29, -24, -38, -14, 334, 337,
	-96, 29, -129, 333, 311, 168, 83, 127, 167, -130,
	238, 334, 337, 276, 117, 278, 334, -151, -81, 211,
	253, 222, 241, 337, -227, -276, -67, -75, -78, -75,
	-195, -84, -94, -85, -67, -154, -153, -241, -242, -239,
	134, 287, 107, 30, 100, -63, 201, 30, 187, 177,
	-59, 268, 100, -138, -223, 333, 325, -139, 232, 233,
	337, -52, 31, 90, 333, 334, -155, -197, -99, -193,
	331, -195, -75, -47, -194, 333, -220, -202, -219, 217,
	218, 216, 220, 219, -202, -227, 273, -163, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
	-163, -163, -163, -163, -163, -163, -163, -163, -163, 159,
	131, 249, 36, 132, -163, 276, -163, -163, -163, -163,
	169, 177, 179, 281, 106, 288, 91, 183, -285, 264,
	32, -170, -47, 333, -185, 27, 254, 22, -227, -177,
	232, 333, -158, -163, -159, -104, 334, 334, 337, -104,
	-176, 332, -172, -184, -183, 304, 334, -104, 301, 22,
	91, 326, 7, -129, -261, 109, 122, 333, 334, 334,
	-163, -163, -123, -221, -104, 4, 311, 168, 83, 127,
	167, 238, -123, -124, -163, -104, -125, -164, -165, 324,
	325, 319, 333, 232, -126, -163, -104, -163, 43, 155,
	277, -127, -163, 117, -104, -163, -163, -163, -104, -104,
	-104, 333, 7, 7, 273, 273, 7, -155, 334, -186,
	-53, -75, -67, -67, 177, -153, 129, -58, 177, -202,
	-67, 333, 333, 150, 150, -67, -67, 129, -67, 129,
	-67, -67, -54, 221, -29, 333, -29, 333, -67, 221,
	-67, -75, 221, -40, 128, 183, -43, 307, -233, 259,
	117, -75, -118, 227, -163, -118, -143, 187, -100, 299,
	-67, -118, -98, 337, 117, 318, -100, -56, -56, -56,
	-195, -202, 331, 331, 7, 276, 276, 276, 276, 333,
	-163, -276, -276, -64, 285, 61, 211, -231, 337, -199,
	334, 334, 337, -68, 134, -68, -29, -102, 5, -29,
	-75, 100, -60, 96, -284, 318, -67, -139, -163, -191,
	-20, -115, 122, -199, 337, 69, -122, 149, 172, 118,
	157, 229, 137, 7, 103, -32, -160, 338, 333, -190,
	314, -47, -194, -193, 312, -163, -163, 276, -285, 264,
	-170, -163, 169, 179, 281, 106, 288, 91, 183, 117,
	333, -164, -164, -104, -167, 333, -104, 332, 341, 334,
	-163, 332, 332, 337, -182, -183, 95, -163, -91, 337,
	-90, -163, -104, -104, 334, 334, -266, 195, 333, 333,
	-163, 30, 337, 334, 117, 334, 334, -131, 202, 334,
	10, 11, 324, 325, 326, 327, 112, 328, 329, 322,
	323, 321, 316, 317, 318, 62, 165, 234, 13, 14,
	15, 147, 132, -164, -164, -164, -104, 333, 334, -168,
	-169, 117, 114, 30, -127, -127, -127, 334, 117, -104,
	337, 337, 337, 334, 334, 334, 7, 334, 337, 334,
	312, 312, 334, -115, 276, 276, 100, 177, 296, -243,
	-240, -163, -93, -192, -67, -254, 333, -251, -252, -73,
	333, 333, -51, 94, 245, -134, 100, -56, 100, -56,
	276, -133, 64, -104, -104, 276, 276, -43, 117, 265,
	189, 259, -106, 178, -118, 63, 334, -155, -108, -99,
	-186, 334, 332, 7, 7, 334, 168, 127, 167, -130,
	167, -130, -130, 7, -67, -86, 133, -154, 333, -68,
	333, 333, -89, 333, -67, -61, 154, -284, -230, -257,
	188, 334, 334, -171, 124, 44, -193, 149, 149, -193,
	-122, 149, -120, 194, -120, -120, -272, 333, -17, 333,
	332, -190, -227, 331, 339, -104, -189, -188, 30, -67,
	192, 334, -163, -163, -164, -164, 117, 333, -163, -174,
	26, 26, 334, -104, 334, 337, -159, -163, 334, -172,
	97, -163, 272, 334, 301, -91, -91, -91, 5, -267,
	-67, 333, 305, -90, 334, -220, -202, -163, -168, -163,
	-220, -202, -164, -164, -164, -164, -164, -164, -164, -164,
	-164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
	-164, 91, 177, 183, -164, 337, -104, 334, -169, -168,
	-163, -163, -202, 334, 334, 334, -104, -163, -163, -163,
	334, 7, -171, -67, -67, -153, 100, -244, 64, -245,
	56, 107, 68, 177, 179, 287, 207, 53, 86, 215,
	334, 334, 337, -74, -111, 56, -74, -163, 333, -93,
	-94, 177, 86, 177, 86, 79, 283, -67, -67, -75,
	-67, -67, 334, 334, -67, -75, -234, 273, 333, -142,
	333, 187, -29, -118, 318, 332, 332, 334, 132, -93,
	333, -94, -84, 30, -93, 187, -62, 153, -284, -230,
	-59, -263, 306, -163, -104, -193, -193, -121, 294, 187,
	149, -193, 332, 334, -273, 7, 332, -201, -190, -189,
	7, -162, -161, 115, 175, 334, -67, 333, -190, 26,
	26, -163, -174, 334, -163, -163, 334, -163, 332, -163,
	5, -163, 334, 334, 334, -268, -67, -163, 334, 334,
	334, -169, 117, 91, 183, 333, -163, 334, 334, 337,
	334, 334, 334, -263, -153, -67, -227, -67, 107, 129,
	179, 150, 333, -164, -75, -152, -281, 67, 262, -192,
	-52, -227, -52, 334, -104, 334, 334, 179, 179, -163,
	-202, -56, -56, 276, 276, 276, 276, -166, -73, -67,
	-42, -41, 5, 92, -94, 64, -114, -47, 333, 198,
	334, -93, 334, 334, -29, 334, -75, -284, -230, -60,
	-264, -265, -67, -121, 333, -163, -193, -160, 334, 337,
	-190, 334, -189, 332, 337, 340, 318, -190, 333, -94,
	-188, -163, -163, 334, 334, -91, -262, 200, 334, -164,
	117, 333, -174, 334, -163, -245, -68, 177, -163, -69,
	333, -86, 333, -74, -91, 215, -55, 56, -67, -67,
	333, 333, 333, 337, 334, -44, 318, 289, 178, 334,
	-67, -67, -152, 334, -86, -152, 333, -230, -61, 337,
	30, -94, -190, 7, -189, -17, -161, -227, 331, -189,
	-94, 334, 334, -91, 44, -164, -174, 334, 334, 100,
	334, -248, 166, -67, -94, -52, 334, -75, -50, 294,
	-227, -104, -104, -104, -41, 5, 245, -155, 333, -86,
	-152, -86, -93, -62, -265, -267, 334, -188, 332, 7,
	334, -269, 210, 233, -104, 334, 107, -246, -249, -247,
	187, 118, 199, 250, 334, 334, -89, -163, 334, 334,
	-91, -107, -94, -86, 334, -190, 332, 334, -270, -271,
	36, 284, 71, -163, -270, -67, -247, 187, -249, 187,
	289, 89, -248, 334, -155, 334, -152, -189, -271, 204,
	113, 232, 204, 113, -250, 174, 226, 47, 245, -250,
	-246, -57, 47, 226, -86, 26, 20, 179, 86, -271,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 0, 0, 0, 0, 81, 82, 83, 84,
	85, 86, 0, 0, 447, 0, 0, 0, 0, 0,
	0, 0, 419, -2, 0, 164, 0, 363, 0, 363,
	363, 367, 0, 0, 449, 0, 329, 446, -2, 457,
	0, 0, 0, 455, 433, 0, 0, -2, 0, 0,
	0, 0, 0, 138, 0, 987, 916, 922, 923, 947,
	948, 949, 966, 967, 968, 969, 970, 971, 972, 973,
	974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
	984, 985, 986, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004,
	1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
	1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
	1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
	1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
	1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
	1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
	1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
	1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
	1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
	1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
	1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
	1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,
	1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
	1155, 1156, 1157, 1158, 0, 0, 918, 987, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 106,
	107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 0, 241, 961, 962, 963, 964, 965, 1159,
	1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
	1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
	1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
	1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
	1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
	1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
	1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
	1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
	1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
	1250, 1251, 1252, 1253, 124, 131, 132, 1040, 134, 0,
	141, 142, 143, 145, 146, 147, 148, 149, 150, 151,
	0, 356, 1065, 369, 159, 1017, 1070, 975, 1145, 1088,
	167, 172, 0, 1151, 175, 180, -2, 100, 206, 207,
	208, 209, 210, 0, 0, 0, 216, 243, 0, 0,
	0, 0, 0, 223, 0, 226, 230, 0, 0, 0,
	237, 0, 0, 371, 362, 371, 359, 360, 361, 364,
	0, 355, 154, 155, 156, 157, 0, 448, 158, 183,
	184, 185, 194, 195, 196, 197, 318, 0, 320, 204,
	205, 943, 0, 957, 958, 959, 960, 0, 0, 0,
	0, 0, 328, -2, 429, 430, -2, 0, 452, 452,
	452, 0, 0, 430, 0, 438, 1045, 441, 929, 439,
	0, 0, 454, 453, 0, 434, 536, 0, 483, 0,
	2, 0, 1129, 536, 0, 1129, 921, 0, 0, 1129,
	0, 0, 139, 140, 926, 924, 925, 0, 0, 0,
	0, 919, 895, 893, 894, 0, 0, 0, 0, 542,
	88, 1129, 56, 1129, 914, 56, 1129, 98, 56, 1129,
	96, 1129, 0, 119, 121, 1157, 0, 0, 0, 0,
	129, 0, 133, 135, 0, 0, 0, 368, 160, 1118,
	162, 0, 0, 166, 372, 374, 375, 376, 0, 0,
	0, 0, 0, 0, 0, 176, 177, 178, 101, 0,
	0, 211, 65, 66, 0, 224, 227, 0, 245, 0,
	0, 0, 0, 0, 0, 225, 228, 0, 231, 0,
	233, 234, 0, 0, 0, 0, 357, 370, 358, 0,
	366, 56, 540, 319, 945, 944, 301, 1129, 445, 301,
	951, 445, 1129, -2, 0, 425, 464, 465, 0, 0,
	0, 0, 450, 451, 0, 0, 0, 421, 422, 0,
	440, 0, 0, 486, 906, 910, 911, 640, 0, 0,
	0, 0, 0, 0, 732, 734, 1123, 1145, 0, 736,
	737, 0, 739, 741, 742, 0, 745, 746, 886, 918,
	932, 933, 934, 935, 0, 0, 938, 0, 940, 941,
	942, 786, 755, -2, -2, 930, 572, 573, 574, 575,
	-2, 1159, 759, 761, 763, 764, 765, 766, 0, 1107,
	1124, 1125, 1141, 1142, 1150, 1154, 1155, 1129, 1138, 1130,
	1119, 1127, 1136, 992, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 956, 602, 603, 608, 609,
	611, 486, 484, 537, 538, 0, 0, 903, 901, 902,
	33, 352, 35, 0, 352, 352, 0, 0, 0, 0,
	250, 0, 0, 252, 0, 0, 0, 0, 0, 0,
	527, 917, 0, 891, 892, 527, 67, 78, 0, 0,
	912, 896, 546, 0, 396, 0, 0, 543, 0, 0,
	90, 0, 54, 55, 0, 92, 0, 0, 94, 0,
	0, 447, 0, 0, 1129, 0, 447, 0, 844, 554,
	555, 556, 557, 558, 637, 561, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 579, 580, 581, 582,
	583, 584, 585, 599, 0, 578, 578, 578, 591, 592,
	600, 601, 606, 607, 618, 619, 621, 623, 617, 617,
	617, 614, 615, 0, 842, 0, 144, 0, 0, 163,
	0, 0, 0, 0, 377, 191, 192, 193, 379, 380,
	168, 170, 181, 169, 171, 173, 174, 198, 199, 200,
	201, 202, 203, 0, 0, 102, 214, 212, 213, 215,
	217, 0, 242, 218, 219, 220, 221, 222, 229, 232,
	235, 236, 0, 0, 0, 365, 321, 0, 259, 0,
	0, 324, 444, 0, 0, 0, 1129, 950, 384, 0,
	428, 462, 463, 466, 470, 471, 474, 477, 478, 468,
	640, 435, 436, 437, 458, 459, 339, 442, 0, 0,
	546, 0, 0, 0, 0, 0, 0, 821, 822, 823,
	824, 825, 826, 829, 830, 827, 828, 831, 832, 833,
	0, 0, 0, 834, 835, 836, 0, 0, 838, 0,
	840, 0, 0, 0, 0, 0, 0, 900, 0, 0,
	0, 909, 837, 645, 646, 647, 669, 670, 0, 733,
	897, 890, 735, 0, -2, 842, 0, 738, 743, 744,
	0, 0, 885, -2, 0, 937, 0, 637, 788, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 871,
	0, 0, 0, 0, 0, 0, 0, 0, 587, 605,
	616, 613, 612, 589, 0, 588, 586, 0, 590, 0,
	0, 0, 546, 0, 0, 905, 0, 0, 0, 0,
	351, 37, 1129, 0, 58, 0, 0, 291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 248,
	0, 0, 249, 0, 0, 0, 920, 0, 0, 0,
	70, 0, 927, 77, 0, 0, 0, 0, 408, 0,
	408, 398, 0, 0, 0, 408, 411, 412, 414, 415,
	0, 0, 544, 89, 915, 56, 99, 56, 56, 97,
	105, 120, 0, 122, 125, 126, 127, 128, 123, 0,
	547, 549, 559, 0, 624, 625, 626, 627, 628, 629,
	638, 130, 0, 0, 0, 0, 165, 373, 378, 0,
	188, 0, 190, 0, 103, 244, 152, 238, 239, 527,
	541, 0, 0, 258, 926, 260, 262, 263, 264, 265,
	951, 0, 951, 0, 0, 322, 0, 0, 0, 0,
	386, 392, 0, 0, 472, 0, 0, 469, 475, 476,
	0, 461, 337, 338, 447, 928, 480, 907, 527, 487,
	0, 497, 536, 513, 502, 0, 641, 550, 551, 593,
	594, 595, 596, 597, 642, 643, 0, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, -2, -2, -2,
	661, 662, 663, -2, -2, -2, 667, 668, -2, 839,
	841, 0, 900, 0, -2, 0, -2, -2, -2, -2,
	681, 0, 683, 686, 688, 690, 0, 0, 0, 0,
	899, 700, 877, 0, 0, 818, 819, 820, 908, 685,
	0, 0, 898, 889, 0, 0, -2, 740, 0, 0,
	0, 848, 849, 884, 880, 0, 747, 457, 0, 0,
	0, 0, 0, 946, 796, 0, 0, 0, 760, 762,
	0, 0, 0, 0, 852, -2, -2, -2, -2, -2,
	-2, -2, 0, 0, 842, 862, 0, 0, 703, 0,
	0, 0, 0, 1145, 0, 842, 870, 0, 0, 0,
	0, 0, 842, 0, 876, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 480, 539, 904,
	36, 341, 0, 0, 0, 39, 1129, 47, 0, 273,
	0, 0, 0, 0, 0, 354, 48, 1129, 56, 1129,
	56, 49, 34, 352, 246, 0, 247, 0, 345, 0,
	340, 343, 0, 77, 0, 0, 64, 0, 68, 79,
	0, 913, 87, 0, 545, 393, 408, 0, 0, 400,
	397, 395, 546, 0, 0, 0, 0, 91, 93, 95,
	0, 845, 0, 0, 0, 0, 0, 0, 0, 0,
	843, 136, 137, 161, 186, 187, 189, 182, 0, 240,
	267, 300, 0, 0, 951, 0, 256, 301, 323, 325,
	0, 0, 388, 392, 0, 391, 445, 0, 0, 460,
	0, 482, 0, 485, 0, 0, 0, 0, 0, 533,
	533, 533, 531, 507, 447, 0, 513, 0, 0, 525,
	0, -2, 502, 0, 0, -2, -2, 0, 0, 0,
	701, -2, 682, 684, 687, 689, 691, 0, 0, 0,
	0, 0, 0, 0, 702, 0, 0, 887, 890, -2,
	843, 846, 847, 0, 0, 881, 0, 0, 0, 0,
	456, 457, 457, 457, 753, 0, 754, 0, 0, 0,
	0, 0, 0, 769, 0, 770, 771, 0, 0, 772,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 706, 707, 708, 0, 0, 773, 868,
	869, 0, 0, 0, 0, 0, 0, 778, 0, 875,
	0, 0, 0, 782, 783, 784, 0, 576, 0, 598,
	620, 622, 610, 482, 0, 0, 0, 0, 57, 271,
	290, 0, 0, 330, 336, 336, 0, 756, 757, 0,
	0, 0, 41, 0, 0, 0, 0, 45, 0, 51,
	0, 0, 0, 0, 0, 0, 0, 63, 0, 0,
	0, 80, 406, 407, 394, 405, 0, 408, 413, 410,
	416, 0, 552, 0, 0, 560, 630, 631, 632, 633,
	634, 635, 636, 0, 153, 254, 0, 261, 0, 0,
	0, 259, 0, 0, 0, 390, 392, 0, 383, 384,
	467, 473, 443, 790, 0, 0, 488, 0, 0, 0,
	0, 0, 528, 532, 529, 530, 0, 0, 0, 0,
	513, 525, 494, 0, 0, 0, 501, 524, 0, 523,
	512, -2, 644, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 878, 0, 813, 0, 0, 889, -2, 850,
	879, 883, 0, 748, 0, 0, 0, 0, 939, 794,
	795, 799, 0, 0, 758, 0, 0, 851, 861, 863,
	704, 705, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, -2, -2, -2, 722, 723, 724, -2, -2,
	-2, 0, 0, 0, 864, 0, 0, 816, 866, 867,
	872, 873, 0, 775, 776, 777, 874, 0, 0, 0,
	604, 0, 790, 347, 349, 38, 0, 272, 0, 275,
	0, 0, 0, 0, 281, 282, 0, 0, 0, 0,
	292, 299, 0, 339, 931, 0, 339, 0, 0, 0,
	0, 0, 53, 0, 0, 353, 0, 56, 56, 342,
	0, 0, 0, 0, 346, 344, 69, 0, 0, 0,
	0, 0, 399, 409, 0, 553, 548, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 381, 392, 0, 385,
	386, 431, 0, 481, 479, 515, 0, 517, 0, 0,
	0, 519, 497, 508, 0, 510, 513, 0, 525, 499,
	0, 0, 492, 0, 491, 513, 521, 0, 0, 0,
	0, -2, 0, 694, -2, -2, 812, 843, 888, 882,
	936, 457, 749, 751, 752, 801, 798, 0, 785, 767,
	768, 860, 0, 0, 0, 0, 843, 815, 774, 0,
	780, 781, 577, 432, 40, 0, 276, 277, 951, 0,
	280, 283, 0, 285, 953, 267, 0, 296, 297, 331,
	332, 335, 333, 336, 457, 294, 0, 42, 43, 52,
	60, 44, 50, 0, 0, 0, 0, 526, 0, 0,
	0, 74, 72, 0, 0, 0, 417, 418, 0, 0,
	299, 0, 289, 267, 257, 299, 0, 0, 387, 388,
	789, 791, 0, 516, 0, 535, 518, 513, 509, 0,
	525, 447, 506, 495, 0, 496, 0, 525, 0, 0,
	503, -2, -2, 695, 814, 0, 457, 0, 787, -2,
	0, 0, 0, 817, 0, 274, 278, 0, 0, 305,
	0, 293, 0, 339, 0, 0, 62, 0, 348, 350,
	0, 0, 0, 0, 76, 73, 0, 0, 402, 546,
	404, 0, 267, 299, 255, 267, 0, 389, 390, 0,
	0, 0, 0, 511, 504, 0, 493, 489, 0, 500,
	0, 522, 750, 804, 0, -2, 0, 730, 779, 0,
	284, 310, 0, 0, 0, 334, 748, 301, 46, 0,
	59, 0, 0, 457, 75, 71, 0, 403, 0, 287,
	267, 326, 0, 382, 792, 793, 534, 498, 513, 0,
	520, 0, 0, 0, 800, 731, 0, 286, 306, 307,
	0, 302, 303, 304, 952, 298, 305, 61, 251, 253,
	0, 546, 0, 288, 299, 525, 490, 797, 802, 805,
	-2, 1091, 984, 0, 803, 279, 308, 0, 309, 0,
	0, 0, 310, 0, 401, 270, 267, 505, 0, 807,
	808, 809, 810, 811, 311, 0, 314, 315, 0, 312,
	295, 266, 268, 269, 327, 0, 313, 316, 317, 806,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 322, 3, 328, 323, 3,
	333, 334, 326, 324, 337, 325, 335, 327, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 341, 336,
	316, 318, 317, 3, 338, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 331, 3, 332, 329, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 339, 321, 340, 319,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 320, 57659, 330,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:792
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:798
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:804
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 32:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:845
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 33:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:851
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:855
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:861
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:865
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:872
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:882
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:892
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:901
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:904
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:914
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:924
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:927
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:934
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:944
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = DropCascade
		}
	case 55:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = DropRestrict
		}
	case 56:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:981
		{
			sqlVAL.union.val = DropDefault
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 58:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:991
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:996
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 60:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:997
		{
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1000
		{
			return unimplemented(sqllex, "alter using")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1001
		{
		}
	case 63:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1005
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1009
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1015
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1019
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 67:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1025
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1035
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 70:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1039
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 71:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 72:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1049
		{
			sqlVAL.str = ""
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1055
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1065
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 76:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1071
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 77:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1074
		{
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1078
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1082
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1117
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1125
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1133
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1137
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1141
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1159
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1190
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1194
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1214
		{ /* SKIP DOC */
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1222
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1232
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1252
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1277
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1296
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1307
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1362
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1366
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1374
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1378
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1401
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1405
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1418
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1430
		{
			return unimplemented(sqllex, "set local")
		}
	case 161:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{ /* SKIP DOC */
		}
	case 165:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[2].union.transactionModes()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1482
		{
			return unimplemented(sqllex, "set from current")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1485
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1494
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1498
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1502
		{
		}
	case 179:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1502
		{
		}
	case 181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1509
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 188:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1535
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1539
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1543
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1549
		{
			sqlVAL.union.val = Low
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = Normal
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1557
		{
			sqlVAL.union.val = High
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1563
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1571
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1597
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1622
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "client_encoding"}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1626
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1630
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1634
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1642
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[4].union.unresolvedName().String(), ClusterSetting: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1650
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1654
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1658
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1662
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1670
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1674
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1678
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1706
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1710
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1714
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1718
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1722
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1726
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1730
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1746
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1750
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1754
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1771
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1777
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1781
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 246:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1787
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 247:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1797
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 249:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1801
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Relocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1807
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 251:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1811
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1815
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 253:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1819
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 254:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1830
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 256:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1840
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1853
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1857
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 266:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1894
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = DropDefault
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1904
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1925
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1933
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1937
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1941
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1967
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1971
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1975
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1983
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2005
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2035
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2067
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2090
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2094
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2100
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2109
		{
			return unimplemented(sqllex, "match full")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2110
		{
			return unimplemented(sqllex, "match partial")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2111
		{
			return unimplemented(sqllex, "match simple")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2112
		{
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2118
		{
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2119
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2121
		{
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2122
		{
		}
	case 311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2125
		{
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2128
		{
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2131
		{
			return unimplemented(sqllex, "no action")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2134
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2135
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2136
		{
			return unimplemented(sqllex, "action set null")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2137
		{
			return unimplemented(sqllex, "action set default")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2149
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2156
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2163
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[5].union.strPtr()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2169
		{
			pwd := sqlDollar[2].str
			sqlVAL.union.val = &pwd
		}
	case 324:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = true
		}
	case 329:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = false
		}
	case 330:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2228
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2232
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2244
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2245
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2248
		{
			return unimplementedWithIssue(sqllex, 2473)
		}
	case 336:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2249
		{
		}
	case 337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = Ascending
		}
	case 338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2257
		{
			sqlVAL.union.val = Descending
		}
	case 339:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2261
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 340:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2268
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2272
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2300
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2303
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2304
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.union.val = true
		}
	case 352:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2312
		{
			sqlVAL.union.val = false
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2317
		{
		}
	case 354:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2318
		{
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2328
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2335
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2339
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2343
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2351
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2360
		{
		}
	case 363:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2361
		{
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2365
		{
			sqlVAL.str = ""
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2377
		{
			sqlVAL.str = ""
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2383
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2387
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2393
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2397
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2403
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2407
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2417
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2431
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2443
		{
			sqlVAL.union.val = ReadOnly
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2447
		{
			sqlVAL.union.val = ReadWrite
		}
	case 381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2453
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2463
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 384:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2480
		{
			sqlVAL.str = ""
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2486
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2490
		{
			sqlVAL.str = ""
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.str = ""
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2506
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2510
		{
			sqlVAL.str = ""
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2515
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2516
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2520
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 395:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2546
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2550
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2556
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2560
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2564
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2570
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2574
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2580
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2584
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2586
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2592
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 408:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 409:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2614
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 411:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2615
		{
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2645
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2649
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2693
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2703
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2785
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2798
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2824
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2842
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2843
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2844
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2847
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2848
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2851
		{
			return unimplemented(sqllex, "cte")
		}
	case 444:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2854
		{
		}
	case 445:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2855
		{
		}
	case 446:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 447:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2859
		{
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2862
		{
		}
	case 449:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2863
		{
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2867
		{
			sqlVAL.union.val = true
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2871
		{
			sqlVAL.union.val = false
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2875
		{
			sqlVAL.union.val = false
		}
	case 453:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2881
		{
			sqlVAL.union.val = true
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2886
		{
		}
	case 455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2887
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2891
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2895
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2901
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2907
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2911
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2917
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2925
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2934
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2945
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2974
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2997
		{
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2998
		{
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3001
		{
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3002
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3034
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 482:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3038
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3056
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3068
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3072
		{
			sqlVAL.union.val = &From{}
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3092
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3105
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3110
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3137
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3143
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 497:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3147
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3154
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3169
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3173
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3177
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 503:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3202
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Statement: sqlDollar[3].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 505:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:3206
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Explain{Options: sqlDollar[4].union.strs(), Statement: sqlDollar[6].union.stmt(), Enclosed: true}, Ordinality: sqlDollar[8].union.bool(), As: sqlDollar[9].union.aliasClause()}
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ShowSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = nil
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3216
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3217
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3221
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = true
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = false
		}
	case 514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3259
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 515:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3263
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3267
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3271
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3275
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3279
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3289
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3293
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3297
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3314
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.str = astFullJoin
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.str = astLeftJoin
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.str = astRightJoin
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.str = astInnerJoin
		}
	case 532:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3338
		{
		}
	case 533:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3339
		{
		}
	case 534:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3350
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 540:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3382
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3395
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3399
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3403
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3425
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3438
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3439
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 550:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3443
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3447
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3453
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 554:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3462
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3472
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3476
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3480
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3488
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3496
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3500
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3504
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3525
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3534
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3548
		{
			sqlVAL.union.val = nil
		}
	case 579:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3555
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3559
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 582:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 583:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 585:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3579
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 586:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3583
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 587:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3606
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3624
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 592:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3635
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 597:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3661
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3695
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3711
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3733
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3737
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3741
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 615:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3745
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3751
		{
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3756
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3760
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 620:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3764
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3768
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3777
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3783
		{
			sqlVAL.union.val = year
		}
	case 625:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3787
		{
			sqlVAL.union.val = month
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3791
		{
			sqlVAL.union.val = day
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3795
		{
			sqlVAL.union.val = hour
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3799
		{
			sqlVAL.union.val = minute
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3803
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3809
		{
			sqlVAL.union.val = month
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3813
		{
			sqlVAL.union.val = hour
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3817
		{
			sqlVAL.union.val = minute
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = minute
		}
	case 635:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3829
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3833
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3837
		{
			sqlVAL.union.val = nil
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3843
		{
			sqlVAL.union.val = second
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3846
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3870
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3874
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3881
		{
			return unimplemented(sqllex, "at tz")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3890
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3894
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3902
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3906
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3910
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3914
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3918
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3922
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3926
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3930
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3938
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3942
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3946
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3950
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3954
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3962
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3966
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3970
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3974
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3978
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3986
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3990
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3994
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3998
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4006
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4010
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4014
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4018
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4022
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4026
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4030
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4038
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4042
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4046
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4049
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4091
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4095
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4107
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4111
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4115
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4143
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4147
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4151
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4159
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4163
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4167
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4179
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4183
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4195
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4199
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4203
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4207
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4243
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4247
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4272
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4283
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4288
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4310
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4314
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4341
		{
			return unimplemented(sqllex, "variadic")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4342
		{
			return unimplemented(sqllex, "variadic")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4344
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4348
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4352
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4365
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4372
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4381
		{
			return unimplemented(sqllex, "func_application")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 758:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4386
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4388
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4392
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4396
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4400
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			return unimplemented(sqllex, "current role")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4404
		{
			return unimplemented(sqllex, "current user")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4405
		{
			return unimplemented(sqllex, "session user")
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4406
		{
			return unimplemented(sqllex, "user")
		}
	case 767:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4408
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4412
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4416
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4420
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4424
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4428
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4435
		{
			return unimplemented(sqllex, "treat")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4437
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4441
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4445
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4449
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4453
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4457
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4461
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4465
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4469
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4473
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4479
		{
			return unimplemented(sqllex, "within group")
		}
	case 786:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4480
		{
		}
	case 787:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 790:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = Window(nil)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4505
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4509
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4515
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 797:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4538
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4557
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4563
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4577
		{
			return unimplemented(sqllex, "frame range")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4578
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4579
		{
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4582
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4583
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 807:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4589
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 808:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4590
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 809:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4591
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4592
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4593
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4604
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4608
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4618
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4622
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4628
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4634
		{
			sqlVAL.union.val = Any
		}
	case 819:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4638
		{
			sqlVAL.union.val = Some
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4642
		{
			sqlVAL.union.val = All
		}
	case 821:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = Plus
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4648
		{
			sqlVAL.union.val = Minus
		}
	case 823:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4649
		{
			sqlVAL.union.val = Mult
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4650
		{
			sqlVAL.union.val = Div
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = FloorDiv
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4652
		{
			sqlVAL.union.val = Mod
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4653
		{
			sqlVAL.union.val = Bitand
		}
	case 828:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4654
		{
			sqlVAL.union.val = Bitor
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = Pow
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4656
		{
			sqlVAL.union.val = Bitxor
		}
	case 831:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4657
		{
			sqlVAL.union.val = LT
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4658
		{
			sqlVAL.union.val = GT
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = EQ
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4660
		{
			sqlVAL.union.val = LE
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4661
		{
			sqlVAL.union.val = GE
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4662
		{
			sqlVAL.union.val = NE
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4666
		{
			sqlVAL.union.val = Like
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = NotLike
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4668
		{
			sqlVAL.union.val = ILike
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4669
		{
			sqlVAL.union.val = NotILike
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4680
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4684
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4690
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4694
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4704
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4708
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4714
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4718
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 851:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4724
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4728
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4758
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4771
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4775
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4792
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4796
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4800
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4804
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4808
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 871:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4812
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 873:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4824
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4859
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 882:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4882
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4886
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 886:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4899
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4910
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4916
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4928
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4932
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4938
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4942
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4948
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4952
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 899:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4957
		{
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4958
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4967
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 905:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4986
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 906:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4992
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4996
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 908:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5002
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5011
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5015
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5019
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5027
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5031
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 914:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5037
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 918:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5072
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5076
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5089
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5111
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5117
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 929:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5120
		{
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5134
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 932:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5141
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5145
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 934:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5156
		{
			return unimplemented(sqllex, "func const")
		}
	case 937:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5158
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5162
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5165
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5167
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5171
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5175
		{
			sqlVAL.union.val = DNull
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5182
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5186
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5192
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 951:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5227
		{
			sqlVAL.str = ""
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
