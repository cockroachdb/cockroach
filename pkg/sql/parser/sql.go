// Code generated by goyacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:48

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}

//line sql.y:465
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BACKUP = 57376
const BEGIN = 57377
const BETWEEN = 57378
const BIGINT = 57379
const BIGSERIAL = 57380
const BIT = 57381
const BLOB = 57382
const BOOL = 57383
const BOOLEAN = 57384
const BOTH = 57385
const BY = 57386
const BYTEA = 57387
const BYTES = 57388
const CANCEL = 57389
const CASCADE = 57390
const CASE = 57391
const CAST = 57392
const CHAR = 57393
const CHARACTER = 57394
const CHARACTERISTICS = 57395
const CHECK = 57396
const CLUSTER = 57397
const COALESCE = 57398
const COLLATE = 57399
const COLLATION = 57400
const COLUMN = 57401
const COLUMNS = 57402
const COMMIT = 57403
const COMMITTED = 57404
const CONCAT = 57405
const CONFLICT = 57406
const CONSTRAINT = 57407
const CONSTRAINTS = 57408
const COPY = 57409
const COVERING = 57410
const CREATE = 57411
const CROSS = 57412
const CUBE = 57413
const CURRENT = 57414
const CURRENT_CATALOG = 57415
const CURRENT_DATE = 57416
const CURRENT_SCHEMA = 57417
const CURRENT_ROLE = 57418
const CURRENT_TIME = 57419
const CURRENT_TIMESTAMP = 57420
const CURRENT_USER = 57421
const CYCLE = 57422
const DATA = 57423
const DATABASE = 57424
const DATABASES = 57425
const DATE = 57426
const DAY = 57427
const DEC = 57428
const DECIMAL = 57429
const DEFAULT = 57430
const DEALLOCATE = 57431
const DEFERRABLE = 57432
const DELETE = 57433
const DESC = 57434
const DISCARD = 57435
const DISTINCT = 57436
const DO = 57437
const DOUBLE = 57438
const DROP = 57439
const ELSE = 57440
const ENCODING = 57441
const END = 57442
const ESCAPE = 57443
const EXCEPT = 57444
const EXISTS = 57445
const EXECUTE = 57446
const EXPERIMENTAL_FINGERPRINTS = 57447
const EXPLAIN = 57448
const EXTRACT = 57449
const EXTRACT_DURATION = 57450
const FALSE = 57451
const FAMILY = 57452
const FETCH = 57453
const FILTER = 57454
const FIRST = 57455
const FLOAT = 57456
const FLOAT4 = 57457
const FLOAT8 = 57458
const FLOORDIV = 57459
const FOLLOWING = 57460
const FOR = 57461
const FORCE_INDEX = 57462
const FOREIGN = 57463
const FROM = 57464
const FULL = 57465
const GRANT = 57466
const GRANTS = 57467
const GREATEST = 57468
const GROUP = 57469
const GROUPING = 57470
const HAVING = 57471
const HELP = 57472
const HIGH = 57473
const HOUR = 57474
const INCREMENTAL = 57475
const IF = 57476
const IFNULL = 57477
const ILIKE = 57478
const IN = 57479
const INTERLEAVE = 57480
const INDEX = 57481
const INDEXES = 57482
const INITIALLY = 57483
const INNER = 57484
const INSERT = 57485
const INT = 57486
const INT2VECTOR = 57487
const INT2 = 57488
const INT4 = 57489
const INT8 = 57490
const INT64 = 57491
const INTEGER = 57492
const INTERSECT = 57493
const INTERVAL = 57494
const INTO = 57495
const IS = 57496
const ISOLATION = 57497
const JOB = 57498
const JOBS = 57499
const JOIN = 57500
const KEY = 57501
const KEYS = 57502
const KV = 57503
const LATERAL = 57504
const LC_CTYPE = 57505
const LC_COLLATE = 57506
const LEADING = 57507
const LEAST = 57508
const LEFT = 57509
const LEVEL = 57510
const LIKE = 57511
const LIMIT = 57512
const LOCAL = 57513
const LOCALTIME = 57514
const LOCALTIMESTAMP = 57515
const LOW = 57516
const LSHIFT = 57517
const MATCH = 57518
const MINUTE = 57519
const MONTH = 57520
const NAN = 57521
const NAME = 57522
const NAMES = 57523
const NATURAL = 57524
const NEXT = 57525
const NO = 57526
const NO_INDEX_JOIN = 57527
const NORMAL = 57528
const NOT = 57529
const NOTHING = 57530
const NULL = 57531
const NULLIF = 57532
const NULLS = 57533
const NUMERIC = 57534
const OF = 57535
const OFF = 57536
const OFFSET = 57537
const OID = 57538
const ON = 57539
const ONLY = 57540
const OPTIONS = 57541
const OR = 57542
const ORDER = 57543
const ORDINALITY = 57544
const OUT = 57545
const OUTER = 57546
const OVER = 57547
const OVERLAPS = 57548
const OVERLAY = 57549
const PARENT = 57550
const PARTIAL = 57551
const PARTITION = 57552
const PASSWORD = 57553
const PAUSE = 57554
const PLACING = 57555
const PLANS = 57556
const POSITION = 57557
const PRECEDING = 57558
const PRECISION = 57559
const PREPARE = 57560
const PRIMARY = 57561
const PRIORITY = 57562
const QUERIES = 57563
const QUERY = 57564
const RANGE = 57565
const READ = 57566
const REAL = 57567
const RECURSIVE = 57568
const REF = 57569
const REFERENCES = 57570
const REGCLASS = 57571
const REGPROC = 57572
const REGPROCEDURE = 57573
const REGNAMESPACE = 57574
const REGTYPE = 57575
const RENAME = 57576
const REPEATABLE = 57577
const RELEASE = 57578
const RESET = 57579
const RESTORE = 57580
const RESTRICT = 57581
const RESUME = 57582
const RETURNING = 57583
const REVOKE = 57584
const RIGHT = 57585
const ROLLBACK = 57586
const ROLLUP = 57587
const ROW = 57588
const ROWS = 57589
const RSHIFT = 57590
const SAVEPOINT = 57591
const SCATTER = 57592
const SEARCH = 57593
const SECOND = 57594
const SELECT = 57595
const SEQUENCES = 57596
const SERIAL = 57597
const SERIALIZABLE = 57598
const SESSION = 57599
const SESSIONS = 57600
const SESSION_USER = 57601
const SET = 57602
const SETTING = 57603
const SETTINGS = 57604
const SHOW = 57605
const SIMILAR = 57606
const SIMPLE = 57607
const SMALLINT = 57608
const SMALLSERIAL = 57609
const SNAPSHOT = 57610
const SOME = 57611
const SPLIT = 57612
const SQL = 57613
const START = 57614
const STATUS = 57615
const STDIN = 57616
const STRICT = 57617
const STRING = 57618
const STORING = 57619
const SUBSTRING = 57620
const SYMMETRIC = 57621
const SYSTEM = 57622
const TABLE = 57623
const TABLES = 57624
const TEMP = 57625
const TEMPLATE = 57626
const TEMPORARY = 57627
const TESTING_RANGES = 57628
const TESTING_RELOCATE = 57629
const TEXT = 57630
const THEN = 57631
const TIME = 57632
const TIMESTAMP = 57633
const TIMESTAMPTZ = 57634
const TO = 57635
const TRAILING = 57636
const TRACE = 57637
const TRANSACTION = 57638
const TREAT = 57639
const TRIM = 57640
const TRUE = 57641
const TRUNCATE = 57642
const TYPE = 57643
const UNBOUNDED = 57644
const UNCOMMITTED = 57645
const UNION = 57646
const UNIQUE = 57647
const UNKNOWN = 57648
const UPDATE = 57649
const UPSERT = 57650
const USE = 57651
const USER = 57652
const USERS = 57653
const USING = 57654
const UUID = 57655
const VALID = 57656
const VALIDATE = 57657
const VALUE = 57658
const VALUES = 57659
const VARCHAR = 57660
const VARIADIC = 57661
const VIEW = 57662
const VARYING = 57663
const WHEN = 57664
const WHERE = 57665
const WINDOW = 57666
const WITH = 57667
const WITHIN = 57668
const WITHOUT = 57669
const WRITE = 57670
const YEAR = 57671
const ZONE = 57672
const NOT_LA = 57673
const WITH_LA = 57674
const AS_LA = 57675
const POSTFIXOP = 57676
const UMINUS = 57677
const HELPTOKEN = 57678

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6053

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 52,
	355, 52,
	-2, 651,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	139, 506,
	-2, 0,
	-1, 60,
	91, 651,
	143, 651,
	307, 651,
	308, 651,
	-2, 0,
	-1, 70,
	102, 627,
	111, 627,
	151, 627,
	170, 627,
	195, 627,
	201, 627,
	304, 627,
	-2, 616,
	-1, 101,
	4, 653,
	20, 653,
	21, 653,
	23, 653,
	28, 653,
	33, 653,
	34, 653,
	35, 653,
	36, 653,
	37, 653,
	38, 653,
	39, 653,
	40, 653,
	41, 653,
	42, 653,
	44, 653,
	45, 653,
	46, 653,
	47, 653,
	48, 653,
	51, 653,
	52, 653,
	53, 653,
	55, 653,
	56, 653,
	60, 653,
	61, 653,
	62, 653,
	64, 653,
	66, 653,
	67, 653,
	68, 653,
	71, 653,
	72, 653,
	80, 653,
	81, 653,
	82, 653,
	83, 653,
	84, 653,
	85, 653,
	86, 653,
	87, 653,
	89, 653,
	91, 653,
	93, 653,
	96, 653,
	97, 653,
	99, 653,
	103, 653,
	104, 653,
	105, 653,
	106, 653,
	107, 653,
	108, 653,
	112, 653,
	113, 653,
	114, 653,
	115, 653,
	116, 653,
	118, 653,
	120, 653,
	125, 653,
	126, 653,
	128, 653,
	130, 653,
	131, 653,
	132, 653,
	133, 653,
	134, 653,
	135, 653,
	138, 653,
	140, 653,
	143, 653,
	144, 653,
	145, 653,
	146, 653,
	147, 653,
	148, 653,
	149, 653,
	150, 653,
	152, 653,
	155, 653,
	156, 653,
	157, 653,
	159, 653,
	160, 653,
	161, 653,
	163, 653,
	164, 653,
	166, 653,
	168, 653,
	171, 653,
	174, 653,
	176, 653,
	177, 653,
	178, 653,
	179, 653,
	180, 653,
	181, 653,
	183, 653,
	184, 653,
	185, 653,
	186, 653,
	190, 653,
	191, 653,
	192, 653,
	193, 653,
	194, 653,
	196, 653,
	198, 653,
	199, 653,
	202, 653,
	203, 653,
	205, 653,
	207, 653,
	208, 653,
	209, 653,
	210, 653,
	211, 653,
	212, 653,
	214, 653,
	215, 653,
	216, 653,
	217, 653,
	218, 653,
	220, 653,
	221, 653,
	222, 653,
	223, 653,
	224, 653,
	225, 653,
	226, 653,
	227, 653,
	229, 653,
	230, 653,
	231, 653,
	232, 653,
	233, 653,
	234, 653,
	235, 653,
	236, 653,
	237, 653,
	238, 653,
	239, 653,
	240, 653,
	242, 653,
	244, 653,
	245, 653,
	246, 653,
	247, 653,
	249, 653,
	250, 653,
	251, 653,
	252, 653,
	254, 653,
	255, 653,
	256, 653,
	257, 653,
	258, 653,
	260, 653,
	261, 653,
	262, 653,
	263, 653,
	265, 653,
	266, 653,
	267, 653,
	268, 653,
	270, 653,
	271, 653,
	272, 653,
	273, 653,
	274, 653,
	275, 653,
	276, 653,
	277, 653,
	278, 653,
	280, 653,
	282, 653,
	283, 653,
	284, 653,
	285, 653,
	286, 653,
	287, 653,
	288, 653,
	290, 653,
	291, 653,
	292, 653,
	295, 653,
	296, 653,
	297, 653,
	298, 653,
	300, 653,
	301, 653,
	302, 653,
	303, 653,
	306, 653,
	307, 653,
	308, 653,
	309, 653,
	311, 653,
	313, 653,
	314, 653,
	315, 653,
	316, 653,
	317, 653,
	318, 653,
	321, 653,
	326, 653,
	327, 653,
	328, 653,
	329, 653,
	330, 653,
	-2, 0,
	-1, 114,
	102, 626,
	111, 626,
	151, 626,
	170, 626,
	195, 626,
	201, 626,
	304, 626,
	-2, 619,
	-1, 118,
	1, 555,
	155, 555,
	220, 555,
	224, 555,
	354, 555,
	355, 555,
	-2, 0,
	-1, 120,
	1, 555,
	354, 555,
	355, 555,
	-2, 0,
	-1, 121,
	1, 555,
	354, 555,
	355, 555,
	-2, 0,
	-1, 122,
	1, 559,
	354, 559,
	355, 559,
	-2, 0,
	-1, 126,
	4, 659,
	5, 659,
	6, 659,
	7, 659,
	8, 659,
	9, 659,
	20, 659,
	21, 659,
	23, 659,
	28, 659,
	29, 659,
	33, 659,
	34, 659,
	35, 659,
	36, 659,
	37, 659,
	38, 659,
	39, 659,
	40, 659,
	41, 659,
	42, 659,
	44, 659,
	45, 659,
	46, 659,
	47, 659,
	48, 659,
	49, 659,
	50, 659,
	51, 659,
	52, 659,
	53, 659,
	55, 659,
	56, 659,
	58, 659,
	60, 659,
	61, 659,
	62, 659,
	64, 659,
	66, 659,
	67, 659,
	68, 659,
	70, 659,
	71, 659,
	72, 659,
	74, 659,
	75, 659,
	76, 659,
	78, 659,
	79, 659,
	80, 659,
	81, 659,
	82, 659,
	83, 659,
	84, 659,
	85, 659,
	86, 659,
	87, 659,
	89, 659,
	91, 659,
	93, 659,
	96, 659,
	97, 659,
	99, 659,
	103, 659,
	104, 659,
	105, 659,
	106, 659,
	107, 659,
	108, 659,
	109, 659,
	112, 659,
	113, 659,
	114, 659,
	115, 659,
	116, 659,
	118, 659,
	120, 659,
	123, 659,
	125, 659,
	126, 659,
	128, 659,
	130, 659,
	131, 659,
	132, 659,
	133, 659,
	134, 659,
	135, 659,
	136, 659,
	138, 659,
	140, 659,
	142, 659,
	143, 659,
	144, 659,
	145, 659,
	146, 659,
	147, 659,
	148, 659,
	149, 659,
	150, 659,
	152, 659,
	154, 659,
	155, 659,
	156, 659,
	157, 659,
	158, 659,
	159, 659,
	160, 659,
	161, 659,
	163, 659,
	164, 659,
	166, 659,
	167, 659,
	168, 659,
	169, 659,
	171, 659,
	174, 659,
	176, 659,
	177, 659,
	178, 659,
	179, 659,
	180, 659,
	181, 659,
	182, 659,
	183, 659,
	184, 659,
	185, 659,
	186, 659,
	187, 659,
	189, 659,
	190, 659,
	191, 659,
	192, 659,
	193, 659,
	194, 659,
	196, 659,
	199, 659,
	202, 659,
	203, 659,
	204, 659,
	205, 659,
	206, 659,
	207, 659,
	208, 659,
	209, 659,
	210, 659,
	211, 659,
	212, 659,
	214, 659,
	215, 659,
	216, 659,
	217, 659,
	218, 659,
	220, 659,
	221, 659,
	222, 659,
	223, 659,
	224, 659,
	225, 659,
	226, 659,
	227, 659,
	229, 659,
	230, 659,
	231, 659,
	232, 659,
	233, 659,
	234, 659,
	235, 659,
	236, 659,
	237, 659,
	238, 659,
	239, 659,
	240, 659,
	242, 659,
	243, 659,
	244, 659,
	245, 659,
	246, 659,
	247, 659,
	249, 659,
	250, 659,
	251, 659,
	252, 659,
	254, 659,
	255, 659,
	256, 659,
	257, 659,
	258, 659,
	259, 659,
	260, 659,
	261, 659,
	262, 659,
	263, 659,
	264, 659,
	265, 659,
	266, 659,
	267, 659,
	268, 659,
	270, 659,
	271, 659,
	272, 659,
	273, 659,
	274, 659,
	275, 659,
	276, 659,
	277, 659,
	278, 659,
	280, 659,
	282, 659,
	283, 659,
	284, 659,
	285, 659,
	286, 659,
	287, 659,
	288, 659,
	290, 659,
	291, 659,
	292, 659,
	295, 659,
	296, 659,
	297, 659,
	298, 659,
	299, 659,
	300, 659,
	301, 659,
	302, 659,
	303, 659,
	306, 659,
	307, 659,
	308, 659,
	309, 659,
	310, 659,
	311, 659,
	313, 659,
	314, 659,
	315, 659,
	316, 659,
	317, 659,
	318, 659,
	321, 659,
	326, 659,
	327, 659,
	328, 659,
	329, 659,
	330, 659,
	331, 659,
	337, 659,
	342, 659,
	343, 659,
	344, 659,
	351, 659,
	357, 659,
	-2, 0,
	-1, 131,
	1, 52,
	355, 52,
	-2, 651,
	-1, 586,
	122, 1245,
	293, 1245,
	336, 1245,
	353, 1245,
	-2, 0,
	-1, 587,
	122, 1199,
	293, 1199,
	336, 1199,
	353, 1199,
	-2, 0,
	-1, 589,
	122, 1303,
	293, 1303,
	336, 1303,
	353, 1303,
	-2, 0,
	-1, 591,
	122, 1324,
	293, 1324,
	336, 1324,
	353, 1324,
	-2, 0,
	-1, 598,
	1, 292,
	354, 292,
	355, 292,
	-2, 1250,
	-1, 624,
	1, 374,
	350, 374,
	352, 374,
	354, 374,
	355, 374,
	-2, 0,
	-1, 625,
	1, 422,
	119, 422,
	350, 422,
	352, 422,
	354, 422,
	355, 422,
	-2, 0,
	-1, 631,
	1, 388,
	350, 388,
	352, 388,
	354, 388,
	355, 388,
	-2, 0,
	-1, 633,
	1, 392,
	350, 392,
	352, 392,
	354, 392,
	355, 392,
	-2, 0,
	-1, 636,
	1, 400,
	350, 400,
	352, 400,
	354, 400,
	355, 400,
	-2, 0,
	-1, 637,
	1, 405,
	350, 405,
	352, 405,
	354, 405,
	355, 405,
	-2, 0,
	-1, 640,
	1, 415,
	350, 415,
	352, 415,
	354, 415,
	355, 415,
	-2, 0,
	-1, 649,
	111, 661,
	170, 661,
	195, 661,
	-2, 622,
	-1, 652,
	111, 660,
	170, 660,
	195, 660,
	-2, 620,
	-1, 776,
	351, 1177,
	-2, 1170,
	-1, 777,
	351, 1178,
	-2, 1171,
	-1, 783,
	5, 834,
	351, 834,
	-2, 1375,
	-1, 808,
	5, 793,
	-2, 1345,
	-1, 809,
	5, 828,
	351, 828,
	-2, 1347,
	-1, 810,
	5, 803,
	-2, 1348,
	-1, 811,
	5, 802,
	-2, 1349,
	-1, 812,
	5, 828,
	351, 828,
	-2, 1352,
	-1, 813,
	5, 828,
	351, 828,
	-2, 1353,
	-1, 814,
	5, 829,
	-2, 1356,
	-1, 815,
	5, 785,
	-2, 1357,
	-1, 816,
	5, 785,
	-2, 1358,
	-1, 817,
	5, 810,
	-2, 1362,
	-1, 818,
	5, 795,
	-2, 1363,
	-1, 819,
	5, 796,
	-2, 1364,
	-1, 820,
	5, 786,
	-2, 1369,
	-1, 821,
	5, 787,
	-2, 1370,
	-1, 822,
	5, 788,
	-2, 1371,
	-1, 823,
	5, 789,
	-2, 1372,
	-1, 824,
	5, 790,
	-2, 1373,
	-1, 825,
	5, 791,
	-2, 1374,
	-1, 826,
	5, 785,
	-2, 1379,
	-1, 827,
	5, 794,
	-2, 1384,
	-1, 828,
	5, 792,
	-2, 1387,
	-1, 829,
	5, 826,
	351, 826,
	-2, 1389,
	-1, 830,
	5, 830,
	-2, 1392,
	-1, 831,
	5, 832,
	-2, 1393,
	-1, 832,
	5, 825,
	351, 825,
	-2, 1398,
	-1, 850,
	211, 649,
	-2, 499,
	-1, 854,
	197, 1174,
	-2, 0,
	-1, 889,
	1, 201,
	350, 201,
	352, 201,
	354, 201,
	355, 201,
	-2, 625,
	-1, 892,
	4, 1397,
	10, 1397,
	11, 1397,
	13, 1397,
	14, 1397,
	15, 1397,
	16, 1397,
	17, 1397,
	18, 1397,
	20, 1397,
	21, 1397,
	23, 1397,
	26, 1397,
	28, 1397,
	30, 1397,
	33, 1397,
	34, 1397,
	35, 1397,
	36, 1397,
	37, 1397,
	38, 1397,
	39, 1397,
	40, 1397,
	41, 1397,
	42, 1397,
	44, 1397,
	45, 1397,
	46, 1397,
	47, 1397,
	48, 1397,
	51, 1397,
	52, 1397,
	53, 1397,
	55, 1397,
	56, 1397,
	57, 1397,
	60, 1397,
	61, 1397,
	62, 1397,
	63, 1397,
	64, 1397,
	66, 1397,
	67, 1397,
	68, 1397,
	70, 1397,
	71, 1397,
	72, 1397,
	80, 1397,
	81, 1397,
	82, 1397,
	83, 1397,
	84, 1397,
	85, 1397,
	86, 1397,
	87, 1397,
	89, 1397,
	91, 1397,
	93, 1397,
	96, 1397,
	97, 1397,
	99, 1397,
	103, 1397,
	104, 1397,
	105, 1397,
	106, 1397,
	107, 1397,
	108, 1397,
	112, 1397,
	113, 1397,
	114, 1397,
	115, 1397,
	116, 1397,
	117, 1397,
	118, 1397,
	120, 1397,
	123, 1397,
	125, 1397,
	126, 1397,
	128, 1397,
	130, 1397,
	131, 1397,
	132, 1397,
	133, 1397,
	134, 1397,
	135, 1397,
	136, 1397,
	137, 1397,
	138, 1397,
	140, 1397,
	142, 1397,
	143, 1397,
	144, 1397,
	145, 1397,
	146, 1397,
	147, 1397,
	148, 1397,
	149, 1397,
	150, 1397,
	152, 1397,
	154, 1397,
	155, 1397,
	156, 1397,
	157, 1397,
	158, 1397,
	159, 1397,
	160, 1397,
	161, 1397,
	163, 1397,
	164, 1397,
	166, 1397,
	167, 1397,
	168, 1397,
	169, 1397,
	171, 1397,
	174, 1397,
	175, 1397,
	176, 1397,
	177, 1397,
	178, 1397,
	179, 1397,
	180, 1397,
	181, 1397,
	182, 1397,
	183, 1397,
	184, 1397,
	185, 1397,
	186, 1397,
	190, 1397,
	191, 1397,
	192, 1397,
	193, 1397,
	194, 1397,
	196, 1397,
	199, 1397,
	200, 1397,
	202, 1397,
	203, 1397,
	205, 1397,
	207, 1397,
	208, 1397,
	209, 1397,
	210, 1397,
	211, 1397,
	212, 1397,
	214, 1397,
	215, 1397,
	216, 1397,
	217, 1397,
	218, 1397,
	220, 1397,
	221, 1397,
	222, 1397,
	223, 1397,
	224, 1397,
	225, 1397,
	226, 1397,
	227, 1397,
	229, 1397,
	230, 1397,
	231, 1397,
	232, 1397,
	233, 1397,
	234, 1397,
	235, 1397,
	236, 1397,
	237, 1397,
	238, 1397,
	239, 1397,
	240, 1397,
	242, 1397,
	243, 1397,
	244, 1397,
	245, 1397,
	246, 1397,
	247, 1397,
	248, 1397,
	249, 1397,
	250, 1397,
	251, 1397,
	252, 1397,
	254, 1397,
	255, 1397,
	256, 1397,
	257, 1397,
	258, 1397,
	260, 1397,
	261, 1397,
	262, 1397,
	263, 1397,
	264, 1397,
	265, 1397,
	266, 1397,
	267, 1397,
	268, 1397,
	270, 1397,
	271, 1397,
	272, 1397,
	273, 1397,
	274, 1397,
	275, 1397,
	276, 1397,
	277, 1397,
	278, 1397,
	280, 1397,
	282, 1397,
	283, 1397,
	284, 1397,
	285, 1397,
	286, 1397,
	287, 1397,
	288, 1397,
	290, 1397,
	291, 1397,
	292, 1397,
	295, 1397,
	296, 1397,
	297, 1397,
	298, 1397,
	300, 1397,
	301, 1397,
	302, 1397,
	303, 1397,
	306, 1397,
	307, 1397,
	308, 1397,
	309, 1397,
	311, 1397,
	313, 1397,
	314, 1397,
	315, 1397,
	316, 1397,
	317, 1397,
	318, 1397,
	321, 1397,
	326, 1397,
	327, 1397,
	328, 1397,
	329, 1397,
	330, 1397,
	331, 1397,
	332, 1397,
	334, 1397,
	335, 1397,
	336, 1397,
	337, 1397,
	339, 1397,
	340, 1397,
	341, 1397,
	342, 1397,
	343, 1397,
	344, 1397,
	345, 1397,
	346, 1397,
	347, 1397,
	349, 1397,
	352, 1397,
	353, 1397,
	356, 1397,
	357, 1397,
	-2, 0,
	-1, 916,
	122, 1324,
	293, 1324,
	336, 1324,
	353, 1324,
	-2, 0,
	-1, 984,
	111, 660,
	170, 660,
	195, 660,
	-2, 623,
	-1, 1100,
	102, 627,
	111, 627,
	151, 627,
	170, 627,
	195, 627,
	201, 627,
	304, 627,
	-2, 953,
	-1, 1110,
	351, 1154,
	-2, 1142,
	-1, 1127,
	352, 1094,
	-2, 0,
	-1, 1395,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 869,
	-1, 1396,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 870,
	-1, 1397,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 871,
	-1, 1401,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 875,
	-1, 1402,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 876,
	-1, 1403,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 877,
	-1, 1406,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 882,
	-1, 1412,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 884,
	-1, 1414,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 888,
	-1, 1415,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 889,
	-1, 1416,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 890,
	-1, 1417,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 891,
	-1, 1443,
	206, 1036,
	-2, 1039,
	-1, 1485,
	122, 1076,
	351, 1177,
	-2, 1170,
	-1, 1486,
	122, 1077,
	-2, 1341,
	-1, 1487,
	122, 1078,
	-2, 1249,
	-1, 1488,
	122, 1079,
	-2, 1213,
	-1, 1489,
	122, 1080,
	-2, 1230,
	-1, 1490,
	122, 1081,
	-2, 1248,
	-1, 1491,
	122, 1082,
	-2, 1300,
	-1, 1678,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 883,
	-1, 1679,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 885,
	-1, 1684,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 886,
	-1, 1702,
	206, 1035,
	-2, 1038,
	-1, 1871,
	102, 627,
	111, 627,
	151, 627,
	170, 627,
	195, 627,
	201, 627,
	304, 627,
	-2, 720,
	-1, 1913,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 887,
	-1, 1918,
	154, 0,
	-2, 903,
	-1, 1928,
	206, 1037,
	-2, 1040,
	-1, 1970,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 930,
	-1, 1971,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 931,
	-1, 1972,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 932,
	-1, 1976,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 936,
	-1, 1977,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 937,
	-1, 1978,
	13, 0,
	14, 0,
	15, 0,
	334, 0,
	335, 0,
	336, 0,
	-2, 938,
	-1, 2064,
	1, 721,
	70, 721,
	102, 721,
	111, 721,
	123, 721,
	127, 721,
	129, 721,
	142, 721,
	151, 721,
	158, 721,
	167, 721,
	170, 721,
	182, 721,
	195, 721,
	197, 721,
	201, 721,
	241, 721,
	243, 721,
	304, 721,
	312, 721,
	323, 721,
	324, 721,
	333, 721,
	350, 721,
	352, 721,
	354, 721,
	355, 721,
	356, 721,
	-2, 720,
	-1, 2113,
	154, 0,
	-2, 904,
	-1, 2116,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 907,
	-1, 2117,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 909,
	-1, 2232,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 908,
	-1, 2233,
	16, 0,
	17, 0,
	18, 0,
	36, 0,
	136, 0,
	137, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 910,
	-1, 2240,
	154, 0,
	-2, 939,
	-1, 2306,
	154, 0,
	-2, 940,
	-1, 2391,
	36, 0,
	136, 0,
	169, 0,
	264, 0,
	331, 0,
	337, 0,
	-2, 1344,
}

const sqlPrivate = 57344

const sqlLast = 40330

var sqlAct = [...]int{

	777, 2390, 2001, 2374, 2339, 2419, 2376, 2375, 1556, 1564,
	2389, 1156, 2060, 1947, 2264, 1619, 2267, 1884, 2154, 1536,
	653, 2188, 2207, 1869, 767, 2072, 2059, 2011, 2086, 1163,
	456, 1866, 709, 1806, 2175, 775, 753, 1195, 1245, 169,
	1808, 1885, 844, 169, 1540, 1811, 670, 438, 24, 2169,
	69, 169, 2046, 1535, 1768, 1553, 2037, 1635, 1019, 774,
	169, 1628, 1857, 458, 1565, 169, 169, 1012, 1767, 169,
	1539, 1159, 169, 1713, 1441, 1374, 1106, 1835, 1348, 169,
	428, 1339, 1852, 431, 661, 113, 1320, 1615, 1371, 1272,
	920, 1603, 1152, 1514, 1467, 752, 1246, 1451, 747, 1429,
	1025, 1426, 1027, 1176, 673, 1013, 919, 1632, 1137, 1461,
	597, 876, 674, 869, 890, 879, 1141, 1558, 679, 1481,
	1095, 697, 746, 1543, 169, 169, 114, 570, 988, 1328,
	665, 169, 986, 160, 1270, 987, 448, 769, 385, 1170,
	866, 1004, 592, 165, 1630, 113, 1003, 594, 2087, 695,
	992, 574, 2278, 590, 1701, 2279, 1178, 169, 169, 169,
	169, 1178, 1557, 657, 169, 169, 1178, 658, 2416, 115,
	2398, 2386, 1047, 2385, 2085, 1579, 2382, 1579, 2372, 24,
	1047, 2369, 1047, 2356, 733, 1047, 2336, 1585, 2323, 652,
	1047, 1579, 2322, 2320, 2312, 1822, 2308, 1047, 2085, 562,
	1585, 657, 1867, 1850, 2274, 2252, 835, 662, 2275, 2085,
	2249, 2247, 1823, 1372, 1047, 2085, 113, 1738, 1739, 2234,
	2218, 2217, 1705, 1585, 1047, 2085, 714, 2191, 1706, 2140,
	2118, 1579, 37, 1579, 1579, 2115, 1855, 2107, 712, 1585,
	650, 1579, 2105, 2084, 2025, 1704, 1579, 2085, 1534, 618,
	2020, 1579, 720, 714, 1534, 729, 1922, 1795, 1785, 1783,
	1579, 1047, 1786, 1579, 718, 722, 1782, 1781, 1702, 1625,
	1579, 1579, 1579, 1047, 699, 727, 1738, 1739, 47, 1756,
	1757, 1758, 1593, 649, 1372, 1584, 1579, 1578, 1533, 1585,
	1330, 1579, 1534, 1050, 1051, 1044, 1070, 1071, 1072, 1080,
	1081, 1082, 2326, 706, 1335, 707, 58, 1591, 1334, 1073,
	1190, 1591, 1464, 59, 1191, 60, 1053, 1855, 1579, 1084,
	1329, 1844, 1983, 1925, 1744, 1337, 1047, 1050, 1051, 1753,
	1070, 1071, 1072, 1080, 1081, 1082, 1796, 1618, 126, 62,
	1052, 1601, 1254, 1073, 1445, 1008, 1067, 1179, 97, 126,
	1053, 731, 1179, 1084, 899, 676, 1712, 1179, 131, 1465,
	897, 896, 895, 126, 894, 893, 130, 708, 700, 645,
	2088, 644, 643, 616, 1052, 1738, 1739, 130, 615, 614,
	1067, 613, 1754, 1744, 612, 611, 610, 609, 608, 607,
	606, 130, 605, 169, 604, 169, 169, 603, 169, 602,
	1058, 601, 129, 169, 1466, 1463, 600, 585, 584, 169,
	123, 583, 419, 129, 418, 417, 416, 124, 415, 1077,
	1085, 123, 169, 169, 169, 169, 169, 129, 124, 400,
	399, 679, 391, 390, 1058, 389, 116, 1083, 388, 737,
	1864, 1754, 381, 380, 1478, 883, 1822, 116, 154, 660,
	2183, 153, 1075, 1077, 1085, 1755, 37, 152, 1068, 151,
	150, 116, 126, 149, 1184, 148, 1605, 2409, 147, 1177,
	146, 1083, 97, 145, 1304, 144, 143, 142, 141, 1468,
	140, 658, 1744, 1074, 1738, 1739, 1075, 139, 138, 137,
	130, 136, 1068, 135, 134, 133, 132, 1476, 1870, 1474,
	1561, 1276, 47, 848, 714, 934, 852, 2388, 2381, 2344,
	2303, 2250, 2145, 2141, 1755, 2161, 868, 1074, 999, 729,
	1114, 2133, 2132, 2131, 1329, 2127, 129, 2126, 2125, 2124,
	58, 1069, 872, 872, 123, 843, 873, 59, 2064, 60,
	2036, 124, 2029, 891, 1998, 1993, 1992, 1078, 1748, 1740,
	1741, 1742, 1743, 1745, 1746, 1991, 1462, 1933, 1794, 1022,
	116, 1738, 1739, 62, 1798, 1069, 1868, 841, 1790, 1787,
	1775, 1766, 1737, 169, 1734, 1733, 1731, 429, 1589, 1437,
	170, 1078, 1738, 1739, 1718, 1717, 1640, 999, 710, 998,
	169, 1744, 1107, 1162, 1098, 1949, 2357, 2315, 37, 679,
	1750, 1751, 1752, 2302, 2301, 1749, 1747, 1748, 1740, 1741,
	1742, 1743, 1745, 1746, 1076, 2300, 2292, 1064, 1065, 1066,
	1079, 679, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059,
	1060, 2290, 2282, 2270, 2325, 2262, 2242, 2204, 2193, 2142,
	2167, 2148, 2138, 459, 47, 2091, 2051, 169, 1076, 1754,
	2027, 1064, 1065, 1066, 1079, 2009, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 126, 737, 939, 1744, 2160,
	985, 2007, 58, 1780, 2006, 2004, 1917, 1893, 1892, 59,
	1765, 60, 1727, 1726, 1438, 1723, 126, 1698, 930, 1744,
	677, 1614, 1693, 130, 1431, 169, 97, 169, 680, 1613,
	126, 1671, 1666, 1653, 1652, 62, 37, 1740, 1741, 1742,
	1743, 1745, 1746, 1624, 130, 1142, 169, 937, 1145, 1526,
	1472, 1155, 1755, 984, 1149, 1135, 1754, 907, 130, 129,
	1134, 679, 169, 917, 1050, 1051, 1133, 123, 458, 1132,
	1017, 1131, 714, 914, 124, 1130, 1129, 1128, 1127, 1126,
	129, 1125, 47, 1124, 983, 1123, 1122, 1053, 123, 1121,
	1120, 1119, 1118, 1560, 129, 124, 1111, 833, 1048, 1099,
	1016, 935, 123, 1098, 711, 1011, 1653, 939, 913, 124,
	58, 1052, 902, 887, 116, 2400, 2277, 59, 650, 60,
	2180, 2166, 929, 1107, 1477, 2181, 842, 1833, 116, 1755,
	2165, 2120, 658, 2052, 1738, 1739, 995, 996, 1832, 1096,
	1022, 1023, 2280, 62, 1747, 1748, 1740, 1741, 1742, 1743,
	1745, 1746, 1007, 1809, 927, 2164, 1824, 1045, 126, 1372,
	460, 649, 1005, 1870, 1050, 1051, 909, 1147, 97, 1789,
	1260, 1058, 1148, 169, 1788, 1116, 1009, 1475, 1677, 1473,
	926, 1160, 1836, 2170, 1035, 169, 130, 1053, 1557, 1950,
	1709, 169, 1452, 169, 1161, 169, 1113, 928, 1138, 169,
	977, 1818, 1880, 2347, 1033, 1046, 2319, 2406, 1028, 2099,
	1029, 1052, 420, 2407, 1594, 681, 1154, 1050, 1051, 969,
	1841, 1034, 129, 1740, 1741, 1742, 1743, 1745, 1746, 169,
	123, 2228, 692, 690, 679, 688, 169, 124, 2227, 978,
	1053, 1110, 169, 2226, 686, 2225, 1742, 1743, 1745, 1746,
	1908, 1139, 1140, 1028, 1906, 1029, 430, 1167, 679, 679,
	1738, 1739, 683, 1143, 1052, 458, 126, 711, 1153, 1877,
	1291, 1876, 169, 1146, 1722, 1721, 97, 169, 1022, 1720,
	939, 1719, 169, 169, 1030, 169, 714, 169, 1171, 169,
	1171, 169, 424, 927, 130, 1277, 1680, 1582, 868, 1413,
	1261, 1368, 169, 1364, 1362, 656, 1341, 1181, 169, 169,
	1183, 1911, 1904, 1753, 1006, 730, 2110, 1530, 1264, 1263,
	1529, 676, 671, 2026, 1058, 2318, 1384, 405, 1554, 1030,
	129, 1169, 1302, 647, 1172, 1428, 928, 169, 123, 169,
	2209, 680, 169, 2000, 1196, 124, 1028, 1341, 1029, 423,
	1791, 1150, 1943, 1340, 655, 169, 1428, 1301, 2378, 169,
	942, 1327, 1192, 169, 116, 393, 1193, 1744, 169, 1247,
	912, 1895, 2363, 1173, 169, 458, 2413, 1292, 169, 406,
	963, 113, 1278, 458, 1248, 1468, 1281, 1266, 1252, 1249,
	1042, 1616, 1617, 1273, 1265, 2353, 1054, 1055, 1056, 1057,
	1059, 1060, 1267, 1342, 657, 1370, 1041, 1812, 762, 2428,
	1673, 1668, 1360, 1383, 1452, 1285, 1303, 964, 1366, 2354,
	1038, 1664, 1030, 155, 1282, 1754, 1039, 1468, 1036, 2406,
	1286, 1136, 1287, 2295, 1288, 1842, 1289, 1816, 1290, 1233,
	1549, 1353, 1355, 1040, 2379, 397, 1306, 166, 1305, 650,
	1336, 386, 650, 650, 1307, 1296, 1298, 2246, 714, 401,
	1325, 1840, 1435, 714, 1324, 1940, 1239, 1433, 426, 729,
	1358, 1746, 1253, 560, 166, 1363, 1333, 568, 1464, 658,
	573, 1812, 1345, 1154, 658, 1268, 169, 599, 1349, 1369,
	2238, 422, 1316, 169, 908, 1317, 1318, 1093, 1755, 1300,
	2380, 1060, 1031, 158, 169, 382, 169, 654, 169, 680,
	1941, 169, 968, 169, 1449, 169, 169, 169, 169, 2412,
	425, 1178, 679, 694, 577, 1465, 693, 684, 681, 684,
	421, 680, 698, 698, 1896, 1725, 2047, 1577, 685, 386,
	1902, 2063, 578, 408, 407, 1439, 1436, 1031, 1559, 2210,
	1559, 1056, 1057, 1059, 1060, 1352, 684, 657, 2030, 1026,
	159, 2422, 918, 2032, 2377, 386, 386, 725, 386, 2405,
	1466, 1463, 166, 734, 1492, 1050, 1051, 1499, 976, 943,
	2403, 1338, 1682, 950, 2153, 1468, 923, 1233, 1233, 1749,
	1747, 1748, 1740, 1741, 1742, 1743, 1745, 1746, 1053, 1568,
	2429, 1580, 579, 1427, 1551, 113, 905, 458, 1583, 113,
	729, 729, 648, 898, 991, 169, 944, 2411, 1571, 941,
	1563, 872, 1052, 872, 1572, 923, 1573, 1575, 1676, 911,
	1574, 169, 169, 169, 891, 169, 1581, 1602, 414, 1979,
	1031, 680, 1588, 2220, 392, 1468, 1280, 2219, 459, 2433,
	2202, 924, 2287, 1351, 169, 925, 677, 672, 409, 383,
	1939, 169, 458, 1856, 1590, 1879, 1597, 1626, 398, 169,
	169, 169, 1638, 394, 1143, 169, 1146, 1599, 169, 1649,
	1140, 1139, 1058, 395, 169, 169, 169, 169, 169, 449,
	924, 1595, 1637, 169, 925, 169, 681, 2420, 1600, 169,
	2136, 580, 156, 990, 1606, 1645, 1552, 2189, 113, 1434,
	1598, 454, 1179, 1168, 2098, 923, 1860, 450, 681, 1646,
	1517, 2097, 1462, 1639, 1410, 384, 1607, 729, 1609, 1157,
	714, 973, 1980, 2340, 990, 1863, 1189, 1665, 1981, 1350,
	1068, 157, 1610, 1670, 451, 1295, 1612, 1608, 567, 1623,
	2432, 1858, 2421, 1050, 1051, 2012, 1633, 2095, 1255, 1424,
	1861, 2155, 989, 453, 1642, 1627, 1259, 162, 446, 2203,
	1641, 770, 2190, 2423, 1422, 1859, 1053, 1312, 951, 581,
	924, 1655, 2080, 846, 925, 1654, 1622, 991, 1667, 1663,
	2177, 845, 2178, 989, 865, 2042, 974, 2041, 923, 2137,
	1052, 599, 655, 850, 599, 1711, 855, 445, 565, 1257,
	582, 858, 658, 1069, 680, 449, 2081, 386, 559, 863,
	2096, 1258, 854, 2002, 1408, 1411, 2146, 446, 681, 1675,
	599, 599, 386, 880, 734, 460, 1862, 454, 680, 680,
	2038, 1683, 1681, 450, 1418, 459, 1853, 1313, 3, 975,
	410, 834, 1419, 1860, 1420, 2241, 2094, 1407, 1425, 1471,
	1058, 1697, 972, 2200, 2135, 169, 782, 1769, 37, 1916,
	451, 1910, 1863, 452, 449, 169, 1792, 169, 1708, 169,
	443, 32, 169, 1233, 1732, 658, 169, 2201, 2045, 453,
	411, 169, 1692, 169, 1592, 1532, 454, 1861, 442, 31,
	169, 1367, 450, 961, 1797, 2176, 1799, 1054, 1055, 1056,
	1057, 1059, 1060, 169, 47, 2076, 1361, 2077, 1068, 412,
	981, 413, 679, 169, 980, 1800, 903, 455, 1803, 451,
	959, 732, 679, 1770, 1814, 1772, 1773, 1774, 1293, 1820,
	967, 658, 58, 1284, 957, 864, 837, 2079, 453, 59,
	735, 60, 1409, 169, 955, 459, 2082, 1117, 736, 953,
	1793, 947, 564, 459, 1421, 439, 28, 169, 939, 1470,
	862, 1423, 558, 1862, 861, 62, 2373, 1804, 1690, 682,
	716, 906, 971, 1817, 441, 17, 1153, 435, 13, 1801,
	2337, 1069, 1825, 1688, 2069, 1153, 437, 16, 599, 452,
	576, 681, 577, 1900, 1830, 1898, 1826, 1827, 1891, 1828,
	1878, 1805, 32, 1555, 1838, 1839, 1548, 658, 1837, 1890,
	578, 1843, 1187, 960, 1872, 681, 681, 1186, 1845, 1846,
	31, 1807, 460, 2078, 1185, 1848, 436, 14, 1851, 113,
	434, 12, 1865, 1889, 440, 10, 113, 1854, 1849, 740,
	958, 1875, 1182, 455, 1180, 386, 169, 966, 452, 1043,
	1882, 1919, 1633, 1685, 956, 1935, 1936, 1937, 1037, 433,
	8, 432, 4, 1686, 954, 1233, 1903, 1691, 1032, 952,
	579, 946, 1909, 1061, 1062, 1054, 1055, 1056, 1057, 1059,
	1060, 1930, 2257, 1899, 860, 1901, 1620, 28, 126, 993,
	687, 689, 680, 573, 2407, 698, 1926, 1275, 97, 1341,
	703, 1874, 455, 1929, 444, 1356, 17, 1341, 2259, 13,
	738, 839, 1233, 1354, 386, 1357, 130, 169, 16, 169,
	704, 1951, 2019, 2297, 1956, 1953, 169, 1050, 1051, 679,
	166, 2088, 460, 2008, 1958, 1942, 1944, 1945, 945, 2305,
	460, 2039, 1986, 169, 169, 997, 1365, 1621, 2005, 1359,
	2021, 2327, 129, 2151, 1562, 1550, 1587, 1987, 14, 1547,
	123, 994, 12, 1326, 1251, 169, 10, 124, 2013, 580,
	1194, 458, 566, 1687, 1052, 2014, 169, 459, 2426, 169,
	1689, 2018, 2431, 1738, 1739, 2034, 116, 2003, 458, 2371,
	169, 8, 705, 4, 169, 2330, 1856, 169, 169, 169,
	2016, 2035, 2015, 2024, 2186, 2023, 2028, 2022, 1050, 1051,
	2053, 1001, 1000, 1999, 169, 836, 1946, 1001, 2054, 169,
	1233, 169, 1834, 169, 169, 169, 1784, 169, 1531, 169,
	2092, 679, 459, 2093, 2048, 2049, 2089, 1891, 1568, 1633,
	1528, 386, 2044, 2068, 658, 575, 1527, 581, 1890, 1860,
	1460, 1872, 2065, 1166, 1104, 1002, 1233, 1233, 2122, 386,
	2366, 386, 2265, 386, 1938, 1233, 1233, 1174, 1863, 2109,
	169, 1633, 1889, 1802, 1633, 2114, 1114, 939, 582, 681,
	1112, 979, 1050, 1051, 1858, 900, 970, 779, 965, 1633,
	962, 904, 948, 1861, 910, 646, 2208, 166, 1233, 447,
	1283, 949, 2182, 2050, 166, 1053, 2352, 2128, 1859, 1724,
	599, 2266, 2237, 1469, 1115, 51, 1887, 756, 2102, 2070,
	2040, 1881, 2106, 2043, 1542, 1541, 461, 169, 169, 1052,
	1262, 2134, 778, 664, 679, 1483, 1376, 838, 1874, 780,
	599, 1199, 2147, 781, 1200, 599, 2149, 2152, 1144, 1891,
	166, 599, 768, 599, 1891, 599, 1197, 599, 888, 599,
	1890, 1566, 169, 169, 460, 1890, 169, 1432, 1450, 1862,
	1294, 2168, 1707, 2156, 169, 1108, 599, 599, 748, 760,
	2157, 2150, 169, 759, 1889, 1375, 1382, 2163, 2162, 1889,
	169, 2158, 169, 1447, 458, 169, 2184, 901, 2187, 1815,
	2185, 2159, 1311, 169, 1611, 573, 1308, 698, 2194, 458,
	734, 1897, 396, 1735, 886, 1506, 1498, 1494, 982, 460,
	1018, 1094, 2212, 386, 2198, 2214, 1567, 1346, 1014, 1014,
	1891, 386, 933, 1821, 2196, 2195, 386, 1586, 1020, 2213,
	1010, 1890, 386, 1319, 1233, 702, 1373, 2211, 701, 1537,
	1154, 931, 1256, 1596, 1087, 2230, 1086, 1633, 1633, 691,
	2289, 1633, 1102, 922, 2236, 1889, 921, 2229, 1088, 1089,
	1090, 1091, 1092, 1158, 169, 1648, 2427, 679, 1101, 2296,
	1894, 169, 2346, 125, 128, 127, 2248, 2324, 1109, 2263,
	1674, 169, 680, 1891, 77, 30, 2243, 29, 2206, 169,
	2258, 96, 680, 95, 1890, 169, 2173, 2174, 94, 93,
	2179, 92, 2256, 91, 169, 169, 2254, 2260, 90, 2251,
	89, 169, 88, 2255, 2223, 2224, 87, 2284, 1889, 2269,
	2291, 2276, 2273, 2283, 86, 2281, 85, 84, 83, 82,
	81, 80, 79, 2285, 595, 76, 169, 169, 75, 74,
	2286, 73, 27, 23, 1538, 100, 22, 2294, 20, 21,
	26, 734, 25, 18, 2293, 15, 9, 169, 19, 2253,
	56, 57, 386, 2313, 1570, 679, 599, 55, 2304, 599,
	169, 599, 54, 386, 386, 1576, 734, 53, 11, 49,
	2311, 169, 48, 46, 1633, 2314, 45, 44, 1188, 43,
	2307, 458, 169, 169, 2317, 7, 99, 40, 39, 6,
	2328, 169, 98, 169, 5, 111, 169, 2329, 458, 108,
	2331, 2316, 2335, 110, 1250, 107, 1233, 109, 2334, 2343,
	112, 2332, 2342, 658, 2358, 104, 105, 2360, 106, 103,
	102, 36, 35, 2272, 34, 33, 2, 169, 2348, 2364,
	169, 1, 0, 2361, 0, 2359, 2362, 2365, 0, 0,
	1891, 2368, 2370, 2367, 1202, 1233, 0, 0, 0, 0,
	0, 1890, 0, 0, 0, 0, 0, 2383, 169, 681,
	0, 1650, 2397, 1604, 169, 2395, 0, 0, 1269, 681,
	0, 0, 2387, 2399, 169, 1889, 0, 2396, 0, 386,
	386, 386, 2402, 386, 2404, 0, 0, 0, 2408, 680,
	0, 2345, 0, 2410, 1738, 1739, 1309, 0, 1314, 0,
	0, 0, 386, 0, 1321, 0, 0, 0, 2418, 386,
	0, 0, 2425, 2424, 0, 0, 0, 386, 1643, 1644,
	2430, 2417, 0, 1346, 1232, 936, 1651, 577, 2434, 0,
	0, 459, 1656, 1657, 1659, 1661, 1662, 0, 0, 1201,
	0, 386, 0, 1669, 0, 578, 0, 1672, 459, 1233,
	0, 757, 70, 0, 0, 0, 0, 0, 0, 1568,
	0, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393,
	1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403,
	1404, 1405, 1406, 0, 1412, 0, 1414, 1415, 1416, 1417,
	1442, 680, 1202, 1202, 1102, 0, 0, 0, 1446, 0,
	0, 1744, 1454, 1440, 0, 579, 0, 0, 0, 0,
	1101, 0, 70, 0, 1484, 1484, 1497, 0, 1509, 1235,
	0, 0, 0, 0, 1521, 1522, 1524, 0, 1479, 1480,
	0, 0, 1496, 0, 1508, 1510, 1515, 1518, 1519, 1520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1650, 0, 0, 1050, 1051, 0, 1754,
	0, 0, 0, 0, 0, 651, 0, 0, 659, 0,
	0, 0, 1232, 1232, 0, 0, 681, 0, 0, 1053,
	0, 2080, 0, 70, 2073, 0, 0, 1201, 1201, 0,
	0, 0, 2071, 0, 680, 0, 2075, 0, 0, 0,
	1831, 0, 0, 1052, 580, 0, 0, 0, 0, 1067,
	0, 0, 0, 386, 0, 2081, 0, 0, 460, 0,
	0, 0, 0, 1166, 0, 1166, 0, 599, 0, 0,
	386, 0, 1755, 0, 1810, 460, 0, 2074, 0, 386,
	0, 1819, 0, 0, 0, 0, 0, 0, 386, 0,
	0, 0, 0, 0, 459, 0, 0, 0, 0, 0,
	0, 1604, 0, 1058, 0, 0, 0, 1235, 1235, 459,
	0, 1604, 0, 0, 1694, 1695, 0, 0, 681, 0,
	0, 0, 581, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 386, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1315, 0, 582, 2076, 386, 2077, 0, 0, 0,
	0, 1068, 0, 1749, 1747, 1748, 1740, 1741, 1742, 1743,
	1745, 1746, 1886, 0, 0, 0, 1014, 680, 0, 0,
	0, 1020, 0, 0, 1375, 1954, 2079, 0, 0, 1761,
	1762, 1763, 0, 1375, 1959, 2082, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 681, 0, 0, 0, 0, 1990, 0, 1202, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 1234, 0,
	0, 0, 0, 0, 1948, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1678, 1679, 0, 0, 0, 0,
	1684, 0, 1696, 0, 0, 0, 0, 0, 0, 1699,
	0, 0, 2078, 0, 0, 680, 0, 0, 0, 0,
	0, 460, 0, 0, 0, 0, 1500, 1715, 1716, 0,
	0, 0, 1703, 0, 0, 0, 460, 0, 0, 1710,
	0, 459, 1714, 0, 0, 0, 0, 0, 1232, 0,
	1198, 0, 0, 0, 0, 1346, 0, 1166, 459, 1728,
	0, 0, 659, 1201, 2010, 1063, 1061, 1062, 1054, 1055,
	1056, 1057, 1059, 1060, 0, 1764, 0, 0, 0, 0,
	0, 386, 386, 0, 0, 0, 0, 1777, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 1515, 1515,
	1515, 0, 0, 2031, 681, 0, 0, 0, 0, 1914,
	1915, 0, 0, 0, 386, 0, 0, 386, 0, 0,
	0, 0, 0, 0, 0, 0, 1234, 1234, 2062, 0,
	0, 0, 386, 0, 0, 2066, 2067, 1346, 0, 0,
	0, 0, 0, 1235, 1813, 0, 0, 0, 0, 0,
	0, 1886, 734, 0, 0, 0, 0, 2100, 0, 2101,
	1202, 386, 2103, 2104, 0, 386, 1829, 2108, 1960, 1961,
	1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971,
	1972, 1973, 1974, 1975, 1976, 1977, 1978, 0, 1982, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1198, 1198,
	1847, 0, 681, 0, 0, 1321, 0, 1202, 2129, 0,
	0, 1050, 1051, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 460, 0,
	0, 0, 0, 0, 1053, 0, 0, 1905, 0, 1883,
	1232, 0, 1907, 0, 0, 460, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1201, 0, 0, 1052, 0,
	0, 0, 0, 1886, 1912, 734, 1538, 1913, 1886, 1923,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1918,
	0, 0, 0, 0, 0, 0, 0, 1232, 1927, 0,
	0, 0, 0, 651, 2222, 0, 1931, 0, 0, 1829,
	386, 386, 1201, 0, 386, 0, 0, 0, 0, 0,
	0, 0, 2062, 0, 0, 1202, 0, 0, 1058, 1955,
	2192, 0, 0, 1957, 0, 0, 1500, 1500, 1346, 0,
	2197, 0, 0, 2199, 0, 1235, 1984, 0, 0, 0,
	0, 386, 0, 0, 1886, 0, 0, 1994, 0, 0,
	0, 1202, 1202, 0, 0, 0, 1988, 1989, 0, 0,
	1202, 1202, 0, 0, 0, 1995, 1996, 1997, 0, 2231,
	0, 0, 0, 1050, 1051, 0, 1068, 0, 0, 0,
	0, 1097, 1235, 1100, 0, 0, 0, 0, 0, 0,
	1105, 0, 0, 1202, 0, 1232, 1053, 0, 0, 1014,
	0, 1500, 1500, 1500, 0, 0, 0, 1886, 0, 0,
	1201, 1020, 386, 0, 0, 0, 0, 0, 0, 734,
	1052, 0, 1234, 0, 0, 0, 0, 0, 0, 2268,
	0, 1232, 1232, 0, 0, 0, 0, 386, 0, 2057,
	1232, 1232, 0, 2062, 0, 0, 1201, 1201, 0, 1069,
	0, 0, 734, 2062, 0, 1201, 1201, 0, 0, 1166,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1232, 0, 2090, 0, 0, 0, 0,
	1058, 0, 0, 0, 2298, 2299, 0, 0, 1201, 0,
	1235, 0, 0, 0, 1198, 0, 0, 0, 0, 0,
	0, 0, 0, 2113, 0, 2310, 0, 2116, 2117, 2205,
	0, 0, 2119, 0, 0, 0, 0, 0, 2321, 2121,
	0, 2123, 0, 0, 0, 0, 1235, 1235, 0, 734,
	0, 0, 0, 0, 0, 1235, 1235, 2130, 1068, 1202,
	2062, 734, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 2341,
	0, 734, 0, 0, 386, 0, 0, 0, 0, 0,
	0, 0, 0, 2240, 0, 0, 0, 0, 1235, 0,
	2139, 0, 0, 0, 1886, 0, 0, 0, 0, 0,
	0, 1500, 1500, 0, 0, 2268, 0, 0, 2062, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 70, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2172, 1069, 0, 0, 1234, 0, 734, 0, 0, 1232,
	0, 0, 386, 0, 651, 2171, 0, 651, 651, 0,
	0, 0, 2401, 0, 1201, 0, 0, 0, 0, 0,
	1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
	1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 0,
	1500, 1234, 2216, 0, 0, 0, 70, 0, 0, 2306,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2221, 0, 1198, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2232, 2233,
	0, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059,
	1060, 0, 0, 0, 1235, 0, 0, 1430, 0, 0,
	0, 1202, 0, 0, 0, 0, 0, 0, 0, 2245,
	659, 0, 0, 1198, 0, 1100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1738, 1739, 0, 1756, 1757,
	1758, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1202, 2112, 0, 0, 2271, 0, 0, 0, 0, 1234,
	0, 0, 0, 0, 1050, 1051, 0, 1070, 1071, 1072,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 0, 0,
	1073, 2288, 0, 0, 0, 0, 0, 1053, 1753, 0,
	1084, 1232, 70, 0, 70, 1234, 1234, 0, 0, 0,
	0, 0, 0, 0, 1234, 1234, 1201, 0, 0, 0,
	0, 1052, 70, 0, 0, 0, 70, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1232, 1198, 0, 0, 0, 0, 0, 1234, 0, 1020,
	0, 0, 1744, 0, 0, 1201, 0, 0, 0, 0,
	0, 0, 0, 0, 1202, 0, 0, 0, 0, 0,
	0, 2349, 2350, 2351, 0, 0, 2355, 1198, 1198, 0,
	0, 1058, 0, 0, 0, 0, 1198, 1198, 0, 1759,
	0, 0, 0, 0, 0, 0, 1235, 0, 0, 0,
	1077, 1085, 0, 0, 0, 0, 0, 0, 0, 0,
	1754, 0, 0, 0, 0, 0, 0, 0, 1083, 1198,
	0, 0, 0, 0, 0, 70, 0, 0, 0, 0,
	0, 0, 0, 1075, 2384, 1235, 0, 0, 0, 1068,
	2394, 2394, 0, 0, 1232, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1201,
	0, 0, 1634, 0, 1074, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2394, 0,
	0, 1500, 0, 1755, 0, 0, 0, 0, 0, 0,
	0, 70, 0, 1234, 0, 1050, 1051, 70, 1070, 1071,
	1072, 1080, 1081, 1082, 0, 0, 0, 0, 0, 0,
	0, 1073, 1069, 2394, 0, 0, 0, 0, 1053, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 1235,
	0, 0, 1052, 1430, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1100, 0, 1198, 0, 0, 0, 1750,
	1751, 1752, 0, 0, 1749, 1747, 1748, 1740, 1741, 1742,
	1743, 1745, 1746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 1064, 1065,
	1066, 1079, 1058, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 0, 0, 0, 0, 0, 0, 0,
	1779, 1077, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1100, 0, 0, 1083,
	0, 1500, 0, 1050, 1051, 0, 1070, 1071, 1072, 1080,
	1081, 1082, 0, 0, 1075, 0, 0, 0, 0, 1073,
	1068, 0, 0, 0, 0, 0, 1053, 0, 0, 1084,
	0, 0, 0, 0, 0, 1234, 0, 0, 0, 70,
	0, 0, 70, 0, 0, 1074, 0, 0, 0, 0,
	1052, 0, 659, 0, 0, 0, 1067, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1738, 1739, 0, 1756,
	1757, 1758, 0, 0, 1234, 0, 0, 0, 0, 0,
	0, 0, 2111, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1198, 0, 1078,
	1058, 0, 0, 0, 0, 0, 70, 0, 0, 1753,
	0, 0, 0, 70, 0, 0, 0, 0, 1871, 1077,
	1085, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1198, 1083, 0, 0,
	0, 1050, 1051, 0, 1070, 1071, 1072, 1080, 1081, 1082,
	0, 0, 1075, 0, 0, 0, 0, 1073, 1068, 0,
	0, 0, 0, 1744, 1053, 0, 1076, 1084, 1234, 1064,
	1065, 1066, 1079, 0, 1063, 1061, 1062, 1054, 1055, 1056,
	1057, 1059, 1060, 1074, 0, 0, 0, 0, 1052, 0,
	0, 1778, 0, 0, 1067, 0, 0, 0, 0, 0,
	1759, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	1051, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0,
	0, 1754, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 1069, 1053, 0, 0, 1084, 0, 0, 0, 0,
	1198, 0, 0, 1050, 1051, 0, 0, 1078, 1058, 1080,
	1081, 1082, 0, 0, 0, 0, 1052, 0, 0, 0,
	1738, 1739, 1067, 1756, 1757, 1758, 1053, 1077, 1085, 1084,
	0, 0, 0, 0, 0, 0, 1921, 0, 0, 0,
	0, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	1052, 0, 0, 0, 1755, 0, 1067, 0, 0, 0,
	1075, 0, 0, 0, 0, 1634, 1068, 0, 0, 0,
	0, 0, 0, 1753, 1076, 0, 1058, 1064, 1065, 1066,
	1079, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059,
	1060, 1074, 0, 0, 0, 1077, 1085, 1634, 0, 1730,
	1634, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1058, 0, 0, 1083, 0, 1871, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1744, 1075, 1077,
	1085, 0, 0, 0, 1068, 0, 0, 0, 0, 1069,
	1750, 1751, 1752, 0, 0, 1749, 1747, 1748, 1740, 1741,
	1742, 1743, 1745, 1746, 0, 1078, 0, 0, 0, 1074,
	0, 0, 1075, 0, 1759, 0, 0, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1754, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1076, 1078, 0, 1064, 1065, 1066, 1079, 0,
	1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0,
	0, 1069, 0, 2338, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1078, 1755, 0,
	0, 0, 70, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1634, 1634, 0, 0, 1634, 0, 0,
	1076, 0, 0, 1064, 1065, 1066, 1079, 0, 1063, 1061,
	1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 0, 0,
	0, 2309, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1076, 0, 0, 0, 0, 0,
	1079, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059,
	1060, 0, 0, 0, 1750, 1751, 1752, 0, 0, 1749,
	1747, 1748, 1740, 1741, 1742, 1743, 1745, 1746, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 70, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2261, 457, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1634, 0, 0, 171, 172, 476, 173, 477, 478, 479,
	480, 324, 481, 482, 483, 484, 174, 175, 176, 325,
	326, 327, 328, 177, 329, 330, 485, 178, 331, 332,
	179, 180, 486, 487, 333, 334, 335, 488, 181, 336,
	489, 462, 490, 182, 183, 184, 0, 185, 491, 186,
	187, 188, 492, 463, 189, 190, 493, 494, 496, 495,
	497, 498, 499, 191, 192, 387, 193, 337, 194, 338,
	339, 500, 195, 501, 196, 502, 197, 503, 504, 198,
	199, 505, 200, 506, 1100, 507, 340, 201, 202, 203,
	341, 342, 508, 509, 510, 204, 205, 343, 344, 345,
	0, 206, 511, 207, 512, 513, 464, 514, 208, 346,
	515, 347, 516, 209, 210, 211, 212, 348, 349, 466,
	517, 216, 518, 213, 519, 465, 214, 350, 215, 351,
	352, 353, 354, 355, 520, 356, 521, 467, 217, 218,
	219, 468, 220, 221, 222, 522, 224, 223, 523, 357,
	469, 225, 470, 524, 226, 525, 526, 227, 0, 228,
	229, 230, 232, 358, 231, 471, 233, 234, 236, 235,
	527, 528, 529, 359, 237, 360, 238, 239, 530, 240,
	531, 532, 241, 533, 534, 242, 361, 472, 243, 473,
	362, 244, 245, 246, 247, 248, 535, 249, 363, 250,
	364, 251, 536, 252, 253, 254, 255, 256, 365, 257,
	258, 537, 259, 260, 261, 262, 263, 265, 266, 264,
	267, 268, 269, 270, 538, 271, 474, 272, 273, 366,
	274, 0, 278, 279, 280, 281, 539, 283, 367, 282,
	284, 285, 540, 286, 275, 276, 287, 475, 288, 368,
	369, 289, 541, 295, 290, 291, 277, 292, 294, 370,
	293, 371, 542, 296, 543, 297, 298, 299, 300, 301,
	302, 303, 544, 372, 373, 374, 545, 546, 304, 305,
	375, 376, 547, 306, 307, 308, 309, 548, 549, 310,
	311, 312, 313, 550, 314, 551, 377, 315, 316, 317,
	378, 379, 552, 553, 318, 554, 555, 556, 557, 319,
	320, 321, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 457, 0, 0, 0,
	0, 0, 2055, 0, 0, 0, 0, 0, 0, 0,
	0, 2056, 171, 172, 476, 173, 477, 478, 479, 480,
	324, 481, 482, 483, 484, 174, 175, 176, 325, 326,
	327, 328, 177, 329, 330, 485, 178, 331, 332, 179,
	180, 486, 487, 333, 334, 335, 488, 181, 336, 489,
	462, 490, 182, 183, 184, 0, 185, 491, 186, 187,
	188, 492, 463, 189, 190, 493, 494, 496, 495, 497,
	498, 499, 191, 192, 387, 193, 337, 194, 338, 339,
	500, 195, 501, 196, 502, 197, 503, 504, 198, 199,
	505, 200, 506, 0, 507, 340, 201, 202, 203, 341,
	342, 508, 509, 510, 204, 205, 343, 344, 345, 0,
	206, 511, 207, 512, 513, 464, 514, 208, 346, 515,
	347, 516, 209, 210, 211, 212, 348, 349, 466, 517,
	216, 518, 213, 519, 465, 214, 350, 215, 351, 352,
	353, 354, 355, 520, 356, 521, 467, 217, 218, 219,
	468, 220, 221, 222, 522, 224, 223, 523, 357, 469,
	225, 470, 524, 226, 525, 526, 227, 0, 228, 229,
	230, 232, 358, 231, 471, 233, 234, 236, 235, 527,
	528, 529, 359, 237, 360, 238, 239, 530, 240, 531,
	532, 241, 533, 534, 242, 361, 472, 243, 473, 362,
	244, 245, 246, 247, 248, 535, 249, 363, 250, 364,
	251, 536, 252, 253, 254, 255, 256, 365, 257, 258,
	537, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 538, 271, 474, 272, 273, 366, 274,
	0, 278, 279, 280, 281, 539, 283, 367, 282, 284,
	285, 540, 286, 275, 276, 287, 475, 288, 368, 369,
	289, 541, 295, 290, 291, 277, 292, 294, 370, 293,
	371, 542, 296, 543, 297, 298, 299, 300, 301, 302,
	303, 544, 372, 373, 374, 545, 546, 304, 305, 375,
	376, 547, 306, 307, 308, 309, 548, 549, 310, 311,
	312, 313, 550, 314, 551, 377, 315, 316, 317, 378,
	379, 552, 553, 318, 554, 555, 556, 557, 319, 320,
	321, 322, 323, 0, 0, 0, 457, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2333, 171, 172, 476, 173, 477, 478, 479, 480,
	324, 481, 482, 483, 484, 174, 175, 176, 325, 326,
	327, 328, 177, 329, 330, 485, 178, 331, 332, 179,
	180, 486, 487, 333, 334, 335, 488, 181, 336, 489,
	462, 490, 182, 183, 184, 0, 185, 491, 186, 187,
	188, 492, 463, 189, 190, 493, 494, 496, 495, 497,
	498, 499, 191, 192, 387, 193, 337, 194, 338, 339,
	500, 195, 501, 196, 502, 197, 503, 504, 198, 199,
	505, 200, 506, 0, 507, 340, 201, 202, 203, 341,
	342, 508, 509, 510, 204, 205, 343, 344, 345, 0,
	206, 511, 207, 512, 513, 464, 514, 208, 346, 515,
	347, 516, 209, 210, 211, 212, 348, 349, 466, 517,
	216, 518, 213, 519, 465, 214, 350, 215, 351, 352,
	353, 354, 355, 520, 356, 521, 467, 217, 218, 219,
	468, 220, 221, 222, 522, 224, 223, 523, 357, 469,
	225, 470, 524, 226, 525, 526, 227, 0, 228, 229,
	230, 232, 358, 231, 471, 233, 234, 236, 235, 527,
	528, 529, 359, 237, 360, 238, 239, 530, 240, 531,
	532, 241, 533, 534, 242, 361, 472, 243, 473, 362,
	244, 245, 246, 247, 248, 535, 249, 363, 250, 364,
	251, 536, 252, 253, 254, 255, 256, 365, 257, 258,
	537, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 538, 271, 474, 272, 273, 366, 274,
	0, 278, 279, 280, 281, 539, 283, 367, 282, 284,
	285, 540, 286, 275, 276, 287, 475, 288, 368, 369,
	289, 541, 295, 290, 291, 277, 292, 294, 370, 293,
	371, 542, 296, 543, 297, 298, 299, 300, 301, 302,
	303, 544, 372, 373, 374, 545, 546, 304, 305, 375,
	376, 547, 306, 307, 308, 309, 548, 549, 310, 311,
	312, 313, 550, 314, 551, 377, 315, 316, 317, 378,
	379, 552, 553, 318, 554, 555, 556, 557, 319, 320,
	321, 322, 323, 457, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1049, 0, 0, 171,
	172, 476, 173, 477, 478, 479, 480, 324, 481, 482,
	483, 484, 174, 175, 176, 325, 326, 327, 328, 177,
	329, 330, 485, 178, 331, 332, 179, 180, 486, 487,
	333, 334, 335, 488, 181, 336, 489, 462, 490, 182,
	183, 184, 0, 185, 491, 186, 187, 188, 492, 463,
	189, 190, 493, 494, 496, 495, 497, 498, 499, 191,
	192, 387, 193, 337, 194, 338, 339, 500, 195, 501,
	196, 502, 197, 503, 504, 198, 199, 505, 200, 506,
	0, 507, 340, 201, 202, 203, 341, 342, 508, 509,
	510, 204, 205, 343, 344, 345, 0, 206, 511, 207,
	512, 513, 464, 514, 208, 346, 515, 347, 516, 209,
	210, 211, 212, 348, 349, 466, 517, 216, 518, 213,
	519, 465, 214, 350, 215, 351, 352, 353, 354, 355,
	520, 356, 521, 467, 217, 218, 219, 468, 220, 221,
	222, 522, 224, 223, 523, 357, 469, 225, 470, 524,
	226, 525, 526, 227, 0, 228, 229, 230, 232, 358,
	231, 471, 233, 234, 236, 235, 527, 528, 529, 359,
	237, 360, 238, 239, 530, 240, 531, 532, 241, 533,
	534, 242, 361, 472, 243, 473, 362, 244, 245, 246,
	247, 248, 535, 249, 363, 250, 364, 251, 536, 252,
	253, 254, 255, 256, 365, 257, 258, 537, 259, 260,
	261, 262, 263, 265, 266, 264, 267, 268, 269, 270,
	538, 271, 474, 272, 273, 366, 274, 0, 278, 279,
	280, 281, 539, 283, 367, 282, 284, 285, 540, 286,
	275, 276, 287, 475, 288, 368, 369, 289, 541, 295,
	290, 291, 277, 292, 294, 370, 293, 371, 542, 296,
	543, 297, 298, 299, 300, 301, 302, 303, 544, 372,
	373, 374, 545, 546, 304, 305, 375, 376, 547, 306,
	307, 308, 309, 548, 549, 310, 311, 312, 313, 550,
	314, 551, 377, 315, 316, 317, 378, 379, 552, 553,
	318, 554, 555, 556, 557, 319, 320, 321, 322, 323,
	1459, 0, 776, 765, 766, 763, 764, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	1456, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 194, 815, 816, 0, 195, 0, 196,
	0, 197, 1457, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	0, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	211, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 1455, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 1458, 776, 765, 766, 763, 764, 755, 751,
	1453, 0, 0, 0, 0, 754, 0, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 0, 793, 758, 0,
	0, 0, 174, 175, 176, 325, 808, 327, 809, 177,
	810, 811, 0, 178, 331, 332, 179, 180, 761, 792,
	812, 813, 335, 0, 181, 804, 0, 784, 0, 182,
	183, 184, 0, 185, 0, 186, 187, 188, 0, 463,
	189, 190, 0, 785, 786, 788, 0, 787, 789, 191,
	192, 387, 193, 814, 194, 815, 816, 1021, 195, 0,
	196, 0, 197, 0, 0, 807, 199, 0, 200, 0,
	0, 0, 749, 201, 202, 203, 794, 795, 772, 0,
	0, 204, 205, 817, 818, 819, 0, 206, 0, 207,
	0, 0, 464, 0, 208, 805, 0, 347, 0, 209,
	210, 211, 212, 801, 803, 466, 0, 216, 0, 213,
	0, 465, 214, 820, 215, 821, 822, 823, 824, 825,
	0, 783, 0, 467, 217, 218, 219, 468, 220, 221,
	222, 0, 224, 223, 0, 806, 469, 225, 470, 0,
	226, 0, 0, 227, 0, 228, 229, 230, 232, 358,
	231, 471, 233, 234, 236, 235, 744, 0, 773, 802,
	237, 826, 238, 239, 0, 240, 0, 0, 241, 0,
	0, 242, 361, 472, 243, 473, 796, 244, 245, 246,
	247, 248, 0, 249, 797, 250, 364, 251, 0, 252,
	253, 254, 255, 256, 827, 257, 258, 0, 259, 260,
	261, 262, 263, 265, 266, 264, 267, 268, 269, 270,
	0, 271, 474, 272, 273, 750, 274, 0, 278, 279,
	280, 281, 126, 283, 367, 282, 284, 285, 790, 286,
	275, 276, 287, 475, 288, 828, 369, 289, 0, 295,
	290, 291, 277, 292, 294, 829, 293, 798, 0, 296,
	130, 297, 298, 299, 300, 301, 302, 303, 0, 372,
	830, 831, 0, 0, 304, 305, 799, 800, 771, 306,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 791,
	314, 0, 377, 315, 316, 317, 892, 832, 0, 0,
	318, 0, 0, 0, 123, 319, 320, 321, 322, 323,
	745, 124, 0, 0, 0, 0, 743, 0, 0, 0,
	0, 741, 742, 0, 0, 0, 0, 0, 0, 0,
	1103, 0, 0, 0, 0, 660, 754, 776, 765, 766,
	763, 764, 755, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	0, 793, 758, 0, 0, 0, 174, 175, 176, 325,
	808, 327, 809, 177, 810, 811, 0, 178, 331, 332,
	179, 180, 761, 792, 812, 813, 335, 0, 181, 804,
	0, 784, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 0, 463, 189, 190, 0, 785, 786, 788,
	0, 787, 789, 191, 192, 387, 193, 814, 194, 815,
	816, 0, 195, 0, 196, 0, 197, 0, 0, 807,
	199, 0, 200, 0, 0, 0, 749, 201, 202, 203,
	794, 795, 772, 0, 0, 204, 205, 817, 818, 819,
	0, 206, 0, 207, 0, 0, 464, 0, 208, 805,
	0, 347, 0, 209, 210, 211, 212, 801, 803, 466,
	0, 216, 0, 213, 0, 465, 214, 820, 215, 821,
	822, 823, 824, 825, 0, 783, 0, 467, 217, 218,
	219, 468, 220, 221, 222, 0, 224, 223, 0, 806,
	469, 225, 470, 0, 226, 0, 0, 227, 0, 228,
	229, 230, 232, 358, 231, 471, 233, 234, 236, 235,
	744, 0, 773, 802, 237, 826, 238, 239, 0, 240,
	0, 0, 241, 0, 0, 242, 361, 472, 243, 473,
	796, 244, 245, 246, 247, 248, 0, 249, 797, 250,
	364, 251, 0, 252, 253, 254, 255, 256, 827, 257,
	258, 0, 259, 260, 261, 262, 263, 265, 266, 264,
	267, 268, 269, 270, 0, 271, 474, 272, 273, 750,
	274, 0, 278, 279, 280, 281, 126, 283, 367, 282,
	284, 285, 790, 286, 275, 276, 287, 475, 288, 828,
	369, 289, 0, 295, 290, 291, 277, 292, 294, 829,
	293, 798, 0, 296, 130, 297, 298, 299, 300, 301,
	302, 303, 0, 372, 830, 831, 0, 0, 304, 305,
	799, 800, 771, 306, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 791, 314, 0, 377, 315, 316, 317,
	892, 832, 0, 0, 318, 0, 0, 0, 123, 319,
	320, 321, 322, 323, 745, 124, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 776, 765, 766,
	763, 764, 755, 0, 1103, 0, 0, 0, 0, 0,
	754, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	0, 793, 758, 0, 0, 0, 174, 175, 176, 325,
	808, 327, 809, 177, 810, 811, 0, 178, 331, 332,
	179, 180, 761, 792, 812, 813, 335, 0, 181, 804,
	0, 784, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 0, 463, 189, 190, 0, 785, 786, 788,
	0, 787, 789, 191, 192, 387, 193, 814, 194, 815,
	816, 0, 195, 0, 196, 0, 197, 0, 0, 807,
	199, 0, 200, 0, 0, 0, 749, 201, 202, 203,
	794, 795, 772, 0, 0, 204, 205, 817, 818, 819,
	0, 206, 0, 207, 0, 0, 464, 0, 208, 805,
	0, 347, 0, 209, 210, 211, 212, 801, 803, 466,
	0, 216, 0, 213, 0, 465, 214, 820, 215, 821,
	822, 823, 824, 825, 0, 783, 0, 467, 217, 218,
	219, 468, 220, 221, 222, 0, 224, 223, 0, 806,
	469, 225, 470, 0, 226, 0, 0, 227, 0, 228,
	229, 230, 232, 358, 231, 471, 233, 234, 236, 235,
	744, 0, 773, 802, 237, 826, 238, 239, 0, 240,
	0, 0, 241, 0, 0, 242, 361, 472, 243, 473,
	796, 244, 245, 246, 247, 248, 0, 249, 797, 250,
	364, 251, 0, 252, 253, 254, 255, 256, 827, 257,
	258, 0, 259, 260, 261, 262, 263, 265, 266, 264,
	267, 268, 269, 270, 0, 271, 474, 272, 273, 750,
	274, 0, 278, 279, 280, 281, 126, 283, 367, 282,
	284, 285, 790, 286, 275, 276, 287, 475, 288, 828,
	369, 289, 0, 295, 290, 291, 277, 292, 294, 829,
	293, 798, 0, 296, 130, 297, 298, 299, 300, 301,
	302, 303, 0, 372, 830, 831, 0, 0, 304, 305,
	799, 800, 771, 306, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 791, 314, 0, 377, 315, 316, 317,
	892, 832, 0, 0, 318, 0, 0, 0, 123, 319,
	320, 321, 322, 323, 745, 124, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 776, 765, 766,
	763, 764, 755, 0, 1103, 0, 0, 0, 0, 0,
	754, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	0, 793, 758, 0, 0, 0, 174, 175, 176, 325,
	808, 327, 809, 177, 810, 811, 1511, 178, 331, 332,
	179, 180, 761, 792, 812, 813, 335, 0, 181, 804,
	0, 784, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 0, 463, 189, 190, 0, 785, 786, 788,
	0, 787, 789, 191, 192, 387, 193, 814, 194, 815,
	816, 0, 195, 0, 196, 0, 197, 0, 0, 807,
	199, 0, 200, 0, 0, 0, 749, 201, 202, 203,
	794, 795, 772, 0, 0, 204, 205, 817, 818, 819,
	0, 206, 0, 207, 0, 1516, 464, 0, 208, 805,
	0, 347, 0, 209, 210, 211, 212, 801, 803, 466,
	0, 216, 0, 213, 0, 465, 214, 820, 215, 821,
	822, 823, 824, 825, 0, 783, 0, 467, 217, 218,
	219, 468, 220, 221, 222, 0, 224, 223, 1512, 806,
	469, 225, 470, 0, 226, 0, 0, 227, 0, 228,
	229, 230, 232, 358, 231, 471, 233, 234, 236, 235,
	744, 0, 773, 802, 237, 826, 238, 239, 0, 240,
	0, 0, 241, 0, 0, 242, 361, 472, 243, 473,
	796, 244, 245, 246, 247, 248, 0, 249, 797, 250,
	364, 251, 0, 252, 253, 254, 255, 256, 827, 257,
	258, 0, 259, 260, 261, 262, 263, 265, 266, 264,
	267, 268, 269, 270, 0, 271, 474, 272, 273, 750,
	274, 0, 278, 279, 280, 281, 0, 283, 367, 282,
	284, 285, 790, 286, 275, 276, 287, 475, 288, 828,
	369, 289, 0, 295, 290, 291, 277, 292, 294, 829,
	293, 798, 0, 296, 0, 297, 298, 299, 300, 301,
	302, 303, 0, 372, 830, 831, 0, 1513, 304, 305,
	799, 800, 771, 306, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 791, 314, 0, 377, 315, 316, 317,
	378, 832, 0, 0, 318, 0, 0, 0, 0, 319,
	320, 321, 322, 323, 745, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 776, 765, 766,
	763, 764, 755, 0, 751, 0, 0, 0, 0, 0,
	754, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	0, 793, 758, 0, 0, 0, 174, 175, 176, 325,
	808, 327, 809, 177, 810, 811, 0, 178, 331, 332,
	179, 180, 761, 792, 812, 813, 335, 0, 181, 804,
	0, 784, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 0, 463, 189, 190, 0, 785, 786, 788,
	0, 787, 789, 191, 192, 387, 193, 814, 194, 815,
	816, 0, 195, 0, 196, 0, 197, 0, 0, 807,
	199, 0, 200, 0, 0, 0, 749, 201, 202, 203,
	794, 795, 772, 0, 0, 204, 205, 817, 818, 819,
	0, 206, 0, 207, 0, 0, 464, 0, 208, 805,
	0, 347, 0, 209, 210, 211, 212, 801, 803, 466,
	0, 216, 0, 213, 0, 465, 214, 820, 215, 821,
	822, 823, 824, 825, 0, 783, 0, 467, 217, 218,
	219, 468, 220, 221, 222, 0, 224, 223, 0, 806,
	469, 225, 470, 0, 226, 0, 0, 227, 0, 228,
	229, 230, 232, 358, 231, 471, 233, 234, 236, 235,
	744, 2017, 773, 802, 237, 826, 238, 239, 0, 240,
	0, 0, 241, 0, 0, 242, 361, 472, 243, 473,
	796, 244, 245, 246, 247, 248, 0, 249, 797, 250,
	364, 251, 0, 252, 253, 254, 255, 256, 827, 257,
	258, 0, 259, 260, 261, 262, 263, 265, 266, 264,
	267, 268, 269, 270, 0, 271, 474, 272, 273, 750,
	274, 0, 278, 279, 280, 281, 0, 283, 367, 282,
	284, 285, 790, 286, 275, 276, 287, 475, 288, 828,
	369, 289, 0, 295, 290, 291, 277, 292, 294, 829,
	293, 798, 0, 296, 0, 297, 298, 299, 300, 301,
	302, 303, 0, 372, 830, 831, 0, 0, 304, 305,
	799, 800, 771, 306, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 791, 314, 0, 377, 315, 316, 317,
	378, 832, 0, 0, 318, 0, 0, 0, 0, 319,
	320, 321, 322, 323, 745, 0, 0, 0, 0, 0,
	743, 0, 0, 0, 0, 741, 742, 1015, 776, 765,
	766, 763, 764, 755, 751, 0, 0, 0, 0, 0,
	754, 0, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 0, 793, 758, 0, 0, 0, 174, 175, 176,
	325, 808, 327, 809, 177, 810, 811, 0, 178, 331,
	332, 179, 180, 761, 792, 812, 813, 335, 0, 181,
	804, 0, 784, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 463, 189, 190, 0, 785, 786,
	788, 0, 787, 789, 191, 192, 387, 193, 814, 194,
	815, 816, 0, 195, 0, 196, 0, 197, 0, 0,
	807, 199, 0, 200, 0, 0, 0, 749, 201, 202,
	203, 794, 795, 772, 0, 0, 204, 205, 817, 818,
	819, 0, 206, 0, 207, 0, 0, 464, 0, 208,
	805, 0, 347, 0, 209, 210, 211, 212, 801, 803,
	466, 0, 216, 1323, 213, 0, 465, 214, 820, 215,
	821, 822, 823, 824, 825, 0, 783, 0, 467, 217,
	218, 219, 468, 220, 221, 222, 0, 224, 223, 0,
	806, 469, 225, 470, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 471, 233, 234, 236,
	235, 744, 0, 773, 802, 237, 826, 238, 239, 0,
	240, 0, 0, 241, 0, 0, 242, 361, 472, 243,
	473, 796, 244, 245, 246, 247, 248, 0, 249, 797,
	250, 364, 251, 1322, 252, 253, 254, 255, 256, 827,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 474, 272, 273,
	750, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 790, 286, 275, 276, 287, 475, 288,
	828, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	829, 293, 798, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 830, 831, 0, 0, 304,
	305, 799, 800, 771, 306, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 791, 314, 0, 377, 315, 316,
	317, 378, 832, 0, 0, 318, 0, 0, 0, 0,
	319, 320, 321, 322, 323, 745, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 741, 742, 776, 765,
	766, 763, 764, 755, 0, 751, 0, 0, 0, 0,
	0, 754, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 0, 793, 758, 0, 0, 0, 174, 175, 176,
	325, 808, 327, 809, 177, 810, 811, 0, 178, 331,
	332, 179, 180, 761, 792, 812, 813, 335, 0, 181,
	804, 0, 784, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 463, 189, 190, 0, 785, 786,
	788, 0, 787, 789, 191, 192, 387, 193, 814, 194,
	815, 816, 0, 195, 0, 196, 0, 197, 0, 0,
	807, 199, 0, 200, 0, 0, 0, 749, 201, 202,
	203, 794, 795, 772, 0, 0, 204, 205, 817, 818,
	819, 0, 206, 0, 207, 0, 0, 464, 0, 208,
	805, 0, 347, 0, 209, 210, 211, 212, 801, 803,
	466, 0, 216, 0, 213, 0, 465, 214, 820, 215,
	821, 822, 823, 824, 825, 0, 783, 0, 467, 217,
	218, 219, 468, 220, 221, 222, 0, 224, 223, 0,
	806, 469, 225, 470, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 471, 233, 234, 236,
	235, 744, 0, 773, 802, 237, 826, 238, 239, 0,
	240, 0, 0, 241, 0, 0, 242, 361, 472, 243,
	473, 796, 244, 245, 246, 247, 248, 0, 249, 797,
	250, 364, 251, 0, 252, 253, 254, 255, 256, 827,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 474, 272, 273,
	750, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 790, 286, 275, 276, 287, 475, 288,
	828, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	829, 293, 798, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 830, 831, 0, 0, 304,
	305, 799, 800, 771, 306, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 791, 314, 0, 377, 315, 316,
	317, 378, 832, 0, 0, 318, 0, 0, 0, 0,
	319, 320, 321, 322, 323, 745, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 741, 742, 0, 0,
	0, 0, 0, 1107, 1448, 751, 0, 0, 0, 0,
	2058, 754, 776, 765, 766, 763, 764, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 194, 815, 816, 0, 195, 0, 196,
	0, 197, 0, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	0, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	211, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 0, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 776, 765, 766, 763, 764, 755, 0, 751,
	0, 0, 0, 0, 0, 754, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 194, 815, 816, 1021, 195, 0, 196,
	0, 197, 0, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	0, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	211, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 0, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 776, 765, 766, 763, 764, 755, 0, 751,
	0, 0, 0, 0, 0, 754, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 194, 815, 816, 0, 195, 0, 196,
	0, 197, 0, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	0, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	211, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 0, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 776, 765, 766, 763, 764, 755, 0, 751,
	1985, 0, 0, 0, 0, 754, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 194, 815, 816, 0, 195, 0, 196,
	0, 197, 0, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	0, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	211, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 1934, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 776, 765, 766, 763, 764, 755, 0, 751,
	0, 0, 0, 0, 0, 754, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 194, 815, 816, 0, 195, 0, 196,
	0, 197, 0, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	0, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	211, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 0, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 776, 765, 766, 763, 764, 755, 0, 751,
	1924, 0, 0, 0, 0, 754, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 194, 815, 816, 0, 195, 0, 196,
	0, 197, 0, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	1516, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	211, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 0, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 776, 765, 766, 763, 764, 755, 0, 751,
	0, 0, 0, 0, 0, 754, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 194, 815, 816, 0, 195, 0, 196,
	0, 197, 0, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	0, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	211, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 0, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 322, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 1015, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 1525, 754, 776, 765, 766, 763,
	764, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 0,
	793, 758, 0, 0, 0, 174, 175, 176, 325, 808,
	327, 809, 177, 810, 811, 0, 178, 331, 332, 179,
	180, 761, 792, 812, 813, 335, 0, 181, 804, 0,
	784, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 0, 463, 189, 190, 0, 785, 786, 788, 0,
	787, 789, 191, 192, 387, 193, 814, 194, 815, 816,
	0, 195, 0, 196, 0, 197, 0, 0, 807, 199,
	0, 200, 0, 0, 0, 749, 201, 202, 203, 794,
	795, 772, 0, 0, 204, 205, 817, 818, 819, 0,
	206, 0, 207, 0, 0, 464, 0, 208, 805, 0,
	347, 0, 209, 210, 211, 212, 801, 803, 466, 0,
	216, 0, 213, 0, 465, 214, 820, 215, 821, 822,
	823, 824, 825, 0, 783, 0, 467, 217, 218, 219,
	468, 220, 221, 222, 0, 224, 223, 0, 806, 469,
	225, 470, 0, 226, 0, 0, 227, 0, 228, 229,
	230, 232, 358, 231, 471, 233, 234, 236, 235, 744,
	0, 773, 802, 237, 826, 238, 239, 0, 240, 0,
	0, 241, 0, 0, 242, 361, 472, 243, 473, 796,
	244, 245, 246, 247, 248, 0, 249, 797, 250, 364,
	251, 0, 252, 253, 254, 255, 256, 827, 257, 258,
	0, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 0, 271, 474, 272, 273, 750, 274,
	0, 278, 279, 280, 281, 0, 283, 367, 282, 284,
	285, 790, 286, 275, 276, 287, 475, 288, 828, 369,
	289, 0, 295, 290, 291, 277, 292, 294, 829, 293,
	798, 0, 296, 0, 297, 298, 299, 300, 301, 302,
	303, 0, 372, 830, 831, 0, 0, 304, 305, 799,
	800, 771, 306, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 791, 314, 0, 377, 315, 316, 317, 378,
	832, 0, 0, 318, 0, 0, 0, 0, 319, 320,
	321, 322, 323, 745, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 1523, 754,
	776, 765, 766, 763, 764, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 0, 793, 758, 0, 0, 0, 174,
	175, 176, 325, 808, 327, 809, 177, 810, 811, 0,
	178, 331, 332, 179, 180, 761, 792, 812, 813, 335,
	0, 181, 804, 0, 784, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 0, 463, 189, 190, 0,
	785, 786, 788, 0, 787, 789, 191, 192, 387, 193,
	814, 194, 815, 816, 0, 195, 0, 196, 0, 197,
	0, 0, 807, 199, 0, 200, 0, 0, 0, 749,
	201, 202, 203, 794, 795, 772, 0, 0, 204, 205,
	817, 818, 819, 0, 206, 0, 207, 0, 0, 464,
	0, 208, 805, 0, 347, 0, 209, 210, 211, 212,
	801, 803, 466, 0, 216, 0, 213, 0, 465, 214,
	820, 215, 821, 822, 823, 824, 825, 0, 783, 0,
	467, 217, 218, 219, 468, 220, 221, 222, 0, 224,
	223, 0, 806, 469, 225, 470, 0, 226, 0, 0,
	227, 0, 228, 229, 230, 232, 358, 231, 471, 233,
	234, 236, 235, 744, 0, 773, 802, 237, 826, 238,
	239, 0, 240, 0, 0, 241, 0, 0, 242, 361,
	472, 243, 473, 796, 244, 245, 246, 247, 248, 0,
	249, 797, 250, 364, 251, 0, 252, 253, 254, 255,
	256, 827, 257, 258, 0, 259, 260, 261, 262, 263,
	265, 266, 264, 267, 268, 269, 270, 0, 271, 474,
	272, 273, 750, 274, 0, 278, 279, 280, 281, 0,
	283, 367, 282, 284, 285, 790, 286, 275, 276, 287,
	475, 288, 828, 369, 289, 0, 295, 290, 291, 277,
	292, 294, 829, 293, 798, 0, 296, 0, 297, 298,
	299, 300, 301, 302, 303, 0, 372, 830, 831, 0,
	0, 304, 305, 799, 800, 771, 306, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 791, 314, 0, 377,
	315, 316, 317, 378, 832, 0, 0, 318, 0, 0,
	0, 0, 319, 320, 321, 322, 323, 745, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 1507, 754, 776, 765, 766, 763, 764, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 793, 758,
	0, 0, 0, 174, 175, 176, 325, 808, 327, 809,
	177, 810, 811, 0, 178, 331, 332, 179, 180, 761,
	792, 812, 813, 335, 0, 181, 804, 0, 784, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 785, 786, 788, 0, 787, 789,
	191, 192, 387, 193, 814, 194, 815, 816, 0, 195,
	0, 196, 0, 197, 0, 0, 807, 199, 0, 200,
	0, 0, 0, 749, 201, 202, 203, 794, 795, 772,
	0, 0, 204, 205, 817, 818, 819, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 805, 0, 347, 0,
	209, 210, 211, 212, 801, 803, 466, 0, 216, 0,
	213, 0, 465, 214, 820, 215, 821, 822, 823, 824,
	825, 0, 783, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 806, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 744, 0, 773,
	802, 237, 826, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 796, 244, 245,
	246, 247, 248, 0, 249, 797, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 827, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 750, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 790,
	286, 275, 276, 287, 475, 288, 828, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 829, 293, 798, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 830, 831, 0, 0, 304, 305, 799, 800, 771,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	791, 314, 0, 377, 315, 316, 317, 378, 832, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 745, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 741, 742, 0, 0, 0, 0, 0, 0,
	0, 751, 0, 0, 0, 0, 1495, 754, 776, 765,
	766, 763, 764, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 0, 793, 758, 0, 0, 0, 174, 175, 176,
	325, 808, 327, 809, 177, 810, 811, 0, 178, 331,
	332, 179, 180, 761, 792, 812, 813, 335, 0, 181,
	804, 0, 784, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 463, 189, 190, 0, 785, 786,
	788, 0, 787, 789, 191, 192, 387, 193, 814, 194,
	815, 816, 0, 195, 0, 196, 0, 197, 0, 0,
	807, 199, 0, 200, 0, 0, 0, 749, 201, 202,
	203, 794, 795, 772, 0, 0, 204, 205, 817, 818,
	819, 0, 206, 0, 207, 0, 0, 464, 0, 208,
	805, 0, 347, 0, 209, 210, 211, 212, 801, 803,
	466, 0, 216, 0, 213, 0, 465, 214, 820, 215,
	821, 822, 823, 824, 825, 0, 783, 0, 467, 217,
	218, 219, 468, 220, 221, 222, 0, 224, 223, 0,
	806, 469, 225, 470, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 471, 233, 234, 236,
	235, 744, 0, 773, 802, 237, 826, 238, 239, 0,
	240, 0, 0, 241, 0, 0, 242, 361, 472, 243,
	473, 796, 244, 245, 246, 247, 248, 0, 249, 797,
	250, 364, 251, 0, 252, 253, 254, 255, 256, 827,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 474, 272, 273,
	750, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 790, 286, 275, 276, 287, 475, 288,
	828, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	829, 293, 798, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 830, 831, 0, 0, 304,
	305, 799, 800, 771, 306, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 791, 314, 0, 377, 315, 316,
	317, 378, 832, 0, 0, 318, 0, 0, 0, 0,
	319, 320, 321, 322, 323, 745, 0, 0, 0, 0,
	0, 743, 0, 0, 0, 0, 741, 742, 0, 0,
	0, 0, 0, 0, 0, 751, 0, 0, 0, 0,
	1493, 754, 1485, 765, 766, 763, 764, 755, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 793, 758, 0, 0,
	0, 174, 175, 176, 325, 808, 327, 809, 177, 810,
	811, 0, 178, 331, 332, 179, 180, 761, 792, 812,
	813, 335, 0, 181, 804, 0, 784, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 463, 189,
	190, 0, 785, 786, 788, 0, 787, 789, 191, 192,
	387, 193, 814, 1488, 815, 816, 0, 195, 0, 196,
	0, 197, 0, 0, 807, 199, 0, 200, 0, 0,
	0, 749, 201, 202, 203, 794, 795, 772, 0, 0,
	204, 205, 817, 818, 819, 0, 206, 0, 207, 0,
	0, 464, 0, 208, 805, 0, 347, 0, 209, 210,
	1489, 212, 801, 803, 466, 0, 216, 0, 213, 0,
	465, 214, 820, 215, 821, 822, 823, 824, 825, 0,
	783, 0, 467, 217, 218, 219, 468, 220, 221, 222,
	0, 224, 223, 0, 806, 469, 225, 470, 0, 226,
	0, 0, 227, 0, 228, 1490, 1487, 232, 358, 231,
	471, 233, 234, 236, 235, 744, 0, 773, 802, 237,
	826, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 472, 243, 473, 796, 244, 245, 246, 247,
	248, 0, 249, 797, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 827, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 474, 272, 273, 750, 274, 0, 278, 279, 280,
	1491, 0, 283, 367, 282, 284, 285, 790, 286, 275,
	276, 287, 475, 288, 828, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 829, 293, 798, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 830,
	831, 0, 0, 304, 305, 799, 800, 771, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 791, 314,
	0, 377, 315, 316, 317, 378, 832, 0, 0, 318,
	0, 0, 0, 0, 319, 320, 321, 1486, 323, 745,
	0, 0, 0, 0, 0, 743, 0, 0, 0, 0,
	741, 742, 0, 0, 0, 0, 0, 0, 0, 751,
	0, 0, 0, 0, 1482, 754, 1485, 765, 766, 763,
	764, 755, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 0,
	793, 758, 0, 0, 0, 174, 175, 176, 325, 808,
	327, 809, 177, 810, 811, 0, 178, 331, 332, 179,
	180, 761, 792, 812, 813, 335, 0, 181, 804, 0,
	784, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 0, 463, 189, 190, 0, 785, 786, 788, 0,
	787, 789, 191, 192, 387, 193, 814, 1488, 815, 816,
	0, 195, 0, 196, 0, 197, 0, 0, 807, 199,
	0, 200, 0, 0, 0, 749, 201, 202, 203, 794,
	795, 772, 0, 0, 204, 205, 817, 818, 819, 0,
	206, 0, 207, 0, 0, 464, 0, 208, 805, 0,
	347, 0, 209, 210, 1489, 212, 801, 803, 466, 0,
	216, 0, 213, 0, 465, 214, 820, 215, 821, 822,
	823, 824, 825, 0, 783, 0, 467, 217, 218, 219,
	468, 220, 221, 222, 0, 224, 223, 0, 806, 469,
	225, 470, 0, 226, 0, 0, 227, 0, 228, 1490,
	1487, 232, 358, 231, 471, 233, 234, 236, 235, 744,
	0, 773, 802, 237, 826, 238, 239, 0, 240, 0,
	0, 241, 0, 0, 242, 361, 472, 243, 473, 796,
	244, 245, 246, 247, 248, 0, 249, 797, 250, 364,
	251, 0, 252, 253, 254, 255, 256, 827, 257, 258,
	0, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 0, 271, 474, 272, 273, 750, 274,
	0, 278, 279, 280, 1491, 0, 283, 367, 282, 284,
	285, 790, 286, 275, 276, 287, 475, 288, 828, 369,
	289, 0, 295, 290, 291, 277, 292, 294, 829, 293,
	798, 0, 296, 0, 297, 298, 299, 300, 301, 302,
	303, 0, 372, 830, 831, 0, 0, 304, 305, 799,
	800, 771, 306, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 791, 314, 0, 377, 315, 316, 317, 378,
	832, 0, 0, 318, 0, 0, 0, 0, 319, 320,
	321, 1486, 323, 745, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 776, 765, 766, 763,
	764, 755, 0, 751, 0, 0, 0, 0, 0, 754,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 0,
	793, 758, 0, 0, 0, 174, 175, 176, 325, 808,
	327, 809, 177, 810, 811, 0, 178, 331, 332, 179,
	180, 761, 792, 812, 813, 335, 0, 181, 804, 0,
	784, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 0, 463, 189, 190, 0, 785, 786, 788, 0,
	787, 789, 191, 192, 387, 193, 814, 194, 815, 816,
	0, 195, 0, 196, 0, 197, 0, 0, 807, 199,
	0, 200, 0, 0, 0, 749, 201, 202, 203, 794,
	795, 772, 0, 0, 204, 205, 817, 818, 819, 0,
	206, 0, 207, 0, 0, 464, 0, 208, 805, 0,
	347, 0, 209, 210, 211, 212, 801, 803, 466, 0,
	216, 0, 213, 0, 465, 214, 820, 215, 821, 822,
	823, 824, 825, 0, 783, 0, 467, 217, 218, 219,
	468, 220, 221, 222, 0, 224, 223, 0, 806, 469,
	225, 470, 0, 226, 0, 0, 227, 0, 228, 229,
	230, 232, 358, 231, 471, 233, 234, 236, 235, 744,
	0, 773, 802, 237, 826, 238, 239, 0, 240, 0,
	0, 241, 0, 0, 242, 361, 472, 243, 473, 796,
	244, 245, 246, 247, 248, 0, 249, 797, 250, 364,
	251, 0, 252, 253, 254, 255, 256, 827, 257, 258,
	0, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 0, 271, 474, 272, 273, 750, 274,
	0, 278, 279, 280, 281, 0, 283, 367, 282, 284,
	285, 790, 286, 275, 276, 287, 475, 288, 828, 369,
	289, 0, 295, 290, 291, 277, 292, 294, 829, 293,
	798, 0, 296, 0, 297, 298, 299, 300, 301, 302,
	303, 0, 372, 830, 831, 0, 0, 304, 305, 799,
	800, 771, 306, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 791, 314, 0, 377, 315, 316, 317, 378,
	832, 0, 0, 318, 0, 0, 0, 0, 319, 320,
	321, 322, 323, 745, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 776, 765, 766, 763,
	764, 755, 0, 751, 1443, 0, 0, 0, 0, 754,
	0, 0, 171, 172, 1310, 173, 0, 0, 0, 0,
	793, 758, 0, 0, 0, 174, 175, 176, 325, 808,
	327, 809, 177, 810, 811, 0, 178, 331, 332, 179,
	180, 761, 792, 812, 813, 335, 0, 181, 804, 0,
	784, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 0, 463, 189, 190, 0, 785, 786, 788, 0,
	787, 789, 191, 192, 387, 193, 814, 194, 815, 816,
	0, 195, 0, 196, 0, 197, 0, 0, 807, 199,
	0, 200, 0, 0, 0, 749, 201, 202, 203, 794,
	795, 772, 0, 0, 204, 205, 817, 818, 819, 0,
	206, 0, 207, 0, 0, 464, 0, 208, 805, 0,
	347, 0, 209, 210, 211, 212, 801, 803, 466, 0,
	216, 0, 213, 0, 465, 214, 820, 215, 821, 822,
	823, 824, 825, 0, 783, 0, 467, 217, 218, 219,
	468, 220, 221, 222, 0, 224, 223, 0, 806, 469,
	225, 470, 0, 226, 0, 0, 227, 0, 228, 229,
	230, 232, 358, 231, 471, 233, 234, 236, 235, 744,
	0, 773, 802, 237, 826, 238, 239, 0, 240, 0,
	0, 241, 0, 0, 242, 361, 472, 243, 473, 796,
	244, 245, 246, 247, 248, 0, 249, 797, 250, 364,
	251, 0, 252, 253, 254, 255, 256, 827, 257, 258,
	0, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 0, 271, 474, 272, 273, 750, 274,
	0, 278, 279, 280, 281, 0, 283, 367, 282, 284,
	285, 790, 286, 275, 276, 287, 475, 288, 828, 369,
	289, 0, 295, 290, 291, 277, 292, 294, 829, 293,
	798, 0, 296, 0, 297, 298, 299, 300, 301, 302,
	303, 0, 372, 830, 831, 0, 0, 304, 305, 799,
	800, 771, 306, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 791, 314, 0, 377, 315, 316, 317, 378,
	832, 0, 0, 318, 0, 0, 0, 0, 319, 320,
	321, 322, 323, 745, 0, 0, 0, 0, 0, 743,
	0, 0, 0, 0, 741, 742, 0, 0, 0, 0,
	0, 0, 0, 751, 0, 0, 0, 0, 840, 754,
	776, 765, 766, 763, 764, 755, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 0, 793, 758, 0, 0, 0, 174,
	175, 176, 325, 808, 327, 809, 177, 810, 811, 0,
	178, 331, 332, 179, 180, 761, 792, 812, 813, 335,
	0, 181, 804, 0, 784, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 0, 463, 189, 190, 0,
	785, 786, 788, 0, 787, 789, 191, 192, 387, 193,
	814, 194, 815, 816, 0, 195, 0, 196, 0, 197,
	0, 0, 807, 199, 0, 200, 0, 0, 0, 749,
	201, 202, 203, 794, 795, 772, 0, 0, 204, 205,
	817, 818, 819, 0, 206, 0, 207, 0, 0, 464,
	0, 208, 805, 0, 347, 0, 209, 210, 211, 212,
	801, 803, 466, 0, 216, 0, 213, 0, 465, 214,
	820, 215, 821, 822, 823, 824, 825, 0, 783, 0,
	467, 217, 218, 219, 468, 220, 221, 222, 0, 224,
	223, 0, 806, 469, 225, 470, 0, 226, 0, 0,
	227, 0, 228, 229, 230, 232, 358, 231, 471, 233,
	234, 236, 235, 744, 0, 773, 802, 237, 826, 238,
	239, 0, 240, 0, 0, 241, 0, 0, 242, 361,
	472, 243, 473, 796, 244, 245, 246, 247, 248, 0,
	249, 797, 250, 364, 251, 0, 252, 253, 254, 255,
	256, 827, 257, 258, 0, 259, 260, 261, 262, 263,
	265, 266, 264, 267, 268, 269, 270, 0, 271, 474,
	272, 273, 750, 274, 0, 278, 279, 280, 281, 0,
	283, 367, 282, 284, 285, 790, 286, 275, 276, 287,
	475, 288, 828, 369, 289, 0, 295, 290, 291, 277,
	292, 294, 829, 293, 798, 0, 296, 0, 297, 298,
	299, 300, 301, 302, 303, 0, 372, 830, 831, 0,
	0, 304, 305, 799, 800, 771, 306, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 791, 314, 0, 377,
	315, 316, 317, 378, 832, 0, 0, 318, 0, 0,
	0, 0, 319, 320, 321, 322, 323, 745, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 741, 742,
	0, 0, 0, 0, 0, 0, 0, 751, 0, 0,
	0, 0, 739, 754, 776, 765, 766, 763, 764, 755,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 793, 758,
	0, 0, 0, 174, 175, 176, 325, 808, 327, 809,
	177, 810, 811, 0, 178, 331, 332, 179, 180, 761,
	792, 812, 813, 335, 0, 181, 804, 0, 784, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 785, 786, 788, 0, 787, 789,
	191, 192, 387, 193, 814, 194, 815, 816, 0, 195,
	0, 196, 0, 197, 0, 0, 807, 199, 0, 200,
	0, 0, 0, 749, 201, 202, 203, 794, 795, 772,
	0, 0, 204, 205, 817, 818, 819, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 805, 0, 347, 0,
	209, 210, 211, 212, 801, 803, 466, 0, 216, 0,
	213, 0, 465, 214, 820, 215, 821, 822, 823, 824,
	825, 0, 783, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 806, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 744, 0, 773,
	802, 237, 826, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 796, 244, 245,
	246, 247, 248, 0, 249, 797, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 827, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 750, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 790,
	286, 275, 276, 287, 475, 288, 828, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 829, 293, 798, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 830, 831, 0, 0, 304, 305, 799, 800, 771,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	791, 314, 0, 377, 315, 316, 317, 378, 832, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 745, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 741, 742, 776, 765, 766, 763, 764, 755,
	0, 751, 0, 0, 0, 0, 0, 754, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 793, 758,
	0, 0, 0, 174, 175, 176, 325, 808, 327, 809,
	177, 810, 811, 0, 178, 331, 332, 179, 180, 761,
	792, 812, 813, 335, 0, 181, 804, 0, 784, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 2393, 0, 785, 786, 788, 0, 787, 789,
	191, 192, 387, 193, 814, 194, 815, 816, 0, 195,
	0, 196, 0, 197, 0, 0, 807, 199, 0, 200,
	0, 0, 0, 749, 201, 202, 203, 794, 795, 772,
	0, 0, 204, 205, 817, 818, 819, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 805, 0, 347, 0,
	209, 210, 211, 212, 801, 803, 466, 0, 216, 0,
	213, 0, 465, 214, 820, 215, 821, 822, 823, 824,
	825, 0, 783, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 806, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 744, 0, 773,
	802, 237, 826, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 796, 244, 245,
	246, 247, 248, 0, 249, 797, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 827, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 750, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 790,
	286, 275, 276, 287, 475, 288, 828, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 829, 293, 798, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 830, 831, 0, 0, 304, 305, 799, 800, 771,
	306, 307, 2392, 309, 0, 0, 310, 311, 312, 313,
	791, 314, 0, 377, 315, 316, 317, 378, 832, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 745, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 741, 742, 776, 765, 766, 763, 764, 755,
	0, 751, 0, 0, 0, 0, 0, 754, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 793, 758,
	0, 0, 0, 174, 175, 176, 2391, 808, 327, 809,
	177, 810, 811, 0, 178, 331, 332, 179, 180, 761,
	792, 812, 813, 335, 0, 181, 804, 0, 784, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 2393, 0, 785, 786, 788, 0, 787, 789,
	191, 192, 387, 193, 814, 194, 815, 816, 0, 195,
	0, 196, 0, 197, 0, 0, 807, 199, 0, 200,
	0, 0, 0, 749, 201, 202, 203, 794, 795, 772,
	0, 0, 204, 205, 817, 818, 819, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 805, 0, 347, 0,
	209, 210, 211, 212, 801, 803, 466, 0, 216, 0,
	213, 0, 465, 214, 820, 215, 821, 822, 823, 824,
	825, 0, 783, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 806, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 744, 0, 773,
	802, 237, 826, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 796, 244, 245,
	246, 247, 248, 0, 249, 797, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 827, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 750, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 790,
	286, 275, 276, 287, 475, 288, 828, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 829, 293, 798, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 830, 831, 0, 0, 304, 305, 799, 800, 771,
	306, 307, 2392, 309, 0, 0, 310, 311, 312, 313,
	791, 314, 0, 377, 315, 316, 317, 378, 832, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 745, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 741, 742, 776, 765, 766, 763, 764, 755,
	0, 751, 0, 0, 0, 0, 0, 754, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 793, 758,
	0, 0, 0, 174, 175, 176, 325, 808, 327, 809,
	177, 810, 811, 0, 178, 331, 332, 179, 180, 761,
	792, 812, 813, 335, 0, 181, 804, 0, 784, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 785, 786, 788, 0, 787, 789,
	191, 192, 387, 193, 814, 194, 815, 816, 0, 195,
	0, 196, 0, 197, 0, 0, 807, 199, 0, 200,
	0, 0, 0, 749, 201, 202, 203, 794, 795, 772,
	0, 0, 204, 205, 817, 818, 819, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 805, 0, 347, 0,
	209, 210, 211, 212, 801, 803, 466, 0, 216, 0,
	213, 0, 465, 214, 820, 215, 821, 822, 823, 824,
	825, 0, 783, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 806, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 744, 0, 773,
	802, 237, 826, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 796, 244, 245,
	246, 247, 248, 0, 249, 797, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 827, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 750, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 790,
	286, 275, 276, 287, 475, 288, 828, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 829, 293, 798, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 830, 831, 0, 0, 304, 305, 799, 800, 771,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	791, 314, 0, 377, 315, 316, 317, 378, 832, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 745, 0, 0, 0, 0, 0, 743, 0, 0,
	0, 0, 741, 742, 776, 765, 766, 763, 764, 755,
	0, 751, 0, 0, 0, 0, 0, 754, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 793, 758,
	0, 0, 0, 174, 175, 176, 325, 808, 327, 809,
	177, 810, 811, 0, 178, 331, 332, 179, 180, 761,
	792, 812, 813, 335, 0, 181, 804, 0, 784, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 785, 786, 788, 0, 787, 789,
	191, 192, 387, 193, 814, 194, 815, 816, 0, 195,
	0, 196, 0, 197, 0, 0, 807, 199, 0, 200,
	0, 0, 0, 749, 201, 202, 203, 794, 795, 772,
	0, 0, 204, 205, 817, 818, 819, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 805, 0, 347, 0,
	209, 210, 211, 212, 801, 803, 466, 0, 216, 0,
	213, 0, 465, 214, 820, 215, 821, 822, 823, 824,
	825, 0, 783, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 806, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 0, 0, 773,
	802, 237, 826, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 796, 244, 245,
	246, 247, 248, 0, 249, 797, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 827, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 1505, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 790,
	286, 275, 276, 287, 475, 288, 828, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 829, 293, 798, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 830, 831, 0, 0, 304, 305, 799, 800, 771,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	791, 314, 0, 377, 315, 316, 317, 378, 832, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 776, 765, 766, 763, 764, 755, 1503, 0, 0,
	0, 0, 1501, 1502, 0, 0, 0, 171, 172, 0,
	173, 1504, 0, 0, 0, 793, 758, 754, 0, 0,
	174, 175, 176, 325, 808, 327, 809, 177, 810, 811,
	0, 178, 331, 332, 179, 180, 0, 792, 812, 813,
	335, 0, 181, 804, 0, 784, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 0, 463, 189, 190,
	0, 785, 786, 788, 0, 787, 789, 191, 192, 387,
	193, 814, 194, 815, 816, 0, 195, 0, 196, 0,
	197, 0, 0, 807, 199, 0, 200, 0, 0, 0,
	340, 201, 202, 203, 794, 795, 772, 0, 0, 204,
	205, 817, 818, 819, 0, 206, 0, 207, 0, 0,
	464, 0, 208, 805, 0, 347, 0, 209, 210, 211,
	212, 801, 803, 466, 0, 216, 0, 213, 0, 465,
	214, 820, 215, 821, 822, 823, 824, 825, 0, 783,
	0, 467, 217, 218, 219, 468, 220, 221, 222, 0,
	224, 223, 0, 806, 469, 225, 470, 0, 226, 0,
	0, 227, 0, 228, 229, 230, 232, 358, 231, 471,
	233, 234, 236, 235, 0, 0, 773, 802, 237, 826,
	238, 239, 0, 240, 0, 0, 241, 0, 0, 242,
	361, 472, 243, 473, 796, 244, 245, 246, 247, 248,
	0, 249, 797, 250, 364, 251, 0, 252, 253, 254,
	255, 256, 827, 257, 258, 0, 259, 260, 261, 262,
	263, 265, 266, 264, 267, 268, 269, 270, 0, 271,
	474, 272, 273, 1505, 274, 0, 278, 279, 280, 281,
	0, 283, 367, 282, 284, 285, 790, 286, 275, 276,
	287, 475, 288, 828, 369, 289, 0, 295, 290, 291,
	277, 292, 294, 829, 293, 798, 0, 296, 0, 297,
	298, 299, 300, 301, 302, 303, 0, 372, 830, 831,
	0, 0, 304, 305, 799, 800, 771, 306, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 791, 314, 0,
	377, 315, 316, 317, 378, 832, 0, 0, 318, 0,
	0, 0, 0, 319, 320, 321, 322, 323, 776, 765,
	766, 763, 764, 755, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 172, 0, 173, 1504, 0,
	0, 0, 793, 758, 754, 0, 0, 174, 175, 176,
	0, 808, 327, 809, 177, 810, 811, 0, 178, 331,
	332, 179, 180, 761, 792, 812, 813, 335, 0, 181,
	804, 0, 784, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 463, 189, 2393, 0, 785, 786,
	788, 0, 787, 789, 191, 192, 387, 193, 814, 194,
	815, 816, 0, 195, 0, 196, 0, 197, 0, 0,
	807, 199, 0, 200, 0, 0, 0, 749, 201, 202,
	203, 794, 795, 772, 0, 0, 204, 205, 817, 818,
	819, 0, 206, 0, 207, 0, 0, 464, 0, 208,
	805, 0, 347, 0, 209, 210, 211, 212, 801, 803,
	0, 0, 216, 0, 213, 0, 465, 214, 820, 215,
	821, 822, 823, 824, 825, 0, 783, 0, 0, 217,
	218, 219, 468, 220, 221, 222, 0, 224, 223, 0,
	806, 469, 225, 0, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 471, 233, 234, 236,
	235, 744, 0, 773, 802, 237, 826, 238, 239, 0,
	240, 0, 0, 241, 0, 0, 242, 361, 472, 243,
	473, 796, 244, 245, 246, 247, 248, 0, 249, 797,
	250, 364, 251, 0, 252, 253, 254, 255, 256, 827,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 474, 272, 273,
	750, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 790, 286, 275, 276, 287, 0, 288,
	828, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	829, 293, 798, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 830, 831, 0, 0, 304,
	305, 799, 800, 771, 306, 307, 2392, 309, 0, 0,
	310, 311, 312, 313, 791, 314, 0, 377, 315, 316,
	317, 378, 832, 0, 0, 318, 0, 0, 0, 0,
	319, 320, 321, 322, 323, 776, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 741, 742, 0, 0,
	0, 171, 172, 0, 173, 751, 0, 0, 0, 793,
	0, 754, 0, 0, 174, 175, 176, 325, 326, 327,
	328, 177, 329, 330, 0, 178, 331, 332, 179, 180,
	0, 792, 333, 334, 335, 0, 181, 804, 0, 784,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	0, 463, 189, 190, 0, 785, 786, 788, 0, 787,
	789, 191, 192, 387, 193, 337, 194, 338, 339, 0,
	195, 0, 196, 0, 197, 0, 0, 198, 199, 0,
	200, 0, 0, 0, 340, 201, 202, 203, 794, 795,
	0, 0, 0, 204, 205, 343, 344, 345, 0, 206,
	0, 207, 0, 0, 464, 0, 208, 805, 0, 347,
	0, 209, 210, 211, 212, 801, 803, 466, 0, 216,
	0, 213, 0, 465, 214, 350, 215, 351, 352, 353,
	354, 355, 0, 356, 0, 467, 217, 218, 219, 468,
	220, 221, 222, 0, 224, 223, 0, 806, 469, 225,
	470, 0, 226, 0, 0, 227, 0, 228, 229, 230,
	232, 358, 231, 471, 233, 234, 236, 235, 0, 0,
	0, 802, 237, 360, 238, 239, 0, 240, 0, 0,
	241, 0, 0, 242, 361, 472, 243, 473, 796, 244,
	245, 246, 247, 248, 0, 249, 797, 250, 364, 251,
	0, 252, 253, 254, 255, 256, 365, 257, 258, 0,
	259, 260, 261, 262, 263, 265, 266, 264, 267, 268,
	269, 270, 0, 271, 474, 272, 273, 366, 274, 0,
	278, 279, 280, 281, 0, 283, 367, 282, 284, 285,
	790, 286, 275, 276, 287, 475, 288, 368, 369, 289,
	0, 295, 290, 291, 277, 292, 294, 370, 293, 798,
	0, 296, 0, 297, 298, 299, 300, 301, 302, 303,
	0, 372, 373, 374, 0, 0, 304, 305, 799, 800,
	0, 306, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 791, 314, 0, 377, 315, 316, 317, 378, 379,
	0, 0, 318, 889, 0, 678, 0, 319, 320, 321,
	322, 323, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 0, 324,
	0, 0, 1888, 0, 174, 175, 176, 325, 326, 327,
	328, 177, 329, 330, 0, 178, 331, 332, 179, 180,
	0, 0, 333, 334, 335, 0, 181, 336, 0, 462,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	0, 463, 189, 190, 0, 0, 0, 0, 0, 0,
	0, 191, 192, 387, 193, 337, 194, 338, 339, 0,
	195, 0, 196, 0, 197, 0, 0, 198, 199, 0,
	200, 0, 0, 0, 340, 201, 202, 203, 341, 342,
	0, 0, 0, 204, 205, 343, 344, 345, 0, 206,
	0, 207, 0, 0, 464, 0, 208, 346, 0, 347,
	0, 209, 210, 211, 212, 348, 349, 466, 0, 216,
	0, 213, 0, 465, 214, 350, 215, 351, 352, 353,
	354, 355, 0, 356, 0, 467, 217, 218, 219, 468,
	220, 221, 222, 0, 224, 223, 0, 357, 469, 225,
	470, 0, 226, 0, 0, 227, 0, 228, 229, 230,
	232, 358, 231, 471, 233, 234, 236, 235, 0, 0,
	0, 359, 237, 360, 238, 239, 0, 240, 0, 0,
	241, 0, 0, 242, 361, 472, 243, 473, 362, 244,
	245, 246, 247, 248, 0, 249, 363, 250, 364, 251,
	0, 252, 253, 254, 255, 256, 365, 257, 258, 0,
	259, 260, 261, 262, 263, 265, 266, 264, 267, 268,
	269, 270, 0, 271, 474, 272, 273, 366, 274, 0,
	278, 279, 280, 281, 126, 283, 367, 282, 284, 285,
	0, 286, 275, 276, 287, 475, 288, 368, 369, 289,
	0, 295, 290, 291, 277, 292, 294, 370, 293, 371,
	0, 296, 130, 297, 298, 299, 300, 301, 302, 303,
	0, 372, 373, 374, 0, 0, 304, 305, 375, 376,
	0, 306, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 314, 0, 377, 315, 316, 317, 892, 379,
	0, 0, 318, 0, 0, 0, 123, 319, 320, 321,
	322, 323, 0, 124, 678, 675, 0, 676, 671, 666,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 116, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 462, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 1274, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 668,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 466, 0, 216, 0,
	213, 0, 465, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 357, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 669, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 475, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 667,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 678, 675, 0, 676, 671, 666, 0, 0, 0,
	0, 0, 677, 672, 0, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 0, 324, 0, 0, 0, 0,
	174, 175, 176, 325, 326, 327, 328, 177, 329, 330,
	0, 178, 331, 332, 179, 180, 0, 0, 333, 334,
	335, 0, 181, 336, 0, 462, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 0, 463, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 387,
	193, 337, 194, 338, 339, 1271, 195, 0, 196, 0,
	197, 0, 0, 198, 199, 0, 200, 0, 0, 0,
	340, 201, 202, 203, 341, 342, 668, 0, 0, 204,
	205, 343, 344, 345, 0, 206, 0, 207, 0, 0,
	464, 0, 208, 346, 0, 347, 0, 209, 210, 211,
	212, 348, 349, 466, 0, 216, 0, 213, 0, 465,
	214, 350, 215, 351, 352, 353, 354, 355, 0, 356,
	0, 467, 217, 218, 219, 468, 220, 221, 222, 0,
	224, 223, 0, 357, 469, 225, 470, 0, 226, 0,
	0, 227, 0, 228, 229, 230, 232, 358, 231, 471,
	233, 234, 236, 235, 0, 0, 0, 359, 237, 360,
	238, 239, 0, 240, 669, 0, 241, 0, 0, 242,
	361, 472, 243, 473, 362, 244, 245, 246, 247, 248,
	0, 249, 363, 250, 364, 251, 0, 252, 253, 254,
	255, 256, 365, 257, 258, 0, 259, 260, 261, 262,
	263, 265, 266, 264, 267, 268, 269, 270, 0, 271,
	474, 272, 273, 366, 274, 0, 278, 279, 280, 281,
	0, 283, 367, 282, 284, 285, 0, 286, 275, 276,
	287, 475, 288, 368, 369, 289, 0, 295, 290, 291,
	277, 292, 294, 370, 293, 371, 0, 296, 0, 297,
	298, 299, 300, 301, 302, 303, 0, 372, 373, 374,
	0, 0, 304, 305, 375, 376, 667, 306, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 314, 0,
	377, 315, 316, 317, 378, 379, 0, 0, 318, 0,
	0, 0, 0, 319, 320, 321, 322, 323, 678, 675,
	0, 676, 671, 666, 0, 0, 0, 0, 0, 677,
	672, 0, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 174, 175, 176,
	325, 326, 327, 328, 177, 329, 330, 0, 178, 331,
	332, 179, 180, 0, 0, 333, 334, 335, 0, 181,
	336, 0, 462, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 463, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 387, 193, 337, 194,
	338, 339, 932, 195, 0, 196, 0, 197, 0, 0,
	198, 199, 0, 200, 0, 0, 0, 340, 201, 202,
	203, 341, 342, 668, 0, 0, 204, 205, 343, 344,
	345, 0, 206, 0, 207, 0, 0, 464, 0, 208,
	346, 0, 347, 0, 209, 210, 211, 212, 348, 349,
	466, 0, 216, 0, 213, 0, 465, 214, 350, 215,
	351, 352, 353, 354, 355, 0, 356, 0, 467, 217,
	218, 219, 468, 220, 221, 222, 0, 224, 223, 0,
	357, 469, 225, 470, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 471, 233, 234, 236,
	235, 0, 0, 0, 359, 237, 360, 238, 239, 0,
	240, 669, 0, 241, 0, 0, 242, 361, 472, 243,
	473, 362, 244, 245, 246, 247, 248, 0, 249, 363,
	250, 364, 251, 0, 252, 253, 254, 255, 256, 365,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 474, 272, 273,
	366, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 0, 286, 275, 276, 287, 475, 288,
	368, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	370, 293, 371, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 373, 374, 0, 0, 304,
	305, 375, 376, 667, 306, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 314, 0, 377, 315, 316,
	317, 378, 379, 0, 0, 318, 0, 0, 0, 0,
	319, 320, 321, 322, 323, 663, 0, 678, 675, 0,
	676, 671, 666, 0, 0, 0, 677, 672, 0, 0,
	0, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 174, 175, 176, 325,
	326, 327, 328, 177, 329, 330, 0, 178, 331, 332,
	179, 180, 0, 0, 333, 334, 335, 0, 181, 336,
	0, 462, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 0, 463, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 191, 192, 387, 193, 337, 194, 338,
	339, 0, 195, 0, 196, 0, 197, 0, 0, 198,
	199, 0, 200, 0, 0, 0, 340, 201, 202, 203,
	341, 342, 668, 0, 0, 204, 205, 343, 344, 345,
	0, 206, 0, 207, 0, 0, 464, 0, 208, 346,
	0, 347, 0, 209, 210, 211, 212, 348, 349, 466,
	0, 216, 0, 213, 0, 465, 214, 350, 215, 351,
	352, 353, 354, 355, 0, 356, 0, 467, 217, 218,
	219, 468, 220, 221, 222, 0, 224, 223, 0, 357,
	469, 225, 470, 0, 226, 0, 0, 227, 0, 228,
	229, 230, 232, 358, 231, 471, 233, 234, 236, 235,
	0, 0, 0, 359, 237, 360, 238, 239, 0, 240,
	669, 0, 241, 0, 0, 242, 361, 472, 243, 473,
	362, 244, 245, 246, 247, 248, 0, 249, 363, 250,
	364, 251, 0, 252, 253, 254, 255, 256, 365, 257,
	258, 0, 259, 260, 261, 262, 263, 265, 266, 264,
	267, 268, 269, 270, 0, 271, 474, 272, 273, 366,
	274, 0, 278, 279, 280, 281, 0, 283, 367, 282,
	284, 285, 0, 286, 275, 276, 287, 475, 288, 368,
	369, 289, 0, 295, 290, 291, 277, 292, 294, 370,
	293, 371, 0, 296, 0, 297, 298, 299, 300, 301,
	302, 303, 0, 372, 373, 374, 0, 0, 304, 305,
	375, 376, 667, 306, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 314, 0, 377, 315, 316, 317,
	378, 379, 0, 0, 318, 0, 0, 0, 0, 319,
	320, 321, 322, 323, 678, 675, 0, 676, 671, 666,
	0, 0, 0, 0, 0, 677, 672, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 462, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 668,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 466, 0, 216, 0,
	213, 0, 465, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 357, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 669, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 475, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 667,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 0,
	660, 318, 168, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	0, 173, 677, 672, 0, 0, 324, 0, 0, 0,
	0, 174, 175, 176, 325, 326, 327, 328, 177, 329,
	330, 0, 178, 331, 332, 179, 180, 0, 0, 333,
	334, 335, 0, 181, 336, 0, 0, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 0, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	387, 193, 337, 194, 338, 339, 0, 195, 0, 196,
	0, 197, 0, 0, 198, 199, 0, 200, 0, 0,
	0, 340, 201, 202, 203, 341, 342, 0, 0, 0,
	204, 205, 343, 344, 345, 0, 206, 0, 207, 0,
	0, 0, 0, 208, 346, 0, 347, 0, 209, 210,
	211, 212, 348, 349, 0, 0, 216, 0, 213, 0,
	0, 214, 350, 215, 351, 352, 353, 354, 355, 0,
	356, 0, 0, 217, 218, 219, 0, 220, 221, 222,
	0, 224, 223, 0, 357, 0, 225, 0, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	0, 233, 234, 236, 235, 0, 0, 0, 359, 237,
	360, 238, 239, 0, 240, 0, 715, 241, 0, 0,
	242, 361, 0, 243, 0, 362, 244, 245, 246, 247,
	248, 0, 249, 363, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 365, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 0, 272, 273, 366, 274, 0, 278, 279, 280,
	281, 126, 283, 367, 282, 284, 285, 0, 286, 275,
	276, 287, 0, 288, 368, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 370, 293, 371, 0, 296, 130,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 373,
	374, 0, 0, 304, 305, 375, 376, 0, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 314,
	0, 377, 315, 316, 317, 892, 379, 0, 0, 318,
	0, 168, 0, 123, 319, 320, 321, 322, 323, 0,
	124, 0, 0, 0, 0, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 0, 324, 0, 1631, 0, 1873,
	174, 175, 176, 325, 326, 327, 328, 177, 329, 330,
	0, 178, 331, 332, 179, 180, 0, 0, 333, 334,
	335, 0, 181, 336, 0, 0, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 0, 0, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 387,
	193, 337, 194, 338, 339, 0, 195, 0, 196, 0,
	197, 0, 0, 198, 199, 0, 200, 0, 0, 0,
	340, 201, 202, 203, 341, 342, 0, 0, 0, 204,
	205, 343, 344, 345, 0, 206, 0, 207, 0, 0,
	0, 0, 208, 346, 0, 347, 0, 209, 210, 211,
	212, 348, 349, 0, 0, 216, 0, 213, 0, 0,
	214, 350, 215, 351, 352, 353, 354, 355, 0, 356,
	0, 0, 217, 218, 219, 0, 220, 221, 222, 0,
	224, 223, 0, 357, 0, 225, 0, 0, 226, 0,
	0, 227, 0, 228, 229, 230, 232, 358, 231, 0,
	233, 234, 236, 235, 0, 0, 0, 359, 237, 360,
	238, 239, 0, 240, 0, 715, 241, 0, 0, 242,
	361, 0, 243, 0, 362, 244, 245, 246, 247, 248,
	0, 249, 363, 250, 364, 251, 0, 252, 253, 254,
	255, 256, 365, 257, 258, 0, 259, 260, 261, 262,
	263, 265, 266, 264, 267, 268, 269, 270, 0, 271,
	0, 272, 273, 366, 274, 0, 278, 279, 280, 281,
	126, 283, 367, 282, 284, 285, 0, 286, 275, 276,
	287, 0, 288, 368, 369, 289, 0, 295, 290, 291,
	277, 292, 294, 370, 293, 371, 0, 296, 130, 297,
	298, 299, 300, 301, 302, 303, 0, 372, 373, 374,
	0, 0, 304, 305, 375, 376, 0, 306, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 314, 0,
	377, 315, 316, 317, 892, 379, 0, 0, 318, 660,
	0, 168, 123, 319, 320, 321, 322, 323, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 0, 324, 1631, 0, 1873, 0,
	174, 175, 176, 325, 326, 327, 328, 177, 329, 330,
	0, 178, 331, 332, 179, 180, 0, 0, 333, 334,
	335, 0, 181, 336, 0, 0, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 0, 0, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 387,
	193, 337, 194, 338, 339, 0, 195, 0, 196, 0,
	197, 0, 0, 198, 199, 0, 200, 0, 0, 0,
	340, 201, 202, 203, 341, 342, 0, 0, 0, 204,
	205, 343, 344, 345, 0, 206, 0, 207, 0, 0,
	0, 0, 208, 346, 0, 347, 0, 209, 210, 211,
	212, 348, 349, 0, 0, 216, 0, 213, 0, 0,
	214, 350, 215, 351, 352, 353, 354, 355, 0, 356,
	0, 0, 217, 218, 219, 0, 220, 221, 222, 0,
	224, 223, 0, 357, 0, 225, 0, 0, 226, 0,
	0, 227, 0, 228, 229, 230, 232, 358, 231, 0,
	233, 234, 236, 235, 0, 0, 0, 359, 237, 360,
	238, 239, 0, 240, 0, 0, 241, 0, 0, 242,
	361, 0, 243, 0, 362, 244, 245, 246, 247, 248,
	0, 249, 363, 250, 364, 251, 0, 252, 253, 254,
	255, 256, 365, 257, 258, 0, 259, 260, 261, 262,
	263, 265, 266, 264, 267, 268, 269, 270, 0, 271,
	0, 272, 273, 366, 274, 0, 278, 279, 280, 281,
	126, 283, 367, 282, 284, 285, 0, 286, 275, 276,
	287, 0, 288, 368, 369, 289, 0, 295, 290, 291,
	277, 292, 294, 370, 293, 371, 0, 296, 130, 297,
	298, 299, 300, 301, 302, 303, 0, 372, 373, 374,
	0, 0, 304, 305, 375, 376, 0, 306, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 314, 0,
	377, 315, 316, 317, 892, 379, 0, 0, 318, 1629,
	0, 168, 123, 319, 320, 321, 322, 323, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 0, 324, 0, 0, 116, 0,
	174, 175, 176, 325, 326, 327, 328, 177, 329, 330,
	0, 178, 331, 332, 179, 180, 0, 0, 333, 334,
	335, 0, 181, 336, 0, 0, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 0, 0, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 387,
	193, 337, 194, 338, 339, 0, 195, 0, 196, 0,
	197, 0, 0, 198, 199, 0, 200, 0, 0, 0,
	340, 201, 202, 203, 341, 342, 0, 0, 0, 204,
	205, 343, 344, 345, 0, 206, 0, 207, 0, 0,
	0, 0, 208, 346, 0, 347, 0, 209, 210, 211,
	212, 348, 349, 0, 0, 216, 0, 213, 0, 0,
	214, 350, 215, 351, 352, 353, 354, 355, 0, 356,
	0, 0, 217, 218, 219, 0, 220, 221, 222, 0,
	224, 223, 0, 357, 0, 225, 0, 0, 226, 0,
	0, 227, 0, 228, 229, 230, 232, 358, 231, 0,
	233, 234, 236, 235, 0, 0, 0, 359, 237, 360,
	238, 239, 0, 240, 0, 715, 241, 0, 0, 242,
	361, 0, 243, 0, 362, 244, 245, 246, 247, 248,
	0, 249, 363, 250, 364, 251, 0, 252, 253, 254,
	255, 256, 365, 257, 258, 0, 259, 260, 261, 262,
	263, 265, 266, 264, 267, 268, 269, 270, 0, 271,
	0, 272, 273, 366, 274, 0, 278, 279, 280, 281,
	0, 283, 367, 282, 284, 285, 0, 286, 275, 276,
	287, 0, 288, 368, 369, 289, 0, 295, 290, 291,
	277, 292, 294, 370, 293, 371, 0, 296, 0, 297,
	298, 299, 300, 301, 302, 303, 0, 372, 373, 374,
	0, 0, 304, 305, 375, 376, 0, 306, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 314, 0,
	377, 315, 316, 317, 378, 379, 0, 0, 318, 0,
	168, 0, 0, 319, 320, 321, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 0, 324, 0, 1631, 0, 1636, 174,
	175, 176, 325, 326, 327, 328, 177, 329, 330, 0,
	178, 331, 332, 179, 180, 0, 0, 333, 334, 335,
	0, 181, 336, 0, 0, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 0, 0, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 387, 193,
	337, 194, 338, 339, 0, 195, 0, 196, 0, 197,
	0, 0, 198, 199, 0, 200, 0, 0, 0, 340,
	201, 202, 203, 341, 342, 0, 0, 0, 204, 205,
	343, 344, 345, 0, 206, 0, 207, 0, 0, 0,
	0, 208, 346, 0, 347, 0, 209, 210, 211, 212,
	348, 349, 0, 0, 216, 0, 213, 0, 0, 214,
	350, 215, 351, 352, 353, 354, 355, 0, 356, 0,
	0, 217, 218, 219, 0, 220, 221, 222, 0, 224,
	223, 0, 357, 0, 225, 0, 0, 226, 0, 0,
	227, 0, 228, 229, 230, 232, 358, 231, 0, 233,
	234, 236, 235, 0, 0, 0, 359, 237, 360, 238,
	239, 0, 240, 0, 715, 241, 0, 0, 242, 361,
	0, 243, 0, 362, 244, 245, 246, 247, 248, 0,
	249, 363, 250, 364, 251, 0, 252, 253, 254, 255,
	256, 365, 257, 258, 0, 259, 260, 261, 262, 263,
	265, 266, 264, 267, 268, 269, 270, 0, 271, 0,
	272, 273, 366, 274, 0, 278, 279, 280, 281, 0,
	283, 367, 282, 284, 285, 0, 286, 275, 276, 287,
	0, 288, 368, 369, 289, 0, 295, 290, 291, 277,
	292, 294, 370, 293, 371, 0, 296, 0, 297, 298,
	299, 300, 301, 302, 303, 0, 372, 373, 374, 0,
	0, 304, 305, 375, 376, 0, 306, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 314, 0, 377,
	315, 316, 317, 378, 379, 0, 0, 318, 0, 168,
	0, 0, 319, 320, 321, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 1631, 0, 1636, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 0, 0, 318, 0, 0, 168,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 1151, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 0, 0, 318, 0, 168, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	0, 0, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 0, 324, 0, 0, 0, 1569, 174, 175, 176,
	325, 326, 327, 328, 177, 329, 330, 0, 178, 331,
	332, 179, 180, 0, 0, 333, 334, 335, 0, 181,
	336, 0, 0, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 0, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 387, 193, 337, 194,
	338, 339, 0, 195, 0, 196, 0, 197, 0, 0,
	198, 199, 0, 200, 0, 0, 0, 340, 201, 202,
	203, 341, 342, 0, 0, 0, 204, 205, 343, 344,
	345, 0, 206, 0, 207, 0, 0, 0, 0, 208,
	346, 0, 347, 0, 209, 210, 211, 212, 348, 349,
	0, 0, 216, 0, 213, 0, 0, 214, 350, 215,
	351, 352, 353, 354, 355, 0, 356, 0, 0, 217,
	218, 219, 0, 220, 221, 222, 0, 224, 223, 0,
	357, 0, 225, 0, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 0, 233, 234, 236,
	235, 0, 0, 0, 359, 237, 360, 238, 239, 0,
	240, 0, 0, 241, 0, 0, 242, 361, 0, 243,
	0, 362, 244, 245, 246, 247, 248, 0, 249, 363,
	250, 364, 251, 0, 252, 253, 254, 255, 256, 365,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 0, 272, 273,
	366, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 0, 286, 275, 276, 287, 0, 288,
	368, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	370, 293, 371, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 373, 374, 0, 0, 304,
	305, 375, 376, 0, 306, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 314, 0, 377, 315, 316,
	317, 378, 379, 0, 0, 318, 0, 168, 0, 0,
	319, 320, 321, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	0, 324, 0, 0, 0, 1949, 174, 175, 176, 325,
	326, 327, 328, 177, 329, 330, 0, 178, 331, 332,
	179, 180, 0, 0, 333, 334, 335, 0, 181, 336,
	0, 0, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 0, 0, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 191, 192, 387, 193, 337, 194, 338,
	339, 0, 195, 0, 196, 0, 197, 0, 0, 198,
	199, 0, 200, 0, 0, 0, 340, 201, 202, 203,
	341, 342, 0, 0, 0, 204, 205, 343, 344, 345,
	0, 206, 0, 207, 0, 0, 0, 0, 208, 346,
	0, 347, 0, 209, 210, 211, 212, 348, 349, 0,
	0, 216, 0, 213, 0, 0, 214, 350, 215, 351,
	352, 353, 354, 355, 0, 356, 0, 0, 217, 218,
	219, 0, 220, 221, 222, 0, 224, 223, 0, 357,
	0, 225, 0, 0, 226, 0, 0, 227, 0, 228,
	229, 230, 232, 358, 231, 0, 233, 234, 236, 235,
	0, 0, 0, 359, 237, 360, 238, 239, 0, 240,
	0, 0, 241, 0, 0, 242, 361, 0, 243, 0,
	362, 244, 245, 246, 247, 248, 0, 249, 363, 250,
	364, 251, 0, 252, 253, 254, 255, 256, 365, 257,
	258, 0, 259, 260, 261, 262, 263, 265, 266, 264,
	267, 268, 269, 270, 0, 271, 0, 272, 273, 366,
	274, 0, 278, 279, 280, 281, 0, 283, 367, 282,
	284, 285, 0, 286, 275, 276, 287, 0, 288, 368,
	369, 289, 0, 295, 290, 291, 277, 292, 294, 370,
	293, 371, 0, 296, 0, 297, 298, 299, 300, 301,
	302, 303, 0, 372, 373, 374, 0, 0, 304, 305,
	375, 376, 0, 306, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 314, 0, 377, 315, 316, 317,
	378, 379, 0, 0, 318, 0, 0, 0, 0, 319,
	320, 321, 322, 323, 776, 765, 766, 763, 764, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 0, 173, 1024, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 808, 327, 809,
	177, 810, 811, 0, 178, 331, 332, 179, 180, 0,
	0, 812, 813, 335, 0, 181, 336, 0, 462, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 814, 194, 815, 816, 0, 195,
	0, 196, 0, 197, 0, 0, 807, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 772,
	0, 0, 204, 205, 817, 818, 819, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 466, 0, 216, 0,
	213, 0, 465, 214, 820, 215, 821, 822, 823, 824,
	825, 0, 783, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 357, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 0, 0, 773,
	359, 237, 826, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 827, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 475, 288, 828, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 829, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 830, 831, 0, 0, 304, 305, 375, 376, 771,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 832, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 938, 0, 678, 675, 0, 0, 0, 940, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 174, 175, 176, 325, 326, 327, 328, 177,
	329, 330, 0, 178, 331, 332, 179, 180, 0, 0,
	333, 334, 335, 0, 181, 336, 0, 462, 0, 182,
	183, 184, 0, 185, 0, 186, 187, 188, 0, 463,
	189, 190, 0, 0, 0, 0, 0, 0, 0, 191,
	192, 387, 193, 337, 194, 338, 339, 0, 195, 0,
	196, 0, 197, 0, 0, 198, 199, 0, 200, 0,
	0, 0, 340, 201, 202, 203, 341, 342, 0, 0,
	0, 204, 205, 343, 344, 345, 0, 206, 0, 207,
	0, 0, 464, 0, 208, 346, 0, 347, 0, 209,
	210, 211, 212, 348, 349, 466, 0, 216, 0, 213,
	0, 465, 214, 350, 215, 351, 352, 353, 354, 355,
	0, 356, 0, 467, 217, 218, 219, 468, 220, 221,
	222, 0, 224, 223, 0, 357, 469, 225, 470, 0,
	226, 0, 0, 227, 0, 228, 229, 230, 232, 358,
	231, 471, 233, 234, 236, 235, 0, 0, 0, 359,
	237, 360, 238, 239, 0, 240, 0, 0, 241, 0,
	0, 242, 361, 472, 243, 473, 362, 244, 245, 246,
	247, 248, 0, 249, 363, 250, 364, 251, 0, 252,
	253, 254, 255, 256, 365, 257, 258, 0, 259, 260,
	261, 262, 263, 265, 266, 264, 267, 268, 269, 270,
	0, 271, 474, 272, 273, 366, 274, 0, 278, 279,
	280, 281, 0, 283, 367, 282, 284, 285, 0, 286,
	275, 276, 287, 475, 288, 368, 369, 289, 0, 295,
	290, 291, 277, 292, 294, 370, 293, 371, 0, 296,
	0, 297, 298, 299, 300, 301, 302, 303, 0, 372,
	373, 374, 0, 0, 304, 305, 375, 376, 0, 306,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	314, 0, 377, 315, 316, 317, 378, 379, 0, 563,
	318, 168, 0, 0, 0, 319, 320, 321, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 0, 324, 0, 0, 0, 0,
	174, 175, 176, 325, 326, 327, 328, 177, 329, 330,
	0, 178, 331, 332, 179, 180, 0, 0, 333, 334,
	335, 0, 181, 336, 0, 0, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 0, 0, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 164,
	193, 337, 194, 338, 339, 0, 195, 0, 196, 0,
	197, 0, 0, 198, 199, 0, 200, 0, 0, 0,
	340, 201, 202, 203, 341, 342, 0, 0, 0, 204,
	205, 343, 344, 345, 0, 206, 0, 207, 0, 0,
	0, 0, 208, 346, 0, 347, 0, 209, 210, 211,
	212, 348, 349, 0, 0, 216, 0, 213, 0, 0,
	214, 350, 215, 351, 352, 353, 354, 355, 0, 356,
	0, 0, 217, 218, 219, 0, 220, 221, 222, 0,
	224, 223, 0, 357, 0, 225, 0, 0, 226, 0,
	0, 227, 0, 228, 229, 230, 232, 358, 231, 0,
	233, 234, 236, 235, 0, 0, 0, 359, 237, 360,
	238, 239, 0, 240, 0, 0, 241, 0, 0, 242,
	361, 0, 243, 0, 362, 244, 245, 246, 247, 248,
	0, 249, 363, 250, 364, 251, 0, 252, 253, 254,
	255, 256, 365, 257, 258, 0, 259, 260, 261, 262,
	263, 265, 266, 264, 267, 268, 269, 270, 0, 271,
	0, 272, 273, 366, 274, 0, 278, 279, 280, 281,
	0, 283, 367, 282, 284, 285, 0, 286, 275, 276,
	287, 0, 288, 368, 369, 289, 0, 295, 290, 291,
	277, 292, 294, 370, 293, 371, 0, 296, 163, 297,
	298, 299, 300, 301, 302, 303, 0, 372, 373, 374,
	0, 0, 304, 305, 375, 376, 0, 306, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 314, 0,
	377, 315, 316, 317, 378, 379, 0, 161, 318, 168,
	0, 0, 0, 319, 320, 321, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 167, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 164, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 163, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 678, 675, 318, 0, 0, 940,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 167,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 462, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 466, 0, 216, 0,
	213, 0, 465, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 357, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 475, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 168,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 164, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 163, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 678, 675, 318, 0, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 167,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 462, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 466, 0, 216, 0,
	213, 0, 465, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 357, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 475, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 168,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 678, 0, 318, 0, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 167,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 462, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	463, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 464, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 466, 0, 216, 0,
	213, 0, 465, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 467, 217, 218, 219, 468, 220,
	221, 222, 0, 224, 223, 0, 357, 469, 225, 470,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 471, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 472, 243, 473, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 474, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 475, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 168,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 1349,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	1347, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 1546, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 1352, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 1544, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 1351, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	1545, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 168, 0, 318, 0, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 1349, 181, 336, 0, 0, 1344,
	182, 183, 184, 0, 185, 1347, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 1352, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 1343, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 1351,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 1350, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 0,
	867, 318, 168, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 174, 175, 176, 325, 326, 327, 328, 177, 329,
	330, 0, 178, 331, 332, 179, 180, 0, 0, 333,
	334, 335, 0, 181, 336, 0, 0, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 0, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	387, 193, 337, 194, 338, 339, 0, 195, 0, 196,
	0, 197, 0, 0, 198, 199, 0, 200, 0, 0,
	0, 340, 201, 202, 203, 341, 342, 0, 0, 0,
	204, 205, 343, 344, 345, 0, 206, 0, 207, 0,
	0, 0, 0, 208, 346, 0, 347, 0, 209, 210,
	211, 212, 348, 349, 0, 0, 216, 0, 213, 0,
	0, 214, 350, 215, 351, 352, 353, 354, 355, 0,
	356, 0, 0, 217, 218, 219, 0, 220, 221, 222,
	0, 224, 223, 0, 357, 0, 225, 0, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	0, 233, 234, 236, 235, 0, 0, 0, 359, 237,
	360, 238, 239, 0, 240, 0, 715, 241, 0, 0,
	242, 361, 0, 243, 0, 362, 244, 245, 246, 247,
	248, 0, 249, 363, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 365, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 0, 272, 273, 366, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 0, 286, 275,
	276, 287, 0, 288, 368, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 370, 293, 371, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 373,
	374, 0, 0, 304, 305, 375, 376, 0, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 314,
	0, 377, 315, 316, 317, 378, 379, 0, 721, 318,
	168, 0, 0, 0, 319, 320, 321, 322, 323, 0,
	0, 0, 0, 0, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 174,
	175, 176, 325, 326, 327, 328, 177, 329, 330, 0,
	178, 331, 332, 179, 180, 0, 0, 333, 334, 335,
	0, 181, 336, 0, 0, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 0, 0, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 387, 193,
	337, 194, 338, 339, 0, 195, 0, 196, 0, 197,
	0, 0, 198, 199, 0, 200, 0, 0, 0, 340,
	201, 202, 203, 341, 342, 0, 0, 0, 204, 205,
	343, 344, 345, 0, 206, 0, 207, 0, 0, 0,
	0, 208, 346, 0, 347, 0, 209, 210, 211, 212,
	723, 349, 0, 0, 216, 0, 213, 0, 0, 214,
	350, 215, 351, 352, 353, 354, 355, 0, 356, 0,
	0, 217, 218, 219, 0, 220, 221, 222, 0, 224,
	223, 0, 357, 0, 225, 0, 0, 226, 0, 0,
	227, 0, 228, 229, 230, 232, 358, 231, 0, 233,
	234, 236, 235, 0, 0, 0, 359, 237, 360, 238,
	239, 0, 240, 0, 715, 241, 0, 0, 242, 361,
	0, 243, 0, 362, 244, 245, 246, 247, 248, 0,
	249, 363, 250, 364, 251, 0, 252, 253, 254, 255,
	256, 365, 257, 258, 0, 259, 260, 261, 262, 263,
	265, 266, 264, 267, 268, 269, 270, 0, 271, 0,
	272, 273, 366, 274, 0, 278, 279, 280, 281, 0,
	283, 367, 282, 284, 285, 0, 286, 275, 276, 287,
	0, 288, 368, 369, 289, 0, 295, 290, 291, 277,
	292, 294, 370, 293, 371, 0, 296, 0, 297, 298,
	299, 300, 301, 302, 303, 0, 372, 373, 374, 0,
	0, 304, 305, 375, 376, 0, 306, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 314, 0, 377,
	315, 316, 317, 378, 379, 0, 717, 318, 168, 0,
	0, 0, 319, 320, 321, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 174, 175, 176,
	325, 326, 327, 328, 177, 329, 330, 0, 178, 331,
	332, 179, 180, 0, 0, 333, 334, 335, 0, 181,
	336, 0, 0, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 0, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 387, 193, 337, 194,
	338, 339, 0, 195, 0, 196, 0, 197, 0, 0,
	198, 199, 0, 200, 0, 0, 0, 340, 201, 202,
	203, 341, 342, 0, 0, 0, 204, 205, 343, 344,
	345, 0, 206, 0, 207, 0, 0, 0, 0, 208,
	346, 0, 347, 0, 209, 210, 211, 212, 719, 349,
	0, 0, 216, 0, 213, 0, 0, 214, 350, 215,
	351, 352, 353, 354, 355, 0, 356, 0, 0, 217,
	218, 219, 0, 220, 221, 222, 0, 224, 223, 0,
	357, 0, 225, 0, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 0, 233, 234, 236,
	235, 0, 0, 0, 359, 237, 360, 238, 239, 0,
	240, 0, 715, 241, 0, 0, 242, 361, 0, 243,
	0, 362, 244, 245, 246, 247, 248, 0, 249, 363,
	250, 364, 251, 0, 252, 253, 254, 255, 256, 365,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 0, 272, 273,
	366, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 0, 286, 275, 276, 287, 0, 288,
	368, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	370, 293, 371, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 373, 374, 0, 0, 304,
	305, 375, 376, 0, 306, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 314, 0, 377, 315, 316,
	317, 378, 379, 0, 713, 318, 168, 0, 0, 0,
	319, 320, 321, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 174, 175, 176, 325, 326,
	327, 328, 177, 329, 330, 0, 178, 331, 332, 179,
	180, 0, 0, 333, 334, 335, 0, 181, 336, 0,
	0, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 0, 0, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 387, 193, 337, 194, 338, 339,
	0, 195, 0, 196, 0, 197, 0, 0, 198, 199,
	0, 200, 0, 0, 0, 340, 201, 202, 203, 341,
	342, 0, 0, 0, 204, 205, 343, 344, 345, 0,
	206, 0, 207, 0, 0, 0, 0, 208, 346, 0,
	347, 0, 209, 210, 211, 212, 348, 349, 0, 0,
	216, 0, 213, 0, 0, 214, 350, 215, 351, 352,
	353, 354, 355, 0, 356, 0, 0, 217, 218, 219,
	0, 220, 221, 222, 0, 224, 223, 0, 357, 0,
	225, 0, 0, 226, 0, 0, 227, 0, 228, 229,
	230, 232, 358, 231, 0, 233, 234, 236, 235, 0,
	0, 0, 359, 237, 360, 238, 239, 0, 240, 0,
	715, 241, 0, 0, 242, 361, 0, 243, 0, 362,
	244, 245, 246, 247, 248, 0, 249, 363, 250, 364,
	251, 0, 252, 253, 254, 255, 256, 365, 257, 258,
	0, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 0, 271, 0, 272, 273, 366, 274,
	0, 278, 279, 280, 281, 0, 283, 367, 282, 284,
	285, 0, 286, 275, 276, 287, 0, 288, 368, 369,
	289, 0, 295, 290, 291, 277, 292, 294, 370, 293,
	371, 0, 296, 0, 297, 298, 299, 300, 301, 302,
	303, 0, 372, 373, 374, 0, 0, 304, 305, 375,
	376, 0, 306, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 314, 0, 377, 315, 316, 317, 378,
	379, 0, 404, 318, 168, 0, 0, 0, 319, 320,
	321, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 403, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 402, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 168,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 2061, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 168, 0, 318, 0, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 715, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 0,
	1299, 318, 168, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 174, 175, 176, 325, 326, 327, 328, 177, 329,
	330, 0, 178, 331, 332, 179, 180, 0, 0, 333,
	334, 335, 0, 181, 336, 0, 0, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 0, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	387, 193, 337, 194, 338, 339, 0, 195, 0, 196,
	0, 197, 0, 0, 198, 199, 0, 200, 0, 0,
	0, 340, 201, 202, 203, 341, 342, 0, 0, 0,
	204, 205, 343, 344, 345, 0, 206, 0, 207, 0,
	0, 0, 0, 208, 346, 0, 347, 0, 209, 210,
	211, 212, 348, 349, 0, 0, 216, 0, 213, 0,
	0, 214, 350, 215, 351, 352, 353, 354, 355, 0,
	356, 0, 0, 217, 218, 219, 0, 220, 221, 222,
	0, 224, 223, 0, 357, 0, 225, 0, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	0, 233, 234, 236, 235, 0, 0, 0, 359, 237,
	360, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 0, 243, 0, 362, 244, 245, 246, 247,
	248, 0, 249, 363, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 365, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 0, 272, 273, 366, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 0, 286, 275,
	276, 287, 0, 288, 368, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 370, 293, 371, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 373,
	374, 0, 0, 304, 305, 375, 376, 0, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 314,
	0, 377, 315, 316, 317, 378, 379, 0, 1297, 318,
	168, 0, 0, 0, 319, 320, 321, 322, 323, 0,
	0, 0, 0, 0, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 174,
	175, 176, 325, 326, 327, 328, 177, 329, 330, 0,
	178, 331, 332, 179, 180, 0, 0, 333, 334, 335,
	0, 181, 336, 0, 0, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 0, 0, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 387, 193,
	337, 194, 338, 339, 0, 195, 0, 196, 0, 197,
	0, 0, 198, 199, 0, 200, 0, 0, 0, 340,
	201, 202, 203, 341, 342, 0, 0, 0, 204, 205,
	343, 344, 345, 0, 206, 0, 207, 0, 0, 0,
	0, 208, 346, 0, 347, 0, 209, 210, 211, 212,
	348, 349, 0, 0, 216, 0, 213, 0, 0, 214,
	350, 215, 351, 352, 353, 354, 355, 0, 356, 0,
	0, 217, 218, 219, 0, 220, 221, 222, 0, 224,
	223, 0, 357, 0, 225, 0, 0, 226, 0, 0,
	227, 0, 228, 229, 230, 232, 358, 231, 0, 233,
	234, 236, 235, 0, 0, 0, 359, 237, 360, 238,
	239, 0, 240, 0, 0, 241, 0, 0, 242, 361,
	0, 243, 0, 362, 244, 245, 246, 247, 248, 0,
	249, 363, 250, 364, 251, 0, 252, 253, 254, 255,
	256, 365, 257, 258, 0, 259, 260, 261, 262, 263,
	265, 266, 264, 267, 268, 269, 270, 0, 271, 0,
	272, 273, 366, 274, 0, 278, 279, 280, 281, 0,
	283, 367, 282, 284, 285, 0, 286, 275, 276, 287,
	0, 288, 368, 369, 289, 0, 295, 290, 291, 277,
	292, 294, 370, 293, 371, 0, 296, 0, 297, 298,
	299, 300, 301, 302, 303, 0, 372, 373, 374, 0,
	0, 304, 305, 375, 376, 0, 306, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 314, 0, 377,
	315, 316, 317, 378, 379, 168, 0, 318, 0, 0,
	0, 0, 319, 320, 321, 322, 323, 0, 0, 0,
	0, 171, 172, 1279, 173, 0, 0, 0, 0, 324,
	0, 0, 0, 0, 174, 175, 176, 325, 326, 327,
	328, 177, 329, 330, 0, 178, 331, 332, 179, 180,
	0, 0, 333, 334, 335, 0, 181, 336, 0, 0,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	0, 0, 189, 190, 0, 0, 0, 0, 0, 0,
	0, 191, 192, 387, 193, 337, 194, 338, 339, 0,
	195, 0, 196, 0, 197, 0, 0, 198, 199, 0,
	200, 0, 0, 0, 340, 201, 202, 203, 341, 342,
	0, 0, 0, 204, 205, 343, 344, 345, 0, 206,
	0, 207, 0, 0, 0, 0, 208, 346, 0, 347,
	0, 209, 210, 211, 212, 348, 349, 0, 0, 216,
	0, 213, 0, 0, 214, 350, 215, 351, 352, 353,
	354, 355, 0, 356, 0, 0, 217, 218, 219, 0,
	220, 221, 222, 0, 224, 223, 0, 357, 0, 225,
	0, 0, 226, 0, 0, 227, 0, 228, 229, 230,
	232, 358, 231, 0, 233, 234, 236, 235, 0, 0,
	0, 359, 237, 360, 238, 239, 0, 240, 0, 0,
	241, 0, 0, 242, 361, 0, 243, 0, 362, 244,
	245, 246, 247, 248, 0, 249, 363, 250, 364, 251,
	0, 252, 253, 254, 255, 256, 365, 257, 258, 0,
	259, 260, 261, 262, 263, 265, 266, 264, 267, 268,
	269, 270, 0, 271, 0, 272, 273, 366, 274, 0,
	278, 279, 280, 281, 0, 283, 367, 282, 284, 285,
	0, 286, 275, 276, 287, 0, 288, 368, 369, 289,
	0, 295, 290, 291, 277, 292, 294, 370, 293, 371,
	0, 296, 0, 297, 298, 299, 300, 301, 302, 303,
	0, 372, 373, 374, 0, 0, 304, 305, 375, 376,
	0, 306, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 314, 0, 377, 315, 316, 317, 378, 379,
	0, 1165, 318, 168, 0, 0, 0, 319, 320, 321,
	322, 323, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 174, 175, 176, 325, 326, 327, 328, 177,
	329, 330, 0, 178, 331, 332, 179, 180, 0, 0,
	333, 334, 335, 0, 181, 336, 0, 0, 0, 182,
	183, 184, 0, 185, 0, 186, 187, 188, 0, 0,
	189, 190, 0, 0, 0, 0, 0, 0, 0, 191,
	192, 387, 193, 337, 194, 338, 339, 0, 195, 0,
	196, 0, 197, 0, 0, 198, 199, 0, 200, 0,
	0, 0, 340, 201, 202, 203, 341, 342, 0, 0,
	0, 204, 205, 343, 344, 345, 0, 206, 0, 207,
	0, 0, 0, 0, 208, 346, 0, 347, 0, 209,
	210, 211, 212, 1164, 349, 0, 0, 216, 0, 213,
	0, 0, 214, 350, 215, 351, 352, 353, 354, 355,
	0, 356, 0, 0, 217, 218, 219, 0, 220, 221,
	222, 0, 224, 223, 0, 357, 0, 225, 0, 0,
	226, 0, 0, 227, 0, 228, 229, 230, 232, 358,
	231, 0, 233, 234, 236, 235, 0, 0, 0, 359,
	237, 360, 238, 239, 0, 240, 0, 0, 241, 0,
	0, 242, 361, 0, 243, 0, 362, 244, 245, 246,
	247, 248, 0, 249, 363, 250, 364, 251, 0, 252,
	253, 254, 255, 256, 365, 257, 258, 0, 259, 260,
	261, 262, 263, 265, 266, 264, 267, 268, 269, 270,
	0, 271, 0, 272, 273, 366, 274, 0, 278, 279,
	280, 281, 0, 283, 367, 282, 284, 285, 0, 286,
	275, 276, 287, 0, 288, 368, 369, 289, 0, 295,
	290, 291, 277, 292, 294, 370, 293, 371, 0, 296,
	0, 297, 298, 299, 300, 301, 302, 303, 0, 372,
	373, 374, 0, 0, 304, 305, 375, 376, 0, 306,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	314, 0, 377, 315, 316, 317, 378, 379, 0, 596,
	318, 168, 0, 0, 0, 319, 320, 321, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 0, 324, 0, 0, 0, 0,
	174, 175, 176, 325, 326, 327, 328, 177, 329, 330,
	0, 178, 331, 332, 179, 180, 0, 0, 333, 334,
	915, 0, 181, 336, 0, 0, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 0, 0, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 387,
	193, 337, 194, 338, 339, 0, 195, 0, 196, 0,
	197, 0, 0, 198, 199, 0, 200, 0, 0, 0,
	340, 201, 202, 203, 341, 342, 0, 0, 0, 204,
	205, 343, 344, 345, 0, 206, 0, 207, 0, 0,
	0, 0, 208, 346, 0, 347, 0, 209, 210, 211,
	212, 348, 349, 0, 0, 216, 0, 213, 0, 0,
	214, 350, 215, 351, 352, 353, 354, 355, 0, 356,
	0, 0, 217, 218, 219, 0, 220, 221, 222, 0,
	224, 223, 0, 357, 0, 225, 0, 0, 226, 0,
	0, 227, 0, 228, 229, 230, 232, 358, 598, 0,
	233, 234, 236, 235, 0, 0, 0, 359, 237, 360,
	238, 239, 0, 240, 0, 0, 241, 0, 0, 242,
	361, 0, 243, 0, 362, 244, 245, 246, 247, 248,
	0, 249, 363, 250, 364, 251, 0, 252, 253, 254,
	255, 256, 365, 257, 258, 0, 259, 260, 261, 262,
	263, 265, 266, 264, 267, 268, 269, 270, 0, 271,
	0, 272, 273, 366, 274, 0, 278, 279, 280, 281,
	0, 283, 367, 282, 284, 285, 0, 286, 275, 276,
	287, 0, 288, 368, 369, 289, 0, 295, 290, 291,
	277, 292, 294, 370, 293, 371, 0, 296, 0, 297,
	298, 299, 300, 301, 302, 303, 0, 593, 373, 374,
	0, 0, 304, 916, 375, 376, 0, 306, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 314, 0,
	377, 315, 316, 317, 378, 379, 0, 885, 318, 168,
	0, 0, 0, 319, 320, 321, 322, 323, 0, 0,
	0, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 884,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 0, 882, 318, 168, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	0, 0, 0, 171, 172, 0, 173, 0, 0, 0,
	0, 324, 0, 0, 0, 0, 174, 175, 176, 325,
	326, 327, 328, 177, 329, 330, 0, 178, 331, 332,
	179, 180, 0, 0, 333, 334, 335, 0, 181, 336,
	0, 0, 0, 182, 183, 184, 0, 185, 0, 186,
	187, 188, 0, 0, 189, 190, 0, 0, 0, 0,
	0, 0, 0, 191, 192, 387, 193, 337, 194, 338,
	339, 0, 195, 0, 196, 0, 197, 0, 0, 198,
	199, 0, 200, 0, 0, 0, 340, 201, 202, 203,
	341, 342, 0, 0, 0, 204, 205, 343, 344, 345,
	0, 206, 0, 207, 0, 0, 0, 0, 208, 346,
	0, 347, 0, 209, 210, 211, 212, 881, 349, 0,
	0, 216, 0, 213, 0, 0, 214, 350, 215, 351,
	352, 353, 354, 355, 0, 356, 0, 0, 217, 218,
	219, 0, 220, 221, 222, 0, 224, 223, 0, 357,
	0, 225, 0, 0, 226, 0, 0, 227, 0, 228,
	229, 230, 232, 358, 231, 0, 233, 234, 236, 235,
	0, 0, 0, 359, 237, 360, 238, 239, 0, 240,
	0, 0, 241, 0, 0, 242, 361, 0, 243, 0,
	362, 244, 245, 246, 247, 248, 0, 249, 363, 250,
	364, 251, 0, 252, 253, 254, 255, 256, 365, 257,
	258, 0, 259, 260, 261, 262, 263, 265, 266, 264,
	267, 268, 269, 270, 0, 271, 0, 272, 273, 366,
	274, 0, 278, 279, 280, 281, 0, 283, 367, 282,
	284, 285, 0, 286, 275, 276, 287, 0, 288, 368,
	369, 289, 0, 295, 290, 291, 277, 292, 294, 370,
	293, 371, 0, 296, 0, 297, 298, 299, 300, 301,
	302, 303, 0, 372, 373, 374, 0, 0, 304, 305,
	375, 376, 0, 306, 307, 308, 309, 0, 0, 310,
	311, 312, 313, 0, 314, 0, 377, 315, 316, 317,
	378, 379, 0, 878, 318, 168, 0, 0, 0, 319,
	320, 321, 322, 323, 0, 0, 0, 0, 0, 0,
	0, 171, 172, 0, 173, 0, 0, 0, 0, 324,
	0, 0, 0, 0, 174, 175, 176, 325, 326, 327,
	328, 177, 329, 330, 0, 178, 331, 332, 179, 180,
	0, 0, 333, 334, 335, 0, 181, 336, 0, 0,
	0, 182, 183, 184, 0, 185, 0, 186, 187, 188,
	0, 0, 189, 190, 0, 0, 0, 0, 0, 0,
	0, 191, 192, 387, 193, 337, 194, 338, 339, 0,
	195, 0, 196, 0, 197, 0, 0, 198, 199, 0,
	200, 0, 0, 0, 340, 201, 202, 203, 341, 342,
	0, 0, 0, 204, 205, 343, 344, 345, 0, 206,
	0, 207, 0, 0, 0, 0, 208, 346, 0, 347,
	0, 209, 210, 211, 212, 877, 349, 0, 0, 216,
	0, 213, 0, 0, 214, 350, 215, 351, 352, 353,
	354, 355, 0, 356, 0, 0, 217, 218, 219, 0,
	220, 221, 222, 0, 224, 223, 0, 357, 0, 225,
	0, 0, 226, 0, 0, 227, 0, 228, 229, 230,
	232, 358, 231, 0, 233, 234, 236, 235, 0, 0,
	0, 359, 237, 360, 238, 239, 0, 240, 0, 0,
	241, 0, 0, 242, 361, 0, 243, 0, 362, 244,
	245, 246, 247, 248, 0, 249, 363, 250, 364, 251,
	0, 252, 253, 254, 255, 256, 365, 257, 258, 0,
	259, 260, 261, 262, 263, 265, 266, 264, 267, 268,
	269, 270, 0, 271, 0, 272, 273, 366, 274, 0,
	278, 279, 280, 281, 0, 283, 367, 282, 284, 285,
	0, 286, 275, 276, 287, 0, 288, 368, 369, 289,
	0, 295, 290, 291, 277, 292, 294, 370, 293, 371,
	0, 296, 0, 297, 298, 299, 300, 301, 302, 303,
	0, 372, 373, 374, 0, 0, 304, 305, 375, 376,
	0, 306, 307, 308, 309, 0, 0, 310, 311, 312,
	313, 0, 314, 0, 377, 315, 316, 317, 378, 379,
	0, 875, 318, 168, 0, 0, 0, 319, 320, 321,
	322, 323, 0, 0, 0, 0, 0, 0, 0, 171,
	172, 0, 173, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 174, 175, 176, 325, 326, 327, 328, 177,
	329, 330, 0, 178, 331, 332, 179, 180, 0, 0,
	333, 334, 335, 0, 181, 336, 0, 0, 0, 182,
	183, 184, 0, 185, 0, 186, 187, 188, 0, 0,
	189, 190, 0, 0, 0, 0, 0, 0, 0, 191,
	192, 387, 193, 337, 194, 338, 339, 0, 195, 0,
	196, 0, 197, 0, 0, 198, 199, 0, 200, 0,
	0, 0, 340, 201, 202, 203, 341, 342, 0, 0,
	0, 204, 205, 343, 344, 345, 0, 206, 0, 207,
	0, 0, 0, 0, 208, 346, 0, 347, 0, 209,
	210, 211, 212, 874, 349, 0, 0, 216, 0, 213,
	0, 0, 214, 350, 215, 351, 352, 353, 354, 355,
	0, 356, 0, 0, 217, 218, 219, 0, 220, 221,
	222, 0, 224, 223, 0, 357, 0, 225, 0, 0,
	226, 0, 0, 227, 0, 228, 229, 230, 232, 358,
	231, 0, 233, 234, 236, 235, 0, 0, 0, 359,
	237, 360, 238, 239, 0, 240, 0, 0, 241, 0,
	0, 242, 361, 0, 243, 0, 362, 244, 245, 246,
	247, 248, 0, 249, 363, 250, 364, 251, 0, 252,
	253, 254, 255, 256, 365, 257, 258, 0, 259, 260,
	261, 262, 263, 265, 266, 264, 267, 268, 269, 270,
	0, 271, 0, 272, 273, 366, 274, 0, 278, 279,
	280, 281, 0, 283, 367, 282, 284, 285, 0, 286,
	275, 276, 287, 0, 288, 368, 369, 289, 0, 295,
	290, 291, 277, 292, 294, 370, 293, 371, 0, 296,
	0, 297, 298, 299, 300, 301, 302, 303, 0, 372,
	373, 374, 0, 0, 304, 305, 375, 376, 0, 306,
	307, 308, 309, 0, 0, 310, 311, 312, 313, 0,
	314, 0, 377, 315, 316, 317, 378, 379, 0, 871,
	318, 168, 0, 0, 0, 319, 320, 321, 322, 323,
	0, 0, 0, 0, 0, 0, 0, 171, 172, 0,
	173, 0, 0, 0, 0, 324, 0, 0, 0, 0,
	174, 175, 176, 325, 326, 327, 328, 177, 329, 330,
	0, 178, 331, 332, 179, 180, 0, 0, 333, 334,
	335, 0, 181, 336, 0, 0, 0, 182, 183, 184,
	0, 185, 0, 186, 187, 188, 0, 0, 189, 190,
	0, 0, 0, 0, 0, 0, 0, 191, 192, 387,
	193, 337, 194, 338, 339, 0, 195, 0, 196, 0,
	197, 0, 0, 198, 199, 0, 200, 0, 0, 0,
	340, 201, 202, 203, 341, 342, 0, 0, 0, 204,
	205, 343, 344, 345, 0, 206, 0, 207, 0, 0,
	0, 0, 208, 346, 0, 347, 0, 209, 210, 211,
	212, 870, 349, 0, 0, 216, 0, 213, 0, 0,
	214, 350, 215, 351, 352, 353, 354, 355, 0, 356,
	0, 0, 217, 218, 219, 0, 220, 221, 222, 0,
	224, 223, 0, 357, 0, 225, 0, 0, 226, 0,
	0, 227, 0, 228, 229, 230, 232, 358, 231, 0,
	233, 234, 236, 235, 0, 0, 0, 359, 237, 360,
	238, 239, 0, 240, 0, 0, 241, 0, 0, 242,
	361, 0, 243, 0, 362, 244, 245, 246, 247, 248,
	0, 249, 363, 250, 364, 251, 0, 252, 253, 254,
	255, 256, 365, 257, 258, 0, 259, 260, 261, 262,
	263, 265, 266, 264, 267, 268, 269, 270, 0, 271,
	0, 272, 273, 366, 274, 0, 278, 279, 280, 281,
	0, 283, 367, 282, 284, 285, 0, 286, 275, 276,
	287, 0, 288, 368, 369, 289, 0, 295, 290, 291,
	277, 292, 294, 370, 293, 371, 0, 296, 0, 297,
	298, 299, 300, 301, 302, 303, 0, 372, 373, 374,
	0, 0, 304, 305, 375, 376, 0, 306, 307, 308,
	309, 0, 0, 310, 311, 312, 313, 0, 314, 0,
	377, 315, 316, 317, 378, 379, 168, 0, 318, 0,
	0, 0, 0, 319, 320, 321, 322, 323, 0, 0,
	0, 0, 171, 172, 859, 173, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 174, 175, 176, 325, 326,
	327, 328, 177, 329, 330, 0, 178, 331, 332, 179,
	180, 0, 0, 333, 334, 335, 0, 181, 336, 0,
	0, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 0, 0, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 387, 193, 337, 194, 338, 339,
	0, 195, 0, 196, 0, 197, 0, 0, 198, 199,
	0, 200, 0, 0, 0, 340, 201, 202, 203, 341,
	342, 0, 0, 0, 204, 205, 343, 344, 345, 0,
	206, 0, 207, 0, 0, 0, 0, 208, 346, 0,
	347, 0, 209, 210, 211, 212, 348, 349, 0, 0,
	216, 0, 213, 0, 0, 214, 350, 215, 351, 352,
	353, 354, 355, 0, 356, 0, 0, 217, 218, 219,
	0, 220, 221, 222, 0, 224, 223, 0, 357, 0,
	225, 0, 0, 226, 0, 0, 227, 0, 228, 229,
	230, 232, 358, 231, 0, 233, 234, 236, 235, 0,
	0, 0, 359, 237, 360, 238, 239, 0, 240, 0,
	0, 241, 0, 0, 242, 361, 0, 243, 0, 362,
	244, 245, 246, 247, 248, 0, 249, 363, 250, 364,
	251, 0, 252, 253, 254, 255, 256, 365, 257, 258,
	0, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 0, 271, 0, 272, 273, 366, 274,
	0, 278, 279, 280, 281, 0, 283, 367, 282, 284,
	285, 0, 286, 275, 276, 287, 0, 288, 368, 369,
	289, 0, 295, 290, 291, 277, 292, 294, 370, 293,
	371, 0, 296, 0, 297, 298, 299, 300, 301, 302,
	303, 0, 372, 373, 374, 0, 0, 304, 305, 375,
	376, 0, 306, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 314, 0, 377, 315, 316, 317, 378,
	379, 0, 857, 318, 168, 0, 0, 0, 319, 320,
	321, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 856, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 0,
	853, 318, 168, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 174, 175, 176, 325, 326, 327, 328, 177, 329,
	330, 0, 178, 331, 332, 179, 180, 0, 0, 333,
	334, 335, 0, 181, 336, 0, 0, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 0, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	387, 193, 337, 194, 338, 339, 0, 195, 0, 196,
	0, 197, 0, 0, 198, 199, 0, 200, 0, 0,
	0, 340, 201, 202, 203, 341, 342, 0, 0, 0,
	204, 205, 343, 344, 345, 0, 206, 0, 207, 0,
	0, 0, 0, 208, 346, 0, 347, 0, 209, 210,
	211, 212, 348, 349, 0, 0, 216, 0, 213, 0,
	0, 214, 350, 215, 351, 352, 353, 354, 355, 0,
	356, 0, 0, 217, 218, 219, 0, 220, 221, 222,
	0, 224, 223, 0, 357, 0, 225, 0, 0, 226,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 231,
	0, 233, 234, 236, 235, 0, 0, 0, 359, 237,
	360, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 0, 243, 0, 362, 244, 245, 246, 247,
	248, 0, 249, 363, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 365, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 0, 272, 273, 366, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 284, 285, 0, 286, 275,
	276, 287, 0, 288, 368, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 370, 293, 371, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 372, 373,
	374, 0, 0, 304, 305, 375, 376, 0, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 314,
	0, 377, 315, 316, 317, 378, 379, 0, 851, 318,
	168, 0, 0, 0, 319, 320, 321, 322, 323, 0,
	0, 0, 0, 0, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 174,
	175, 176, 325, 326, 327, 328, 177, 329, 330, 0,
	178, 331, 332, 179, 180, 0, 0, 333, 334, 335,
	0, 181, 336, 0, 0, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 0, 0, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 387, 193,
	337, 194, 338, 339, 0, 195, 0, 196, 0, 197,
	0, 0, 198, 199, 0, 200, 0, 0, 0, 340,
	201, 202, 203, 341, 342, 0, 0, 0, 204, 205,
	343, 344, 345, 0, 206, 0, 207, 0, 0, 0,
	0, 208, 346, 0, 347, 0, 209, 210, 211, 212,
	348, 349, 0, 0, 216, 0, 213, 0, 0, 214,
	350, 215, 351, 352, 353, 354, 355, 0, 356, 0,
	0, 217, 218, 219, 0, 220, 221, 222, 0, 224,
	223, 0, 357, 0, 225, 0, 0, 226, 0, 0,
	227, 0, 228, 229, 230, 232, 358, 231, 0, 233,
	234, 236, 235, 0, 0, 0, 359, 237, 360, 238,
	239, 0, 240, 0, 0, 241, 0, 0, 242, 361,
	0, 243, 0, 362, 244, 245, 246, 247, 248, 0,
	249, 363, 250, 364, 251, 0, 252, 253, 254, 255,
	256, 365, 257, 258, 0, 259, 260, 261, 262, 263,
	265, 266, 264, 267, 268, 269, 270, 0, 271, 0,
	272, 273, 366, 274, 0, 278, 279, 280, 281, 0,
	283, 367, 282, 284, 285, 0, 286, 275, 276, 287,
	0, 288, 368, 369, 289, 0, 295, 290, 291, 277,
	292, 294, 370, 293, 371, 0, 296, 0, 297, 298,
	299, 300, 301, 302, 303, 0, 372, 373, 374, 0,
	0, 304, 305, 375, 376, 0, 306, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 314, 0, 377,
	315, 316, 317, 378, 379, 0, 847, 318, 168, 0,
	0, 0, 319, 320, 321, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 174, 175, 176,
	325, 326, 327, 328, 177, 329, 330, 0, 178, 331,
	332, 179, 180, 0, 0, 333, 334, 335, 0, 181,
	336, 0, 0, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 0, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 387, 193, 337, 194,
	338, 339, 0, 195, 0, 196, 0, 197, 0, 0,
	198, 199, 0, 200, 0, 0, 0, 340, 201, 202,
	203, 341, 342, 0, 0, 0, 204, 205, 343, 344,
	345, 0, 206, 0, 207, 0, 0, 0, 0, 208,
	346, 0, 347, 0, 209, 210, 211, 212, 849, 349,
	0, 0, 216, 0, 213, 0, 0, 214, 350, 215,
	351, 352, 353, 354, 355, 0, 356, 0, 0, 217,
	218, 219, 0, 220, 221, 222, 0, 224, 223, 0,
	357, 0, 225, 0, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 0, 233, 234, 236,
	235, 0, 0, 0, 359, 237, 360, 238, 239, 0,
	240, 0, 0, 241, 0, 0, 242, 361, 0, 243,
	0, 362, 244, 245, 246, 247, 248, 0, 249, 363,
	250, 364, 251, 0, 252, 253, 254, 255, 256, 365,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 0, 272, 273,
	366, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 0, 286, 275, 276, 287, 0, 288,
	368, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	370, 293, 371, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 373, 374, 0, 0, 304,
	305, 375, 376, 0, 306, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 314, 0, 377, 315, 316,
	317, 378, 379, 0, 726, 318, 168, 0, 0, 0,
	319, 320, 321, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 174, 175, 176, 325, 326,
	327, 328, 177, 329, 330, 0, 178, 331, 332, 179,
	180, 0, 0, 333, 334, 335, 0, 181, 336, 0,
	0, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 0, 0, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 387, 193, 337, 194, 338, 339,
	0, 195, 0, 196, 0, 197, 0, 0, 198, 199,
	0, 200, 0, 0, 0, 340, 201, 202, 203, 341,
	342, 0, 0, 0, 204, 205, 343, 344, 345, 0,
	206, 0, 207, 0, 0, 0, 0, 208, 346, 0,
	347, 0, 209, 210, 211, 212, 728, 349, 0, 0,
	216, 0, 213, 0, 0, 214, 350, 215, 351, 352,
	353, 354, 355, 0, 356, 0, 0, 217, 218, 219,
	0, 220, 221, 222, 0, 224, 223, 0, 357, 0,
	225, 0, 0, 226, 0, 0, 227, 0, 228, 229,
	230, 232, 358, 231, 0, 233, 234, 236, 235, 0,
	0, 0, 359, 237, 360, 238, 239, 0, 240, 0,
	0, 241, 0, 0, 242, 361, 0, 243, 0, 362,
	244, 245, 246, 247, 248, 0, 249, 363, 250, 364,
	251, 0, 252, 253, 254, 255, 256, 365, 257, 258,
	0, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 0, 271, 0, 272, 273, 366, 274,
	0, 278, 279, 280, 281, 0, 283, 367, 282, 284,
	285, 0, 286, 275, 276, 287, 0, 288, 368, 369,
	289, 0, 295, 290, 291, 277, 292, 294, 370, 293,
	371, 0, 296, 0, 297, 298, 299, 300, 301, 302,
	303, 0, 372, 373, 374, 0, 0, 304, 305, 375,
	376, 0, 306, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 314, 0, 377, 315, 316, 317, 378,
	379, 0, 724, 318, 168, 0, 0, 0, 319, 320,
	321, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 0,
	596, 318, 168, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 0, 0, 0, 171, 172,
	0, 173, 0, 0, 0, 0, 324, 0, 0, 0,
	0, 174, 175, 176, 325, 326, 327, 328, 177, 329,
	330, 0, 178, 331, 332, 179, 180, 0, 0, 333,
	334, 335, 0, 587, 336, 0, 0, 0, 182, 183,
	184, 0, 185, 0, 186, 187, 188, 0, 0, 189,
	190, 0, 0, 0, 0, 0, 0, 0, 191, 192,
	387, 193, 337, 194, 338, 339, 0, 195, 0, 196,
	0, 197, 0, 0, 198, 199, 0, 200, 0, 0,
	0, 340, 201, 202, 203, 341, 342, 0, 0, 0,
	204, 205, 343, 344, 345, 0, 206, 0, 207, 0,
	0, 0, 0, 208, 346, 0, 347, 0, 209, 210,
	211, 212, 348, 349, 0, 0, 216, 0, 213, 0,
	0, 214, 350, 215, 351, 352, 353, 354, 355, 0,
	356, 0, 0, 217, 218, 219, 0, 220, 221, 222,
	0, 224, 223, 0, 357, 0, 225, 0, 0, 586,
	0, 0, 227, 0, 228, 229, 230, 232, 358, 598,
	0, 233, 234, 236, 235, 0, 0, 0, 359, 237,
	360, 238, 239, 0, 240, 0, 0, 241, 0, 0,
	242, 361, 0, 243, 0, 362, 244, 245, 246, 247,
	248, 0, 249, 363, 250, 364, 251, 0, 252, 253,
	254, 255, 256, 365, 257, 258, 0, 259, 260, 261,
	262, 263, 265, 266, 264, 267, 268, 269, 270, 0,
	271, 0, 272, 273, 588, 274, 0, 278, 279, 280,
	281, 0, 283, 367, 282, 589, 285, 0, 286, 275,
	276, 287, 0, 288, 368, 369, 289, 0, 295, 290,
	291, 277, 292, 294, 370, 293, 371, 0, 296, 0,
	297, 298, 299, 300, 301, 302, 303, 0, 593, 373,
	374, 0, 0, 304, 591, 375, 376, 0, 306, 307,
	308, 309, 0, 0, 310, 311, 312, 313, 0, 314,
	0, 377, 315, 316, 317, 378, 379, 0, 571, 318,
	168, 0, 0, 0, 319, 320, 321, 322, 323, 0,
	0, 0, 0, 0, 0, 0, 171, 172, 0, 173,
	0, 0, 0, 0, 324, 0, 0, 0, 0, 174,
	175, 176, 325, 326, 327, 328, 177, 329, 330, 0,
	178, 331, 332, 179, 180, 0, 0, 333, 334, 335,
	0, 181, 336, 0, 0, 0, 182, 183, 184, 0,
	185, 0, 186, 187, 188, 0, 0, 189, 190, 0,
	0, 0, 0, 0, 0, 0, 191, 192, 387, 193,
	337, 194, 338, 339, 0, 195, 0, 196, 0, 197,
	0, 0, 198, 199, 0, 200, 0, 0, 0, 340,
	201, 202, 203, 341, 342, 0, 0, 0, 204, 205,
	343, 344, 345, 0, 206, 0, 207, 0, 0, 0,
	0, 208, 346, 0, 347, 0, 209, 210, 211, 212,
	348, 349, 0, 0, 216, 0, 213, 0, 0, 214,
	350, 215, 351, 352, 353, 354, 355, 0, 356, 0,
	0, 217, 218, 219, 0, 220, 221, 222, 0, 224,
	223, 0, 357, 0, 225, 0, 0, 226, 0, 0,
	227, 0, 228, 229, 230, 232, 358, 231, 0, 233,
	234, 236, 235, 0, 0, 0, 359, 237, 360, 238,
	239, 0, 240, 0, 0, 241, 0, 0, 242, 361,
	0, 243, 0, 362, 244, 245, 246, 247, 248, 0,
	249, 363, 250, 364, 251, 0, 252, 253, 254, 255,
	256, 365, 257, 258, 0, 259, 260, 261, 262, 263,
	265, 266, 264, 267, 268, 269, 270, 0, 271, 0,
	272, 273, 366, 274, 0, 572, 279, 280, 281, 0,
	283, 367, 282, 284, 285, 0, 286, 275, 276, 287,
	0, 288, 368, 369, 289, 0, 295, 290, 291, 277,
	292, 294, 370, 293, 371, 0, 296, 0, 297, 298,
	299, 300, 301, 302, 303, 0, 372, 373, 374, 0,
	0, 304, 305, 375, 376, 0, 306, 307, 308, 309,
	0, 0, 310, 311, 312, 313, 0, 314, 0, 377,
	315, 316, 317, 378, 379, 0, 569, 318, 168, 0,
	0, 0, 319, 320, 321, 322, 323, 0, 0, 0,
	0, 0, 0, 0, 171, 172, 0, 173, 0, 0,
	0, 0, 324, 0, 0, 0, 0, 174, 175, 176,
	325, 326, 327, 328, 177, 329, 330, 0, 178, 331,
	332, 179, 180, 0, 0, 333, 334, 335, 0, 181,
	336, 0, 0, 0, 182, 183, 184, 0, 185, 0,
	186, 187, 188, 0, 0, 189, 190, 0, 0, 0,
	0, 0, 0, 0, 191, 192, 387, 193, 337, 194,
	338, 339, 0, 195, 0, 196, 0, 197, 0, 0,
	198, 199, 0, 200, 0, 0, 0, 340, 201, 202,
	203, 341, 342, 0, 0, 0, 204, 205, 343, 344,
	345, 0, 206, 0, 207, 0, 0, 0, 0, 208,
	346, 0, 347, 0, 209, 210, 211, 212, 348, 349,
	0, 0, 216, 0, 213, 0, 0, 214, 350, 215,
	351, 352, 353, 354, 355, 0, 356, 0, 0, 217,
	218, 219, 0, 220, 221, 222, 0, 224, 223, 0,
	357, 0, 225, 0, 0, 226, 0, 0, 227, 0,
	228, 229, 230, 232, 358, 231, 0, 233, 234, 236,
	235, 0, 0, 0, 359, 237, 360, 238, 239, 0,
	240, 0, 0, 241, 0, 0, 242, 361, 0, 243,
	0, 362, 244, 245, 246, 247, 248, 0, 249, 363,
	250, 364, 251, 0, 252, 253, 254, 255, 256, 365,
	257, 258, 0, 259, 260, 261, 262, 263, 265, 266,
	264, 267, 268, 269, 270, 0, 271, 0, 272, 273,
	366, 274, 0, 278, 279, 280, 281, 0, 283, 367,
	282, 284, 285, 0, 286, 275, 276, 287, 0, 288,
	368, 369, 289, 0, 295, 290, 291, 277, 292, 294,
	370, 293, 371, 0, 296, 0, 297, 298, 299, 300,
	301, 302, 303, 0, 372, 373, 374, 0, 0, 304,
	305, 375, 376, 0, 306, 307, 308, 309, 0, 0,
	310, 311, 312, 313, 0, 314, 0, 377, 315, 316,
	317, 378, 379, 0, 561, 318, 168, 0, 0, 0,
	319, 320, 321, 322, 323, 0, 0, 0, 0, 0,
	0, 0, 171, 172, 0, 173, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 174, 175, 176, 325, 326,
	327, 328, 177, 329, 330, 0, 178, 331, 332, 179,
	180, 0, 0, 333, 334, 335, 0, 181, 336, 0,
	0, 0, 182, 183, 184, 0, 185, 0, 186, 187,
	188, 0, 0, 189, 190, 0, 0, 0, 0, 0,
	0, 0, 191, 192, 387, 193, 337, 194, 338, 339,
	0, 195, 0, 196, 0, 197, 0, 0, 198, 199,
	0, 200, 0, 0, 0, 340, 201, 202, 203, 341,
	342, 0, 0, 0, 204, 205, 343, 344, 345, 0,
	206, 0, 207, 0, 0, 0, 0, 208, 346, 0,
	347, 0, 209, 210, 211, 212, 348, 349, 0, 0,
	216, 0, 213, 0, 0, 214, 350, 215, 351, 352,
	353, 354, 355, 0, 356, 0, 0, 217, 218, 219,
	0, 220, 221, 222, 0, 224, 223, 0, 357, 0,
	225, 0, 0, 226, 0, 0, 227, 0, 228, 229,
	230, 232, 358, 231, 0, 233, 234, 236, 235, 0,
	0, 0, 359, 237, 360, 238, 239, 0, 240, 0,
	0, 241, 0, 0, 242, 361, 0, 243, 0, 362,
	244, 245, 246, 247, 248, 0, 249, 363, 250, 364,
	251, 0, 252, 253, 254, 255, 256, 365, 257, 258,
	0, 259, 260, 261, 262, 263, 265, 266, 264, 267,
	268, 269, 270, 0, 271, 0, 272, 273, 366, 274,
	0, 278, 279, 280, 281, 0, 283, 367, 282, 284,
	285, 0, 286, 275, 276, 287, 0, 288, 368, 369,
	289, 0, 295, 290, 291, 277, 292, 294, 370, 293,
	371, 0, 296, 0, 297, 298, 299, 300, 301, 302,
	303, 0, 372, 373, 374, 0, 0, 304, 305, 375,
	376, 0, 306, 307, 308, 309, 0, 0, 310, 311,
	312, 313, 0, 314, 0, 377, 315, 316, 317, 378,
	379, 0, 427, 318, 168, 0, 0, 0, 319, 320,
	321, 322, 323, 0, 0, 0, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 168,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 168, 0, 318, 0, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 1660, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 168,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 1658,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 168, 0, 318, 0, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 1647, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 168,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 257, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 572, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 168, 0, 318, 0, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	1175, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	246, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 255, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 274, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	0, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 168,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 0, 0, 171, 172, 0, 173, 0,
	0, 0, 0, 324, 0, 0, 0, 0, 174, 175,
	176, 325, 326, 327, 328, 177, 329, 330, 0, 178,
	331, 332, 179, 180, 0, 0, 333, 334, 335, 0,
	181, 336, 0, 0, 0, 182, 183, 184, 0, 185,
	0, 186, 187, 188, 0, 0, 189, 190, 0, 0,
	0, 0, 0, 0, 0, 191, 192, 387, 193, 337,
	194, 338, 339, 0, 195, 0, 196, 0, 197, 0,
	0, 198, 199, 0, 200, 0, 0, 0, 340, 201,
	202, 203, 341, 342, 0, 0, 0, 204, 205, 343,
	344, 345, 0, 206, 0, 207, 0, 0, 0, 0,
	208, 346, 0, 347, 0, 209, 210, 211, 212, 348,
	349, 0, 0, 216, 0, 213, 0, 0, 214, 350,
	215, 351, 352, 353, 354, 355, 0, 356, 0, 0,
	217, 218, 219, 0, 220, 221, 222, 0, 224, 223,
	0, 357, 0, 225, 0, 0, 226, 0, 0, 227,
	0, 228, 229, 230, 232, 358, 231, 0, 233, 234,
	236, 235, 0, 0, 0, 359, 237, 360, 238, 239,
	0, 240, 0, 0, 241, 0, 0, 242, 361, 0,
	243, 0, 362, 244, 245, 246, 247, 248, 0, 249,
	363, 250, 364, 251, 0, 252, 253, 254, 255, 256,
	365, 696, 258, 0, 259, 260, 261, 262, 263, 265,
	266, 264, 267, 268, 269, 270, 0, 271, 0, 272,
	273, 366, 274, 0, 278, 279, 280, 281, 0, 283,
	367, 282, 284, 285, 0, 286, 275, 276, 287, 0,
	288, 368, 369, 289, 0, 295, 290, 291, 277, 292,
	294, 370, 293, 371, 0, 296, 0, 297, 298, 299,
	300, 301, 302, 303, 0, 372, 373, 374, 0, 0,
	304, 305, 375, 376, 0, 306, 307, 308, 309, 0,
	0, 310, 311, 312, 313, 0, 314, 0, 377, 315,
	316, 317, 378, 379, 168, 0, 318, 0, 0, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 0, 0,
	171, 172, 0, 173, 0, 0, 0, 0, 324, 0,
	0, 0, 0, 174, 175, 176, 325, 326, 327, 328,
	177, 329, 330, 0, 178, 331, 332, 179, 180, 0,
	0, 333, 334, 335, 0, 181, 336, 0, 0, 0,
	182, 183, 184, 0, 185, 0, 186, 187, 188, 0,
	0, 189, 190, 0, 0, 0, 0, 0, 0, 0,
	191, 192, 387, 193, 337, 194, 338, 339, 0, 195,
	0, 196, 0, 197, 0, 0, 198, 199, 0, 200,
	0, 0, 0, 340, 201, 202, 203, 341, 342, 0,
	0, 0, 204, 205, 343, 344, 345, 0, 206, 0,
	207, 0, 0, 0, 0, 208, 346, 0, 347, 0,
	209, 210, 211, 212, 348, 349, 0, 0, 216, 0,
	213, 0, 0, 214, 350, 215, 351, 352, 353, 354,
	355, 0, 356, 0, 0, 217, 218, 219, 0, 220,
	221, 222, 0, 224, 223, 0, 357, 0, 225, 0,
	0, 226, 0, 0, 227, 0, 228, 229, 230, 232,
	358, 231, 0, 233, 234, 236, 235, 0, 0, 0,
	359, 237, 360, 238, 239, 0, 240, 0, 0, 241,
	0, 0, 242, 361, 0, 243, 0, 362, 244, 245,
	0, 247, 248, 0, 249, 363, 250, 364, 251, 0,
	252, 253, 254, 0, 256, 365, 257, 258, 0, 259,
	260, 261, 262, 263, 265, 266, 264, 267, 268, 269,
	270, 0, 271, 0, 272, 273, 366, 0, 0, 278,
	279, 280, 281, 0, 283, 367, 282, 284, 285, 0,
	286, 275, 276, 287, 0, 288, 368, 369, 289, 0,
	295, 290, 291, 277, 292, 294, 370, 293, 371, 0,
	296, 0, 297, 298, 299, 300, 301, 302, 303, 0,
	372, 373, 374, 0, 0, 304, 305, 375, 376, 0,
	306, 307, 308, 309, 0, 0, 310, 311, 312, 313,
	0, 314, 0, 377, 315, 316, 317, 378, 379, 0,
	0, 318, 0, 0, 0, 0, 319, 320, 321, 322,
	323, 1050, 1051, 0, 1070, 1071, 1072, 1080, 1081, 1082,
	0, 0, 0, 0, 0, 0, 0, 1073, 0, 0,
	0, 0, 0, 0, 1053, 0, 0, 1084, 0, 1050,
	1051, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0,
	0, 0, 0, 0, 0, 1073, 0, 0, 1052, 0,
	0, 0, 1053, 0, 1067, 1084, 0, 1050, 1051, 0,
	1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 1052, 0, 0, 0,
	1053, 0, 1067, 1084, 0, 0, 1050, 1051, 0, 1070,
	1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0, 0,
	0, 0, 1073, 0, 1052, 0, 0, 0, 1058, 1053,
	1067, 0, 1084, 0, 1050, 1051, 0, 1070, 1071, 1072,
	1080, 1081, 1082, 0, 0, 0, 0, 1077, 1085, 0,
	1073, 0, 0, 1052, 0, 0, 1058, 1053, 0, 1067,
	1084, 0, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1085, 0, 0, 0,
	1075, 1052, 0, 0, 1058, 0, 1068, 1067, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 1085, 0, 0, 0, 1075, 0,
	0, 1074, 0, 1058, 1068, 0, 0, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1077, 1085, 0, 0, 1075, 0, 0, 1074,
	0, 1058, 1068, 0, 0, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 1069,
	1077, 1085, 0, 0, 0, 1075, 0, 1074, 0, 0,
	0, 1068, 0, 0, 0, 1078, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 0, 0,
	0, 0, 0, 1075, 0, 0, 1074, 0, 0, 1068,
	0, 0, 0, 1078, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 0, 0, 0, 0,
	0, 0, 0, 0, 1074, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1076, 0, 1069, 1064, 1065, 1066, 1079, 0,
	1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0,
	1078, 0, 0, 2244, 0, 0, 0, 0, 0, 0,
	1076, 0, 1069, 1064, 1065, 1066, 1079, 0, 1063, 1061,
	1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 1078, 0,
	0, 2239, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 1064, 1065, 1066, 1079, 0, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0, 2235,
	0, 0, 0, 0, 0, 0, 0, 1076, 0, 0,
	1064, 1065, 1066, 1079, 0, 1063, 1061, 1062, 1054, 1055,
	1056, 1057, 1059, 1060, 0, 0, 0, 0, 2215, 0,
	0, 0, 0, 0, 0, 1076, 0, 0, 1064, 1065,
	1066, 1079, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 0, 1050, 1051, 2144, 1070, 1071, 1072,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 0, 0,
	1073, 0, 0, 0, 0, 0, 0, 1053, 0, 0,
	1084, 0, 1050, 1051, 0, 1070, 1071, 1072, 1080, 1081,
	1082, 0, 0, 0, 0, 0, 0, 0, 1073, 0,
	0, 1052, 0, 0, 0, 1053, 0, 1067, 1084, 0,
	1050, 1051, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0,
	0, 0, 0, 0, 0, 0, 1073, 0, 0, 1052,
	0, 0, 0, 1053, 0, 1067, 1084, 0, 0, 1050,
	1051, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0,
	0, 0, 0, 0, 0, 1073, 0, 1052, 0, 0,
	0, 1058, 1053, 1067, 0, 1084, 0, 1050, 1051, 0,
	1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0,
	1077, 1085, 0, 1073, 0, 0, 1052, 0, 0, 1058,
	1053, 0, 1067, 1084, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1077, 1085,
	0, 0, 0, 1075, 1052, 0, 0, 1058, 0, 1068,
	1067, 0, 0, 0, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1077, 1085, 0, 0,
	0, 1075, 0, 0, 1074, 0, 1058, 1068, 0, 0,
	0, 0, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1077, 1085, 0, 0, 1075,
	0, 0, 1074, 0, 1058, 1068, 0, 0, 0, 0,
	0, 0, 0, 1083, 0, 0, 0, 0, 0, 0,
	0, 0, 1069, 1077, 1085, 0, 0, 0, 1075, 0,
	1074, 0, 0, 0, 1068, 0, 0, 0, 1078, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	1069, 0, 0, 0, 0, 0, 1075, 0, 0, 1074,
	0, 0, 1068, 0, 0, 0, 1078, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1069, 0,
	0, 0, 0, 0, 0, 0, 0, 1074, 0, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1076, 0, 1069, 1064, 1065,
	1066, 1079, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 1078, 0, 0, 2143, 0, 0, 0,
	0, 0, 0, 1076, 0, 1069, 1064, 1065, 1066, 1079,
	0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060,
	0, 1078, 0, 0, 2083, 0, 0, 0, 0, 0,
	0, 1076, 0, 0, 1064, 1065, 1066, 1079, 0, 1063,
	1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 0,
	0, 0, 2033, 0, 0, 0, 0, 0, 0, 0,
	1076, 0, 0, 1064, 1065, 1066, 1079, 0, 1063, 1061,
	1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 0, 1738,
	1739, 1952, 1756, 1757, 1758, 0, 0, 0, 1076, 0,
	0, 1064, 1065, 1066, 1079, 1920, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 0, 0, 1050, 1051, 1928,
	1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 0, 0, 0, 0, 0,
	1053, 0, 1753, 1084, 0, 1050, 1051, 0, 1070, 1071,
	1072, 1080, 1081, 1082, 0, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 1052, 0, 0, 0, 1053, 0,
	1067, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 1744, 0, 1067, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	0, 0, 0, 1759, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1077, 1085, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 1754, 0, 0, 0, 0, 0,
	0, 1083, 1738, 1739, 0, 1756, 1757, 1758, 0, 0,
	0, 1077, 1085, 37, 0, 0, 1075, 0, 0, 0,
	0, 0, 1068, 0, 38, 118, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 1074, 0, 0,
	1068, 120, 0, 0, 0, 1753, 0, 42, 0, 47,
	0, 0, 0, 0, 0, 0, 0, 1755, 0, 0,
	0, 0, 0, 0, 0, 1074, 0, 0, 0, 50,
	0, 0, 0, 52, 0, 0, 0, 58, 0, 0,
	121, 0, 0, 0, 59, 1069, 60, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1744,
	0, 1078, 0, 0, 61, 0, 0, 0, 0, 0,
	62, 0, 0, 1069, 0, 0, 0, 0, 0, 1760,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 1759, 0, 0, 0,
	0, 0, 0, 1750, 1751, 1752, 0, 0, 1749, 1747,
	1748, 1740, 1741, 1742, 1743, 1745, 1746, 1754, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1076, 0,
	0, 1064, 1065, 1066, 1079, 0, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0, 1444,
	0, 0, 63, 0, 0, 0, 1076, 0, 64, 1064,
	1065, 1066, 1079, 0, 1063, 1061, 1062, 1054, 1055, 1056,
	1057, 1059, 1060, 0, 0, 1700, 71, 72, 65, 0,
	66, 0, 67, 0, 122, 0, 0, 0, 0, 68,
	1755, 1050, 1051, 126, 1070, 1071, 1072, 1080, 1081, 1082,
	78, 0, 0, 97, 0, 0, 0, 1073, 0, 0,
	0, 0, 119, 0, 1053, 0, 0, 1084, 0, 0,
	0, 130, 0, 0, 0, 0, 0, 1050, 1051, 0,
	1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 1052, 0,
	101, 0, 0, 1073, 1067, 0, 0, 0, 0, 117,
	1053, 0, 0, 1084, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 0, 0, 123, 0, 0, 0, 0,
	0, 0, 124, 0, 1052, 0, 1750, 1751, 1752, 0,
	1067, 1749, 1747, 1748, 1740, 1741, 1742, 1743, 1745, 1746,
	0, 116, 0, 0, 0, 0, 0, 0, 1058, 2415,
	0, 0, 0, 0, 0, 0, 0, 0, 1738, 1739,
	0, 1756, 1757, 1758, 0, 0, 0, 1077, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1058, 1083, 1770, 0, 0, 1769,
	0, 1050, 1051, 0, 1070, 1071, 1072, 1080, 1081, 1082,
	1075, 0, 0, 1077, 1085, 0, 1068, 1073, 0, 0,
	0, 1753, 1620, 0, 1053, 0, 0, 1084, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1074, 0, 0, 0, 0, 1075, 0, 1052, 0,
	0, 0, 1068, 0, 1067, 0, 0, 2414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1744, 0, 1074, 0, 0,
	0, 0, 0, 1621, 0, 0, 0, 0, 0, 1069,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1078, 0, 0, 1058, 0,
	0, 0, 1759, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 0, 1077, 1085, 0,
	0, 0, 0, 1754, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	0, 0, 1076, 0, 0, 1064, 1065, 1066, 1079, 0,
	1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0,
	0, 1074, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1755, 0, 1076, 0,
	0, 1064, 1065, 1066, 1079, 0, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 0, 0, 0, 0, 0,
	0, 1332, 0, 0, 0, 0, 0, 1050, 1051, 1069,
	1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0,
	0, 0, 0, 1073, 0, 1078, 0, 1331, 0, 0,
	1053, 0, 0, 1084, 0, 1050, 1051, 0, 1070, 1071,
	1072, 1080, 1081, 1082, 0, 0, 0, 0, 0, 0,
	0, 1073, 0, 0, 1052, 0, 0, 0, 1053, 0,
	1067, 1084, 1750, 1751, 1752, 0, 0, 1749, 1747, 1748,
	1740, 1741, 1742, 1743, 1745, 1746, 0, 0, 0, 0,
	0, 0, 1052, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 1076, 0, 0, 1064, 1065, 1066, 1079, 0,
	1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 0,
	0, 0, 0, 0, 1058, 0, 0, 0, 0, 0,
	1050, 1051, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0,
	0, 0, 0, 1077, 1085, 0, 1073, 0, 0, 0,
	0, 0, 1058, 1053, 0, 0, 1084, 0, 0, 0,
	0, 1083, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1077, 1085, 0, 0, 0, 1075, 1052, 0, 0,
	0, 0, 1068, 1067, 0, 0, 0, 0, 0, 1083,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1075, 0, 0, 1074, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1074, 657, 1058, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1069, 1077, 1085, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1078, 0, 0, 1083, 0, 0, 0, 0, 0,
	0, 0, 0, 1069, 0, 0, 0, 0, 0, 1075,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1050,
	1051, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0,
	1074, 0, 0, 0, 0, 1073, 0, 0, 0, 0,
	0, 0, 1053, 0, 0, 1084, 0, 0, 1076, 0,
	0, 1064, 1065, 1066, 1079, 0, 1063, 1061, 1062, 1054,
	1055, 1056, 1057, 1059, 1060, 0, 1052, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 1076, 0, 1069, 1064,
	1065, 1066, 1079, 0, 1063, 1061, 1062, 1054, 1055, 1056,
	1057, 1059, 1060, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1050, 1051, 0, 1070, 1071, 1072,
	1080, 1081, 1082, 0, 0, 0, 0, 0, 0, 1932,
	1073, 0, 0, 0, 1771, 0, 1058, 1053, 0, 0,
	1084, 1776, 1050, 1051, 0, 1070, 1071, 1072, 1080, 1081,
	1082, 0, 0, 0, 0, 1077, 1085, 0, 1073, 0,
	0, 1052, 0, 0, 0, 1053, 0, 1067, 1084, 0,
	0, 1076, 0, 1083, 1064, 1065, 1066, 1079, 0, 1063,
	1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 1075, 1052,
	0, 0, 0, 0, 1068, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1074,
	0, 1058, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1077, 1085, 0, 0, 0, 0, 0, 0, 0, 1058,
	0, 0, 0, 0, 0, 0, 0, 0, 1083, 0,
	0, 0, 0, 0, 0, 0, 0, 1069, 1077, 1085,
	0, 0, 0, 1075, 0, 0, 0, 0, 0, 1068,
	0, 0, 0, 1078, 0, 0, 1083, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1075, 0, 0, 1074, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1074, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1736, 0, 0, 0, 0,
	1076, 0, 1069, 1064, 1065, 1066, 1079, 0, 1063, 1061,
	1062, 1054, 1055, 1056, 1057, 1059, 1060, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1050, 1051,
	1069, 1070, 1071, 1072, 1080, 1081, 1082, 0, 0, 0,
	0, 0, 0, 0, 1073, 0, 1078, 0, 1729, 0,
	0, 1053, 0, 0, 1084, 0, 1050, 1051, 0, 1070,
	1071, 1072, 1080, 1081, 1082, 0, 0, 0, 0, 0,
	0, 0, 1073, 0, 0, 1052, 0, 0, 0, 1053,
	0, 1067, 1084, 0, 0, 1076, 0, 0, 1064, 1065,
	1066, 1079, 0, 1063, 1061, 1062, 1054, 1055, 1056, 1057,
	1059, 1060, 0, 1052, 0, 0, 0, 0, 0, 1067,
	0, 0, 0, 1076, 0, 0, 1064, 1065, 1066, 1079,
	0, 1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060,
	0, 0, 0, 0, 0, 1058, 0, 0, 0, 0,
	0, 1050, 1051, 0, 1070, 1071, 1072, 1080, 1081, 1082,
	0, 0, 0, 0, 1077, 1085, 0, 1073, 0, 0,
	0, 0, 0, 1058, 1053, 0, 0, 1084, 0, 0,
	0, 0, 1083, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1077, 1085, 0, 0, 0, 1075, 1052, 0,
	0, 0, 0, 1068, 1067, 0, 0, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1075, 0, 0, 1074, 0,
	0, 1068, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1074, 0, 1058, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1069, 1077, 1085, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1078, 0, 0, 1083, 0, 0, 0, 0,
	0, 0, 0, 0, 1069, 0, 0, 0, 0, 0,
	1075, 0, 0, 0, 0, 0, 1068, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1050, 1051, 0, 1070, 1071, 1072, 1080, 1081, 1082, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1053, 0, 0, 1084, 0, 0, 1076,
	0, 0, 1064, 1065, 1066, 1079, 0, 1063, 1061, 1062,
	1054, 1055, 1056, 1057, 1059, 1060, 0, 1052, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 1076, 0, 1069,
	1064, 1065, 1066, 1079, 0, 1063, 1061, 1062, 1054, 1055,
	1056, 1057, 1059, 1060, 0, 1078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1050, 1051, 0, 1070, 1071,
	1072, 1080, 1081, 1082, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1058, 1053, 0,
	0, 1084, 0, 0, 0, 0, 0, 0, 0, 0,
	1221, 1211, 1240, 1203, 1231, 1230, 1077, 1085, 1205, 1204,
	0, 0, 1052, 0, 1242, 1241, 0, 0, 1067, 0,
	0, 0, 1076, 0, 1083, 1064, 1065, 1066, 1079, 0,
	1063, 1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 1075,
	0, 0, 0, 0, 0, 1068, 0, 1236, 0, 1228,
	1227, 0, 0, 0, 0, 0, 0, 0, 0, 1226,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1058, 0, 0, 0, 0, 1225, 1223, 1224,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1077, 1085, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1214, 1213, 1215,
	1216, 1217, 1218, 1219, 0, 1239, 0, 0, 1069, 0,
	0, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 1078, 0, 0, 0, 0, 0,
	0, 0, 0, 1207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1229, 0, 0, 0, 1212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1222, 0,
	0, 0, 1379, 1377, 1378, 1381, 1380, 0, 0, 0,
	0, 1076, 0, 1069, 1064, 1065, 1066, 1079, 0, 1063,
	1061, 1062, 1054, 1055, 1056, 1057, 1059, 1060, 1208, 1078,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1220,
	1209, 0, 0, 0, 0, 0, 0, 0, 0, 1244,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1206, 0, 0, 1237, 1238, 1221, 1211, 1240, 1203,
	1231, 1230, 0, 0, 1205, 1204, 0, 0, 0, 0,
	1242, 1241, 0, 0, 0, 0, 1210, 0, 0, 0,
	0, 1243, 0, 0, 0, 0, 1076, 0, 0, 1064,
	1065, 1066, 1079, 0, 1063, 1061, 1062, 1054, 1055, 1056,
	1057, 1059, 1060, 1236, 0, 1228, 1227, 0, 0, 0,
	0, 0, 0, 0, 0, 1226, 0, 0, 0, 0,
	617, 0, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1225, 1223, 1224, 0, 0, 0, 0,
	622, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 620, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1214, 1213, 1215, 1216, 1217, 1218, 1219,
	0, 1239, 0, 621, 0, 0, 0, 0, 623, 0,
	0, 0, 0, 629, 630, 0, 0, 639, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1207,
	579, 624, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1229, 0, 0, 0, 1212, 0, 0, 0, 0,
	0, 0, 0, 642, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 625, 1222, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 626, 627, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1208, 633, 0, 0, 628, 635,
	0, 0, 0, 0, 0, 1220, 1209, 0, 0, 632,
	0, 0, 0, 0, 0, 1244, 0, 0, 0, 580,
	0, 0, 0, 0, 0, 0, 0, 1206, 0, 0,
	1237, 1238, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1210, 0, 0, 0, 0, 1243, 0, 631,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 619, 636, 581, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	637, 0, 0, 0, 641, 0, 0, 0, 582, 0,
	0, 0, 0, 634, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 640,
}
var sqlPact = [...]int{

	38010, -1000, 3, -1000, -1000, 142, -1000, -1000, -1000, 141,
	140, 139, -1000, 137, 135, 134, -1000, 133, 126, 124,
	123, 122, 121, 119, -1000, 116, 114, -1000, -1000, -1000,
	111, 109, 106, 105, 103, 97, 94, 1091, 22705, 89,
	88, 1173, 34435, 84, 81, 79, 78, 1033, 76, 75,
	26500, 906, 1306, 64, 62, 61, 60, 58, 880, 34120,
	575, 1475, 5609, 1486, 33802, 22387, 1476, 1416, 33484, -1000,
	-1000, 33166, 1668, 57, 54, 53, -1000, -1000, 32848, 52,
	47, 45, 43, 40, 38, 36, 35, 34, 33, 32,
	31, 30, 27, -1000, 25, 24, 19, 40018, 18, 17,
	15, 1001, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 110, -1000, 873, 447, 18213, 930, 912,
	903, 901, 900, 36325, 34435, 14, 1778, -51, 13, 586,
	26182, 38010, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 25864, 25546, 32530, 32212,
	692, -1000, -5, 23965, 34435, -1000, 86, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14240, 13886, 445, 86, -1000, -1000, -1000,
	-1000, -1000, 31894, -1000, 31576, 31258, 1353, 30940, -1000, -1000,
	-1000, -1000, 30622, -1000, -1000, 1642, 1487, 1462, 25228, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 30307, 29989, 29671, 29353, 29035, 432, -1000, -1000, -1000,
	16901, -1000, -1000, -1000, -1000, 11, -1000, -1000, -1000, -1000,
	10, 8, 7, 6, 1086, -1000, -1000, -2, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 15260, -1000,
	431, -1000, 1474, -1000, 15260, -1000, 1079, -1000, -1000, -1000,
	-1000, -1000, 34435, -1000, -1000, 1190, -1000, -1000, -1000, -1000,
	-1000, -1000, 834, -1000, -1000, -1000, 1972, 1038, 427, 28717,
	-1000, 1230, -1000, 520, 670, -1000, -1000, -1000, 17884, 152,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2423,
	22069, 1028, 1763, 1629, 1970, 1251, 1627, 1622, 1612, 1598,
	1571, 1968, 829, 1966, 1608, 887, 1964, 1530, 1246, 589,
	1959, 1472, 1468, -1000, -1000, -1000, 27130, -1000, -1000, 873,
	-1000, -1000, -1000, 1262, 1747, 1747, 1747, 1781, 237, 235,
	-1000, 110, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 1884, -1000, -1000, -1000, -1000, 1928, -1000, -1000,
	-1000, -1000, 1101, -1000, -1000, 1101, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 691, 35695, -11, 34435, -1000, 424, -11,
	-1000, 10728, 10728, -1000, -1000, -1000, -1000, 423, -1000, -1000,
	-1000, 9028, -1000, -1000, 466, 21413, -1000, -1000, 995, 1645,
	604, -1000, 864, 1635, -1000, 856, -1000, 826, 1626, -62,
	23020, 23965, -5, -30, -1000, -1000, -1000, 5282, 39306, -1000,
	-1000, 15260, 15260, 15260, 15260, 15260, 961, 460, -1000, 422,
	418, 6973, -1000, -1000, 1927, -1000, -1000, -1000, 243, -1000,
	-1000, 15260, 86, -1000, -1000, -1000, -1000, 415, 1955, -1000,
	515, -1000, -1000, -1000, 519, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1508, 411, 410, 409, -1000, -1000,
	-1000, -1000, 408, 405, 404, 402, 400, 398, 397, 396,
	395, 394, 390, 388, 385, 379, 374, 884, -1000, 547,
	-1000, -1000, 547, 547, -1000, 364, 364, 367, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 364, -1000, -1000, -1000,
	510, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 373, 39306,
	-1000, 747, 20455, 86, -1000, -1000, -1000, -1000, 370, 1212,
	526, -1000, 242, -1000, 28399, 526, 1196, -1000, -1000, -1000,
	27130, -1000, 34435, -1000, 34435, -1000, 783, -1000, 36010, 113,
	1621, -1000, -1000, 113, 1619, -1000, 108, 1601, -1000, -1000,
	-1000, 1594, -1000, -30, 1589, -1000, -1000, 15260, -42, -1000,
	-1000, -1000, 586, -1000, -1000, -1000, -1000, -1000, 23335, 1290,
	39306, 1820, 39919, 23020, 39306, 23335, -1000, -1000, -1000, -1000,
	-1000, 34435, -1000, 15260, -1000, 1814, 1140, -14, -1000, -1000,
	-1000, -1000, -1000, 1260, 1305, 642, 984, 17557, 17230, 1705,
	-1000, -1000, -1000, 148, 5609, -1000, -1000, -1000, -1000, -1000,
	-1000, 28081, -1000, -1000, -1000, 1054, 34435, -1000, -1000, 1494,
	-1000, 23335, 34435, -1000, 34435, -1000, 34435, -1000, 34435, -1000,
	34435, -1000, -1000, -1000, -1000, -1000, 683, -1000, 1489, -1000,
	-1000, 34435, -1000, 1247, -1000, -1000, -1000, 27766, 27448, -1000,
	888, 721, 118, -1000, -1000, 1262, -1000, 1089, 1293, 13532,
	1334, 15260, 110, -1000, -1000, 110, 110, 7994, -1000, -1000,
	-1000, -1000, -1000, -1000, -14, -1000, 35695, -1000, 34435, -11,
	1813, 34435, 168, -1000, 38637, -1000, 168, -1000, -48, -1000,
	39306, -1000, -1000, -1000, 34435, -31, 958, -1000, 24910, 1728,
	1720, 1730, 27130, 1796, 96, 1464, 681, 27130, 680, 1793,
	96, 1449, 678, 34435, 5609, 496, -1000, 34435, -1000, -1000,
	39663, 39919, 5609, 706, 15260, 15260, 15260, 15260, 15260, 15260,
	15260, 15260, 15260, 15260, 15260, 15260, 15260, 15260, 15260, 15260,
	15260, 15260, 15260, 15260, 15260, 15260, 1358, 15260, 676, 15260,
	15260, 15260, 15260, 1335, 994, 343, 1110, -1000, 1878, 1878,
	1878, 39570, 39570, 333, 460, -1000, 15260, -1000, 96, 13192,
	235, 37867, -12, 6633, -1000, -1000, -1000, 8334, 540, 39306,
	86, 5938, -1000, 1923, 1063, 1527, 1402, 369, 497, 495,
	442, 15260, 15260, 12852, 12498, 12144, 15600, 11790, 15260, 7313,
	15260, 15260, 15260, 15260, 11436, 11082, -1000, 368, -1000, -1000,
	-1000, -1000, 1919, -1000, -1000, 1913, -1000, 700, 697, 1901,
	-1000, 1443, -64, -1000, -1000, 24595, 1809, 1583, -1000, 899,
	-1000, 1805, 34435, 1077, 1189, -1000, -1000, 714, 1580, 535,
	412, 1804, 412, 20775, -1000, 34435, -1000, 34435, -1000, -1000,
	34435, -1000, 34435, -1000, 34435, 34435, 34435, 34435, -65, 39306,
	1515, 24280, 674, -1000, 85, -67, -1000, 1807, -1000, -1000,
	-1000, -1000, 227, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 367, 884, 364, 364, 364,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 510, -1000, -1000,
	547, 547, 547, -1000, -1000, -49, -1000, 1442, -1000, 531,
	-70, 588, -14, -1000, 1101, 1112, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1951,
	-15, -1000, -1000, -15, -1000, -1000, 5609, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 34435, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 209, -1000, -1000, -1000, -1000, -1000, -1000,
	34435, 34435, 34435, -1000, 27130, -1000, -1000, -1000, -1000, 39306,
	-1000, 348, -1000, -1000, 39306, 815, 1321, -1000, 1321, -19,
	-1000, 38401, 1297, 34435, -1000, -1000, 362, -83, 535, 10728,
	19817, 5609, -1000, 535, 9028, -1000, 234, 902, 34435, 34435,
	34435, -1000, -1000, 1188, 35380, 1162, 39919, 34435, -1000, 353,
	352, 1296, 1292, 34435, 34435, 35065, 34750, 34435, 857, 96,
	-1000, 351, 34435, 847, 34435, 96, -1000, 350, 34435, 846,
	-1000, 1366, 1105, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 518, 877, 877, 824, 824, 824,
	824, 1952, 3021, 1235, 1413, 4203, 4203, 4203, 3183, 724,
	724, 4203, 4203, 4203, 39570, 39391, 2546, 15260, 15260, 673,
	973, 343, 2546, 15260, 2546, 2546, 2546, 2546, -1000, 1554,
	-1000, -1000, -1000, -1000, 1440, 341, 15600, 15600, -1000, -1000,
	-1000, 6973, 15927, -1000, -1000, -1000, -1000, 336, 15260, -1000,
	37895, -206, -84, -1000, -1000, 15260, -105, -128, -1000, -1000,
	762, -1000, 15260, -1000, 0, 15260, 15260, 15260, 233, -1000,
	232, -1000, 658, -1000, 656, 652, 651, -1000, 334, 1000,
	332, 331, 15260, -1000, -1000, -1000, -1000, -1000, -1000, 39278,
	3953, 224, -1000, 1432, -165, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 223, -1000, 222, -1000, 39042, -165, 220, 38012,
	-1000, 15600, 15600, 15600, 6973, 329, 219, -1000, 38287, -165,
	39014, 10388, 10388, 10388, 218, 38929, 15260, -165, 3805, 3584,
	317, -85, -86, -1000, -93, -1000, 1899, -94, 217, 514,
	509, 216, 746, 1424, 34435, 206, -95, -20, 39919, -1000,
	-1000, -1000, -1000, -1000, 34435, 425, 34435, 96, 34435, 1948,
	96, 34435, 1578, 1602, 487, 34435, 836, 15260, 910, -1000,
	19497, 554, 34435, 836, 90, -1000, -1000, -1000, 490, 34435,
	-1000, -1000, 113, 113, -1000, 108, -1000, -30, -1000, 15260,
	-1000, -1000, 34435, -1000, -1000, 39919, 459, 448, -1000, 1895,
	527, 23020, 34435, -1000, 1313, -1000, -1000, 828, -1000, 881,
	-1000, 18540, -1000, -35, -1000, -1000, -1000, -1000, -1000, 496,
	-1000, 815, -1000, 15260, 1890, -1000, -1000, -1000, 7994, -1000,
	-1000, -1000, 34435, -154, 85, -1000, 1389, -1000, -120, -1000,
	1806, 433, -155, 215, 501, -1000, 19177, -1000, 1389, -1000,
	-1000, -1000, -1000, 648, 646, 1577, -1000, 1148, -1000, 558,
	-1000, 1104, 15260, 16581, 327, 326, 944, -1000, 1572, 1143,
	1570, 1143, -1000, -31, 917, -1000, 15260, -1000, 631, -1000,
	-1000, 15260, -1000, 627, 527, 1419, 701, 15260, 2546, 2546,
	15260, 15600, 15600, -1000, 2546, -1000, -1000, -1000, -1000, -1000,
	1417, 325, 15260, 39919, 37839, 4220, -96, -1000, 10048, -33,
	-1000, 15260, -1000, 37527, -1000, -1000, 444, 1661, -1000, 15260,
	38750, 205, 9708, -1000, 38665, -38, -38, -1000, 1939, 1152,
	1003, 845, 803, 1889, -1000, 21094, 536, 1026, 37499, 39663,
	39919, -1000, 15260, -1000, -1000, 1415, 15260, -1000, 39663, 39919,
	15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600,
	15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 15600, 1215,
	15600, 1853, 1853, 1853, -34, 9368, -1000, 1484, 1415, 15260,
	15260, 39919, 203, 194, 193, -1000, 15260, -165, 15260, 15260,
	15260, -1000, -1000, -1000, 192, -1000, 1886, -1000, -1000, -1000,
	-1000, -1000, 739, -1000, 1355, -1000, 24595, 324, 34435, 323,
	-1000, 320, -1000, -1000, 304, 34435, 1261, 487, 23650, -1000,
	526, -1000, 7653, 39306, -1000, 836, 1738, -102, -1000, -1000,
	-1000, 535, 20775, 20136, 9028, -108, -1000, -1000, -1000, 39306,
	-35, -1000, 643, 1879, 190, -1000, 1029, -1000, -35, -1000,
	-1000, -1000, -1000, -1000, 34435, -1000, 1035, 37470, -1000, 1735,
	5609, 188, 1381, 1777, -1000, 20136, 1309, 1307, 20136, 1400,
	1002, 1002, 1002, -1000, 295, 453, 501, 4613, 8688, 26815,
	1009, 166, 186, 18858, 1806, 1381, 34435, 34435, 34435, 1561,
	-1000, 2527, -1000, 37442, -109, -1000, 313, 1754, 15260, -1000,
	-1000, 294, 16581, 34435, -1000, 1339, 1303, 578, 34435, -1000,
	34435, -1000, 34435, 34435, 34435, -110, 34435, -115, 34435, -1000,
	23020, 696, 1797, 2546, 4016, 3555, 15260, 39919, 39655, -117,
	15260, 15260, -1000, -122, -1000, 15260, 451, 39306, -1000, -1000,
	-1000, 39306, 15260, 1933, 15260, 177, 176, 175, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 173, -1000, -1000, 36640,
	15260, 171, -1000, 170, 169, 39306, 1484, 39306, -1000, -1000,
	572, 572, 794, 794, 794, 794, 1853, 207, 551, 474,
	920, 920, 920, 2384, 365, 365, 920, 920, 920, 1412,
	1276, 291, 38368, 15260, -123, -1000, -1000, -1000, 39306, 39306,
	161, -1000, -1000, -1000, -165, 283, 37414, 37074, -1000, 160,
	-1000, -1000, 1359, -1000, 16581, 290, 34435, 24595, 1803, 16581,
	1057, 1268, 487, 23650, -1000, 714, -36, -1000, -1000, 318,
	96, 836, -1000, -39, -1000, 489, -1000, 450, 441, -1000,
	289, -1000, -1000, -1000, -1000, 1735, -1000, 529, 15260, 15260,
	1806, 20136, 20136, 1263, 1304, 20136, -1000, -1000, -1000, -1000,
	440, 443, 501, 26815, -1000, 1877, 1257, -125, -1000, -1000,
	-1000, 34435, 287, -1000, 501, 529, -1000, -1000, -1000, 34435,
	-1000, 34435, -1000, 5609, 34435, 1423, 1131, -1000, -1000, 1280,
	286, 15600, 34435, -1000, 942, 16581, 1735, 86, 5609, 1735,
	37046, 5938, -131, -132, 1128, -1000, 1124, 15260, -1000, 39919,
	1143, 1143, -1000, 622, 620, 615, -1000, 608, -1000, -45,
	21740, 15260, 15260, 39655, -133, -1000, 2546, 2546, -1000, 37017,
	-1000, 39306, -1000, 38665, -1000, -1000, -1000, -1000, 950, -1000,
	36989, -1000, -1000, -1000, -1000, 15600, 1403, 285, 39919, 36961,
	-1000, -1000, 15260, -1000, -1000, -1000, 919, -141, 16581, -142,
	159, 96, -147, 34435, -1000, 487, 23650, -1000, 1602, 1667,
	34435, 1723, -1000, -1000, 284, -1000, -1000, 1937, -1000, -1000,
	34435, 39306, -165, -1000, 1263, -1000, 282, 15260, 20136, -1000,
	-155, -1000, -148, -1000, 26815, -1000, 436, -204, -1000, 476,
	-1000, 501, 281, 34435, 26815, -1000, -1000, 1398, -1000, -1000,
	34435, 1135, -1000, -1000, 15260, 38368, 280, 1355, 265, -1000,
	-1000, -1000, -1000, -1000, -1000, 1754, 0, -1000, 875, -1000,
	-1000, 39306, 1746, -1000, -1000, 34435, 34435, 264, 253, -1000,
	252, 86, 2546, 2546, -1000, -1000, 158, 1026, 1775, -1000,
	266, 15600, 39919, -156, -1000, 4169, 34435, 942, -158, -1000,
	1355, -1000, 942, 246, 23650, -1000, 1261, 688, -159, 34435,
	-1000, -1000, 6279, -164, -1000, 298, -54, -1000, 1801, -1000,
	34435, 39306, -1000, 501, -1000, 1868, -1000, -1000, 1257, -1000,
	4952, 26815, 34435, -166, -1000, -1000, -1000, 1557, 4101, 1227,
	34435, -1000, 34435, 1735, 157, 34435, 561, 5609, -1000, -1000,
	15260, 15260, 15260, -1000, 842, 15260, 266, -169, -1000, -1000,
	245, 1355, 942, -1000, 1355, 16581, -1000, 1268, 782, -1000,
	535, -1000, 1937, -1000, -1000, 1935, 34435, 244, -171, 26815,
	-1000, -1000, -1000, 1862, -1000, -174, -1000, 1536, -1000, 1037,
	905, 156, -176, -1000, -1000, 242, -1000, 15260, -1000, -179,
	-181, -38, 155, 14920, 14920, -165, -1000, 34435, -1000, 1355,
	-1000, -182, -1000, 20775, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 435, -1000, 34435, -1000, 1053, 1042, 792, -1000, -1000,
	-1000, -1000, -1000, 1227, 39306, -1000, -1000, 115, -1000, -1000,
	-1000, 16254, 1071, 800, 38251, -1000, -184, -1000, 942, -161,
	-1000, -1000, -1000, 1683, -1000, 570, 1183, 1183, 1037, 1933,
	1832, -1000, -1000, -1000, -1000, -1000, 1031, 1355, -1000, -1000,
	1842, -1000, -1000, 1231, -1000, -1000, 14580, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 2331, 2326, 1518, 1741, 2325, 2324, 2322, 2321, 2320,
	2319, 2318, 2316, 2315, 2310, 2307, 2305, 2303, 2299, 2295,
	2294, 2292, 2289, 2288, 2287, 2286, 2285, 1739, 2279, 2277,
	2276, 2273, 2272, 2269, 1714, 2268, 1710, 2267, 2262, 2257,
	2251, 2250, 1706, 1666, 2248, 83, 80, 1657, 2246, 2245,
	1654, 2243, 2242, 2240, 2239, 2238, 2236, 47, 2235, 2233,
	2232, 2231, 2229, 2228, 2225, 142, 153, 2224, 1635, 2222,
	2221, 2220, 2219, 2218, 2217, 2216, 2214, 2206, 2202, 2200,
	2198, 2193, 2191, 2189, 2188, 2183, 2181, 151, 2177, 2175,
	1568, 1550, 2174, 2170, 14, 2169, 77, 2167, 50, 169,
	2451, 126, 2165, 2164, 2163, 2162, 2160, 15, 102, 100,
	2159, 103, 2156, 2155, 55, 33, 27, 18, 2153, 90,
	2146, 2143, 1078, 29, 2140, 2139, 127, 2136, 24, 28,
	95, 143, 139, 115, 111, 2134, 2133, 2132, 2131, 53,
	2129, 2, 2128, 2125, 11, 73, 20, 2123, 17, 19,
	2120, 2117, 129, 2113, 61, 92, 1437, 110, 113, 1390,
	2112, 67, 9, 64, 2106, 2101, 148, 42, 2100, 32,
	82, 132, 2098, 45, 150, 52, 34, 62, 119, 2097,
	2096, 2095, 93, 2094, 109, 94, 2093, 2092, 81, 2091,
	135, 128, 2086, 2084, 87, 2082, 117, 2081, 2079, 146,
	141, 106, 22, 44, 70, 8, 1461, 1453, 120, 74,
	31, 21, 2078, 1406, 1247, 1719, 36, 98, 68, 54,
	99, 56, 76, 137, 37, 2077, 2073, 122, 2063, 2059,
	2058, 2055, 2052, 97, 2048, 2047, 58, 130, 12, 26,
	23, 86, 41, 144, 57, 107, 140, 105, 2041, 88,
	114, 2038, 1014, 2036, 2032, 1967, 116, 2028, 2024, 2023,
	1895, 1616, 1536, 1441, 2021, 2019, 1521, 206, 2017, 2016,
	75, 2015, 108, 104, 2013, 134, 147, 30, 2012, 112,
	46, 89, 2010, 96, 38, 0, 767, 580, 2006, 123,
	78, 2005, 2004, 2001, 1999, 25, 3, 6, 4, 7,
	5, 59, 35, 1997, 1996, 121, 84, 71, 1995, 149,
	1994, 1993, 1992, 49, 1991, 16, 1989, 13, 1987, 1986,
	10, 1, 1983, 1982, 133, 1981, 91, 1980, 1784, 1979,
	136, 1976, 1975, 1649, 40, 101,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 5, 5, 5, 5, 5, 5, 7, 7,
	8, 8, 6, 6, 6, 6, 6, 9, 9, 10,
	16, 13, 18, 12, 12, 15, 15, 109, 109, 108,
	108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
	108, 108, 108, 108, 106, 106, 111, 111, 111, 113,
	113, 110, 110, 105, 105, 20, 20, 55, 55, 283,
	283, 284, 284, 93, 93, 97, 97, 94, 95, 95,
	96, 96, 26, 26, 26, 22, 22, 22, 22, 22,
	23, 23, 24, 24, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 34, 34,
	35, 35, 35, 35, 35, 35, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 41, 41, 41,
	39, 39, 39, 38, 38, 38, 37, 37, 37, 40,
	40, 40, 158, 158, 157, 157, 160, 160, 42, 42,
	42, 42, 45, 45, 45, 45, 45, 45, 45, 45,
	45, 45, 46, 46, 46, 46, 46, 46, 46, 46,
	251, 251, 250, 44, 44, 225, 225, 47, 47, 183,
	183, 48, 48, 48, 48, 48, 49, 49, 56, 56,
	324, 324, 324, 328, 328, 329, 329, 330, 330, 330,
	330, 330, 330, 330, 326, 326, 53, 53, 53, 92,
	92, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	62, 62, 64, 61, 61, 61, 63, 63, 63, 63,
	65, 65, 65, 65, 66, 66, 66, 66, 66, 67,
	67, 138, 138, 276, 275, 275, 281, 281, 281, 136,
	136, 136, 136, 136, 137, 137, 137, 274, 274, 274,
	274, 282, 282, 282, 282, 282, 282, 280, 280, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
	68, 68, 68, 68, 68, 80, 80, 80, 87, 87,
	87, 87, 87, 87, 87, 69, 69, 74, 74, 74,
	74, 74, 70, 70, 75, 75, 76, 76, 77, 77,
	77, 77, 77, 77, 71, 71, 71, 71, 79, 79,
	79, 79, 78, 78, 84, 84, 84, 84, 84, 84,
	81, 81, 81, 81, 82, 82, 82, 85, 85, 85,
	85, 72, 72, 73, 73, 86, 86, 83, 83, 83,
	43, 325, 325, 327, 327, 51, 51, 30, 30, 31,
	31, 139, 139, 140, 140, 204, 204, 204, 204, 141,
	141, 112, 112, 112, 203, 293, 293, 294, 294, 294,
	294, 294, 294, 295, 295, 295, 295, 295, 295, 295,
	291, 291, 292, 289, 289, 290, 290, 290, 290, 331,
	331, 202, 202, 144, 144, 298, 298, 298, 298, 296,
	296, 296, 296, 296, 299, 297, 300, 300, 300, 300,
	300, 237, 237, 237, 89, 89, 32, 32, 118, 118,
	33, 33, 29, 29, 29, 187, 187, 148, 148, 242,
	242, 242, 129, 129, 107, 107, 107, 14, 11, 11,
	11, 11, 11, 11, 19, 19, 17, 17, 188, 188,
	189, 189, 52, 52, 54, 54, 59, 59, 88, 88,
	88, 88, 88, 88, 21, 21, 21, 21, 25, 25,
	25, 25, 58, 58, 333, 333, 125, 125, 125, 125,
	126, 126, 199, 199, 200, 200, 201, 201, 201, 120,
	119, 121, 121, 28, 28, 28, 114, 114, 115, 115,
	116, 116, 117, 117, 334, 334, 50, 50, 50, 91,
	91, 132, 132, 196, 196, 196, 198, 198, 197, 197,
	197, 173, 173, 173, 90, 90, 153, 153, 162, 162,
	163, 163, 248, 164, 164, 57, 57, 100, 100, 98,
	98, 98, 98, 98, 98, 99, 99, 99, 101, 101,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	103, 103, 306, 306, 306, 309, 309, 305, 307, 307,
	308, 308, 332, 332, 174, 174, 174, 143, 142, 142,
	146, 146, 145, 147, 147, 241, 241, 241, 171, 171,
	171, 171, 190, 190, 191, 191, 192, 192, 193, 193,
	193, 194, 194, 195, 195, 170, 170, 221, 221, 102,
	102, 102, 152, 152, 152, 154, 154, 211, 211, 211,
	212, 212, 210, 210, 210, 210, 243, 243, 243, 243,
	243, 243, 243, 243, 322, 322, 322, 323, 323, 240,
	240, 244, 244, 244, 244, 244, 244, 238, 238, 238,
	238, 239, 239, 249, 249, 177, 177, 177, 177, 175,
	175, 176, 176, 245, 245, 245, 245, 172, 172, 246,
	246, 246, 205, 205, 252, 252, 252, 270, 270, 151,
	151, 151, 253, 253, 253, 253, 253, 253, 253, 253,
	253, 253, 253, 253, 253, 253, 253, 253, 253, 254,
	254, 254, 254, 256, 256, 256, 255, 255, 255, 255,
	255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 255, 255, 269, 269, 269, 269, 269, 257,
	257, 264, 264, 265, 265, 266, 267, 258, 258, 259,
	259, 260, 261, 268, 268, 268, 268, 272, 272, 262,
	262, 262, 262, 262, 263, 184, 184, 184, 184, 184,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 185,
	185, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 213, 213, 213, 213, 213, 213,
	213, 213, 213, 213, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
	214, 214, 214, 215, 215, 215, 215, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 301, 301,
	301, 301, 301, 301, 301, 301, 303, 303, 304, 304,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 302, 302,
	302, 302, 302, 302, 302, 302, 302, 302, 310, 310,
	311, 311, 313, 313, 314, 314, 315, 316, 316, 316,
	317, 318, 318, 312, 312, 319, 319, 319, 320, 320,
	321, 321, 321, 321, 321, 227, 227, 227, 228, 228,
	229, 235, 235, 235, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	127, 127, 127, 127, 127, 159, 159, 224, 224, 222,
	222, 222, 226, 226, 178, 178, 271, 271, 271, 271,
	271, 271, 271, 179, 179, 179, 186, 180, 180, 181,
	181, 181, 181, 181, 181, 218, 219, 182, 182, 182,
	220, 220, 230, 234, 234, 233, 232, 232, 231, 231,
	208, 208, 209, 209, 207, 206, 167, 167, 166, 166,
	165, 165, 335, 335, 236, 236, 168, 168, 169, 161,
	161, 247, 247, 247, 247, 155, 155, 134, 134, 156,
	156, 130, 130, 133, 133, 131, 131, 131, 131, 149,
	149, 150, 150, 128, 128, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 273, 273, 273, 223,
	122, 122, 122, 123, 123, 124, 124, 278, 278, 278,
	279, 279, 279, 279, 277, 277, 277, 277, 277, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 285, 285, 285, 285, 285, 285, 285,
	285, 285, 285, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 287,
	287, 287, 287, 287, 287, 287, 287, 287, 287, 286,
	286, 286, 286, 286, 286, 286, 286, 286, 286, 286,
	286, 286, 286, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288, 288, 288, 288, 288, 288,
	288, 288, 288, 288, 288,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 0, 1, 2, 1, 2, 1, 2, 1,
	2, 2, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 3, 1, 1, 1, 1, 3, 4, 6, 6,
	6, 5, 5, 4, 12, 4, 12, 1, 3, 2,
	5, 3, 6, 4, 6, 6, 6, 4, 8, 3,
	3, 3, 6, 4, 3, 2, 1, 1, 0, 2,
	0, 2, 0, 2, 0, 7, 2, 6, 2, 1,
	1, 1, 3, 3, 0, 2, 0, 2, 1, 3,
	5, 0, 4, 6, 7, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 2, 3, 1, 2, 1, 2, 2, 6, 3,
	2, 2, 2, 2, 2, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 2, 4, 6, 3,
	4, 6, 3, 4, 6, 3, 3, 5, 3, 3,
	5, 3, 1, 3, 1, 2, 2, 3, 2, 2,
	5, 3, 1, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 1,
	1, 3, 1, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 2, 6, 2,
	1, 2, 2, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 2, 3, 2, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 3,
	4, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 3, 3, 1, 3, 3, 1, 1, 2,
	2, 1, 0, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 2, 2, 3, 3, 1, 1,
	1, 1, 1, 2, 2, 3, 3, 4, 4, 3,
	4, 4, 4, 3, 2, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 2, 3,
	3, 3, 2, 3, 4, 3, 5, 3, 4, 5,
	2, 3, 3, 3, 4, 2, 3, 4, 3, 3,
	3, 4, 4, 4, 4, 2, 3, 5, 5, 6,
	2, 2, 0, 2, 0, 3, 2, 7, 10, 6,
	9, 1, 0, 1, 3, 1, 1, 1, 1, 8,
	0, 1, 1, 0, 3, 2, 0, 3, 1, 2,
	2, 3, 6, 2, 1, 1, 2, 4, 2, 5,
	7, 8, 5, 3, 1, 4, 6, 5, 10, 1,
	1, 4, 0, 3, 0, 2, 2, 2, 0, 1,
	1, 2, 2, 0, 3, 3, 2, 1, 1, 2,
	2, 1, 2, 1, 4, 2, 4, 3, 3, 0,
	6, 3, 11, 14, 4, 1, 0, 1, 3, 3,
	3, 5, 2, 0, 1, 1, 0, 6, 6, 8,
	8, 10, 8, 10, 6, 8, 6, 8, 1, 0,
	2, 0, 2, 2, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 0, 1, 3, 1, 1, 1, 2,
	3, 2, 2, 8, 11, 3, 3, 0, 3, 0,
	3, 0, 3, 0, 1, 0, 6, 7, 3, 6,
	3, 1, 3, 1, 4, 2, 8, 5, 4, 3,
	0, 2, 2, 0, 8, 3, 2, 0, 1, 3,
	1, 1, 3, 5, 5, 1, 1, 3, 3, 1,
	2, 3, 2, 3, 4, 2, 1, 1, 1, 2,
	8, 8, 2, 1, 2, 1, 2, 4, 4, 4,
	2, 2, 2, 2, 3, 1, 3, 6, 1, 0,
	1, 0, 1, 0, 1, 1, 0, 1, 1, 0,
	1, 0, 3, 1, 3, 2, 4, 5, 2, 2,
	1, 1, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 2,
	2, 3, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 7, 4, 6, 3,
	3, 1, 5, 5, 0, 2, 3, 1, 3, 2,
	0, 3, 4, 5, 4, 5, 4, 5, 2, 4,
	1, 1, 0, 5, 0, 2, 2, 2, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 0, 2, 5, 2, 1, 1, 3,
	4, 0, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 3, 2, 2, 2,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 5,
	6, 6, 7, 1, 2, 1, 2, 1, 1, 2,
	1, 3, 1, 1, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 3, 3, 1, 3, 3, 1, 3, 3,
	1, 1, 1, 1, 6, 6, 4, 3, 4, 3,
	4, 3, 4, 4, 3, 6, 5, 5, 5, 4,
	8, 6, 6, 4, 4, 3, 4, 3, 5, 0,
	5, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 4, 3, 5, 4, 3,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 1, 3, 1, 3, 3,
	3, 2, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 0, 2, 2, 3, 2, 1,
	1, 3, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 2, 2, 1, 1, 1, 2,
	1, 2, 1, 0, 1, 1, 1, 3, 3, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 3, 1,
	3, 1, 2, 3, 1, 1, 1, 2, 2, 1,
	3, 3, 0, 1, 2, 1, 1, 1, 1, 6,
	2, 1, 5, 1, 1, 1, 1, 2, 2, 3,
	1, 1, 1, 1, 0, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -20, -22, -26, -27, -48,
	-34, -35, -36, -47, -42, -49, -43, -50, -51, -44,
	-55, -54, -56, -59, -57, -52, -53, -60, -68, -88,
	-89, -90, -91, -5, -6, -7, -8, 23, 34, -23,
	-24, 47, 67, -28, -29, -30, -31, 69, -32, -33,
	89, -308, 93, -37, -38, -39, -41, -40, 97, 104,
	106, 124, 130, 212, 218, 238, 240, 242, 249, -98,
	-100, 236, 237, -61, -62, -63, -64, -92, 260, -69,
	-70, -71, -72, -73, -74, -75, -76, -77, -78, -79,
	-80, -81, -82, -83, -84, -85, -86, 263, -21, -25,
	-58, 300, -9, -10, -13, -12, -11, -16, -18, -15,
	-17, -19, -14, -306, -101, -99, 351, 309, 35, 272,
	61, 100, 244, 325, 332, -104, 253, -102, -103, 317,
	281, 355, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 2, 281, 320, 82, 139,
	-324, 2, -156, 281, 82, -131, -122, 344, 4, -285,
	-287, 20, 21, 23, 33, 34, 35, 40, 44, 47,
	48, 55, 60, 61, 62, 64, 66, 67, 68, 71,
	72, 80, 81, 83, 85, 89, 91, 93, 96, 97,
	99, 104, 105, 106, 112, 113, 118, 120, 125, 130,
	131, 132, 133, 140, 143, 145, 138, 155, 156, 157,
	159, 160, 161, 164, 163, 168, 171, 174, 176, 177,
	178, 181, 179, 183, 184, 186, 185, 191, 193, 194,
	196, 199, 202, 205, 208, 209, 210, 211, 212, 214,
	216, 218, 220, 221, 222, 223, 224, 226, 227, 229,
	230, 231, 232, 233, 236, 234, 235, 237, 238, 239,
	240, 242, 244, 245, 247, 261, 262, 273, 249, 250,
	251, 252, 256, 254, 257, 258, 260, 263, 265, 268,
	271, 272, 274, 277, 275, 270, 280, 282, 283, 284,
	285, 286, 287, 288, 295, 296, 300, 301, 302, 303,
	306, 307, 308, 309, 311, 314, 315, 316, 321, 326,
	327, 328, 329, 330, 28, 36, 37, 38, 39, 41,
	42, 45, 46, 51, 52, 53, 56, 84, 86, 87,
	103, 107, 108, 114, 115, 116, 126, 128, 134, 135,
	144, 146, 147, 148, 149, 150, 152, 166, 180, 190,
	192, 203, 207, 215, 217, 225, 246, 255, 266, 267,
	276, 278, 290, 291, 292, 297, 298, 313, 317, 318,
	354, 354, 2, 156, 222, -130, -122, 82, 354, 354,
	354, 354, 281, 2, 310, 320, -187, 82, 305, 354,
	354, -122, 218, 22, 2, 91, 143, 308, 307, 22,
	214, 254, 283, 285, 2, 354, 354, 354, 354, 354,
	2, 320, 281, 139, 82, 310, -122, 2, -46, 2,
	351, -45, -4, -27, -36, -47, -42, -43, -57, -68,
	-34, -50, -90, -91, -328, 2, 22, -329, -330, 69,
	97, 124, 253, 143, 91, 307, -277, 4, -285, -287,
	-286, -288, 58, 70, 123, 142, 136, 154, 158, 167,
	169, 182, 204, 206, 243, 264, 22, 24, 25, 26,
	27, 29, 30, 31, 32, 43, 49, 50, 54, 57,
	59, 65, 69, 73, 74, 76, 75, 77, 78, 79,
	88, 90, 92, 94, 95, 98, 100, 102, 109, 110,
	111, 119, 121, 122, 124, 127, 129, 137, 139, 141,
	151, 153, 162, 165, 170, 172, 173, 187, 188, 189,
	195, 197, 198, 200, 201, 213, 219, 228, 241, 253,
	259, 269, 279, 281, 289, 293, 294, 299, 304, 305,
	310, 312, 319, 320, 322, 323, 324, 325, 156, 2,
	-122, 2, -324, 2, 156, 2, -328, 2, -122, 2,
	-126, 2, 249, -122, -87, 257, 2, 4, 22, 82,
	181, 259, 290, 354, 354, 354, 171, 55, 246, 257,
	-66, 296, -65, 290, -276, -67, 2, -157, 181, -122,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 2, -87, 257,
	34, 55, 22, 60, 83, 125, 139, 140, 160, 65,
	66, 221, 171, 157, 295, 161, 258, 282, 296, 69,
	311, 286, 105, 354, 354, 354, -332, 2, 281, -99,
	-101, -100, -145, -146, 304, 151, 102, 201, -98, -100,
	2, -306, -281, 2, -274, -237, 9, 299, 109, 197,
	-280, 8, 343, -273, -279, 5, 7, 342, 4, -285,
	-287, -286, -333, 2, 296, 296, 2, -333, 2, -333,
	2, -125, 2, 296, 293, -309, 226, -305, -122, -309,
	354, -142, -143, 2, 22, 94, 354, 356, 354, -169,
	2, 351, -245, 2, -130, 198, -3, 2, -245, 134,
	-130, 2, -245, 134, 2, -122, 2, -133, 134, -130,
	293, 356, -156, -149, -122, -207, -206, 353, -213, 2,
	-215, 342, 343, 337, 187, 331, -227, -217, -230, 103,
	246, 351, -130, -216, 357, 9, -303, -100, 29, -228,
	-229, 49, -122, 7, 8, 5, 6, -128, -254, -223,
	-263, 299, 109, 189, -301, -302, 4, -285, -278, -255,
	-265, -259, -262, 152, 58, 74, 75, 78, 76, 79,
	259, 310, 50, 28, 107, 108, 207, 215, 278, 297,
	298, 134, 190, 135, 56, 126, 166, 96, 37, 39,
	41, 42, 51, 52, 84, 86, 87, 114, 115, 116,
	144, 146, 147, 148, 149, 150, 192, 225, 266, 276,
	291, 292, 318, -286, -266, -267, -260, -261, -268, -213,
	2, 122, 351, -166, -167, -206, -207, 2, -157, 134,
	-122, 2, -157, 2, 139, -122, 134, 2, -122, 22,
	122, 2, 153, 2, 153, 2, -246, 2, -245, -158,
	134, 2, -157, -158, 134, 2, -134, 134, 2, -133,
	-122, 134, 2, -149, 134, 2, -183, 351, -251, 2,
	-250, -279, 317, 354, 354, 354, 354, 354, 197, 356,
	-213, -225, 351, 122, -213, 197, -122, -87, 330, 2,
	2, 261, 2, 351, -66, 53, 296, -200, 2, -201,
	-119, -120, -121, 155, 220, 224, 330, 293, 336, 122,
	-281, -138, 88, -160, 353, -87, 2, -283, 2, -280,
	9, 261, 2, 221, 258, 55, 122, 2, 2, -325,
	2, 197, 122, 2, 122, 2, 122, 2, 122, 2,
	122, 2, 2, 221, 258, 2, 119, 2, 295, 2,
	2, 122, 2, 155, 220, 273, 2, 281, 320, 2,
	122, 122, -172, -245, -145, -146, -171, -190, -191, 170,
	111, 195, -174, 22, 94, -174, -174, 44, 352, 352,
	8, 7, 7, -199, -200, -199, 293, -126, 356, -309,
	-150, 351, -161, -247, -213, 344, -161, -169, -168, -236,
	-213, 88, 344, -130, 351, -109, 234, -108, 21, 23,
	97, 315, 103, 270, 287, 250, 234, 103, 234, 270,
	287, 250, 234, 103, 357, -283, -131, 356, -277, 344,
	10, 11, 57, 33, 342, 343, 344, 345, 117, 346,
	347, 340, 341, 339, 334, 335, 336, 63, 175, 248,
	13, 14, 15, 26, 200, 169, 331, 136, 264, 337,
	16, 17, 18, 154, 36, 137, -127, -135, -213, -213,
	-213, -213, -213, 206, -165, -208, 349, -100, 351, 351,
	-100, -213, -159, 351, 7, -100, -222, 349, -231, -213,
	-166, 351, 5, 351, 5, -310, 326, 119, 351, 351,
	351, 351, 351, 351, 351, 351, 351, 351, 351, 351,
	351, 351, 351, 351, 351, 351, 217, -272, 321, -272,
	-272, -256, 351, -256, -257, 351, -256, 327, 332, 351,
	274, 352, -155, -130, -167, 351, -144, 187, -118, -307,
	325, -144, 351, -123, 134, 2, -122, -307, 187, -246,
	-132, -130, -132, 260, -122, 30, -111, 356, 48, 239,
	103, -111, 103, -111, 356, 103, 103, 103, -159, -213,
	352, 356, -324, -330, 30, -224, -252, -253, -255, -264,
	-258, -262, -263, 40, 46, 45, 288, 180, 255, 267,
	313, 38, 196, 145, 144, 146, 147, 148, 149, 150,
	266, 37, 225, 115, 116, 114, 96, 87, 86, 192,
	42, 41, -266, -267, -260, -261, 84, 291, 292, 152,
	39, 52, 51, 318, 276, -284, -283, -324, -65, -276,
	-159, 30, -200, 2, 356, 168, -137, 174, 186, 131,
	198, 328, -282, 5, 4, -223, -237, 88, 171, -263,
	-275, 88, -281, -275, 88, 72, 353, -277, -157, 22,
	262, 2, -276, -327, 119, -324, -276, -276, -276, -276,
	-276, 257, -46, 119, -122, 168, -276, 2, -276, 2,
	281, 139, 281, -111, 356, -171, -191, -190, -192, -213,
	22, -195, 113, 183, -213, -215, -99, -99, -99, -147,
	-241, -213, 219, 139, -126, -305, 30, -149, -152, 356,
	122, 30, 4, -152, 356, 352, -130, 356, 293, -188,
	65, 59, -203, 134, 59, -289, -122, 65, -290, 54,
	305, 219, 121, -188, 65, -188, 65, 65, -245, 33,
	-57, 122, 293, -245, 293, 33, -57, 122, 293, -133,
	-277, -249, 333, -122, -270, -252, -269, 230, 231, 229,
	233, 232, -252, -277, 290, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
	-213, -213, -213, -213, -213, -213, -213, 169, 136, 264,
	36, 137, -213, 293, -213, -213, -213, -213, 179, 187,
	189, 299, 109, 306, 94, 193, -335, 279, 32, -220,
	-100, 351, -235, 27, 269, 22, -227, 246, 351, -208,
	-213, -209, -159, 352, 352, 356, -159, -226, 350, -222,
	-234, -233, 322, 352, -159, 319, 22, 94, 344, 2,
	7, -184, 329, 178, 85, 132, 177, -185, 252, -311,
	112, 127, 351, 352, 2, 352, 2, 352, 2, -213,
	-213, -178, 2, -271, -159, 4, 329, 178, 85, 132,
	177, 252, -178, 2, -179, 2, -213, -159, -180, -214,
	-215, 342, 343, 337, 351, 246, -181, 2, -213, -159,
	-213, 43, 165, 294, -182, -213, 122, -159, -213, -213,
	-213, -159, -159, 2, -159, 2, 351, 7, 7, 290,
	290, 7, 122, 352, 356, -139, -149, -140, -122, -204,
	-203, -291, -292, -289, 139, 305, 110, 30, 103, 211,
	30, 197, 187, -114, 284, 103, -205, 323, -196, -57,
	351, 88, 30, -196, -162, -163, -248, -164, -130, 351,
	-122, -157, -158, -158, -133, -134, -122, -149, 352, 356,
	-46, -250, 293, -45, 352, 356, -151, 29, -184, 351,
	-249, 356, 122, 352, 296, -201, -136, 224, 268, 235,
	256, 356, -277, -326, -122, 257, -46, -130, -133, -130,
	-245, -193, -273, 351, 343, -194, 246, 247, 356, -107,
	31, 92, 159, -130, 351, 352, -205, -247, -154, 2,
	-243, 349, -245, -130, -100, -244, 351, -277, -205, -236,
	352, -108, -130, -122, -122, 187, -203, 134, -113, 187,
	-252, -122, 351, 351, 159, 159, -122, -122, 134, -122,
	134, -122, -122, -109, 234, -57, 351, -130, 234, -122,
	-57, 351, -122, 234, -93, 133, 193, 330, -213, -213,
	293, -335, 279, -220, -213, 179, 189, 299, 109, 306,
	94, 193, 122, 351, -214, -214, -159, -217, 351, -159,
	350, 360, 352, -213, 350, 350, 356, -232, -233, 98,
	-213, -146, 356, -145, -213, -159, -159, 352, 352, 293,
	293, 293, 293, 351, -316, 205, 351, 351, -213, 30,
	356, 352, 122, 352, 352, -186, 213, 352, 10, 11,
	342, 343, 344, 345, 117, 346, 347, 340, 341, 339,
	334, 335, 336, 63, 175, 248, 13, 14, 15, 154,
	137, -214, -214, -214, -159, 351, 352, -218, -219, 122,
	119, 30, -182, -182, -182, 352, 122, -159, 356, 356,
	356, 352, 352, 352, 7, 352, 356, 352, 330, 330,
	352, 274, 122, -130, 352, 352, 356, -123, 139, -123,
	-57, -157, 5, -57, -130, 103, -115, 99, -334, 336,
	-122, -173, 241, -213, -173, -198, 197, -155, 317, -122,
	-173, -153, 356, 122, 336, -155, -111, -111, -111, -213,
	-326, -252, 349, 349, 7, -96, 325, -283, -326, -119,
	303, 62, 224, -281, 356, -249, -194, -213, -241, -130,
	357, -45, -170, 127, -249, 356, 70, -177, 158, 182,
	123, 167, 243, 142, 7, -46, -210, 357, 351, -240,
	332, -100, -244, 351, -243, -170, 293, 293, 103, 187,
	314, -293, -290, -213, -148, -242, -122, -304, 351, -301,
	-302, -128, 351, 351, -106, 97, 260, -189, 103, -111,
	103, -111, 293, -188, 65, -159, 293, -159, 293, -96,
	122, 280, -213, -213, -214, -214, 122, 351, -213, -224,
	26, 26, 352, -159, 352, 356, -209, -213, 352, -222,
	100, -213, 289, 352, 319, -146, -146, -146, 5, 178,
	132, 177, -185, 177, -185, -185, 7, -317, -122, 351,
	323, -145, 352, -270, -252, -213, -218, -213, -270, -252,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
	-214, -214, -214, -214, -214, -214, -214, -214, -214, 94,
	187, 193, -214, 356, -159, 352, -219, -218, -213, -213,
	-252, 352, 352, 352, -159, -213, -213, -213, 352, 7,
	274, -141, 138, -204, 351, -123, 351, 351, -144, 351,
	-122, -116, 164, -334, -280, -307, -161, 188, -173, 64,
	352, -205, -163, -154, -236, 352, 350, 7, 7, 352,
	199, -122, 198, 352, -107, -277, 352, -221, 129, 44,
	-243, 158, 158, -243, -177, 158, -175, 204, -175, -175,
	-322, 351, 350, -240, -277, 349, 358, -159, 2, -239,
	-238, 30, -122, 202, 352, -221, -122, -122, -203, 103,
	-294, 65, -295, 57, 110, 69, 187, 189, 305, 219,
	54, 88, 228, 352, 352, 356, -129, -166, 57, -129,
	-213, 351, -148, -149, 187, 88, 187, 88, 81, 301,
	-122, -122, -130, -122, -122, 352, -130, 352, -122, -284,
	290, 26, 26, -213, -224, 352, -213, -213, 352, -213,
	350, -213, 5, -213, 352, 352, 352, 352, -318, -122,
	-213, 352, 352, 352, -219, 122, 94, 193, 351, -213,
	352, 352, 356, 352, 352, 352, 137, -148, 351, -149,
	-139, 30, -148, 197, -117, 163, -334, -280, -114, -197,
	351, 197, -57, -173, 336, 350, 350, 351, -107, -313,
	324, -213, -159, -243, -243, -176, 312, 197, 158, -243,
	350, 352, -323, 7, -240, -239, 7, -212, -211, 120,
	185, 352, -122, 351, -240, -313, -203, -122, -277, -122,
	110, 134, 189, 159, 351, -214, -130, -202, -331, 68,
	277, -242, -107, -277, -107, 352, -159, 352, 352, 189,
	189, -213, -252, -111, -111, 293, 293, 293, 293, -216,
	-128, -122, -213, -213, 352, 352, -146, -312, 210, 352,
	-214, 122, 351, -224, 352, -213, 208, 352, -148, 352,
	352, -57, 352, -130, -334, -280, -115, 95, -149, 65,
	-169, -100, 351, -95, -94, 5, -314, -315, -122, -176,
	351, -213, -243, -210, 352, 356, -239, 350, 356, 359,
	336, -240, 351, -149, -238, -295, -123, 187, -213, -124,
	351, -141, 351, -129, -146, 228, -110, 57, -122, -122,
	351, 351, 351, 352, -146, 44, -214, -224, 352, 352,
	-122, -202, 352, -141, -202, 351, -280, -116, 307, 188,
	352, -122, 356, 352, -97, 336, 356, 30, -149, -240,
	7, -211, -277, 349, -239, -149, 352, 103, 352, -298,
	176, -122, -149, -107, 352, -130, -105, 312, -277, -159,
	-159, -159, -319, 223, 247, -159, 352, 351, -141, -202,
	-141, -148, -117, 260, -205, -94, 5, -315, -317, 352,
	-238, 7, 352, 110, -296, -299, -297, 197, 123, 209,
	265, 352, 352, -144, -213, 352, 352, -146, 352, -320,
	-321, 36, 302, 72, -213, -320, -149, -141, 352, -162,
	350, -122, -297, 197, -299, 197, 307, 91, -298, 352,
	-321, 216, 118, 246, 216, 118, 352, -202, -205, -300,
	184, 239, 48, 260, -300, -296, 26, -112, 48, 239,
	-141, 20, 189, 88, -321,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 7, 8, 9, 10,
	12, 14, 16, 17, 19, 21, 23, 24, 26, 28,
	30, 32, 34, 36, 38, 39, 41, 43, 44, 45,
	46, 48, 50, 53, 55, 57, 59, 0, 0, 135,
	137, 0, 0, 144, 146, 148, 150, -2, 153, 155,
	0, 0, 0, 166, 168, 170, 172, 174, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 615,
	-2, 0, 0, 261, 263, 265, 267, 268, 0, 319,
	321, 323, 325, 327, 329, 331, 333, 335, 337, 339,
	341, 343, 345, 347, 348, 350, 352, 0, 538, 540,
	542, -2, 62, 63, 64, 65, 66, 72, 73, 74,
	75, 68, 70, 650, -2, 661, 0, 0, -2, 0,
	-2, -2, -2, 0, 0, 628, -2, 633, 635, 0,
	0, -2, 6, 11, 13, 15, 18, 20, 22, 25,
	27, 29, 31, 33, 35, 37, 40, 42, 47, 49,
	51, 54, 56, 58, 60, 61, 0, 0, 0, 0,
	0, 116, 240, 0, 1211, 1139, 1145, 1146, 1170, 1171,
	1172, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
	1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
	1208, 1209, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1218,
	1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228,
	1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238,
	1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
	1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258,
	1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268,
	1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278,
	1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
	1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298,
	1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308,
	1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318,
	1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328,
	1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338,
	1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348,
	1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358,
	1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368,
	1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378,
	1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
	1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	136, 138, 139, 0, 0, 0, 1141, 1211, 145, 147,
	149, 151, 0, 157, 0, 0, 0, 0, 505, 154,
	156, 231, 1270, 233, 235, 0, 0, 0, 0, 160,
	161, 162, 163, 164, 165, 167, 169, 171, 173, 175,
	176, 0, 0, 0, 0, 0, 230, 228, 198, 199,
	0, 212, 213, 214, 215, 216, 218, 219, 202, 203,
	204, 206, 208, 210, 0, 237, 243, 244, 245, 247,
	248, 249, 250, 251, 252, 253, 420, 1184, 1185, 1186,
	1187, 1188, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406,
	1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
	1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
	1437, 1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446,
	1447, 1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456,
	1457, 1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466,
	1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
	1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
	1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 0, 426,
	226, 224, 0, 118, 0, 535, 0, 239, 536, 537,
	532, 533, 1297, 561, 256, 0, 258, 358, 359, 360,
	361, 362, 0, 262, 264, 266, -2, -2, 1385, -2,
	274, -2, 284, 1391, 0, 287, 288, 293, -2, 194,
	320, 322, 324, 326, 328, 330, 332, 334, 336, 338,
	340, 342, 344, 346, 349, 351, 353, 354, 355, 0,
	0, 0, 359, 0, -2, -2, 0, 0, 0, 0,
	0, -2, 0, -2, 0, 0, -2, -2, 0, 0,
	-2, 0, 0, 539, 541, 543, 0, 495, 652, -2,
	626, 627, -2, 0, 656, 656, 656, 0, 0, 627,
	625, 0, 259, 260, 296, 297, 298, 307, 308, 309,
	310, 491, 0, 493, 317, 318, 1166, 0, 1180, 1181,
	1182, 1183, 563, 545, 554, 563, 547, 548, 549, 550,
	551, 552, 553, 556, 0, 642, 1276, 645, 1152, 643,
	629, 0, 0, 632, 658, 657, 634, 0, 636, 689,
	690, 0, 640, 641, 743, 0, 2, 67, 0, 1367,
	743, 69, 0, 1367, 71, 0, 76, 0, 1367, 1144,
	0, 0, 241, 242, 1149, 1147, 1148, 0, 140, 141,
	851, 0, 0, 0, 0, 0, 0, 943, 945, 1359,
	1385, 0, 947, 948, 0, 950, 952, 953, 0, 956,
	957, 1109, 1141, 1155, 1156, 1157, 1158, 0, 0, 1161,
	0, 1163, 1164, 1165, 1009, 967, -2, -2, 1153, 779,
	780, 781, 782, -2, 1399, 971, 974, 977, 980, 981,
	982, 983, 0, 1343, 1360, 1361, 1381, 1382, 1390, 1394,
	1395, 1367, 1378, 1368, 1355, 1365, 1376, 1217, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1179, 813, 814, 819, 820, 822, 142,
	143, 0, 0, 1142, 1118, 1116, 1117, 152, 474, 1367,
	-2, 497, 474, 501, -2, 649, 1367, 575, 232, 234,
	0, 159, 0, 588, 0, 590, 0, 605, 749, 108,
	1367, 179, 192, 108, 1367, 182, 108, 1367, 185, 1137,
	186, 1367, 188, 189, 1367, 191, 227, 0, 0, -2,
	220, 222, -2, 217, 205, 207, 209, 211, 0, 0,
	425, 0, 0, 0, 534, 0, 560, 257, 363, 364,
	269, 0, 271, 0, 273, 1354, -2, 276, 277, 564,
	566, 567, 568, 0, 0, 0, 0, 0, 0, 0,
	289, 290, 291, 195, 0, 356, 357, 365, 366, 119,
	120, 0, 369, 390, 402, 0, 0, 373, 375, 424,
	377, 0, 0, 379, 0, 381, 0, 383, 0, 385,
	0, 387, 389, 391, 403, 393, 651, 395, 0, 397,
	401, 0, 406, 0, 408, 409, 410, 0, 0, 416,
	0, 0, 108, 747, -2, 0, 621, 670, 671, 0,
	0, 0, 0, 654, 655, 0, 0, 0, 617, 618,
	492, 1168, 1167, 544, 562, 546, 0, 558, 0, 644,
	0, 0, 694, 1129, 1133, 1134, 694, 691, 0, 1126,
	1124, 1125, 744, 745, 0, 77, 529, 87, 0, 529,
	529, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 734, 1140, 0, 1114, 1115,
	0, 0, 0, 0, 1044, 1045, 1046, 1047, 1048, 1049,
	1052, 1053, 1050, 1051, 1054, 1055, 1056, 0, 0, 0,
	1057, 1058, 1059, 0, 0, 1061, 0, 1063, 0, 0,
	0, 0, 0, 0, 1123, 0, 0, 1060, 856, 857,
	858, 880, 881, 0, 944, 1120, 1113, 946, 0, 0,
	-2, 1065, 0, 0, 949, 954, 955, 0, 0, 1108,
	-2, 0, 1160, 0, 848, 1011, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1088, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 798, 816, 827, 824,
	823, 800, 0, 799, 797, 0, 801, 0, 0, 0,
	132, 0, 0, 1135, 1119, 432, 0, 0, 496, 0,
	648, 0, 0, 0, 1367, 504, 1173, 577, 0, 753,
	0, 591, 0, 0, 750, 0, 177, 0, 106, 107,
	0, 180, 0, 183, 0, 0, 0, 0, 0, 1065,
	651, 0, 0, 246, 651, 0, 1067, 761, 762, 763,
	764, 765, 848, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 810, 0, 785, 785, 785,
	802, 803, 811, 812, 817, 818, 829, 830, 832, 834,
	828, 828, 828, 825, 826, 734, 121, 0, 270, 0,
	0, 0, 278, 279, 0, 0, 569, 304, 305, 306,
	571, 572, 285, 311, 312, 313, 314, 315, 316, 0,
	280, 282, 294, 281, 283, 286, 0, 196, 367, 368,
	370, 371, 372, 376, 0, 421, 378, 380, 382, 384,
	386, 394, 398, 651, 404, 407, 411, 412, 413, 414,
	0, 0, 0, 494, 0, 624, 668, 669, 672, 676,
	677, 680, 683, 684, 674, 851, 637, 638, 639, 662,
	663, 516, 0, 0, 557, 646, 0, 0, 753, 0,
	0, 0, 1132, 753, 0, 1128, 0, 0, 0, 0,
	0, 528, 89, 1367, 0, 110, 0, 0, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	1143, 124, 0, 1150, 852, 757, 758, 804, 805, 806,
	807, 808, 853, 854, 0, 859, 860, 861, 862, 863,
	864, 865, 866, 867, 868, -2, -2, -2, 872, 873,
	874, -2, -2, -2, 878, 879, -2, 1062, 1064, 0,
	1123, 0, -2, 0, -2, -2, -2, -2, 892, 0,
	894, 897, 899, 901, 0, 0, 0, 0, 1122, 911,
	1100, 0, 0, 1041, 1042, 1043, 896, 0, 0, 1121,
	1112, 0, 0, -2, 951, 0, 0, 0, 1071, 1072,
	1107, 1103, 0, 958, 661, 0, 0, 0, 0, 965,
	0, 1169, 835, 836, 837, 838, 839, 840, 849, 1019,
	0, 0, 0, 972, 973, 975, 976, 978, 979, 0,
	0, 0, 987, 0, 1075, -2, -2, -2, -2, -2,
	-2, -2, 0, 989, 0, 991, 1065, 1085, 0, 0,
	914, 0, 0, 0, 0, 1385, 0, 994, 1065, 1093,
	0, 0, 0, 0, 0, 1065, 0, 1099, 0, 0,
	0, 0, 0, 1005, 0, 1007, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 431, 1149, 433,
	435, 436, 437, 438, 1174, 0, 1174, 0, 0, 0,
	0, 0, 0, 579, 585, 0, 603, 0, 603, 593,
	0, 0, 0, 603, 607, 608, 610, 611, 0, 0,
	751, 193, 108, 108, 1138, 108, 187, 190, 229, 0,
	200, 221, 0, 223, 225, 0, 754, 756, 766, 0,
	131, 0, 0, 272, 0, 565, 570, 0, 301, 0,
	303, 0, 197, 423, 254, 396, 399, 417, 418, 734,
	748, 0, 678, 0, 0, 675, 681, 682, 0, 665,
	514, 515, 0, 0, 651, 1151, 686, 1130, 734, 693,
	695, 651, 705, 743, 720, 711, 0, 1131, 686, 1127,
	746, 88, 518, 0, 0, 0, 91, 1367, 99, 0,
	446, 0, 0, 0, 0, 0, 531, 100, 1367, 108,
	1367, 108, 101, 78, 529, 79, 0, 524, 0, 517,
	80, 0, 526, 0, 131, 0, 0, 0, -2, -2,
	0, 0, 0, 912, -2, 893, 895, 898, 900, 902,
	0, 0, 0, 0, 0, 0, 0, 913, 0, 0,
	1110, 1113, -2, 1066, 1069, 1070, 0, 0, 1104, 0,
	0, 0, 0, 660, 661, 661, 661, 964, 0, 0,
	0, 0, 0, 0, 966, 0, 0, 0, 0, 0,
	0, 986, 0, 988, 990, 0, 0, 992, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 917, 918, 919, 0, 0, 993, 1091, 1092, 0,
	0, 0, 0, 0, 0, 999, 0, 1098, 0, 0,
	0, 1003, 1004, 1006, 0, 783, 0, 809, 831, 833,
	821, 133, 0, 1136, 440, 473, 0, 0, 1174, 0,
	429, 474, 498, 500, 0, 0, 581, 585, 0, 584,
	649, 158, 0, 752, 586, 603, 0, 0, 595, 592,
	589, 753, 0, 0, 0, 0, 178, 181, 184, 1066,
	236, 1068, 0, 0, 0, 117, 0, 122, 238, 275,
	299, 300, 302, 295, 0, 419, 0, 0, 664, 516,
	0, 0, 688, 0, 692, 0, 0, 0, 0, 0,
	740, 740, 740, 738, 714, 0, 720, 0, 0, 732,
	0, -2, 711, 0, 0, 688, 0, 0, 0, 0,
	109, 444, 463, 0, 0, 507, 513, 513, 0, 968,
	969, 0, 0, 0, 93, 0, 0, 0, 0, 97,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 115,
	0, 0, 855, -2, 0, 0, 0, 0, -2, 0,
	0, 0, 1101, 0, 1036, 0, 0, 1112, -2, 1073,
	1102, 1106, 0, 959, 0, 0, 0, 0, 1162, 841,
	842, 843, 844, 845, 846, 847, 0, 1017, 1018, 1022,
	0, 0, 970, 0, 0, 1074, 1084, 1086, 915, 916,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	-2, -2, -2, 933, 934, 935, -2, -2, -2, 0,
	0, 0, 1087, 0, 0, 1039, 1089, 1090, 1095, 1096,
	0, 996, 997, 998, 1097, 0, 0, 0, 815, 0,
	134, 427, 0, 434, 0, 0, 0, 432, 0, 0,
	0, 583, 585, 0, 576, 577, 601, 602, 587, 600,
	0, 603, 609, 606, 612, 0, 759, 0, 0, 767,
	0, 255, 673, 679, 666, 516, 647, 1013, 0, 0,
	696, 0, 0, 0, 0, 0, 735, 739, 736, 737,
	0, 0, 720, 732, 702, 0, 0, 0, 709, 710,
	731, 0, 730, 719, -2, 1013, 520, 522, 90, 0,
	445, 0, 448, 0, 0, 0, 0, 454, 455, 0,
	0, 0, 0, 465, 472, 0, 516, 1154, 0, 516,
	0, 0, 0, 0, 0, 105, 0, 0, 530, 0,
	108, 108, 519, 0, 0, 0, 525, 0, 527, 123,
	0, 0, 0, -2, 0, 905, -2, -2, 1035, 1066,
	1111, 1105, 1159, 661, 960, 962, 963, 850, 1024, 1021,
	0, 1008, 984, 985, 1083, 0, 0, 0, 0, 1066,
	1038, 995, 0, 1001, 1002, 784, 0, 0, 0, 0,
	0, 0, 0, 0, 573, 585, 0, 578, 579, 0,
	0, 0, 594, 604, 0, 760, 755, 0, 667, 630,
	0, 687, 685, 722, 0, 724, 0, 0, 0, 726,
	705, 715, 0, 717, 732, 707, 0, 0, 700, 0,
	699, 720, 728, 0, 0, 631, 92, 0, 449, 450,
	1174, 0, 453, 456, 0, 458, 1176, 440, 0, 469,
	470, 508, 509, 512, 510, 513, 661, 467, 0, 94,
	95, 104, 112, 96, 102, 0, 0, 0, 0, 733,
	0, 0, -2, -2, 906, 1037, 0, 661, 0, 1010,
	-2, 0, 0, 0, 1040, 0, 0, 472, 0, 462,
	440, 430, 472, 0, 0, 580, 581, 0, 0, 0,
	613, 614, 0, 0, 128, 126, 1012, 1014, 0, 723,
	0, 742, 725, 720, 716, 0, 713, 703, 0, 704,
	0, 732, 0, 0, 712, 447, 451, 0, 0, 478,
	0, 466, 0, 516, 0, 0, 114, 0, 521, 523,
	0, 0, 0, 961, 1027, 0, -2, 0, 941, 1000,
	0, 440, 472, 428, 440, 0, 582, 583, 0, 597,
	753, 599, 0, 130, 127, 0, 0, 0, 0, 0,
	718, 701, 697, 0, 708, 0, 729, 0, 457, 483,
	0, 0, 0, 511, 959, 474, 98, 0, 111, 0,
	0, 661, 0, 0, 0, 1023, 942, 0, 460, 440,
	502, 0, 574, 0, 598, 129, 125, 1015, 1016, 741,
	706, 0, 727, 0, 459, 479, 480, 0, 475, 476,
	477, 1175, 471, 478, 113, 84, 86, 0, 1020, 1025,
	1028, -2, 1327, 1208, 0, 1026, 0, 461, 472, 753,
	698, 452, 481, 0, 482, 0, 0, 0, 483, 0,
	0, 1030, 1031, 1032, 1033, 1034, 443, 440, 596, 484,
	0, 487, 488, 0, 485, 468, 0, 439, 441, 442,
	503, 486, 489, 490, 1029,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 340, 3, 346, 341, 3,
	351, 352, 344, 342, 356, 343, 353, 345, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 360, 355,
	334, 336, 335, 3, 357, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 349, 3, 350, 347, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 358, 339, 359, 337,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 338, 57677, 348, 57678, 354, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:862
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:868
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:874
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:885
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			return helpWith(sqllex, "DELETE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:897
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:899
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:901
		{
			return helpWith(sqllex, "GRANT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:904
		{
			return helpWith(sqllex, "INSERT")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:906
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:908
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:910
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:912
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:914
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:916
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:922
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:924
		{
			return helpWith(sqllex, "RESET")
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:931
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:935
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:943
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:945
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 61:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "ALTER")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:964
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:979
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:993
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:999
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1005
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1011
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.tableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1017
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1021
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1027
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1031
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.tableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 89:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1053
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1058
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1063
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1068
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1073
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1077
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 96:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1080
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1100
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 99:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1103
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1110
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1129
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1139
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1143
		{
			sqlVAL.union.val = nil
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = DropCascade
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = DropRestrict
		}
	case 108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = DropDefault
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1163
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 110:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 111:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1172
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1173
		{
		}
	case 113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1176
		{
			return unimplemented(sqllex, "alter using")
		}
	case 114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1177
		{
		}
	case 115:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1181
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1184
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1191
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1215
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1225
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1229
		{
			sqlVAL.str = ""
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = KVOption{Key: sqlDollar[1].str, Value: sqlDollar[2].str}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1241
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 130:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1251
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 131:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1254
		{
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1258
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1262
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1266
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 138:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1275
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1276
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1280
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1283
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 142:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1287
		{
			/* SKIP DOC */
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1290
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 145:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1297
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1303
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 152:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1305
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1307
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			return helpWith(sqllex, "CREATE")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1315
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retClause()}
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1318
		{
			return helpWith(sqllex, "DELETE")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1323
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1326
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1327
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1328
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 164:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1329
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1330
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1337
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1339
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1341
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1343
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1345
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1346
		{
			return helpWith(sqllex, "DROP")
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1354
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1357
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1361
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1368
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1380
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1387
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1398
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.nameList(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.nameList(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1409
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1413
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1417
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1433
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1437
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1447
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1465
		{
			return helpWith(sqllex, "DELETE")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1467
		{
			return helpWith(sqllex, "INSERT")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1469
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1479
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1480
		{ /* SKIP DOC */
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1485
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 226:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1521
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1533
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 231:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1560
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1568
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			return helpWith(sqllex, "GRANT")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1587
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1591
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1601
		{
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1652
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1659
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[2].str)}, SetMode: SetModeReset}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1663
		{
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name(sqlDollar[3].str)}, SetMode: SetModeReset}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1666
		{
			return helpWith(sqllex, "RESET")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1671
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1674
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1680
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1682
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1684
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1685
		{ /* SKIP DOC */
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1686
		{ /* SKIP DOC */
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1687
		{
			return unimplemented(sqllex, "set local")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = sqlDollar[4].union.stmt()
			sqlVAL.union.val.(*Set).SetMode = SetModeClusterSetting
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1695
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1701
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1707
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1722
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1725
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 278:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1727
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1730
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1734
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1738
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1742
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1746
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1755
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1758
		{
			return unimplemented(sqllex, "set from current")
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1766
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Set{Name: UnresolvedName{Name("client_encoding")}, SetMode: SetModeReset}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1776
		{
		}
	case 292:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1778
		{
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1785
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1789
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1811
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1815
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1825
		{
			sqlVAL.union.val = Low
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1829
		{
			sqlVAL.union.val = Normal
		}
	case 306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1833
		{
			sqlVAL.union.val = High
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1854
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1869
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1873
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1878
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1882
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1892
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1896
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1900
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1902
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1904
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1906
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 336:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1908
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1910
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1912
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1914
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1916
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1918
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 349:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1921
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 351:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1923
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1925
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1926
		{
			return helpWith(sqllex, "SHOW")
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1929
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1930
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[3].str}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1931
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1942
		{
			sqlVAL.str = "client_encoding"
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1945
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1946
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1950
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1953
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1957
		{
			sqlVAL.union.val = &Show{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers), ClusterSetting: true}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1961
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1966
		{
			sqlVAL.union.val = &Show{Name: "all", ClusterSetting: true}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1969
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1983
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1987
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1990
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1994
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1997
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1999
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2002
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2007
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2011
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2014
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2016
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2019
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 388:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2023
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 390:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2032
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 392:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2041
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 394:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2045
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2048
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2053
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2055
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2059
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2068
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2070
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2074
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2084
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2087
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2091
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2095
		{
			/* SKIP DOC */
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2099
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2102
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2106
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2109
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2116
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2120
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2123
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2127
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2131
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.tableWithIdx()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2135
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName(), AsOf: sqlDollar[6].union.asOfClause()}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &Help{Name: Name(sqlDollar[2].str)}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2147
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2152
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2158
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 424:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2162
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2169
		{
			/* SKIP DOC */
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2172
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2181
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2187
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2191
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2198
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2214
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2220
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2234
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2245
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 443:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2249
		{
			sqlVAL.union.val = DropDefault
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2255
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2266
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2270
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2276
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2280
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2292
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2318
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2322
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2326
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2330
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2334
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2338
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2347
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2369
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2381
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2392
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2408
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2418
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2460
		{
			return unimplemented(sqllex, "match full")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2461
		{
			return unimplemented(sqllex, "match partial")
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2462
		{
			return unimplemented(sqllex, "match simple")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2463
		{
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2469
		{
		}
	case 480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2470
		{
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2471
		{
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2472
		{
		}
	case 483:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2473
		{
		}
	case 484:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2476
		{
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2479
		{
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2482
		{
			return unimplemented(sqllex, "no action")
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2485
		{
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2486
		{
			return unimplemented(sqllex, "action cascade")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			return unimplemented(sqllex, "action set null")
		}
	case 490:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			return unimplemented(sqllex, "action set default")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2492
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2496
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2500
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2507
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2510
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2515
		{
			sqlVAL.union.val = &CreateUser{Name: Name(sqlDollar[3].str), Password: sqlDollar[4].union.strPtr()}
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2518
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2522
		{
			pwd := sqlDollar[3].str
			sqlVAL.union.val = &pwd
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = (*string)(nil)
		}
	case 500:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2533
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2540
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2547
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:2558
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2569
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2573
		{
			sqlVAL.union.val = true
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = false
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2596
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2599
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2600
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 512:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2603
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2604
		{
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2608
		{
			sqlVAL.union.val = Ascending
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2612
		{
			sqlVAL.union.val = Descending
		}
	case 516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2616
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 517:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2622
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 518:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 519:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2632
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2636
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2640
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2644
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2646
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2654
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2660
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2664
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2670
		{
			sqlVAL.union.val = true
		}
	case 529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = false
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2679
		{
		}
	case 531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2680
		{
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2684
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2687
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2692
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2695
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2699
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2702
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2707
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2709
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2711
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2715
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2718
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2720
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2723
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2727
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2730
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2735
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2739
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2746
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2749
		{
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2750
		{
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2754
		{
			sqlVAL.str = ""
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2758
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2762
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 559:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2766
		{
			sqlVAL.str = ""
		}
	case 560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2772
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2776
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2782
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2786
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2792
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2796
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2806
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2810
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2826
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2832
		{
			sqlVAL.union.val = ReadOnly
		}
	case 572:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2836
		{
			sqlVAL.union.val = ReadWrite
		}
	case 573:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2852
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2862
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 577:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.str = ""
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2880
		{
			sqlVAL.str = ""
		}
	case 580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 581:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2890
		{
			sqlVAL.str = ""
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 583:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.str = ""
		}
	case 584:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2905
		{
		}
	case 585:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2906
		{
		}
	case 586:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2910
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 587:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2922
		{
			return helpWith(sqllex, "INSERT")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2926
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2932
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 591:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2940
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2944
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2950
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2954
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2958
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2964
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2968
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2974
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2978
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2980
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2986
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 602:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 603:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 604:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3002
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3005
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 606:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3009
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 607:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3010
		{
		}
	case 608:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3014
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3018
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3028
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3040
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3044
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3088
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3094
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3113
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3117
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3140
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3168
		{
			return helpWith(sqllex, "SELECT")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3187
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3198
		{
			return helpWith(sqllex, "SELECT")
		}
	case 634:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3200
		{
			return helpWith(sqllex, "VALUES")
		}
	case 636:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3202
		{
			return helpWith(sqllex, "TABLE")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3204
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3213
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3222
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3233
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3240
		{
			return helpWith(sqllex, "TABLE")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3251
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 643:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3253
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3256
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 646:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3257
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3260
		{
			return unimplemented(sqllex, "cte")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3263
		{
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3264
		{
		}
	case 650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3267
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3268
		{
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3271
		{
		}
	case 653:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3272
		{
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = true
		}
	case 655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = false
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = false
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3290
		{
			sqlVAL.union.val = true
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3295
		{
		}
	case 659:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3296
		{
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3310
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 663:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 665:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3326
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3330
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3334
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: Name(sqlDollar[4].str)}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3343
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3363
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3378
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3415
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3416
		{
		}
	case 683:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3419
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3420
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3442
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3452
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3456
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3473
		{
			return helpWith(sqllex, "VALUES")
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3475
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3487
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3492
		{
			sqlVAL.union.val = &From{}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3508
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3512
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3519
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3525
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 702:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3553
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3557
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3563
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3567
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 706:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3574
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{Expr: &TableRef{TableID: id, Columns: sqlDollar[3].union.tableRefCols()},
				Hints:      sqlDollar[5].union.indexHints(),
				Ordinality: sqlDollar[6].union.bool(), As: sqlDollar[7].union.aliasClause()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3589
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3592
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3598
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 712:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3602
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3622
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = nil
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3628
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3633
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3647
		{
			sqlVAL.union.val = true
		}
	case 720:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3651
		{
			sqlVAL.union.val = false
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3671
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3675
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3679
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3683
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3687
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3691
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3697
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3701
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3705
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3709
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3716
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3732
		{
			sqlVAL.str = astFullJoin
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3736
		{
			sqlVAL.str = astLeftJoin
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3740
		{
			sqlVAL.str = astRightJoin
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3744
		{
			sqlVAL.str = astInnerJoin
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3750
		{
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3751
		{
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3762
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 742:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3766
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3772
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3776
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3780
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 746:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3784
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3815
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3821
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 753:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3825
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3837
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3850
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3851
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 757:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3855
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3859
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3864
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3865
		{
			return unimplementedWithIssue(sqllex, 2115)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3866
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 767:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3874
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3876
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3880
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3884
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3888
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3892
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3896
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3900
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3904
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3908
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3912
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 778:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3916
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3937
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3946
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3960
		{
			sqlVAL.union.val = nil
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 787:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3979
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3983
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3995
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3999
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 795:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4003
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 796:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4007
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4011
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 799:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4034
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4043
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4052
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4056
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 804:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 805:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 806:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 807:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 808:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 809:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4085
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4089
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4107
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 816:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 821:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4139
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4155
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 826:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4173
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 827:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4178
		{
		}
	case 828:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4179
		{
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 830:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4188
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 831:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4192
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 832:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4196
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 833:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 834:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4205
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4211
		{
			sqlVAL.union.val = year
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4215
		{
			sqlVAL.union.val = month
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4219
		{
			sqlVAL.union.val = day
		}
	case 838:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = hour
		}
	case 839:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4227
		{
			sqlVAL.union.val = minute
		}
	case 840:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4231
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4237
		{
			sqlVAL.union.val = month
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = hour
		}
	case 843:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = minute
		}
	case 844:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4253
		{
			sqlVAL.union.val = minute
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4257
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 847:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 848:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = nil
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4271
		{
			sqlVAL.union.val = second
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4274
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4298
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4302
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4306
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4309
		{
			return unimplemented(sqllex, "at tz")
		}
	case 856:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4318
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4330
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4334
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4346
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4402
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4406
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4410
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4414
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4418
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4422
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 884:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 885:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 886:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4438
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4442
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 888:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4446
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4450
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4454
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4458
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4462
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4466
		{
			sqlVAL.union.val = &NotExpr{Expr: &FuncExpr{Func: wrapFunction("ISNAN"), Exprs: Exprs{sqlDollar[1].union.expr()}}}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4470
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4474
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4477
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4479
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4483
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4487
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4491
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 901:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4495
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 902:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4499
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4503
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4507
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4511
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4515
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 907:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4519
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4523
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 909:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4535
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4539
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 913:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4543
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4575
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4579
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4583
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4587
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4591
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4603
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4607
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4611
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4615
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4619
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 928:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4623
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4627
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4631
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4635
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4639
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4643
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4647
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4651
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4655
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4659
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4663
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4667
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4671
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 942:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4692
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4700
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4711
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4716
		{
			/* SKIP DOC */
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4738
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4742
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4746
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4750
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4754
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4762
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4766
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4769
		{
			return unimplemented(sqllex, "variadic")
		}
	case 961:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4770
		{
			return unimplemented(sqllex, "variadic")
		}
	case 962:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4772
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4776
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4780
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4783
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 966:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4794
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 967:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4801
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4810
		{
			return unimplemented(sqllex, "func_application")
		}
	case 969:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4811
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 970:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4815
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4817
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4821
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4824
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 974:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4833
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 977:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4835
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4839
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4842
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 980:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4843
		{
			return unimplemented(sqllex, "current role")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4844
		{
			return unimplemented(sqllex, "current user")
		}
	case 982:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4845
		{
			return unimplemented(sqllex, "session user")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			return unimplemented(sqllex, "user")
		}
	case 984:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4848
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4852
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4856
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4859
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 988:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4861
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4864
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 990:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4866
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4869
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 992:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4871
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4875
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4878
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 995:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4879
		{
			return unimplemented(sqllex, "treat")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4881
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 997:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4889
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4893
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4897
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4901
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4905
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4909
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4913
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4916
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4921
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4925
		{
			return unimplemented(sqllex, "within group")
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4926
		{
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4934
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4941
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4945
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4951
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4955
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4961
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4969
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4973
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4977
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4984
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5003
		{
			sqlVAL.str = ""
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5009
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5013
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5023
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5024
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5025
		{
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5028
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5029
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5035
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5036
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5037
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5038
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5039
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5050
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5054
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5058
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5064
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5068
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5080
		{
			sqlVAL.union.val = Any
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5084
		{
			sqlVAL.union.val = Some
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = All
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5093
		{
			sqlVAL.union.val = Plus
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5094
		{
			sqlVAL.union.val = Minus
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5095
		{
			sqlVAL.union.val = Mult
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = Div
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5097
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5098
		{
			sqlVAL.union.val = Mod
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5099
		{
			sqlVAL.union.val = Bitand
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = Bitor
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5101
		{
			sqlVAL.union.val = Pow
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5102
		{
			sqlVAL.union.val = Bitxor
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5103
		{
			sqlVAL.union.val = LT
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = GT
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5105
		{
			sqlVAL.union.val = EQ
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5106
		{
			sqlVAL.union.val = LE
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5107
		{
			sqlVAL.union.val = GE
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = NE
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = Like
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5113
		{
			sqlVAL.union.val = NotLike
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5114
		{
			sqlVAL.union.val = ILike
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5115
		{
			sqlVAL.union.val = NotILike
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5126
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5130
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5136
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5146
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5150
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5154
		{
			sqlVAL.union.val = &Array{Exprs: nil}
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5160
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5164
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5170
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5174
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5196
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5200
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5204
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5210
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5238
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5242
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5246
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5250
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5254
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5258
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5264
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5270
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5276
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5280
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5284
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5290
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5294
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5312
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5316
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5322
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5328
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5332
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5339
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5356
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5362
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5368
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5384
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5388
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5403
		{
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5404
		{
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5413
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5419
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5423
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5432
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5438
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5442
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5448
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5457
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5461
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5465
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5473
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5477
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5483
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5487
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5493
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5497
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5508
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5512
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5522
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5535
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5539
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5543
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5547
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5553
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5557
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5563
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5566
		{
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5576
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5580
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5591
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5599
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5602
		{
			return unimplemented(sqllex, "func const")
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5604
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5608
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5611
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5613
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5617
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5621
		{
			sqlVAL.union.val = DNull
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5632
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5638
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5673
		{
			sqlVAL.str = ""
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5679
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5683
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
