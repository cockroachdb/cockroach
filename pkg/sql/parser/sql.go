// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql.y:18
package parser

import __yyfmt__ "fmt"

//line sql.y:18
import (
	"fmt"

	"go/constant"
	"go/token"

	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
)

// MaxUint is the maximum value of an uint.
const MaxUint = ^uint(0)

// MaxInt is the maximum value of an int.
const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}

//line sql.y:46

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new syntax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in three forms, depending on the
// type of the value being accessed and whether a nil value is admissible
// for the corresponding grammar rule.
// - Values and pointers are directly type asserted from the empty
//   interface, regardless of whether a nil value is admissible or
//   not. A panic occurs if the type assertion is incorrect; no panic occurs
//   if a nil is not expected but present. (TODO(knz): split this category of
//   accessor in two; with one checking for unexpected nils.)
//   Examples: bool(), tableWithIdx().
//
// - Interfaces where a nil is admissible are handled differently
//   because a nil instance of an interface inserted into the empty interface
//   becomes a nil instance of the empty interface and therefore will fail a
//   direct type assertion. Instead, a guarded type assertion must be used,
//   which returns nil if the type assertion fails.
//   Examples: expr(), stmt().
//
// - Interfaces where a nil is not admissible are implemented as a direct
//   type assertion, which causes a panic to occur if an unexpected nil
//   is encountered.
//   Examples: namePart(), tblDef().
//
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	if stmt, ok := u.val.(*StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *TableNameWithIndex {
	tn := u.val.(TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() TableNameWithIndex {
	return u.val.(TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	return u.val.(NamePart)
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionReference() FunctionReference {
	return u.val.(FunctionReference)
}
func (u *sqlSymUnion) resolvableFunctionReference() ResolvableFunctionReference {
	return ResolvableFunctionReference{u.val.(FunctionReference)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) arraySubscript() *ArraySubscript {
	return u.val.(*ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() ArraySubscripts {
	if as, ok := u.val.(ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	return u.val.(*Select)
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	return u.val.(SelectStatement)
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	return u.val.(ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() TableDef {
	return u.val.(TableDef)
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	return u.val.(NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	return u.val.(ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []ColumnID {
	if refCols, ok := u.val.([]ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() CastTargetType {
	return u.val.(CastTargetType)
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retClause() ReturningClause {
	return u.val.(ReturningClause)
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	return u.val.(TableExpr)
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	return u.val.(JoinCond)
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	return u.val.(AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) readWriteMode() ReadWriteMode {
	return u.val.(ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() ValidationBehavior {
	return u.val.(ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *PartitionBy {
	return u.val.(*PartitionBy)
}
func (u *sqlSymUnion) listPartitions() []ListPartition {
	return u.val.([]ListPartition)
}
func (u *sqlSymUnion) rangePartitions() []RangePartition {
	return u.val.([]RangePartition)
}
func (u *sqlSymUnion) tuples() []*Tuple {
	return u.val.([]*Tuple)
}
func (u *sqlSymUnion) windowDef() *WindowDef {
	return u.val.(*WindowDef)
}
func (u *sqlSymUnion) window() Window {
	return u.val.(Window)
}
func (u *sqlSymUnion) op() operator {
	return u.val.(operator)
}
func (u *sqlSymUnion) cmpOp() ComparisonOperator {
	return u.val.(ComparisonOperator)
}
func (u *sqlSymUnion) durationField() durationField {
	return u.val.(durationField)
}
func (u *sqlSymUnion) kvOption() KVOption {
	return u.val.(KVOption)
}
func (u *sqlSymUnion) kvOptions() []KVOption {
	if colType, ok := u.val.([]KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() TransactionModes {
	return u.val.(TransactionModes)
}
func (u *sqlSymUnion) referenceAction() ReferenceAction {
	return u.val.(ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() ReferenceActions {
	return u.val.(ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() ScrubOptions {
	return u.val.(ScrubOptions)
}

func (u *sqlSymUnion) scrubOption() ScrubOption {
	return u.val.(ScrubOption)
}

//line sql.y:494
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALL_EXISTENCE = 57365
const ALTER = 57366
const ANALYSE = 57367
const ANALYZE = 57368
const AND = 57369
const ANY = 57370
const ANNOTATE_TYPE = 57371
const ARRAY = 57372
const AS = 57373
const ASC = 57374
const ASYMMETRIC = 57375
const AT = 57376
const BACKUP = 57377
const BEGIN = 57378
const BETWEEN = 57379
const BIGINT = 57380
const BIGSERIAL = 57381
const BIT = 57382
const BLOB = 57383
const BOOL = 57384
const BOOLEAN = 57385
const BOTH = 57386
const BY = 57387
const BYTEA = 57388
const BYTES = 57389
const CANCEL = 57390
const CASCADE = 57391
const CASE = 57392
const CAST = 57393
const CHAR = 57394
const CHARACTER = 57395
const CHARACTERISTICS = 57396
const CHECK = 57397
const CLUSTER = 57398
const COALESCE = 57399
const COLLATE = 57400
const COLLATION = 57401
const COLUMN = 57402
const COLUMNS = 57403
const COMMIT = 57404
const COMMITTED = 57405
const CONCAT = 57406
const CONFIGURATION = 57407
const CONFIGURATIONS = 57408
const CONFIGURE = 57409
const CONFLICT = 57410
const CONSTRAINT = 57411
const CONSTRAINTS = 57412
const CONTAINS = 57413
const COPY = 57414
const COVERING = 57415
const CREATE = 57416
const CROSS = 57417
const CSV = 57418
const CUBE = 57419
const CURRENT = 57420
const CURRENT_CATALOG = 57421
const CURRENT_DATE = 57422
const CURRENT_SCHEMA = 57423
const CURRENT_ROLE = 57424
const CURRENT_TIME = 57425
const CURRENT_TIMESTAMP = 57426
const CURRENT_USER = 57427
const CYCLE = 57428
const DATA = 57429
const DATABASE = 57430
const DATABASES = 57431
const DATE = 57432
const DAY = 57433
const DEC = 57434
const DECIMAL = 57435
const DEFAULT = 57436
const DEALLOCATE = 57437
const DEFERRABLE = 57438
const DELETE = 57439
const DESC = 57440
const DISCARD = 57441
const DISTINCT = 57442
const DO = 57443
const DOUBLE = 57444
const DROP = 57445
const ELSE = 57446
const ENCODING = 57447
const END = 57448
const ESCAPE = 57449
const EXCEPT = 57450
const EXISTS = 57451
const EXECUTE = 57452
const EXPERIMENTAL_FINGERPRINTS = 57453
const EXPERIMENTAL = 57454
const EXPLAIN = 57455
const EXTRACT = 57456
const EXTRACT_DURATION = 57457
const FALSE = 57458
const FAMILY = 57459
const FETCH = 57460
const FETCHVAL = 57461
const FETCHTEXT = 57462
const FETCHVAL_PATH = 57463
const FETCHTEXT_PATH = 57464
const FILTER = 57465
const FIRST = 57466
const FLOAT = 57467
const FLOAT4 = 57468
const FLOAT8 = 57469
const FLOORDIV = 57470
const FOLLOWING = 57471
const FOR = 57472
const FORCE_INDEX = 57473
const FOREIGN = 57474
const FROM = 57475
const FULL = 57476
const GRANT = 57477
const GRANTS = 57478
const GREATEST = 57479
const GROUP = 57480
const GROUPING = 57481
const HAVING = 57482
const HELP = 57483
const HIGH = 57484
const HOUR = 57485
const IMPORT = 57486
const INCREMENTAL = 57487
const IF = 57488
const IFNULL = 57489
const ILIKE = 57490
const IN = 57491
const INET = 57492
const INTERLEAVE = 57493
const INDEX = 57494
const INDEXES = 57495
const INITIALLY = 57496
const INNER = 57497
const INSERT = 57498
const INT = 57499
const INT2VECTOR = 57500
const INT2 = 57501
const INT4 = 57502
const INT8 = 57503
const INT64 = 57504
const INTEGER = 57505
const INTERSECT = 57506
const INTERVAL = 57507
const INTO = 57508
const IS = 57509
const ISOLATION = 57510
const JOB = 57511
const JOBS = 57512
const JOIN = 57513
const JSON = 57514
const JSONB = 57515
const KEY = 57516
const KEYS = 57517
const KV = 57518
const LATERAL = 57519
const LC_CTYPE = 57520
const LC_COLLATE = 57521
const LEADING = 57522
const LEAST = 57523
const LEFT = 57524
const LESS = 57525
const LEVEL = 57526
const LIKE = 57527
const LIMIT = 57528
const LIST = 57529
const LOCAL = 57530
const LOCALTIME = 57531
const LOCALTIMESTAMP = 57532
const LOW = 57533
const LSHIFT = 57534
const MATCH = 57535
const MAXVALUE = 57536
const MINUTE = 57537
const MONTH = 57538
const NAN = 57539
const NAME = 57540
const NAMES = 57541
const NATURAL = 57542
const NEXT = 57543
const NO = 57544
const NO_INDEX_JOIN = 57545
const NORMAL = 57546
const NOT = 57547
const NOTHING = 57548
const NULL = 57549
const NULLIF = 57550
const NULLS = 57551
const NUMERIC = 57552
const OF = 57553
const OFF = 57554
const OFFSET = 57555
const OID = 57556
const ON = 57557
const ONLY = 57558
const OPTIONS = 57559
const OR = 57560
const ORDER = 57561
const ORDINALITY = 57562
const OUT = 57563
const OUTER = 57564
const OVER = 57565
const OVERLAPS = 57566
const OVERLAY = 57567
const PARENT = 57568
const PARTIAL = 57569
const PARTITION = 57570
const PASSWORD = 57571
const PAUSE = 57572
const PHYSICAL = 57573
const PLACING = 57574
const PLANS = 57575
const POSITION = 57576
const PRECEDING = 57577
const PRECISION = 57578
const PREPARE = 57579
const PRIMARY = 57580
const PRIORITY = 57581
const QUERIES = 57582
const QUERY = 57583
const RANGE = 57584
const READ = 57585
const REAL = 57586
const RECURSIVE = 57587
const REF = 57588
const REFERENCES = 57589
const REGCLASS = 57590
const REGPROC = 57591
const REGPROCEDURE = 57592
const REGNAMESPACE = 57593
const REGTYPE = 57594
const REMOVE_PATH = 57595
const RENAME = 57596
const REPEATABLE = 57597
const RELEASE = 57598
const RESET = 57599
const RESTORE = 57600
const RESTRICT = 57601
const RESUME = 57602
const RETURNING = 57603
const REVOKE = 57604
const RIGHT = 57605
const ROLLBACK = 57606
const ROLLUP = 57607
const ROW = 57608
const ROWS = 57609
const RSHIFT = 57610
const SAVEPOINT = 57611
const SCATTER = 57612
const SCRUB = 57613
const SEARCH = 57614
const SECOND = 57615
const SELECT = 57616
const SEQUENCES = 57617
const SERIAL = 57618
const SERIALIZABLE = 57619
const SESSION = 57620
const SESSIONS = 57621
const SESSION_USER = 57622
const SET = 57623
const SETTING = 57624
const SETTINGS = 57625
const SHOW = 57626
const SIMILAR = 57627
const SIMPLE = 57628
const SMALLINT = 57629
const SMALLSERIAL = 57630
const SNAPSHOT = 57631
const SOME = 57632
const SOME_EXISTENCE = 57633
const SPLIT = 57634
const SQL = 57635
const START = 57636
const STATUS = 57637
const STDIN = 57638
const STRICT = 57639
const STRING = 57640
const STORE = 57641
const STORING = 57642
const SUBSTRING = 57643
const SYMMETRIC = 57644
const SYSTEM = 57645
const TABLE = 57646
const TABLES = 57647
const TEMP = 57648
const TEMPLATE = 57649
const TEMPORARY = 57650
const TESTING_RANGES = 57651
const TESTING_RELOCATE = 57652
const TEXT = 57653
const THAN = 57654
const THEN = 57655
const TIME = 57656
const TIMESTAMP = 57657
const TIMESTAMPTZ = 57658
const TO = 57659
const TRAILING = 57660
const TRACE = 57661
const TRANSACTION = 57662
const TREAT = 57663
const TRIM = 57664
const TRUE = 57665
const TRUNCATE = 57666
const TYPE = 57667
const UNBOUNDED = 57668
const UNCOMMITTED = 57669
const UNION = 57670
const UNIQUE = 57671
const UNKNOWN = 57672
const UPDATE = 57673
const UPSERT = 57674
const USE = 57675
const USER = 57676
const USERS = 57677
const USING = 57678
const UUID = 57679
const VALID = 57680
const VALIDATE = 57681
const VALUE = 57682
const VALUES = 57683
const VARCHAR = 57684
const VARIADIC = 57685
const VIEW = 57686
const VARYING = 57687
const WHEN = 57688
const WHERE = 57689
const WINDOW = 57690
const WITH = 57691
const WITHIN = 57692
const WITHOUT = 57693
const WRITE = 57694
const YEAR = 57695
const ZONE = 57696
const NOT_LA = 57697
const WITH_LA = 57698
const AS_LA = 57699
const CONTAINED_BY = 57700
const POSTFIXOP = 57701
const UMINUS = 57702
const HELPTOKEN = 57703

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALL_EXISTENCE",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL",
	"EXPLAIN",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HELP",
	"HIGH",
	"HOUR",
	"IMPORT",
	"INCREMENTAL",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INET",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"KEY",
	"KEYS",
	"KV",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"ON",
	"ONLY",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"QUERIES",
	"QUERY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SCATTER",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCES",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SOME_EXISTENCE",
	"SPLIT",
	"SQL",
	"START",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"TESTING_RELOCATE",
	"TEXT",
	"THAN",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:6941

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 54,
	381, 54,
	-2, 730,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 47,
	152, 579,
	-2, 0,
	-1, 55,
	97, 730,
	156, 730,
	331, 730,
	332, 730,
	-2, 0,
	-1, 65,
	1, 692,
	215, 692,
	261, 692,
	376, 692,
	378, 692,
	380, 692,
	381, 692,
	-2, 705,
	-1, 98,
	4, 732,
	20, 732,
	21, 732,
	24, 732,
	29, 732,
	34, 732,
	35, 732,
	36, 732,
	37, 732,
	38, 732,
	39, 732,
	40, 732,
	41, 732,
	42, 732,
	43, 732,
	45, 732,
	46, 732,
	47, 732,
	48, 732,
	49, 732,
	52, 732,
	53, 732,
	54, 732,
	56, 732,
	57, 732,
	61, 732,
	62, 732,
	63, 732,
	65, 732,
	66, 732,
	67, 732,
	68, 732,
	70, 732,
	72, 732,
	73, 732,
	76, 732,
	77, 732,
	78, 732,
	86, 732,
	87, 732,
	88, 732,
	89, 732,
	90, 732,
	91, 732,
	92, 732,
	93, 732,
	95, 732,
	97, 732,
	99, 732,
	102, 732,
	103, 732,
	105, 732,
	109, 732,
	110, 732,
	111, 732,
	112, 732,
	113, 732,
	114, 732,
	115, 732,
	123, 732,
	124, 732,
	125, 732,
	126, 732,
	127, 732,
	129, 732,
	131, 732,
	136, 732,
	137, 732,
	139, 732,
	142, 732,
	143, 732,
	144, 732,
	145, 732,
	146, 732,
	147, 732,
	150, 732,
	151, 732,
	153, 732,
	156, 732,
	157, 732,
	158, 732,
	159, 732,
	160, 732,
	161, 732,
	162, 732,
	163, 732,
	165, 732,
	168, 732,
	169, 732,
	170, 732,
	172, 732,
	173, 732,
	174, 732,
	175, 732,
	176, 732,
	178, 732,
	179, 732,
	181, 732,
	183, 732,
	184, 732,
	187, 732,
	188, 732,
	191, 732,
	193, 732,
	195, 732,
	196, 732,
	197, 732,
	198, 732,
	199, 732,
	201, 732,
	202, 732,
	203, 732,
	204, 732,
	208, 732,
	209, 732,
	210, 732,
	211, 732,
	212, 732,
	214, 732,
	216, 732,
	217, 732,
	220, 732,
	221, 732,
	223, 732,
	225, 732,
	226, 732,
	227, 732,
	228, 732,
	229, 732,
	230, 732,
	231, 732,
	233, 732,
	234, 732,
	235, 732,
	236, 732,
	237, 732,
	239, 732,
	240, 732,
	241, 732,
	242, 732,
	243, 732,
	244, 732,
	245, 732,
	246, 732,
	248, 732,
	249, 732,
	250, 732,
	251, 732,
	252, 732,
	254, 732,
	255, 732,
	256, 732,
	257, 732,
	258, 732,
	259, 732,
	260, 732,
	262, 732,
	264, 732,
	265, 732,
	266, 732,
	267, 732,
	269, 732,
	270, 732,
	271, 732,
	272, 732,
	273, 732,
	275, 732,
	276, 732,
	277, 732,
	278, 732,
	279, 732,
	281, 732,
	282, 732,
	283, 732,
	284, 732,
	286, 732,
	287, 732,
	288, 732,
	289, 732,
	292, 732,
	293, 732,
	294, 732,
	295, 732,
	296, 732,
	297, 732,
	298, 732,
	299, 732,
	300, 732,
	301, 732,
	303, 732,
	305, 732,
	306, 732,
	307, 732,
	308, 732,
	309, 732,
	310, 732,
	311, 732,
	312, 732,
	314, 732,
	315, 732,
	316, 732,
	319, 732,
	320, 732,
	321, 732,
	322, 732,
	324, 732,
	325, 732,
	326, 732,
	327, 732,
	330, 732,
	331, 732,
	332, 732,
	333, 732,
	335, 732,
	337, 732,
	338, 732,
	339, 732,
	340, 732,
	341, 732,
	342, 732,
	345, 732,
	350, 732,
	351, 732,
	352, 732,
	353, 732,
	354, 732,
	-2, 0,
	-1, 116,
	1, 695,
	215, 695,
	261, 695,
	376, 695,
	378, 695,
	380, 695,
	381, 695,
	-2, 704,
	-1, 121,
	1, 630,
	168, 630,
	239, 630,
	243, 630,
	380, 630,
	381, 630,
	-2, 0,
	-1, 123,
	1, 630,
	380, 630,
	381, 630,
	-2, 0,
	-1, 124,
	1, 630,
	380, 630,
	381, 630,
	-2, 0,
	-1, 125,
	1, 634,
	380, 634,
	381, 634,
	-2, 0,
	-1, 146,
	4, 738,
	5, 738,
	6, 738,
	7, 738,
	8, 738,
	9, 738,
	20, 738,
	21, 738,
	24, 738,
	29, 738,
	30, 738,
	34, 738,
	35, 738,
	36, 738,
	37, 738,
	38, 738,
	39, 738,
	40, 738,
	41, 738,
	42, 738,
	43, 738,
	45, 738,
	46, 738,
	47, 738,
	48, 738,
	49, 738,
	50, 738,
	51, 738,
	52, 738,
	53, 738,
	54, 738,
	56, 738,
	57, 738,
	59, 738,
	61, 738,
	62, 738,
	63, 738,
	65, 738,
	66, 738,
	67, 738,
	68, 738,
	70, 738,
	72, 738,
	73, 738,
	75, 738,
	76, 738,
	77, 738,
	78, 738,
	80, 738,
	81, 738,
	82, 738,
	84, 738,
	85, 738,
	86, 738,
	87, 738,
	88, 738,
	89, 738,
	90, 738,
	91, 738,
	92, 738,
	93, 738,
	94, 738,
	95, 738,
	97, 738,
	99, 738,
	102, 738,
	103, 738,
	105, 738,
	109, 738,
	110, 738,
	111, 738,
	112, 738,
	113, 738,
	114, 738,
	115, 738,
	116, 738,
	117, 738,
	123, 738,
	124, 738,
	125, 738,
	126, 738,
	127, 738,
	129, 738,
	131, 738,
	134, 738,
	136, 738,
	137, 738,
	139, 738,
	142, 738,
	143, 738,
	144, 738,
	145, 738,
	146, 738,
	147, 738,
	148, 738,
	150, 738,
	151, 738,
	153, 738,
	155, 738,
	156, 738,
	157, 738,
	158, 738,
	159, 738,
	160, 738,
	161, 738,
	162, 738,
	163, 738,
	165, 738,
	167, 738,
	168, 738,
	169, 738,
	170, 738,
	171, 738,
	172, 738,
	173, 738,
	174, 738,
	175, 738,
	176, 738,
	178, 738,
	179, 738,
	181, 738,
	182, 738,
	183, 738,
	184, 738,
	185, 738,
	187, 738,
	188, 738,
	191, 738,
	193, 738,
	194, 738,
	195, 738,
	196, 738,
	197, 738,
	198, 738,
	199, 738,
	200, 738,
	201, 738,
	202, 738,
	203, 738,
	204, 738,
	205, 738,
	207, 738,
	208, 738,
	209, 738,
	210, 738,
	211, 738,
	212, 738,
	214, 738,
	217, 738,
	220, 738,
	221, 738,
	222, 738,
	223, 738,
	224, 738,
	225, 738,
	226, 738,
	227, 738,
	228, 738,
	229, 738,
	230, 738,
	231, 738,
	233, 738,
	234, 738,
	235, 738,
	236, 738,
	237, 738,
	239, 738,
	240, 738,
	241, 738,
	242, 738,
	243, 738,
	244, 738,
	245, 738,
	246, 738,
	248, 738,
	249, 738,
	250, 738,
	251, 738,
	252, 738,
	254, 738,
	255, 738,
	256, 738,
	257, 738,
	258, 738,
	259, 738,
	260, 738,
	262, 738,
	263, 738,
	264, 738,
	265, 738,
	266, 738,
	267, 738,
	269, 738,
	270, 738,
	271, 738,
	272, 738,
	273, 738,
	275, 738,
	276, 738,
	277, 738,
	278, 738,
	279, 738,
	280, 738,
	281, 738,
	282, 738,
	283, 738,
	284, 738,
	285, 738,
	286, 738,
	287, 738,
	288, 738,
	289, 738,
	292, 738,
	293, 738,
	294, 738,
	295, 738,
	296, 738,
	297, 738,
	298, 738,
	299, 738,
	300, 738,
	301, 738,
	303, 738,
	305, 738,
	306, 738,
	307, 738,
	308, 738,
	309, 738,
	310, 738,
	311, 738,
	312, 738,
	314, 738,
	315, 738,
	316, 738,
	319, 738,
	320, 738,
	321, 738,
	322, 738,
	323, 738,
	324, 738,
	325, 738,
	326, 738,
	327, 738,
	330, 738,
	331, 738,
	332, 738,
	333, 738,
	334, 738,
	335, 738,
	337, 738,
	338, 738,
	339, 738,
	340, 738,
	341, 738,
	342, 738,
	345, 738,
	350, 738,
	351, 738,
	352, 738,
	353, 738,
	354, 738,
	355, 738,
	363, 738,
	368, 738,
	369, 738,
	370, 738,
	377, 738,
	383, 738,
	-2, 0,
	-1, 149,
	1, 54,
	381, 54,
	-2, 730,
	-1, 517,
	133, 1348,
	317, 1348,
	360, 1348,
	379, 1348,
	-2, 0,
	-1, 518,
	133, 1295,
	317, 1295,
	360, 1295,
	379, 1295,
	-2, 0,
	-1, 520,
	133, 1408,
	317, 1408,
	360, 1408,
	379, 1408,
	-2, 0,
	-1, 522,
	133, 1431,
	317, 1431,
	360, 1431,
	379, 1431,
	-2, 0,
	-1, 529,
	133, 1353,
	317, 1353,
	360, 1353,
	379, 1353,
	-2, 348,
	-1, 555,
	1, 426,
	376, 426,
	378, 426,
	380, 426,
	381, 426,
	-2, 0,
	-1, 556,
	1, 478,
	130, 478,
	376, 478,
	378, 478,
	380, 478,
	381, 478,
	-2, 0,
	-1, 562,
	1, 440,
	376, 440,
	378, 440,
	380, 440,
	381, 440,
	-2, 0,
	-1, 564,
	1, 444,
	376, 444,
	378, 444,
	380, 444,
	381, 444,
	-2, 0,
	-1, 567,
	1, 452,
	376, 452,
	378, 452,
	380, 452,
	381, 452,
	-2, 0,
	-1, 568,
	1, 457,
	376, 457,
	378, 457,
	380, 457,
	381, 457,
	-2, 0,
	-1, 571,
	1, 467,
	376, 467,
	378, 467,
	380, 467,
	381, 467,
	-2, 0,
	-1, 596,
	118, 740,
	130, 740,
	186, 740,
	213, 740,
	-2, 699,
	-1, 603,
	118, 739,
	130, 739,
	186, 739,
	213, 739,
	-2, 696,
	-1, 659,
	377, 1273,
	-2, 1266,
	-1, 660,
	377, 1274,
	-2, 1267,
	-1, 666,
	5, 924,
	377, 924,
	-2, 1483,
	-1, 691,
	5, 883,
	-2, 1452,
	-1, 692,
	5, 918,
	377, 918,
	-2, 1454,
	-1, 693,
	5, 893,
	-2, 1455,
	-1, 694,
	5, 892,
	-2, 1456,
	-1, 695,
	5, 918,
	377, 918,
	-2, 1459,
	-1, 696,
	5, 918,
	377, 918,
	-2, 1460,
	-1, 697,
	5, 919,
	-2, 1463,
	-1, 698,
	5, 875,
	-2, 1464,
	-1, 699,
	5, 875,
	-2, 1465,
	-1, 700,
	5, 900,
	-2, 1469,
	-1, 701,
	5, 885,
	-2, 1470,
	-1, 702,
	5, 886,
	-2, 1471,
	-1, 703,
	5, 876,
	-2, 1477,
	-1, 704,
	5, 877,
	-2, 1478,
	-1, 705,
	5, 878,
	-2, 1479,
	-1, 706,
	5, 879,
	-2, 1480,
	-1, 707,
	5, 880,
	-2, 1481,
	-1, 708,
	5, 881,
	-2, 1482,
	-1, 709,
	5, 875,
	-2, 1489,
	-1, 710,
	5, 884,
	-2, 1494,
	-1, 711,
	5, 882,
	-2, 1497,
	-1, 712,
	5, 916,
	377, 916,
	-2, 1499,
	-1, 713,
	5, 920,
	-2, 1502,
	-1, 714,
	5, 922,
	-2, 1503,
	-1, 715,
	5, 915,
	377, 915,
	-2, 1508,
	-1, 910,
	229, 728,
	-2, 572,
	-1, 915,
	215, 1270,
	-2, 0,
	-1, 951,
	1, 223,
	376, 223,
	378, 223,
	380, 223,
	381, 223,
	-2, 703,
	-1, 954,
	4, 1507,
	10, 1507,
	11, 1507,
	13, 1507,
	14, 1507,
	15, 1507,
	16, 1507,
	17, 1507,
	18, 1507,
	20, 1507,
	21, 1507,
	23, 1507,
	24, 1507,
	27, 1507,
	29, 1507,
	31, 1507,
	34, 1507,
	35, 1507,
	36, 1507,
	37, 1507,
	38, 1507,
	39, 1507,
	40, 1507,
	41, 1507,
	42, 1507,
	43, 1507,
	45, 1507,
	46, 1507,
	47, 1507,
	48, 1507,
	49, 1507,
	52, 1507,
	53, 1507,
	54, 1507,
	56, 1507,
	57, 1507,
	58, 1507,
	61, 1507,
	62, 1507,
	63, 1507,
	64, 1507,
	65, 1507,
	66, 1507,
	67, 1507,
	68, 1507,
	70, 1507,
	71, 1507,
	72, 1507,
	73, 1507,
	75, 1507,
	76, 1507,
	77, 1507,
	78, 1507,
	86, 1507,
	87, 1507,
	88, 1507,
	89, 1507,
	90, 1507,
	91, 1507,
	92, 1507,
	93, 1507,
	95, 1507,
	97, 1507,
	99, 1507,
	102, 1507,
	103, 1507,
	105, 1507,
	109, 1507,
	110, 1507,
	111, 1507,
	112, 1507,
	113, 1507,
	114, 1507,
	115, 1507,
	119, 1507,
	120, 1507,
	121, 1507,
	122, 1507,
	123, 1507,
	124, 1507,
	125, 1507,
	126, 1507,
	127, 1507,
	128, 1507,
	129, 1507,
	131, 1507,
	134, 1507,
	136, 1507,
	137, 1507,
	139, 1507,
	142, 1507,
	143, 1507,
	144, 1507,
	145, 1507,
	146, 1507,
	147, 1507,
	148, 1507,
	149, 1507,
	150, 1507,
	151, 1507,
	153, 1507,
	155, 1507,
	156, 1507,
	157, 1507,
	158, 1507,
	159, 1507,
	160, 1507,
	161, 1507,
	162, 1507,
	163, 1507,
	165, 1507,
	167, 1507,
	168, 1507,
	169, 1507,
	170, 1507,
	171, 1507,
	172, 1507,
	173, 1507,
	174, 1507,
	175, 1507,
	176, 1507,
	178, 1507,
	179, 1507,
	181, 1507,
	182, 1507,
	183, 1507,
	184, 1507,
	185, 1507,
	187, 1507,
	188, 1507,
	191, 1507,
	192, 1507,
	193, 1507,
	195, 1507,
	196, 1507,
	197, 1507,
	198, 1507,
	199, 1507,
	200, 1507,
	201, 1507,
	202, 1507,
	203, 1507,
	204, 1507,
	208, 1507,
	209, 1507,
	210, 1507,
	211, 1507,
	212, 1507,
	214, 1507,
	217, 1507,
	218, 1507,
	220, 1507,
	221, 1507,
	223, 1507,
	225, 1507,
	226, 1507,
	227, 1507,
	228, 1507,
	229, 1507,
	230, 1507,
	231, 1507,
	233, 1507,
	234, 1507,
	235, 1507,
	236, 1507,
	237, 1507,
	239, 1507,
	240, 1507,
	241, 1507,
	242, 1507,
	243, 1507,
	244, 1507,
	245, 1507,
	246, 1507,
	248, 1507,
	249, 1507,
	250, 1507,
	251, 1507,
	252, 1507,
	253, 1507,
	254, 1507,
	255, 1507,
	256, 1507,
	257, 1507,
	258, 1507,
	259, 1507,
	260, 1507,
	262, 1507,
	263, 1507,
	264, 1507,
	265, 1507,
	266, 1507,
	267, 1507,
	268, 1507,
	269, 1507,
	270, 1507,
	271, 1507,
	272, 1507,
	273, 1507,
	275, 1507,
	276, 1507,
	277, 1507,
	278, 1507,
	279, 1507,
	281, 1507,
	282, 1507,
	283, 1507,
	284, 1507,
	285, 1507,
	286, 1507,
	287, 1507,
	288, 1507,
	289, 1507,
	291, 1507,
	292, 1507,
	293, 1507,
	294, 1507,
	295, 1507,
	296, 1507,
	297, 1507,
	298, 1507,
	299, 1507,
	300, 1507,
	301, 1507,
	303, 1507,
	305, 1507,
	306, 1507,
	307, 1507,
	308, 1507,
	309, 1507,
	310, 1507,
	311, 1507,
	312, 1507,
	314, 1507,
	315, 1507,
	316, 1507,
	319, 1507,
	320, 1507,
	321, 1507,
	322, 1507,
	324, 1507,
	325, 1507,
	326, 1507,
	327, 1507,
	330, 1507,
	331, 1507,
	332, 1507,
	333, 1507,
	335, 1507,
	337, 1507,
	338, 1507,
	339, 1507,
	340, 1507,
	341, 1507,
	342, 1507,
	345, 1507,
	350, 1507,
	351, 1507,
	352, 1507,
	353, 1507,
	354, 1507,
	355, 1507,
	356, 1507,
	358, 1507,
	359, 1507,
	360, 1507,
	361, 1507,
	362, 1507,
	363, 1507,
	365, 1507,
	366, 1507,
	367, 1507,
	368, 1507,
	369, 1507,
	370, 1507,
	371, 1507,
	372, 1507,
	373, 1507,
	375, 1507,
	378, 1507,
	379, 1507,
	382, 1507,
	383, 1507,
	-2, 0,
	-1, 970,
	133, 1408,
	317, 1408,
	360, 1408,
	379, 1408,
	-2, 0,
	-1, 987,
	133, 1431,
	317, 1431,
	360, 1431,
	379, 1431,
	-2, 0,
	-1, 988,
	168, 642,
	239, 642,
	243, 642,
	-2, 336,
	-1, 1057,
	118, 739,
	130, 739,
	186, 739,
	213, 739,
	-2, 700,
	-1, 1138,
	108, 705,
	118, 705,
	130, 705,
	164, 705,
	186, 705,
	213, 705,
	219, 705,
	328, 705,
	-2, 1054,
	-1, 1148,
	377, 1250,
	-2, 1238,
	-1, 1166,
	378, 1167,
	-2, 0,
	-1, 1190,
	168, 642,
	239, 642,
	243, 642,
	-2, 637,
	-1, 1218,
	378, 1167,
	-2, 0,
	-1, 1222,
	108, 705,
	118, 705,
	130, 705,
	164, 705,
	186, 705,
	213, 705,
	219, 705,
	328, 705,
	-2, 806,
	-1, 1366,
	168, 642,
	239, 642,
	243, 642,
	-2, 338,
	-1, 1475,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 959,
	-1, 1476,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 960,
	-1, 1477,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 961,
	-1, 1478,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 962,
	-1, 1479,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 963,
	-1, 1480,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 964,
	-1, 1481,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 965,
	-1, 1482,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 966,
	-1, 1491,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 975,
	-1, 1492,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 976,
	-1, 1493,
	13, 0,
	14, 0,
	15, 0,
	23, 0,
	71, 0,
	291, 0,
	358, 0,
	359, 0,
	360, 0,
	361, 0,
	362, 0,
	-2, 977,
	-1, 1496,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 982,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 984,
	-1, 1504,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 988,
	-1, 1505,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 989,
	-1, 1506,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 990,
	-1, 1507,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 991,
	-1, 1576,
	133, 1178,
	377, 1273,
	-2, 1266,
	-1, 1577,
	133, 1179,
	-2, 1448,
	-1, 1578,
	133, 1180,
	-2, 1352,
	-1, 1579,
	133, 1181,
	-2, 1313,
	-1, 1580,
	133, 1182,
	-2, 1330,
	-1, 1581,
	133, 1183,
	-2, 1351,
	-1, 1582,
	133, 1184,
	-2, 1405,
	-1, 1659,
	1, 807,
	75, 807,
	108, 807,
	118, 807,
	130, 807,
	134, 807,
	138, 807,
	140, 807,
	155, 807,
	164, 807,
	171, 807,
	182, 807,
	186, 807,
	200, 807,
	213, 807,
	215, 807,
	219, 807,
	261, 807,
	263, 807,
	328, 807,
	336, 807,
	347, 807,
	348, 807,
	357, 807,
	376, 807,
	378, 807,
	380, 807,
	381, 807,
	382, 807,
	-2, 806,
	-1, 1812,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 983,
	-1, 1813,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 985,
	-1, 1818,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 986,
	-1, 1836,
	224, 1138,
	-2, 1140,
	-1, 2012,
	229, 728,
	-2, 572,
	-1, 2070,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 987,
	-1, 2075,
	167, 0,
	-2, 1003,
	-1, 2084,
	224, 1139,
	-2, 1141,
	-1, 2126,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1031,
	-1, 2127,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1032,
	-1, 2128,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1033,
	-1, 2132,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1037,
	-1, 2133,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1038,
	-1, 2134,
	13, 0,
	14, 0,
	15, 0,
	358, 0,
	359, 0,
	360, 0,
	-2, 1039,
	-1, 2272,
	167, 0,
	-2, 1004,
	-1, 2275,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1007,
	-1, 2276,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1009,
	-1, 2400,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1008,
	-1, 2401,
	16, 0,
	17, 0,
	18, 0,
	37, 0,
	148, 0,
	149, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1010,
	-1, 2408,
	167, 0,
	-2, 1040,
	-1, 2485,
	167, 0,
	-2, 1041,
	-1, 2567,
	37, 0,
	148, 0,
	185, 0,
	285, 0,
	355, 0,
	363, 0,
	-2, 1451,
	-1, 2652,
	377, 1519,
	-2, 512,
}

const sqlPrivate = 57344

const sqlLast = 44086

var sqlAct = [...]int{

	660, 2635, 2649, 2633, 2368, 2367, 2650, 2575, 2566, 2616,
	2539, 2434, 2577, 2576, 1728, 2049, 2490, 1264, 944, 1736,
	2103, 2231, 2378, 2565, 2220, 658, 2253, 2185, 1272, 787,
	2326, 2340, 2260, 653, 2255, 1519, 2186, 904, 1308, 186,
	2414, 622, 947, 2016, 1706, 186, 650, 1707, 636, 186,
	657, 1307, 1951, 2306, 1902, 186, 2247, 1930, 1216, 604,
	186, 186, 1806, 1654, 186, 1737, 1266, 186, 1199, 1267,
	1225, 2024, 1672, 453, 1710, 186, 1663, 1938, 1700, 2156,
	1711, 471, 26, 1901, 1847, 1725, 1802, 1449, 991, 2018,
	1062, 1655, 1285, 1391, 1556, 528, 1785, 612, 111, 1228,
	1454, 1531, 1532, 1260, 1144, 1230, 1200, 1540, 1516, 1387,
	1605, 769, 1432, 450, 1430, 940, 990, 1176, 1180, 1550,
	1220, 1708, 789, 952, 1730, 1714, 930, 937, 1207, 1641,
	772, 1628, 752, 508, 1133, 1433, 1572, 525, 628, 1063,
	116, 186, 186, 1390, 652, 117, 1431, 177, 1190, 186,
	1279, 486, 927, 111, 521, 750, 182, 1189, 549, 2341,
	1067, 2170, 1835, 2369, 2171, 1287, 1287, 1287, 1729, 2369,
	608, 608, 186, 186, 792, 186, 186, 804, 1217, 2665,
	2664, 186, 186, 2658, 2658, 2657, 2612, 2611, 2610, 2658,
	1255, 1255, 1255, 2592, 2587, 2068, 2586, 2339, 1635, 802,
	1635, 2583, 603, 2033, 2670, 1255, 1078, 1079, 500, 2563,
	2034, 2562, 1630, 1297, 618, 1297, 785, 2534, 2529, 766,
	2528, 1762, 1255, 2524, 2392, 1701, 1251, 1255, 2656, 892,
	1081, 26, 64, 2516, 2487, 2465, 2462, 2339, 1762, 2339,
	1255, 2460, 2445, 1635, 2444, 2339, 1255, 111, 2339, 2422,
	2159, 2419, 597, 1255, 1080, 1255, 2402, 596, 2363, 2360,
	1762, 2338, 1635, 1635, 2319, 2339, 2274, 2246, 1255, 2241,
	1762, 1705, 2166, 1705, 1078, 1079, 2167, 2079, 613, 2535,
	1297, 1635, 2043, 777, 781, 2004, 2005, 1839, 1927, 1255,
	1926, 799, 1635, 1840, 1255, 1919, 1917, 754, 1081, 1920,
	1635, 1916, 1701, 1872, 1873, 1635, 1890, 1891, 1892, 1915,
	1772, 1553, 1761, 1635, 1635, 1751, 1762, 2666, 2396, 1635,
	2271, 1704, 1080, 2646, 1086, 1705, 1634, 1297, 1300, 756,
	1635, 757, 1301, 1635, 1846, 2392, 2159, 1629, 2059, 1661,
	2139, 2081, 2005, 1805, 1872, 1873, 1783, 1369, 1194, 1535,
	1255, 609, 890, 972, 149, 969, 187, 1887, 1533, 968,
	967, 2342, 966, 1554, 146, 965, 1078, 1079, 964, 1108,
	1109, 1110, 1118, 1119, 1120, 1288, 1288, 1288, 963, 1096,
	962, 961, 960, 1111, 1388, 959, 958, 957, 1101, 956,
	1081, 955, 1086, 1122, 148, 758, 755, 602, 1887, 601,
	600, 599, 595, 594, 593, 592, 591, 588, 611, 587,
	586, 585, 581, 580, 1080, 1555, 1552, 579, 547, 546,
	1100, 1878, 186, 792, 186, 545, 186, 1097, 544, 186,
	543, 147, 542, 541, 540, 186, 539, 538, 1872, 1873,
	537, 1890, 1891, 1892, 186, 186, 186, 186, 792, 536,
	535, 534, 533, 792, 532, 2270, 1101, 2634, 531, 2033,
	1893, 1629, 1878, 516, 1102, 910, 515, 118, 514, 513,
	2397, 512, 441, 1872, 1873, 1103, 1104, 1105, 1106, 419,
	412, 186, 411, 169, 1086, 1888, 168, 1733, 167, 166,
	165, 164, 1887, 1557, 163, 186, 765, 1946, 1293, 1286,
	1422, 1078, 1079, 162, 1115, 1123, 161, 1118, 1119, 1120,
	160, 186, 159, 158, 146, 157, 156, 908, 155, 913,
	154, 186, 153, 1121, 152, 1081, 1888, 151, 1122, 150,
	793, 896, 1102, 805, 1569, 1221, 1394, 1567, 1565, 933,
	933, 1113, 1563, 1003, 148, 2639, 929, 2637, 1101, 1080,
	2582, 2564, 792, 2549, 2544, 1100, 1878, 1074, 2482, 2463,
	2305, 1889, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	2385, 934, 2304, 1551, 1112, 953, 2300, 903, 2299, 2292,
	2291, 147, 2290, 186, 2286, 2285, 2284, 2283, 2277, 140,
	973, 1878, 2252, 2153, 1006, 1893, 141, 1767, 2007, 2148,
	2147, 2146, 1889, 2089, 2003, 1958, 2655, 1152, 1954, 1107,
	1103, 1104, 1105, 1106, 1924, 1921, 1909, 118, 1304, 1086,
	1888, 1900, 1871, 1001, 1102, 1868, 1867, 1865, 1852, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 1851, 1115,
	1123, 1116, 1219, 1836, 1659, 1074, 1527, 1095, 1145, 1218,
	1136, 1884, 1885, 1886, 1073, 1888, 1058, 2659, 1883, 1881,
	1882, 1874, 1875, 1876, 1877, 1879, 1880, 146, 2644, 2624,
	2493, 988, 2623, 1271, 2105, 985, 1113, 2554, 2553, 901,
	146, 1057, 896, 1101, 2552, 609, 2519, 2511, 2510, 2501,
	1872, 1873, 2499, 2475, 1052, 2474, 1889, 148, 1521, 1883,
	1881, 1882, 1874, 1875, 1876, 1877, 1879, 1880, 2431, 1004,
	148, 1114, 2410, 2393, 1092, 1093, 1099, 1098, 1094, 1117,
	2372, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	2359, 1889, 2384, 2047, 147, 2345, 2297, 2229, 2301, 2226,
	1059, 2225, 140, 2223, 1107, 1389, 1801, 147, 2194, 141,
	186, 1060, 186, 597, 1800, 140, 2193, 1528, 596, 1102,
	2174, 478, 141, 2162, 2074, 1993, 1985, 1070, 1071, 1971,
	1732, 1970, 38, 1075, 186, 186, 1116, 1872, 1873, 793,
	1956, 1925, 1899, 118, 1861, 41, 1884, 1885, 1886, 1860,
	1857, 1832, 1827, 1883, 1881, 1882, 1874, 1875, 1876, 1877,
	1879, 1880, 1181, 1184, 793, 1148, 1646, 1617, 1878, 793,
	1561, 477, 1263, 1178, 1179, 1872, 1873, 1198, 1182, 1197,
	1188, 1078, 1079, 1971, 1174, 2398, 1173, 1172, 1185, 1203,
	1882, 1874, 1875, 1876, 1877, 1879, 1880, 1171, 1170, 1169,
	479, 1168, 1167, 1166, 1165, 1081, 1114, 54, 1164, 481,
	55, 1163, 1162, 1161, 1117, 1160, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 1159, 111, 609, 1944, 1080,
	1158, 764, 1888, 1157, 1379, 1378, 1156, 1388, 1385, 1149,
	1137, 57, 1215, 1193, 1136, 984, 976, 949, 2391, 2279,
	792, 186, 2251, 2169, 2165, 1878, 1838, 804, 1191, 1647,
	1145, 718, 1764, 186, 1223, 1872, 1873, 1195, 793, 2045,
	1568, 1219, 717, 1566, 1564, 665, 186, 1134, 1562, 1000,
	1771, 1305, 186, 902, 186, 2019, 186, 2395, 2394, 2388,
	186, 1270, 1253, 1878, 2172, 2035, 1701, 1186, 1221, 1056,
	1154, 1262, 1187, 1996, 1050, 1990, 1984, 1923, 1889, 1922,
	1811, 1427, 997, 1078, 1079, 1375, 2050, 1268, 1989, 1793,
	1242, 2415, 1729, 1770, 1382, 2106, 1541, 58, 1843, 1177,
	2642, 186, 186, 1044, 2641, 2029, 2181, 1081, 792, 1151,
	186, 2547, 1755, 186, 447, 1231, 1276, 422, 1232, 173,
	2608, 1238, 2607, 1140, 119, 60, 1361, 61, 1434, 2056,
	1231, 1080, 2353, 1232, 804, 2523, 609, 1673, 1773, 186,
	1314, 146, 2456, 1045, 186, 1787, 2455, 607, 480, 186,
	186, 94, 186, 2453, 186, 2452, 186, 1290, 186, 2214,
	1292, 1384, 745, 929, 1295, 1355, 747, 2210, 743, 186,
	1231, 148, 431, 1232, 2178, 186, 186, 1254, 1874, 1875,
	1876, 1877, 1879, 1880, 186, 186, 2366, 741, 1383, 738,
	2177, 1036, 1856, 720, 1855, 1854, 1665, 1233, 1853, 442,
	1814, 1086, 1754, 606, 1278, 2205, 1281, 186, 147, 1696,
	1692, 804, 1233, 1553, 1676, 1687, 140, 1503, 1192, 889,
	1621, 1376, 1620, 141, 1464, 2653, 1256, 1726, 583, 1420,
	495, 432, 2046, 998, 1396, 1419, 174, 2218, 1444, 1872,
	1873, 2219, 1314, 1314, 118, 1518, 1053, 1455, 1462, 1302,
	1363, 1518, 1233, 1204, 1303, 985, 2000, 1362, 608, 1258,
	2522, 111, 1399, 590, 2560, 1554, 1366, 1876, 1877, 1879,
	1880, 1282, 1380, 1392, 1421, 2436, 999, 1410, 1557, 1239,
	2196, 1400, 1030, 1665, 1436, 446, 2599, 1404, 1525, 1405,
	2026, 1406, 1664, 1407, 1523, 1408, 1403, 719, 1077, 1009,
	175, 1236, 420, 1874, 1875, 1876, 1877, 1879, 1880, 589,
	2027, 2334, 1414, 1416, 1088, 1249, 1262, 1555, 1552, 1237,
	1675, 1031, 590, 186, 1428, 186, 170, 983, 186, 1205,
	1995, 1248, 1435, 1395, 1043, 1429, 2099, 1591, 597, 186,
	1541, 597, 597, 1445, 1453, 1987, 1446, 1447, 804, 445,
	2335, 186, 1240, 1246, 2607, 186, 2026, 1878, 186, 2626,
	1078, 1079, 186, 1982, 2062, 505, 186, 605, 1389, 1386,
	446, 1247, 186, 2504, 792, 1626, 793, 1765, 1536, 1219,
	1538, 186, 804, 805, 1081, 484, 186, 1418, 425, 2057,
	176, 1872, 1873, 2055, 186, 1557, 1590, 1529, 1880, 1600,
	1526, 1055, 186, 1229, 425, 1175, 434, 433, 1080, 1638,
	1463, 1674, 174, 186, 1557, 186, 1690, 186, 1803, 1804,
	186, 1888, 186, 1244, 186, 186, 1049, 186, 792, 792,
	1583, 2636, 792, 1234, 445, 2211, 186, 487, 1299, 1677,
	1679, 2634, 1666, 1084, 1085, 1087, 1088, 1750, 1234, 1684,
	620, 1652, 171, 2203, 1720, 1367, 1623, 1624, 2197, 1694,
	492, 2330, 1054, 2331, 793, 1633, 488, 1648, 1639, 1689,
	1749, 1643, 1644, 1364, 1287, 1551, 175, 1682, 1086, 2406,
	739, 749, 173, 1688, 748, 1223, 739, 1669, 1234, 2579,
	805, 1731, 172, 1731, 2333, 2369, 1697, 1889, 489, 609,
	1040, 444, 2437, 2336, 609, 740, 1514, 739, 1035, 1878,
	1757, 2459, 1743, 1131, 1816, 933, 2096, 933, 2061, 491,
	1517, 1500, 1512, 1642, 2619, 804, 1776, 1859, 111, 2598,
	584, 447, 494, 186, 111, 413, 1735, 1010, 1778, 1746,
	1662, 443, 1101, 1398, 1752, 989, 1744, 1649, 1745, 186,
	186, 186, 1747, 186, 953, 1753, 1524, 1756, 1872, 1873,
	1779, 1890, 1891, 1892, 1766, 1245, 176, 805, 2097, 2627,
	1768, 1041, 1777, 1888, 1824, 2078, 1011, 1658, 1076, 1008,
	2063, 1698, 2580, 186, 662, 2332, 444, 609, 608, 2531,
	1822, 2261, 1182, 2060, 1185, 1881, 1882, 1874, 1875, 1876,
	1877, 1879, 1880, 1508, 421, 1179, 1178, 982, 2266, 1017,
	1065, 1509, 1887, 1510, 2532, 1774, 447, 1515, 1102, 2512,
	421, 994, 1061, 2578, 2606, 487, 443, 1042, 171, 426,
	1140, 2604, 1498, 1501, 422, 2597, 2377, 490, 1543, 111,
	1066, 2581, 1078, 1079, 423, 426, 1557, 2295, 492, 1889,
	422, 1575, 1575, 1588, 488, 1788, 994, 1608, 173, 440,
	423, 1612, 1613, 1615, 1792, 1790, 1081, 1817, 172, 1497,
	2262, 1819, 1797, 1796, 2513, 574, 1878, 2617, 1064, 435,
	1799, 1820, 1723, 979, 1288, 1825, 489, 1627, 1591, 1591,
	1080, 971, 995, 617, 493, 1210, 996, 1999, 2447, 2095,
	2632, 2446, 414, 716, 805, 1066, 1005, 491, 574, 2429,
	2135, 994, 1065, 2496, 2180, 1893, 1213, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 1784, 1967, 617, 995, 1963, 1511,
	793, 996, 1640, 1845, 2618, 2352, 1513, 1724, 805, 1815,
	1888, 1374, 2351, 1211, 897, 899, 1883, 1881, 1882, 1874,
	1875, 1876, 1877, 1879, 1880, 1277, 2620, 2349, 2296, 575,
	1086, 186, 804, 1269, 1591, 1591, 1591, 186, 186, 1499,
	1265, 186, 2540, 1928, 415, 1952, 186, 1842, 1934, 186,
	1064, 1413, 995, 1441, 793, 793, 996, 186, 793, 1370,
	1372, 2645, 575, 186, 186, 186, 1065, 1821, 906, 186,
	2232, 2379, 186, 1373, 1823, 905, 1941, 1066, 186, 186,
	186, 186, 186, 2631, 2430, 2136, 1889, 179, 186, 1973,
	792, 2137, 1018, 186, 1212, 490, 974, 804, 1972, 1809,
	503, 1932, 978, 1637, 1314, 1636, 186, 1936, 1937, 1968,
	994, 1942, 1948, 1906, 1907, 1908, 186, 1953, 186, 497,
	186, 792, 792, 2350, 186, 606, 926, 924, 186, 620,
	1442, 915, 1988, 186, 1064, 186, 1929, 1943, 2348, 2221,
	576, 2370, 186, 1314, 2006, 3, 2008, 794, 1968, 1964,
	806, 805, 493, 1998, 609, 186, 792, 2307, 2157, 1560,
	436, 2409, 2294, 2011, 2012, 1983, 2427, 1959, 1947, 2217,
	186, 1903, 2073, 576, 2001, 1992, 1884, 1885, 1886, 1866,
	1957, 1826, 1981, 1883, 1881, 1882, 1874, 1875, 1876, 1877,
	1879, 1880, 1769, 476, 34, 2428, 1314, 1703, 2042, 1695,
	2009, 2044, 437, 1686, 2013, 475, 33, 2031, 1048, 1039,
	186, 1047, 977, 1034, 1904, 2010, 1028, 474, 30, 2022,
	1061, 577, 1794, 1126, 1127, 1128, 1129, 1130, 609, 473,
	70, 1933, 1411, 438, 1139, 439, 2028, 2037, 2038, 1402,
	2039, 2040, 1155, 1026, 1147, 2036, 1559, 2574, 472, 69,
	1252, 2041, 894, 2537, 577, 578, 1024, 1591, 1591, 895,
	186, 1314, 2054, 2323, 2052, 2053, 2051, 502, 891, 2201,
	1082, 1083, 1084, 1085, 1087, 1088, 1022, 2058, 1349, 2076,
	1830, 2199, 469, 22, 2179, 2064, 496, 1833, 578, 1348,
	925, 923, 1313, 2066, 1020, 775, 1994, 1314, 1314, 1014,
	470, 23, 1455, 2110, 1849, 1850, 1314, 1314, 2091, 2092,
	2093, 1455, 2115, 2015, 1727, 1721, 1591, 1591, 1591, 1591,
	1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591,
	1591, 1591, 1591, 1591, 1591, 2080, 1591, 2082, 1719, 1314,
	1038, 1033, 186, 34, 2145, 2085, 2107, 1027, 186, 2098,
	2100, 2101, 1298, 2112, 1898, 33, 2141, 186, 186, 1201,
	1201, 1608, 1608, 1608, 2109, 609, 1911, 30, 468, 28,
	467, 20, 1296, 2114, 1025, 1294, 1291, 465, 19, 70,
	1349, 1349, 466, 18, 457, 15, 2142, 1023, 805, 458,
	16, 1348, 1348, 1289, 1313, 1313, 794, 2191, 69, 2155,
	464, 52, 2140, 1250, 2175, 922, 186, 1021, 186, 2158,
	1243, 2168, 2164, 2216, 2160, 2161, 186, 1241, 2192, 792,
	1235, 794, 2190, 111, 737, 1019, 794, 2086, 2227, 2017,
	1013, 2207, 22, 2206, 186, 186, 2224, 2207, 2470, 2212,
	1351, 1068, 2183, 2207, 1206, 2215, 793, 2242, 2234, 2176,
	23, 186, 2608, 805, 761, 1807, 2248, 456, 51, 2204,
	186, 2390, 804, 186, 186, 2389, 463, 12, 1393, 804,
	2200, 2472, 2202, 1681, 762, 2173, 2240, 793, 793, 2228,
	2222, 462, 45, 455, 46, 461, 7, 1665, 460, 6,
	2235, 1699, 2244, 2236, 1795, 2238, 1680, 2237, 1691, 2243,
	2249, 1685, 1665, 1210, 2506, 1932, 186, 2233, 1314, 459,
	36, 1678, 793, 1425, 1426, 454, 35, 2342, 28, 1069,
	20, 1808, 482, 1012, 1213, 794, 2273, 19, 1078, 1079,
	2268, 2484, 18, 2458, 15, 2308, 921, 1072, 1693, 16,
	1208, 1683, 1351, 1351, 1350, 2536, 1078, 1079, 742, 744,
	52, 1211, 763, 2375, 1734, 1722, 1718, 1625, 1365, 1306,
	186, 2615, 2630, 186, 1872, 1873, 2421, 2293, 2281, 1209,
	1081, 1078, 1079, 804, 186, 186, 1080, 2313, 186, 186,
	186, 1781, 1780, 2250, 2154, 504, 2102, 1781, 2048, 1949,
	1918, 1782, 1622, 1619, 1080, 186, 1618, 1549, 620, 620,
	186, 1142, 186, 2094, 186, 186, 186, 51, 1152, 1150,
	2311, 186, 792, 1046, 2310, 804, 12, 1037, 792, 2191,
	2343, 2346, 2318, 2314, 2312, 1032, 186, 186, 1029, 1015,
	2309, 45, 1212, 46, 792, 7, 2365, 2317, 6, 981,
	2192, 1368, 2347, 582, 2190, 2435, 1350, 1350, 485, 2191,
	1401, 2371, 1016, 1945, 2362, 2191, 1645, 2376, 483, 36,
	2322, 2263, 2530, 2381, 1438, 35, 1443, 2287, 2269, 2149,
	2192, 2374, 1450, 2373, 2190, 1858, 2192, 2489, 484, 2405,
	2190, 1558, 1465, 1466, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482,
	1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492,
	1493, 1494, 1495, 1496, 2387, 1502, 1153, 1504, 1505, 1506,
	1507, 2382, 2380, 2386, 186, 49, 186, 2188, 804, 186,
	487, 1314, 2399, 639, 1530, 2324, 1591, 186, 2182, 1713,
	1712, 1139, 2404, 804, 2209, 807, 1377, 661, 1574, 2411,
	1456, 2418, 2213, 492, 736, 663, 1311, 664, 1312, 488,
	1570, 1571, 1183, 651, 1587, 2191, 1599, 1601, 1606, 1609,
	1610, 1611, 2315, 1309, 950, 793, 2438, 1591, 186, 1262,
	1738, 792, 1381, 1522, 1539, 186, 2192, 1314, 1841, 1146,
	2190, 489, 2449, 186, 186, 792, 792, 631, 2191, 186,
	2461, 643, 642, 2439, 2423, 1537, 2441, 975, 630, 1950,
	2468, 2025, 491, 2207, 2364, 2457, 186, 2383, 805, 2192,
	2477, 186, 1440, 2190, 2473, 805, 2469, 2476, 186, 2480,
	1798, 1310, 2471, 2420, 1437, 2021, 2198, 2478, 2479, 424,
	1869, 948, 1597, 1589, 1314, 1585, 2481, 2450, 2451, 1051,
	1132, 1591, 1739, 186, 186, 2494, 2495, 2464, 1002, 2500,
	186, 2032, 2486, 794, 1763, 2483, 1196, 1448, 792, 2467,
	806, 645, 2515, 186, 2502, 792, 792, 2518, 760, 759,
	2643, 1371, 1775, 1125, 2492, 1124, 746, 2498, 2517, 1206,
	993, 2521, 992, 2526, 2527, 1966, 2625, 2520, 2505, 2195,
	186, 2546, 186, 2503, 145, 186, 142, 804, 144, 143,
	183, 1997, 73, 32, 2509, 31, 417, 93, 92, 91,
	427, 90, 89, 88, 87, 86, 448, 2425, 2556, 805,
	490, 498, 183, 1310, 1310, 506, 186, 85, 511, 2561,
	2555, 84, 2440, 2557, 2559, 2191, 530, 2558, 1210, 2542,
	83, 794, 2572, 186, 186, 186, 2571, 2573, 82, 81,
	80, 186, 79, 2584, 78, 2543, 2192, 77, 793, 1213,
	2190, 805, 1349, 76, 793, 186, 2596, 806, 2594, 2595,
	2593, 2591, 75, 1348, 526, 1208, 1313, 493, 523, 2603,
	793, 2605, 72, 71, 29, 2609, 1211, 25, 97, 24,
	2588, 2589, 2590, 68, 2613, 67, 27, 17, 2614, 11,
	21, 1349, 753, 753, 1209, 115, 114, 2622, 2621, 113,
	417, 112, 1348, 14, 2629, 1313, 13, 110, 109, 1940,
	108, 615, 107, 574, 106, 804, 10, 804, 2628, 9,
	96, 2259, 42, 417, 417, 43, 797, 417, 2647, 2648,
	2654, 617, 183, 893, 806, 8, 40, 39, 2660, 95,
	2661, 136, 2663, 133, 1349, 2662, 135, 2417, 2669, 132,
	2667, 2668, 2671, 134, 104, 1348, 138, 1212, 1313, 137,
	130, 128, 129, 131, 805, 616, 127, 126, 139, 103,
	102, 101, 100, 99, 5, 2, 1, 1812, 1813, 805,
	0, 0, 0, 1818, 2443, 0, 2548, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 575, 2454, 0,
	0, 0, 1831, 0, 0, 0, 0, 0, 2334, 1349,
	0, 2327, 0, 0, 1351, 1837, 0, 793, 0, 0,
	1348, 1844, 2325, 1313, 1848, 0, 0, 2329, 0, 635,
	1939, 793, 793, 0, 0, 0, 0, 0, 1078, 1079,
	0, 1862, 0, 0, 0, 1349, 1349, 2335, 0, 0,
	0, 0, 0, 1351, 1349, 1349, 1348, 1348, 0, 1313,
	1313, 0, 1081, 1828, 1829, 1348, 1348, 0, 1313, 1313,
	2328, 806, 0, 0, 416, 1139, 0, 0, 0, 0,
	0, 0, 1606, 1606, 1606, 0, 1080, 1349, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 794, 1348, 0,
	0, 1313, 0, 0, 793, 806, 1351, 0, 576, 1201,
	0, 793, 793, 0, 2638, 1935, 2640, 0, 1350, 0,
	0, 0, 0, 2533, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1895,
	1896, 1897, 0, 805, 0, 0, 0, 0, 0, 2550,
	2551, 794, 794, 0, 0, 794, 1086, 1350, 2330, 0,
	2331, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1351, 0, 530, 0, 530, 0, 916, 770, 0,
	919, 0, 0, 0, 0, 0, 417, 614, 0, 577,
	0, 2333, 0, 0, 0, 530, 530, 417, 941, 0,
	2336, 779, 783, 0, 0, 801, 0, 1351, 1351, 2023,
	1350, 0, 0, 0, 0, 0, 1351, 1351, 0, 0,
	1101, 0, 0, 578, 0, 0, 0, 0, 0, 0,
	0, 0, 530, 0, 1758, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 530, 0, 806, 1351,
	620, 620, 0, 0, 0, 0, 1349, 0, 41, 0,
	0, 0, 980, 620, 0, 0, 0, 1348, 0, 0,
	1313, 805, 530, 805, 0, 1350, 0, 0, 0, 0,
	2065, 0, 2332, 0, 1759, 1450, 0, 0, 0, 0,
	0, 2069, 0, 0, 2070, 0, 1102, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2075, 0, 0, 0,
	0, 1350, 1350, 1760, 0, 2083, 0, 0, 0, 0,
	1350, 1350, 481, 2087, 0, 0, 1935, 0, 0, 0,
	0, 0, 0, 0, 417, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2111, 0, 0, 0,
	2113, 0, 0, 1350, 57, 1872, 1873, 0, 1890, 1891,
	1892, 0, 2071, 2072, 0, 0, 0, 0, 0, 0,
	0, 0, 2077, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2143, 2144, 0, 0, 0, 0, 0,
	0, 0, 2150, 2151, 2152, 0, 1082, 1083, 1084, 1085,
	1087, 1088, 0, 0, 0, 1310, 0, 0, 0, 1887,
	0, 0, 0, 0, 0, 0, 0, 0, 1351, 0,
	2163, 2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124,
	2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134,
	58, 2138, 0, 0, 1310, 0, 0, 0, 0, 0,
	2184, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 783, 0, 0, 119, 60, 0,
	61, 0, 0, 1878, 0, 801, 0, 1872, 1873, 1349,
	1890, 1891, 1892, 0, 146, 806, 0, 0, 0, 0,
	1348, 480, 0, 1313, 94, 0, 0, 1310, 0, 0,
	0, 511, 0, 753, 0, 0, 1201, 0, 0, 0,
	0, 0, 1893, 0, 148, 2245, 640, 65, 0, 0,
	0, 0, 1350, 0, 0, 417, 417, 0, 0, 0,
	0, 1887, 0, 0, 0, 1349, 0, 1888, 0, 0,
	0, 0, 0, 794, 0, 0, 1348, 0, 0, 1313,
	806, 147, 0, 2272, 0, 0, 0, 2275, 2276, 140,
	0, 2278, 1310, 0, 0, 0, 141, 0, 2280, 0,
	2282, 0, 65, 0, 794, 794, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2289, 118, 0, 0,
	0, 0, 1349, 0, 0, 1878, 0, 0, 1310, 1310,
	0, 0, 0, 1348, 0, 0, 1313, 1310, 1310, 794,
	478, 0, 783, 1889, 0, 0, 0, 0, 0, 2298,
	0, 38, 0, 0, 0, 0, 0, 0, 598, 0,
	0, 0, 0, 0, 41, 610, 0, 0, 0, 0,
	1310, 1351, 183, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 417, 0, 0, 0, 0, 1888,
	477, 0, 0, 0, 0, 771, 65, 1275, 0, 2344,
	0, 0, 0, 417, 0, 417, 0, 417, 0, 0,
	0, 1283, 0, 0, 0, 0, 0, 0, 0, 479,
	0, 0, 0, 0, 0, 0, 54, 1351, 481, 55,
	0, 0, 0, 1884, 1885, 1886, 0, 0, 0, 0,
	1883, 1881, 1882, 1874, 1875, 1876, 1877, 1879, 1880, 0,
	0, 0, 530, 183, 0, 0, 0, 0, 0, 0,
	57, 183, 0, 0, 530, 1889, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1350, 0, 0, 0, 0,
	2400, 2401, 0, 0, 1351, 0, 0, 0, 0, 0,
	530, 0, 0, 0, 0, 530, 0, 0, 0, 0,
	183, 530, 0, 530, 0, 530, 0, 530, 0, 530,
	0, 2413, 0, 0, 0, 0, 0, 2416, 0, 0,
	1412, 0, 0, 0, 0, 0, 530, 530, 0, 0,
	0, 1350, 0, 770, 1226, 1423, 417, 0, 0, 1310,
	0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
	0, 0, 0, 0, 0, 1884, 1885, 1886, 530, 0,
	0, 2448, 1883, 1881, 1882, 1874, 1875, 1876, 1877, 1879,
	1880, 2408, 0, 119, 60, 0, 61, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1350, 0,
	146, 0, 0, 0, 1409, 0, 0, 480, 0, 0,
	94, 0, 794, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2432, 0, 0, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2497, 0, 1214, 0, 806, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 147, 0, 0,
	478, 0, 1261, 0, 0, 140, 0, 0, 0, 0,
	0, 38, 141, 0, 511, 0, 753, 0, 0, 893,
	0, 783, 0, 1280, 41, 1280, 2485, 0, 0, 0,
	417, 0, 0, 118, 0, 0, 0, 0, 0, 610,
	0, 0, 1657, 0, 0, 0, 417, 0, 0, 417,
	477, 0, 0, 1670, 0, 0, 0, 417, 0, 0,
	0, 0, 0, 417, 0, 0, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 0, 0, 1702, 0, 479,
	0, 2570, 2570, 0, 0, 1709, 54, 0, 481, 55,
	0, 0, 0, 893, 0, 0, 806, 2585, 0, 0,
	0, 0, 1310, 0, 417, 0, 1742, 0, 530, 0,
	0, 530, 0, 530, 0, 417, 417, 2570, 1748, 0,
	57, 0, 0, 0, 0, 0, 0, 1670, 0, 0,
	0, 0, 0, 0, 0, 794, 0, 0, 806, 0,
	0, 794, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 794, 1310, 0,
	0, 0, 0, 0, 0, 2570, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 451,
	0, 0, 0, 0, 2651, 0, 0, 0, 0, 598,
	0, 0, 0, 0, 0, 2651, 58, 0, 2651, 2651,
	0, 478, 0, 0, 0, 1310, 0, 0, 0, 1135,
	0, 1138, 38, 0, 1786, 0, 0, 0, 1143, 0,
	0, 0, 0, 119, 60, 41, 61, 0, 0, 0,
	417, 417, 417, 0, 417, 0, 0, 0, 0, 0,
	146, 806, 0, 0, 0, 0, 0, 480, 0, 0,
	94, 477, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 0, 0, 0, 417, 0, 0, 0, 0, 0,
	148, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	479, 0, 0, 0, 0, 0, 0, 54, 0, 481,
	55, 0, 0, 0, 794, 0, 0, 0, 770, 0,
	0, 0, 0, 0, 0, 0, 0, 147, 794, 794,
	0, 0, 0, 0, 770, 140, 0, 1660, 0, 0,
	0, 57, 141, 0, 0, 783, 0, 0, 0, 0,
	0, 783, 0, 0, 0, 0, 0, 0, 0, 0,
	801, 0, 0, 118, 0, 65, 0, 0, 0, 0,
	1222, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1740, 0, 0, 0, 1078, 1079, 0, 0,
	0, 794, 0, 801, 801, 0, 0, 0, 794, 794,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 0, 0, 0, 0, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 1080, 0, 0, 0, 0, 0,
	1100, 0, 0, 0, 119, 60, 0, 61, 0, 0,
	0, 0, 417, 0, 0, 0, 0, 0, 417, 417,
	0, 146, 417, 0, 0, 0, 0, 1657, 480, 0,
	1657, 94, 0, 0, 0, 0, 0, 0, 1955, 0,
	0, 0, 0, 0, 417, 1961, 1962, 0, 0, 0,
	1670, 148, 0, 1969, 0, 1103, 1104, 1105, 1106, 1974,
	1975, 1977, 1979, 1980, 1086, 0, 0, 0, 0, 417,
	0, 0, 0, 0, 1991, 0, 0, 0, 1789, 801,
	1791, 0, 783, 0, 0, 0, 0, 417, 147, 0,
	0, 0, 0, 0, 0, 0, 140, 1275, 0, 1275,
	0, 530, 0, 141, 0, 417, 0, 0, 0, 2020,
	0, 0, 1810, 0, 417, 0, 2030, 0, 806, 0,
	806, 0, 0, 417, 452, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 1786, 0, 0, 0,
	0, 0, 0, 478, 0, 0, 0, 0, 0, 0,
	0, 1786, 0, 0, 38, 1078, 1079, 0, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 41, 1096, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1081,
	65, 0, 1122, 0, 0, 0, 0, 0, 0, 1107,
	0, 417, 0, 477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 1102, 0, 0, 0, 0, 1100,
	0, 0, 0, 0, 598, 0, 1097, 598, 598, 0,
	0, 0, 479, 0, 0, 0, 0, 0, 0, 54,
	0, 481, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 2104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 1103, 1104, 1105, 1106, 0, 0,
	1520, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 610, 0, 0, 0, 0, 1138, 0,
	770, 0, 0, 1115, 1123, 0, 770, 770, 0, 0,
	770, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1960, 417, 0, 0, 0, 0, 0, 1657,
	1113, 0, 0, 0, 0, 0, 0, 1101, 893, 1657,
	0, 1872, 1873, 0, 1890, 1891, 1892, 1986, 0, 58,
	0, 0, 0, 2187, 0, 771, 0, 0, 0, 0,
	0, 0, 0, 1112, 0, 2002, 2208, 0, 0, 0,
	0, 1222, 2208, 0, 0, 0, 119, 60, 2208, 61,
	0, 0, 0, 2014, 65, 0, 0, 1670, 0, 1275,
	0, 0, 1261, 146, 65, 1887, 0, 2230, 1107, 0,
	480, 1261, 0, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 417, 417, 0, 0, 0,
	0, 0, 0, 148, 0, 0, 65, 0, 65, 0,
	1116, 0, 2256, 0, 0, 0, 1095, 0, 0, 0,
	0, 2258, 0, 0, 2264, 417, 0, 65, 0, 0,
	0, 0, 0, 65, 0, 0, 0, 0, 0, 1878,
	147, 0, 0, 0, 0, 0, 0, 0, 140, 2067,
	0, 0, 0, 0, 0, 141, 0, 0, 0, 0,
	1894, 0, 0, 0, 0, 0, 0, 2288, 1872, 1873,
	0, 1890, 1891, 1892, 0, 0, 118, 0, 1893, 0,
	1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	0, 0, 0, 1888, 0, 0, 0, 1914, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 417, 1887, 0, 893, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1657, 893, 0, 65, 2320,
	2321, 1670, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2187, 893, 0, 0, 0,
	0, 2354, 0, 2355, 0, 417, 2357, 2358, 0, 0,
	0, 0, 417, 0, 0, 0, 0, 0, 0, 1889,
	0, 770, 0, 0, 0, 2187, 1878, 893, 1709, 0,
	0, 2187, 0, 0, 0, 0, 0, 0, 0, 1078,
	1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0,
	0, 0, 1096, 0, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 1081, 0, 1893, 1122, 0, 1520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1080, 1138, 0,
	1888, 0, 0, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 1884,
	1885, 1886, 0, 1740, 770, 0, 1883, 1881, 1882, 1874,
	1875, 1876, 1877, 1879, 1880, 1670, 0, 2424, 0, 0,
	2426, 0, 0, 0, 0, 0, 0, 0, 417, 0,
	0, 2187, 0, 2265, 0, 0, 0, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 1138, 0, 0, 0, 1889, 0, 2208, 0,
	0, 0, 0, 0, 2187, 0, 0, 1115, 1123, 417,
	0, 0, 0, 0, 0, 0, 893, 0, 0, 0,
	0, 0, 0, 0, 2256, 2256, 1121, 771, 0, 0,
	893, 0, 0, 771, 771, 0, 0, 771, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 2491, 0, 0,
	0, 1101, 1657, 0, 0, 0, 0, 0, 0, 1275,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 1112, 0, 0,
	65, 0, 0, 0, 2507, 2508, 1884, 1885, 1886, 0,
	65, 417, 0, 1883, 1881, 1882, 1874, 1875, 1876, 1877,
	1879, 1880, 0, 0, 2525, 0, 0, 0, 0, 0,
	0, 0, 1107, 2356, 0, 65, 0, 0, 0, 65,
	2361, 0, 0, 0, 0, 0, 0, 1102, 0, 610,
	0, 2541, 0, 893, 0, 0, 417, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 0,
	1095, 2187, 0, 0, 0, 1078, 1079, 0, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 2491, 1096, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 1122, 0, 893, 893, 893, 0, 0, 0,
	0, 0, 417, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 2602, 0, 0, 1100,
	0, 0, 0, 0, 1114, 0, 1097, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 0, 0, 0, 0, 0, 0,
	0, 1913, 0, 0, 1078, 1079, 2433, 1108, 1109, 1110,
	1118, 1119, 1120, 0, 0, 0, 0, 1096, 0, 0,
	0, 1111, 0, 0, 1103, 1104, 1105, 1106, 1081, 0,
	0, 1122, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2466, 0, 0,
	0, 0, 1080, 1115, 1123, 0, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 1101, 771, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 1086, 1112, 0, 0, 0, 0, 0, 2514,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1115, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 2545, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	1116, 771, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1740, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1114, 0, 1102, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 1116,
	0, 0, 0, 0, 0, 1095, 0, 1912, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 771, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1114,
	0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0,
	0, 0, 0, 0, 0, 0, 1864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 803, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 808, 0, 190, 809,
	810, 811, 812, 352, 813, 814, 815, 816, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 817, 195,
	359, 360, 196, 197, 818, 819, 361, 362, 363, 820,
	198, 364, 821, 795, 822, 199, 200, 201, 0, 203,
	204, 205, 202, 823, 206, 0, 207, 208, 824, 721,
	209, 210, 211, 825, 826, 828, 827, 829, 830, 831,
	212, 213, 418, 214, 365, 215, 366, 367, 832, 216,
	833, 217, 834, 218, 835, 836, 219, 220, 837, 221,
	838, 0, 839, 368, 222, 224, 223, 225, 369, 370,
	840, 722, 841, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 65, 228, 842, 229, 843, 844, 723, 845,
	230, 374, 846, 375, 847, 1520, 231, 232, 233, 234,
	376, 377, 725, 848, 378, 238, 849, 235, 850, 724,
	236, 379, 237, 380, 381, 382, 383, 384, 851, 385,
	852, 726, 239, 240, 241, 727, 386, 387, 242, 243,
	244, 853, 246, 245, 854, 388, 728, 247, 248, 729,
	855, 249, 250, 856, 857, 251, 0, 252, 730, 253,
	254, 256, 389, 255, 731, 257, 258, 260, 259, 858,
	859, 860, 390, 261, 391, 262, 263, 861, 264, 862,
	863, 265, 864, 865, 266, 392, 732, 267, 733, 393,
	268, 269, 270, 271, 272, 273, 866, 274, 394, 275,
	395, 276, 867, 277, 278, 279, 280, 281, 396, 282,
	283, 868, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 869, 296, 734, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 870, 309,
	398, 308, 310, 311, 871, 312, 300, 301, 313, 735,
	314, 399, 400, 315, 872, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 873, 323, 874, 324,
	325, 326, 327, 328, 329, 330, 331, 875, 403, 404,
	405, 876, 877, 332, 333, 406, 407, 878, 334, 335,
	336, 337, 879, 880, 338, 339, 340, 341, 881, 342,
	882, 408, 343, 344, 345, 409, 410, 883, 884, 346,
	885, 886, 887, 888, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 803,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1650,
	0, 0, 0, 0, 0, 188, 189, 808, 1651, 190,
	809, 810, 811, 812, 352, 813, 814, 815, 816, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 817,
	195, 359, 360, 196, 197, 818, 819, 361, 362, 363,
	820, 198, 364, 821, 795, 822, 199, 200, 201, 0,
	203, 204, 205, 202, 823, 206, 0, 207, 208, 824,
	721, 209, 210, 211, 825, 826, 828, 827, 829, 830,
	831, 212, 213, 418, 214, 365, 215, 366, 367, 832,
	216, 833, 217, 834, 218, 835, 836, 219, 220, 837,
	221, 838, 0, 839, 368, 222, 224, 223, 225, 369,
	370, 840, 722, 841, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 842, 229, 843, 844, 723,
	845, 230, 374, 846, 375, 847, 0, 231, 232, 233,
	234, 376, 377, 725, 848, 378, 238, 849, 235, 850,
	724, 236, 379, 237, 380, 381, 382, 383, 384, 851,
	385, 852, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 853, 246, 245, 854, 388, 728, 247, 248,
	729, 855, 249, 250, 856, 857, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	858, 859, 860, 390, 261, 391, 262, 263, 861, 264,
	862, 863, 265, 864, 865, 266, 392, 732, 267, 733,
	393, 268, 269, 270, 271, 272, 273, 866, 274, 394,
	275, 395, 276, 867, 277, 278, 279, 280, 281, 396,
	282, 283, 868, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 869, 296, 734, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 870,
	309, 398, 308, 310, 311, 871, 312, 300, 301, 313,
	735, 314, 399, 400, 315, 872, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 873, 323, 874,
	324, 325, 326, 327, 328, 329, 330, 331, 875, 403,
	404, 405, 876, 877, 332, 333, 406, 407, 878, 334,
	335, 336, 337, 879, 880, 338, 339, 340, 341, 881,
	342, 882, 408, 343, 344, 345, 409, 410, 883, 884,
	346, 885, 886, 887, 888, 347, 348, 349, 350, 351,
	0, 803, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 808,
	2316, 190, 809, 810, 811, 812, 352, 813, 814, 815,
	816, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 817, 195, 359, 360, 196, 197, 818, 819, 361,
	362, 363, 820, 198, 364, 821, 795, 822, 199, 200,
	201, 0, 203, 204, 205, 202, 823, 206, 0, 207,
	208, 824, 721, 209, 210, 211, 825, 826, 828, 827,
	829, 830, 831, 212, 213, 418, 214, 365, 215, 366,
	367, 832, 216, 833, 217, 834, 218, 835, 836, 219,
	220, 837, 221, 838, 0, 839, 368, 222, 224, 223,
	225, 369, 370, 840, 722, 841, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 842, 229, 843,
	844, 723, 845, 230, 374, 846, 375, 847, 0, 231,
	232, 233, 234, 376, 377, 725, 848, 378, 238, 849,
	235, 850, 724, 236, 379, 237, 380, 381, 382, 383,
	384, 851, 385, 852, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 853, 246, 245, 854, 388, 728,
	247, 248, 729, 855, 249, 250, 856, 857, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 858, 859, 860, 390, 261, 391, 262, 263,
	861, 264, 862, 863, 265, 864, 865, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 866,
	274, 394, 275, 395, 276, 867, 277, 278, 279, 280,
	281, 396, 282, 283, 868, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 869, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 870, 309, 398, 308, 310, 311, 871, 312, 300,
	301, 313, 735, 314, 399, 400, 315, 872, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 873,
	323, 874, 324, 325, 326, 327, 328, 329, 330, 331,
	875, 403, 404, 405, 876, 877, 332, 333, 406, 407,
	878, 334, 335, 336, 337, 879, 880, 338, 339, 340,
	341, 881, 342, 882, 408, 343, 344, 345, 409, 410,
	883, 884, 346, 885, 886, 887, 888, 347, 348, 349,
	350, 351, 803, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1257, 188, 189,
	808, 0, 190, 809, 810, 811, 812, 352, 813, 814,
	815, 816, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 817, 195, 359, 360, 196, 197, 818, 819,
	361, 362, 363, 820, 198, 364, 821, 795, 822, 199,
	200, 201, 0, 203, 204, 205, 202, 823, 206, 0,
	207, 208, 824, 721, 209, 210, 211, 825, 826, 828,
	827, 829, 830, 831, 212, 213, 418, 214, 365, 215,
	366, 367, 832, 216, 833, 217, 834, 218, 835, 836,
	219, 220, 837, 221, 838, 0, 839, 368, 222, 224,
	223, 225, 369, 370, 840, 722, 841, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 842, 229,
	843, 844, 723, 845, 230, 374, 846, 375, 847, 0,
	231, 232, 233, 234, 376, 377, 725, 848, 378, 238,
	849, 235, 850, 724, 236, 379, 237, 380, 381, 382,
	383, 384, 851, 385, 852, 726, 239, 240, 241, 727,
	386, 387, 242, 243, 244, 853, 246, 245, 854, 388,
	728, 247, 248, 729, 855, 249, 250, 856, 857, 251,
	0, 252, 730, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 858, 859, 860, 390, 261, 391, 262,
	263, 861, 264, 862, 863, 265, 864, 865, 266, 392,
	732, 267, 733, 393, 268, 269, 270, 271, 272, 273,
	866, 274, 394, 275, 395, 276, 867, 277, 278, 279,
	280, 281, 396, 282, 283, 868, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 869,
	296, 734, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 870, 309, 398, 308, 310, 311, 871, 312,
	300, 301, 313, 735, 314, 399, 400, 315, 872, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	873, 323, 874, 324, 325, 326, 327, 328, 329, 330,
	331, 875, 403, 404, 405, 876, 877, 332, 333, 406,
	407, 878, 334, 335, 336, 337, 879, 880, 338, 339,
	340, 341, 881, 342, 882, 408, 343, 344, 345, 409,
	410, 883, 884, 346, 885, 886, 887, 888, 347, 348,
	349, 350, 351, 1548, 0, 659, 648, 649, 646, 647,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 1545, 0, 190, 0, 0, 0, 0,
	676, 641, 0, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 629, 216, 0, 217, 0,
	218, 1546, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 626, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 633, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 715, 1544, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 627, 0, 0, 0,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 623,
	624, 1547, 0, 0, 0, 0, 0, 0, 634, 1542,
	0, 0, 0, 611, 637, 659, 648, 649, 646, 647,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	676, 641, 0, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 629, 216, 0, 217, 0,
	218, 0, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 626, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 633, 299, 0,
	303, 304, 305, 306, 307, 146, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 148, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 954, 715, 0, 0, 346, 0, 0, 0,
	140, 347, 348, 349, 350, 351, 627, 141, 0, 0,
	0, 0, 0, 0, 625, 0, 0, 0, 0, 623,
	624, 659, 648, 649, 646, 647, 638, 0, 1141, 0,
	0, 0, 0, 0, 637, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 146, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 148, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 954, 715,
	0, 0, 346, 0, 0, 0, 140, 347, 348, 349,
	350, 351, 627, 141, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 659, 648, 649,
	646, 647, 638, 0, 1141, 0, 0, 0, 0, 0,
	637, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 676, 641, 0, 0, 0, 191, 192, 193,
	353, 691, 355, 692, 194, 693, 694, 1602, 195, 359,
	360, 196, 197, 644, 675, 695, 696, 363, 0, 198,
	687, 0, 667, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 211, 0, 668, 669, 671, 0, 670, 672, 212,
	213, 418, 214, 697, 215, 698, 699, 629, 216, 0,
	217, 0, 218, 0, 0, 690, 220, 0, 221, 0,
	0, 0, 632, 222, 224, 223, 225, 677, 678, 655,
	722, 0, 0, 0, 0, 0, 226, 227, 700, 701,
	702, 0, 228, 0, 229, 0, 1607, 723, 0, 230,
	688, 0, 375, 0, 0, 231, 232, 233, 234, 684,
	686, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	703, 237, 704, 705, 706, 707, 708, 0, 666, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 1603, 689, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 730, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 626, 0,
	656, 685, 261, 709, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 679, 268,
	269, 270, 271, 272, 273, 0, 274, 680, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 710, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 633,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 673, 312, 300, 301, 313, 735, 314,
	711, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 712, 319, 320, 681, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 713, 714,
	0, 1604, 332, 333, 682, 683, 654, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 674, 342, 0,
	408, 343, 344, 345, 409, 715, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 627, 659,
	648, 649, 646, 647, 638, 0, 625, 0, 0, 0,
	0, 623, 624, 0, 0, 188, 189, 0, 0, 190,
	634, 0, 0, 0, 676, 641, 637, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 2239, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 659, 648, 649, 646, 647, 638, 0, 625, 0,
	0, 0, 0, 623, 624, 1202, 0, 188, 189, 0,
	0, 190, 634, 0, 0, 0, 676, 641, 637, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 1452,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 1451, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 0, 0, 0, 0, 0, 0, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 0,
	0, 0, 0, 0, 634, 0, 0, 0, 0, 619,
	637, 659, 648, 649, 646, 647, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 676, 641, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 621, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 659, 648, 649, 646, 647, 638, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 188,
	189, 0, 0, 190, 634, 0, 0, 0, 676, 641,
	637, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 2090, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 659, 648, 649, 646, 647,
	638, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	0, 188, 189, 0, 0, 190, 634, 0, 0, 0,
	676, 641, 637, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 629, 216, 0, 217, 0,
	218, 0, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 626, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 621, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 633, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 715, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 627, 659, 648, 649,
	646, 647, 638, 0, 625, 0, 0, 0, 0, 623,
	624, 0, 0, 188, 189, 0, 0, 190, 634, 0,
	0, 0, 676, 641, 637, 0, 0, 191, 192, 193,
	353, 691, 355, 692, 194, 693, 694, 0, 195, 359,
	360, 196, 197, 644, 675, 695, 696, 363, 0, 198,
	687, 0, 667, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 211, 0, 668, 669, 671, 0, 670, 672, 212,
	213, 418, 214, 697, 215, 698, 699, 629, 216, 0,
	217, 0, 218, 0, 0, 690, 220, 0, 221, 0,
	0, 0, 632, 222, 224, 223, 225, 677, 678, 655,
	722, 0, 0, 0, 0, 0, 226, 227, 700, 701,
	702, 0, 228, 0, 229, 0, 0, 723, 0, 230,
	688, 0, 375, 0, 0, 231, 232, 233, 234, 684,
	686, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	703, 237, 704, 705, 706, 707, 708, 0, 666, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 689, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 730, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 626, 0,
	656, 685, 261, 709, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 679, 268,
	269, 270, 271, 272, 273, 0, 274, 680, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 710, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 633,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 673, 312, 300, 301, 313, 735, 314,
	711, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 712, 319, 320, 681, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 713, 714,
	0, 0, 332, 333, 682, 683, 654, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 674, 342, 0,
	408, 343, 344, 345, 409, 715, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 627, 659,
	648, 649, 646, 647, 638, 0, 625, 0, 0, 0,
	0, 623, 624, 1202, 0, 188, 189, 0, 0, 190,
	634, 0, 0, 0, 676, 641, 637, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 1607, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 1653, 637, 659,
	648, 649, 646, 647, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 676, 641, 0, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 1616, 637, 659,
	648, 649, 646, 647, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 676, 641, 0, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 1614, 637, 659,
	648, 649, 646, 647, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 676, 641, 0, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 1598, 637, 659,
	648, 649, 646, 647, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 676, 641, 0, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 1586, 637, 659,
	648, 649, 646, 647, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 676, 641, 0, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 1584, 637, 1576,
	648, 649, 646, 647, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 676, 641, 0, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 1579, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 1580, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	1581, 1578, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 1582, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 1577, 351,
	627, 0, 0, 0, 0, 0, 0, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 0, 0, 0,
	0, 0, 634, 0, 0, 0, 0, 1573, 637, 1576,
	648, 649, 646, 647, 638, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 676, 641, 0, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 1579, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 1580, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	1581, 1578, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 1582, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 1577, 351,
	627, 659, 648, 649, 646, 647, 638, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 188, 189, 0,
	0, 190, 634, 0, 0, 0, 676, 641, 637, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 659, 648, 649, 646, 647, 638, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 188,
	189, 1439, 1145, 190, 634, 0, 0, 0, 676, 641,
	637, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 0, 0,
	0, 900, 637, 659, 648, 649, 646, 647, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 676, 641,
	0, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 0, 0, 0, 0, 0,
	0, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	0, 0, 0, 0, 0, 0, 634, 0, 0, 0,
	0, 898, 637, 659, 648, 649, 646, 647, 638, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 676, 641,
	0, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 629, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 626, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 633, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 627, 659, 648, 649, 646, 647,
	638, 0, 625, 0, 0, 0, 0, 623, 624, 0,
	0, 188, 189, 0, 0, 190, 634, 0, 0, 0,
	676, 641, 637, 0, 0, 191, 192, 193, 353, 691,
	355, 692, 194, 693, 694, 0, 195, 359, 360, 196,
	197, 644, 675, 695, 696, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 697, 215, 698, 699, 629, 216, 0, 217, 0,
	218, 0, 0, 690, 220, 0, 221, 0, 0, 0,
	632, 222, 224, 223, 225, 677, 678, 655, 722, 0,
	0, 0, 0, 0, 226, 227, 700, 701, 702, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 703, 237,
	704, 705, 706, 707, 708, 0, 666, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 2652, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 626, 0, 656, 685,
	261, 709, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 710, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 633, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 711, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 712,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 713, 714, 0, 0,
	332, 333, 682, 683, 654, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 715, 0, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 627, 659, 648, 649,
	646, 647, 638, 0, 625, 0, 0, 0, 0, 623,
	624, 0, 0, 188, 189, 0, 0, 190, 634, 0,
	0, 0, 676, 641, 637, 0, 0, 191, 192, 193,
	353, 691, 355, 692, 194, 693, 694, 0, 195, 359,
	360, 196, 197, 644, 675, 695, 696, 363, 0, 198,
	687, 0, 667, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 2569, 0, 668, 669, 671, 0, 670, 672, 212,
	213, 418, 214, 697, 215, 698, 699, 629, 216, 0,
	217, 0, 218, 0, 0, 690, 220, 0, 221, 0,
	0, 0, 632, 222, 224, 223, 225, 677, 678, 655,
	722, 0, 0, 0, 0, 0, 226, 227, 700, 701,
	702, 0, 228, 0, 229, 0, 0, 723, 0, 230,
	688, 0, 375, 0, 0, 231, 232, 233, 234, 684,
	686, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	703, 237, 704, 705, 706, 707, 708, 0, 666, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 689, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 730, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 626, 0,
	656, 685, 261, 709, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 679, 268,
	269, 270, 271, 272, 273, 0, 274, 680, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 710, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 633,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 673, 312, 300, 301, 313, 735, 314,
	711, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 712, 319, 320, 681, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 713, 714,
	0, 0, 332, 333, 682, 683, 654, 334, 335, 2568,
	337, 0, 0, 338, 339, 340, 341, 674, 342, 0,
	408, 343, 344, 345, 409, 715, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 627, 659,
	648, 649, 646, 647, 638, 0, 625, 0, 0, 0,
	0, 623, 624, 0, 0, 188, 189, 0, 0, 190,
	634, 0, 0, 0, 676, 641, 637, 0, 0, 191,
	192, 193, 353, 691, 355, 692, 194, 693, 694, 0,
	195, 359, 360, 196, 197, 644, 675, 695, 696, 363,
	0, 198, 687, 0, 667, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 668, 669, 671, 0, 670,
	672, 212, 213, 418, 214, 697, 215, 698, 699, 629,
	216, 0, 217, 0, 218, 0, 0, 690, 220, 0,
	221, 0, 0, 0, 632, 222, 224, 223, 225, 677,
	678, 655, 722, 0, 0, 0, 0, 0, 226, 227,
	700, 701, 702, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 688, 0, 375, 0, 0, 231, 232, 233,
	234, 684, 686, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 703, 237, 704, 705, 706, 707, 708, 0,
	666, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 689, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	626, 0, 656, 685, 261, 709, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	679, 268, 269, 270, 271, 272, 273, 0, 274, 680,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 710,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 633, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 673, 312, 300, 301, 313,
	735, 314, 711, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 712, 319, 320, 681, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	713, 714, 0, 0, 332, 333, 682, 683, 654, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 674,
	342, 0, 408, 343, 344, 345, 409, 715, 0, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	627, 659, 648, 649, 646, 647, 638, 0, 625, 0,
	0, 0, 0, 623, 624, 0, 0, 188, 189, 0,
	0, 190, 634, 0, 0, 0, 676, 641, 637, 0,
	0, 191, 192, 193, 2567, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 644, 675, 695,
	696, 363, 0, 198, 687, 0, 667, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 2569, 0, 668, 669, 671,
	0, 670, 672, 212, 213, 418, 214, 697, 215, 698,
	699, 629, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 632, 222, 224, 223,
	225, 677, 678, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 688, 0, 375, 0, 0, 231,
	232, 233, 234, 684, 686, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 689, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 626, 0, 656, 685, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 679, 268, 269, 270, 271, 272, 273, 0,
	274, 680, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 633, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 673, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 681, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 682, 683,
	654, 334, 335, 2568, 337, 0, 0, 338, 339, 340,
	341, 674, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 627, 659, 648, 649, 646, 647, 638, 0,
	625, 0, 0, 0, 0, 623, 624, 0, 0, 188,
	189, 0, 0, 190, 634, 0, 0, 0, 676, 641,
	637, 0, 0, 191, 192, 193, 353, 691, 355, 692,
	194, 693, 694, 0, 195, 359, 360, 196, 197, 644,
	675, 695, 696, 363, 0, 198, 687, 0, 667, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 668,
	669, 671, 0, 670, 672, 212, 213, 418, 214, 697,
	215, 698, 699, 0, 216, 0, 217, 0, 218, 0,
	0, 690, 220, 0, 221, 0, 0, 0, 632, 222,
	224, 223, 225, 677, 678, 655, 722, 0, 0, 0,
	0, 0, 226, 227, 700, 701, 702, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 688, 0, 375, 0,
	0, 231, 232, 233, 234, 684, 686, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 703, 237, 704, 705,
	706, 707, 708, 0, 666, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	689, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 0, 0, 656, 685, 261, 709,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 679, 268, 269, 270, 271, 272,
	273, 0, 274, 680, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 710, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 1596, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 673,
	312, 300, 301, 313, 735, 314, 711, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 712, 319, 320,
	681, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 713, 714, 0, 0, 332, 333,
	682, 683, 654, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 674, 342, 0, 408, 343, 344, 345,
	409, 715, 0, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 659, 648, 649, 646, 647, 638,
	0, 0, 1594, 0, 0, 0, 0, 1592, 1593, 0,
	188, 189, 0, 0, 190, 0, 1595, 0, 0, 676,
	641, 0, 637, 0, 191, 192, 193, 0, 691, 355,
	692, 194, 693, 694, 0, 195, 359, 360, 196, 197,
	644, 675, 695, 696, 363, 0, 198, 687, 0, 667,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 721, 209, 210, 2569, 0,
	668, 669, 671, 0, 670, 672, 212, 213, 418, 214,
	697, 215, 698, 699, 629, 216, 0, 217, 0, 218,
	0, 0, 690, 220, 0, 221, 0, 0, 0, 632,
	222, 224, 223, 225, 677, 678, 655, 722, 0, 0,
	0, 0, 0, 226, 227, 700, 701, 702, 0, 228,
	0, 229, 0, 0, 723, 0, 230, 688, 0, 375,
	0, 0, 231, 232, 233, 234, 684, 686, 0, 0,
	378, 238, 0, 235, 0, 724, 236, 703, 237, 704,
	705, 706, 707, 708, 0, 666, 0, 0, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 689, 728, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 626, 0, 656, 685, 261,
	709, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 679, 268, 269, 270, 271,
	272, 273, 0, 274, 680, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 710, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 633, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	673, 312, 300, 301, 313, 0, 314, 711, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 712, 319,
	320, 681, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 713, 714, 0, 0, 332,
	333, 682, 683, 654, 334, 335, 2568, 337, 0, 0,
	338, 339, 340, 341, 674, 342, 0, 408, 343, 344,
	345, 409, 715, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 659, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 623, 624,
	0, 188, 189, 0, 0, 190, 0, 634, 0, 0,
	676, 0, 0, 637, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 675, 361, 362, 363, 0, 198, 687, 0,
	667, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 721, 209, 210, 211,
	0, 668, 669, 671, 0, 670, 672, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 677, 678, 0, 722, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 723, 0, 230, 688, 0,
	375, 0, 0, 231, 232, 233, 234, 684, 686, 725,
	0, 378, 238, 0, 235, 0, 724, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 726, 239,
	240, 241, 727, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 689, 728, 247, 248, 729, 0, 249, 250,
	0, 0, 251, 0, 252, 730, 253, 254, 256, 389,
	255, 731, 257, 258, 260, 259, 0, 0, 0, 685,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 732, 267, 733, 679, 268, 269, 270,
	271, 272, 273, 0, 274, 680, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 734, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 673, 312, 300, 301, 313, 735, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 681, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 682, 683, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 674, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 0, 346, 951, 0, 791,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 2189, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 795, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	721, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 722, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 723,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 725, 0, 378, 238, 0, 235, 0,
	724, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 726, 239, 240, 241, 727, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 728, 247, 248,
	729, 0, 249, 250, 0, 0, 251, 0, 252, 730,
	253, 254, 256, 389, 255, 731, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 732, 267, 733,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 734, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 146,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	735, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 148,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 954, 410, 0, 0,
	346, 611, 0, 185, 140, 347, 348, 349, 350, 351,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 118, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 774, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 146, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 148, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	954, 410, 0, 0, 346, 0, 0, 185, 140, 347,
	348, 349, 350, 351, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 768, 0, 1224, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 774,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 146, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 148, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 954, 410, 0, 0, 346, 611,
	0, 185, 140, 347, 348, 349, 350, 351, 0, 141,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 768, 0,
	1224, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 146, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 148, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 954, 410,
	0, 0, 346, 1931, 0, 185, 140, 347, 348, 349,
	350, 351, 0, 141, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 118, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 774, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 0, 346, 767, 0, 185,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 768, 0, 773, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 774, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 0,
	346, 0, 0, 185, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	768, 0, 773, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 774, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 0, 346, 0, 0, 185, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 768, 0, 773, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 185, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 1259, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 0, 346, 0, 0, 185, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 1741, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 0, 346, 0, 0,
	185, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 2105,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 659, 648, 649, 646, 647, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 1227, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 691, 355, 692, 194, 693,
	694, 0, 195, 359, 360, 196, 197, 0, 0, 695,
	696, 363, 0, 198, 364, 0, 795, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 721, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 697, 215, 698,
	699, 0, 216, 0, 217, 0, 218, 0, 0, 690,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 655, 722, 0, 0, 0, 0, 0,
	226, 227, 700, 701, 702, 0, 228, 0, 229, 0,
	0, 723, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 725, 0, 378, 238, 0,
	235, 0, 724, 236, 703, 237, 704, 705, 706, 707,
	708, 0, 666, 0, 726, 239, 240, 241, 727, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 728,
	247, 248, 729, 0, 249, 250, 0, 0, 251, 0,
	252, 730, 253, 254, 256, 389, 255, 731, 257, 258,
	260, 259, 0, 0, 656, 390, 261, 709, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 732,
	267, 733, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 710, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	734, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 735, 314, 711, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 712, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 713, 714, 0, 0, 332, 333, 406, 407,
	654, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 715,
	0, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 1007, 0, 791, 790, 0, 0, 0, 788,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 795,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 721, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 722, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 723, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 725, 0,
	378, 238, 0, 235, 0, 724, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 726, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 728, 247, 248, 729, 0, 249, 250, 0,
	0, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 735, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 946, 0, 791, 790, 0,
	0, 0, 788, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 795, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 721, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	722, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 723, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 945,
	377, 725, 0, 378, 238, 0, 235, 0, 724, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	726, 239, 240, 241, 727, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 728, 247, 248, 729, 0,
	249, 250, 0, 0, 251, 0, 252, 730, 253, 254,
	256, 389, 255, 731, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 732, 267, 733, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 734, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 735, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 912, 0,
	791, 790, 0, 0, 0, 788, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 795, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 721, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 722, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	723, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 911, 377, 725, 0, 378, 238, 0, 235,
	0, 724, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 726, 239, 240, 241, 727, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 728, 247,
	248, 729, 0, 249, 250, 0, 0, 251, 0, 252,
	730, 253, 254, 256, 389, 255, 731, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 732, 267,
	733, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 734,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 735, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 784, 0, 791, 790, 0, 0, 0, 788, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 795, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 721, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 722, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 723, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 786, 377, 725, 0, 378,
	238, 0, 235, 0, 724, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 726, 239, 240, 241,
	727, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 728, 247, 248, 729, 0, 249, 250, 0, 0,
	251, 0, 252, 730, 253, 254, 256, 389, 255, 731,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 732, 267, 733, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 734, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 735, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 501, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 181,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 180, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 178, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 184, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 181, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 180, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 791, 790, 346, 0,
	0, 788, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 184, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 795, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 721, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 722,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 723, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	725, 0, 378, 238, 0, 235, 0, 724, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 726,
	239, 240, 241, 727, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 728, 247, 248, 729, 0, 249,
	250, 0, 0, 251, 0, 252, 730, 253, 254, 256,
	389, 255, 731, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 732, 267, 733, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 734, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 735, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 181,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 180, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 791, 790, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 184, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 795,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 721, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 722, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 723, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 725, 0,
	378, 238, 0, 235, 0, 724, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 726, 239, 240,
	241, 727, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 728, 247, 248, 729, 0, 249, 250, 0,
	0, 251, 0, 252, 730, 253, 254, 256, 389, 255,
	731, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 732, 267, 733, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 734, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 735, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 185, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 791, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 184,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 795, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 721, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 722, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 723, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 725, 0, 378, 238,
	0, 235, 0, 724, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 726, 239, 240, 241, 727,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	728, 247, 248, 729, 0, 249, 250, 0, 0, 251,
	0, 252, 730, 253, 254, 256, 389, 255, 731, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	732, 267, 733, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 734, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 735, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 1673, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 1671, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 1717, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 1676,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 1715,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 1675, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 1716, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	185, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 1673, 198, 364, 0, 0, 1668, 199, 200, 201,
	0, 203, 204, 205, 202, 1671, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 1676, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 1667, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 1675, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 1674, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	928, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 774, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 780, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 782, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 774, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 776, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 778, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 774, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 430, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 429, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 428, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 1656, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 185, 2257, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 2257, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 2254, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 774, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 1417, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 1415, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 1397, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 527, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 986,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 376, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 529, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 524,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 1274,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 1273, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 527, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 986, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 376, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 529, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 524, 404, 405, 0, 0, 332, 987,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 0, 527, 346, 185, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 518, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	529, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 282, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 970,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 524, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 0, 943, 346, 185, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 942,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 303, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 0, 939, 346, 185,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 938, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 0, 936,
	346, 185, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 935, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	0, 932, 346, 185, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 0, 0, 0, 188,
	189, 0, 0, 190, 0, 0, 0, 0, 352, 0,
	0, 0, 0, 191, 192, 193, 353, 354, 355, 356,
	194, 357, 358, 0, 195, 359, 360, 196, 197, 0,
	0, 361, 362, 363, 0, 198, 364, 0, 0, 0,
	199, 200, 201, 0, 203, 204, 205, 202, 0, 206,
	0, 207, 208, 0, 0, 209, 210, 211, 0, 0,
	0, 0, 0, 0, 0, 212, 213, 418, 214, 365,
	215, 366, 367, 0, 216, 0, 217, 0, 218, 0,
	0, 219, 220, 0, 221, 0, 0, 0, 368, 222,
	224, 223, 225, 369, 370, 0, 0, 0, 0, 0,
	0, 0, 226, 227, 371, 372, 373, 0, 228, 0,
	229, 0, 0, 0, 0, 230, 374, 0, 375, 0,
	0, 231, 232, 233, 234, 931, 377, 0, 0, 378,
	238, 0, 235, 0, 0, 236, 379, 237, 380, 381,
	382, 383, 384, 0, 385, 0, 0, 239, 240, 241,
	0, 386, 387, 242, 243, 244, 0, 246, 245, 0,
	388, 0, 247, 248, 0, 0, 249, 250, 0, 0,
	251, 0, 252, 0, 253, 254, 256, 389, 255, 0,
	257, 258, 260, 259, 0, 0, 0, 390, 261, 391,
	262, 263, 0, 264, 0, 0, 265, 0, 0, 266,
	392, 0, 267, 0, 393, 268, 269, 270, 271, 272,
	273, 0, 274, 394, 275, 395, 276, 0, 277, 278,
	279, 280, 281, 396, 282, 283, 0, 284, 285, 286,
	287, 288, 0, 290, 291, 289, 292, 293, 294, 295,
	0, 296, 0, 297, 298, 397, 299, 0, 303, 304,
	305, 306, 307, 0, 309, 398, 308, 310, 311, 0,
	312, 300, 301, 313, 0, 314, 399, 400, 315, 0,
	0, 322, 316, 317, 302, 318, 321, 401, 319, 320,
	402, 0, 323, 0, 324, 325, 326, 327, 328, 329,
	330, 331, 0, 403, 404, 405, 0, 0, 332, 333,
	406, 407, 0, 334, 335, 336, 337, 0, 0, 338,
	339, 340, 341, 0, 342, 0, 408, 343, 344, 345,
	409, 410, 185, 0, 346, 0, 0, 0, 0, 347,
	348, 349, 350, 351, 0, 0, 0, 0, 188, 189,
	920, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 918, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 917, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 914, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 907, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	909, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 798, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 800, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	796, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 0, 527, 346, 185, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 518, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 517, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 529,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 270, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 280, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 519, 299, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 520, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 524, 404, 405, 0, 0, 332,
	522, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 509, 346, 185, 0, 0, 0,
	347, 348, 349, 350, 351, 0, 0, 0, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 0, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 510, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 312, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 0, 507, 346, 185, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	376, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 0, 499, 346,
	185, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 376, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 0,
	449, 346, 185, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 0, 0, 0, 188, 189,
	0, 0, 190, 0, 0, 0, 0, 352, 0, 0,
	0, 0, 191, 192, 193, 353, 354, 355, 356, 194,
	357, 358, 0, 195, 359, 360, 196, 197, 0, 0,
	361, 362, 363, 0, 198, 364, 0, 0, 0, 199,
	200, 201, 0, 203, 204, 205, 202, 0, 206, 0,
	207, 208, 0, 0, 209, 210, 211, 0, 0, 0,
	0, 0, 0, 0, 212, 213, 418, 214, 365, 215,
	366, 367, 0, 216, 0, 217, 0, 218, 0, 0,
	219, 220, 0, 221, 0, 0, 0, 368, 222, 224,
	223, 225, 369, 370, 0, 0, 0, 0, 0, 0,
	0, 226, 227, 371, 372, 373, 0, 228, 0, 229,
	0, 0, 0, 0, 230, 374, 0, 375, 0, 0,
	231, 232, 233, 234, 376, 377, 0, 0, 378, 238,
	0, 235, 0, 0, 236, 379, 237, 380, 381, 382,
	383, 384, 0, 385, 0, 0, 239, 240, 241, 0,
	386, 387, 242, 243, 244, 0, 246, 245, 0, 388,
	0, 247, 248, 0, 0, 249, 250, 0, 0, 251,
	0, 252, 0, 253, 254, 256, 389, 255, 0, 257,
	258, 260, 259, 0, 0, 0, 390, 261, 391, 262,
	263, 0, 264, 0, 0, 265, 0, 0, 266, 392,
	0, 267, 0, 393, 268, 269, 270, 271, 272, 273,
	0, 274, 394, 275, 395, 276, 0, 277, 278, 279,
	280, 281, 396, 282, 283, 0, 284, 285, 286, 287,
	288, 0, 290, 291, 289, 292, 293, 294, 295, 0,
	296, 0, 297, 298, 397, 299, 0, 303, 304, 305,
	306, 307, 0, 309, 398, 308, 310, 311, 0, 312,
	300, 301, 313, 0, 314, 399, 400, 315, 0, 0,
	322, 316, 317, 302, 318, 321, 401, 319, 320, 402,
	0, 323, 0, 324, 325, 326, 327, 328, 329, 330,
	331, 0, 403, 404, 405, 0, 0, 332, 333, 406,
	407, 0, 334, 335, 336, 337, 0, 0, 338, 339,
	340, 341, 0, 342, 0, 408, 343, 344, 345, 409,
	410, 185, 0, 346, 0, 0, 0, 0, 347, 348,
	349, 350, 351, 0, 0, 0, 0, 188, 189, 0,
	0, 190, 0, 0, 0, 0, 352, 0, 0, 0,
	0, 191, 192, 193, 353, 354, 355, 356, 194, 357,
	358, 0, 195, 359, 360, 196, 197, 0, 0, 361,
	362, 363, 0, 198, 364, 0, 0, 0, 199, 200,
	201, 0, 203, 204, 205, 202, 0, 206, 0, 207,
	208, 0, 0, 209, 210, 211, 0, 0, 0, 0,
	0, 0, 0, 212, 213, 418, 214, 365, 215, 366,
	367, 0, 216, 0, 217, 0, 218, 0, 0, 219,
	220, 0, 221, 0, 0, 0, 368, 222, 224, 223,
	225, 369, 370, 0, 0, 0, 0, 0, 0, 0,
	226, 227, 371, 372, 373, 0, 228, 0, 229, 0,
	0, 0, 0, 230, 374, 0, 375, 0, 0, 231,
	232, 233, 234, 376, 377, 0, 0, 378, 238, 0,
	235, 0, 0, 236, 379, 237, 380, 381, 382, 383,
	384, 0, 385, 0, 0, 239, 240, 241, 0, 386,
	387, 242, 243, 244, 0, 246, 245, 0, 388, 0,
	247, 248, 0, 0, 249, 250, 0, 0, 251, 0,
	252, 0, 253, 254, 256, 389, 255, 0, 257, 258,
	260, 259, 0, 0, 0, 390, 261, 391, 262, 263,
	0, 264, 0, 0, 265, 0, 0, 266, 392, 0,
	267, 0, 393, 268, 269, 270, 271, 272, 273, 0,
	274, 394, 275, 395, 276, 0, 277, 278, 279, 280,
	281, 396, 282, 283, 0, 284, 285, 286, 287, 288,
	0, 290, 291, 289, 292, 293, 294, 295, 0, 296,
	0, 297, 298, 397, 299, 0, 303, 304, 305, 306,
	307, 0, 309, 398, 308, 310, 311, 0, 312, 300,
	301, 313, 0, 314, 399, 400, 315, 0, 0, 322,
	316, 317, 302, 318, 321, 401, 319, 320, 402, 0,
	323, 0, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 403, 404, 405, 0, 0, 332, 333, 406, 407,
	0, 334, 335, 336, 337, 0, 0, 338, 339, 340,
	341, 0, 342, 0, 408, 343, 344, 345, 409, 410,
	185, 0, 346, 0, 0, 0, 0, 347, 348, 349,
	350, 351, 0, 0, 0, 0, 188, 189, 0, 0,
	190, 0, 0, 0, 0, 352, 0, 0, 0, 0,
	191, 192, 193, 353, 354, 355, 356, 194, 357, 358,
	0, 195, 359, 360, 196, 197, 0, 0, 361, 362,
	363, 0, 198, 364, 0, 0, 0, 199, 200, 201,
	0, 203, 204, 205, 202, 0, 206, 0, 207, 208,
	0, 0, 209, 210, 211, 0, 0, 0, 0, 0,
	0, 0, 212, 213, 418, 214, 365, 215, 366, 367,
	0, 216, 0, 217, 0, 218, 0, 0, 219, 220,
	0, 221, 0, 0, 0, 368, 222, 224, 223, 225,
	369, 370, 0, 0, 0, 0, 0, 0, 0, 226,
	227, 371, 372, 373, 0, 228, 0, 229, 0, 0,
	0, 0, 230, 374, 0, 375, 0, 0, 231, 232,
	233, 234, 1978, 377, 0, 0, 378, 238, 0, 235,
	0, 0, 236, 379, 237, 380, 381, 382, 383, 384,
	0, 385, 0, 0, 239, 240, 241, 0, 386, 387,
	242, 243, 244, 0, 246, 245, 0, 388, 0, 247,
	248, 0, 0, 249, 250, 0, 0, 251, 0, 252,
	0, 253, 254, 256, 389, 255, 0, 257, 258, 260,
	259, 0, 0, 0, 390, 261, 391, 262, 263, 0,
	264, 0, 0, 265, 0, 0, 266, 392, 0, 267,
	0, 393, 268, 269, 270, 271, 272, 273, 0, 274,
	394, 275, 395, 276, 0, 277, 278, 279, 280, 281,
	396, 282, 283, 0, 284, 285, 286, 287, 288, 0,
	290, 291, 289, 292, 293, 294, 295, 0, 296, 0,
	297, 298, 397, 299, 0, 303, 304, 305, 306, 307,
	0, 309, 398, 308, 310, 311, 0, 312, 300, 301,
	313, 0, 314, 399, 400, 315, 0, 0, 322, 316,
	317, 302, 318, 321, 401, 319, 320, 402, 0, 323,
	0, 324, 325, 326, 327, 328, 329, 330, 331, 0,
	403, 404, 405, 0, 0, 332, 333, 406, 407, 0,
	334, 335, 336, 337, 0, 0, 338, 339, 340, 341,
	0, 342, 0, 408, 343, 344, 345, 409, 410, 185,
	0, 346, 0, 0, 0, 0, 347, 348, 349, 350,
	351, 0, 0, 0, 0, 188, 189, 0, 0, 190,
	0, 0, 0, 0, 352, 0, 0, 0, 0, 191,
	192, 193, 353, 354, 355, 356, 194, 357, 358, 0,
	195, 359, 360, 196, 197, 0, 0, 361, 362, 363,
	0, 198, 364, 0, 0, 0, 199, 200, 201, 0,
	203, 204, 205, 202, 0, 206, 0, 207, 208, 0,
	0, 209, 210, 211, 0, 0, 0, 0, 0, 0,
	0, 212, 213, 418, 214, 365, 215, 366, 367, 0,
	216, 0, 217, 0, 218, 0, 0, 219, 220, 0,
	221, 0, 0, 0, 368, 222, 224, 223, 225, 369,
	370, 0, 0, 0, 0, 0, 0, 0, 226, 227,
	371, 372, 373, 0, 228, 0, 229, 0, 0, 0,
	0, 230, 374, 0, 375, 0, 0, 231, 232, 233,
	234, 1976, 377, 0, 0, 378, 238, 0, 235, 0,
	0, 236, 379, 237, 380, 381, 382, 383, 384, 0,
	385, 0, 0, 239, 240, 241, 0, 386, 387, 242,
	243, 244, 0, 246, 245, 0, 388, 0, 247, 248,
	0, 0, 249, 250, 0, 0, 251, 0, 252, 0,
	253, 254, 256, 389, 255, 0, 257, 258, 260, 259,
	0, 0, 0, 390, 261, 391, 262, 263, 0, 264,
	0, 0, 265, 0, 0, 266, 392, 0, 267, 0,
	393, 268, 269, 270, 271, 272, 273, 0, 274, 394,
	275, 395, 276, 0, 277, 278, 279, 280, 281, 396,
	282, 283, 0, 284, 285, 286, 287, 288, 0, 290,
	291, 289, 292, 293, 294, 295, 0, 296, 0, 297,
	298, 397, 299, 0, 303, 304, 305, 306, 307, 0,
	309, 398, 308, 310, 311, 0, 312, 300, 301, 313,
	0, 314, 399, 400, 315, 0, 0, 322, 316, 317,
	302, 318, 321, 401, 319, 320, 402, 0, 323, 0,
	324, 325, 326, 327, 328, 329, 330, 331, 0, 403,
	404, 405, 0, 0, 332, 333, 406, 407, 0, 334,
	335, 336, 337, 0, 0, 338, 339, 340, 341, 0,
	342, 0, 408, 343, 344, 345, 409, 410, 185, 0,
	346, 0, 0, 0, 0, 347, 348, 349, 350, 351,
	0, 0, 0, 0, 188, 189, 0, 0, 190, 0,
	0, 0, 0, 352, 0, 0, 0, 0, 191, 192,
	193, 353, 354, 355, 356, 194, 357, 358, 0, 195,
	359, 360, 196, 197, 0, 0, 361, 362, 363, 0,
	198, 364, 0, 0, 0, 199, 200, 201, 0, 203,
	204, 205, 202, 0, 206, 0, 207, 208, 0, 0,
	209, 210, 211, 0, 0, 0, 0, 0, 0, 0,
	212, 213, 418, 214, 365, 215, 366, 367, 0, 216,
	0, 217, 0, 218, 0, 0, 219, 220, 0, 221,
	0, 0, 0, 368, 222, 224, 223, 225, 369, 370,
	0, 0, 0, 0, 0, 0, 0, 226, 227, 371,
	372, 373, 0, 228, 0, 229, 0, 0, 0, 0,
	230, 374, 0, 375, 0, 0, 231, 232, 233, 234,
	1965, 377, 0, 0, 378, 238, 0, 235, 0, 0,
	236, 379, 237, 380, 381, 382, 383, 384, 0, 385,
	0, 0, 239, 240, 241, 0, 386, 387, 242, 243,
	244, 0, 246, 245, 0, 388, 0, 247, 248, 0,
	0, 249, 250, 0, 0, 251, 0, 252, 0, 253,
	254, 256, 389, 255, 0, 257, 258, 260, 259, 0,
	0, 0, 390, 261, 391, 262, 263, 0, 264, 0,
	0, 265, 0, 0, 266, 392, 0, 267, 0, 393,
	268, 269, 270, 271, 272, 273, 0, 274, 394, 275,
	395, 276, 0, 277, 278, 279, 280, 281, 396, 282,
	283, 0, 284, 285, 286, 287, 288, 0, 290, 291,
	289, 292, 293, 294, 295, 0, 296, 0, 297, 298,
	397, 299, 0, 303, 304, 305, 306, 307, 0, 309,
	398, 308, 310, 311, 0, 312, 300, 301, 313, 0,
	314, 399, 400, 315, 0, 0, 322, 316, 317, 302,
	318, 321, 401, 319, 320, 402, 0, 323, 0, 324,
	325, 326, 327, 328, 329, 330, 331, 0, 403, 404,
	405, 0, 0, 332, 333, 406, 407, 0, 334, 335,
	336, 337, 0, 0, 338, 339, 340, 341, 0, 342,
	0, 408, 343, 344, 345, 409, 410, 185, 0, 346,
	0, 0, 0, 0, 347, 348, 349, 350, 351, 0,
	0, 0, 0, 188, 189, 0, 0, 190, 0, 0,
	0, 0, 352, 0, 0, 0, 0, 191, 192, 193,
	353, 354, 355, 356, 194, 357, 358, 0, 195, 359,
	360, 196, 197, 0, 0, 361, 362, 363, 0, 198,
	364, 0, 0, 0, 199, 200, 201, 0, 203, 204,
	205, 202, 0, 206, 0, 207, 208, 0, 0, 209,
	210, 211, 0, 0, 0, 0, 0, 0, 0, 212,
	213, 418, 214, 365, 215, 366, 367, 0, 216, 0,
	217, 0, 218, 0, 0, 219, 220, 0, 221, 0,
	0, 0, 368, 222, 224, 223, 225, 369, 370, 0,
	0, 0, 0, 0, 0, 0, 226, 227, 371, 372,
	373, 0, 228, 0, 229, 0, 0, 0, 0, 230,
	374, 0, 375, 0, 0, 231, 232, 233, 234, 376,
	377, 0, 0, 378, 238, 0, 235, 0, 0, 236,
	379, 237, 380, 381, 382, 383, 384, 0, 385, 0,
	0, 239, 240, 241, 0, 386, 387, 242, 243, 244,
	0, 246, 245, 0, 388, 0, 247, 248, 0, 0,
	249, 250, 0, 0, 251, 0, 252, 0, 253, 254,
	256, 389, 255, 0, 257, 258, 260, 259, 0, 0,
	0, 390, 261, 391, 262, 263, 0, 264, 0, 0,
	265, 0, 0, 266, 392, 0, 267, 0, 393, 268,
	269, 270, 271, 272, 273, 0, 274, 394, 275, 395,
	276, 0, 277, 278, 279, 280, 281, 396, 282, 283,
	0, 284, 285, 286, 287, 288, 0, 290, 291, 289,
	292, 293, 294, 295, 0, 296, 0, 297, 298, 397,
	299, 0, 510, 304, 305, 306, 307, 0, 309, 398,
	308, 310, 311, 0, 312, 300, 301, 313, 0, 314,
	399, 400, 315, 0, 0, 322, 316, 317, 302, 318,
	321, 401, 319, 320, 402, 0, 323, 0, 324, 325,
	326, 327, 328, 329, 330, 331, 0, 403, 404, 405,
	0, 0, 332, 333, 406, 407, 0, 334, 335, 336,
	337, 0, 0, 338, 339, 340, 341, 0, 342, 0,
	408, 343, 344, 345, 409, 410, 185, 0, 346, 0,
	0, 0, 0, 347, 348, 349, 350, 351, 0, 0,
	0, 0, 188, 189, 0, 0, 190, 0, 0, 0,
	0, 352, 0, 1284, 0, 0, 191, 192, 193, 353,
	354, 355, 356, 194, 357, 358, 0, 195, 359, 360,
	196, 197, 0, 0, 361, 362, 363, 0, 198, 364,
	0, 0, 0, 199, 200, 201, 0, 203, 204, 205,
	202, 0, 206, 0, 207, 208, 0, 0, 209, 210,
	211, 0, 0, 0, 0, 0, 0, 0, 212, 213,
	418, 214, 365, 215, 366, 367, 0, 216, 0, 217,
	0, 218, 0, 0, 219, 220, 0, 221, 0, 0,
	0, 368, 222, 224, 223, 225, 369, 370, 0, 0,
	0, 0, 0, 0, 0, 226, 227, 371, 372, 373,
	0, 228, 0, 229, 0, 0, 0, 0, 230, 374,
	0, 375, 0, 0, 231, 232, 233, 234, 376, 377,
	0, 0, 378, 238, 0, 235, 0, 0, 236, 379,
	237, 380, 381, 382, 383, 384, 0, 385, 0, 0,
	239, 240, 241, 0, 386, 387, 242, 243, 244, 0,
	246, 245, 0, 388, 0, 247, 248, 0, 0, 249,
	250, 0, 0, 251, 0, 252, 0, 253, 254, 256,
	389, 255, 0, 257, 258, 260, 259, 0, 0, 0,
	390, 261, 391, 262, 263, 0, 264, 0, 0, 265,
	0, 0, 266, 392, 0, 267, 0, 393, 268, 269,
	270, 271, 272, 273, 0, 274, 394, 275, 395, 276,
	0, 277, 278, 279, 280, 281, 396, 282, 283, 0,
	284, 285, 286, 287, 288, 0, 290, 291, 289, 292,
	293, 294, 295, 0, 296, 0, 297, 298, 397, 299,
	0, 303, 304, 305, 306, 307, 0, 309, 398, 308,
	310, 311, 0, 0, 300, 301, 313, 0, 314, 399,
	400, 315, 0, 0, 322, 316, 317, 302, 318, 321,
	401, 319, 320, 402, 0, 323, 0, 324, 325, 326,
	327, 328, 329, 330, 331, 0, 403, 404, 405, 0,
	0, 332, 333, 406, 407, 0, 334, 335, 336, 337,
	0, 0, 338, 339, 340, 341, 0, 342, 0, 408,
	343, 344, 345, 409, 410, 185, 0, 346, 0, 0,
	0, 0, 347, 348, 349, 350, 351, 0, 0, 0,
	0, 188, 189, 0, 0, 190, 0, 0, 0, 0,
	352, 0, 0, 0, 0, 191, 192, 193, 353, 354,
	355, 356, 194, 357, 358, 0, 195, 359, 360, 196,
	197, 0, 0, 361, 362, 363, 0, 198, 364, 0,
	0, 0, 199, 200, 201, 0, 203, 204, 205, 202,
	0, 206, 0, 207, 208, 0, 0, 209, 210, 211,
	0, 0, 0, 0, 0, 0, 0, 212, 213, 418,
	214, 365, 215, 366, 367, 0, 216, 0, 217, 0,
	218, 0, 0, 219, 220, 0, 221, 0, 0, 0,
	368, 222, 224, 223, 225, 369, 370, 0, 0, 0,
	0, 0, 0, 0, 226, 227, 371, 372, 373, 0,
	228, 0, 229, 0, 0, 0, 0, 230, 374, 0,
	375, 0, 0, 231, 232, 233, 234, 376, 377, 0,
	0, 378, 238, 0, 235, 0, 0, 236, 379, 237,
	380, 381, 382, 383, 384, 0, 385, 0, 0, 239,
	240, 241, 0, 386, 387, 242, 243, 244, 0, 246,
	245, 0, 388, 0, 247, 248, 0, 0, 249, 250,
	0, 0, 251, 0, 252, 0, 253, 254, 256, 389,
	255, 0, 257, 258, 260, 259, 0, 0, 0, 390,
	261, 391, 262, 263, 0, 264, 0, 0, 265, 0,
	0, 266, 392, 0, 267, 0, 393, 268, 269, 270,
	271, 272, 273, 0, 274, 394, 275, 395, 276, 0,
	277, 278, 279, 280, 281, 396, 751, 283, 0, 284,
	285, 286, 287, 288, 0, 290, 291, 289, 292, 293,
	294, 295, 0, 296, 0, 297, 298, 397, 299, 0,
	303, 304, 305, 306, 307, 0, 309, 398, 308, 310,
	311, 0, 312, 300, 301, 313, 0, 314, 399, 400,
	315, 0, 0, 322, 316, 317, 302, 318, 321, 401,
	319, 320, 402, 0, 323, 0, 324, 325, 326, 327,
	328, 329, 330, 331, 0, 403, 404, 405, 0, 0,
	332, 333, 406, 407, 0, 334, 335, 336, 337, 0,
	0, 338, 339, 340, 341, 0, 342, 0, 408, 343,
	344, 345, 409, 410, 185, 0, 346, 0, 0, 0,
	0, 347, 348, 349, 350, 351, 0, 0, 0, 0,
	188, 189, 0, 0, 190, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 191, 192, 193, 353, 354, 355,
	356, 194, 357, 358, 0, 195, 359, 360, 196, 197,
	0, 0, 361, 362, 363, 0, 198, 364, 0, 0,
	0, 199, 200, 201, 0, 203, 204, 205, 202, 0,
	206, 0, 207, 208, 0, 0, 209, 210, 211, 0,
	0, 0, 0, 0, 0, 0, 212, 213, 418, 214,
	365, 215, 366, 367, 0, 216, 0, 217, 0, 218,
	0, 0, 219, 220, 0, 221, 0, 0, 0, 368,
	222, 224, 223, 225, 369, 370, 0, 0, 0, 0,
	0, 0, 0, 226, 227, 371, 372, 373, 0, 228,
	0, 229, 0, 0, 0, 0, 230, 374, 0, 375,
	0, 0, 231, 232, 233, 234, 376, 377, 0, 0,
	378, 238, 0, 235, 0, 0, 236, 379, 237, 380,
	381, 382, 383, 384, 0, 385, 0, 0, 239, 240,
	241, 0, 386, 387, 242, 243, 244, 0, 246, 245,
	0, 388, 0, 247, 248, 0, 0, 249, 250, 0,
	0, 251, 0, 252, 0, 253, 254, 256, 389, 255,
	0, 257, 258, 260, 259, 0, 0, 0, 390, 261,
	391, 262, 263, 0, 264, 0, 0, 265, 0, 0,
	266, 392, 0, 267, 0, 393, 268, 269, 0, 271,
	272, 273, 0, 274, 394, 275, 395, 276, 0, 277,
	278, 279, 0, 281, 396, 282, 283, 0, 284, 285,
	286, 287, 288, 0, 290, 291, 289, 292, 293, 294,
	295, 0, 296, 0, 297, 298, 397, 0, 0, 303,
	304, 305, 306, 307, 0, 309, 398, 308, 310, 311,
	0, 312, 300, 301, 313, 0, 314, 399, 400, 315,
	0, 0, 322, 316, 317, 302, 318, 321, 401, 319,
	320, 402, 0, 323, 0, 324, 325, 326, 327, 328,
	329, 330, 331, 0, 403, 404, 405, 0, 0, 332,
	333, 406, 407, 0, 334, 335, 336, 337, 0, 0,
	338, 339, 340, 341, 0, 342, 0, 408, 343, 344,
	345, 409, 410, 0, 0, 346, 0, 0, 0, 0,
	347, 348, 349, 350, 351, 1078, 1079, 0, 1108, 1109,
	1110, 1118, 1119, 1120, 0, 0, 0, 0, 1096, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 1122, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1080, 0, 0, 0, 1078, 1079, 1100,
	1108, 1109, 1110, 1118, 1119, 1120, 1097, 0, 0, 0,
	1096, 0, 0, 0, 1111, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 1122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1080, 0, 0, 0, 0,
	0, 1100, 0, 0, 1103, 1104, 1105, 1106, 1097, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1115, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1121, 0, 0, 0, 1103, 1104, 1105, 1106,
	0, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 1115, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1112, 1121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 1112, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1116, 0, 0, 0, 0, 0, 1095, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 0, 0, 0,
	0, 0, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 0, 1116, 0, 0, 1096, 0, 0, 1095, 1111,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1122,
	1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	1080, 0, 0, 2538, 1078, 1079, 1100, 1108, 1109, 1110,
	1118, 1119, 1120, 1097, 0, 0, 0, 1096, 0, 0,
	0, 1111, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 1122, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 0, 1080, 0, 0, 2488, 0, 0, 1100, 0,
	0, 1103, 1104, 1105, 1106, 1097, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1121,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 1086, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 1115, 1123, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1112, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 0, 0, 0, 0, 0, 1101, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 0, 0, 1095, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 1078,
	1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 1116,
	0, 0, 1096, 0, 0, 1095, 1111, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 1122, 1114, 0, 0,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 1080, 0, 0,
	2442, 1078, 1079, 1100, 1108, 1109, 1110, 1118, 1119, 1120,
	1097, 0, 0, 0, 1096, 0, 0, 0, 1111, 0,
	0, 0, 0, 0, 0, 1081, 0, 0, 1122, 1114,
	0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 1080,
	0, 0, 2412, 0, 0, 1100, 0, 0, 1103, 1104,
	1105, 1106, 1097, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1121, 0, 0, 0,
	1103, 1104, 1105, 1106, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 1115,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1112, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 0, 0,
	1095, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 1078, 1079, 0, 1108,
	1109, 1110, 1118, 1119, 1120, 0, 1116, 0, 0, 1096,
	0, 0, 1095, 1111, 0, 0, 0, 0, 0, 0,
	1081, 0, 0, 1122, 1114, 0, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 1080, 0, 0, 2407, 1078, 1079,
	1100, 1108, 1109, 1110, 1118, 1119, 1120, 1097, 0, 0,
	0, 1096, 0, 0, 0, 1111, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1122, 1114, 0, 0, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 1080, 0, 0, 2403,
	0, 0, 1100, 0, 0, 1103, 1104, 1105, 1106, 1097,
	0, 0, 0, 0, 1086, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1115, 1123, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1121, 0, 0, 0, 1103, 1104, 1105,
	1106, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 1113, 0, 0, 0, 0, 0, 0, 1101, 0,
	0, 0, 0, 0, 0, 0, 1115, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1112, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 0, 0, 0, 0, 0, 1107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1102, 0, 1112, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1116, 0, 0, 0, 0, 0, 1095, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1102, 0, 0, 0,
	0, 0, 0, 1078, 1079, 0, 1108, 1109, 1110, 1118,
	1119, 1120, 0, 1116, 0, 0, 1096, 0, 0, 1095,
	1111, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	1122, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117,
	0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088,
	0, 1080, 0, 0, 2337, 1078, 1079, 1100, 1108, 1109,
	1110, 1118, 1119, 1120, 1097, 0, 0, 0, 1096, 0,
	0, 0, 1111, 0, 0, 0, 0, 0, 0, 1081,
	0, 0, 1122, 1114, 0, 0, 1092, 1093, 1099, 1098,
	1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085,
	1087, 1088, 0, 1080, 0, 0, 2303, 0, 0, 1100,
	0, 0, 1103, 1104, 1105, 1106, 1097, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 1123, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1121, 0, 0, 0, 1103, 1104, 1105, 1106, 0, 0,
	0, 0, 0, 1086, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 1115, 1123, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 1121, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1113, 0, 0, 0, 0, 0, 0, 1101, 0, 0,
	0, 0, 0, 0, 0, 0, 1107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 1112, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1102, 0, 0, 0, 0, 0, 0,
	1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0,
	1116, 0, 0, 1096, 0, 0, 1095, 1111, 0, 0,
	0, 0, 0, 0, 1081, 0, 0, 1122, 1114, 0,
	0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 1080, 0,
	0, 2302, 1078, 1079, 1100, 1108, 1109, 1110, 1118, 1119,
	1120, 1097, 0, 0, 0, 1096, 0, 0, 0, 1111,
	0, 0, 0, 0, 0, 0, 1081, 0, 0, 1122,
	1114, 0, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0,
	1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0,
	1080, 0, 0, 2267, 0, 0, 1100, 0, 0, 1103,
	1104, 1105, 1106, 1097, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 1123,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1121, 0, 0,
	0, 1103, 1104, 1105, 1106, 0, 0, 0, 0, 0,
	1086, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	1115, 1123, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 1107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	1112, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 1078, 1079, 0,
	1108, 1109, 1110, 1118, 1119, 1120, 0, 1116, 0, 0,
	1096, 0, 0, 1095, 1111, 0, 0, 0, 0, 0,
	0, 1081, 0, 0, 1122, 1114, 0, 0, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 0, 1080, 0, 0, 2108, 1078,
	1079, 1100, 1108, 1109, 1110, 1118, 1119, 1120, 1097, 0,
	0, 0, 1096, 0, 0, 0, 1111, 0, 0, 0,
	0, 0, 0, 1081, 0, 0, 1122, 1114, 0, 0,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 1080, 0, 0,
	2084, 0, 0, 1100, 0, 0, 1103, 1104, 1105, 1106,
	1097, 0, 0, 0, 0, 1086, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1115, 1123, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1121, 0, 0, 0, 1103, 1104,
	1105, 1106, 0, 0, 0, 0, 0, 1086, 0, 0,
	0, 0, 1113, 0, 0, 0, 0, 0, 0, 1101,
	0, 0, 0, 0, 0, 0, 0, 1115, 1123, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1112, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	1107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1102, 0, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1116, 0, 0, 0, 0, 0, 1095, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 1078, 1079, 0, 1108, 1109, 1110,
	1118, 1119, 1120, 0, 1116, 0, 0, 1096, 0, 0,
	1095, 1111, 0, 0, 0, 0, 0, 0, 1081, 0,
	0, 1122, 1114, 0, 0, 1092, 1093, 1099, 1098, 1094,
	1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085, 1087,
	1088, 0, 1080, 0, 0, 1534, 0, 0, 1100, 0,
	0, 0, 0, 0, 0, 1097, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1114, 0, 0, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 0, 1834, 0, 0, 0, 0,
	0, 0, 0, 1103, 1104, 1105, 1106, 0, 0, 0,
	0, 0, 1086, 2601, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1078, 1079, 0, 1108, 1109, 1110, 1118,
	1119, 1120, 1115, 1123, 0, 0, 1096, 0, 0, 0,
	1111, 0, 0, 0, 0, 0, 0, 1081, 0, 0,
	1122, 1121, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1113,
	0, 1080, 0, 0, 0, 0, 1101, 1100, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1112, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2600,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 1104, 1105, 1106, 0, 1107, 0, 0,
	0, 1086, 0, 1904, 0, 0, 1903, 0, 0, 0,
	0, 0, 1102, 0, 0, 0, 0, 0, 0, 0,
	0, 1115, 1123, 0, 0, 0, 0, 0, 0, 1116,
	0, 0, 0, 0, 0, 1095, 0, 0, 0, 0,
	1121, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1113, 0,
	0, 0, 0, 0, 0, 1101, 0, 0, 0, 0,
	0, 0, 0, 1078, 1079, 0, 1108, 1109, 1110, 1118,
	1119, 1120, 0, 0, 0, 0, 1096, 0, 0, 0,
	1111, 1112, 0, 0, 0, 1807, 0, 1081, 0, 1114,
	1122, 0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091,
	1089, 1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0,
	0, 1080, 0, 0, 0, 0, 1107, 1100, 0, 0,
	0, 0, 0, 0, 1097, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 1808, 0, 0, 1095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1103, 1104, 1105, 1106, 0, 0, 0, 0,
	0, 1086, 0, 0, 0, 0, 1632, 0, 0, 0,
	0, 0, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 1115, 1123, 0, 0, 1096, 0, 0, 0, 1111,
	0, 0, 0, 1631, 0, 0, 1081, 0, 1114, 1122,
	1121, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 1113, 0,
	1080, 0, 0, 0, 0, 1101, 1100, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1112, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1103, 1104, 1105, 1106, 0, 1107, 0, 0, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1102, 0, 0, 0, 0, 0, 0, 0, 0,
	1115, 1123, 0, 0, 0, 0, 0, 0, 1116, 0,
	0, 0, 0, 0, 1095, 0, 0, 0, 0, 1121,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1113, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119,
	1120, 0, 0, 0, 0, 1096, 0, 0, 0, 1111,
	1112, 0, 0, 0, 0, 0, 1081, 0, 1114, 1122,
	0, 1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089,
	1090, 1082, 1083, 1084, 1085, 1087, 1088, 0, 0, 0,
	1080, 0, 0, 0, 0, 1107, 1100, 0, 0, 0,
	0, 0, 0, 1097, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1116, 0, 0,
	0, 1078, 1079, 1095, 1108, 1109, 1110, 1118, 1119, 1120,
	0, 0, 0, 0, 1096, 0, 0, 0, 1111, 0,
	0, 1103, 1104, 1105, 1106, 1081, 0, 0, 1122, 0,
	1086, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	1115, 1123, 0, 0, 0, 1100, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 1114, 0, 1121,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 0, 1113, 0, 0,
	0, 0, 0, 0, 1101, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 1105, 1106, 0, 0, 0, 0, 0, 1086,
	1112, 608, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	1123, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1107, 0, 0, 1121, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1102, 0, 0, 0, 0, 0, 1113, 0, 0, 0,
	0, 0, 0, 1101, 0, 0, 0, 1116, 0, 0,
	0, 1078, 1079, 1095, 1108, 1109, 1110, 1118, 1119, 1120,
	0, 0, 0, 0, 1096, 0, 0, 0, 1111, 1112,
	0, 0, 0, 0, 0, 1081, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1080,
	0, 0, 0, 0, 1107, 1100, 0, 0, 0, 0,
	0, 0, 1097, 0, 0, 0, 0, 1114, 0, 1102,
	1092, 1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090,
	1082, 1083, 1084, 1085, 1087, 1088, 1116, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 1105, 1106, 2088, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 1910, 0, 0, 0, 0, 0,
	1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 1115,
	1123, 0, 0, 1096, 0, 0, 0, 1111, 0, 0,
	0, 1905, 0, 0, 1081, 0, 1114, 1122, 1121, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 1113, 0, 1080, 0,
	0, 0, 0, 1101, 1100, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	1104, 1105, 1106, 0, 1107, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1102,
	0, 0, 0, 0, 0, 0, 0, 0, 1115, 1123,
	0, 0, 0, 0, 0, 0, 1116, 0, 0, 0,
	0, 0, 1095, 0, 0, 0, 0, 1121, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1113, 0, 0, 0, 0,
	0, 0, 1101, 0, 0, 0, 0, 0, 0, 0,
	1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0,
	0, 0, 0, 1096, 0, 0, 0, 1111, 1112, 0,
	0, 0, 0, 0, 1081, 0, 1114, 1122, 0, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 0, 0, 0, 1080, 0,
	0, 0, 0, 1107, 1100, 0, 0, 0, 0, 0,
	0, 1097, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1103,
	1104, 1105, 1106, 0, 0, 0, 0, 0, 1086, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 1115, 1123,
	0, 0, 1096, 0, 0, 0, 1111, 0, 0, 0,
	1863, 0, 0, 1081, 0, 1114, 1122, 1121, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 0, 1113, 0, 1080, 0, 0,
	0, 0, 1101, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1870, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1103, 1104,
	1105, 1106, 0, 1107, 0, 0, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1102, 0,
	0, 0, 0, 0, 0, 0, 0, 1115, 1123, 0,
	0, 0, 0, 0, 0, 1116, 0, 0, 0, 0,
	0, 1095, 0, 0, 0, 0, 1121, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1113, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 1078,
	1079, 0, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0,
	0, 0, 1096, 0, 0, 0, 1111, 1112, 0, 0,
	0, 0, 0, 1081, 0, 1114, 1122, 0, 1092, 1093,
	1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083,
	1084, 1085, 1087, 1088, 0, 0, 0, 1080, 0, 0,
	0, 0, 1107, 1100, 0, 0, 0, 0, 0, 0,
	1097, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1116, 0, 0, 0, 1078, 1079,
	1095, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0,
	0, 1096, 0, 0, 0, 1111, 0, 0, 1103, 1104,
	1105, 1106, 1081, 0, 0, 1122, 0, 1086, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 1115, 1123, 0,
	0, 0, 1100, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 1114, 0, 1121, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 0, 1113, 0, 0, 0, 0, 0,
	0, 1101, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 1104, 1105,
	1106, 0, 0, 0, 0, 0, 1086, 1112, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1115, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1107, 0, 0, 1121, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1102, 0, 0,
	0, 0, 0, 1113, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 0, 1116, 0, 0, 0, 1078, 1079,
	1095, 1108, 1109, 1110, 1118, 1119, 1120, 0, 0, 0,
	0, 1096, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1081, 0, 0, 1122, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1080, 0, 0, 0,
	0, 1107, 1100, 0, 0, 0, 0, 0, 0, 1097,
	0, 0, 0, 0, 1114, 0, 1102, 1092, 1093, 1099,
	1098, 1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084,
	1085, 1087, 1088, 1116, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1103, 1104, 1105,
	1106, 0, 0, 0, 0, 0, 1086, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1115, 1123, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1114, 0, 1121, 1092, 1093, 1099, 1098,
	1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085,
	1087, 1088, 37, 1113, 0, 0, 0, 0, 0, 0,
	1101, 0, 0, 38, 121, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 41, 0, 0, 0,
	0, 1078, 1079, 0, 1108, 1109, 1110, 1118, 1119, 1120,
	123, 0, 0, 0, 1096, 0, 0, 0, 0, 0,
	44, 0, 47, 0, 0, 1081, 0, 0, 1122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1107, 0, 48, 0, 0, 0, 50, 0, 1080,
	0, 53, 0, 0, 124, 1100, 1102, 0, 54, 0,
	105, 55, 1097, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1116, 0, 0, 0, 0, 0, 1095,
	0, 0, 0, 56, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1103, 1104, 1105, 1106, 0, 0, 0, 0, 0, 1086,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1115,
	1123, 0, 0, 1114, 0, 0, 1092, 1093, 1099, 1098,
	1094, 1117, 0, 1091, 1089, 1090, 1082, 1083, 1084, 1085,
	1087, 1088, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1113, 0, 58, 0,
	0, 0, 0, 1101, 0, 59, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 66, 119, 60, 0, 61, 0,
	62, 0, 125, 0, 0, 0, 0, 63, 0, 1329,
	0, 0, 146, 0, 0, 0, 0, 0, 0, 74,
	0, 0, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 122, 0, 1107, 0, 0, 0, 0, 0,
	0, 0, 148, 1337, 1326, 1356, 1315, 1347, 1346, 1102,
	0, 1317, 1316, 0, 0, 0, 0, 1358, 1357, 0,
	0, 0, 98, 0, 0, 0, 1116, 0, 0, 0,
	0, 120, 1095, 0, 0, 0, 0, 0, 0, 147,
	0, 0, 0, 0, 0, 0, 0, 140, 0, 0,
	0, 0, 0, 0, 141, 1352, 0, 1344, 1343, 0,
	0, 0, 0, 0, 0, 0, 0, 1342, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 4, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1341, 1339, 1340, 0, 0, 0, 1114, 0, 0, 1092,
	1093, 1099, 1098, 1094, 1117, 0, 1091, 1089, 1090, 1082,
	1083, 1084, 1085, 1087, 1088, 1325, 0, 0, 0, 0,
	0, 0, 1330, 1328, 1331, 1332, 1333, 1334, 1335, 0,
	1355, 0, 0, 0, 0, 0, 0, 1319, 1318, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1329, 1321, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1345, 0, 0, 0, 1327,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1337, 1326, 1356, 1315,
	1347, 1346, 0, 0, 1317, 1316, 0, 0, 0, 1338,
	1358, 1357, 0, 1459, 1457, 1458, 1461, 1460, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1322, 548, 0, 574, 0, 0, 0, 1352, 0,
	1344, 1343, 1336, 1323, 0, 0, 0, 0, 0, 0,
	1342, 0, 553, 1360, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 551, 1320, 0, 0, 0,
	1353, 1354, 0, 1341, 1339, 1340, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 552, 0, 0, 0,
	0, 554, 1324, 0, 0, 0, 0, 1359, 1325, 560,
	561, 0, 0, 0, 570, 1330, 1328, 1331, 1332, 1333,
	1334, 1335, 0, 1355, 0, 0, 0, 0, 575, 555,
	1319, 1318, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 573, 0, 0, 0, 0, 1321, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1345, 0,
	0, 0, 1327, 0, 0, 0, 556, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 557, 558, 0, 0, 0, 0, 0, 0,
	0, 0, 1338, 0, 0, 0, 0, 0, 0, 0,
	564, 0, 0, 0, 0, 559, 566, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 563, 0,
	0, 0, 0, 0, 1322, 0, 0, 0, 0, 576,
	0, 0, 0, 0, 0, 1336, 1323, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1360, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1320,
	0, 0, 0, 1353, 1354, 0, 0, 0, 0, 0,
	562, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1324, 0, 0, 0, 0,
	1359, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 550, 567,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 572,
	0, 0, 0, 0, 578, 0, 0, 0, 0, 565,
	569, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 571,
}
var sqlPact = [...]int{

	43208, -1000, -27, -1000, -1000, -1000, 149, -1000, -1000, -1000,
	-1000, 147, 144, 142, -1000, 140, 138, 136, 135, 133,
	132, 130, 126, 123, 114, 111, -1000, 110, -1000, -1000,
	-1000, -1000, 109, 108, 106, -1000, 103, 1194, 23323, 102,
	100, 1403, -1000, -1000, 36277, 99, -1000, 1170, 27064, 945,
	1527, -1000, 92, 1067, 35938, 3837, 2256, 1098, 1717, 35596,
	22981, 1698, 1233, 35254, -1000, -1000, 34912, 91, 89, 88,
	86, 83, -1000, -1000, 34570, 78, 74, 72, 71, 70,
	69, 60, 57, 56, 54, 53, 52, 50, 48, -1000,
	45, 39, 38, -1000, 43750, 37, 33, 32, 1096, 31,
	30, 29, 27, -1000, -1000, 908, 26, 25, 24, 23,
	22, 90, 21, 20, 19, 17, -1000, 909, 406, 2629,
	9097, 1057, 1055, 1036, 1030, 1034, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	38311, 36277, 16, -51, 15, -1000, 2052, 494, 19155, 43208,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26722, 26380, 22639, 34228, 33886, 6548, 772, -1000, -30,
	24679, 36277, -1000, 152, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 14629, 14249, 546, 152, -1000, -1000,
	-1000, 33544, 22286, 33202, 1579, 32860, -1000, -1000, 32518, -1000,
	-1000, 2003, 1725, 1724, 26038, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 32179, 31837, 31495, 31153, 21933, 510, -1000,
	-1000, -1000, 17435, -1000, -1000, -1000, -1000, 11, -1000, 9,
	7, -1000, 6, 5, 2, 1, 0, -2, -1000, -12,
	-15, -1000, -18, -20, -1000, -21, -25, 1186, 1018, 1152,
	30811, 849, 1346, -1000, -1000, -29, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 36277, -1000, 15685, -1000, 509, -1000,
	1679, -1000, 15685, -1000, 1338, -1000, -1000, -1000, -1000, -1000,
	36277, -1000, -1000, -1000, -1000, -1000, -1000, 2237, 1195, 508,
	30469, -1000, 1413, -1000, 598, 786, -1000, -1000, -1000, 9801,
	164, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1574, 21580, 1167, 2067, 1897, 2227, 1477, 1892, 1874, 1854,
	1841, 1814, 2226, 912, 2223, 1811, 1059, 2215, 1807, 1202,
	669, 2211, 1678, 1675, -1000, -1000, -1000, -1000, 942, -1000,
	-1000, -1000, 28420, -1000, -1000, -1000, -1000, -1000, -1000, 1028,
	917, -1000, -1000, -1000, -1000, -1000, 909, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1362, 2019, 2019, 2019, 2092, 276,
	267, -1000, 90, -1000, 1541, -1000, 1166, -1000, -1000, -1000,
	42769, -1000, -1000, 15685, 15685, 15685, 15685, 15685, 1159, -1000,
	542, -1000, 507, 503, 7647, -1000, -1000, 2194, -1000, -1000,
	-1000, 273, -1000, -1000, 15685, 152, -1000, -1000, -1000, -1000,
	502, 2204, -1000, 602, -1000, -1000, -1000, 590, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1712, 499, 496,
	493, -1000, 488, -1000, -1000, 478, 476, 475, 474, 471,
	467, 466, 465, 464, 462, 461, 460, 450, 449, 447,
	1039, -1000, 624, -1000, -1000, 624, 624, -1000, 425, 425,
	426, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 425,
	-1000, -1000, -1000, 586, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 443, 1358, -1000, -1000,
	1358, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 771, 37633,
	-34, 36277, -1000, 442, -34, -1000, -1000, 440, -1000, 10153,
	10153, -1000, -1000, -1000, 15685, -1000, 1969, -1000, 3626, -205,
	272, 582, -1000, 18123, 20876, -1000, -1000, 1019, 1911, 879,
	-1000, 968, 1908, 541, -1000, 611, 1901, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1181, -1000, 931,
	1894, -157, 1738, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 23662,
	24679, -30, -32, -1000, -1000, -1000, 6197, 42769, -1000, 42769,
	-1000, 833, 19843, 152, -1000, -1000, -1000, -1000, 435, 1435,
	608, 1428, -1000, 296, -1000, 30127, 608, 1420, -1000, -1000,
	-1000, 28420, -1000, 36277, -1000, 36277, -1000, 860, -1000, 37972,
	117, 1884, -1000, -1000, 117, 1867, -1000, 116, 1866, -1000,
	-1000, 1295, 1863, -1000, -102, 1843, -1000, -1000, -1000, 15685,
	-50, -1000, -1000, -1000, 494, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	29785, 24001, 1421, 544, 42769, 2128, 43668, 23662, 42769, 24001,
	-1000, -1000, 36277, -1000, 15685, -1000, 2127, 1323, -35, -1000,
	-1000, -1000, -1000, -1000, 1475, 1469, 739, 870, 9801, 9801,
	1990, -1000, 157, 6548, -1000, -1000, -1000, -1000, 29443, -1000,
	-1000, -1000, 1130, 36277, -1000, -1000, 1709, -1000, 24001, 36277,
	-1000, 36277, -1000, 36277, -1000, 36277, -1000, 36277, -1000, -1000,
	-1000, -1000, -1000, 3306, -1000, 1702, -1000, -1000, 36277, -1000,
	1467, -1000, -1000, -1000, 29104, 28762, -1000, 953, 795, -1000,
	-1000, 118, -1000, 36277, 36277, 2048, 597, -1000, 1362, 1464,
	1690, 667, 1297, 1548, 13869, 1529, 15685, 90, -1000, -1000,
	90, 90, 8717, -1000, -1000, -1000, 36277, -1000, 43475, 43668,
	6548, 780, 15685, 15685, 15685, 15685, 15685, 15685, 15685, 15685,
	15685, 15685, 15685, 15685, 15685, 15685, 15685, 15685, 15685, 15685,
	15685, 15685, 15685, 15685, 15685, 15685, 15685, 15685, 15685, 15685,
	15685, 15685, 15685, 15685, 1354, 15685, 770, 15685, 15685, 15685,
	15685, 1276, 1088, 321, 1136, -1000, 2161, 2161, 2161, 43048,
	43048, 380, 542, -1000, 15685, -1000, 240, 15685, 267, 40897,
	-33, 7281, -1000, -1000, -1000, 13517, 620, 42769, 152, 6901,
	-1000, 2190, 992, 1723, 1621, 433, 540, 536, 535, 532,
	15685, 15685, 13165, 12785, 12405, 16389, 12025, 15685, 8013, 15685,
	15685, 15685, 15685, 11645, 11265, -1000, 430, -1000, -1000, -1000,
	-1000, 2189, -1000, -1000, 2186, -1000, 778, 776, 2185, -1000,
	-35, -1000, 37633, -1000, 36277, -34, 2126, 36277, 15685, 79,
	-1000, 41662, -1000, 79, -52, 42769, 1534, 1532, 19499, 1431,
	1171, 1171, 1171, -1000, 429, 523, 582, 5484, 10885, -1000,
	27403, 1227, 179, 266, 17779, 1969, -1000, 36277, -43, 1093,
	-1000, 25696, 2042, 2027, 2004, 28420, 2107, 240, 2034, 1670,
	768, 28420, 1110, 23662, 2031, 763, 2104, 240, 1666, 762,
	36277, 6548, 2024, 579, -1000, 36277, -1000, -1000, -1000, 1664,
	-57, -1000, -1000, 25357, 2125, 1829, -1000, 1095, -1000, 1806,
	2124, 36277, 1337, 1402, -1000, -1000, 790, 1805, 615, 393,
	2123, 393, 20188, -1000, 36277, -1000, 36277, -1000, -1000, 36277,
	-1000, 36277, -1000, 36277, 36277, -1000, 36277, 23662, 23662, -63,
	4209, 25018, 755, -1000, 646, 25357, 2930, -66, -1000, 872,
	-1000, -1000, -1000, -1000, 220, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 426, 1039, 425, 425, 425, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 586, -1000, -1000, 624, 624, 624, -1000,
	-1000, -55, 1659, 603, -68, 688, -35, -1000, 1358, -1000,
	1153, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2203, -1000, 2174, -1000, -1000, 2184,
	-36, -1000, -36, -1000, 6548, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 36277, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 737, -1000, -1000, -1000, -1000, -1000, -1000, 36277, 36277,
	36277, -1000, 28420, -1000, 610, 1692, -1000, 2028, 1464, 1690,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42769, -1000,
	377, -1000, -1000, 42769, 1022, 1561, -1000, 1561, -39, -1000,
	41533, 1525, 36277, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 596, 943, 943, 811, 811, 811,
	811, 2136, 1220, 2748, 196, 491, 491, 491, 491, 491,
	491, 491, 491, 264, 1502, 1502, 264, 264, 264, 264,
	264, 491, 491, 491, 43048, 42858, 4026, 15685, 15685, 753,
	1082, 321, 4026, 15685, 4026, 4026, 4026, 4026, -1000, 1344,
	-1000, -1000, -1000, -1000, 1648, 415, 16389, 16389, -1000, -1000,
	-1000, 7647, 15685, -1000, -1000, -1000, -1000, 414, 15685, -1000,
	40949, -224, 265, -139, -1000, 15685, 520, -89, -1000, 864,
	-1000, 15685, -1000, -48, 15685, 15685, 15685, 260, -1000, 250,
	-1000, 751, -1000, 748, 747, 745, -1000, 413, 1174, 412,
	407, 15685, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	42579, 5074, 249, -1000, 1646, -139, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 248, -1000, 247, -1000, 42450, -139, 244,
	4421, -1000, 16389, 16389, 16389, 7647, 405, 243, -1000, 41343,
	-1000, 42260, 10505, 10505, 10505, 238, 42131, 15685, -139, 4985,
	4699, 4235, -69, -77, -1000, -82, -1000, 2183, -83, 237,
	595, 593, 236, -1000, -1000, 404, -88, -90, 615, 10153,
	18811, 6548, -1000, 615, -1000, 15685, 19499, 19499, 2414, 1505,
	19499, -1000, -1000, -1000, -1000, 27403, 490, 582, 27403, -1000,
	2182, 1514, 230, -1000, -1000, -1000, 36277, 403, -1000, 582,
	227, 964, 36277, 36277, 36277, -1000, -1000, 1393, 37294, 1390,
	43668, 36277, -1000, 394, 392, 1524, 1515, 36277, 36277, 36955,
	36616, 36277, 979, 240, -1000, 592, 389, 36277, 961, 23662,
	609, 591, 36277, 240, -1000, 388, 6548, 946, -1000, 589,
	1608, 1356, -1000, 830, 1641, 36277, 226, -93, -40, 43668,
	-1000, -1000, -1000, -1000, -1000, 36277, 446, 36277, 240, 36277,
	23662, 23662, 240, 36277, 1804, 1924, 565, 36277, 1548, 15685,
	965, -1000, 18467, 634, 36277, 899, 77, -1000, -1000, -1000,
	575, 36277, -1000, -1000, 117, 117, -1000, 116, 1295, -1000,
	-102, -1000, -1000, -1000, 36277, 23662, -96, -1000, 655, 653,
	650, -1000, 43668, -1000, 534, 726, -1000, 2181, 607, 36277,
	9801, 9801, -1000, 1542, -1000, -1000, 936, -1000, 1016, -1000,
	-1000, -1000, -1000, 9801, -1000, -44, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1246, 1146, -1000, -1000, -1000, 1022, -1000,
	15685, 2180, -1000, -1000, -1000, 8717, -1000, -1000, -1000, 36277,
	-188, 15685, 4026, 4026, 15685, 16389, 16389, -1000, 4026, -1000,
	-1000, -1000, -1000, -1000, 1639, 387, 15685, 43668, 3065, 1418,
	-101, 264, 15685, -41, -1000, 15685, -1000, 40632, -1000, -1000,
	525, 1921, -1000, 15685, 41941, 225, 9449, -1000, 41852, -49,
	-49, -1000, 2198, 1373, 1243, 1011, 875, 2179, -1000, 20532,
	618, 1239, 40580, 43475, 43668, -1000, 15685, -1000, -1000, 1638,
	15685, -1000, 43475, 43668, 16389, 16389, 16389, 16389, 16389, 16389,
	16389, 16389, 16389, 16389, 16389, 16389, 16389, 16389, 16389, 16389,
	16389, 16389, 16389, 1480, 16389, 2154, 2154, 2154, -42, 15685,
	-1000, 1684, 1638, 15685, 15685, 43668, 223, 222, 221, -1000,
	15685, -139, 15685, 15685, 15685, -1000, -1000, -1000, 215, -1000,
	2177, -1000, -1000, -1000, -1000, 2930, -1000, -1000, 1620, -1000,
	-132, -1000, 1969, -1000, 1620, 42769, -1000, 2414, -1000, 386,
	15685, 19499, -1000, 518, -1000, -106, -1000, 27403, -1000, 517,
	-221, -1000, 574, -1000, 582, 383, 36277, 27403, -1000, -1000,
	-1000, 743, 727, 1775, -1000, 1379, -1000, 638, -1000, 952,
	15685, 17091, 379, 371, 1047, -1000, 1772, 1295, 1760, 1295,
	-1000, -43, 1006, -1000, 21227, 15685, -1000, 720, -1000, 1076,
	21227, -1000, -1000, 15685, -1000, 712, 21227, 607, 1636, 804,
	-1000, 815, -1000, 1588, -1000, 25357, 366, 36277, 364, -1000,
	362, -1000, 608, -1000, 360, 36277, 1491, 565, 24340, -1000,
	608, 899, -1000, 42769, -1000, 899, 8365, 2008, -109, -1000,
	-1000, -1000, 615, 20188, 19499, 15685, -111, -1000, -1000, -1000,
	-1000, -44, 1980, 1980, -1000, 2176, -1000, 516, 214, -1000,
	28081, -44, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 36277,
	1309, 6548, 36277, 36277, 1262, 40315, -1000, 2023, 6548, 2118,
	4026, 428, 293, 15685, 43668, 43251, -112, 15685, 15685, -1000,
	210, 15685, 513, 42769, -1000, -1000, -1000, 42769, 15685, 2163,
	15685, 209, 208, 207, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 206, -1000, -1000, 38650, 15685, 204, -1000, 202,
	201, 42769, 1684, 42769, -1000, -1000, 767, 767, 895, 895,
	895, 895, 2154, 463, 680, 1099, 334, 334, 334, 1251,
	805, 805, 334, 334, 334, 1629, 1417, 359, 4568, 15685,
	200, -1000, -1000, 42769, 42769, 198, -1000, -1000, -1000, -139,
	356, 40263, 39998, -1000, 194, 182, 1617, 2090, -1000, 19499,
	1617, -1000, 36277, 42769, -1000, -205, -1000, 2170, -1000, -1000,
	1514, -1000, 5845, 27403, 36277, -114, -1000, 36277, 36277, 36277,
	1754, -1000, 2673, -1000, 39946, -117, -1000, 303, 2059, 15685,
	-1000, -1000, 358, 17091, 36277, -1000, 1533, 1518, 677, 36277,
	-1000, 36277, -1000, 36277, 36277, 36277, -1000, 353, 152, -119,
	36277, 23662, -1000, -120, 6548, -1000, -1000, 23662, 742, -1000,
	1137, 1592, -1000, 17091, 343, 36277, 25357, 2122, -1000, 17091,
	1291, 1493, 565, 24340, -1000, 790, -1000, -1000, -45, -1000,
	355, 240, 899, -1000, -46, 42769, 569, 1978, -1000, 1974,
	512, -1000, -1000, -47, 336, -1000, 568, 567, -1000, -64,
	-1000, 448, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2023,
	15685, 15685, 43251, -122, -1000, 4026, 4026, -1000, 39681, -1000,
	42769, -1000, 41852, -1000, -1000, -1000, -1000, 1121, -1000, 39629,
	-1000, -1000, -1000, -1000, 16389, 1628, 335, 43668, 39364, -1000,
	-1000, 15685, -1000, -1000, -1000, -1000, 613, 15685, 15685, 1969,
	613, -127, 582, -1000, -1000, -1000, 2159, -1000, -129, -1000,
	-1000, -1000, -1000, 36277, -1000, 36277, -1000, 6548, 36277, 1649,
	1372, -1000, -1000, 1510, 331, 16389, 36277, -1000, 1072, 17091,
	2023, 152, 6548, 2023, 39312, 6901, -134, -136, 1364, -1000,
	1361, 15685, -1000, 43668, 1295, 1295, -1000, 708, 706, 15685,
	699, -1000, -1000, 695, -1000, -102, 21227, -1000, -1000, 2088,
	1155, -137, 17091, -142, 181, 240, -143, 36277, -1000, 565,
	24340, -1000, 1924, 1937, 36277, 2002, -1000, -1000, 321, 318,
	316, -1000, 27742, 27742, 23662, 23662, 1309, -1000, 36277, -1000,
	4026, 4026, -1000, -1000, 180, 1239, 2086, -1000, 3187, 16389,
	43668, -144, -1000, 39047, -1000, 36277, 42769, -139, -1000, -1000,
	27403, 294, -1000, -1000, 1126, -1000, -1000, 36277, 1378, -1000,
	-1000, 15685, 4568, 315, 1588, 312, -1000, -1000, -1000, -1000,
	-1000, -1000, 2059, -48, -1000, 996, -1000, -1000, 42769, 2046,
	-1000, -1000, 36277, 36277, -49, 311, 310, -1000, 1302, 36277,
	1072, -145, -1000, 1588, -1000, 1072, 309, 24340, -1000, 1491,
	799, -155, 36277, -1000, 23662, 23662, -1000, -158, -1000, -1000,
	-1000, -160, -1000, 1217, 15685, 3187, -161, -1000, -1000, -103,
	-1000, 2114, -1000, -1000, -1000, -1000, 1744, 38995, 1449, 36277,
	-1000, 36277, 2023, 176, 36277, 645, 6548, -1000, -1000, 175,
	15685, 15685, 307, 301, 300, 1588, 1072, -1000, 1588, 17091,
	-1000, 1493, 853, -1000, 615, -1000, -167, -169, -1000, -1000,
	173, 16037, 16037, -139, -1000, 36277, 297, 1730, -1000, 1278,
	1225, 172, -177, -1000, -1000, 296, -1000, 15685, -1000, 2163,
	-182, -184, 36277, 36277, 36277, -1000, 1588, -1000, -185, -1000,
	20188, -1000, 607, 607, -1000, -1000, -1000, 16740, 1270, 890,
	41214, -1000, -1000, -1000, 36277, -1000, 1286, 1279, 893, -1000,
	-1000, -1000, -1000, -1000, 1449, 42769, -1000, -1000, -190, -191,
	-192, -1000, 1072, -179, -1000, -1000, 2134, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1955, -1000, 661, 1345, 1345, 1278,
	295, 292, 1180, 1588, -1000, 15333, -1000, 2142, -1000, -1000,
	1476, -1000, -1000, 1083, 1073, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 169, 6548, 167, 6548, -1000, 633, -1000,
	629, 291, 1478, -59, 14981, 783, 229, -154, -1000, -193,
	-1000, 42769, -1000, 280, -1000, 14981, 1083, -1000, 14981, 14981,
	-198, -1000, -1000, -199, -1000, -65, 1073, -178, -1000, -1000,
	1073, -1000,
}
var sqlPgo = [...]int{

	0, 2696, 2695, 1745, 2694, 2115, 2693, 2692, 2691, 2690,
	2109, 2689, 2688, 2687, 2686, 2683, 2682, 2681, 2680, 2679,
	2676, 2674, 2673, 2669, 2666, 2663, 2661, 2088, 2659, 2085,
	2657, 2656, 2655, 2645, 2642, 2641, 32, 2640, 2639, 2636,
	2083, 2634, 2632, 2630, 2628, 2081, 2627, 2066, 2626, 2623,
	2057, 2621, 2619, 2616, 2000, 2615, 1989, 2610, 73, 113,
	1984, 2609, 2607, 1982, 1977, 1970, 2606, 1968, 2605, 2603,
	1900, 1882, 2599, 81, 2598, 2597, 2594, 1848, 1829, 2593,
	2592, 2588, 154, 2584, 1817, 2582, 2573, 2567, 2564, 2562,
	2560, 2559, 2558, 2550, 2541, 2537, 2525, 2524, 2523, 2522,
	2521, 2519, 2518, 2517, 158, 2515, 2513, 1805, 1793, 2512,
	2511, 34, 26, 15, 56, 232, 145, 3236, 140, 2509,
	2508, 2506, 2504, 2501, 2499, 62, 105, 99, 2498, 92,
	2496, 2495, 85, 43, 21, 22, 66, 88, 2492, 2490,
	2471, 28, 2487, 2486, 133, 2485, 46, 31, 2749, 156,
	150, 115, 127, 2483, 2482, 2481, 44, 121, 24, 5,
	4, 3, 1, 2480, 2, 6, 2479, 2478, 17, 84,
	59, 2467, 27, 47, 2466, 2464, 131, 2461, 57, 103,
	1687, 95, 126, 358, 102, 2458, 68, 19, 65, 2452,
	2450, 159, 37, 79, 146, 114, 2449, 71, 160, 129,
	77, 128, 136, 2445, 2443, 2442, 110, 2441, 119, 94,
	2440, 2439, 76, 2436, 90, 139, 2435, 135, 112, 2434,
	2430, 86, 2422, 124, 2417, 2411, 157, 148, 116, 11,
	80, 74, 14, 1675, 1668, 134, 101, 58, 52, 2409,
	1199, 1266, 41, 48, 2408, 83, 54, 35, 53, 104,
	144, 51, 2407, 2405, 138, 2402, 2401, 2397, 2389, 2388,
	107, 2384, 2383, 2382, 91, 63, 120, 87, 36, 70,
	130, 111, 152, 106, 2380, 78, 123, 2374, 38, 2373,
	2363, 1454, 118, 2362, 2358, 2357, 1167, 1063, 915, 33,
	2356, 2355, 912, 901, 2354, 2350, 100, 2348, 117, 109,
	93, 143, 137, 199, 2347, 122, 29, 2346, 42, 18,
	0, 1573, 356, 2345, 125, 72, 2340, 2339, 2338, 2335,
	30, 10, 7, 9, 12, 13, 50, 25, 2333, 2327,
	132, 97, 69, 2325, 155, 2316, 2281, 2279, 40, 2277,
	16, 2275, 20, 2267, 2262, 23, 8, 2256, 2253, 147,
	2252, 96, 2250, 2122, 2248, 151, 2245, 2243, 2024, 2241,
	89, 108,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 4, 4, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 8, 8, 10, 10, 9,
	9, 9, 11, 7, 7, 7, 7, 7, 13, 13,
	14, 23, 17, 25, 12, 20, 18, 16, 16, 22,
	22, 127, 127, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 124, 124,
	129, 129, 129, 131, 131, 128, 128, 123, 123, 27,
	27, 71, 71, 114, 64, 64, 64, 308, 308, 309,
	309, 110, 110, 111, 111, 111, 111, 112, 112, 113,
	113, 113, 38, 38, 38, 29, 29, 29, 29, 29,
	30, 30, 31, 31, 39, 39, 39, 39, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 47,
	47, 48, 48, 48, 48, 48, 48, 49, 49, 49,
	49, 50, 50, 50, 50, 50, 50, 50, 50, 55,
	55, 55, 53, 53, 53, 52, 52, 52, 51, 51,
	51, 54, 54, 54, 182, 182, 181, 181, 185, 185,
	56, 56, 56, 56, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 59, 59, 59, 59,
	59, 59, 59, 277, 277, 276, 57, 57, 252, 252,
	60, 60, 207, 207, 61, 61, 61, 61, 61, 62,
	62, 72, 72, 349, 349, 349, 353, 353, 354, 354,
	355, 355, 355, 355, 355, 355, 355, 351, 351, 67,
	67, 67, 67, 68, 68, 68, 69, 69, 109, 109,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 32,
	32, 33, 34, 34, 35, 35, 36, 36, 36, 78,
	78, 78, 80, 77, 77, 77, 79, 79, 79, 79,
	81, 81, 82, 82, 82, 82, 82, 83, 83, 302,
	300, 300, 301, 301, 154, 154, 154, 154, 154, 155,
	155, 155, 307, 307, 307, 307, 307, 307, 306, 306,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 96, 96, 96,
	104, 104, 104, 104, 104, 104, 104, 85, 85, 90,
	90, 90, 90, 90, 86, 86, 91, 91, 92, 92,
	93, 93, 93, 93, 93, 93, 87, 87, 87, 87,
	95, 95, 95, 95, 94, 94, 100, 100, 100, 100,
	100, 100, 97, 97, 97, 97, 98, 98, 98, 101,
	101, 101, 101, 88, 88, 89, 89, 102, 102, 103,
	103, 103, 103, 103, 99, 99, 99, 350, 350, 352,
	352, 65, 65, 43, 43, 44, 44, 156, 156, 157,
	157, 231, 231, 231, 231, 158, 158, 130, 130, 130,
	159, 159, 160, 160, 161, 161, 161, 163, 163, 164,
	164, 165, 165, 162, 162, 162, 230, 318, 318, 319,
	319, 319, 319, 319, 319, 320, 320, 320, 320, 320,
	320, 320, 316, 316, 317, 314, 314, 315, 315, 315,
	315, 356, 356, 229, 229, 168, 168, 321, 321, 321,
	321, 322, 322, 322, 322, 322, 325, 324, 323, 323,
	323, 323, 323, 263, 263, 263, 106, 106, 45, 45,
	45, 136, 136, 46, 46, 42, 42, 42, 211, 211,
	172, 172, 268, 268, 268, 147, 147, 125, 125, 125,
	19, 21, 21, 15, 15, 15, 15, 15, 15, 26,
	26, 24, 24, 212, 212, 213, 213, 66, 66, 70,
	70, 75, 75, 105, 105, 105, 105, 105, 105, 28,
	28, 28, 28, 37, 37, 37, 37, 74, 74, 358,
	358, 143, 143, 143, 143, 144, 144, 226, 226, 227,
	227, 359, 359, 228, 228, 228, 138, 137, 139, 139,
	41, 41, 41, 132, 132, 133, 133, 134, 134, 135,
	135, 360, 360, 63, 63, 63, 108, 108, 150, 150,
	223, 223, 223, 225, 225, 224, 224, 224, 197, 197,
	197, 107, 107, 177, 177, 187, 187, 188, 188, 274,
	189, 73, 73, 117, 117, 115, 115, 115, 115, 115,
	115, 115, 115, 116, 116, 116, 118, 118, 118, 118,
	118, 118, 118, 121, 121, 121, 122, 122, 122, 120,
	120, 331, 331, 331, 334, 334, 330, 332, 332, 333,
	333, 357, 357, 198, 198, 198, 167, 166, 166, 170,
	170, 169, 171, 171, 267, 267, 267, 195, 195, 194,
	194, 194, 194, 216, 216, 214, 214, 215, 215, 219,
	219, 220, 220, 220, 221, 221, 222, 222, 193, 193,
	248, 248, 218, 218, 217, 119, 119, 119, 176, 176,
	176, 178, 178, 238, 238, 238, 239, 239, 237, 237,
	237, 237, 269, 269, 269, 269, 269, 269, 269, 269,
	347, 347, 347, 348, 348, 266, 266, 270, 270, 270,
	270, 270, 270, 264, 264, 264, 264, 265, 265, 275,
	275, 201, 201, 201, 201, 199, 199, 200, 200, 271,
	271, 271, 271, 196, 196, 272, 272, 272, 232, 232,
	278, 278, 278, 296, 296, 175, 175, 175, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 280,
	280, 280, 280, 282, 282, 282, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 295, 295, 295, 295, 295, 283,
	283, 290, 290, 291, 291, 292, 293, 284, 284, 285,
	285, 286, 287, 294, 294, 294, 294, 298, 298, 288,
	288, 288, 288, 288, 289, 208, 208, 208, 208, 208,
	208, 208, 208, 208, 208, 208, 208, 208, 208, 209,
	209, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 240, 240, 240, 240, 240,
	240, 240, 240, 240, 240, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 241, 241, 241, 241, 241, 241,
	241, 241, 241, 241, 242, 242, 242, 242, 244, 244,
	244, 244, 244, 244, 244, 244, 244, 244, 244, 326,
	326, 326, 326, 326, 326, 326, 326, 328, 328, 329,
	329, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 327, 327, 327, 327, 327, 327, 327, 327, 327,
	327, 335, 335, 336, 336, 338, 338, 339, 339, 340,
	341, 341, 341, 342, 343, 343, 337, 337, 344, 344,
	344, 345, 345, 346, 346, 346, 346, 346, 254, 254,
	255, 256, 262, 262, 262, 153, 153, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 145, 145, 145, 145, 145, 184, 184, 183, 183,
	251, 251, 249, 249, 253, 253, 202, 202, 297, 297,
	297, 297, 297, 297, 297, 203, 203, 203, 210, 204,
	204, 205, 205, 205, 205, 205, 245, 246, 206, 206,
	206, 247, 247, 257, 261, 261, 260, 259, 259, 258,
	258, 235, 235, 236, 236, 234, 233, 192, 192, 191,
	191, 190, 190, 361, 361, 186, 186, 273, 273, 273,
	273, 179, 179, 152, 152, 180, 180, 148, 148, 151,
	151, 149, 149, 149, 149, 173, 173, 174, 174, 146,
	146, 243, 243, 243, 243, 243, 243, 243, 243, 243,
	243, 243, 299, 299, 299, 250, 140, 140, 140, 141,
	141, 142, 142, 304, 304, 304, 305, 305, 305, 305,
	303, 303, 303, 303, 303, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 311,
	311, 311, 311, 311, 311, 311, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 2, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 0, 1, 1, 2, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 3, 1,
	1, 3, 1, 1, 1, 1, 1, 3, 4, 6,
	6, 6, 5, 5, 7, 7, 7, 4, 12, 4,
	12, 1, 3, 2, 5, 3, 6, 4, 6, 6,
	6, 4, 8, 3, 3, 3, 6, 4, 3, 2,
	1, 1, 0, 2, 0, 2, 0, 2, 0, 7,
	2, 6, 2, 1, 12, 12, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 4, 6, 7, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 1, 2, 7,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 2,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 3, 5, 3, 1, 3, 1, 2, 2, 3,
	2, 2, 5, 3, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 1, 3, 1, 5, 2, 3, 0,
	3, 2, 3, 0, 2, 3, 2, 3, 2, 6,
	2, 6, 2, 1, 2, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 1, 2, 2, 3, 2, 4, 3, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 1,
	1, 4, 4, 7, 1, 3, 2, 4, 1, 6,
	6, 3, 5, 3, 2, 6, 3, 3, 4, 4,
	3, 3, 1, 3, 3, 1, 1, 2, 1, 1,
	1, 1, 1, 3, 2, 2, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	1, 1, 1, 1, 1, 2, 2, 3, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	2, 3, 3, 3, 2, 3, 4, 3, 5, 3,
	4, 5, 2, 3, 3, 3, 4, 2, 3, 4,
	3, 3, 3, 4, 4, 4, 4, 2, 3, 7,
	7, 7, 4, 5, 5, 5, 5, 2, 0, 2,
	0, 3, 2, 8, 10, 6, 9, 1, 0, 1,
	3, 1, 1, 1, 1, 8, 0, 1, 1, 0,
	1, 0, 9, 9, 6, 7, 5, 3, 5, 1,
	3, 1, 1, 10, 11, 9, 3, 2, 0, 3,
	1, 2, 2, 3, 6, 2, 1, 1, 2, 4,
	2, 5, 7, 8, 5, 3, 1, 4, 6, 5,
	10, 1, 1, 4, 0, 3, 0, 2, 2, 2,
	0, 1, 1, 2, 2, 0, 3, 3, 2, 1,
	1, 2, 2, 1, 2, 1, 4, 2, 4, 7,
	3, 3, 0, 6, 3, 11, 14, 4, 1, 0,
	1, 3, 3, 3, 5, 2, 0, 1, 1, 0,
	6, 6, 8, 6, 8, 8, 10, 8, 10, 6,
	8, 6, 8, 1, 0, 2, 0, 2, 2, 3,
	2, 2, 2, 1, 2, 1, 2, 1, 2, 3,
	2, 3, 2, 2, 2, 2, 2, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 8, 5, 4, 3, 0, 2, 2,
	0, 8, 3, 2, 0, 1, 3, 1, 1, 3,
	5, 1, 1, 3, 3, 1, 2, 4, 4, 2,
	3, 5, 5, 2, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 8, 8, 2, 4, 4, 4, 2,
	2, 2, 2, 3, 1, 3, 6, 1, 0, 1,
	0, 1, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 1, 0, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 3, 0, 1, 1, 1, 1, 3, 0,
	2, 0, 1, 0, 2, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 3, 2, 4,
	4, 0, 8, 4, 6, 3, 3, 1, 5, 5,
	0, 2, 3, 1, 3, 2, 0, 3, 4, 5,
	4, 5, 4, 5, 2, 4, 1, 1, 0, 5,
	0, 2, 2, 2, 1, 1, 0, 4, 2, 1,
	2, 2, 4, 1, 3, 1, 2, 3, 2, 0,
	2, 5, 2, 1, 1, 2, 3, 0, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 5, 2, 1, 1, 1,
	1, 4, 1, 2, 2, 1, 1, 1, 0, 1,
	1, 4, 1, 4, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 0, 1,
	4, 1, 3, 3, 3, 5, 2, 2, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 4, 3, 4, 4, 5, 3, 3,
	3, 3, 3, 4, 3, 4, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 1, 3, 3, 2, 2,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 6, 7, 1, 2, 1, 2, 1, 1,
	2, 1, 3, 1, 1, 2, 2, 1, 1, 3,
	5, 6, 8, 6, 6, 4, 3, 4, 1, 1,
	1, 5, 1, 3, 3, 1, 3, 3, 1, 3,
	3, 1, 1, 3, 3, 1, 1, 6, 6, 4,
	3, 4, 3, 4, 3, 4, 4, 3, 6, 5,
	5, 5, 4, 8, 6, 6, 4, 4, 3, 4,
	3, 5, 0, 5, 0, 2, 0, 1, 3, 3,
	2, 2, 0, 6, 1, 0, 3, 0, 2, 2,
	0, 1, 4, 2, 2, 2, 2, 2, 4, 5,
	4, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 0, 1, 3,
	1, 3, 3, 3, 1, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 1, 2, 3,
	0, 3, 3, 2, 2, 1, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 3, 5, 1, 0, 2, 2, 1, 1, 1,
	2, 1, 2, 1, 0, 1, 3, 3, 2, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 2, 3,
	1, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 1, 5, 1,
	1, 1, 1, 2, 2, 3, 1, 1, 1, 1,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 380, -4, -27, -29, -32, -38,
	-39, -61, -47, -48, -49, -60, -56, -62, -63, -64,
	-65, -57, -71, -70, -72, -75, -73, -66, -67, -76,
	-84, -105, -106, -107, -108, -5, -10, 24, 35, -30,
	-31, 48, -34, -33, 72, -45, -40, 74, 95, -333,
	99, -50, -54, 103, 110, 113, 135, 144, 230, 237,
	258, 260, 262, 269, -115, -117, 256, -68, -69, -77,
	-78, -79, -80, -109, 281, -85, -86, -87, -88, -89,
	-90, -91, -92, -93, -94, -95, -96, -97, -98, -99,
	-100, -101, -102, -103, 284, -28, -37, -74, 324, -6,
	-7, -8, -9, -11, -21, 112, -41, -42, -43, -44,
	-46, -331, -51, -52, -53, -55, -118, -116, 377, 257,
	333, 36, 294, 62, 106, 264, -13, -14, -17, -16,
	-18, -15, -23, -25, -22, -24, -26, -19, -20, -12,
	349, 356, -121, -119, -120, -122, 274, 341, 304, 381,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	2, 304, 344, 334, 88, 152, 242, -349, 2, -180,
	304, 88, -149, -140, 370, 4, -310, -312, 20, 21,
	24, 34, 35, 36, 41, 45, 48, 49, 56, 61,
	62, 63, 68, 65, 66, 67, 70, 72, 73, 76,
	77, 78, 86, 87, 89, 91, 95, 97, 99, 102,
	103, 105, 110, 112, 111, 113, 123, 124, 129, 131,
	136, 142, 143, 144, 145, 153, 156, 158, 151, 168,
	169, 170, 174, 175, 176, 179, 178, 183, 184, 187,
	188, 191, 193, 195, 196, 199, 197, 201, 202, 204,
	203, 209, 211, 212, 214, 217, 220, 223, 226, 227,
	228, 229, 230, 231, 233, 235, 237, 239, 240, 241,
	242, 243, 245, 246, 248, 249, 250, 251, 252, 256,
	254, 255, 257, 258, 259, 260, 262, 264, 265, 267,
	282, 283, 295, 269, 270, 271, 272, 273, 277, 275,
	278, 279, 281, 284, 286, 289, 293, 294, 296, 299,
	300, 297, 292, 303, 305, 306, 307, 308, 309, 310,
	311, 312, 319, 320, 324, 325, 326, 327, 330, 331,
	332, 333, 335, 338, 339, 340, 345, 350, 351, 352,
	353, 354, 29, 37, 38, 39, 40, 42, 43, 46,
	47, 52, 53, 54, 57, 90, 92, 93, 109, 114,
	115, 125, 126, 127, 137, 139, 146, 147, 150, 157,
	159, 160, 161, 162, 163, 165, 172, 173, 181, 198,
	208, 210, 221, 225, 234, 236, 244, 266, 276, 287,
	288, 298, 301, 314, 315, 316, 321, 322, 337, 341,
	342, 380, 380, 2, 169, 241, -148, -140, 88, 380,
	2, 304, 334, 344, -211, 88, 329, -140, 237, 22,
	2, 97, 156, 332, 331, 22, 233, 275, 306, 308,
	2, 380, 2, 344, 304, 152, 88, 334, -140, 2,
	-59, 2, 377, -58, -5, -40, -50, -60, -56, -10,
	-27, -29, -45, -47, -54, -64, -63, -65, -67, -71,
	-70, -73, -77, -78, -84, -107, -108, 74, 24, 103,
	281, 112, -353, 2, 22, -354, -355, 74, 103, 135,
	274, 156, 97, 331, 304, 2, 169, 2, -140, 2,
	-349, 2, 169, 2, -353, 2, -140, 2, -144, 2,
	269, -140, 380, 380, 380, 380, 380, 188, 56, 266,
	278, -82, 320, -81, 314, -302, -83, 2, -181, 199,
	-140, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 2, -104,
	278, 35, 56, 22, 61, 89, 136, 152, 153, 175,
	69, 70, 240, 188, 170, 319, 176, 279, 305, 320,
	74, 335, 309, 111, 4, 88, 199, 280, 314, 380,
	380, 380, -357, 2, 304, 380, 380, 380, 380, 271,
	284, 380, 380, 380, 380, 380, -116, -118, -117, 380,
	380, 380, 380, -169, -170, 328, 164, 108, 219, -115,
	-117, 2, -331, -104, 278, 2, 56, 22, -300, 2,
	-240, 215, -242, 368, 369, 363, 205, 355, -254, 94,
	-244, -257, 109, 266, 377, -148, -243, 383, 9, -328,
	-117, 30, -255, -256, 50, -140, 7, 8, 5, 6,
	-146, -280, -250, -289, 323, 116, 207, -326, -327, 4,
	-310, -304, -281, -291, -285, -288, 165, 59, 80, 81,
	84, 82, 85, 280, 334, 51, 29, 114, 115, 225,
	234, 301, 321, 322, 146, 208, 147, 57, 137, 181,
	102, 38, 40, 42, 43, 52, 53, 90, 92, 93,
	125, 126, 127, 157, 159, 160, 161, 162, 163, 210,
	244, 287, 298, 315, 316, 342, -311, -292, -293, -286,
	-287, 75, 117, 134, 155, 148, 167, 171, 182, 185,
	194, 200, 222, 224, 263, 285, -294, -358, 2, 320,
	320, 2, -358, 2, -358, 2, -143, 2, 320, 317,
	-334, 245, -330, -140, -334, 380, 380, 382, 380, -166,
	-167, 2, 22, 100, 377, 2, -269, 2, 375, -271,
	-148, -117, -270, 377, 216, -3, 2, -271, 146, -148,
	2, -271, 146, -148, 2, -308, 146, -306, 9, -305,
	5, 4, -310, -312, -311, 59, 2, -140, 2, -151,
	146, -148, -303, 4, -310, -312, -311, -313, 22, 25,
	26, 27, 28, 30, 31, 32, 33, 44, 50, 51,
	55, 58, 60, 69, 74, 79, 80, 82, 81, 83,
	84, 85, 94, 96, 98, 100, 101, 104, 106, 108,
	116, 118, 130, 132, 133, 135, 138, 140, 149, 152,
	154, 164, 166, 177, 180, 186, 189, 190, 205, 206,
	207, 213, 215, 216, 218, 219, 232, 238, 247, 261,
	274, 280, 290, 302, 304, 313, 317, 318, 323, 328,
	329, 334, 336, 343, 344, 346, 347, 348, 349, 317,
	382, -180, -173, -140, -234, -233, 379, -240, 2, -240,
	2, 133, 377, -191, -192, -233, -234, 2, -181, 146,
	-308, 146, 2, -181, 2, 152, -140, 146, 2, -140,
	22, 133, 2, 166, 2, 166, 2, -272, 2, -271,
	-182, 146, 2, -181, -182, 146, 2, -152, 146, 2,
	-151, -140, 146, 2, -309, 146, 2, -308, -207, 377,
	-277, 2, -276, -305, 341, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	278, 215, 382, -181, -240, -252, 377, 133, -240, 215,
	-140, 2, 282, 2, 377, -82, 54, 320, -227, 2,
	-228, -137, -138, -139, 168, 239, 243, 354, 317, 360,
	133, -300, -185, 379, -104, 2, -308, 2, 282, 2,
	240, 279, 56, 133, 2, 2, -350, 2, 215, 133,
	2, 133, 2, 133, 2, 133, 2, 133, 2, 2,
	240, 279, 2, 130, 2, 319, 2, 2, 133, 2,
	168, 239, 295, 2, 304, 344, 2, 133, 133, 354,
	2, -196, -271, 88, 304, 354, 22, -169, -170, -217,
	-194, 130, -214, -215, 186, 118, 213, -198, 22, 100,
	-198, -198, 45, 378, 378, -104, 282, 2, 10, 11,
	58, 34, 368, 369, 370, 371, 128, 372, 373, 366,
	367, 365, 358, 359, 362, 291, 23, 71, 361, 360,
	64, 192, 268, 119, 120, 121, 122, 253, 13, 14,
	15, 27, 218, 185, 355, 148, 285, 363, 16, 17,
	18, 167, 37, 149, -145, -153, -240, -240, -240, -240,
	-240, 224, -190, -235, 375, -117, 377, 377, -117, -240,
	-183, 377, 7, -117, -249, 375, -258, -240, -191, 377,
	5, 377, 5, -335, 350, 130, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 377,
	377, 377, 377, 377, 377, 236, -298, 345, -298, -298,
	-282, 377, -282, -283, 377, -282, 351, 356, 377, -226,
	-227, -226, 317, -144, 382, -334, -174, 377, 377, -186,
	-273, -240, 370, -186, -183, -240, 75, -201, 171, 200,
	134, 182, 263, 155, 7, -59, -237, 383, 377, 370,
	-266, 356, -117, -270, 377, -269, -148, 377, -127, 254,
	-126, 21, 24, 103, 339, 109, 292, 310, 112, 270,
	254, 109, 349, 109, 112, 254, 292, 310, 270, 254,
	109, 383, 112, -308, -149, 382, -303, 370, 296, 378,
	-179, -148, -192, 377, -168, 205, -136, -332, 349, 205,
	-168, 377, -141, 146, 2, -140, -332, 205, -272, -150,
	-148, -150, 281, -140, 31, -129, 382, 49, 259, 109,
	-129, 109, -129, 382, 109, -129, 109, 382, 109, -183,
	378, 382, -349, -355, 74, 377, 31, -251, -278, -279,
	-281, -290, -284, -288, -289, 41, 47, 46, 173, 172,
	311, 198, 276, 288, 337, 150, 39, 214, 158, 4,
	157, 159, 160, 161, 162, 163, 287, 38, 244, 126,
	127, 125, 102, 93, 92, 210, 43, 42, -292, -293,
	-286, -287, 90, 315, 316, 165, 40, 53, 52, 342,
	298, -309, -349, -302, -183, 31, -227, 2, -359, 382,
	184, -155, 191, 204, 142, 216, 352, -307, 5, 4,
	-250, -263, 94, 188, -289, 8, 369, -299, 7, 368,
	-301, -300, -301, 78, 379, -303, -181, 22, 283, 2,
	-302, -352, 130, -349, -302, -302, -302, -302, -302, 278,
	-59, 130, -140, 184, -302, 2, -302, 2, 304, 152,
	304, -129, 382, -140, -148, 65, 66, 354, -217, -194,
	-195, -194, -218, -217, 331, -215, -214, -219, -240, 22,
	-222, 124, 201, -240, -242, -116, -116, -116, -171, -267,
	-240, 238, 152, -302, -296, -278, -295, 249, 250, 248,
	252, 251, -278, -303, 314, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, -240, -240, -240,
	-240, -240, -240, -240, -240, -240, -240, 185, 148, 285,
	37, 149, -240, 317, -240, -240, -240, -240, 197, 205,
	207, 323, 116, 330, 100, 211, -361, 302, 33, -247,
	-117, 377, -262, 28, 290, 22, -254, 266, 377, -235,
	-240, -236, -184, -183, 378, 382, -184, -253, -249, -261,
	-260, 346, 378, -183, 343, 22, 100, 370, 2, 7,
	-208, 353, 196, 91, 143, 195, -209, 273, -336, 123,
	138, 377, 378, 2, 378, 2, 378, 2, 378, 2,
	-240, -240, -202, 2, -297, -183, 4, 353, 196, 91,
	143, 195, 273, -202, 2, -203, 2, -240, -183, -204,
	-241, -242, 368, 369, 363, 377, 266, -205, 2, -240,
	-184, -240, 44, 180, 318, -206, -240, 133, -183, -240,
	-240, -240, -183, -183, 2, -183, 2, 377, 7, 7,
	314, 314, 7, -144, -330, 31, -173, -183, -176, 382,
	133, 31, 4, -176, 378, 382, 171, 171, -269, -201,
	171, -199, 222, -199, -199, -347, 377, 376, -266, -303,
	375, 384, -184, 2, -265, -264, 31, -140, 220, 378,
	-148, 382, 317, -212, 69, 60, -230, 146, 60, -314,
	-140, 69, -315, 55, 329, 238, 132, -212, 69, -212,
	69, 69, -271, 34, -73, 67, 133, 317, -271, 229,
	-308, 67, 317, 34, -73, 133, 317, -151, -303, 67,
	-275, 357, -140, 133, 378, 382, -156, -173, -157, -140,
	-231, -230, -316, -317, -314, 152, 329, 117, 31, 109,
	229, 109, 31, 215, 205, -132, 307, 109, -232, 347,
	-223, -73, 377, 94, 31, -223, -187, -188, -274, -189,
	-148, 377, -140, -181, -182, -182, -151, -152, -140, -308,
	-309, 378, -59, -276, 317, 336, -157, -58, 24, 74,
	103, 378, 382, -175, 30, 375, -208, 377, -275, 133,
	360, 317, 378, 320, -228, -154, 243, 289, 255, 277,
	8, 7, 7, 382, -303, -351, -140, 278, -59, -148,
	-151, -148, -271, 349, 130, 66, -195, -218, -220, -299,
	377, 369, -221, 266, 267, 382, -125, 32, 98, 174,
	-148, 354, -240, -240, 317, -361, 302, -247, -240, 197,
	207, 323, 116, 330, 100, 211, 133, 377, -241, -241,
	-183, -240, 377, -183, 376, 386, 378, -240, 376, 376,
	382, -259, -260, 104, -240, -170, 382, -169, -240, -183,
	-183, 378, 378, 317, 317, 317, 317, 377, -341, 223,
	377, 377, -240, 31, 382, 378, 133, 378, 378, -210,
	232, 378, 10, 11, 368, 369, 370, 371, 128, 372,
	373, 366, 367, 365, 358, 359, 360, 64, 192, 268,
	13, 14, 15, 167, 149, -241, -241, -241, -183, 377,
	378, -245, -246, 133, 130, 31, -206, -206, -206, 378,
	133, -183, 382, 382, 382, 378, 378, 378, 7, 378,
	382, 378, 354, 354, 378, 377, 378, 378, -232, -273,
	-178, 2, -269, -303, -232, -240, -269, -269, -200, 336,
	215, 171, -269, -264, 378, -348, 7, -266, -265, 7,
	-239, -238, 131, 203, 378, -140, 377, -266, 378, -126,
	-148, -140, -140, 205, -230, 146, -131, 205, -278, -140,
	377, 377, 174, 174, -140, -140, 146, -140, 146, -140,
	-140, -127, 254, -73, 354, 377, -148, 254, -308, 349,
	354, -140, -73, 377, -303, 254, 354, -110, 145, 211,
	296, 133, -148, 378, 378, 382, -141, 152, -141, -73,
	-181, -308, -308, -73, -148, 109, -133, 105, -360, 360,
	-140, -216, -214, -240, -197, -225, 261, 215, -179, 341,
	-140, -197, -177, 382, 133, 360, -179, -129, -129, -129,
	-129, -351, -308, 378, -278, 375, 376, 7, 7, -113,
	349, -351, -300, -300, -137, 327, 63, 243, -300, 382,
	217, 242, 88, 304, -221, -240, -267, -148, 383, -240,
	-240, -241, -241, 133, 377, -240, -251, 27, 27, 378,
	-184, 382, -236, -240, 378, -249, 106, -240, 313, 378,
	343, -170, -170, -170, 5, 196, 143, 195, -209, 195,
	-209, -209, 7, -342, -140, 377, 347, -169, 378, -296,
	-278, -240, -245, -240, -296, -278, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, -241, -241, -241, -241, -241,
	-241, -241, -241, -241, -241, 100, 205, 211, -241, 382,
	-184, -246, -245, -240, -240, -278, 378, 378, 378, -183,
	-240, -240, -240, 378, 7, -58, -193, 138, -275, 382,
	-193, -200, 377, -240, -269, 376, 378, 382, -265, 376,
	382, 385, 360, -266, 377, -173, -264, 317, 317, 109,
	205, 338, -318, -315, -240, -172, -268, -140, -329, 377,
	-326, -327, -146, 377, 377, -124, 103, 281, -213, 109,
	-129, 109, -129, 317, -212, 69, -243, -146, -140, -183,
	317, 229, -243, -183, 317, -243, -113, 133, 303, 296,
	-158, 151, -231, 377, -141, 377, 377, -168, -136, 377,
	-140, -134, 179, -360, -306, -332, -197, -197, -186, 206,
	68, 378, -232, -188, -178, -240, 378, -114, 76, -114,
	7, 376, 378, -112, 217, -111, -140, 5, -140, -35,
	-36, 152, 231, -303, -140, -148, 216, 378, -125, -303,
	27, 27, -240, -251, 378, -240, -240, 378, -240, 376,
	-240, 5, -240, 378, 378, 378, 378, -343, -140, -240,
	378, 378, 378, -246, 133, 100, 211, 377, -240, 378,
	378, 382, 378, 378, 378, 378, -248, 140, 45, -269,
	-248, -173, -237, 7, -238, -303, 375, -265, -173, 378,
	-140, -140, -230, 109, -319, 69, -320, 58, 117, 74,
	205, 207, 329, 238, 55, 94, 247, 378, 378, 382,
	-147, -191, 58, -147, -240, 377, -172, -173, 205, 94,
	205, 94, 87, 325, -140, -140, -148, -140, -140, 377,
	378, -148, -308, 378, -303, -309, 314, -159, -160, 228,
	149, -172, 377, -173, -156, 31, -172, 215, -135, 178,
	-360, -306, -132, -224, 377, 215, -73, -197, 360, 87,
	87, 376, 382, 377, 360, 360, 382, 22, 377, -125,
	-240, -240, 378, 378, -170, -337, 228, 378, -241, 133,
	377, -251, 378, -240, -338, 348, -240, -183, -338, 378,
	-266, 7, 378, -230, -140, -303, -140, 117, 146, 207,
	174, 377, -241, -148, -229, -356, 73, 300, -268, -125,
	-303, -125, 378, -183, 378, 378, 207, 207, -240, -278,
	-129, -129, 317, 317, -183, 317, 317, -243, 45, 226,
	378, -172, 378, 378, -73, 378, -148, -360, -306, -133,
	101, -173, 69, -247, 377, 377, -111, -112, -308, -308,
	-36, -173, 378, -170, 45, -241, -251, 378, 378, -339,
	-340, -140, -265, 376, -320, -141, 205, -240, -142, 377,
	-158, 377, -147, -170, 247, -128, 58, -140, -140, -170,
	377, 377, 187, 242, -148, -229, 378, -158, -229, 377,
	-306, -134, 331, 206, 378, -140, -309, -309, 378, 378,
	-344, 242, 267, -183, 378, 382, 31, 109, 378, -321,
	193, -140, -173, -125, 378, -148, -123, 336, -303, 378,
	-183, -183, 377, 377, 377, -158, -229, -158, -172, -135,
	281, -232, 378, 378, 378, -345, -346, 37, 326, 78,
	-240, -345, -340, -342, 117, -322, -325, -324, 215, 134,
	227, 286, 378, 378, -168, -240, 378, 378, -173, -173,
	-173, -158, 378, -187, -113, -113, -346, 235, 129, 266,
	235, 129, -140, -324, 215, -325, 215, 331, 97, -321,
	378, 378, 378, -229, -232, 27, -323, 202, 259, 49,
	281, -323, -322, 377, 377, -130, 49, 259, -158, -346,
	20, 207, 94, -161, 228, -162, 228, 378, -303, 378,
	-303, 341, 341, -163, 377, 183, 382, -160, -159, -164,
	-165, -240, 194, 312, -161, 377, 382, 378, 382, 377,
	-164, -161, -165, -164, 378, 378, 382, -160, -159, -162,
	382, -162,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 8, 9, 10,
	11, 12, 14, 16, 18, 19, 21, 23, 25, 27,
	29, 31, 33, 35, 37, 39, 41, 42, 44, 45,
	46, 47, 48, 50, 52, 55, 56, 0, 0, 155,
	157, 0, 319, 320, 0, 164, 166, -2, 0, 0,
	0, 187, 188, 0, 0, -2, 0, 0, 0, 0,
	0, 0, 0, 0, 691, -2, 0, 299, 301, 310,
	312, 314, 316, 317, 0, 370, 372, 374, 376, 378,
	380, 382, 384, 386, 388, 390, 392, 394, 396, 398,
	399, 401, 403, 405, 0, 613, 615, 617, -2, 59,
	61, 63, 65, 67, 77, 0, 168, 170, 172, 174,
	177, 729, 191, 193, 195, 197, -2, 740, 0, 0,
	0, -2, 0, -2, -2, -2, 68, 69, 70, 71,
	72, 73, 83, 84, 85, 86, 75, 79, 80, 82,
	0, 0, 706, 708, 710, 712, -2, 0, 0, -2,
	7, 13, 15, 17, 20, 22, 24, 26, 28, 30,
	32, 34, 36, 38, 40, 43, 49, 51, 53, 57,
	58, 0, 0, 0, 0, 0, 0, 0, 130, 283,
	0, 1311, 1235, 1241, 1242, 1266, 1267, 1268, 1285, 1286,
	1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296,
	1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306,
	1307, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1316, 1317,
	1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337,
	1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
	1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357,
	1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367,
	1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377,
	1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
	1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397,
	1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
	1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,
	1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427,
	1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437,
	1438, 1439, 1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447,
	1448, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457,
	1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
	1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477,
	1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487,
	1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497,
	1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507,
	1508, 156, 158, 159, 0, 0, 0, 1237, 1311, 165,
	167, 0, 0, 0, 0, 0, 578, 274, 1374, 276,
	278, 0, 0, 0, 0, 181, 182, 183, 184, 185,
	186, 189, 190, 0, 0, 0, 0, 0, 273, 271,
	220, 221, 0, 256, 257, 258, 259, 260, 262, 224,
	226, 228, 229, 231, 233, 235, 237, 239, 241, 242,
	244, 246, 247, 249, 251, 252, 254, 579, 0, 0,
	0, 0, 0, 280, 286, 287, 288, 290, 291, 292,
	293, 294, 295, 296, 0, 136, 0, 482, 269, 267,
	0, 132, 0, 610, 0, 282, 611, 612, 607, 608,
	1401, 636, 300, 302, 311, 313, 315, -2, -2, 1495,
	-2, 334, -2, 342, 1501, 0, 345, 346, 349, -2,
	216, 371, 373, 375, 377, 379, 381, 383, 385, 387,
	389, 391, 393, 395, 397, 400, 402, 404, 406, 407,
	0, 0, 0, 411, 0, -2, -2, 0, 0, 0,
	0, 0, -2, 0, -2, 0, 0, -2, -2, 0,
	0, -2, 0, 0, 410, 412, 413, 414, 0, 614,
	616, 618, 0, 567, 731, 60, 62, 64, 66, 0,
	0, 169, 171, 173, 175, 178, -2, 704, 705, 192,
	194, 196, 198, -2, 0, 735, 735, 735, 0, 0,
	705, 703, 0, 303, 0, 305, 0, 411, 308, 309,
	350, 351, 941, 0, 0, 0, 0, 0, 0, 1014,
	1044, 1046, 1466, 1495, 0, 1048, 1049, 0, 1051, 1053,
	1054, 0, 1057, 1058, 1210, 1237, 1251, 1252, 1253, 1254,
	0, 0, 1257, 0, 1259, 1260, 1261, 1112, 1068, -2,
	-2, 1249, 869, 870, 871, 872, -2, 1509, 1072, 1075,
	1078, 1081, 1082, 1085, 1086, 0, 1450, 1467, 1468, 1491,
	1492, 1500, 1504, 1505, 1474, 1488, 1475, 1462, 1472, 1486,
	1317, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1275, 903, 904, 909,
	910, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518,
	1519, 1520, 1521, 1522, 1523, 1524, 912, 638, 620, 629,
	638, 622, 623, 624, 625, 626, 627, 628, 631, 0,
	721, 1380, 724, 1248, 722, 707, 709, 0, 711, 0,
	0, 715, 737, 736, 0, 776, 719, 720, 730, 791,
	829, 806, 797, 0, 0, 2, 74, 0, 1474, 829,
	76, 0, 1474, 829, 78, 0, 1474, 137, 138, 368,
	369, 1276, 1277, 1278, 1279, 1509, 81, 0, 87, 0,
	1474, 1240, 0, 1280, 1281, 1282, 1283, 1284, 1525, 1526,
	1527, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
	1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545, 1546,
	1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556,
	1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564, 1565, 1566,
	1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
	1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
	1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
	1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604, 1605, 0,
	0, 284, 285, 1245, 1243, 1244, 0, 160, 161, 162,
	163, 0, 0, 1238, 1219, 1217, 1218, 176, 546, 1474,
	-2, 1474, 570, 546, 574, -2, 728, 1474, 652, 275,
	277, 0, 180, 0, 665, 0, 667, 0, 682, 835,
	122, 1474, 201, 214, 122, 1474, 204, 122, 1474, 207,
	1233, 122, 1474, 210, 211, 1474, 213, 139, 270, 0,
	0, -2, 263, 265, -2, 261, 225, 227, 230, 232,
	234, 236, 238, 240, 243, 245, 248, 250, 253, 255,
	-2, 0, 0, 0, 481, 0, 0, 0, 609, 0,
	635, 318, 0, 331, 0, 333, 1461, -2, -2, 337,
	639, 643, 644, 645, 0, 0, 0, 0, 0, 0,
	0, 347, 217, 0, 408, 409, 417, 418, 0, 421,
	442, 454, 0, 0, 425, 427, 480, 429, 0, 0,
	431, 0, 433, 0, 435, 0, 437, 0, 439, 441,
	443, 455, 445, 730, 447, 0, 449, 453, 0, 458,
	0, 460, 461, 462, 0, 0, 468, 0, 0, 415,
	416, 122, 833, 0, 0, 0, 0, -2, 0, 748,
	773, 0, 751, 752, 0, 0, 0, 0, 733, 734,
	0, 0, 0, 693, 694, 304, 0, 307, 0, 0,
	0, 0, 1145, 1146, 1147, 1148, 1149, 1150, 1153, 1154,
	1151, 1152, 1155, 1156, 0, 0, 0, 0, 0, 1157,
	0, 0, 0, 0, 0, 0, 0, 0, 1158, 1159,
	1160, 0, 0, 1162, 0, 1164, 0, 0, 0, 0,
	0, 0, 1224, 0, 0, 1161, 946, 947, 948, 980,
	981, 0, 1045, 1221, 1214, 1047, 0, 1167, -2, 1168,
	0, 0, 1050, 1055, 1056, 1167, 0, 1209, -2, 0,
	1256, 0, 938, 1114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1190, -2, 0, 0, 0,
	0, 0, 0, 0, 0, 888, 906, 917, 914, 913,
	890, 0, 889, 887, 0, 891, 0, 0, 0, 619,
	-2, 621, 0, 633, 0, 723, 0, 0, 0, 780,
	1225, 1229, 1230, 780, 0, 1168, 0, 0, 0, 0,
	826, 826, 826, 824, 800, 0, 806, 0, -2, 830,
	818, 0, -2, 797, 0, 0, 831, 0, 88, 604,
	101, 0, 604, 604, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 0,
	0, 0, 0, 820, 1236, 0, 1215, 1216, 152, 0,
	0, 1231, 1220, 488, 0, 0, 568, 0, 727, 0,
	0, 0, 0, 1474, 577, 1269, 654, 0, 839, 0,
	668, 0, 0, 836, 0, 199, 0, 120, 121, 0,
	202, 0, 205, 0, 0, 208, 0, 0, 0, 0,
	730, 0, 0, 289, 0, 0, 730, 0, 1170, 847,
	848, 849, 850, 851, 938, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	876, 877, 878, 879, 880, 881, 882, 883, 884, 885,
	886, 900, 0, 875, 875, 875, 892, 893, 901, 902,
	907, 908, 919, 920, 922, 924, 918, 918, 918, 915,
	916, 820, 0, 0, 0, 0, -2, 339, 0, 641,
	0, 646, 359, 360, 361, 648, 649, 343, 362, 363,
	364, 365, 366, 367, 0, 563, 0, 565, 1262, 0,
	340, 352, 341, 344, 0, 218, 419, 420, 422, 423,
	424, 428, 0, 477, 430, 432, 434, 436, 438, 446,
	450, 730, 456, 459, 463, 464, 465, 466, 0, 0,
	0, 566, 0, 321, 322, 0, 472, 0, 748, 773,
	697, 747, 698, 772, 774, 749, 750, 755, 759, 760,
	763, 766, 767, 757, 941, 716, 717, 718, 741, 742,
	589, 0, 0, 306, 942, 843, 844, 894, 895, 896,
	897, 898, 943, 944, 0, 949, 950, 951, 952, 953,
	954, 955, 956, 957, 958, -2, -2, -2, -2, -2,
	-2, -2, -2, 967, 968, 969, 970, 971, 972, 973,
	974, -2, -2, -2, 978, 979, -2, 1163, 1165, 0,
	1224, 0, -2, 0, -2, -2, -2, -2, 992, 0,
	994, 997, 999, 1001, 0, 0, 0, 0, 1223, 1011,
	1201, 0, 0, 1142, 1143, 1144, 996, 0, 0, 1222,
	1213, 0, 0, 1166, 1052, 0, 0, 0, 1174, 1208,
	1204, 0, 1059, 740, 0, 0, 0, 0, 1066, 0,
	1265, 925, 926, 927, 928, 929, 930, 939, 1122, 0,
	0, 0, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1084,
	0, 0, 0, 1090, 0, 1177, -2, -2, -2, -2,
	-2, -2, -2, 0, 1092, 0, 1094, 1168, 1187, 0,
	0, 1015, 0, 0, 0, 0, 1495, 0, 1097, 1168,
	1195, 0, 0, 0, 0, 0, 1168, 0, 1200, 0,
	0, 0, 0, 0, 1108, 0, 1110, 0, 0, 0,
	0, 0, 0, 632, 725, 0, 0, 0, 839, 0,
	0, 0, 1228, 839, 775, 0, 0, 0, 0, 0,
	0, 821, 825, 822, 823, 0, 0, 806, 818, 788,
	0, 0, 0, 795, 796, 817, 0, 816, 805, -2,
	0, 0, 0, 0, 0, 603, 103, 1474, 0, 124,
	0, 0, 536, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 92, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 0, 1239, 0,
	142, 0, 1246, 0, 0, 0, 0, 0, 487, 1245,
	489, 491, 492, 493, 494, 1270, 0, 1270, 0, 0,
	0, 0, 0, 0, 0, 656, 662, 0, 754, 0,
	680, 670, 0, 0, 0, 680, 684, 685, 687, 688,
	0, 0, 837, 215, 122, 122, 1234, 122, 122, 140,
	212, 272, 222, 264, 0, 0, 0, 266, 0, 0,
	0, 268, 0, 840, 842, 0, 852, 0, 151, 0,
	0, 0, 332, 0, 640, 647, 0, 356, 0, 358,
	564, 1264, 1263, 0, 219, 479, 297, 448, 451, 474,
	475, 476, 834, 0, 0, 473, 701, 702, 0, 761,
	0, 0, 758, 764, 765, 0, 744, 587, 588, 0,
	0, 0, -2, -2, 0, 0, 0, 1012, -2, 993,
	995, 998, 1000, 1002, 0, 0, 0, 0, 0, 0,
	0, 1013, 1167, 0, 1211, 1214, -2, 1169, 1172, 1173,
	0, 0, 1205, 0, 0, 0, 0, 739, 740, 740,
	740, 1065, 0, 0, 0, 0, 0, 0, 1067, 0,
	0, 0, 0, 0, 0, 1089, 0, 1091, 1093, 0,
	0, 1095, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1018, 1019, 1020, 0, 1167,
	1096, 1193, 1194, 0, 0, 0, 0, 0, 0, 1102,
	0, 1199, 0, 0, 0, 1106, 1107, 1109, 0, 873,
	0, 899, 921, 923, 911, 730, 1247, 777, 769, 1226,
	820, 779, 781, 1227, 769, 1169, 808, 0, 810, 0,
	0, 0, 812, 0, 801, 0, 803, 818, 793, 0,
	0, 786, 0, 785, 806, 814, 0, 0, 832, 102,
	593, 0, 0, 0, 105, 1474, 113, 0, 518, 0,
	0, 0, 0, 0, 606, 114, 1474, 122, 1474, 122,
	115, 89, 604, 90, 0, 0, 599, 0, 591, 0,
	0, 590, 91, 0, 601, 0, 0, 151, 0, 0,
	153, 0, 1232, 496, 545, 0, 0, 1270, 0, 485,
	546, 571, -2, 573, 0, 0, 658, 662, 0, 661,
	728, 680, 753, 838, 663, 680, 0, 0, 0, 672,
	669, 666, 839, 0, 0, 0, 0, 200, 203, 206,
	209, 279, 0, 0, 1171, 0, 845, 0, 0, 131,
	0, 281, 329, 330, 335, 354, 355, 357, 353, 0,
	0, 0, 0, 0, 0, 0, 743, 589, 0, 945,
	-2, 0, 0, 0, 0, -2, 0, 0, 0, 1202,
	0, 0, 0, 1213, -2, 1175, 1203, 1207, 0, 1060,
	0, 0, 0, 0, 1258, 931, 932, 933, 934, 935,
	936, 937, 0, 1120, 1121, 1125, 0, 0, 1071, 0,
	0, 1176, 1186, 1188, 1016, 1017, 1021, 1022, 1023, 1024,
	1025, 1026, 1027, 1028, 1029, 1030, -2, -2, -2, 1034,
	1035, 1036, -2, -2, -2, 0, 0, 0, 1189, 0,
	0, 1191, 1192, 1196, 1197, 0, 1099, 1100, 1101, 1198,
	0, 0, 0, 905, 0, 0, 771, 0, 778, 0,
	771, 809, 0, 828, 811, 791, 802, 0, 799, 789,
	0, 790, 0, 818, 0, 0, 798, 0, 0, 0,
	0, 123, 516, 535, 0, 0, 580, 586, 586, 0,
	1069, 1070, 0, 0, 0, 107, 0, 0, 0, 0,
	111, 0, 117, 0, 0, 0, 96, 0, 0, 0,
	0, 0, 95, 0, 0, 94, 129, 0, 0, 154,
	501, 0, 490, 0, 0, 0, 488, 0, 569, 0,
	0, 660, 662, 0, 653, 654, 179, 664, 678, 679,
	677, 0, 680, 686, 683, 689, 0, 0, 133, 0,
	0, 846, 853, 149, 1363, 147, 144, 146, 298, 323,
	324, 0, 328, 469, 470, 471, 756, 762, 745, 589,
	0, 0, -2, 0, 1005, -2, -2, 1138, 1169, 1212,
	1206, 1255, 740, 1061, 1063, 1064, 940, 1127, 1124, 0,
	1111, 1087, 1088, 1185, 0, 0, 0, 0, 1169, 1140,
	1098, 0, 1104, 1105, 874, 726, 1116, 0, 0, 782,
	1116, 0, 806, 804, 787, 783, 0, 794, 0, 815,
	595, 597, 104, 0, 517, 0, 520, 0, 0, 0,
	0, 526, 527, 0, 0, 0, 0, 537, 544, 0,
	589, 1250, 0, 589, 0, 0, 0, 0, 0, 119,
	0, 0, 605, 0, 122, 122, 594, 0, 0, 0,
	0, 600, 592, 0, 602, 141, 0, 483, 500, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 650, 662,
	0, 655, 656, 0, 0, 0, 671, 681, 0, 0,
	0, 841, 0, 0, 0, 0, 0, 326, 0, 746,
	-2, -2, 1006, 1139, 0, 740, 0, 1113, -2, 0,
	0, 0, 1141, 0, 713, 0, 770, 768, 714, 827,
	818, 0, 813, 106, 0, 521, 522, 1270, 0, 525,
	528, 0, 530, 1272, 496, 0, 541, 542, 581, 582,
	585, 583, 586, 740, 539, 0, 108, 109, 118, 126,
	110, 116, 0, 0, 740, 0, 0, 819, 0, 0,
	544, 0, 534, 496, 486, 544, 0, 0, 657, 658,
	0, 0, 0, 690, 0, 0, 148, 0, 143, 145,
	325, 0, 1062, 1130, 0, -2, 0, 1042, 1103, 1115,
	1117, 0, 792, 784, 519, 523, 0, 0, 550, 0,
	538, 0, 589, 0, 0, 128, 0, 596, 598, 0,
	0, 0, 0, 0, 0, 496, 544, 484, 496, 0,
	659, 660, 0, 674, 839, 676, 0, 0, 150, 327,
	0, 0, 0, 1126, 1043, 0, 0, 0, 529, 555,
	0, 0, 0, 584, 1060, 546, 112, 0, 125, 0,
	0, 0, 0, 0, 0, 532, 496, 575, 0, 651,
	0, 675, 151, 151, 1123, 1128, 1131, -2, 1434, 1308,
	0, 1129, 1118, 1119, 0, 531, 551, 552, 0, 547,
	548, 549, 1271, 543, 550, 127, 98, 100, 0, 0,
	0, 533, 544, 839, 134, 135, 0, 1133, 1134, 1135,
	1136, 1137, 524, 553, 0, 554, 0, 0, 0, 555,
	0, 0, 499, 496, 673, 0, 556, 0, 559, 560,
	0, 557, 540, 0, 0, 495, 497, 498, 576, 1132,
	558, 561, 562, 0, 0, 0, 0, 502, 0, 503,
	0, 0, 0, 501, 0, 0, 0, 500, 506, 0,
	509, 511, -2, 0, 504, 0, 0, 507, 0, 0,
	0, 505, 510, 0, 508, 501, 0, 500, 515, 513,
	0, 514,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 366, 3, 372, 367, 3,
	377, 378, 370, 368, 382, 369, 379, 371, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 386, 381,
	358, 360, 359, 362, 383, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 375, 3, 376, 373, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 384, 365, 385, 363,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 361, 57701, 364, 57702, 374, 57703, 380, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:918
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:924
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:930
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:939
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:946
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:947
		{
			return helpWith(sqllex, "DELETE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:948
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:950
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:951
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 24:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:952
		{
			return helpWith(sqllex, "GRANT")
		}
	case 26:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:953
		{
			return helpWith(sqllex, "INSERT")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:954
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:955
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:956
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:957
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:958
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:959
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:960
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:965
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 49:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:970
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:971
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:972
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:974
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 57:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:984
		{
			return helpWith(sqllex, "ALTER")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:987
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 62:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:988
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:989
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:990
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1027
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1038
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1047
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 81:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1059
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1082
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1090
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1096
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[6].union.slct()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1108
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Table: sqlDollar[3].union.newNormalizableTableName(), Rows: sqlDollar[5].union.slct()}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1114
		{
			/* SKIP DOC */
			sqlVAL.union.val = &TestingRelocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1120
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1129
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Database: Name(sqlDollar[3].str)},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1138
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetZoneConfig{
				ZoneSpecifier: ZoneSpecifier{Table: sqlDollar[3].union.normalizableTableName()},
				YAMLConfig:    sqlDollar[7].union.expr(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1147
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1151
		{
			sqlVAL.union.val = &Scatter{Table: sqlDollar[3].union.newNormalizableTableName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = &Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1167
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1171
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 103:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1178
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1183
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1193
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1198
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1207
		{
			return unimplemented(sqllex, "alter set non null")
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1210
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      true,
				Column:        Name(sqlDollar[5].str),
				DropBehavior:  sqlDollar[6].union.dropBehavior(),
			}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1220
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1230
		{
			return unimplemented(sqllex, "alter set type")
		}
	case 113:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1233
		{
			sqlVAL.union.val = &AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1240
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &AlterTableValidateConstraint{
				Constraint: Name(sqlDollar[3].str),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1269
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1273
		{
			sqlVAL.union.val = nil
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.union.val = DropCascade
		}
	case 121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.union.val = DropRestrict
		}
	case 122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1287
		{
			sqlVAL.union.val = DropDefault
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1293
		{
			sqlVAL.union.val = ValidationSkip
		}
	case 124:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1297
		{
			sqlVAL.union.val = ValidationDefault
		}
	case 125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1302
		{
			return unimplementedWithIssue(sqllex, 9851)
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1303
		{
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1306
		{
			return unimplemented(sqllex, "alter using")
		}
	case 128:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1307
		{
		}
	case 129:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = &Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1334
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 131:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1357
		{
			sqlVAL.union.val = &Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1360
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1364
		{
			sqlVAL.str = "CSV"
		}
	case 134:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1391
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql.y:1395
		{
			sqlVAL.union.val = &Import{Table: sqlDollar[3].union.unresolvedName(), CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1398
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1422
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 142:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1426
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = KVOption{Key: Name(sqlDollar[1].str)}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.union.val = []KVOption{sqlDollar[1].union.kvOption()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 150:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1467
		{
		}
	case 152:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1479
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1487
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1488
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1497
		{
			sqlVAL.union.val = &CancelJob{ID: sqlDollar[3].union.expr()}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1500
		{
			return helpWith(sqllex, "CANCEL JOB")
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1508
		{
			sqlVAL.union.val = &CancelQuery{ID: sqlDollar[3].union.expr()}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1511
		{
			return helpWith(sqllex, "CANCEL QUERY")
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 167:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1521
		{
			return helpWith(sqllex, "CREATE")
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1524
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1525
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1526
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1527
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1529
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1530
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = &Delete{
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     newWhere(astWhere, sqlDollar[5].union.expr()),
				Limit:     sqlDollar[6].union.limit(),
				Returning: sqlDollar[7].union.retClause(),
			}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1549
		{
			return helpWith(sqllex, "DELETE")
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = &Discard{Mode: DiscardModeAll}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1559
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1560
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1561
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1562
		{
			return unimplemented(sqllex, "discard temporary")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1563
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1570
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1571
		{
			return helpWith(sqllex, "DROP")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1574
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1575
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1576
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1577
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 199:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1585
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = &DropView{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1600
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1607
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1615
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1623
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1630
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1638
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1646
		{
			sqlVAL.union.val = &DropDatabase{
				Name:         Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1653
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1661
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1665
		{
			sqlVAL.union.val = &DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1668
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1672
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1676
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1686
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1692
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1716
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1719
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1728
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1731
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1732
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1734
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1735
		{
			return helpWith(sqllex, "DELETE")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1736
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1737
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1738
		{
			return helpWith(sqllex, "INSERT")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1739
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1741
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1742
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1744
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1747
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1748
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1750
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1751
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1758
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1759
		{ /* SKIP DOC */
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1763
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1767
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1780
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1787
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1791
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1795
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1811
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1817
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1821
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 274:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1831
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[2].str)}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1835
		{
			sqlVAL.union.val = &Deallocate{Name: Name(sqlDollar[3].str)}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1839
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1843
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1846
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1866
		{
			return helpWith(sqllex, "GRANT")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1883
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1886
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1890
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1894
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1898
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1905
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1908
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 291:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1964
		{
			return helpWith(sqllex, "RESET")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1965
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 303:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1973
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[2].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1977
		{
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name(sqlDollar[3].str)}, Values: Exprs{DefaultVal{}}}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1980
		{
			return helpWith(sqllex, "RESET")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: DefaultVal{}}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1991
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1996
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("database")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1999
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2003
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2005
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{ /* SKIP DOC */
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2007
		{ /* SKIP DOC */
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2008
		{
			return unimplemented(sqllex, "set local")
		}
	case 321:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2021
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubDatabase, Database: Name(sqlDollar[4].str)}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2037
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2041
		{
			sqlVAL.union.val = &Scrub{Typ: ScrubTable, Table: sqlDollar[4].union.normalizableTableName(), Options: sqlDollar[7].union.scrubOptions()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2047
		{
			sqlVAL.union.val = ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2057
		{
			sqlVAL.union.val = &ScrubOptionIndex{}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2061
		{
			sqlVAL.union.val = &ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2065
		{
			sqlVAL.union.val = &ScrubOptionPhysical{}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2076
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2080
		{
			sqlVAL.union.val = &SetClusterSetting{Name: sqlDollar[4].union.unresolvedName(), Value: sqlDollar[6].union.expr()}
		}
	case 331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2083
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 332:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2089
		{
			sqlVAL.union.val = &SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2104
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 334:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2108
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 335:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2113
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2130
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2133
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2138
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2142
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2146
		{
			sqlVAL.union.val = &SetVar{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2155
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("time zone")}, Values: Exprs{sqlDollar[3].union.expr()}}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2158
		{
			return unimplemented(sqllex, "set from current")
		}
	case 346:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2160
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2166
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{sqlDollar[2].union.expr()}}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2170
		{
			/* SKIP DOC */
			sqlVAL.union.val = &SetVar{Name: UnresolvedName{Name("client_encoding")}, Values: Exprs{DefaultVal{}}}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2180
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2186
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2190
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2196
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 355:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2200
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2204
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 357:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2208
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 358:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2212
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2218
		{
			sqlVAL.union.val = Low
		}
	case 360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2222
		{
			sqlVAL.union.val = Normal
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2226
		{
			sqlVAL.union.val = High
		}
	case 362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2237
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2241
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2245
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2250
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2254
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2269
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2270
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2271
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 377:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2272
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2273
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2274
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2275
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2276
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2277
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2278
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2279
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2280
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2281
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2284
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2285
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2286
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2288
		{
			return helpWith(sqllex, "SHOW")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2295
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[2].str}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2296
		{
			sqlVAL.union.val = &ShowVar{Name: sqlDollar[3].str}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2297
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2308
		{
			sqlVAL.str = "client_encoding"
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2311
		{
			sqlVAL.str = "TIME ZONE"
		}
	case 416:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2312
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2320
		{
			sqlVAL.union.val = &ShowBackup{Path: sqlDollar[3].union.expr()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2323
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2333
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: AsStringWithFlags(sqlDollar[4].union.unresolvedName(), FmtBareIdentifiers)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2337
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2340
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2342
		{
			sqlVAL.union.val = &ShowClusterSetting{Name: "all"}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2345
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2353
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2356
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2367
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2375
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2378
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 430:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2386
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2389
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2391
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2394
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2396
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2399
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2407
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2410
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2412
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2415
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2423
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2426
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2428
		{
			sqlVAL.union.val = &ShowQueries{Cluster: true}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2432
		{
			sqlVAL.union.val = &ShowQueries{Cluster: false}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2442
		{
			sqlVAL.union.val = &ShowJobs{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2445
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 446:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2458
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2460
		{
			sqlVAL.union.val = &ShowTrace{Statement: nil, OnlyKVTrace: true}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2463
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[4].union.stmt()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2469
		{
			sqlVAL.union.val = &ShowTrace{Statement: sqlDollar[5].union.stmt(), OnlyKVTrace: true}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2478
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2481
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2483
		{
			sqlVAL.union.val = &ShowSessions{Cluster: true}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &ShowSessions{Cluster: false}
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2497
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2501
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 458:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2504
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2512
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2516
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowVar{Name: "TRANSACTION PRIORITY"}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2520
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowTransactionStatus{}
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2523
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2531
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 464:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2534
		{
			return helpWith(sqllex, "SHOW CREATE TABLE")
		}
	case 465:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = &ShowCreateView{View: sqlDollar[4].union.normalizableTableName()}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2545
		{
			return helpWith(sqllex, "SHOW CREATE VIEW")
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2553
		{
			sqlVAL.union.val = &ShowUsers{}
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2556
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 469:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2560
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{NamedZone: UnrestrictedName(sqlDollar[7].str)}}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2564
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Database: Name(sqlDollar[7].str)}}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2568
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{ZoneSpecifier{Table: sqlDollar[7].union.normalizableTableName()}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2572
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2576
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowZoneConfig{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2582
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2586
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2590
		{
			/* SKIP DOC */
			sqlVAL.union.val = &ShowFingerprints{Table: sqlDollar[5].union.newNormalizableTableName()}
		}
	case 477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2596
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 478:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2601
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 480:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2611
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 481:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2621
		{
			sqlVAL.union.val = &PauseJob{ID: sqlDollar[3].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2624
		{
			return helpWith(sqllex, "PAUSE JOB")
		}
	case 483:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &CreateTable{
				Table:         sqlDollar[3].union.normalizableTableName(),
				IfNotExists:   false,
				Interleave:    sqlDollar[7].union.interleave(),
				Defs:          sqlDollar[5].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[8].union.partitionBy(),
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2671
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil, AsColumnNames: nil}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2677
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[6].union.slct(), AsColumnNames: sqlDollar[4].union.nameList()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2681
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[9].union.slct(), AsColumnNames: sqlDollar[7].union.nameList()}
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2688
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2704
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 494:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2716
		{
			sqlVAL.union.val = &InterleaveDef{
				Parent:       sqlDollar[4].union.newNormalizableTableName(),
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2724
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2731
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropCascade
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2735
		{
			/* SKIP DOC */
			sqlVAL.union.val = DropRestrict
		}
	case 499:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2739
		{
			sqlVAL.union.val = DropDefault
		}
	case 501:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2746
		{
			sqlVAL.union.val = (*PartitionBy)(nil)
		}
	case 502:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 503:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2759
		{
			sqlVAL.union.val = &PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 504:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2768
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:   UnrestrictedName(sqlDollar[2].str),
				Tuples: sqlDollar[4].union.tuples(),
			}}, sqlDollar[6].union.listPartitions()...)
		}
	case 505:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.union.val = append([]ListPartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}, sqlDollar[7].union.listPartitions()...)
		}
	case 506:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.union.val = []ListPartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuples:       sqlDollar[4].union.tuples(),
				Subpartition: sqlDollar[5].union.partitionBy(),
			}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2793
		{
			sqlVAL.union.val = []*Tuple{{Exprs: sqlDollar[2].union.exprs()}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tuples(), &Tuple{Exprs: sqlDollar[4].union.exprs()})
		}
	case 509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2803
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2814
		{
			sqlVAL.union.val = PartitionMaxValue{}
		}
	case 513:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:2820
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:  UnrestrictedName(sqlDollar[2].str),
				Tuple: &Tuple{Exprs: sqlDollar[7].union.exprs()},
			}}, sqlDollar[10].union.rangePartitions()...)
		}
	case 514:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = append([]RangePartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}, sqlDollar[11].union.rangePartitions()...)
		}
	case 515:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = []RangePartition{{
				Name:         UnrestrictedName(sqlDollar[2].str),
				Tuple:        &Tuple{Exprs: sqlDollar[7].union.exprs()},
				Subpartition: sqlDollar[9].union.partitionBy(),
			}}
		}
	case 516:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			tableDef, err := newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2870
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2874
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: ColumnCollation(sqlDollar[2].str)}
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2878
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2882
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2886
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 528:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table:   sqlDollar[2].union.normalizableTableName(),
				Col:     Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2938
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2947
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2972
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2977
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2989
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    sqlDollar[3].union.idxElems(),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3009
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 544:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3037
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3043
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3047
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 547:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3052
		{
			return unimplemented(sqllex, "match full")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3053
		{
			return unimplemented(sqllex, "match partial")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3054
		{
			return unimplemented(sqllex, "match simple")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3055
		{
		}
	case 551:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3062
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3066
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3070
		{
			sqlVAL.union.val = ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3074
		{
			sqlVAL.union.val = ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3078
		{
			sqlVAL.union.val = ReferenceActions{}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3084
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3090
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3098
		{
			sqlVAL.union.val = NoAction
		}
	case 559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3102
		{
			sqlVAL.union.val = Restrict
		}
	case 560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3106
		{
			sqlVAL.union.val = Cascade
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3110
		{
			sqlVAL.union.val = SetNull
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3114
		{
			sqlVAL.union.val = SetDefault
		}
	case 563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3120
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 564:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3124
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3128
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3138
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3153
		{
			sqlVAL.union.val = &CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3156
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 572:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = nil
		}
	case 573:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3174
		{
			sqlVAL.union.val = &CreateView{
				Name:        sqlDollar[3].union.normalizableTableName(),
				ColumnNames: sqlDollar[4].union.nameList(),
				AsSource:    sqlDollar[6].union.slct(),
			}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3199
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:3210
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3221
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3225
		{
			sqlVAL.union.val = true
		}
	case 579:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3229
		{
			sqlVAL.union.val = false
		}
	case 580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3235
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3251
		{
			return unimplemented(sqllex, "index_elem func expr")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3252
		{
			return unimplemented(sqllex, "index_elem a_expr")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3255
		{
			return unimplementedWithIssue(sqllex, 16619)
		}
	case 586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3256
		{
		}
	case 587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = Ascending
		}
	case 588:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = Descending
		}
	case 589:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 590:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3274
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3281
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3285
		{
			sqlVAL.union.val = &AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3291
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: false}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3295
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: false}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3299
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3303
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3307
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:3309
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3313
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false, IsView: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3317
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true, IsView: true}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3323
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3327
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3333
		{
			sqlVAL.union.val = true
		}
	case 604:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3337
		{
			sqlVAL.union.val = false
		}
	case 605:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3342
		{
		}
	case 606:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3343
		{
		}
	case 607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3351
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3354
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3362
		{
			sqlVAL.union.val = &ResumeJob{ID: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3365
		{
			return helpWith(sqllex, "RESUME JOB")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3373
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3376
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 614:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3380
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3381
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3382
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3400
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3402
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 622:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3405
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3415
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3418
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3420
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3423
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3431
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3438
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3441
		{
		}
	case 630:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3442
		{
		}
	case 631:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3446
		{
			sqlVAL.str = ""
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3450
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 633:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3454
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.str = ""
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3464
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3468
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BeginTransaction{}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3484
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3488
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 641:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3501
		{
		}
	case 642:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3503
		{
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3507
		{
			sqlVAL.union.val = TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3511
		{
			sqlVAL.union.val = TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3515
		{
			sqlVAL.union.val = TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3521
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3527
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3533
		{
			sqlVAL.union.val = ReadOnly
		}
	case 649:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3537
		{
			sqlVAL.union.val = ReadWrite
		}
	case 650:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3547
		{
			sqlVAL.union.val = &CreateDatabase{
				Name:     Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:3557
		{
			sqlVAL.union.val = &CreateDatabase{
				IfNotExists: true,
				Name:        Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3567
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3571
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 654:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3575
		{
			sqlVAL.str = ""
		}
	case 655:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3581
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3585
		{
			sqlVAL.str = ""
		}
	case 657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3591
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 658:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3595
		{
			sqlVAL.str = ""
		}
	case 659:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3605
		{
			sqlVAL.str = ""
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3610
		{
		}
	case 662:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3611
		{
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 664:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3629
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 665:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3635
		{
			return helpWith(sqllex, "INSERT")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3646
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3652
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3656
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3664
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3684
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3688
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3694
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3698
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 677:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3700
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 678:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3706
		{
			ret := ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3711
		{
			sqlVAL.union.val = returningNothingClause
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3715
		{
			sqlVAL.union.val = AbsentReturningClause
		}
	case 681:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retClause()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3729
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3733
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3734
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3738
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3742
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 689:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3752
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3758
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: sqlDollar[5].union.expr()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3801
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3807
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3811
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3826
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3830
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3834
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), LockForUpdate: sqlDollar[3].union.bool(), Limit: sqlDollar[4].union.limit()}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), LockForUpdate: sqlDollar[4].union.bool()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3850
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), LockForUpdate: sqlDollar[4].union.bool(), Limit: sqlDollar[5].union.limit()}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), LockForUpdate: sqlDollar[5].union.bool()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3861
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 707:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3896
		{
			return helpWith(sqllex, "SELECT")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3897
		{
			return helpWith(sqllex, "VALUES")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3898
		{
			return helpWith(sqllex, "TABLE")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3934
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3945
		{
			return helpWith(sqllex, "SELECT")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3958
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3967
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3982
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.tblExpr()}},
				tableSelect: true,
			}
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3989
		{
			return helpWith(sqllex, "TABLE")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4000
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4001
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4002
		{
			return unimplemented(sqllex, "with cte_list")
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4005
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 725:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4006
		{
			return unimplemented(sqllex, "cte_list")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4009
		{
			return unimplemented(sqllex, "cte")
		}
	case 727:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4012
		{
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4013
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4016
		{
			return unimplemented(sqllex, "with_clause")
		}
	case 730:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4017
		{
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4020
		{
		}
	case 732:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4021
		{
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = true
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = false
		}
	case 735:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = false
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4039
		{
			sqlVAL.union.val = true
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4044
		{
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4045
		{
		}
	case 739:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4049
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4053
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4059
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4069
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 744:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4075
		{
			sqlVAL.union.val = &Order{OrderType: OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4079
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: sqlDollar[3].union.normalizableTableName()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = &Order{OrderType: OrderByIndex, Direction: sqlDollar[5].union.dir(), Table: sqlDollar[2].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[4].str)}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 749:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4108
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = (*Limit)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4123
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = &Limit{Count: sqlDollar[3].union.expr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4138
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4145
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4152
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4161
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 763:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4169
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(1)}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4175
		{
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4176
		{
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4179
		{
		}
	case 767:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4180
		{
		}
	case 768:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4202
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4212
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 773:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4223
		{
			sqlVAL.union.val = false
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = true
		}
	case 775:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4248
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[3].union.exprs()}}}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4251
		{
			return helpWith(sqllex, "VALUES")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4253
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[4].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4268
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &From{}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 783:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4290
		{
			/* SKIP DOC */
			id, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4308
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			if (a.Index != "" || a.IndexID != 0) && (b.Index != "" || b.IndexID != 0) {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			// At this point either a or b contains "no information"
			// (the empty string for Index and the value 0 for IndexID).
			// Using the addition operator automatically selects the non-zero
			// value, avoiding a conditional branch.
			a.Index = a.Index + b.Index
			a.IndexID = a.IndexID + b.IndexID
			a.NoIndexJoin = a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = a
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4331
		{
			sqlVAL.union.val = &IndexHints{Index: UnrestrictedName(sqlDollar[2].str)}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4335
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &IndexHints{IndexID: IndexID(id)}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:4372
		{
			/* SKIP DOC */
			id, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &AliasedTableExpr{
				Expr: &TableRef{
					TableID: id,
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				Hints:      sqlDollar[6].union.indexHints(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4390
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), Ordinality: sqlDollar[3].union.bool(), As: sqlDollar[4].union.aliasClause()}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4394
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}, Ordinality: sqlDollar[5].union.bool(), As: sqlDollar[6].union.aliasClause()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4397
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4399
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4407
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &ParenTableExpr{sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4427
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4432
		{
			sqlVAL.union.val = nil
		}
	case 801:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4433
		{
			sqlVAL.union.val = []ColumnID{}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4434
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 803:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4438
		{
			id, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []ColumnID{ColumnID(id)}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4444
		{
			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), ColumnID(id))
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4452
		{
			sqlVAL.union.val = true
		}
	case 806:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4456
		{
			sqlVAL.union.val = false
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4476
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4480
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4484
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4488
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4492
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4496
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4502
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4506
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4510
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4514
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4521
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4527
		{
			sqlVAL.union.val = AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4531
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4537
		{
			sqlVAL.str = astFullJoin
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4541
		{
			sqlVAL.str = astLeftJoin
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4545
		{
			sqlVAL.str = astRightJoin
		}
	case 824:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4549
		{
			sqlVAL.str = astInnerJoin
		}
	case 825:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4555
		{
		}
	case 826:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4556
		{
		}
	case 827:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4567
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4571
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 829:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4577
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4581
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4585
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 832:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4589
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4595
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 834:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4612
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4616
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4620
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4626
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 839:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4630
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4642
		{
			if exprs := sqlDollar[2].union.exprs(); exprs != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), exprs)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4656
		{
			/* SKIP DOC */
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4664
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), Exprs{NewDInt(DInt(-1))})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4675
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4679
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 845:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4686
		{
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4688
		{
			/* SKIP DOC */
			sqlVAL.union.val = Exprs{NewDInt(DInt(-1))}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4691
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4699
		{
			return unimplemented(sqllex, "simple_type const_interval")
		}
	case 854:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4701
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 855:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4705
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4709
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4713
		{
			sqlVAL.union.val = jsonbColType
		}
	case 858:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4717
		{
			sqlVAL.union.val = jsonColType
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4721
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 860:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4725
		{
			sqlVAL.union.val = nameColTypeName
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4729
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 862:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4733
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4737
		{
			sqlVAL.union.val = uuidColTypeUUID
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4741
		{
			sqlVAL.union.val = ipnetColTypeINet
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4745
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 866:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4749
		{
			sqlVAL.union.val = oidColTypeOid
		}
	case 867:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4753
		{
			sqlVAL.union.val = int2vectorColType
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4757
		{
			// See https://www.postgresql.org/docs/9.1/static/datatype-character.html
			// Postgres supports a special character type named "char" (with the quotes)
			// that is a single-character column type. It's used by system tables.
			// Eventually this clause will be used to parse user-defined types as well,
			// since their names can be quoted.
			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = stringColTypeChar
			} else {
				sqllex.Error("syntax error")
				return 1
			}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4788
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 874:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4797
		{
			prec, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4811
		{
			sqlVAL.union.val = nil
		}
	case 876:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4818
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 877:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4822
		{
			sqlVAL.union.val = intColTypeInt2
		}
	case 878:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4826
		{
			sqlVAL.union.val = intColTypeInt4
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4830
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4834
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4838
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 882:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4842
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4846
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4850
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4854
		{
			sqlVAL.union.val = floatColTypeFloat4
		}
	case 886:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4858
		{
			sqlVAL.union.val = floatColTypeFloat8
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4862
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = NewFloatColType(int(prec), len(nv.OrigString) > 0)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4872
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 889:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4876
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4885
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4894
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4903
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4907
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 894:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4914
		{
			sqlVAL.union.val = oidColTypeRegProc
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4918
		{
			sqlVAL.union.val = oidColTypeRegProcedure
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4922
		{
			sqlVAL.union.val = oidColTypeRegClass
		}
	case 897:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4926
		{
			sqlVAL.union.val = oidColTypeRegType
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4930
		{
			sqlVAL.union.val = oidColTypeRegNamespace
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4936
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4940
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4958
		{
			n, err := sqlDollar[4].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4974
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 911:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4990
		{
			n, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5006
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 913:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5012
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 914:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5016
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 915:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5020
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 916:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5024
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5029
		{
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5030
		{
		}
	case 919:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5035
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 920:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5039
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 921:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5043
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 922:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5047
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 923:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5051
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5056
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 925:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5062
		{
			sqlVAL.union.val = year
		}
	case 926:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5066
		{
			sqlVAL.union.val = month
		}
	case 927:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5070
		{
			sqlVAL.union.val = day
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5074
		{
			sqlVAL.union.val = hour
		}
	case 929:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5078
		{
			sqlVAL.union.val = minute
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5082
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5088
		{
			sqlVAL.union.val = month
		}
	case 932:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5092
		{
			sqlVAL.union.val = hour
		}
	case 933:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5096
		{
			sqlVAL.union.val = minute
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5100
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 935:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5104
		{
			sqlVAL.union.val = minute
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5108
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 937:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5112
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 938:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5116
		{
			sqlVAL.union.val = nil
		}
	case 939:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5122
		{
			sqlVAL.union.val = second
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5125
		{
			return unimplemented(sqllex, "interval_second")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5149
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5153
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5157
		{
			sqlVAL.union.val = &CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5160
		{
			return unimplemented(sqllex, "at tz")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5169
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5173
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5177
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5181
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 950:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5185
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5189
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 952:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5193
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5197
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5201
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5205
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 956:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5209
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 957:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5213
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5217
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5221
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5225
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5229
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Existence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5233
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SomeExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5237
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: AllExistence, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5241
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5245
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5249
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5253
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 968:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5257
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 969:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5261
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5265
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5269
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5273
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5277
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5281
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("JSON_REMOVE_PATH"), Exprs: Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5285
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5289
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5293
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 978:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5297
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5301
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5305
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5309
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5313
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5317
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5321
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5325
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5329
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5333
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 988:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5337
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5341
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5345
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5349
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5353
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 993:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5357
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: NewStrVal("NaN")}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5361
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 995:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5365
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 996:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5368
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5370
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5374
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5378
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5382
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5386
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5390
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5394
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5398
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5402
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5406
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5410
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5414
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5418
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5422
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5426
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5430
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5434
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5451
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5466
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), syntaxMode: castShort}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5470
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), syntaxMode: annotateShort}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5474
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5478
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5482
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5514
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5518
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5522
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5530
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5542
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5550
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5554
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5558
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5562
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5566
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5570
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:5574
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5587
		{
			sqlVAL.union.val = &IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5595
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5606
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5611
		{
			colNum, err := sqlDollar[2].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = NewOrdinalReference(int(colNum - 1))
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5624
		{
			sqlVAL.union.val = NewPlaceholder(sqlDollar[1].str)
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5628
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5633
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5637
		{
			sqlVAL.union.val = &ArrayFlatten{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5641
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5645
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5649
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5657
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5661
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5664
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5665
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5667
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5671
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Type: DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5675
		{
			sqlVAL.union.val = &FuncExpr{Func: sqlDollar[1].union.resolvableFunctionReference(), Exprs: Exprs{StarExpr()}}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5678
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFunctionReference())
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5689
		{
			f := sqlDollar[1].union.expr().(*FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5696
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5705
		{
			return unimplemented(sqllex, "func_application")
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5706
		{
			return unimplemented(sqllex, "func_expr_common_subexpr")
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5710
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation")
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5712
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5716
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5719
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5721
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5725
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5728
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5730
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5734
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5737
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5738
		{
			return unimplemented(sqllex, "current role")
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5740
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5744
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str)}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5747
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5749
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5753
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("current_user")}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5757
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), syntaxMode: castExplicit}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5761
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), syntaxMode: annotateExplicit}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5765
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5768
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5770
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5773
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5775
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5778
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5780
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5784
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5787
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5788
		{
			return unimplemented(sqllex, "treat")
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5790
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5794
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5798
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5802
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:5806
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5810
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5814
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5818
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5822
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5825
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5827
		{
			sqlVAL.union.val = &FuncExpr{Func: wrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5830
		{
			return helpWithFunction(sqllex, ResolvableFunctionReference{UnresolvedName{Name(sqlDollar[1].str)}})
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5834
		{
			return unimplemented(sqllex, "within group")
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5835
		{
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5839
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5843
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5850
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5854
		{
			sqlVAL.union.val = Window(nil)
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5860
		{
			sqlVAL.union.val = Window{sqlDollar[1].union.windowDef()}
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5864
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5870
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5878
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5882
		{
			sqlVAL.union.val = &WindowDef{Name: Name(sqlDollar[2].str)}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5886
		{
			sqlVAL.union.val = (*WindowDef)(nil)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:5893
		{
			sqlVAL.union.val = &WindowDef{
				RefName:    Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
			}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5912
		{
			sqlVAL.str = ""
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:5918
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5922
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5932
		{
			return unimplemented(sqllex, "frame range")
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5933
		{
			return unimplemented(sqllex, "frame rows")
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:5934
		{
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5937
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5938
		{
			return unimplemented(sqllex, "frame_extent")
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5944
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5945
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5946
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5947
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:5948
		{
			return unimplemented(sqllex, "frame_bound")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5959
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5963
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:5969
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:5975
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5981
		{
			sqlVAL.union.val = Any
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5985
		{
			sqlVAL.union.val = Some
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5989
		{
			sqlVAL.union.val = All
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5994
		{
			sqlVAL.union.val = Plus
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5995
		{
			sqlVAL.union.val = Minus
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5996
		{
			sqlVAL.union.val = Mult
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5997
		{
			sqlVAL.union.val = Div
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5998
		{
			sqlVAL.union.val = FloorDiv
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:5999
		{
			sqlVAL.union.val = Mod
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6000
		{
			sqlVAL.union.val = Bitand
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6001
		{
			sqlVAL.union.val = Bitor
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6002
		{
			sqlVAL.union.val = Pow
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6003
		{
			sqlVAL.union.val = Bitxor
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6004
		{
			sqlVAL.union.val = LT
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6005
		{
			sqlVAL.union.val = GT
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6006
		{
			sqlVAL.union.val = EQ
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6007
		{
			sqlVAL.union.val = LE
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6008
		{
			sqlVAL.union.val = GE
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6009
		{
			sqlVAL.union.val = NE
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6013
		{
			sqlVAL.union.val = Like
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6014
		{
			sqlVAL.union.val = NotLike
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6015
		{
			sqlVAL.union.val = ILike
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6016
		{
			sqlVAL.union.val = NotILike
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6028
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6034
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6038
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6044
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6048
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6054
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6058
		{
			sqlVAL.union.val = &Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6064
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6068
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6074
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6078
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6100
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6104
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6108
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6114
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6121
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6125
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6142
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6146
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6150
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6154
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6158
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6164
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6170
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6176
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6180
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6184
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6190
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6194
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6205
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6212
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6216
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:6222
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6228
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6232
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6239
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6245
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6249
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6256
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6262
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6268
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6274
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6278
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6284
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6288
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6294
		{
			sqlVAL.union.val = ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6298
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6303
		{
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6304
		{
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6308
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6312
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6318
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6327
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: UnrestrictedName(sqlDollar[2].str)}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6331
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6335
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6343
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6347
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6353
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6357
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6363
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6367
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6378
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6382
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6388
		{
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: UnrestrictedName(sqlDollar[3].str)}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6392
		{
			// This case allows specifying just an index name (potentially schema-qualified).
			// We temporarily store the index name in Table (see TableNameWithIndex).
			sqlVAL.union.val = TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), SearchTable: true}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6405
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6409
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6413
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6417
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6423
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6427
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6433
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6436
		{
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6446
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6450
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6457
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6461
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6465
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6469
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:6472
		{
			return unimplemented(sqllex, "func const")
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6474
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType(), syntaxMode: castPrepend}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6478
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:6481
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6483
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6487
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:6491
		{
			sqlVAL.union.val = DNull
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6498
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:6502
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6508
		{
			// We don't carry opt_interval information into the column type, so we need
			// to parse the interval directly.
			var err error
			var d Datum
			if sqlDollar[3].union.val == nil {
				d, err = ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6543
		{
			sqlVAL.str = ""
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:6549
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:6553
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
